{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "set_flag_if_unset_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 setFlagIfUnset_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "set_flag_if_unset_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "get_string_length_08000178",
            "code": "\nchar * get_string_length_08000178(char *string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_index;\n  \n  current_index = string;\n  do {\n    next_char = current_index + 1;\n    current_char = *current_index;\n    current_index = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "get_string_length_08000178",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_index"
            },
            "calling": [
                "sendString",
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "trigger_software_interrupt_08000188",
            "code": "\nvoid triggerSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "trigger_software_interrupt_08000188"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_afl_call_0800018c",
            "code": "\nundefined4 executeAflCall_0800018c(undefined4 inputParam,undefined4 unusedParam,undefined4 unusedParam2,undefined4 outputParam)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = aflCall(1,inputParam,0,0,outputParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_afl_call_0800018c",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "param_3": "unusedParam2",
                "param_4": "outputParam",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "analog_write_or_set_servo_08000214",
            "code": "\nvoid analogWriteOrSetServo_08000214(uint pinNumber,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool isServo;\n  int pinMode;\n  \n  if (0x3b < (int)pinNumber) {\n    return;\n  }\n  pinMode = getPinMode(&DAT_200003d4,pinNumber,param_3,param_4,param_4);\n  if (pinMode == 3) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        pinMode = 0;\n      }\n      else {\n        pinMode = convertPinNametoDigitalPin();\n        if (pinMode == 0) {\n          pinMode = 0;\n        }\n        else {\n          pinMode = convertPinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMode == 1) {\n            pinMode = 0;\n          }\n          else {\n            pinMode = isPinInPinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pinMode = 0;\n    }\n    if (pinMode != 0) {\n      analogWrite(pinNumber,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n  }\n  else if (pinMode == 4) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isServo = false;\n      }\n      else {\n        pinMode = convertPinNametoDigitalPin();\n        if (pinMode == 0) {\n          isServo = false;\n        }\n        else {\n          pinMode = convertPinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMode == 1) {\n            isServo = false;\n          }\n          else {\n            isServo = true;\n          }\n        }\n      }\n    }\n    else {\n      isServo = false;\n    }\n    if (isServo) {\n      setServoValue(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "analog_write_or_set_servo_08000214",
                "param_1": "pinNumber",
                "param_2": "value",
                "bVar1": "isServo",
                "iVar2": "pinMode",
                "pinNametoDigitalPin": "convertPinNametoDigitalPin",
                "pin_in_pinmap": "isPinInPinmap",
                "set_servo_value_080026b0": "setServoValue"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "pin_control_0800021a",
            "code": "\nvoid pinControl_0800021a(uint pinNumber,undefined4 value,undefined4 param3,undefined4 param4)\n\n{\n  bool isValidPin;\n  int pinStatus;\n  \n  pinStatus = getPinMode(&DAT_200003d4,pinNumber,param3,param4,param4);\n  if (pinStatus == 3) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        pinStatus = 0;\n      }\n      else {\n        pinStatus = pinNametoDigitalPin();\n        if (pinStatus == 0) {\n          pinStatus = 0;\n        }\n        else {\n          pinStatus = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinStatus == 1) {\n            pinStatus = 0;\n          }\n          else {\n            pinStatus = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pinStatus = 0;\n    }\n    if (pinStatus != 0) {\n      analogWrite(pinNumber,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n  }\n  else if (pinStatus == 4) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValidPin = false;\n      }\n      else {\n        pinStatus = pinNametoDigitalPin();\n        if (pinStatus == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinStatus = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinStatus == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      set_servo_value_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "pin_control_0800021a",
                "param_1": "pinNumber",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "isValidPin",
                "iVar2": "pinStatus"
            },
            "calling": [
                "analogWriteCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "analogWrite",
                "FUN_080026b0",
                "setPinState",
                "getPinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_bit_08000488",
            "code": "\nvoid updateDataBit_08000488(uint bitPosition,int flag)\n\n{\n  undefined4 analogData;\n  \n  if ((int)bitPosition < 0xe) {\n    if (flag == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (bitPosition & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (bitPosition & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      analogData = readAnalogValue();\n      sendAnalogDataToServer(&DAT_200003d4,bitPosition,analogData);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_bit_08000488",
                "param_1": "bitPosition",
                "param_2": "flag",
                "uVar1": "analogData",
                "analogRead": "readAnalogValue",
                "send_analog_data_08002ef2": "sendAnalogDataToServer"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [
                "analogRead",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_servos_080004d4",
            "code": "\nvoid initializeServos_080004d4(int flag,int code)\n\n{\n  int counter;\n  undefined *servoPointer;\n  \n  if (flag != 1) {\n    return;\n  }\n  if (code == 0xffff) {\n    servoPointer = &DAT_2000022c;\n    for (counter = 0xb; -1 < counter; counter = counter + -1) {\n      Servo(servoPointer);\n      servoPointer = servoPointer + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_servos_080004d4",
                "param_1": "flag",
                "param_2": "code",
                "iVar1": "counter",
                "puVar2": "servoPointer"
            },
            "calling": [],
            "called": [
                "Servo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "attach_servo_08000500",
            "code": "\nvoid attachServo_08000500(int servoIndex,int pinMode,int outputValue,undefined4 unused)\n\n{\n  if (0xb < DAT_200001ed) {\n    send_string_from_offset_08002f14(&DAT_200003d4,\"Max servos attached\",outputValue,unused,unused);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < pinMode) && (0 < outputValue)) {\n    configure_pin_080025ac(&DAT_2000022c + (uint)(byteValue)(&DAT_200001f0)[servoIndex] * 3,servoIndex,pinMode,outputValue);\n    return;\n  }\n  configure_pin_08002634(&DAT_2000022c + (uint)(byteValue)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "param_1": "servoIndex",
                "param_2": "pinMode",
                "param_3": "outputValue",
                "param_4": "unused",
                "byte": "byteValue"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [
                "FUN_080025ac",
                "FUN_08002634",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "detach_and_update_data_08000588",
            "code": "\nvoid detachAndUpdateData_08000588(int index)\n\n{\n  detach(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "detach_and_update_data_08000588",
                "param_1": "index"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [
                "detach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "configure_pin_080005f8",
            "code": "\nvoid configurePin_080005f8(uint pinNumber,int mode)\n\n{\n  int pinModeResult;\n  char isPinMode6;\n  bool isValidPin;\n  uint analogPinNumber;\n  \n  pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n  if (pinModeResult != 0x7f) {\n    pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n    if (pinModeResult == 6) {\n      if (DAT_20000170 == '\\0') {\n        isPinMode6 = '\\0';\n      }\n      else {\n        isPinMode6 = DAT_20000170;\n        if (mode == 6) {\n          isPinMode6 = '\\0';\n        }\n      }\n    }\n    else {\n      isPinMode6 = '\\0';\n    }\n    if (isPinMode6 != '\\0') {\n      disableI2CPins();\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValidPin = false;\n      }\n      else {\n        pinModeResult = pinNametoDigitalPin();\n        if (pinModeResult == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinModeResult == 1) {\n            isValidPin = false;\n          }\n          else if (mode == 4) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      if ((byte)(&DAT_200001f0)[pinNumber] < 0xc) {\n        pinModeResult = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3);\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        detachServo(pinNumber);\n      }\n    }\n    analogPinNumber = pinNumber - 0x2e & 0xff;\n    if (analogPinNumber < 0xe) {\n      if (pinNumber < 0x3c) {\n        pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n      }\n      else {\n        pinModeResult = -1;\n      }\n      pinModeResult = pinNametoDigitalPin(pinModeResult);\n      if (pinModeResult == 0) {\n        isValidPin = false;\n      }\n      else {\n        if (pinNumber < 0x3c) {\n          pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          pinModeResult = -1;\n        }\n        pinModeResult = pinNametoDigitalPin(pinModeResult);\n        if (pinModeResult == 1) {\n          isValidPin = false;\n        }\n        else {\n          isValidPin = true;\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      reportAnalogCallback(analogPinNumber,mode == 2);\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValidPin = false;\n      }\n      else {\n        pinModeResult = pinNametoDigitalPin();\n        if (pinModeResult == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinModeResult == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] | (byte)(1 << (pinNumber & 7));\n      }\n      else {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] & ~(byte)(1 << (pinNumber & 7));\n      }\n    }\n    setPinState(&DAT_200003d4,pinNumber,0);\n    switch(mode) {\n    case 0:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinMode(pinNumber,0);\n        setPinMode(&DAT_200003d4,pinNumber,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n        if (pinModeResult == 3) {\n          digitalWrite(pinNumber,0);\n        }\n        pinMode(pinNumber,1);\n        setPinMode(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n      break;\n    case 2:\n      if (analogPinNumber < 0xe) {\n        if (pinNumber < 0x3c) {\n          pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          pinModeResult = -1;\n        }\n        pinModeResult = pinNametoDigitalPin(pinModeResult);\n        if (pinModeResult == 0) {\n          isValidPin = false;\n        }\n        else {\n          if (pinNumber < 0x3c) {\n            pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n          }\n          else {\n            pinModeResult = -1;\n          }\n          pinModeResult = pinNametoDigitalPin(pinModeResult);\n          if (pinModeResult == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        if (pinNumber < 0x3c) {\n          if ((&DAT_0800a908)[pinNumber] == -1) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin();\n            if (pinModeResult == 0) {\n              isValidPin = false;\n            }\n            else {\n              pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n              if (pinModeResult == 1) {\n                isValidPin = false;\n              }\n            }\n          }\n        }\n        else {\n          isValidPin = false;\n        }\n        if (isValidPin) {\n          pinMode(pinNumber,0);\n        }\n        setPinMode(&DAT_200003d4,pinNumber,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          pinModeResult = 0;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            pinModeResult = 0;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              pinModeResult = 0;\n            }\n            else {\n              pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        pinMode(pinNumber,1);\n        analogWrite(pinNumber,0);\n        setPinMode(&DAT_200003d4,pinNumber,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        setPinMode(&DAT_200003d4,pinNumber,4);\n        if (((byte)(&DAT_200001f0)[pinNumber] != 0xff) &&\n           (pinModeResult = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3), pinModeResult != 0))\n        {\n          isValidPin = false;\n        }\n        if (isValidPin) {\n          attachServo(pinNumber,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_string_from_offset_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          pinModeResult = 0;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            pinModeResult = 0;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              pinModeResult = 0;\n            }\n            else {\n              pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a69c);\n              if (pinModeResult == 0) {\n                pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        setPinMode(&DAT_200003d4,pinNumber,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinMode(pinNumber,2);\n        setPinMode(&DAT_200003d4,pinNumber,0xb);\n        setPinState(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "configure_pin_080005f8",
                "param_1": "pinNumber",
                "param_2": "mode",
                "iVar1": "pinModeResult",
                "cVar2": "isPinMode6",
                "bVar3": "isValidPin",
                "uVar4": "analogPinNumber"
            },
            "calling": [
                "sysexCallback",
                "enableI2CPins",
                "systemResetCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "analogWrite",
                "FUN_08002f14",
                "digitalWrite",
                "setPinState",
                "setPinMode",
                "attachServo",
                "pinNametoDigitalPin",
                "reportAnalogCallback",
                "disableI2CPins",
                "getPinMode",
                "attached",
                "pinMode",
                "detachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_pins_08000a64",
            "code": "\nvoid initialize_pins_08000a64(void)\n\n{\n  int pin_status;\n  uint pin_index;\n  \n  for (pin_index = 0; pin_index < 0x3c; pin_index = pin_index + 1 & 0xff) {\n    if (pin_index < 0x3c) {\n      if ((&DAT_0800a908)[pin_index] == -1) {\n        pin_status = 0;\n      }\n      else {\n        pin_status = pinNametoDigitalPin();\n        if (pin_status == 0) {\n          pin_status = 0;\n        }\n        else {\n          pin_status = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pin_index]);\n          if (pin_status == 1) {\n            pin_status = 0;\n          }\n          else {\n            pin_status = pin_in_pinmap((int)(char)(&DAT_0800a908)[pin_index],&DAT_0800a69c);\n            if (pin_status == 0) {\n              pin_status = pin_in_pinmap((int)(char)(&DAT_0800a908)[pin_index],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      pin_status = 0;\n    }\n    if (pin_status != 0) {\n      setPinModeCallback(pin_index,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2_c_device_08002a26(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_pins_08000a64",
                "iVar1": "pin_status",
                "uVar2": "pin_index"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "FUN_08002a26",
                "setPinModeCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_i2_c_08000aec",
            "code": "\nvoid initializeI2C_08000aec(void)\n\n{\n  bool isPinModeValid;\n  int mappedPin;\n  uint index;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    disableI2CPins();\n  }\n  for (index = 0; index < 5; index = index + 1 & 0xff) {\n    (&DAT_200001e8)[index] = 0;\n    (&DAT_20000174)[index] = 0;\n    (&DAT_20000180)[index] = 0;\n  }\n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if ((index - 0x2e & 0xff) < 0xe) {\n      if (index < 0x3c) {\n        mappedPin = (int)(char)(&DAT_0800a908)[index];\n      }\n      else {\n        mappedPin = -1;\n      }\n      mappedPin = mapPinNameToDigitalPin(mappedPin);\n      if (mappedPin == 0) {\n        isPinModeValid = false;\n      }\n      else {\n        if (index < 0x3c) {\n          mappedPin = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          mappedPin = -1;\n        }\n        mappedPin = mapPinNameToDigitalPin(mappedPin);\n        if (mappedPin == 1) {\n          isPinModeValid = false;\n        }\n        else {\n          isPinModeValid = true;\n        }\n      }\n    }\n    else {\n      isPinModeValid = false;\n    }\n    if (isPinModeValid) {\n      setCallbackPinMode(index,2);\n    }\n    else {\n      if ((((index < 0x3c) && ((&DAT_0800a908)[index] != -1)) &&\n          (mappedPin = mapPinNameToDigitalPin(), mappedPin != 0)) &&\n         (mappedPin = mapPinNameToDigitalPin((int)(char)(&DAT_0800a908)[index]), mappedPin != 1)) {\n        isPinModeValid = true;\n      }\n      if (isPinModeValid) {\n        setCallbackPinMode(index,1);\n      }\n    }\n    (&DAT_200001f0)[index] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_i2_c_08000aec",
                "bVar1": "isPinModeValid",
                "iVar2": "mappedPin",
                "uVar3": "index",
                "pinNametoDigitalPin": "mapPinNameToDigitalPin",
                "setPinModeCallback": "setCallbackPinMode"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinNametoDigitalPin",
                "disableI2CPins",
                "setPinModeCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "send_digital_port_and_update_value_08000be8",
            "code": "\nvoid send_digital_port_and_update_value_08000be8(int port_index,uint mask,int condition,undefined4 param)\n\n{\n  undefined1 *output_buffer;\n  undefined1 *updated_value;\n  \n  output_buffer = &DAT_20000174;\n  updated_value = (undefined1 *)((byte)(&DAT_20000174)[port_index] & mask);\n  if ((condition != 0) ||\n     (output_buffer = (undefined1 *)(uint)(byte)(&DAT_20000180)[port_index], updated_value != output_buffer)) {\n    send_digital_port_wrapper_08002efe(&DAT_200003d4,port_index,updated_value,output_buffer,param);\n    (&DAT_20000180)[port_index] = (char)updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "send_digital_port_and_update_value_08000be8",
                "param_1": "port_index",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "param",
                "puVar1": "output_buffer",
                "puVar2": "updated_value"
            },
            "calling": [
                "checkDigitalInputs"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "update_output_ports_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid updateOutputPorts_08000ef8(void)\n\n{\n  byte flag;\n  int pinValue;\n  bool isHigh;\n  byte outputValue;\n  \n  flag = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(3);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((flag & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(2);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(1);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(10);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(2);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x13);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(3);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x15);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(4);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x14);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(5);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1a);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(6);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(8);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(7);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(0,outputValue);\n  }\n  flag = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(9);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((flag & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(8);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x27);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(9);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x16);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(10);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(7);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xb);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(6);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xc);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(5);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xd);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x19);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xe);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x18);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xf);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(1,outputValue,0);\n  }\n  flag = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2a);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((flag & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x10);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2c);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x11);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xd);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x13);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xe);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x14);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xf);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x15);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x17);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x16);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2d);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x17);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(2,outputValue,0);\n  }\n  flag = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2e);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((flag & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x18);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2f);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x19);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x30);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1a);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x31);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1b);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x22);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1c);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x23);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1d);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2b);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1e);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x32);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1f);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(3,outputValue,0);\n  }\n  flag = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x29);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((flag & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x20);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x28);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x21);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x26);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x22);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x25);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x23);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xc);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x24);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xb);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x25);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1c);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x26);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isHigh = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1b);\n      if (pinValue == 1) {\n        isHigh = false;\n      }\n      else if ((flag & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x27);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(4,outputValue,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "update_output_ports_08000ef8",
                "bVar1": "flag",
                "iVar2": "pinValue",
                "bVar3": "isHigh",
                "bVar4": "outputValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_firmware_08001b48",
            "code": "\nvoid initializeFirmware_08001b48(void)\n\n{\n  setFirmwareNameAndVersion\n            (&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",2,\n             5);\n  update_data_08002f2c(&DAT_200003d4,0xe0,0x8000215);\n  update_data_08002f2c(&DAT_200003d4,0x90,label1);\n  update_data_08002f2c(&DAT_200003d4,0xc0,0x8000489);\n  update_data_08002f2c(&DAT_200003d4,0xd0,label2);\n  update_data_08002f2c(&DAT_200003d4,0xf4,0x80005f9);\n  update_data_08002f2c(&DAT_200003d4,0xf5,label3);\n  initializeData(&DAT_200003d4,0xf0,0x8001cd1);\n  updatePointerIfParamIsMax(&DAT_200003d4,0xff,0x8000aed);\n  initializeVersionInfo(&DAT_200003d4,0xe100);\n  resetCallback();\n  forkServer(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_firmware_08001b48",
                "&LAB_080002ec_1": "label1",
                "&LAB_08000c18_1": "label2",
                "&LAB_080001a8_1": "label3",
                "initialize_data_08002f94": "initializeData",
                "update_pointer_if_param_is_max_08002f84": "updatePointerIfParamIsMax",
                "initialize_version_info_08003048": "initializeVersionInfo",
                "systemResetCallback": "resetCallback",
                "startForkserver": "forkServer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "FUN_08002f2c",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f94",
                "startForkserver",
                "setFirmwareNameAndVersion",
                "systemResetCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "send_data_08001bf8",
            "code": "\nvoid send_data_08001bf8(undefined4 data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  send_data_08001bf8_0800288c(&DAT_20000314,data,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "send_data_08001bf8",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_byte_from_memory_08001c08",
            "code": "\nundefined readByteFromMemory_08001c08(void)\n\n{\n  undefined byteValue;\n  \n  byteValue = read_byte_from_memory_08002720(&DAT_20000314);\n  return byteValue;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_byte_from_memory_08001c08",
                "uVar1": "byteValue"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "read_i2_c_data_08001c18",
            "code": "\nvoid readI2CData_08001c18(undefined4 deviceAddress,uint registerAddress,int numBytes,undefined4 extraData)\n\n{\n  undefined receivedByte;\n  int receivedBytes;\n  int remainingBytes;\n  bool bytesAvailable;\n  \n  if (registerAddress == 0xffffffff) {\n    registerAddress = 0;\n  }\n  else {\n    beginTransmission(&DAT_20000314,deviceAddress);\n    wireWrite(registerAddress & 0xff);\n    check_and_write_data_08002a58(&DAT_20000314,extraData);\n  }\n  requestFrom(&DAT_20000314,deviceAddress,numBytes);\n  receivedBytes = calculate_difference_0800270c(&DAT_20000314);\n  if (numBytes < receivedBytes) {\n    send_string_from_offset_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    receivedBytes = calculate_difference_0800270c(&DAT_20000314);\n    if (receivedBytes < numBytes) {\n      send_string_from_offset_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)deviceAddress;\n  DAT_20000131 = (undefined)registerAddress;\n  receivedBytes = 0;\n  while( true ) {\n    if (receivedBytes < numBytes) {\n      remainingBytes = calculate_difference_0800270c(&DAT_20000314);\n      if (remainingBytes == 0) {\n        bytesAvailable = false;\n      }\n      else {\n        bytesAvailable = true;\n      }\n    }\n    else {\n      bytesAvailable = false;\n    }\n    if (!bytesAvailable) break;\n    receivedByte = wireRead();\n    (&DAT_20000132)[receivedBytes] = receivedByte;\n    receivedBytes = receivedBytes + 1;\n  }\n  send_sysex_with_offset_08002f0a(&DAT_200003d4,0x77,numBytes + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "read_i2_c_data_08001c18",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "numBytes",
                "param_4": "extraData",
                "uVar1": "receivedByte",
                "iVar2": "receivedBytes",
                "iVar3": "remainingBytes",
                "bVar4": "bytesAvailable"
            },
            "calling": [
                "loop",
                "sysexCallback"
            ],
            "called": [
                "FUN_08002a58",
                "requestFrom",
                "FUN_08002f14",
                "FUN_0800270c",
                "beginTransmission",
                "FUN_08002f0a",
                "wireRead",
                "wireWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "execute_function_08001cd0",
            "code": "\nvoid executeFunction_08001cd0(undefined4 command,int paramCount,byte *paramArray,undefined4 param)\n\n{\n  byte byteVar1;\n  byte byteVar2;\n  byte byteVar3;\n  undefined4 uintVar;\n  byte byteVar5;\n  char charVar;\n  int intVar1;\n  int intVar2;\n  uint uintVar1;\n  uint uintVar2;\n  int intVar3;\n  bool boolVar;\n  \n  switch(command) {\n  case 0x69:\n    execute_function_from_pointer_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_from_pointer_08002f1e(&DAT_200003d4,0x6a);\n    for (uintVar1 = 0; uintVar1 < 0x3c; uintVar1 = uintVar1 + 1 & 0xff) {\n      uintVar2 = uintVar1 - 0x2e & 0xff;\n      if (uintVar2 < 0xe) {\n        if (uintVar1 < 0x3c) {\n          intVar1 = (int)(char)(&DAT_0800a908)[uintVar1];\n        }\n        else {\n          intVar1 = -1;\n        }\n        intVar1 = pinNametoDigitalPin(intVar1);\n        if (intVar1 == 0) {\n          uintVar2 = 0x7f;\n        }\n        else {\n          if (uintVar1 < 0x3c) {\n            intVar1 = (int)(char)(&DAT_0800a908)[uintVar1];\n          }\n          else {\n            intVar1 = -1;\n          }\n          intVar1 = pinNametoDigitalPin(intVar1);\n          if (intVar1 == 1) {\n            uintVar2 = 0x7f;\n          }\n        }\n      }\n      else {\n        uintVar2 = 0x7f;\n      }\n      execute_function_from_pointer_08002f1e(&DAT_200003d4,uintVar2);\n    }\n    execute_function_from_pointer_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_function_from_pointer_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_from_pointer_08002f1e(&DAT_200003d4,0x6c);\n    for (uintVar1 = 0; uintVar1 < 0x3c; uintVar1 = uintVar1 + 1 & 0xff) {\n      if (uintVar1 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar1] == -1) {\n          boolVar = false;\n        }\n        else {\n          intVar1 = pinNametoDigitalPin();\n          if (intVar1 == 0) {\n            boolVar = false;\n          }\n          else {\n            intVar1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uintVar1]);\n            if (intVar1 == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,0);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,1);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,0xb);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,1);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,1);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,1);\n      }\n      if ((uintVar1 - 0x2e & 0xff) < 0xe) {\n        if (uintVar1 < 0x3c) {\n          intVar1 = (int)(char)(&DAT_0800a908)[uintVar1];\n        }\n        else {\n          intVar1 = -1;\n        }\n        intVar1 = pinNametoDigitalPin(intVar1);\n        if (intVar1 == 0) {\n          boolVar = false;\n        }\n        else {\n          if (uintVar1 < 0x3c) {\n            intVar1 = (int)(char)(&DAT_0800a908)[uintVar1];\n          }\n          else {\n            intVar1 = -1;\n          }\n          intVar1 = pinNametoDigitalPin(intVar1);\n          if (intVar1 == 1) {\n            boolVar = false;\n          }\n          else {\n            boolVar = true;\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,2);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,10);\n      }\n      if (uintVar1 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar1] == -1) {\n          intVar1 = 0;\n        }\n        else {\n          intVar1 = pinNametoDigitalPin();\n          if (intVar1 == 0) {\n            intVar1 = 0;\n          }\n          else {\n            intVar1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uintVar1]);\n            if (intVar1 == 1) {\n              intVar1 = 0;\n            }\n            else {\n              intVar1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[uintVar1],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        intVar1 = 0;\n      }\n      if (intVar1 != 0) {\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,3);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,8);\n      }\n      if (uintVar1 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar1] == -1) {\n          boolVar = false;\n        }\n        else {\n          intVar1 = pinNametoDigitalPin();\n          if (intVar1 == 0) {\n            boolVar = false;\n          }\n          else {\n            intVar1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uintVar1]);\n            if (intVar1 == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,4);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (uintVar1 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar1] == -1) {\n          intVar1 = 0;\n        }\n        else {\n          intVar1 = pinNametoDigitalPin();\n          if (intVar1 == 0) {\n            intVar1 = 0;\n          }\n          else {\n            intVar1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uintVar1]);\n            if (intVar1 == 1) {\n              intVar1 = 0;\n            }\n            else {\n              intVar1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[uintVar1],&DAT_0800a69c);\n              if (intVar1 == 0) {\n                intVar1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[uintVar1],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        intVar1 = 0;\n      }\n      if (intVar1 != 0) {\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,6);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,1);\n      }\n      execute_function_from_pointer_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_function_from_pointer_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (paramCount != 0) {\n      byteVar1 = *paramArray;\n      execute_function_from_pointer_08002f1e(&DAT_200003d4,0xf0);\n      execute_function_from_pointer_08002f1e(&DAT_200003d4,0x6e);\n      execute_function_from_pointer_08002f1e(&DAT_200003d4,byteVar1);\n      if (byteVar1 < 0x3c) {\n        uintVar = getPinMode(&DAT_200003d4,byteVar1);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,uintVar);\n        uintVar1 = getPinState(&DAT_200003d4,byteVar1);\n        execute_function_from_pointer_08002f1e(&DAT_200003d4,uintVar1 & 0x7f);\n        uintVar1 = getPinState(&DAT_200003d4,byteVar1);\n        if ((uintVar1 & 0xff80) != 0) {\n          intVar1 = getPinState(&DAT_200003d4,byteVar1);\n          execute_function_from_pointer_08002f1e(&DAT_200003d4,(uint)(intVar1 << 0x12) >> 0x19);\n        }\n        uintVar1 = getPinState(&DAT_200003d4,byteVar1);\n        if ((uintVar1 & 0xc000) != 0) {\n          intVar1 = getPinState(&DAT_200003d4,byteVar1);\n          execute_function_from_pointer_08002f1e(&DAT_200003d4,(uint)(intVar1 << 0xb) >> 0x19);\n        }\n      }\n      execute_function_from_pointer_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < paramCount) {\n      uintVar1 = (uint)paramArray[1];\n      if (2 < paramCount) {\n        uintVar1 = uintVar1 | (uint)paramArray[2] << 7;\n      }\n      if (3 < paramCount) {\n        uintVar1 = uintVar1 | (uint)paramArray[3] << 0xe;\n      }\n      analogWriteCallback(*paramArray,uintVar1);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < paramCount) {\n      uintVar1 = (uint)*paramArray;\n      byteVar1 = paramArray[1];\n      byteVar5 = paramArray[2];\n      byteVar2 = paramArray[3];\n      byteVar3 = paramArray[4];\n      if (uintVar1 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar1] == -1) {\n          boolVar = false;\n        }\n        else {\n          intVar1 = pinNametoDigitalPin();\n          if (intVar1 == 0) {\n            boolVar = false;\n          }\n          else {\n            intVar1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uintVar1]);\n            if (intVar1 == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        if ((byte)(&DAT_200001f0)[uintVar1] < 0xc) {\n          intVar1 = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[uintVar1] * 3);\n        }\n        else {\n          intVar1 = 0;\n        }\n        if (intVar1 != 0) {\n          detachServo(uintVar1);\n        }\n        attachServo(uintVar1,(uint)byteVar1 + (uint)byteVar5 * 0x80,(uint)byteVar2 + (uint)byteVar3 * 0x80);\n        setPinModeCallback(uintVar1,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byteVar1 = paramArray[1];\n    byteVar5 = byteVar1 & 0x18;\n    if ((byteVar1 & 0x20) != 0) {\n      send_string_from_offset_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byteVar5,byteVar1,param);\n      return;\n    }\n    byteVar2 = *paramArray;\n    boolVar = (byteVar1 & 0x40) == 0;\n    if (byteVar5 < 0x19) {\n      switch(byteVar5) {\n      case 0:\n        beginTransmission(&DAT_20000314,byteVar2);\n        for (uintVar1 = 2; (int)uintVar1 < paramCount; uintVar1 = uintVar1 + 2 & 0xff) {\n          wireWrite(paramArray[uintVar1 + 1] * -0x80 + paramArray[uintVar1]);\n        }\n        endTransmission(&DAT_20000314);\n        return;\n      case 8:\n        if (paramCount == 6) {\n          intVar1 = (uint)paramArray[2] + (uint)paramArray[3] * 0x80;\n          charVar = paramArray[4] + paramArray[5] * -0x80;\n        }\n        else {\n          charVar = paramArray[2] + paramArray[3] * -0x80;\n          intVar1 = -1;\n        }\n        readAndReportData(byteVar2,intVar1,charVar);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (paramCount == 6) {\n            intVar1 = (uint)paramArray[2] + (uint)paramArray[3] * 0x80;\n            charVar = paramArray[4] + paramArray[5] * -0x80;\n          }\n          else {\n            charVar = paramArray[2] + paramArray[3] * -0x80;\n            intVar1 = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          intVar2 = (int)DAT_20000004;\n          intVar3 = intVar2 * 0xc;\n          (&DAT_20000188)[intVar3] = byteVar2;\n          (&DAT_2000018c)[intVar2 * 3] = intVar1;\n          (&DAT_20000190)[intVar3] = charVar;\n          (&DAT_20000191)[intVar3] = boolVar;\n          return;\n        }\n        send_string_from_offset_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,boolVar,param);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (uintVar1 = 0; intVar1 = DAT_20000004 + 1, (int)uintVar1 < intVar1; uintVar1 = uintVar1 + 1 & 0xff) {\n        if (byteVar2 == (&DAT_20000188)[uintVar1 * 0xc]) goto LAB_08001e66;\n      }\n      uintVar1 = 0;\nLAB_08001e66:\n      for (; (int)uintVar1 < intVar1; uintVar1 = uintVar1 + 1 & 0xff) {\n        if (uintVar1 < 8) {\n          intVar2 = (uintVar1 + 1) * 0xc;\n          intVar3 = uintVar1 * 0xc;\n          (&DAT_20000188)[intVar3] = (&DAT_20000188)[intVar2];\n          (&DAT_2000018c)[uintVar1 * 3] = (&DAT_2000018c)[(uintVar1 + 1) * 3];\n          (&DAT_20000190)[intVar3] = (&DAT_20000190)[intVar2];\n          (&DAT_20000191)[intVar3] = (&DAT_20000191)[intVar2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    intVar1 = (uint)*paramArray + (uint)paramArray[1] * 0x80;\n    if ((1 < paramCount) && (intVar1 != 0)) {\n      DAT_2000012c = intVar1;\n    }\n    if (DAT_20000170 == '\\0') {\n      enableI2CPins();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < paramCount) &&\n       (DAT_20000008 = (uint)*paramArray + (uint)paramArray[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "execute_function_08001cd0",
                "param_1": "command",
                "param_2": "paramCount",
                "param_3": "paramArray",
                "param_4": "param",
                "bVar1": "byteVar1",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "uVar4": "uintVar",
                "bVar5": "byteVar5",
                "cVar6": "charVar",
                "iVar7": "intVar1",
                "iVar8": "intVar2",
                "uVar9": "uintVar1",
                "uVar10": "uintVar2",
                "iVar11": "intVar3",
                "bVar12": "boolVar"
            },
            "calling": [],
            "called": [
                "pin_in_pinmap",
                "FUN_08002f14",
                "readAndReportData",
                "attachServo",
                "pinNametoDigitalPin",
                "FUN_08002f1e",
                "endTransmission",
                "getPinState",
                "enableI2CPins",
                "analogWriteCallback",
                "beginTransmission",
                "getPinMode",
                "attached",
                "setPinModeCallback",
                "wireWrite",
                "detachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_digital_inputs_080022f8",
            "code": "\nvoid processDigitalInputs_080022f8(void)\n\n{\n  bool isDigitalPinValid;\n  int result;\n  undefined4 analogData;\n  uint index;\n  uint tempIndex;\n  \n  checkDigitalInputs();\n  while (result = execute_code_from_parameter_08002ec4(&DAT_200003d4), result != 0) {\n    processInput(&DAT_200003d4);\n  }\n  DAT_20000118 = millis();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      tempIndex = index - 0x2e & 0xff;\n      if (tempIndex < 0xe) {\n        if (index < 0x3c) {\n          result = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          result = -1;\n        }\n        result = convertPinNameToDigitalPin(result);\n        if (result == 0) {\n          isDigitalPinValid = false;\n        }\n        else {\n          if (index < 0x3c) {\n            result = (int)(char)(&DAT_0800a908)[index];\n          }\n          else {\n            result = -1;\n          }\n          result = convertPinNameToDigitalPin(result);\n          if (result == 1) {\n            isDigitalPinValid = false;\n          }\n          else {\n            result = getPinModeValue(&DAT_200003d4,index);\n            if (result == 2) {\n              isDigitalPinValid = true;\n            }\n            else {\n              isDigitalPinValid = false;\n            }\n          }\n        }\n      }\n      else {\n        isDigitalPinValid = false;\n      }\n      if ((isDigitalPinValid) && ((DAT_20000114 >> tempIndex & 1U) != 0)) {\n        analogData = readAnalogData(tempIndex);\n        sendAnalogData(&DAT_200003d4,tempIndex,analogData);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (index = 0; (int)index < DAT_20000004 + 1; index = index + 1 & 0xff) {\n        result = index * 0xc;\n        processDataFromSensors((&DAT_20000188)[result],(&DAT_2000018c)[index * 3],(&DAT_20000190)[result],\n                          (&DAT_20000191)[result]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_digital_inputs_080022f8",
                "iVar2": "result",
                "uVar3": "analogData",
                "uVar4": "index",
                "uVar5": "tempIndex",
                "bVar1": "isDigitalPinValid",
                "pinNametoDigitalPin": "convertPinNameToDigitalPin",
                "getPinMode": "getPinModeValue",
                "readAndReportData": "processDataFromSensors",
                "analogRead": "readAnalogData",
                "send_analog_data_08002ef2": "sendAnalogData"
            },
            "calling": [
                "main"
            ],
            "called": [
                "processInput",
                "analogRead",
                "readAndReportData",
                "FUN_08002ec4",
                "pinNametoDigitalPin",
                "millis",
                "checkDigitalInputs",
                "getPinMode",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_data_at_index_08002400",
            "code": "\nundefined4 check_data_at_index_08002400(int index)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(index * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_data_at_index_08002400",
                "param_1": "index",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_080025ac",
                "detach"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_timer_pulse_0800242c",
            "code": "\nvoid initializeTimerPulse_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initializeTimerPulse_0800242cImpl(param1,60000,0x5dc,&timerCallback,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_timer_pulse_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "TimerPulseInit": "initializeTimerPulseImpl",
                "LAB_08002444_1": "timerCallback"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "TimerPulseInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "deinitialize_timer_pulse_08002578",
            "code": "\nvoid deinitializeTimerPulse_08002578(void)\n\n{\n  deinitTimerPulse();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "deinitialize_timer_pulse_08002578",
                "TimerPulseDeinit": "deinitTimerPulse"
            },
            "calling": [
                "detach"
            ],
            "called": [
                "TimerPulseDeinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *output)\n\n{\n  char nextValue;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *output = 0xff;\n    return;\n  }\n  nextValue = DAT_20000250 + 1;\n  *output = DAT_20000250;\n  DAT_20000250 = nextValue;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "output",
                "cVar1": "nextValue",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "configure_pin_080025ac",
            "code": "\nbyte configurePin_080025ac(byte *pinValue,uint pinNumber,int value1,int value2)\n\n{\n  uint updatedPinValue;\n  uint updatedPinNumber;\n  uint numberOfTimes;\n  int tempVar;\n  \n  if (*pinValue < 0xc) {\n    setPinMode(pinNumber,1,value1,*pinValue,value2);\n    updatedPinNumber = (uint)*pinValue;\n    updatedPinValue = (byte)(&DAT_20000258)[updatedPinNumber * 8] & 0xffffffc0 | pinNumber & 0x3f;\n    (&DAT_20000258)[updatedPinNumber * 8] = (char)updatedPinValue;\n    tempVar = -value1 + 0x220;\n    if (tempVar < 0) {\n      tempVar = -value1 + 0x223;\n    }\n    pinValue[1] = (byte)((uint)(tempVar << 0x16) >> 0x18);\n    tempVar = -value2 + 0x960;\n    if (tempVar < 0) {\n      tempVar = -value2 + 0x963;\n    }\n    pinValue[2] = (byte)((uint)(tempVar << 0x16) >> 0x18);\n    numberOfTimes = *pinValue / 0xc;\n    tempVar = checkTimerStatus(numberOfTimes,updatedPinValue,updatedPinNumber,(uint)*pinValue * -0x55555555);\n    if (tempVar == 0) {\n      DAT_200002fc = (undefined)numberOfTimes;\n      initializeISR();\n    }\n    (&DAT_20000258)[(uint)*pinValue * 8] = (&DAT_20000258)[(uint)*pinValue * 8] | 0x40;\n  }\n  return *pinValue;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "configure_pin_080025ac",
                "param_1": "pinValue",
                "param_2": "pinNumber",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "updatedPinValue",
                "uVar2": "updatedPinNumber",
                "uVar3": "numberOfTimes",
                "iVar4": "tempVar",
                "pinMode": "setPinMode",
                "isTimerActive": "checkTimerStatus",
                "initISR": "initializeISR"
            },
            "calling": [
                "attachServo",
                "FUN_08002634"
            ],
            "called": [
                "initISR",
                "isTimerActive",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "configure_pin_08002634",
            "code": "\nvoid configurePin_08002634(undefined4 pin1,undefined4 pin2,undefined4 param3,undefined4 param4)\n\n{\n  configure_pin_080025ac(pin1,pin2,0x220,0x960,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "configure_pin_08002634",
                "param_1": "pin1",
                "param_2": "pin2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "attachServo"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "process_timer_event_08002644",
            "code": "\nvoid processTimerEvent_08002644(byte *inputData,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  byte timerValue;\n  uint inputValue;\n  int timerStatus;\n  \n  inputValue = (uint)*inputData;\n  timerValue = (&DAT_20000258)[inputValue * 8];\n  (&DAT_20000258)[inputValue * 8] = timerValue & 0xbf;\n  timerStatus = isTimerActive(inputValue / 0xc,param1,timerValue & 0xbf,inputValue * -0x55555555,param3);\n  if (timerStatus == 0) {\n    finISR(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "process_timer_event_08002644",
                "param_1": "inputData",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "bVar1": "timerValue",
                "uVar2": "inputValue",
                "iVar3": "timerStatus"
            },
            "calling": [
                "detachServo"
            ],
            "called": [
                "finISR",
                "isTimerActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_array_value_0800267c",
            "code": "\nvoid updateArrayValue_0800267c(byte *array,int value)\n\n{\n  int index;\n  \n  if (*array < 0xc) {\n    index = (0x88 - (char)array[1]) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - (char)array[2]) * 4,\n       value == index || value + (600 - (char)array[2]) * -4 < 0 != SBORROW4(value,index)))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_array_value_0800267c",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "set_servo_value_080026b0",
            "code": "\nvoid setServoValue_080026b0(int servoPin,int inputValue)\n\n{\n  if (inputValue < 0x220) {\n    if (inputValue < 0) {\n      inputValue = 0;\n    }\n    else if (0xb4 < inputValue) {\n      inputValue = 0xb4;\n    }\n    inputValue = map(inputValue,0,0xb4,(0x88 - *(char *)(servoPin + 1)) * 4,\n                  (600 - *(char *)(servoPin + 2)) * 4);\n  }\n  writeMicroseconds(servoPin,inputValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "set_servo_value_080026b0",
                "param_1": "servoPin",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extract_bit_from_memory_080026f8",
            "code": "\nuint extractBitFromMemory_080026f8(byte *data)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*data * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extract_bit_from_memory_080026f8",
                "param_1": "data"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_byte_from_memory_08002720",
            "code": "\nuint readByteFromMemory_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_byte_from_memory_08002720",
                "uVar1": "index"
            },
            "calling": [
                "wireRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "perform_i2_c_write_operation_080027f0",
            "code": "\nuint performI2CWriteOperation_080027f0(int deviceAddress,undefined4 dataBuffer,uint dataLength)\n\n{\n  int writeResult;\n  uint newDataLength;\n  \n  if (DAT_200003b4 == '\\0') {\n    writeResult = i2c_slave_write_IT(deviceAddress + 0x14,dataBuffer,dataLength & 0xffff);\n    if (writeResult == 0) {\n      return dataLength;\n    }\n    return 0;\n  }\n  newDataLength = DAT_200003b8 + dataLength;\n  if (DAT_200003c5 < newDataLength) {\n    if (newDataLength < 0x20) {\n      newDataLength = 0x20;\n    }\n    DAT_200003cc = realloc(DAT_200003cc,newDataLength);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)newDataLength;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(deviceAddress + 4) = 1;\n    return 0;\n  }\n  memcpy((uint)DAT_200003b6 + DAT_200003cc,dataBuffer,dataLength);\n  DAT_200003b6 = DAT_200003b6 + (char)dataLength;\n  DAT_200003b8 = DAT_200003b6;\n  return dataLength;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "perform_i2_c_write_operation_080027f0",
                "param_1": "deviceAddress",
                "param_2": "dataBuffer",
                "param_3": "dataLength",
                "iVar1": "writeResult",
                "uVar2": "newDataLength"
            },
            "calling": [],
            "called": [
                "memcpy",
                "realloc",
                "i2c_slave_write_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "send_data_0800288c",
            "code": "\nundefined4 send_data_0800288c(int device_address,undefined data)\n\n{\n  undefined4 success;\n  int write_result;\n  uint new_data_size;\n  undefined data_byte;\n  \n  data_byte = data;\n  if (DAT_200003b4 == '\\0') {\n    write_result = i2c_slave_write_IT(device_address + 0x14,&data_byte,1);\n    if (write_result == 0) {\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    new_data_size = DAT_200003b8 + 1;\n    if (DAT_200003c5 < new_data_size) {\n      if (new_data_size < 0x20) {\n        new_data_size = 0x20;\n      }\n      DAT_200003cc = realloc(DAT_200003cc,new_data_size);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)new_data_size;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(device_address + 4) = 1;\n      success = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = data_byte;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      success = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "send_data_0800288c",
                "param_1": "device_address",
                "param_2": "data",
                "uVar1": "success",
                "iVar2": "write_result",
                "uVar3": "new_data_size",
                "local_11": "data_byte"
            },
            "calling": [
                "wireWrite"
            ],
            "called": [
                "realloc",
                "i2c_slave_write_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_params_0800291c",
            "code": "\nvoid initializeParams_0800291c(undefined4 *parameters)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_FUN_0800288c_1_0800a5a0;\n  *(undefined *)(parameters + 0x1b) = 0x19;\n  *(undefined *)((int)parameters + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_params_0800291c",
                "param_1": "parameters"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "handle_param_08002948",
            "code": "\nvoid handle_param_08002948(int status,int value)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    TwoWire(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "handle_param_08002948",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN7TwoWire8rxBufferE"
            ],
            "called": [
                "TwoWire"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2_c_device_08002968",
            "code": "\nvoid initializeI2CDevice_08002968(int deviceBaseAddress,uint configuration)\n\n{\n  int shiftedConfiguration;\n  int deviceRegisterAddress;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    memset(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    memset(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedConfiguration = (configuration & 0x7f) << 1;\n  *(char *)(deviceBaseAddress + 0x10) = (char)shiftedConfiguration;\n  if (configuration == 0x33) {\n    *(undefined *)(deviceBaseAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(deviceBaseAddress + 0x11) = 0;\n  }\n  deviceRegisterAddress = deviceBaseAddress + 0x14;\n  i2c_custom_init(deviceRegisterAddress,100000,0x4000,shiftedConfiguration,*(undefined *)(deviceBaseAddress + 0x11));\n  if (*(char *)(deviceBaseAddress + 0x11) == '\\0') {\n    i2c_attachSlaveTxEvent(deviceRegisterAddress,&LAB_08002774_1);\n    i2c_attachSlaveRxEvent(deviceRegisterAddress,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2_c_device_08002968",
                "param_1": "deviceBaseAddress",
                "param_2": "configuration",
                "iVar1": "shiftedConfiguration",
                "iVar2": "deviceRegisterAddress"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "i2c_attachSlaveRxEvent",
                "i2c_custom_init",
                "memset",
                "i2c_attachSlaveTxEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2_c_device_08002a1c",
            "code": "\nvoid initializeI2CDevice_08002a1c(undefined4 deviceAddress,undefined param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_i2_c_device_08002968(deviceAddress,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2_c_device_08002a1c",
                "param_1": "deviceAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2_c_device_08002a26",
            "code": "\nvoid initializeI2CDevice_08002a26(undefined4 deviceAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_i2_c_device_08002a1c(deviceAddress,0x33,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2_c_device_08002a26",
                "param_1": "deviceAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "enableI2CPins"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 undefined4Param,int intParam)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(intParam << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "undefined4Param",
                "param_2": "intParam"
            },
            "calling": [
                "readAndReportData",
                "FUN_08002b68",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "check_and_write_data_08002a58",
            "code": "\nundefined4 checkAndWriteData_08002a58(int data)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)(data + 0x11) == '\\0') {\n    returnValue = 4;\n  }\n  else {\n    result = i2c_master_write(data + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (result == 0) {\n      returnValue = 0;\n    }\n    else if (result == 1) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 4;\n    }\n    if (DAT_200003cc != 0) {\n      memset(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "check_and_write_data_08002a58",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "readAndReportData",
                "FUN_08002b68",
                "endTransmission"
            ],
            "called": [
                "i2c_master_write",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "write_data_08002ac0",
            "code": "\nvoid writeData_08002ac0(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4)\n\n{\n  check_and_write_data_08002a58(data1,1,data3,data4,data4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "write_data_08002ac0",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "resize_memory_08002acc",
            "code": "\nvoid resizeMemory_08002acc(uint requestedSize,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  if (DAT_200003c4 < requestedSize) {\n    if (requestedSize < 0x20) {\n      requestedSize = 0x20;\n    }\n    DAT_200003c8 = realloc(DAT_200003c8,requestedSize,param3,(uint)DAT_200003c4,param4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)requestedSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "resize_memory_08002acc",
                "param_1": "requestedSize",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_data_08002b68",
            "code": "\nundefined4\nprocessData_08002b68(undefined4 *dataBuffer,uint dataLength,undefined4 rxBufferSize,uint configValue,byte byteValue)\n\n{\n  int result;\n  uint byteCount;\n  uint tempValue;\n  \n  byteCount = (uint)byteValue;\n  if (*(char *)((int)dataBuffer + 0x11) == '\\0') {\n    return 0;\n  }\n  tempValue = configValue;\n  allocateRxBuffer(rxBufferSize);\n  if (DAT_200003c8 != 0) {\n    if (byteCount != 0) {\n      beginTransmission(dataBuffer,dataLength);\n      if (3 < byteCount) {\n        byteCount = 3;\n      }\n      while( true ) {\n        if (byteCount == 0) break;\n        (**(code **)*dataBuffer)(dataBuffer,configValue >> ((byteCount - 1 & 0x1f) << 3) & 0xff);\n        byteCount = byteCount - 1 & 0xff;\n      }\n      check_and_write_data_08002a58(dataBuffer,0);\n    }\n    result = i2c_master_read(dataBuffer + 5,(dataLength & 0x7f) << 1,DAT_200003c8,rxBufferSize,tempValue);\n    if (result != 0) {\n      rxBufferSize = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)rxBufferSize;\n    return rxBufferSize;\n  }\n  dataBuffer[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "dataBuffer",
                "param_2": "dataLength",
                "param_3": "rxBufferSize",
                "param_4": "configValue",
                "param_5": "byteValue",
                "iVar1": "result",
                "uVar2": "byteCount",
                "uVar3": "tempValue"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "beginTransmission",
                "i2c_master_read",
                "allocateRxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "execute_data_processing_08002c00",
            "code": "\nvoid executeDataProcessing_08002c00(void)\n\n{\n  processData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "execute_data_processing_08002c00",
                "process_data_08002b68": "processData"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "execute_data_processing_08002c14",
            "code": "\nvoid execute_data_processing_08002c14(void)\n\n{\n  execute_data_processing_08002c14_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "execute_data_processing_08002c14"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "handle_and_return_08002c1e",
            "code": "\nvoid handle_and_return_08002c1e(undefined4 input1,undefined4 input2,undefined4 data1,undefined4 data2)\n\n{\n  handle_param_08002948(1,0xffff,data1,data2,data2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "handle_and_return_08002c1e",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_firmata_08002ce0",
            "code": "\nint initializeFirmata_08002ce0(int firmataInstance)\n\n{\n  int offset;\n  \n  marshalFirmata(firmataInstance + 0x40);\n  offset = firmataInstance + 0x44;\n  parseFirmata(offset,firmataInstance,0x40);\n  *(undefined *)(firmataInstance + 0xc4) = 0;\n  *(undefined4 *)(firmataInstance + 200) = 0;\n  *(undefined *)(firmataInstance + 0x1f8) = 0;\n  updateParameters(offset,0xe0,analogCallback + 1,0);\n  updateParameters(offset,0x90,&constantLab1,0);\n  updateParameters(offset,0xc0,&constantLab2,0);\n  updateParameters(offset,0xd0,&constantLab3,0);\n  updateParameters(offset,0xf4,&constantLab4,0);\n  updateParameters(offset,0xf5,&constantLab5,0);\n  updateParameters2(offset,0x71,&constantLab6,0);\n  attachFunction(offset,0xf0,&constantLab7,0);\n  updateParams(offset,0x79,&constantLab8,firmataInstance);\n  updateData(offset,0xf9,&constantLab9,firmataInstance);\n  updateData(offset,0xff,&constantLab10,0);\n  return firmataInstance;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_firmata_08002ce0",
                "param_1": "firmataInstance",
                "iVar1": "offset",
                "FirmataMarshaller": "marshalFirmata",
                "FirmataParser": "parseFirmata",
                "update_parameters_08003306": "updateParameters",
                "staticAnalogCallback": "analogCallback",
                "LAB_08002c40_1": "constantLab1",
                "LAB_08002c7c_1": "constantLab2",
                "LAB_08002c90_1": "constantLab3",
                "LAB_08002c54_1": "constantLab4",
                "LAB_08002c68_1": "constantLab5",
                "update_parameters_08003366": "updateParameters2",
                "LAB_08002ca4_1": "constantLab6",
                "attach": "attachFunction",
                "LAB_08002cb8_1": "constantLab7",
                "update_params_08003346": "updateParams",
                "LAB_08002e1a_1": "constantLab8",
                "update_data_08003350": "updateData",
                "LAB_08002dea_1": "constantLab9",
                "LAB_08002cd0_1": "constantLab10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003350",
                "FirmataMarshaller",
                "FUN_08003346",
                "FUN_08003306",
                "FirmataParser",
                "FUN_08003366",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "execute_firmata_class_if_needed_08002dbc",
            "code": "\nvoid executeFirmataClassIfNeeded_08002dbc(int status,int value)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    FirmataClass(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "execute_firmata_class_if_needed_08002dbc",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FirmataClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "send_version_with_offset_08002ddc",
            "code": "\nvoid send_version_with_offset_08002ddc(int input_data,undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3)\n\n{\n  sendVersion(input_data + 0x40,2,5,unused_param3,unused_param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "send_version_with_offset_08002ddc",
                "param_1": "input_data",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "unused_param3"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "sendVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "send_firmware_version_if_enabled_08002df6",
            "code": "\nvoid send_firmware_version_if_enabled_08002df6(int device_address)\n\n{\n  undefined *firmware_data;\n  \n  if (*(byte *)(device_address + 0xc4) == 0) {\n    return;\n  }\n  firmware_data = *(undefined **)(device_address + 200);\n  sendFirmwareVersion(device_address + 0x40,*firmware_data,firmware_data[1],*(byte *)(device_address + 0xc4) - 2,firmware_data + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "send_firmware_version_if_enabled_08002df6",
                "param_1": "device_address",
                "puVar1": "firmware_data"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "sendFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "update_params_and_print_versions_08002e26",
            "code": "\nvoid updateParamsAndPrintVersions_08002e26(int baseAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(baseAddress + 0xc0) = paramValue;\n  setParamValue(baseAddress + 0x40);\n  printSoftwareVersion(baseAddress);\n  printFirmwareVersion(baseAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "update_params_and_print_versions_08002e26",
                "param_1": "baseAddress",
                "param_2": "paramValue",
                "printVersion": "printSoftwareVersion",
                "set_param_value_08003154": "setParamValue"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "printFirmwareVersion",
                "printVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_name_08002e44",
            "code": "\nvoid extractFileName_08002e44(int resultPtr,int filePath,undefined undefined1,undefined undefined2)\n\n{\n  byte filenameLength;\n  char cppLength;\n  int indexOfCpp;\n  int lastSlash;\n  undefined *newFilename;\n  \n  indexOfCpp = strstr(filePath,\".cpp\");\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == 0) {\n    lastSlash = strrchr(filePath,0x5c);\n  }\n  if (lastSlash != 0) {\n    filePath = lastSlash + 1;\n  }\n  if (indexOfCpp == 0) {\n    cppLength = strlen(filePath);\n    *(char *)(resultPtr + 0xc4) = cppLength + '\\x02';\n  }\n  else {\n    *(char *)(resultPtr + 0xc4) = ((char)indexOfCpp - (char)filePath) + '\\x02';\n  }\n  free(*(undefined4 *)(resultPtr + 200));\n  filenameLength = *(byte *)(resultPtr + 0xc4);\n  newFilename = (undefined *)malloc(filenameLength + 1);\n  *(undefined **)(resultPtr + 200) = newFilename;\n  newFilename[filenameLength] = 0;\n  *newFilename = undefined1;\n  newFilename[1] = undefined2;\n  strncpy(newFilename + 2,filePath,*(byte *)(resultPtr + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_name_08002e44",
                "param_1": "resultPtr",
                "param_2": "filePath",
                "param_3": "undefined1",
                "param_4": "undefined2",
                "iVar3": "indexOfCpp",
                "iVar4": "lastSlash",
                "puVar5": "newFilename",
                "bVar1": "filenameLength",
                "cVar2": "cppLength"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "strlen",
                "free",
                "strrchr",
                "strstr",
                "malloc",
                "strncpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_code_from_parameter_08002ec4",
            "code": "\nvoid executeCodeFromParameter_08002ec4(int parameter)\n\n{\n  (**(code **)(**(int **)(parameter + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_code_from_parameter_08002ec4",
                "param_1": "parameter"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "parse_and_process_data_08002ed2",
            "code": "\nvoid parse_and_process_data_08002ed2(int input_data)\n\n{\n  uint return_value;\n  \n  return_value = (**(code **)(**(int **)(input_data + 0xc0) + 0xc))();\n  if (return_value != 0xffffffff) {\n    process_data(input_data + 0x44,return_value & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "parse_and_process_data_08002ed2",
                "param_1": "input_data",
                "uVar1": "return_value",
                "parse": "process_data"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "parse"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "send_analog_data_08002ef2",
            "code": "\nvoid sendAnalogData_08002ef2(int baseAddress,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  sendAnalog(baseAddress + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "send_analog_data_08002ef2",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "send_digital_port_wrapper_08002efe",
            "code": "\nvoid sendDigitalPortWrapper_08002efe(int portNumber,undefined4 param2Value,undefined2 param3Value,undefined4 param4Value)\n\n{\n  sendDigitalPort(portNumber + 0x40,param2Value,param3Value,param4Value,param4Value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "send_digital_port_wrapper_08002efe",
                "param_1": "portNumber",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value"
            },
            "calling": [
                "outputPort"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "send_sysex_with_offset_08002f0a",
            "code": "\nvoid sendSysexWithOffset_08002f0a(int originalValue)\n\n{\n  sendSysex(originalValue + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "send_sysex_with_offset_08002f0a",
                "param_1": "originalValue"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_string_from_offset_08002f14",
            "code": "\nvoid sendStringFromOffset_08002f14(int offset)\n\n{\n  sendString(offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_string_from_offset_08002f14",
                "param_1": "offset"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback",
                "attachServo",
                "setPinModeCallback"
            ],
            "called": [
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_function_from_pointer_08002f1e",
            "code": "\nvoid executeFunctionFromPointer_08002f1e(int functionPointer)\n\n{\n  (**(code **)**(undefined4 **)(functionPointer + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_function_from_pointer_08002f1e",
                "param_1": "functionPointer"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 updatedValue;\n  \n  if (param2 == 0xd0) {\n    DAT_200005f0 = param3;\n    return;\n  }\n  if (0xd0 < param2) {\n    if (param2 == 0xf4) {\n      DAT_200005e0 = param3;\n      return;\n    }\n    updatedValue = param3;\n    if ((param2 != 0xf5) && (updatedValue = DAT_200005e4, param2 == 0xe0)) {\n      DAT_200005d4 = param3;\n      return;\n    }\n    DAT_200005e4 = updatedValue;\n    return;\n  }\n  if (param2 == 0x90) {\n    DAT_200005dc = param3;\n    return;\n  }\n  if (param2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "updatedValue"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_pointer_if_param_is_max_08002f84",
            "code": "\nvoid updatePointerIfParamIsMax_08002f84(undefined4 ptrToMainStruct,int inputValue,undefined4 newValue)\n\n{\n  if (inputValue == 0xff) {\n    DAT_200005e8 = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_pointer_if_param_is_max_08002f84",
                "param_1": "ptrToMainStruct",
                "param_2": "inputValue",
                "param_3": "newValue"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "initialize_data_08002f94",
            "code": "\nvoid initializeData_08002f94(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  DAT_200005d0 = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "initialize_data_08002f94",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_byte_from_offset_08002fa0",
            "code": "\nundefined getByteFromOffset_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_byte_from_offset_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "loop",
                "sysexCallback",
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_value_if_not_max_08002fa8",
            "code": "\nvoid updateValueIfNotMax_08002fa8(int baseAddress,int offset,undefined newValue)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_value_if_not_max_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_element_at_offset_08002fba",
            "code": "\nundefined4 getElementAtOffset_08002fba(int baseAddress,int offset)\n\n{\n  return *(undefined4 *)(baseAddress + (offset + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_element_at_offset_08002fba",
                "param_1": "baseAddress",
                "param_2": "offset"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "set_param_value_08002fc2",
            "code": "\nvoid setParamValue_08002fc2(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + (index + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "set_param_value_08002fc2",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "blink_led_08002fca",
            "code": "\nvoid blinkLED_08002fca(undefined4 unused,undefined4 ledPin,int numTimes,undefined4 delayTimeOn,\n                 undefined4 delayTimeOff)\n\n{\n  uint count;\n  \n  for (count = 0; (int)count < numTimes; count = count + 1 & 0xff) {\n    delay(delayTimeOff);\n    digitalWrite(ledPin,1);\n    delay(delayTimeOn);\n    digitalWrite(ledPin,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "blink_led_08002fca",
                "param_1": "unused",
                "param_2": "ledPin",
                "param_3": "numTimes",
                "param_4": "delayTimeOn",
                "param_5": "delayTimeOff",
                "uVar1": "count"
            },
            "calling": [
                "blinkVersion"
            ],
            "called": [
                "delay",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "initialize_pin_and_blink_08003002",
            "code": "\nvoid initializePinAndBlink_08003002(int pinNumber)\n\n{\n  if (*(char *)(pinNumber + 0x1f8) != '\\0') {\n    return;\n  }\n  setPinMode(0xd,1);\n  performStrobeBlink(pinNumber,0xd,2,0x28,0xd2);\n  wait(0xfa);\n  performStrobeBlink(pinNumber,0xd,5,0x28,0xd2);\n  wait(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "initialize_pin_and_blink_08003002",
                "param_1": "pinNumber",
                "pinMode": "setPinMode",
                "strobeBlinkPin": "performStrobeBlink",
                "delay": "wait"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "strobeBlinkPin",
                "delay",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_version_info_08003048",
            "code": "\nvoid initializeVersionInfo_08003048(undefined4 versionParam,undefined4 dataParam,undefined4 sizeParam,undefined4 versionInfoParam)\n\n{\n  begin(&DAT_20000700,dataParam,6,versionInfoParam,versionInfoParam);\n  printVersion(versionParam);\n  updateAndPrintVersions(versionParam,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_version_info_08003048",
                "param_1": "versionParam",
                "param_2": "dataParam",
                "param_3": "sizeParam",
                "param_4": "versionInfoParam",
                "blinkVersion": "printVersion",
                "update_params_and_print_versions_08002e26": "updateAndPrintVersions"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "FUN_08002e26",
                "blinkVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_mnemonic_0800307a",
            "code": "\nvoid decodeMnemonic_0800307a(undefined4 *ptr,uint size,byte *byteArray,uint limit)\n\n{\n  uint currentByte;\n  uint bitOffset;\n  uint processedBytes;\n  uint index;\n  \n  currentByte = (uint)*byteArray;\n  if (limit == 0) {\n    limit = 0xffffffff;\n  }\n  index = 0;\n  bitOffset = 0;\n  processedBytes = 0;\n  while ((index < size && (processedBytes < limit))) {\n    (***(code ***)(undefined4 *)*ptr)\n              ((undefined4 *)*ptr,((uint)byteArray[index] << (bitOffset & 0xff) | currentByte) & 0x7f);\n    currentByte = (int)(uint)byteArray[index] >> (7 - bitOffset & 0xff) & 0xff;\n    bitOffset = bitOffset + 1;\n    while ((processedBytes = processedBytes + 1, 6 < bitOffset && (processedBytes < limit))) {\n      (***(code ***)(undefined4 *)*ptr)((undefined4 *)*ptr,currentByte & 0x7f);\n      currentByte = currentByte >> 7;\n      bitOffset = bitOffset - 7;\n    }\n    index = index + 1;\n  }\n  if ((bitOffset != 0) && (processedBytes < limit)) {\n    (***(code ***)(undefined4 *)*ptr)((undefined4 *)*ptr,(1 << (bitOffset & 0xff)) - 1U & currentByte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_mnemonic_0800307a",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "byteArray",
                "param_4": "limit",
                "uVar1": "currentByte",
                "uVar2": "bitOffset",
                "uVar3": "processedBytes",
                "uVar4": "index"
            },
            "calling": [
                "sendExtendedAnalog",
                "sendDigitalPort",
                "sendFirmwareVersion",
                "sendSysex",
                "sendAnalog"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "execute_encoded_operations_08003106",
            "code": "\nvoid executeEncodedOperations_08003106(undefined4 *operationPointer,undefined4 param2Value,undefined4 param3Value,undefined4 param4Value)\n\n{\n  undefined4 *operationPointerValue;\n  \n  operationPointerValue = (undefined4 *)*operationPointer;\n  if (operationPointerValue != (undefined4 *)0x0) {\n    (**(code **)*operationPointerValue)(operationPointerValue,0xf0);\n    (***(code ***)(undefined4 *)*operationPointer)((undefined4 *)*operationPointer,0x6f);\n    (***(code ***)(undefined4 *)*operationPointer)((undefined4 *)*operationPointer,param2Value);\n    encodeByteStream(operationPointer,param3Value,param4Value,param3Value);\n    (***(code ***)(undefined4 *)*operationPointer)((undefined4 *)*operationPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "execute_encoded_operations_08003106",
                "param_1": "operationPointer",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "puVar1": "operationPointerValue"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_param_0800314e",
            "code": "\nvoid initializeParam_0800314e(undefined4 *outputParam)\n\n{\n  *outputParam = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_param_0800314e",
                "param_1": "outputParam"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "set_param_value_08003154",
            "code": "\nvoid set_param_value_08003154(undefined4 *output_param,undefined4 input_value)\n\n{\n  *output_param = input_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "set_param_value_08003154",
                "param_1": "output_param",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_binary_data_08003158",
            "code": "\nvoid processBinaryData_08003158(undefined4 *dataPointer,uint dataSize,ushort dataValue)\n\n{\n  undefined4 *pointerToData;\n  ushort encodedData;\n  \n  pointerToData = (undefined4 *)*dataPointer;\n  if (pointerToData != (undefined4 *)0x0) {\n    encodedData = dataValue;\n    if (((int)dataSize < 0x10) && (dataValue < 0x4000)) {\n      (**(code **)*pointerToData)(pointerToData,dataSize | 0xe0);\n      encodeByteStream(dataPointer,2,&encodedData);\n    }\n    else {\n      sendExtendedAnalog(dataPointer,dataSize,2,&encodedData);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_binary_data_08003158",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "param_3": "dataValue",
                "puVar1": "pointerToData",
                "local_a": "encodedData"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "sendExtendedAnalog",
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_encoded_function_0800319e",
            "code": "\nvoid executeEncodedFunction_0800319e(undefined4 *functionPointer,uint flags,undefined2 data)\n\n{\n  undefined4 *functionPtr;\n  undefined2 encodedData;\n  \n  functionPtr = (undefined4 *)*functionPointer;\n  if (functionPtr != (undefined4 *)0x0) {\n    encodedData = data;\n    (**(code **)*functionPtr)(functionPtr,flags & 0xf | 0x90);\n    encodeByteStream(functionPointer,2,&encodedData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_encoded_function_0800319e",
                "param_1": "functionPointer",
                "param_2": "flags",
                "param_3": "data",
                "puVar1": "functionPtr",
                "local_a": "encodedData"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "decode_and_encode_byte_stream_080031ce",
            "code": "\nvoid decodeAndEncodeByteStream_080031ce(undefined4 *streamPointer,undefined4 codeParam,undefined4 param3,uint streamSize,int offset\n                 )\n\n{\n  undefined4 *streamData;\n  uint counter;\n  \n  streamData = (undefined4 *)*streamPointer;\n  if (streamData != (undefined4 *)0x0) {\n    (**(code **)*streamData)(streamData,0xf0,param3,*(code **)*streamData,streamSize);\n    (***(code ***)(undefined4 *)*streamPointer)((undefined4 *)*streamPointer,0x79);\n    (***(code ***)(undefined4 *)*streamPointer)((undefined4 *)*streamPointer,codeParam);\n    (***(code ***)(undefined4 *)*streamPointer)((undefined4 *)*streamPointer,param3);\n    for (counter = 0; counter < streamSize; counter = counter + 1) {\n      encodeByteStream(streamPointer,1,offset + counter,0);\n    }\n    (***(code ***)(undefined4 *)*streamPointer)((undefined4 *)*streamPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "decode_and_encode_byte_stream_080031ce",
                "param_1": "streamPointer",
                "param_2": "codeParam",
                "param_3": "param3",
                "param_4": "streamSize",
                "param_5": "offset",
                "puVar1": "streamData",
                "uVar2": "counter"
            },
            "calling": [
                "printFirmwareVersion"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  undefined4 *functionAddress;\n  \n  functionAddress = (undefined4 *)*functionPointer;\n  if (functionAddress != (undefined4 *)0x0) {\n    (**(code **)*functionAddress)(functionAddress,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,inputParam1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,inputParam2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "puVar1": "functionAddress"
            },
            "calling": [
                "printVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "encode_and_transmit_data_0800325a",
            "code": "\nvoid encode_and_transmit_data_0800325a(undefined4 *input_data_ptr,undefined4 second_param,uint data_size,int offset)\n\n{\n  undefined4 *function_ptr;\n  uint index;\n  \n  function_ptr = (undefined4 *)*input_data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0);\n    (***(code ***)(undefined4 *)*input_data_ptr)((undefined4 *)*input_data_ptr,second_param);\n    for (index = 0; index < data_size; index = index + 1) {\n      encodeByteStream(input_data_ptr,1,offset + index,0);\n    }\n    (***(code ***)(undefined4 *)*input_data_ptr)((undefined4 *)*input_data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "encode_and_transmit_data_0800325a",
                "param_1": "input_data_ptr",
                "param_2": "second_param",
                "param_3": "data_size",
                "param_4": "offset",
                "puVar1": "function_ptr",
                "uVar2": "index"
            },
            "calling": [
                "sendString",
                "FUN_08002f0a"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "send_sysex_data_080032a2",
            "code": "\nvoid sendSysexData_080032a2(undefined4 device,undefined4 message,undefined4 length,undefined4 options)\n\n{\n  undefined4 messageLength;\n  \n  messageLength = strlen(message);\n  sendSysex(device,0x71,messageLength,message,options);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "send_sysex_data_080032a2",
                "param_1": "device",
                "param_2": "message",
                "param_3": "length",
                "param_4": "options",
                "uVar1": "messageLength"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "strlen",
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_parameters_080032bc",
            "code": "\nvoid initializeParameters_080032bc(int paramBaseAddress,int paramValue,undefined4 param3Value)\n\n{\n  *(int *)(paramBaseAddress + 4) = paramValue;\n  *(undefined4 *)(paramBaseAddress + 8) = param3Value;\n  *(undefined *)(paramBaseAddress + 0xc) = 0;\n  *(undefined *)(paramBaseAddress + 0xd) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x10) = 0;\n  *(undefined *)(paramBaseAddress + 0x14) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x18) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x1c) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x20) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x24) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x28) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x2c) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x30) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x34) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x38) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x3c) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x40) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x44) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x48) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x4c) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x50) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x54) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x58) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x5c) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x60) = 0;\n  *(undefined4 *)(paramBaseAddress + 100) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x68) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x6c) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x70) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x74) = 0;\n  *(undefined4 *)(paramBaseAddress + 0x78) = 0;\n  *(bool *)paramBaseAddress = paramValue == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_parameters_080032bc",
                "param_1": "paramBaseAddress",
                "param_2": "paramValue",
                "param_3": "param3Value"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_parameters_08003306",
            "code": "\nvoid updateParameters_08003306(int baseAddress,uint paramValue,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (paramValue == 0xd0) {\n    *(undefined4 *)(baseAddress + 0x58) = newValue1;\n    *(undefined4 *)(baseAddress + 0x28) = newValue2;\n    return;\n  }\n  if (0xd0 < paramValue) {\n    if (paramValue == 0xf4) {\n      *(undefined4 *)(baseAddress + 0x5c) = newValue1;\n      *(undefined4 *)(baseAddress + 0x2c) = newValue2;\n      return;\n    }\n    if (paramValue == 0xf5) {\n      *(undefined4 *)(baseAddress + 0x60) = newValue1;\n      *(undefined4 *)(baseAddress + 0x30) = newValue2;\n    }\n    else if (paramValue == 0xe0) {\n      *(undefined4 *)(baseAddress + 0x4c) = newValue1;\n      *(undefined4 *)(baseAddress + 0x1c) = newValue2;\n      return;\n    }\n    return;\n  }\n  if (paramValue == 0x90) {\n    *(undefined4 *)(baseAddress + 0x50) = newValue1;\n    *(undefined4 *)(baseAddress + 0x20) = newValue2;\n    return;\n  }\n  if (paramValue == 0xc0) {\n    *(undefined4 *)(baseAddress + 0x54) = newValue1;\n    *(undefined4 *)(baseAddress + 0x24) = newValue2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_parameters_08003306",
                "param_1": "baseAddress",
                "param_2": "paramValue",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_params_08003346",
            "code": "\nvoid updateParams_08003346(int baseAddr,int checkValue,undefined4 newVal1,undefined4 newVal2)\n\n{\n  if (checkValue == 0x79) {\n    *(undefined4 *)(baseAddr + 0x70) = newVal1;\n    *(undefined4 *)(baseAddr + 0x34) = newVal2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_params_08003346",
                "param_1": "baseAddr",
                "param_2": "checkValue",
                "param_3": "newVal1",
                "param_4": "newVal2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_data_08003350",
            "code": "\nvoid updateData_08003350(int dataAddress,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0xf9) {\n    *(undefined4 *)(dataAddress + 0x74) = newValue1;\n    *(undefined4 *)(dataAddress + 0x38) = newValue2;\n    return;\n  }\n  if (value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(dataAddress + 0x78) = newValue1;\n  *(undefined4 *)(dataAddress + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_data_08003350",
                "param_1": "dataAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_parameters_08003366",
            "code": "\nvoid updateParameters_08003366(int objectAddress,int valueToCheck,undefined4 newParam1,undefined4 newParam2)\n\n{\n  if (valueToCheck == 0x71) {\n    *(undefined4 *)(objectAddress + 0x68) = newParam1;\n    *(undefined4 *)(objectAddress + 0x40) = newParam2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_parameters_08003366",
                "param_1": "objectAddress",
                "param_2": "valueToCheck",
                "param_3": "newParam1",
                "param_4": "newParam2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_parameters_08003370",
            "code": "\nvoid setParameters_08003370(int objectAddress,undefined4 param2,undefined4 parameter1,undefined4 parameter2)\n\n{\n  *(undefined4 *)(objectAddress + 0x6c) = parameter1;\n  *(undefined4 *)(objectAddress + 0x44) = parameter2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "objectAddress",
                "param_2": "param2",
                "param_3": "parameter1",
                "param_4": "parameter2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "copy_to_memory_08003376",
            "code": "\nvoid copyToMemory_08003376(undefined *targetData,undefined newValue,uint offset)\n\n{\n  bool isOffsetValid;\n  \n  if (offset < *(uint *)(targetData + 8)) {\n    isOffsetValid = false;\n  }\n  else {\n    isOffsetValid = true;\n    if (*(code **)(targetData + 100) != (code *)0x0) {\n      *targetData = 1;\n      (**(code **)(targetData + 100))(*(undefined4 *)(targetData + 0x3c));\n      if (offset < *(uint *)(targetData + 8)) {\n        isOffsetValid = false;\n      }\n      else {\n        isOffsetValid = true;\n      }\n    }\n  }\n  if (!isOffsetValid) {\n    *(undefined *)(*(int *)(targetData + 4) + offset) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "copy_to_memory_08003376",
                "param_1": "targetData",
                "param_2": "newValue",
                "param_3": "offset",
                "bVar1": "isOffsetValid"
            },
            "calling": [
                "processSysexMessage",
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bytes_080033a8",
            "code": "\nvoid copyAndShiftBytes_080033a8(undefined4 sourceOffset,uint length,int destinationOffset)\n\n{\n  byte currentByte;\n  int destIndex;\n  uint sourceIndex;\n  \n  destIndex = 0;\n  for (sourceIndex = 0; sourceIndex < length; sourceIndex = sourceIndex + 2) {\n    currentByte = *(byte *)(destinationOffset + sourceIndex);\n    *(byte *)(destinationOffset + destIndex) = currentByte;\n    *(byte *)(destinationOffset + destIndex) = *(char *)(destinationOffset + sourceIndex + 1) << 7 | currentByte;\n    destIndex = destIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bytes_080033a8",
                "param_1": "sourceOffset",
                "param_2": "length",
                "param_3": "destinationOffset",
                "bVar1": "currentByte",
                "iVar2": "destIndex",
                "uVar3": "sourceIndex"
            },
            "calling": [
                "processSysexMessage"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "handle_data_080033cc",
            "code": "\nvoid handleData_080033cc(int dataHandler,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int decodedLength;\n  char *charPointer;\n  \n  charPointer = *(char **)(dataHandler + 4);\n  firstChar = *charPointer;\n  if (firstChar == 'q') {\n    if (*(int *)(dataHandler + 0x68) != 0) {\n      decodedLength = decodeByteStream(dataHandler,*(int *)(dataHandler + 0x18) + -1,charPointer + 1,charPointer,param4);\n      bufferDataAtPosition(dataHandler,0,decodedLength + 1);\n      (**(code **)(dataHandler + 0x68))(*(undefined4 *)(dataHandler + 0x40),*(int *)(dataHandler + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(dataHandler + 0x70) != (code *)0x0) {\n      if (*(uint *)(dataHandler + 0x18) < 3) {\n        (**(code **)(dataHandler + 0x70))(*(undefined4 *)(dataHandler + 0x34),0,0);\n        return;\n      }\n      decodedLength = decodeByteStream(dataHandler,*(uint *)(dataHandler + 0x18) - 3,charPointer + 3,charPointer,param4);\n      bufferDataAtPosition(dataHandler,0,decodedLength + 3);\n      decodedLength = *(int *)(dataHandler + 4);\n      (**(code **)(dataHandler + 0x70))\n                (*(undefined4 *)(dataHandler + 0x34),*(undefined *)(decodedLength + 1),*(undefined *)(decodedLength + 2)\n                 ,decodedLength + 3);\n      return;\n    }\n  }\n  else if (*(code **)(dataHandler + 0x6c) != (code *)0x0) {\n    (**(code **)(dataHandler + 0x6c))\n              (*(undefined4 *)(dataHandler + 0x44),firstChar,*(int *)(dataHandler + 0x18) + -1,charPointer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "handle_data_080033cc",
                "param_1": "dataHandler",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "decodedLength",
                "pcVar3": "charPointer"
            },
            "calling": [
                "parse"
            ],
            "called": [
                "bufferDataAtPosition",
                "decodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_memory_0800344a",
            "code": "\nvoid initializeMemory_0800344a(int mem_address)\n\n{\n  uint index;\n  \n  *(undefined4 *)(mem_address + 0x10) = 0;\n  *(undefined *)(mem_address + 0xc) = 0;\n  *(undefined *)(mem_address + 0xd) = 0;\n  for (index = 0; index < *(uint *)(mem_address + 8); index = index + 1) {\n    *(undefined *)(*(int *)(mem_address + 4) + index) = 0;\n  }\n  *(undefined *)(mem_address + 0x14) = 0;\n  *(undefined4 *)(mem_address + 0x18) = 0;\n  if (*(code **)(mem_address + 0x78) != (code *)0x0) {\n    (**(code **)(mem_address + 0x78))(*(undefined4 *)(mem_address + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_memory_0800344a",
                "param_1": "mem_address",
                "uVar1": "index"
            },
            "calling": [
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_midi_event_08003474",
            "code": "\nvoid processMIDIEvent_08003474(int midiState,uint midiData)\n\n{\n  byte tempByte;\n  \n  if (*(char *)(midiState + 0x14) != '\\0') {\n    if (midiData != 0xf7) {\n      storeDataAtPosition(midiState,midiData,*(undefined4 *)(midiState + 0x18));\n      *(int *)(midiState + 0x18) = *(int *)(midiState + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(midiState + 0x14) = 0;\n    handleSysexMessage();\n    return;\n  }\n  if ((*(int *)(midiState + 0x10) == 0) || (0x7f < (int)midiData)) {\n    if ((int)midiData < 0xf0) {\n      *(byte *)(midiState + 0xd) = (byte)midiData & 0xf;\n      midiData = midiData & 0xf0;\n    }\n    if (midiData == 0xf0) {\n      *(undefined *)(midiState + 0x14) = 1;\n      *(undefined4 *)(midiState + 0x18) = 0;\n      return;\n    }\n    if (midiData < 0xf1) {\n      if (midiData != 0xc0) {\n        if (midiData < 0xc1) {\n          if (midiData != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (midiData == 0xd0) goto LAB_0800359c;\n          if (midiData != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(midiState + 0x10) = 2;\n        *(char *)(midiState + 0xc) = (char)midiData;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(midiState + 0x10) = 1;\n      *(char *)(midiState + 0xc) = (char)midiData;\n      return;\n    }\n    if (midiData != 0xf9) {\n      if (0xf9 < midiData) {\n        if (midiData == 0xff) {\n          performSystemReset(midiState);\n          return;\n        }\n        return;\n      }\n      if (1 < midiData - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(midiState + 0x74) != (code *)0x0) {\n      (**(code **)(midiState + 0x74))(*(undefined4 *)(midiState + 0x38));\n    }\n  }\n  else {\n    *(int *)(midiState + 0x10) = *(int *)(midiState + 0x10) + -1;\n    storeDataAtPosition();\n    if ((*(int *)(midiState + 0x10) == 0) && (tempByte = *(byte *)(midiState + 0xc), tempByte != 0)) {\n      if (tempByte == 0xd0) {\n        if (*(code **)(midiState + 0x58) != (code *)0x0) {\n          (**(code **)(midiState + 0x58))\n                    (*(undefined4 *)(midiState + 0x28),*(undefined *)(midiState + 0xd),\n                     **(undefined **)(midiState + 4));\n        }\n      }\n      else if (tempByte < 0xd1) {\n        if (tempByte == 0x90) {\n          if (*(code **)(midiState + 0x50) != (code *)0x0) {\n            (**(code **)(midiState + 0x50))\n                      (*(undefined4 *)(midiState + 0x20),*(undefined *)(midiState + 0xd),\n                       (uint)(*(byte **)(midiState + 4))[1] + (uint)**(byte **)(midiState + 4) * 0x80);\n          }\n        }\n        else if ((tempByte == 0xc0) && (*(code **)(midiState + 0x54) != (code *)0x0)) {\n          (**(code **)(midiState + 0x54))\n                    (*(undefined4 *)(midiState + 0x24),*(undefined *)(midiState + 0xd),\n                     **(undefined **)(midiState + 4));\n        }\n      }\n      else if (tempByte == 0xf4) {\n        if (*(code **)(midiState + 0x5c) != (code *)0x0) {\n          (**(code **)(midiState + 0x5c))\n                    (*(undefined4 *)(midiState + 0x2c),(*(undefined **)(midiState + 4))[1],\n                     **(undefined **)(midiState + 4));\n        }\n      }\n      else if (tempByte == 0xf5) {\n        if (*(code **)(midiState + 0x60) != (code *)0x0) {\n          (**(code **)(midiState + 0x60))\n                    (*(undefined4 *)(midiState + 0x30),(*(undefined **)(midiState + 4))[1],\n                     **(undefined **)(midiState + 4));\n        }\n      }\n      else if ((tempByte == 0xe0) && (*(code **)(midiState + 0x4c) != (code *)0x0)) {\n        (**(code **)(midiState + 0x4c))\n                  (*(undefined4 *)(midiState + 0x1c),*(undefined *)(midiState + 0xd),\n                   (uint)(*(byte **)(midiState + 4))[1] + (uint)**(byte **)(midiState + 4) * 0x80);\n      }\n      *(undefined *)(midiState + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_midi_event_08003474",
                "param_1": "midiState",
                "param_2": "midiData",
                "bVar1": "tempByte",
                "bufferDataAtPosition": "storeDataAtPosition",
                "processSysexMessage": "handleSysexMessage",
                "systemReset": "performSystemReset"
            },
            "calling": [
                "processInput"
            ],
            "called": [
                "systemReset",
                "processSysexMessage",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_system_080035b8",
            "code": "\nvoid initializeSystem_080035b8(void)\n\n{\n  int status;\n  uint hclkFreq;\n  undefined4 peripheralConfigArray [2];\n  undefined4 configFlag;\n  undefined4 clockSource;\n  undefined4 clockDivider;\n  undefined4 flashLatency;\n  undefined4 systemClockSource;\n  undefined4 systemClockDivider;\n  undefined4 oscillatorConfig [4];\n  undefined4 deviceConfig;\n  undefined4 clockConfig;\n  undefined4 peripheralConfig;\n  undefined4 peripheralClockConfig;\n  undefined4 peripheralDataConfig;\n  \n  oscillatorConfig[0] = 2;\n  deviceConfig = 1;\n  clockConfig = 0x10;\n  peripheralConfig = 2;\n  peripheralClockConfig = 0;\n  peripheralDataConfig = 0x380000;\n  status = HAL_RCC_OscConfig(oscillatorConfig);\n  if (status != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  clockSource = 0xf;\n  clockDivider = 2;\n  flashLatency = 0;\n  systemClockSource = 0x400;\n  systemClockDivider = 0;\n  status = HAL_RCC_ClockConfig(&clockSource);\n  if (status != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  peripheralConfigArray[0] = 2;\n  configFlag = 0x8000;\n  status = HAL_RCCEx_PeriphCLKConfig(peripheralConfigArray);\n  if (status != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_system_080035b8",
                "local_30": "oscillatorConfig",
                "local_20": "deviceConfig",
                "local_1c": "clockConfig",
                "local_14": "peripheralConfig",
                "local_10": "peripheralClockConfig",
                "local_c": "peripheralDataConfig",
                "local_44": "clockSource",
                "local_40": "clockDivider",
                "local_3c": "flashLatency",
                "local_38": "systemClockSource",
                "local_34": "systemClockDivider",
                "local_54": "peripheralConfigArray",
                "local_4c": "configFlag",
                "iVar1": "status",
                "uVar2": "hclkFreq"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_RCC_GetHCLKFreq",
                "_Error_Handler",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003658": {
            "entrypoint": "0x08003658",
            "current_name": "initialize_program_08003658",
            "code": "\nvoid initializeProgram_08003658(void)\n\n{\n  int index;\n  undefined4 *pointer;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_200000f4; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800ac18);\n  }\n  for (pointer = &DAT_200000f4; pointer < &DAT_20000a3c; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x800368a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003658": "initialize_program_08003658",
                "iVar1": "index",
                "puVar2": "pointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "__libc_init_array",
                "SystemInit",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_hardware_configuration_080036a2",
            "code": "\nvoid initializeHardwareConfiguration_080036a2(void)\n\n{\n  hw_config_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_hardware_configuration_080036a2"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_character_index_080036ac",
            "code": "\nuint find_character_index_080036ac(int character)\n\n{\n  uint index;\n  \n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "character",
                "uVar1": "index"
            },
            "calling": [
                "loop",
                "sysexCallback",
                "checkDigitalInputs",
                "enableI2CPins",
                "FUN_0800021a",
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "configure_systick_timer_080036d8",
            "code": "\nundefined4 configureSystickTimer_080036d8(uint priorityLevel)\n\n{\n  int systickConfigStatus;\n  \n  systickConfigStatus = HAL_SYSTICK_Config(DAT_20000018 / (1000 / DAT_2000000c));\n  if (systickConfigStatus != 0) {\n    return 1;\n  }\n  if (0xf < priorityLevel) {\n    return 1;\n  }\n  HAL_NVIC_SetPriority(0xffffffff,priorityLevel,0);\n  DAT_20000010 = priorityLevel;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "configure_systick_timer_080036d8",
                "param_1": "priorityLevel",
                "iVar1": "systickConfigStatus"
            },
            "calling": [
                "FUN_080058d2",
                "HAL_Init"
            ],
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_hardware_08003724",
            "code": "\n\n\nundefined4 initializeHardware_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setInterruptPriorityGrouping(3);\n  initializeTick(0xf);\n  initializePeriph();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_hardware_08003724",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializePeriph"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_data_08003748",
            "code": "\nvoid updateData_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_data_08003748"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_data_address_08003760",
            "code": "\nundefined4 get_data_address_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_data_address_08003760"
            },
            "calling": [
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "i2c_master_write",
                "FUN_080058d2",
                "ADC_Enable",
                "HAL_RCC_OscConfig",
                "HAL_UART_Transmit",
                "UART_WaitOnFlagUntilTimeout",
                "i2c_master_read",
                "uart_debug_write",
                "ADC_ConversionStop_Disable",
                "GetCurrentMilli"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_delay_0800376c",
            "code": "\nundefined4 calculateDelay_0800376c(uint **inputParams,uint timeout)\n\n{\n  int currentTime;\n  uint periphFreq;\n  int multiplier;\n  undefined4 result;\n  uint *param;\n  uint delay;\n  uint counter;\n  \n  counter = 0;\n  currentTime = HAL_GetTick();\n  delay = DAT_20000018;\n  param = *inputParams;\n  if ((param[2] & 0x100) == 0) {\n    if (((param[1] & 0x100) == 0) && ((param[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**inputParams & 2) != 0) goto LAB_0800387e;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (multiplier = HAL_GetTick(), (uint)(multiplier - currentTime) <= timeout))));\n      inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n      *(undefined *)(inputParams + 9) = 0;\n      result = 3;\n    }\n    else {\n      periphFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n      param = *inputParams;\n      if (((param[4] & 0x24924924) == 0) && ((param[3] & 0x924924) == 0)) {\n        if ((param[4] & 0x12492492) == 0) {\n          if ((param[3] & 0x492492) == 0) {\n            multiplier = 0x14;\n          }\n          else {\n            multiplier = 0x29;\n          }\n        }\n        else {\n          multiplier = 0x29;\n        }\n      }\n      else if (((param[4] & 0x12492492) == 0) && ((param[3] & 0x492492) == 0)) {\n        multiplier = 0x54;\n      }\n      else if ((param[4] & 0x249249) == 0) {\n        if ((param[3] & 0x249249) == 0) {\n          multiplier = 0x54;\n        }\n        else {\n          multiplier = 0xfc;\n        }\n      }\n      else {\n        multiplier = 0xfc;\n      }\n      delay = (delay / periphFreq) * multiplier;\n      for (; counter <= delay && delay - counter != 0; counter = counter + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (multiplier = HAL_GetTick(), timeout < (uint)(multiplier - currentTime))))) {\n          inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n          *(undefined *)(inputParams + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **inputParams = 0xffffffed;\n      inputParams[10] = (uint *)((uint)inputParams[10] | 0x200);\n      if (((*inputParams)[2] & 0xe0000) == 0xe0000) {\n        if (inputParams[3] == (uint *)0x0) {\n          inputParams[10] = (uint *)((uint)inputParams[10] & 0xfffffeff);\n          if (((uint)inputParams[10] & 0x1000) == 0) {\n            inputParams[10] = (uint *)((uint)inputParams[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    inputParams[10] = (uint *)((uint)inputParams[10] | 0x20);\n    *(undefined *)(inputParams + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_delay_0800376c",
                "param_1": "inputParams",
                "param_2": "timeout",
                "iVar1": "currentTime",
                "uVar2": "periphFreq",
                "iVar3": "multiplier",
                "uVar4": "result",
                "puVar5": "param",
                "uVar6": "delay",
                "local_1c": "counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_value_080038dc",
            "code": "\nundefined4 getOffsetValue_080038dc(int *inputPtr)\n\n{\n  return *(undefined4 *)(*inputPtr + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "inputPtr"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_parameters_080038e4",
            "code": "\nundefined4 updateParameters_080038e4(int *paramArray,uint *paramValues)\n\n{\n  undefined4 result;\n  uint value;\n  int counter;\n  \n  if (*(char *)(paramArray + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(paramArray + 9) = 1;\n    value = paramValues[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint *)(*paramArray + 0x34) =\n           *paramValues << (value & 0xff) | *(uint *)(*paramArray + 0x34) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint *)(*paramArray + 0x30) =\n           *paramValues << (value & 0xff) | *(uint *)(*paramArray + 0x30) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint *)(*paramArray + 0x2c) =\n           *paramValues << (value & 0xff) | *(uint *)(*paramArray + 0x2c) & ~(0x1f << (value & 0xff));\n    }\n    value = *paramValues;\n    if (value < 10) {\n      *(uint *)(*paramArray + 0x10) =\n           paramValues[2] << (value * 3 & 0xff) |\n           *(uint *)(*paramArray + 0x10) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint *)(*paramArray + 0xc) =\n           paramValues[2] << (value & 0xff) | *(uint *)(*paramArray + 0xc) & ~(7 << (value & 0xff));\n    }\n    if (*paramValues - 0x10 < 2) {\n      if (*paramArray == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*paramValues == 0x10) {\n            for (counter = (DAT_20000018 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        paramArray[10] = paramArray[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(paramArray + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_parameters_080038e4",
                "param_1": "paramArray",
                "param_2": "paramValues",
                "uVar1": "result",
                "uVar2": "value",
                "local_c": "counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_pointer_value_08003a1c",
            "code": "\nundefined4 getPointerValue_08003a1c(int inputPtr)\n\n{\n  return *(undefined4 *)(inputPtr + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_pointer_value_08003a1c",
                "param_1": "inputPtr"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "enable_device_08003a20",
            "code": "\nundefined4 enableDevice_08003a20(int *deviceData,undefined4 param)\n\n{\n  int currentTick;\n  undefined4 result;\n  int devicePtr;\n  uint delayCounter;\n  \n  devicePtr = *deviceData;\n  if ((*(uint *)(devicePtr + 8) & 1) == 0) {\n    *(uint *)(devicePtr + 8) = *(uint *)(devicePtr + 8) | 1;\n    for (delayCounter = DAT_20000018 / 1000000; delayCounter != 0; delayCounter = delayCounter - 1) {\n    }\n    devicePtr = HAL_GetTick(deviceData,param,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*deviceData + 8) & 1) != 0) {\n        return 0;\n      }\n      currentTick = HAL_GetTick();\n    } while ((uint)(currentTick - devicePtr) < 3);\n    deviceData[10] = deviceData[10] | 0x10;\n    deviceData[0xb] = deviceData[0xb] | 1;\n    *(undefined *)(deviceData + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "enable_device_08003a20",
                "param_1": "deviceData",
                "param_2": "param",
                "iVar1": "currentTick",
                "iVar3": "devicePtr",
                "local_14": "delayCounter",
                "uVar2": "result"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "configure_adc_08003aa0",
            "code": "\n\n\nint configureADC_08003aa0(int *config)\n\n{\n  int enableStatus;\n  undefined4 *baseAddress;\n  int address;\n  \n  if (*(char *)(config + 9) != '\\x01') {\n    *(undefined *)(config + 9) = 1;\n    enableStatus = enableADC();\n    if (enableStatus == 0) {\n      config[10] = config[10] & 0xfffffcfeU | 0x100;\n      baseAddress = (undefined4 *)*config;\n      if ((baseAddress == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        config[10] = config[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          config[10] = config[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        config[10] = config[10] & 0xffefffff;\n        if ((baseAddress[1] & 0x400) != 0) {\n          config[10] = config[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((config[10] & 0x1000U) == 0) {\n        config[0xb] = 0;\n      }\n      else {\n        config[0xb] = config[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(config + 9) = 0;\n      *baseAddress = 0xfffffffd;\n      address = *config;\n      if (((*(uint *)(address + 8) & 0xe0000) == 0xe0000) &&\n         ((address != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(address + 8) = *(uint *)(address + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(address + 8) = *(uint *)(address + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(config + 9) = 0;\n    }\n    return enableStatus;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "configure_adc_08003aa0",
                "param_1": "config",
                "iVar1": "enableStatus",
                "puVar2": "baseAddress",
                "iVar3": "address",
                "ADC_Enable": "enableADC"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "update_flags_and_status_08003b8c",
            "code": "\nundefined4 updateFlagsAndStatus_08003b8c(int *data)\n\n{\n  int currentTime;\n  int ptrData;\n  \n  ptrData = *data;\n  if ((*(uint *)(ptrData + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(ptrData + 8) = *(uint *)(ptrData + 8) & 0xfffffffe;\n  ptrData = getCurrentTime();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    currentTime = getCurrentTime();\n  } while ((uint)(currentTime - ptrData) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "update_flags_and_status_08003b8c",
                "param_1": "data",
                "iVar1": "currentTime",
                "iVar2": "ptrData",
                "HAL_GetTick": "getCurrentTime"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Init",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "initialize_adc_08003bd8",
            "code": "\nundefined4 initializeADC_08003bd8(int *adcData)\n\n{\n  int conversionStopResult;\n  uint combinedValues;\n  uint updateValue;\n  \n  if (adcData == (int *)0x0) {\n    return 1;\n  }\n  if (adcData[10] == 0) {\n    adcData[0xb] = 0;\n    *(undefined *)(adcData + 9) = 0;\n    initializeADC_08003bd8Peripheral();\n  }\n  conversionStopResult = stopDisableADCConversion(adcData);\n  if (((adcData[10] & 0x10U) == 0) && (conversionStopResult == 0)) {\n    adcData[10] = adcData[10] & 0xffffeefdU | 2;\n    combinedValues = adcData[1] | adcData[7] | adcData[3] << 1;\n    if (adcData[2] == 0x100) {\n      updateValue = 0x100;\n    }\n    else {\n      updateValue = 0;\n      if (adcData[2] == 1) {\n        updateValue = 0x100;\n      }\n    }\n    if (adcData[5] == 1) {\n      if (adcData[3] == 0) {\n        updateValue = updateValue | (adcData[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        adcData[10] = adcData[10] | 0x20;\n        adcData[0xb] = adcData[0xb] | 1;\n      }\n    }\n    *(uint *)(*adcData + 4) = updateValue | *(uint *)(*adcData + 4) & 0xffff16ff;\n    *(uint *)(*adcData + 8) = *(uint *)(*adcData + 8) & 0xffe1f7fd | combinedValues;\n    if ((adcData[2] == 0x100) || (adcData[2] == 1)) {\n      updateValue = (adcData[4] + -1) * 0x100000;\n    }\n    else {\n      updateValue = 0;\n    }\n    *(uint *)(*adcData + 0x2c) = updateValue | *(uint *)(*adcData + 0x2c) & 0xff0fffff;\n    if (combinedValues != (*(uint *)(*adcData + 8) & 0xff1f0efe)) {\n      adcData[10] = adcData[10] & 0xffffffedU | 0x10;\n      adcData[0xb] = adcData[0xb] | 1;\n      return 1;\n    }\n    adcData[0xb] = 0;\n    adcData[10] = adcData[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  adcData[10] = adcData[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "initialize_adc_08003bd8",
                "param_1": "adcData",
                "iVar1": "conversionStopResult",
                "uVar2": "combinedValues",
                "uVar3": "updateValue",
                "HAL_ADC_MspInit": "initializeADCPeripheral",
                "ADC_ConversionStop_Disable": "stopDisableADCConversion"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "disable_adc_and_clear_registers_08003ce8",
            "code": "\nint disableADCAndClearRegisters_08003ce8(int *device)\n\n{\n  int result;\n  \n  if (device == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    device[10] = device[10] | 2;\n    result = ADC_ConversionStop_Disable();\n    if (result == 0) {\n      *(undefined4 *)*device = 0xffffffe0;\n      *(uint *)(*device + 4) = *(uint *)(*device + 4) & 0xff3f0000;\n      *(uint *)(*device + 8) = *(uint *)(*device + 8) & 0xff0106f0;\n      *(uint *)(*device + 0xc) = *(uint *)(*device + 0xc) & 0xff000000;\n      *(uint *)(*device + 0x10) = *(uint *)(*device + 0x10) & 0xc0000000;\n      *(uint *)(*device + 0x14) = *(uint *)(*device + 0x14) & 0xfffff000;\n      *(uint *)(*device + 0x18) = *(uint *)(*device + 0x18) & 0xfffff000;\n      *(uint *)(*device + 0x1c) = *(uint *)(*device + 0x1c) & 0xfffff000;\n      *(uint *)(*device + 0x20) = *(uint *)(*device + 0x20) & 0xfffff000;\n      *(uint *)(*device + 0x24) = *(uint *)(*device + 0x24) & 0xfffff000;\n      *(uint *)(*device + 0x28) = *(uint *)(*device + 0x28) & 0xfffff000;\n      *(uint *)(*device + 0x2c) = *(uint *)(*device + 0x2c) & 0xff000000;\n      *(uint *)(*device + 0x2c) = *(uint *)(*device + 0x2c) & 0xff000000;\n      *(uint *)(*device + 0x30) = *(uint *)(*device + 0x30) & 0xc0000000;\n      *(uint *)(*device + 0x34) = *(uint *)(*device + 0x34) & 0xc0000000;\n      *(uint *)(*device + 0x38) = *(uint *)(*device + 0x38) & 0xffc00000;\n      *(uint *)(*device + 0x38) = *(uint *)(*device + 0x38) & 0xffc00000;\n      HAL_ADC_MspDeInit(device);\n      device[0xb] = 0;\n      device[10] = 0;\n    }\n    *(undefined *)(device + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "disable_adc_and_clear_registers_08003ce8",
                "param_1": "device",
                "iVar1": "result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspDeInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "update_adc_config_08003de4",
            "code": "\nint update_ADC_config_08003de4(int config_data)\n\n{\n  int result;\n  \n  if (*(char *)(config_data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(config_data + 0x24) = 1;\n  result = ADC_ConversionStop_Disable();\n  if (result == 0) {\n    *(uint *)(config_data + 0x28) = *(uint *)(config_data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(config_data + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "update_adc_config_08003de4",
                "param_1": "config_data",
                "iVar1": "result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "check_adc_conversion_08003e20",
            "code": "\nint check_adc_conversion_08003e20(int *adc_data)\n\n{\n  uint data_1;\n  int result;\n  uint data_2;\n  int timestamp;\n  int loop_counter;\n  int loop_variable;\n  \n  if (*(char *)(adc_data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adc_data + 9) = 1;\n  result = ADC_ConversionStop_Disable();\n  if (result == 0) {\n    adc_data[10] = adc_data[10] & 0xffffeefdU | 2;\n    data_1 = DAT_20000018;\n    data_2 = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loop_variable = data_1 / data_2 << 1; loop_variable != 0; loop_variable = loop_variable + -1) {\n    }\n    ADC_Enable(adc_data);\n    *(uint *)(*adc_data + 8) = *(uint *)(*adc_data + 8) | 8;\n    timestamp = HAL_GetTick();\n    while (loop_counter = *adc_data, (*(uint *)(loop_counter + 8) & 8) != 0) {\n      loop_counter = HAL_GetTick();\n      if (10 < (uint)(loop_counter - timestamp)) {\n        adc_data[10] = adc_data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(loop_counter + 8) = *(uint *)(loop_counter + 8) | 4;\n    timestamp = HAL_GetTick();\n    while ((*(uint *)(*adc_data + 8) & 4) != 0) {\n      loop_counter = HAL_GetTick();\n      if (10 < (uint)(loop_counter - timestamp)) {\n        adc_data[10] = adc_data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_data + 9) = 0;\n        return 1;\n      }\n    }\n    adc_data[10] = adc_data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adc_data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "check_adc_conversion_08003e20",
                "param_1": "adc_data",
                "uVar1": "data_1",
                "iVar2": "result",
                "uVar3": "data_2",
                "iVar4": "timestamp",
                "iVar5": "loop_counter",
                "local_14": "loop_variable"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "ADC_Enable",
                "ADC_ConversionStop_Disable",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_data_08003f0c",
            "code": "\n\n\nvoid updateData_08003f0c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_data_08003f0c",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "apply_bitmask_shift_08003f30",
            "code": "\n\n\nvoid applyBitmaskShift_08003f30(uint inputIndex,uint bitmask,uint data)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitmask & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & data;\n  if ((int)inputIndex < 0) {\n    *(char *)((inputIndex & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(inputIndex + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "apply_bitmask_shift_08003f30",
                "param_1": "inputIndex",
                "param_2": "bitmask",
                "param_3": "data",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "i2c_custom_init",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "SystemClock_Config",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_in_array_08003f94",
            "code": "\nvoid setBitInArray_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "index"
            },
            "calling": [
                "i2c_custom_init",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n    performDataSyncBarrier(0xf);\n    performInstrSyncBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitPosition",
                "DataSynchronizationBarrier": "performDataSyncBarrier",
                "InstructionSynchronizationBarrier": "performInstrSyncBarrier"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "initialize_data_08003fd8",
            "code": "\n\n\nundefined4 initializeData_08003fd8(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "initialize_data_08003fd8",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_at_position_08004004",
            "code": "\nvoid setBitAtPosition_08004004(uint bitPosition)\n\n{\n  if (-1 < signedBitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_at_position_08004004",
                "param_1": "bitPosition",
                "(int)param_1": "signedBitPosition"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "set_flag_08004024",
            "code": "\n\n\nvoid set_flag_08004024(int flag_value)\n\n{\n  if (flag_value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flag_value"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_system_tick_08004046",
            "code": "\nvoid initializeSystemTick_08004046(void)\n\n{\n  handleSystemTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_system_tick_08004046",
                "HAL_SYSTICK_Callback": "handleSystemTick"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "configure_hardware_08004050",
            "code": "\n\n\nundefined4 configureHardware_08004050(uint **hardwareConfig)\n\n{\n  uint *configPtr;\n  \n  if (*(char *)((int)hardwareConfig + 0x21) != '\\x02') {\n    hardwareConfig[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **hardwareConfig = **hardwareConfig & 0xfffffff1;\n  **hardwareConfig = **hardwareConfig & 0xfffffffe;\n  configPtr = *hardwareConfig;\n  if (configPtr == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (configPtr == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (configPtr == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (configPtr == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (configPtr == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (configPtr == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)hardwareConfig + 0x21) = 1;\n  *(undefined *)(hardwareConfig + 8) = 0;\n  if (hardwareConfig[0xd] != (uint *)0x0) {\n    (*(code *)hardwareConfig[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "configure_hardware_08004050",
                "param_1": "hardwareConfig",
                "puVar1": "configPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler",
                "I2C_ITError"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_flags_and_values_080040e8",
            "code": "\n\n\nvoid updateFlagsAndValues_080040e8(uint *flags,uint *values)\n\n{\n  uint *ptr_flags;\n  uint bit_mask;\n  uint value_mask;\n  uint bit_position;\n  uint value;\n  uint updated_value;\n  int index;\n  int section_index;\n  \n  updated_value = 0;\n  bit_position = 0;\n  do {\n    if (0xf < bit_position) {\n      return;\n    }\n    bit_mask = 1 << (bit_position & 0xff);\n    value_mask = *values & bit_mask;\n    if (bit_mask == value_mask) {\n      value = values[1];\n      if (value == 0x12) {\n        updated_value = values[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          updated_value = values[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_0800423a;\n          if (value == 1) {\n            updated_value = values[3];\n          }\n        }\n        else if (value == 3) {\n          updated_value = 0;\n        }\n        else if (value == 0x11) {\n          updated_value = values[3] + 4;\n        }\n      }\n      else if (value == 0x10210000) {\nLAB_0800423a:\n        if (values[2] == 0) {\n          updated_value = 4;\n        }\n        else if (values[2] == 1) {\n          flags[4] = bit_mask;\n          updated_value = 8;\n        }\n        else {\n          flags[5] = bit_mask;\n          updated_value = 8;\n        }\n      }\n      else if (value < 0x10210001) {\n        if ((value == 0x10110000) || (value == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((value == 0x10310000) || ((value == 0x10320000 || (value == 0x10220000))))\n      goto LAB_0800423a;\n      bit_mask = bit_position;\n      ptr_flags = flags;\n      if (0xff < value_mask) {\n        bit_mask = bit_position - 8;\n        ptr_flags = flags + 1;\n      }\n      *ptr_flags = *ptr_flags & ~(0xf << (bit_mask << 2 & 0xff)) | updated_value << (bit_mask << 2 & 0xff);\n      if ((values[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        index = (bit_position & 3) << 2;\n        if (flags == (uint *)0x40010800) {\n          section_index = 0;\n        }\n        else if (flags == (uint *)0x40010c00) {\n          section_index = 1;\n        }\n        else if (flags == (uint *)0x40011000) {\n          section_index = 2;\n        }\n        else if (flags == (uint *)0x40011400) {\n          section_index = 3;\n        }\n        else {\n          section_index = 4;\n        }\n        *(uint *)(((bit_position >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bit_position >> 2) + 2) * 4 + 0x40010000) & ~(0xf << index) | section_index << index;\n        if ((values[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~value_mask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | value_mask;\n        }\n        if ((values[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~value_mask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | value_mask;\n        }\n        if ((values[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~value_mask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | value_mask;\n        }\n        if ((values[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~value_mask;\n        }\n        else {\n          _DAT_4001040c = value_mask | _DAT_4001040c;\n        }\n      }\n    }\n    bit_position = bit_position + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_flags_and_values_080040e8",
                "param_1": "flags",
                "param_2": "values",
                "puVar1": "ptr_flags",
                "uVar2": "bit_mask",
                "uVar3": "value_mask",
                "uVar4": "bit_position",
                "uVar5": "value",
                "uVar6": "updated_value",
                "iVar7": "index",
                "iVar8": "section_index"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int input_value,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "input_value",
                "param_2": "bit_mask"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_param_value_080042e2",
            "code": "\nvoid setParamValue_080042e2(int objectAddress,int paramValue,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectAddress + 0x10) = paramValue << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x10) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "objectAddress",
                "param_2": "paramValue",
                "param_3": "isShifted"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_gpio_exti_080042f0",
            "code": "\n\n\nvoid update_GPIO_exti_080042f0(uint data)\n\n{\n  if ((_DAT_40010414 & data) != 0) {\n    _DAT_40010414 = data;\n    handle_GPIO_exti_callback();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_gpio_exti_080042f0",
                "param_1": "data",
                "HAL_GPIO_EXTI_Callback": "handle_GPIO_exti_callback"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_flag_value_0800430c",
            "code": "\nundefined4 updateFlagValue_0800430c(int *ptr1)\n\n{\n  if (*(char *)((int)ptr1 + 0x3e) == '@') {\n    if (value2 == 0) {\n      *(uint *)(*ptr1 + 0x10) = value3 & 0xfe;\n    }\n    else {\n      *(uint *)(*ptr1 + 0x10) = value3 & 0xffU | 1;\n    }\n  }\n  else if (value4 == 0x4000) {\n    if (*(char *)((int)ptr1 + 0x3d) == '!') {\n      *(uint *)(*ptr1 + 0x10) = value3 & 0xfe;\n    }\n    else {\n      *(uint *)(*ptr1 + 0x10) = value3 & 0xffU | 1;\n    }\n  }\n  else if (value2 == 0) {\n    *(uint *)(*ptr1 + 0x10) = (uint)(value3 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (value2 == 1) {\n    *(uint *)(*ptr1 + 0x10) = (uint)(value3 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_flag_value_0800430c",
                "param_1": "ptr1",
                "param_1[0x14]": "value2",
                "param_1[0x11]": "value3",
                "param_1[4]": "value4"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "store_byte_from_array_08004396",
            "code": "\nundefined4 store_byte_from_array_08004396(int *array)\n\n{\n  *(uint *)(*array + 0x10) = array[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "store_byte_from_array_08004396",
                "param_1": "array"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_flags_based_on_conditions_080043a2",
            "code": "\nundefined4 updateFlagsBasedOnConditions_080043a2(uint **parameters)\n\n{\n  uint *pointer1;\n  \n  pointer1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((pointer2 != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((pointer2 == (uint *)0x0) && (pointer3 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      pointer2 = (uint *)((int)pointer2 + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (pointer1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          pointer1 = *parameters;\n          if ((pointer1[1] & 0x800) == 0) {\n            *pointer1 = *pointer1 | 0x200;\n          }\n          else {\n            *pointer1 = *pointer1 & 0xfffffbff;\n          }\n        }\n        else if (((pointer1 == (uint *)0x4) || (pointer1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        pointer1 = *parameters;\n        if ((pointer1[1] & 0x800) != 0) {\n          pointer1[1] = pointer1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        pointer1 = *parameters;\n        if ((pointer1[1] & 0x800) != 0) {\n          pointer1[1] = pointer1[1] | 0x1000;\n        }\n      }\n      pointer2 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_flags_based_on_conditions_080043a2",
                "param_1": "parameters",
                "puVar1": "pointer1",
                "param_1[0x14]": "pointer2",
                "param_1[4]": "pointer3"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_data_0800457c",
            "code": "\nundefined4 updateData_0800457c(int *data)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)arrayPtr;\n    arrayPtr = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_data_0800457c",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "param_1[9]": "arrayPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_value_0800459c",
            "code": "\nundefined4 updateValue_0800459c(int *values)\n\n{\n  undefined *dataPointer;\n  \n  if (*(short *)((int)values + 0x2a) != 0) {\n    dataPointer = (undefined *)values[9];\n    values[9] = (int)(dataPointer + 1);\n    *dataPointer = (char)*(undefined4 *)(*values + 0x10);\n    *(short *)((int)values + 0x2a) = *(short *)((int)values + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_value_0800459c",
                "param_1": "values",
                "puVar1": "dataPointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "configure_i2_c_080045c0",
            "code": "\nundefined4 configureI2C_080045c0(uint **config)\n\n{\n  bool isPCLK1FreqValid;\n  uint pclk1Freq;\n  uint *clkCycles;\n  uint sampleRate;\n  \n  if (config == (uint **)0x0) {\n    status 1;\n  }\n  if (*(char *)((int)config + 0x3d) == '\\0') {\n    *(undefined *)(config + 0xf) = 0;\n    initializeI2CHardware();\n  }\n  *(undefined *)((int)config + 0x3d) = 0x24;\n  **config = **config & 0xfffffffe;\n  pclk1Freq = HAL_RCC_GetPCLK1Freq();\n  if (config[1] < (uint *)0x186a1) {\n    if (pclk1Freq < 2000000) {\n      isPCLK1FreqValid = true;\n    }\n    else {\n      isPCLK1FreqValid = false;\n    }\n  }\n  else {\n    isPCLK1FreqValid = pclk1Freq < 4000000;\n  }\n  if (isPCLK1FreqValid) {\n    status 1;\n  }\n  sampleRate = pclk1Freq / 1000000;\n  (*config)[1] = sampleRate;\n  if ((uint *)0x186a0 < config[1]) {\n    sampleRate = (sampleRate * 300) / 1000;\n  }\n  (*config)[8] = sampleRate + 1;\n  clkCycles = config[1];\n  if (clkCycles < (uint *)0x186a1) {\n    pclk1Freq = (pclk1Freq - 1) / (uint)((int)clkCycles << 1) + 1 & 0xfff;\n    if (pclk1Freq < 4) {\n      pclk1Freq = 4;\n    }\n  }\n  else {\n    if (config[2] == (uint *)0x0) {\n      sampleRate = (pclk1Freq - 1) / (uint)((int)clkCycles * 3);\n    }\n    else {\n      sampleRate = (pclk1Freq - 1) / (uint)((int)clkCycles * 0x19);\n    }\n    if ((sampleRate + 1 & 0xfff) == 0) {\n      pclk1Freq = 1;\n    }\n    else if (config[2] == (uint *)0x0) {\n      pclk1Freq = (pclk1Freq - 1) / (uint)((int)clkCycles * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      pclk1Freq = (pclk1Freq - 1) / (uint)((int)clkCycles * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*config)[7] = pclk1Freq;\n  **config = (uint)config[7] | (uint)config[8];\n  (*config)[2] = (uint)config[4] | (uint)config[3];\n  (*config)[3] = (uint)config[5] | (uint)config[6];\n  **config = **config | 1;\n  config[0x10] = (uint *)0x0;\n  *(undefined *)((int)config + 0x3d) = 0x20;\n  config[0xc] = (uint *)0x0;\n  *(undefined *)((int)config + 0x3e) = 0;\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "configure_i2_c_080045c0",
                "param_1": "config",
                "bVar1": "isPCLK1FreqValid",
                "uVar2": "pclk1Freq",
                "puVar3": "clkCycles",
                "uVar4": "sampleRate",
                "HAL_I2C_MspInit": "initializeI2CHardware",
                "return": "status"
            },
            "calling": [
                "i2c_custom_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "process_data_08004728",
            "code": "\nundefined4 processData_08004728(uint **data,uint *input1,uint *input2,undefined2 input3)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = input2;\n      *(undefined2 *)((int)data + 0x2a) = input3;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = input1;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "param_1": "data",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "initialize_communication_080047f4",
            "code": "\nundefined4 initializeCommunication_080047f4(uint **communicationData,uint *paramA,uint *paramB,undefined2 paramC)\n\n{\n  undefined4 result;\n  uint *tempPtr;\n  int counter;\n  \n  if (*(char *)((int)communicationData + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        communicationData[0xc] = (uint *)0x0;\n        *(undefined *)((int)communicationData + 0x3d) = 0x20;\n        *(undefined *)(communicationData + 0xf) = 0;\n        return 3;\n      }\n      tempPtr = *communicationData;\n      counter = counter + -1;\n    } while ((tempPtr[6] & 2) != 0);\n    if (*(char *)(communicationData + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(communicationData + 0xf) = 1;\n      if ((*tempPtr & 1) == 0) {\n        *tempPtr = *tempPtr | 1;\n      }\n      **communicationData = **communicationData & 0xfffff7ff;\n      *(undefined *)((int)communicationData + 0x3d) = 0x22;\n      *(undefined *)((int)communicationData + 0x3e) = 0x10;\n      result = 0;\n      communicationData[0x10] = (uint *)0x0;\n      communicationData[9] = paramB;\n      *(undefined2 *)((int)communicationData + 0x2a) = paramC;\n      communicationData[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(communicationData + 10) = *(undefined2 *)((int)communicationData + 0x2a);\n      communicationData[0x11] = paramA;\n      **communicationData = **communicationData | 0x400;\n      **communicationData = **communicationData | 0x100;\n      *(undefined *)(communicationData + 0xf) = 0;\n      (*communicationData)[1] = (*communicationData)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "initialize_communication_080047f4",
                "param_1": "communicationData",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "uVar1": "result",
                "puVar2": "tempPtr",
                "local_c": "counter"
            },
            "calling": [
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "check_input_080048c8",
            "code": "\nundefined4 check_input_080048c8(uint **param_ptr,uint *input_1,int input_2,uint *input_3)\n\n{\n  undefined4 result;\n  uint *ptr_tmp;\n  \n  if (*(char *)((int)param_ptr + 0x3d) == '(') {\n    if (input_1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_2 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_ptr + 0xf) = 1;\n      ptr_tmp = *param_ptr;\n      if ((*ptr_tmp & 1) == 0) {\n        *ptr_tmp = *ptr_tmp | 1;\n      }\n      **param_ptr = **param_ptr & 0xfffff7ff;\n      *(undefined *)((int)param_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)param_ptr + 0x3e) = 0x20;\n      result = 0;\n      param_ptr[0x10] = (uint *)0x0;\n      param_ptr[9] = input_1;\n      *(short *)((int)param_ptr + 0x2a) = (short)input_2;\n      param_ptr[0xb] = input_3;\n      *(undefined2 *)(param_ptr + 10) = *(undefined2 *)((int)param_ptr + 0x2a);\n      *(undefined *)(param_ptr + 0xf) = 0;\n      (*param_ptr)[1] = (*param_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "check_input_080048c8",
                "param_1": "param_ptr",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "uVar1": "result",
                "puVar2": "ptr_tmp"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "validate_and_initialize_08004954",
            "code": "\nundefined4 validate_and_initialize_08004954(uint **parameter_ptrs,uint *input_ptr,int input_length,uint *output_ptr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)parameter_ptrs + 0x3d) == '(') {\n    if (input_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameter_ptrs + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameter_ptrs + 0xf) = 1;\n      ptr = *parameter_ptrs;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **parameter_ptrs = **parameter_ptrs & 0xfffff7ff;\n      *(undefined *)((int)parameter_ptrs + 0x3d) = 0x2a;\n      *(undefined *)((int)parameter_ptrs + 0x3e) = 0x20;\n      result = 0;\n      parameter_ptrs[0x10] = (uint *)0x0;\n      parameter_ptrs[9] = input_ptr;\n      *(short *)((int)parameter_ptrs + 0x2a) = (short)input_length;\n      parameter_ptrs[0xb] = output_ptr;\n      *(undefined2 *)(parameter_ptrs + 10) = *(undefined2 *)((int)parameter_ptrs + 0x2a);\n      *(undefined *)(parameter_ptrs + 0xf) = 0;\n      (*parameter_ptrs)[1] = (*parameter_ptrs)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "validate_and_initialize_08004954",
                "param_1": "parameter_ptrs",
                "param_2": "input_ptr",
                "param_3": "input_length",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "configure_permissions_080049e0",
            "code": "\nundefined4 configurePermissions_080049e0(uint **permissionPointer)\n\n{\n  uint *permissionValue;\n  \n  if (*(char *)((int)permissionPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)permissionPointer + 0x3d) = 0x28;\n  permissionValue = *permissionPointer;\n  if ((*permissionValue & 1) == 0) {\n    *permissionValue = *permissionValue | 1;\n  }\n  **permissionPointer = **permissionPointer | 0x400;\n  (*permissionPointer)[1] = (*permissionPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "configure_permissions_080049e0",
                "param_1": "permissionPointer",
                "puVar1": "permissionValue"
            },
            "calling": [
                "i2c_attachSlaveRxEvent",
                "HAL_I2C_ErrorCallback",
                "i2c_attachSlaveTxEvent",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "process_data_08004a24",
            "code": "\nundefined4 processData_08004a24(int *data)\n\n{\n  char lastChar;\n  byte *byteData;\n  \n  lastChar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byteData = (byte *)data[9];\n    data[9] = (int)(byteData + 1);\n    *(uint *)(*data + 0x10) = (uint)*byteData;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (lastChar == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "cVar1": "lastChar",
                "pbVar2": "byteData"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "process_data_08004a76",
            "code": "\nundefined4 processData_08004a76(int *data)\n\n{\n  char currentChar;\n  undefined *ptrToUpdate;\n  \n  currentChar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptrToUpdate = (undefined *)data[9];\n    data[9] = (int)(ptrToUpdate + 1);\n    *ptrToUpdate = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (currentChar == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      performCallback();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data",
                "cVar1": "currentChar",
                "puVar2": "ptrToUpdate",
                "HAL_I2C_SlaveRxCpltCallback()": "performCallback()"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "perform_i2_c_addressing_08004ac2",
            "code": "\nundefined4 performI2CAddressing_08004ac2(int *devicePointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selectedAddress;\n  uint deviceStatus;\n  \n  deviceStatus = *(uint *)(*devicePointer + 0x18);\n  if ((deviceStatus & 0x80) == 0) {\n    selectedAddress = *(undefined2 *)(devicePointer + 3);\n  }\n  else {\n    selectedAddress = *(undefined2 *)(devicePointer + 6);\n  }\n  HAL_I2C_AddrCallback(devicePointer,(*(uint *)(*devicePointer + 0x18) & 4) == 0,selectedAddress,deviceStatus,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "perform_i2_c_addressing_08004ac2",
                "param_1": "devicePointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selectedAddress",
                "uVar2": "deviceStatus"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_i2_c_events_08004aec",
            "code": "\nundefined4 handleI2CEvents_08004aec(uint **eventData)\n\n{\n  if (((eventData[0xb] == (uint *)0x4) || (eventData[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)eventData + 0x3d) == '(')) {\n    eventData[0xb] = (uint *)0xffff0000;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback();\n  }\n  else if (*(char *)((int)eventData + 0x3d) == '!') {\n    eventData[0xb] = (uint *)0xffff0000;\n    eventData[0xc] = (uint *)0x21;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback();\n  }\n  else {\n    (*eventData)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_i2_c_events_08004aec",
                "param_1": "eventData"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_data_08004b82",
            "code": "\nundefined4 processData_08004b82(uint **data)\n\n{\n  char charValue;\n  uint *ptrValue;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  ptrValue = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (charValue == '!')) {\n    if ((ptrValue == (uint *)0x4) || ((ptrValue == (uint *)0x8 || (ptrValue == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        HAL_I2C_MemTxCpltCallback();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      HAL_I2C_MasterTxCpltCallback();\n    }\n  }\n  else if ((charValue == '!') || ((*(char *)((int)data + 0x3e) == '@' && (charValue == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptrValue = data[9];\n          data[9] = (uint *)((int)ptrValue + 1);\n          (*data)[4] = (uint)*(byte *)ptrValue;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrValue = data[9];\n      data[9] = (uint *)((int)ptrValue + 1);\n      (*data)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_data_08004b82",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptrValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_i2_c_master_event_08004ccc",
            "code": "\nundefined4 processI2CMasterEvent_08004ccc(uint **i2cParams)\n\n{\n  uint *bytePointer;\n  \n  bytePointer = i2cParams[0xb];\n  if (*(char *)((int)i2cParams + 0x3d) == '!') {\n    if (*(short *)((int)i2cParams + 0x2a) == 0) {\n      if (((bytePointer == (uint *)0x4) || (bytePointer == (uint *)0x8)) || (bytePointer == (uint *)0xffff0000)) {\n        (*i2cParams)[1] = (*i2cParams)[1] & 0xfffff8ff;\n        **i2cParams = **i2cParams | 0x200;\n        i2cParams[0xc] = (uint *)0x0;\n        *(undefined *)((int)i2cParams + 0x3d) = 0x20;\n        if (*(char *)((int)i2cParams + 0x3e) == '@') {\n          *(undefined *)((int)i2cParams + 0x3e) = 0;\n          HAL_I2C_MemTxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)i2cParams + 0x3e) = 0;\n          HAL_I2C_MasterTxCpltCallback();\n        }\n      }\n      else {\n        (*i2cParams)[1] = (*i2cParams)[1] & 0xfffff8ff;\n        i2cParams[0xc] = (uint *)0x11;\n        *(undefined *)((int)i2cParams + 0x3e) = 0;\n        *(undefined *)((int)i2cParams + 0x3d) = 0x20;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      bytePointer = i2cParams[9];\n      i2cParams[9] = (uint *)((int)bytePointer + 1);\n      (*i2cParams)[4] = (uint)*(byte *)bytePointer;\n      *(short *)((int)i2cParams + 0x2a) = *(short *)((int)i2cParams + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_i2_c_master_event_08004ccc",
                "param_1": "i2cParams",
                "puVar1": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "handle_data_transfer_08004d6c",
            "code": "\nundefined4 handleDataTransfer_08004d6c(uint **pData)\n\n{\n  uint *pChar;\n  \n  if (*(char *)((int)pData + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)pData + 0x2a) < 4) {\n      if (*(ushort *)((int)pData + 0x2a) - 2 < 2) {\n        if (pUInt == (uint *)0x2) {\n          **pData = **pData | 0x400;\n        }\n        else {\n          **pData = **pData & 0xfffffbff;\n          **pData = **pData | 0x800;\n        }\n        (*pData)[1] = (*pData)[1] & 0xfffffbff;\n      }\n      else {\n        if (pUInt == (uint *)0x2) {\n          **pData = **pData | 0x400;\n        }\n        else {\n          **pData = **pData & 0xfffffbff;\n        }\n        (*pData)[1] = (*pData)[1] & 0xfffff8ff;\n        pChar = pUInt3;\n        pUInt3 = (uint *)((int)pChar + 1);\n        *(char *)pChar = (char)(*pData)[4];\n        *(short *)((int)pData + 0x2a) = *(short *)((int)pData + 0x2a) + -1;\n        *(undefined *)((int)pData + 0x3d) = 0x20;\n        pData[0xc] = (uint *)0x0;\n        if (*(char *)((int)pData + 0x3e) == '@') {\n          *(undefined *)((int)pData + 0x3e) = 0;\n          HAL_I2C_MemRxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)pData + 0x3e) = 0;\n          HAL_I2C_MasterRxCpltCallback();\n        }\n      }\n    }\n    else {\n      pChar = pUInt3;\n      pUInt3 = (uint *)((int)pChar + 1);\n      *(char *)pChar = (char)(*pData)[4];\n      *(short *)((int)pData + 0x2a) = *(short *)((int)pData + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "handle_data_transfer_08004d6c",
                "param_1": "pData",
                "puVar1": "pChar",
                "param_1[0xb]": "pUInt",
                "param_1[9]": "pUInt3"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_data_08004e3c",
            "code": "\nundefined4 processData_08004e3c(uint **data)\n\n{\n  uint *valuePtr;\n  \n  valuePtr = data[0xb];\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((valuePtr == (uint *)0x4) || (valuePtr == (uint *)0x8)) || (valuePtr == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    valuePtr = data[9];\n    data[9] = (uint *)((int)valuePtr + 1);\n    *(char *)valuePtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((valuePtr == (uint *)0x4) || (valuePtr == (uint *)0x8)) || (valuePtr == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (valuePtr == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    valuePtr = data[9];\n    data[9] = (uint *)((int)valuePtr + 1);\n    *(char *)valuePtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    valuePtr = data[9];\n    data[9] = (uint *)((int)valuePtr + 1);\n    *(char *)valuePtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_MemRxCpltCallback();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_MasterRxCpltCallback();\n    }\n  }\n  else {\n    valuePtr = data[9];\n    data[9] = (uint *)((int)valuePtr + 1);\n    *(char *)valuePtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "valuePtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "update_i2_c_status_08004f3c",
            "code": "\nvoid updateI2CStatus_08004f3c(uint **i2cStatus)\n\n{\n  int dmaResult;\n  uint *charPtr;\n  uint *i2cData;\n  \n  if (*(byte *)((int)i2cStatus + 0x3d) - 0x29 < 2) {\n    i2cStatus[0xc] = (uint *)0x0;\n    *(undefined *)((int)i2cStatus + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)i2cStatus + 0x3d) != '`') && (((*i2cStatus)[1] & 0x800) == 0)) {\n      *(undefined *)((int)i2cStatus + 0x3d) = 0x20;\n    }\n    i2cStatus[0xc] = (uint *)0x0;\n    *(undefined *)((int)i2cStatus + 0x3e) = 0;\n  }\n  **i2cStatus = **i2cStatus & 0xfffff7ff;\n  i2cData = *i2cStatus;\n  if ((i2cData[1] & 0x800) == 0) {\n    if (*(char *)((int)i2cStatus + 0x3d) == '`') {\n      *(undefined *)((int)i2cStatus + 0x3d) = 0x20;\n      i2cStatus[0x10] = (uint *)0x0;\n      if ((i2cData[5] & 0x40) != 0) {\n        charPtr = i2cStatus[9];\n        i2cStatus[9] = (uint *)((int)charPtr + 1);\n        *(char *)charPtr = (char)i2cData[4];\n      }\n      **i2cStatus = **i2cStatus & 0xfffffffe;\n      handleI2CAbortComplete(i2cStatus);\n    }\n    else {\n      if ((i2cData[5] & 0x40) != 0) {\n        charPtr = i2cStatus[9];\n        i2cStatus[9] = (uint *)((int)charPtr + 1);\n        *(char *)charPtr = (char)i2cData[4];\n      }\n      handleI2CError(i2cStatus);\n    }\n  }\n  else {\n    i2cData[1] = i2cData[1] & 0xfffff7ff;\n    if (*(char *)((int)i2cStatus[0xd] + 0x21) == '\\x01') {\n      i2cStatus[0xe][0xd] = (uint)&label_1;\n      dmaResult = abortDMA(i2cStatus[0xe]);\n      if (dmaResult != 0) {\n        if (((*i2cStatus)[5] & 0x40) != 0) {\n          i2cData = i2cStatus[9];\n          i2cStatus[9] = (uint *)((int)i2cData + 1);\n          *(char *)i2cData = (char)(*i2cStatus)[4];\n        }\n        **i2cStatus = **i2cStatus & 0xfffffffe;\n        *(undefined *)((int)i2cStatus + 0x3d) = 0x20;\n        (*(code *)i2cStatus[0xe][0xd])();\n      }\n    }\n    else {\n      i2cStatus[0xd][0xd] = (uint)&label_1;\n      dmaResult = abortDMA(i2cStatus[0xd]);\n      if (dmaResult != 0) {\n        **i2cStatus = **i2cStatus & 0xfffffffe;\n        *(undefined *)((int)i2cStatus + 0x3d) = 0x20;\n        (*(code *)i2cStatus[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)i2cStatus + 0x3d) == '(') && (((uint)i2cStatus[0x10] & 4) != 0)) {\n    i2cStatus[0xb] = (uint *)0xffff0000;\n    i2cStatus[0xc] = (uint *)0x0;\n    *(undefined *)((int)i2cStatus + 0x3d) = 0x20;\n    *(undefined *)((int)i2cStatus + 0x3e) = 0;\n    handleI2CListenComplete(i2cStatus);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "update_i2_c_status_08004f3c",
                "param_1": "i2cStatus",
                "iVar1": "dmaResult",
                "puVar2": "charPtr",
                "puVar3": "i2cData",
                "HAL_I2C_AbortCpltCallback": "handleI2CAbortComplete",
                "HAL_I2C_ErrorCallback": "handleI2CError",
                "HAL_DMA_Abort_IT": "abortDMA",
                "LAB_080053cc_1": "label_1",
                "HAL_I2C_ListenCpltCallback": "handleI2CListenComplete"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "extract_and_process_data_08005084",
            "code": "\nundefined4 extractAndProcessData_08005084(uint **data)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  pointer1 = *data;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = data[9];\n      data[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      pointer1 = data[9];\n      data[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "extract_and_process_data_08005084",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_i2_c_event_08005188",
            "code": "\nvoid processI2CEvent_08005188(int *eventData)\n\n{\n  int data;\n  uint eventStatus;\n  uint controlStatus;\n  uint transferStatus;\n  \n  data = *eventData;\n  transferStatus = *(uint *)(data + 0x18);\n  eventStatus = *(uint *)(data + 0x14);\n  controlStatus = *(uint *)(data + 4);\n  if ((*(char *)((int)eventData + 0x3e) == '\\x10') || (*(char *)((int)eventData + 0x3e) == '@')) {\n    if (((eventStatus & 0x10001) == 0) || ((controlStatus & 0x200) == 0)) {\n      if (((eventStatus & 0x10008) == 0) || ((controlStatus & 0x200) == 0)) {\n        if (((eventStatus & 0x10002) != 0) && ((controlStatus & 0x200) != 0)) {\n          I2C_Master_ADDR(eventData);\n        }\n      }\n      else {\n        I2C_Master_ADD10(eventData);\n      }\n    }\n    else {\n      I2C_Master_SB(eventData);\n    }\n    if ((transferStatus & 0x100004) == 0) {\n      if ((((eventStatus & 0x10040) != 0) && ((controlStatus & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((controlStatus & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(eventData);\n        return;\n      }\n    }\n    else {\n      if ((((eventStatus & 0x10080) != 0) && ((controlStatus & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((controlStatus & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(eventData);\n        return;\n      }\n    }\n  }\n  else {\n    if (((eventStatus & 0x10002) != 0) && ((controlStatus & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((eventStatus & 0x10010) != 0) && ((controlStatus & 0x200) != 0)) {\n      I2C_Slave_STOPF(eventData);\n      return;\n    }\n    if ((transferStatus & 0x100004) == 0) {\n      if ((((eventStatus & 0x10040) != 0) && ((controlStatus & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((controlStatus & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(eventData);\n      }\n    }\n    else {\n      if ((((eventStatus & 0x10080) != 0) && ((controlStatus & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((controlStatus & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(eventData);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_i2_c_event_08005188",
                "param_1": "eventData",
                "iVar1": "data",
                "uVar2": "eventStatus",
                "uVar3": "controlStatus",
                "uVar4": "transferStatus"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_RXNE",
                "I2C_SlaveReceive_BTF",
                "I2C_SlaveTransmit_BTF",
                "I2C_SlaveTransmit_TXE",
                "I2C_MasterReceive_BTF",
                "I2C_Slave_ADDR",
                "I2C_MasterTransmit_BTF",
                "I2C_Master_ADDR",
                "I2C_MasterTransmit_TXE",
                "I2C_Master_SB",
                "I2C_Slave_STOPF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "update_i2_c_status_080052f0",
            "code": "\nvoid updateI2CStatus_080052f0(uint **ptrParam)\n\n{\n  char charVar;\n  uint *ptrData;\n  uint status;\n  uint flag;\n  \n  ptrData = *ptrParam;\n  status = ptrData[5];\n  flag = ptrData[1];\n  if (((status & 0x10100) != 0) && ((flag & 0x100) != 0)) {\n    ptrParam[0x10] = (uint *)((uint)ptrParam[0x10] | 1);\n    ptrData[5] = 0xfffffeff;\n    **ptrParam = **ptrParam | 0x8000;\n  }\n  if (((status & 0x10200) != 0) && ((flag & 0x100) != 0)) {\n    ptrParam[0x10] = (uint *)((uint)ptrParam[0x10] | 2);\n    (*ptrParam)[5] = 0xfffffdff;\n  }\n  if (((status & 0x10400) != 0) && ((flag & 0x100) != 0)) {\n    charVar = *(char *)((int)ptrParam + 0x3d);\n    if (((*(char *)((int)ptrParam + 0x3e) == ' ') && (*(short *)((int)ptrParam + 0x2a) == 0)) &&\n       (((charVar == '!' || (charVar == ')')) || ((charVar == '(' && (ptrParam[0xc] == (uint *)0x21)))))) {\n      handleI2CSlaveAF(ptrParam);\n    }\n    else {\n      ptrParam[0x10] = (uint *)((uint)ptrParam[0x10] | 4);\n      if (*(char *)((int)ptrParam + 0x3e) == '\\x10') {\n        **ptrParam = **ptrParam | 0x200;\n      }\n      (*ptrParam)[5] = 0xfffffbff;\n    }\n  }\n  if (((status & 0x10800) != 0) && ((flag & 0x100) != 0)) {\n    ptrParam[0x10] = (uint *)((uint)ptrParam[0x10] | 8);\n    (*ptrParam)[5] = 0xfffff7ff;\n  }\n  if (ptrParam[0x10] != (uint *)0x0) {\n    handleI2CITError(ptrParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "update_i2_c_status_080052f0",
                "param_1": "ptrParam",
                "puVar2": "ptrData",
                "uVar3": "status",
                "uVar4": "flag",
                "cVar1": "charVar",
                "I2C_Slave_AF": "handleI2CSlaveAF",
                "I2C_ITError": "handleI2CITError"
            },
            "calling": [],
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_value_0800542a",
            "code": "\nundefined getByteValue_0800542a(int inputValue)\n\n{\n  return *(undefined *)(inputValue + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_value_0800542a",
                "param_1": "inputValue"
            },
            "calling": [
                "i2c_master_write",
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_pointer_from_offset_08005430",
            "code": "\nundefined4 getPointerFromOffset_08005430(int offset)\n\n{\n  return *(undefined4 *)(offset + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_pointer_from_offset_08005430",
                "param_1": "offset"
            },
            "calling": [
                "i2c_master_write",
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int inputValue)\n\n{\n  bool hasDelay;\n  int delayCounter;\n  \n  delayCounter = inputValue * (DAT_20000018 / 8000);\n  do {\n    hasDelay = delayCounter != 0;\n    delayCounter = delayCounter + -1;\n  } while (hasDelay);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "inputValue",
                "local_4": "delayCounter",
                "bVar1": "hasDelay"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "check_device_status_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkDeviceStatus_08005460(uint *statusArray)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool isConditionMet;\n  \n  if ((*statusArray & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (statusArray[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = statusArray[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (statusArray[1] == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*statusArray & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (statusArray[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | statusArray[5] << 3;\n    }\n    else if (statusArray[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | statusArray[5] << 3;\n    }\n  }\n  if ((*statusArray & 8) != 0) {\n    if (statusArray[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((*statusArray & 4) != 0) {\n    isConditionMet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    value = statusArray[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (statusArray[3] == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (statusArray[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (statusArray[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (statusArray[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | statusArray[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | statusArray[8] | statusArray[9];\n        _DAT_42420060 = 1;\n        startTime = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = HAL_GetTick();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "check_device_status_08005460",
                "param_1": "statusArray",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "isConditionMet"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "RCC_Delay",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_delay_08005840",
            "code": "\n\n\nuint calculateDelay_08005840(void)\n\n{\n  uint delay;\n  undefined2 multiplier;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  multiplier = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&multiplier - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_delay_08005840",
                "uVar1": "delay",
                "local_1c": "multiplier",
                "uStack_18": "value1",
                "uStack_14": "value2",
                "uStack_10": "value3",
                "uStack_c": "value4"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_hardware_080058ac",
            "code": "\n\n\nundefined4 initializeHardware_080058ac(uint *hardwareConfiguration,uint numConfigurations)\n\n{\n  int startTime;\n  int currentTime;\n  uint systemClockFreq;\n  \n  if ((_DAT_40022000 & 7) < numConfigurations) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numConfigurations;\n    if (numConfigurations != (numConfigurations & 7)) {\n      return 1;\n    }\n  }\n  if ((*hardwareConfiguration & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | hardwareConfiguration[2];\n  }\n  if ((*hardwareConfiguration & 1) != 0) {\n    systemClockFreq = hardwareConfiguration[1];\n    if (systemClockFreq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((systemClockFreq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = systemClockFreq | _DAT_40021004 & 0xfffffffc;\n    startTime = HAL_GetTick();\n    if (hardwareConfiguration[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (hardwareConfiguration[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (numConfigurations < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numConfigurations;\n    if (numConfigurations != (numConfigurations & 7)) {\n      return 1;\n    }\n  }\n  if ((*hardwareConfiguration & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | hardwareConfiguration[3];\n  }\n  if ((*hardwareConfiguration & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | hardwareConfiguration[4] << 3;\n  }\n  systemClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000018 = systemClockFreq >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_hardware_080058ac",
                "param_1": "hardwareConfiguration",
                "param_2": "numConfigurations",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "systemClockFreq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_config_080058d2",
            "code": "\n\n\nundefined4 initializeConfig_080058d2(uint *configFlags,uint configValue)\n\n{\n  int startTime;\n  int currentTime;\n  uint systemClockFreq;\n  \n  if ((*configFlags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configFlags[2];\n  }\n  if ((*configFlags & 1) != 0) {\n    systemClockFreq = configFlags[1];\n    if (systemClockFreq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((systemClockFreq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = systemClockFreq | _DAT_40021004 & 0xfffffffc;\n    startTime = HAL_GetTick();\n    if (configFlags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (configFlags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (configValue < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | configValue;\n    if (configValue != (configValue & 7)) {\n      return 1;\n    }\n  }\n  if ((*configFlags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configFlags[3];\n  }\n  if ((*configFlags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configFlags[4] << 3;\n  }\n  systemClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000018 = systemClockFreq >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_config_080058d2",
                "param_1": "configFlags",
                "param_2": "configValue",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "systemClockFreq"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_global_data_08005a1c",
            "code": "\nundefined4 getGlobalData_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_global_data_08005a1c"
            },
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_adjusted_hclk_freq_08005a28",
            "code": "\n\n\nuint getAdjustedHCLKFreq_08005a28(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_adjusted_hclk_freq_08005a28",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig",
                "getTimerClkFreq",
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_hclk_frequency_08005a48",
            "code": "\n\n\nuint getHCLKFrequency_08005a48(void)\n\n{\n  uint hclkFrequency;\n  \n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  return hclkFrequency >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_hclk_frequency_08005a48",
                "uVar1": "hclkFrequency"
            },
            "calling": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "UART_SetConfig",
                "getTimerClkFreq"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_data_08005a68",
            "code": "\n\n\nvoid initializeData_08005a68(undefined4 *output1,uint *output2)\n\n{\n  *output1 = 0xf;\n  output1[1] = _DAT_40021004 & 3;\n  output1[2] = _DAT_40021004 & 0xf0;\n  output1[3] = _DAT_40021004 & 0x700;\n  output1[4] = _DAT_40021004 >> 3 & 0x700;\n  *output2 = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_data_08005a68",
                "param_1": "output1",
                "param_2": "output2"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_status_flags_08005aa4",
            "code": "\n\n\nundefined4 updateStatusFlags_08005aa4(uint *flags)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int startTime;\n  int currentTime;\n  bool isBitSet;\n  \n  if ((*flags & 1) != 0) {\n    isBitSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          status 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (flags[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentTime = HAL_GetTick();\n          if (5000 < (uint)(currentTime - startTime)) {\n            status 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | flags[1];\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | flags[3];\n  }\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_status_flags_08005aa4",
                "param_1": "flags",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "startTime",
                "iVar4": "currentTime",
                "bVar5": "isBitSet",
                "return": "status"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_clock_frequency_08005bb8",
            "code": "\n\n\nuint calculateClockFrequency_08005bb8(int inputParam)\n\n{\n  uint outputFrequency;\n  undefined2 constantValue;\n  undefined4 multiplier;\n  undefined4 divider;\n  undefined4 baseFrequency;\n  undefined4 temporaryVariable;\n  \n  temporaryVariable = 0x10100f0e;\n  baseFrequency = 0xd0c0b0a;\n  divider = 0x9080706;\n  multiplier = 0x5040302;\n  constantValue = 0x201;\n  if (inputParam == 2) {\n    outputFrequency = HAL_RCC_GetPCLK2Freq();\n    outputFrequency = outputFrequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (inputParam == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      outputFrequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        outputFrequency = 4000000;\n      }\n      else {\n        outputFrequency = 8000000 / *(byte *)((int)&constantValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      outputFrequency = outputFrequency * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        outputFrequency = (outputFrequency * 2) / 3;\n      }\n    }\n  }\n  else if (inputParam == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      outputFrequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      outputFrequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        outputFrequency = 0;\n      }\n      else {\n        outputFrequency = 0xf424;\n      }\n    }\n    else {\n      outputFrequency = 0;\n    }\n  }\n  else {\n    outputFrequency = 0;\n  }\n  return outputFrequency;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_clock_frequency_08005bb8",
                "param_1": "inputParam",
                "uVar1": "outputFrequency",
                "local_24": "constantValue",
                "uStack_20": "multiplier",
                "uStack_1c": "divider",
                "uStack_18": "baseFrequency",
                "uStack_14": "temporaryVariable"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "handle_alarm_event_08005cb4",
            "code": "\n\n\nvoid handleAlarmEvent_08005cb4(uint **param)\n\n{\n  if (((**param & 2) != 0) && (((*param)[1] & 2) != 0)) {\n    HAL_RTC_AlarmAEventCallback();\n    (*param)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)param + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "handle_alarm_event_08005cb4",
                "param_1": "param"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_data_08005cec",
            "code": "\nvoid updateData_08005cec(int dataAddress,uint *dataArray)\n\n{\n  uint modifiedFlag;\n  uint tempValue1;\n  uint tempValue2;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffffe;\n  tempValue1 = *(uint *)(dataAddress + 4);\n  tempValue2 = *dataArray;\n  modifiedFlag = *(uint *)(dataAddress + 0x20) & 0xfffffffd | dataArray[2];\n  if (dataAddress == 0x40012c00) {\n    modifiedFlag = (modifiedFlag & 0xfffffff7 | dataArray[3]) & 0xfffffffb;\n    tempValue1 = tempValue1 & 0xfffffcff | dataArray[5] | dataArray[6];\n  }\n  *(uint *)(dataAddress + 4) = tempValue1;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffffff8c | tempValue2;\n  *(uint *)(dataAddress + 0x34) = dataArray[1];\n  *(uint *)(dataAddress + 0x20) = modifiedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "dataAddress",
                "param_2": "dataArray",
                "uVar1": "modifiedFlag",
                "uVar2": "tempValue1",
                "uVar3": "tempValue2"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_param_values_08005d48",
            "code": "\nvoid updateParamValues_08005d48(int param1,uint *param2)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(param1 + 0x20) = *(uint *)(param1 + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(param1 + 4);\n  updatedValue3 = *param2;\n  updatedValue1 = *(uint *)(param1 + 0x20) & 0xfffffdff | param2[2] << 8;\n  if (param1 == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | param2[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | param2[5] << 4 | param2[6] << 4;\n  }\n  *(uint *)(param1 + 4) = updatedValue2;\n  *(uint *)(param1 + 0x1c) = *(uint *)(param1 + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(param1 + 0x3c) = param2[1];\n  *(uint *)(param1 + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_param_values_08005d48",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_parameters_08005dac",
            "code": "\nvoid updateParameters_08005dac(int baseAddress,int *paramArray)\n\n{\n  uint flags;\n  int value1;\n  int value2;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  flags = *(uint *)(baseAddress + 4);\n  value1 = *paramArray;\n  value2 = paramArray[2];\n  if (baseAddress == 0x40012c00) {\n    flags = flags & 0xffffbfff | paramArray[5] << 6;\n  }\n  *(uint *)(baseAddress + 4) = flags;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(baseAddress + 0x40) = paramArray[1];\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_parameters_08005dac",
                "param_1": "baseAddress",
                "param_2": "paramArray",
                "uVar1": "flags",
                "iVar2": "value1",
                "iVar3": "value2"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "initialize_timer_08005df4",
            "code": "\nvoid initializeTimer_08005df4(uint **timer)\n\n{\n  uint *timerInfo;\n  \n  *(undefined *)((int)timer + 0x3d) = 2;\n  timerInfo = *timer;\n  if ((timerInfo[8] & 0x1111) == 0) {\n    if ((timerInfo[8] & 0x444) == 0) {\n      *timerInfo = *timerInfo & 0xfffffffe;\n    }\n  }\n  deinitializeTimer_08005df4(timer);\n  *(undefined *)((int)timer + 0x3d) = 0;\n  *(undefined *)(timer + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "initialize_timer_08005df4",
                "param_1": "timer",
                "puVar1": "timerInfo",
                "HAL_TIM_OC_MspDeInit": "deinitializeTimer"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "HAL_TIM_OC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "deinit_pwm_08005e2e",
            "code": "\nvoid deinit_PWM_08005e2e(uint **param)\n\n{\n  uint *ptr_param;\n  \n  *(undefined *)((int)param + 0x3d) = 2;\n  ptr_param = *param;\n  if ((ptr_param[8] & 0x1111) == 0) {\n    if ((ptr_param[8] & 0x444) == 0) {\n      *ptr_param = *ptr_param & 0xfffffffe;\n    }\n  }\n  HAL_TIM_PWM_MspDeInit(param);\n  *(undefined *)((int)param + 0x3d) = 0;\n  *(undefined *)(param + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "deinit_pwm_08005e2e",
                "param_1": "param",
                "puVar1": "ptr_param"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "process_timers_08005e6e",
            "code": "\nvoid processTimers_08005e6e(int *timer)\n\n{\n  int tempVar;\n  \n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 2) != 0) && ((*(uint *)(tempVar + 0xc) & 2) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffffd;\n    *(undefined *)(timer + 7) = 1;\n    if ((*(uint *)(*timer + 0x18) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback();\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback();\n    }\n    *(undefined *)(timer + 7) = 0;\n  }\n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 4) != 0) && ((*(uint *)(tempVar + 0xc) & 4) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffffb;\n    *(undefined *)(timer + 7) = 2;\n    if ((*(uint *)(*timer + 0x18) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    *(undefined *)(timer + 7) = 0;\n  }\n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 8) != 0) && ((*(uint *)(tempVar + 0xc) & 8) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffff7;\n    *(undefined *)(timer + 7) = 4;\n    if ((*(uint *)(*timer + 0x1c) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    *(undefined *)(timer + 7) = 0;\n  }\n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 0x10) != 0) && ((*(uint *)(tempVar + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffffef;\n    *(undefined *)(timer + 7) = 8;\n    if ((*(uint *)(*timer + 0x1c) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    *(undefined *)(timer + 7) = 0;\n  }\n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 1) != 0) && ((*(uint *)(tempVar + 0xc) & 1) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(timer);\n  }\n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 0x80) != 0) && ((*(uint *)(tempVar + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(timer);\n  }\n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 0x40) != 0) && ((*(uint *)(tempVar + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffffbf;\n    HAL_TIM_TriggerCallback(timer);\n  }\n  tempVar = *timer;\n  if (((*(uint *)(tempVar + 0x10) & 0x20) != 0) && ((*(uint *)(tempVar + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(timer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "process_timers_08005e6e",
                "param_1": "timer",
                "iVar1": "tempVar"
            },
            "calling": [],
            "called": [
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid updateMemory_08005fe8(uint *memoryBlock,uint *sourceBlock)\n\n{\n  uint memoryValue;\n  \n  memoryValue = *memoryBlock;\n  if ((((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n      (memoryBlock == (uint *)0x40000400)) || (memoryBlock == (uint *)0x40000800)) {\n    memoryValue = memoryValue & 0xffffff8f | sourceBlock[1];\n  }\n  if (((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n     ((memoryBlock == (uint *)0x40000400 || (memoryBlock == (uint *)0x40000800)))) {\n    memoryValue = memoryValue & 0xfffffcff | sourceBlock[3];\n  }\n  *memoryBlock = memoryValue & 0xffffff7f | sourceBlock[5];\n  memoryBlock[0xb] = sourceBlock[2];\n  memoryBlock[10] = *sourceBlock;\n  if (memoryBlock == (uint *)0x40012c00) {\n    specialValue = sourceBlock[4];\n  }\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memoryBlock",
                "param_2": "sourceBlock",
                "uVar1": "memoryValue",
                "uRam40012c30": "specialValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_OC_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_timer_08006060",
            "code": "\nundefined4 initializeTimer_08006060(undefined4 *timerParams)\n\n{\n  if (timerParams != (undefined4 *)0x0) {\n    if (*(char *)((int)timerParams + 0x3d) == '\\0') {\n      *(undefined *)(timerParams + 0xf) = 0;\n      initializeMSP();\n    }\n    *(undefined *)((int)timerParams + 0x3d) = 2;\n    setTimerConfig(*timerParams,timerParams + 1);\n    *(undefined *)((int)timerParams + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_timer_08006060",
                "param_1": "timerParams",
                "HAL_TIM_OC_MspInit": "initializeMSP",
                "TIM_Base_SetConfig": "setTimerConfig"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_OC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_pwm_config_08006092",
            "code": "\nundefined4 initialize_pwm_config_08006092(undefined4 *config_ptr)\n\n{\n  if (config_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)config_ptr + 0x3d) == '\\0') {\n      *(undefined *)(config_ptr + 0xf) = 0;\n      initialize_pwm_peripheral();\n    }\n    *(undefined *)((int)config_ptr + 0x3d) = 2;\n    set_pwm_config(*config_ptr,config_ptr + 1);\n    *(undefined *)((int)config_ptr + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_pwm_config_08006092",
                "param_1": "config_ptr",
                "HAL_TIM_PWM_MspInit": "initialize_pwm_peripheral",
                "TIM_Base_SetConfig": "set_pwm_config"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_params_080060c4",
            "code": "\nvoid updateParams_080060c4(int baseAddress,int *paramArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int paramValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(baseAddress + 4);\n  paramValue = *paramArray;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xffffffdf | paramArray[2] << 4;\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | paramArray[3] << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | paramArray[5] << 2 | paramArray[6] << 2;\n  }\n  *(uint *)(baseAddress + 4) = updatedValue2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(baseAddress + 0x38) = paramArray[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_params_080060c4",
                "param_1": "baseAddress",
                "param_2": "paramArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "paramValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "configure_timer_output_08006128",
            "code": "\nundefined4 configureTimerOutput_08006128(undefined4 *timerConfig,undefined4 param2,undefined4 outputChannel)\n\n{\n  if (*(char *)(timerConfig + 0xf) != '\\x01') {\n    *(undefined *)(timerConfig + 0xf) = 1;\n    *(undefined *)((int)timerConfig + 0x3d) = 2;\n    switch(outputChannel) {\n    case 0:\n      TIM_OC1_SetConfig(*timerConfig);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(*timerConfig);\n      break;\n    case 8:\n      TIM_OC3_SetConfig(*timerConfig);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(*timerConfig);\n    }\n    *(undefined *)((int)timerConfig + 0x3d) = 1;\n    *(undefined *)(timerConfig + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "configure_timer_output_08006128",
                "param_1": "timerConfig",
                "param_2": "param2",
                "param_3": "outputChannel",
                "switch(param_3)": "switch(outputChannel)"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "configure_pwm_output_08006186",
            "code": "\nundefined4 configurePWMOutput_08006186(int *config,int data,undefined4 outputNumber)\n\n{\n  if (*(char *)(config + 0xf) != '\\x01') {\n    *(undefined *)(config + 0xf) = 1;\n    *(undefined *)((int)config + 0x3d) = 2;\n    switch(outputNumber) {\n    case 0:\n      TIM_OC1_SetConfig(*config);\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | 8;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) & 0xfffffffb;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | *(uint *)(data + 0x10);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(*config);\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | 0x800;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) & 0xfffffbff;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | *(int *)(data + 0x10) << 8;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(*config);\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | 8;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) & 0xfffffffb;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | *(uint *)(data + 0x10);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(*config);\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | 0x800;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) & 0xfffffbff;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | *(int *)(data + 0x10) << 8;\n    }\n    *(undefined *)((int)config + 0x3d) = 1;\n    *(undefined *)(config + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "configure_pwm_output_08006186",
                "param_1": "config",
                "param_2": "data",
                "param_3": "outputNumber"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bits_08006262",
            "code": "\nvoid updateBits_08006262(int dataPtr,uint bitPosition,int newValue)\n\n{\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bits_08006262",
                "param_1": "dataPtr",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_PWM_Start",
                "HAL_TIM_PWM_Stop",
                "HAL_TIM_OC_Stop_IT"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "set_flags_and_timers_08006280",
            "code": "\nundefined4 setFlagsAndTimers_08006280(uint **data,undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    (*data)[3] = (*data)[3] | 2;\n    break;\n  case 4:\n    (*data)[3] = (*data)[3] | 4;\n    break;\n  case 8:\n    (*data)[3] = (*data)[3] | 8;\n    break;\n  case 0xc:\n    (*data)[3] = (*data)[3] | 0x10;\n  }\n  setChannelCommand(*data,value,1);\n  if (*data == (uint *)0x40012c00) {\n    memoryAddress = memoryAddress | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "set_flags_and_timers_08006280",
                "param_1": "data",
                "param_2": "value",
                "TIM_CCxChannelCmd": "setChannelCommand",
                "uRam40012c44": "memoryAddress"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_channel_configuration_080062f4",
            "code": "\nundefined4 updateChannelConfiguration_080062f4(uint **channelConfig,undefined4 configValue)\n\n{\n  uint *channel;\n  \n  switch(configValue) {\n  case 0:\n    (*channelConfig)[3] = (*channelConfig)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*channelConfig)[3] = (*channelConfig)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*channelConfig)[3] = (*channelConfig)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*channelConfig)[3] = (*channelConfig)[3] & 0xffffffef;\n  }\n  TIM_CCxChannelCmd(*channelConfig,configValue,0);\n  if (((*channelConfig == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  channel = *channelConfig;\n  if (((channel[8] & 0x1111) == 0) && ((channel[8] & 0x444) == 0)) {\n    *channel = *channel & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_channel_configuration_080062f4",
                "param_1": "channelConfig",
                "param_2": "configValue",
                "puVar1": "channel"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "configure_timer_channel_08006390",
            "code": "\nundefined4 configureTimerChannel_08006390(uint **timerChannel,undefined4 channelValue)\n\n{\n  TIM_CCxChannelCmd(*timerChannel,channelValue,1);\n  if (*timerChannel == (uint *)0x40012c00) {\n    channelConfigFlag = channelConfigFlag | 0x8000;\n  }\n  **timerChannel = **timerChannel | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "configure_timer_channel_08006390",
                "param_1": "timerChannel",
                "param_2": "channelValue",
                "uRam40012c44": "channelConfigFlag"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "configure_timer_080063c0",
            "code": "\nundefined4 configureTimer_080063c0(uint **timerConfig,undefined4 channel)\n\n{\n  uint *currentTimer;\n  \n  TIM_CCxChannelCmd(*timerConfig,channel,0);\n  if (((*timerConfig == (uint *)0x40012c00) && ((timerData1 & 0x1111) == 0)) &&\n     ((timerData1 & 0x444) == 0)) {\n    timerData2 = timerData2 & 0xffff7fff;\n  }\n  currentTimer = *timerConfig;\n  if (((currentTimer[8] & 0x1111) == 0) && ((currentTimer[8] & 0x444) == 0)) {\n    *currentTimer = *currentTimer & 0xfffffffe;\n  }\n  *(undefined *)((int)timerConfig + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "configure_timer_080063c0",
                "param_1": "timerConfig",
                "param_2": "channel",
                "puVar1": "currentTimer",
                "uRam40012c20": "timerData1",
                "uRam40012c44": "timerData2"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_bitwise_value_08006420",
            "code": "\nvoid updateBitwiseValue_08006420(int baseAddress,uint bitOffset,int newBitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newBitValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_bitwise_value_08006420",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "newBitValue"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Start",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "configure_timers_and_channels_0800643c",
            "code": "\nundefined4 configureTimersAndChannels_0800643c(uint **timerChannelArray,undefined4 channelCommand)\n\n{\n  TIM_CCxNChannelCmd(*timerChannelArray,channelCommand,4);\n  (*timerChannelArray)[0x11] = (*timerChannelArray)[0x11] | 0x8000;\n  **timerChannelArray = **timerChannelArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "configure_timers_and_channels_0800643c",
                "param_1": "timerChannelArray",
                "param_2": "channelCommand"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "configure_tim_c_cx_n_channel_08006460",
            "code": "\nundefined4 configureTimCCxNChannel_08006460(uint **channelAddress,undefined4 channelValue)\n\n{\n  uint *channelData;\n  \n  TIM_CCxNChannelCmd(*channelAddress,channelValue,0);\n  channelData = *channelAddress;\n  if (((channelData[8] & 0x1111) == 0) && ((channelData[8] & 0x444) == 0)) {\n    channelData[0x11] = channelData[0x11] & 0xffff7fff;\n  }\n  channelData = *channelAddress;\n  if (((channelData[8] & 0x1111) == 0) && ((channelData[8] & 0x444) == 0)) {\n    *channelData = *channelData & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "configure_tim_c_cx_n_channel_08006460",
                "param_1": "channelAddress",
                "param_2": "channelValue",
                "puVar1": "channelData"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "clear_flags_and_set_space_080064b0",
            "code": "\nvoid clearFlagsAndSetSpace_080064b0(int *memoryAddress)\n\n{\n  *(uint *)(*memoryAddress + 0xc) = *(uint *)(*memoryAddress + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryAddress + 0x14) = *(uint *)(*memoryAddress + 0x14) & 0xfffffffe;\n  *(undefined *)((int)memoryAddress + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "clear_flags_and_set_space_080064b0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 processData_080064cc(int *data)\n\n{\n  short remainingIterations;\n  byte *bytePtr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)data[8];\n    data[8] = (int)(bytePtr + 1);\n    *(uint *)(*data + 4) = (uint)*bytePtr;\n  }\n  remainingIterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remainingIterations;\n  if (remainingIterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "sVar1": "remainingIterations",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "initialize_clock_08006538",
            "code": "\nvoid initializeClock_08006538(int *clockConfig)\n\n{\n  int pclk1Freq1;\n  int pclk1Freq2;\n  int pclk1Freq3;\n  int pclk1Freq4;\n  int pclk1Freq5;\n  int pclk2Freq1;\n  int pclk2Freq2;\n  int pclk2Freq3;\n  int pclk2Freq4;\n  int pclk2Freq5;\n  \n  *(uint *)(*clockConfig + 0x10) = *(uint *)(*clockConfig + 0x10) & 0xffffcfff | clockConfig[3];\n  *(uint *)(*clockConfig + 0xc) =\n       clockConfig[2] | clockConfig[4] | clockConfig[5] | *(uint *)(*clockConfig + 0xc) & 0xffffe9f3;\n  *(uint *)(*clockConfig + 0x14) = *(uint *)(*clockConfig + 0x14) & 0xfffffcff | clockConfig[6];\n  pclk2Freq5 = *clockConfig;\n  if (pclk2Freq5 != 0x40013800) {\n    pclk1Freq1 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq1 = clockConfig[1];\n    pclk1Freq2 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq2 = clockConfig[1];\n    pclk1Freq3 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq3 = clockConfig[1];\n    pclk1Freq4 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq4 = clockConfig[1];\n    pclk1Freq5 = HAL_RCC_GetPCLK1Freq();\n    *(uint *)(pclk2Freq5 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1Freq4 * 0x19) / (uint)(pclk2Freq4 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(clockConfig[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1Freq2 * 0x19) / (uint)(pclk2Freq2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(pclk2Freq3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1Freq1 * 0x19) / (ulonglong)(uint)(pclk2Freq1 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclk2Freq5 = HAL_RCC_GetPCLK2Freq();\n  pclk1Freq5 = clockConfig[1];\n  pclk1Freq1 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq1 = clockConfig[1];\n  pclk1Freq2 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq2 = clockConfig[1];\n  pclk1Freq3 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq3 = clockConfig[1];\n  pclk1Freq4 = HAL_RCC_GetPCLK2Freq();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(pclk1Freq3 * 0x19) / (uint)(pclk2Freq3 << 2) +\n                                (int)(((ulonglong)(uint)(pclk1Freq4 * 0x19) /\n                                      (ulonglong)(uint)(clockConfig[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(pclk1Freq1 * 0x19) / (uint)(pclk2Freq1 << 2) +\n                   (int)(((ulonglong)(uint)(pclk1Freq2 * 0x19) / (ulonglong)(uint)(pclk2Freq2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(pclk2Freq5 * 0x19) / (ulonglong)(uint)(pclk1Freq5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "initialize_clock_08006538",
                "param_1": "clockConfig",
                "iVar1": "pclk1Freq1",
                "iVar2": "pclk1Freq2",
                "iVar3": "pclk1Freq3",
                "iVar4": "pclk1Freq4",
                "iVar5": "pclk1Freq5",
                "iVar6": "pclk2Freq1",
                "iVar7": "pclk2Freq2",
                "iVar8": "pclk2Freq3",
                "iVar9": "pclk2Freq4",
                "iVar10": "pclk2Freq5"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_parameters_080066e8",
            "code": "\nundefined4 checkParameters_080066e8(uint **pointer,uint value1,uint flag,int value2,uint timeout)\n\n{\n  int currentTick;\n  \n  do {\n    if (((value1 & ~**pointer) == 0) != flag) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTick = HAL_GetTick(), (uint)(currentTick - value2) <= timeout))));\n  (*pointer)[3] = (*pointer)[3] & 0xfffffe5f;\n  (*pointer)[5] = (*pointer)[5] & 0xfffffffe;\n  *(undefined *)((int)pointer + 0x39) = 0x20;\n  *(undefined *)((int)pointer + 0x3a) = 0x20;\n  *(undefined *)(pointer + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "flag",
                "param_4": "value2",
                "param_5": "timeout",
                "iVar1": "currentTick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_uart_0800674e",
            "code": "\nundefined4 initializeUART_0800674e(int *uartConfig)\n\n{\n  if (uartConfig != (int *)0x0) {\n    if (*(char *)((int)uartConfig + 0x39) == '\\0') {\n      *(undefined *)(uartConfig + 0xe) = 0;\n      initializeUART_0800674ePeriph();\n    }\n    *(undefined *)((int)uartConfig + 0x39) = 0x24;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) & 0xffffdfff;\n    setUARTConfig(uartConfig);\n    *(uint *)(*uartConfig + 0x10) = *(uint *)(*uartConfig + 0x10) & 0xffffb7ff;\n    *(uint *)(*uartConfig + 0x14) = *(uint *)(*uartConfig + 0x14) & 0xffffffd5;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) | 0x2000;\n    uartConfig[0xf] = 0;\n    *(undefined *)((int)uartConfig + 0x39) = 0x20;\n    *(undefined *)((int)uartConfig + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_uart_0800674e",
                "param_1": "uartConfig",
                "HAL_UART_MspInit": "initializeUARTPeriph",
                "UART_SetConfig": "setUARTConfig"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 process_data_080067ac(int *data_ptr,ushort *buffer_ptr,int buffer_size,undefined4 param)\n\n{\n  int return_value;\n  undefined4 status;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (buffer_ptr == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (buffer_size == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      count = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      status = get_time;\n      *(short *)(data_ptr + 9) = (short)buffer_size;\n      *(short *)((int)data_ptr + 0x26) = (short)buffer_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          return_value = wait_on_flag(param_1,0x80,0,status,param);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *buffer_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            buffer_ptr = buffer_ptr + 1;\n          }\n          else {\n            buffer_ptr = (ushort *)((int)buffer_ptr + 1);\n          }\n        }\n        else {\n          return_value = wait_on_flag(param_1,0x80,0,status,param);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)buffer_ptr;\n          buffer_ptr = (ushort *)((int)buffer_ptr + 1);\n        }\n      }\n      return_value = wait_on_flag(param_1,0x40,0,status,param);\n      if (return_value == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "data_ptr",
                "param_2": "buffer_ptr",
                "param_3": "buffer_size",
                "param_4": "param",
                "iVar1": "return_value",
                "uVar2": "status",
                "UART_WaitOnFlagUntilTimeout": "wait_on_flag",
                "param_1[0xf]": "count",
                "HAL_GetTick()": "get_time",
                "UART_WaitOnFlagUntilTimeout(param_1,0x80,0,uVar2,param_4)": "wait_on_flag(param_1,0x80,0,status,param)",
                "UART_WaitOnFlagUntilTimeout(param_1,0x40,0,uVar2,param_4)": "wait_on_flag(param_1,0x40,0,status,param)"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_params_0800688e",
            "code": "\nundefined4 validate_params_0800688e(int *data_array,int length_param,int value_param)\n\n{\n  if (*(char *)((int)data_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (length_param == 0) {\n    return 1;\n  }\n  if (value_param == 0) {\n    return 1;\n  }\n  if (*(char *)(data_array + 0xe) != '\\x01') {\n    data_array[8] = length_param;\n    *(short *)(data_array + 9) = (short)value_param;\n    *(short *)((int)data_array + 0x26) = (short)value_param;\n    data_array[0xf] = 0;\n    *(undefined *)((int)data_array + 0x39) = 0x21;\n    *(undefined *)(data_array + 0xe) = 0;\n    *(uint *)(*data_array + 0xc) = *(uint *)(*data_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_params_0800688e",
                "param_1": "data_array",
                "param_2": "length_param",
                "param_3": "value_param"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_inputs_080068d6",
            "code": "\nundefined4 validate_inputs_080068d6(int *input_array,int size_of_input_array,int value_to_check)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (size_of_input_array == 0) {\n    return 1;\n  }\n  if (value_to_check == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = size_of_input_array;\n    *(short *)(input_array + 0xb) = (short)value_to_check;\n    *(short *)((int)input_array + 0x2e) = (short)value_to_check;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_inputs_080068d6",
                "param_1": "input_array",
                "param_2": "size_of_input_array",
                "param_3": "value_to_check",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "set_flag_and_send_uart_08006932",
            "code": "\nundefined4 setFlagAndSendUART_08006932(int *ptrData)\n\n{\n  *(uint *)(*ptrData + 0xc) = *(uint *)(*ptrData + 0xc) & 0xffffffbf;\n  *(undefined *)((int)ptrData + 0x39) = 0x20;\n  notifyUARTComplete();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "set_flag_and_send_uart_08006932",
                "param_1": "ptrData",
                "HAL_UART_TxCpltCallback()": "notifyUARTComplete()"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *data)\n\n{\n  byte *bytePointer;\n  short numIterations;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  numIterations = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = numIterations;\n  if (numIterations != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "numIterations",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "handle_data_transfer_080069ec",
            "code": "\nvoid handleDataTransfer_080069ec(uint **data)\n\n{\n  int result;\n  uint flag1;\n  uint *pointer1;\n  uint flag2;\n  uint flag3;\n  \n  pointer1 = *data;\n  flag3 = *pointer1;\n  flag1 = pointer1[3];\n  if ((((flag3 & 0xf) == 0) && ((flag3 & 0x20) != 0)) && ((flag1 & 0x20) != 0)) {\n    UART_Receive_IT(data);\n    return;\n  }\n  if (((flag3 & 0xf) == 0) || ((flag2 = pointer1[5] & 1, flag2 == 0 && ((flag1 & 0x120) == 0)))) {\n    if (((flag3 & 0x80) != 0) && ((flag1 & 0x80) != 0)) {\n      UART_Transmit_IT(data);\n      return;\n    }\n    if (((flag3 & 0x40) != 0) && ((flag1 & 0x40) != 0)) {\n      UART_EndTransmit_IT(data);\n    }\n  }\n  else {\n    if (((flag3 & 1) != 0) && ((flag1 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((flag3 & 4) != 0) && (flag2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((flag3 & 2) != 0) && (flag2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((flag3 & 8) != 0) && (flag2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((flag3 & 0x20) != 0) && ((flag1 & 0x20) != 0)) {\n        UART_Receive_IT(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(data);\n      pointer1 = *data;\n      if ((pointer1[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(data);\n        return;\n      }\n      pointer1[5] = pointer1[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      result = HAL_DMA_Abort_IT(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "handle_data_transfer_080069ec",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "flag1",
                "puVar3": "pointer1",
                "uVar4": "flag2",
                "uVar5": "flag3"
            },
            "calling": [],
            "called": [
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "UART_Receive_IT",
                "HAL_UART_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input"
            },
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "extracted_value_bit_08006b28",
            "code": "\nuint extractedValueBit_08006b28(uint value,int pointer)\n\n{\n  return *(uint *)(pointer + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "extracted_value_bit_08006b28",
                "param_1": "value",
                "param_2": "pointer"
            },
            "calling": [
                "analogWrite",
                "digitalWrite",
                "digitalRead",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "update_memory_08006b3e",
            "code": "\nvoid updateMemory_08006b3e(uint value,int memoryAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (value << 0x18) >> 0x1c;\n  *(uint *)(memoryAddress + shiftedIndex * 4) = *(uint *)(memoryAddress + shiftedIndex * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "update_memory_08006b3e",
                "param_1": "value",
                "param_2": "memoryAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "modify_bit_in_array_08006b5c",
            "code": "\nvoid modifyBitInArray_08006b5c(uint bitPosition,int arrayAddress)\n\n{\n  uint arrayIndex;\n  \n  arrayIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + arrayIndex * 4) = *(uint *)(arrayAddress + arrayIndex * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "modify_bit_in_array_08006b5c",
                "param_1": "bitPosition",
                "param_2": "arrayAddress",
                "uVar1": "arrayIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_memory_address_08006b7c",
            "code": "\nundefined4 getMemoryAddress_08006b7c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "input"
            },
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_register_value_08006bb8",
            "code": "\n\n\nundefined4 setRegisterValue_08006bb8(undefined4 value)\n\n{\n  undefined4 returnValue;\n  \n  switch(value) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnValue = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnValue = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnValue = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnValue = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnValue = 0x40011800;\n    break;\n  default:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_register_value_08006bb8",
                "param_1": "value",
                "uVar1": "returnValue"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "pinmap_conversion_08006c60",
            "code": "\nuint pinmap_conversion_08006c60(undefined4 input_value,undefined4 unused_param,undefined4 pinmap_array,undefined4 param_4)\n\n{\n  int pinmap_result;\n  uint shifted_value;\n  \n  pinmap_result = pinmap_function(input_value,&DAT_0800a5b8,pinmap_array,param_4,param_4);\n  shifted_value = (uint)(pinmap_result << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "pinmap_conversion_08006c60",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "pinmap_array",
                "iVar1": "pinmap_result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_pinmap_value_08006c7c",
            "code": "\nundefined4 get_pinmap_value_08006c7c(undefined4 pin,undefined4 data,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shiftedValue;\n  \n  result = pinmap_function(pin,&DAT_0800a6cc,param3,param4,param4);\n  shiftedValue = (uint)(result << 0xc) >> 0x1b;\n  if (shiftedValue == 3) {\n    return 8;\n  }\n  if (shiftedValue != 4) {\n    if (shiftedValue != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_pinmap_value_08006c7c",
                "param_1": "pin",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "pwm_start",
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "initialize_gpio_port_clock_08006ca8",
            "code": "\n\n\nvoid initialize_GPIO_Port_Clock_08006ca8(int *data_ptr,undefined4 param_value)\n\n{\n  undefined4 gpio_port_clock;\n  uint gpio_port_mask;\n  int data_value;\n  uint gpio_pin_mask;\n  undefined4 gpio_pin_mode;\n  undefined4 gpio_pin_pull;\n  \n  data_value = *data_ptr;\n  if (data_value == 0x40012400) {\n    gpio_port_mask = _DAT_40021018 | 0x200;\n    data_value = 0x200;\n    _DAT_40021018 = gpio_port_mask;\n  }\n  else {\n    gpio_port_mask = 0x40012800;\n    if (data_value == 0x40012800) {\n      gpio_port_mask = _DAT_40021018 | 0x400;\n      data_value = 0x400;\n      _DAT_40021018 = gpio_port_mask;\n    }\n  }\n  gpio_port_clock = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,param_value,gpio_port_mask,data_value);\n  gpio_pin_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  gpio_pin_mode = 3;\n  gpio_pin_pull = 0;\n  initialize_GPIO(gpio_port_clock,&gpio_pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "initialize_gpio_port_clock_08006ca8",
                "param_1": "data_ptr",
                "param_2": "param_value",
                "uVar1": "gpio_port_clock",
                "uVar2": "gpio_port_mask",
                "iVar3": "data_value",
                "local_18": "gpio_pin_mask",
                "local_14": "gpio_pin_mode",
                "local_10": "gpio_pin_pull",
                "HAL_GPIO_Init": "initialize_GPIO"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_control_registers_08006d24",
            "code": "\n\n\nvoid updateControlRegisters_08006d24(int *controlRegisterValue)\n\n{\n  if (*controlRegisterValue != 0x40012400) {\n    if (*controlRegisterValue == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_control_registers_08006d24",
                "param_1": "controlRegisterValue"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "initialize_adc_08006d80",
            "code": "\nundefined2 initialize_ADC_08006d80(undefined4 peripheral)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 adc_value;\n  uint adc_channel;\n  undefined4 adc_resolution;\n  undefined4 adc_data_alignment;\n  int adc_handle;\n  undefined4 adc_trigger;\n  undefined4 adc_dma;\n  undefined4 adc_preemption_priority;\n  undefined4 adc_mode;\n  undefined4 adc_clock;\n  undefined4 adc_resolution;\n  undefined4 adc_prescaler;\n  undefined4 adc_scan_converted;\n  \n  memset(&adc_handle,0,0x30);\n  adc_channel = 0;\n  adc_resolution = 0;\n  adc_data_alignment = 0;\n  adc_value = 0;\n  adc_handle = pinmap_peripheral(peripheral,&DAT_0800a5b8);\n  if (adc_handle == 0) {\n    adc_value = 0;\n  }\n  else {\n    adc_trigger = 0;\n    adc_dma = 0;\n    adc_preemption_priority = 0;\n    adc_clock = 0;\n    adc_prescaler = 0xe0000;\n    adc_scan_converted = 0;\n    adc_mode = 1;\n    adc_resolution = 0;\n    DAT_20000014 = (undefined)peripheral;\n    iVar1 = HAL_ADC_Init(&adc_handle);\n    if (iVar1 == 0) {\n      adc_channel = get_adc_channel(peripheral);\n      if (adc_channel < 0x12) {\n        adc_resolution = 1;\n        adc_data_alignment = 2;\n        iVar1 = HAL_ADC_ConfigChannel(&adc_handle,&adc_channel);\n        if (iVar1 == 0) {\n          iVar1 = HAL_ADCEx_Calibration_Start(&adc_handle);\n          if (iVar1 == 0) {\n            iVar1 = HAL_ADC_Start(&adc_handle);\n            if (iVar1 == 0) {\n              iVar1 = HAL_ADC_PollForConversion(&adc_handle,10);\n              if (iVar1 == 0) {\n                uVar2 = HAL_ADC_GetState(&adc_handle);\n                if ((uVar2 & 0x200) != 0) {\n                  adc_value = HAL_ADC_GetValue(&adc_handle);\n                }\n                iVar1 = HAL_ADC_Stop(&adc_handle);\n                if (iVar1 == 0) {\n                  iVar1 = HAL_ADC_DeInit(&adc_handle);\n                  if (iVar1 != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "initialize_adc_08006d80",
                "param_1": "peripheral",
                "local_46": "adc_value",
                "local_44": "adc_channel",
                "local_40": "adc_resolution",
                "local_3c": "adc_data_alignment",
                "local_38": "adc_handle",
                "local_34": "adc_trigger",
                "local_30": "adc_dma",
                "local_2c": "adc_preemption_priority",
                "local_28": "adc_mode",
                "local_24": "adc_clock",
                "local_20": "adc_resolution",
                "local_1c": "adc_prescaler",
                "local_10": "adc_scan_converted"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "HAL_ADC_ConfigChannel",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_GetValue",
                "HAL_ADC_Init",
                "HAL_ADC_Start",
                "memset",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_gpio_08006e68",
            "code": "\n\n\nvoid initializeGPIO_08006e68(undefined4 timer)\n\n{\n  int pinmapResult;\n  undefined4 gpioPort;\n  uint pinMask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  pinmapResult = pinmap_function((int)(char)DAT_20000014,&DAT_0800a6cc);\n  timer_enable_clock(timer);\n  gpioPort = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  value1 = 2;\n  value2 = 0;\n  value3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(pinmapResult << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  pinMask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  HAL_GPIO_Init(gpioPort,&pinMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_gpio_08006e68",
                "param_1": "timer",
                "iVar1": "pinmapResult",
                "uVar2": "gpioPort",
                "local_20": "pinMask",
                "local_1c": "value1",
                "local_18": "value2",
                "local_14": "value3"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [
                "timer_enable_clock",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "disable_timer_clock_08007110",
            "code": "\nvoid disableTimerClock_08007110(void)\n\n{\n  disableClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110",
                "timer_disable_clock": "disableClock"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_peripheral_08007118",
            "code": "\nvoid initializePeripheral_08007118(undefined4 peripheralAddress,uint timerFrequency,int param3Value,undefined4 param4Value,char flag)\n\n{\n  uint timerClockFreq;\n  int pwmChannel;\n  int configResult;\n  undefined4 configValue1;\n  undefined4 configValue2;\n  undefined4 configValue3;\n  undefined4 configValue4;\n  undefined4 configValue5;\n  undefined4 configValue6;\n  undefined4 configValue7;\n  int peripheralValue;\n  int divisionResult;\n  undefined4 pwmValue;\n  int subValue;\n  undefined4 configValue8;\n  undefined4 configValue9;\n  undefined configValue10;\n  \n  memset(&peripheralValue,0,0x40);\n  configValue1 = 0;\n  configValue2 = 0;\n  configValue3 = 0;\n  configValue4 = 0;\n  configValue5 = 0;\n  configValue6 = 0;\n  configValue7 = 0;\n  peripheralValue = pinmap_peripheral(peripheralAddress,&DAT_0800a6cc);\n  if (peripheralValue != 0) {\n    timerClockFreq = getTimerClkFreq();\n    divisionResult = timerClockFreq / timerFrequency - 1;\n    subValue = param3Value + -1;\n    configValue8 = 0;\n    pwmValue = 0;\n    configValue9 = 0;\n    configValue10 = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)peripheralAddress;\n      pwmChannel = HAL_TIM_PWM_Init(&peripheralValue);\n      if (pwmChannel != 0) {\n        return;\n      }\n    }\n    pwmChannel = get_pwm_channel(peripheralAddress);\n    if ((((pwmChannel == 0) || (pwmChannel == 4)) || (pwmChannel == 8)) || ((pwmChannel == 0xc || (pwmChannel == 0x18)))) {\n      configValue1 = 0x60;\n      configValue3 = 0;\n      configValue5 = 0;\n      configValue4 = 0;\n      configValue7 = 0;\n      configValue6 = 0;\n      configValue2 = param4Value;\n      configResult = HAL_TIM_PWM_ConfigChannel(&peripheralValue,&configValue1,pwmChannel);\n      if (configResult == 0) {\n        timerClockFreq = pinmap_function(peripheralAddress,&DAT_0800a6cc);\n        if ((timerClockFreq & 0x100000) == 0) {\n          HAL_TIM_PWM_Start(&peripheralValue,pwmChannel);\n        }\n        else {\n          HAL_TIMEx_PWMN_Start(&peripheralValue,pwmChannel);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_peripheral_08007118",
                "param_1": "peripheralAddress",
                "param_2": "timerFrequency",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "flag",
                "uVar1": "timerClockFreq",
                "iVar2": "pwmChannel",
                "iVar3": "configResult",
                "local_74": "configValue1",
                "local_70": "configValue2",
                "local_6c": "configValue3",
                "local_68": "configValue4",
                "local_64": "configValue5",
                "local_60": "configValue6",
                "local_5c": "configValue7",
                "local_58": "peripheralValue",
                "local_54": "divisionResult",
                "local_50": "pwmValue",
                "local_4c": "subValue",
                "local_48": "configValue8",
                "local_44": "configValue9",
                "local_1b": "configValue10"
            },
            "calling": [
                "analogWrite"
            ],
            "called": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel",
                "pinmap_function",
                "HAL_TIMEx_PWMN_Start",
                "memset",
                "get_pwm_channel",
                "HAL_TIM_PWM_Start",
                "getTimerClkFreq",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "stop_pwm_channel_080071e4",
            "code": "\nvoid stopPwmChannel_080071e4(undefined4 peripheral)\n\n{\n  int pwmChannel;\n  uint functionFlag;\n  int channelArray [17];\n  \n  channelArray[0] = pinmap_peripheral(peripheral,&DAT_0800a6cc);\n  if ((channelArray[0] != 0) &&\n     ((((pwmChannel = get_pwm_channel(peripheral), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    functionFlag = pinmap_function(peripheral,&DAT_0800a6cc);\n    if ((functionFlag & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(channelArray,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(channelArray,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(channelArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "stop_pwm_channel_080071e4",
                "param_1": "peripheral",
                "iVar1": "pwmChannel",
                "uVar2": "functionFlag",
                "local_50": "channelArray"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "get_current_time_0800723c",
            "code": "\nvoid get_current_time_0800723c(void)\n\n{\n  current_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "get_current_time_0800723c",
                "HAL_GetTick": "current_tick"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "update_system_tick_08007246",
            "code": "\nvoid updateSystemTick_08007246(void)\n\n{\n  incrementSystemTick();\n  handleSysTickInterrupt();\n  customSysTickHandler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "update_system_tick_08007246",
                "HAL_IncTick": "incrementSystemTick",
                "HAL_SYSTICK_IRQHandler": "handleSysTickInterrupt",
                "noOsSystickHandler": "customSysTickHandler"
            },
            "calling": [],
            "called": [
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_gpio_08007258",
            "code": "\n\n\nvoid initializeGPIO_08007258(uint pinNumber,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpioPort;\n  uint gpioPin;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 constantValue;\n  \n  gpioPort = set_GPIO_Port_Clock((pinNumber << 0x18) >> 0x1c);\n  gpioPin = 1 << (pinNumber & 0xf) & 0xffff;\n  constantValue = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pinNumber - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pinNumber == 0xf) || (pinNumber == 0x13)) || (pinNumber == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2Copy = param2;\n  param3Copy = param3;\n  HAL_GPIO_Init(gpioPort,&gpioPin);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_gpio_08007258",
                "param_1": "pinNumber",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpioPort",
                "local_20": "gpioPin",
                "local_1c": "param2Copy",
                "local_18": "param3Copy",
                "local_14": "constantValue"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_gpio_pin_state_080072d8",
            "code": "\nvoid set_GPIO_pin_state_080072d8(undefined4 GPIO_port,undefined2 GPIO_pin,int pin_state,undefined4 param_unused)\n\n{\n  if (pin_state == 0) {\n    HAL_GPIO_WritePin(GPIO_port,GPIO_pin,0,param_unused,param_unused);\n    return;\n  }\n  HAL_GPIO_WritePin(GPIO_port,GPIO_pin,1,param_unused,param_unused);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_gpio_pin_state_080072d8",
                "param_1": "GPIO_port",
                "param_2": "GPIO_pin",
                "param_3": "pin_state",
                "param_4": "param_unused"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "read_pin_voltage_080072f0",
            "code": "\nvoid read_pin_voltage_080072f0(undefined4 gpio_port,undefined2 gpio_pin,undefined4 param_3,undefined4 param_4)\n\n{\n  HAL_GPIO_ReadPin(gpio_port,gpio_pin,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "read_pin_voltage_080072f0",
                "param_1": "gpio_port",
                "param_2": "gpio_pin"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_system_080072fa",
            "code": "\nvoid initializeSystem_080072fa(void)\n\n{\n  initializeHAL();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_system_080072fa",
                "HAL_Init": "initializeHAL",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_in_array_08007306",
            "code": "\nundefined4 find_value_in_array_08007306(int value_to_find,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value_to_find) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value_to_find",
                "param_2": "array"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_peripheral_08007320",
            "code": "\nundefined4 find_peripheral_08007320(int value)\n\n{\n  undefined4 peripheral;\n  \n  if (value != -1) {\n    peripheral = pinmap_find_peripheral_08007320();\n    return peripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_peripheral_08007320",
                "param_1": "value",
                "uVar1": "peripheral"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "uart_debug_write",
                "pwm_start",
                "adc_read_value",
                "uart_debug_init",
                "pwm_stop"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_value_in_array_08007332",
            "code": "\nint find_value_in_array_08007332(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_value_in_array_08007332",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_find_pin",
                "pinmap_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_pin_0800734a",
            "code": "\nundefined4 findPin_0800734a(int inputParam)\n\n{\n  undefined4 outputVar;\n  \n  if (inputParam != 0) {\n    outputVar = pinmap_find_pin();\n    return outputVar;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_pin_0800734a",
                "param_1": "inputParam",
                "uVar1": "outputVar"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_from_array_0800735a",
            "code": "\nundefined4 find_value_from_array_0800735a(int target_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0xffffffff;\n    }\n    if (*array_ptr == target_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return *(undefined4 *)(array_ptr + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_from_array_0800735a",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_function_by_param_08007376",
            "code": "\nundefined4 find_function_by_param_08007376(int input_param)\n\n{\n  undefined4 result;\n  \n  if (input_param == -1) {\n    return 0xffffffff;\n  }\n  result = pinmap_find_function();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_function_by_param_08007376",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "pwm_start",
                "HAL_TIM_PWM_MspInit",
                "get_adc_channel",
                "pwm_stop",
                "get_pwm_channel"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_value_in_sequence_0800738a",
            "code": "\nundefined4 check_value_in_sequence_0800738a(int value_to_check,char *sequence)\n\n{\n  if (value_to_check == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*sequence == -1) {\n      return 0;\n    }\n    if (value_to_check == *sequence) break;\n    sequence = sequence + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_value_in_sequence_0800738a",
                "param_1": "value_to_check",
                "param_2": "sequence"
            },
            "calling": [
                "sysexCallback",
                "analogWrite",
                "enableI2CPins",
                "FUN_0800021a",
                "setPinModeCallback",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_zero_080073ae",
            "code": "\nint compareAndReturnZero_080073ae(int param_1,int param_2)\n\n{\n  if (param_1 != param_2) {\n    if (param_1 == 0) {\n      return param_2;\n    }\n    if (param_2 == 0) {\n      return param_1;\n    }\n    param_1 = 0;\n  }\n  return param_1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_zero_080073ae"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_080073c0",
            "code": "\nvoid executeCallback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "_Error_Handler",
                "SystemClock_Config"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_memory_registers_080073ec",
            "code": "\n\n\nvoid initializeMemoryRegisters_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_memory_registers_080073ec"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_status_flags_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateStatusFlags_08007438(int *statusFlag)\n\n{\n  if (*statusFlag == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = statusFlag;\n  }\n  if (*statusFlag == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = statusFlag;\n  }\n  if (*statusFlag == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = statusFlag;\n  }\n  if (*statusFlag == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = statusFlag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_status_flags_08007438",
                "param_1": "statusFlag"
            },
            "calling": [
                "HAL_TIM_PWM_MspInit",
                "HAL_TIM_OC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "apply_memory_restrictions_080074e0",
            "code": "\n\n\nvoid applyMemoryRestrictions_080074e0(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "apply_memory_restrictions_080074e0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "HAL_TIM_OC_MspDeInit",
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_ir_qn_08007544",
            "code": "\nundefined4 getTimerIRQn_08007544(uint timerValue)\n\n{\n  if (timerValue == 0xffffffff) {\n    return 0;\n  }\n  if (timerValue == 0x40000400) {\n    return 0x1d;\n  }\n  if (timerValue < 0x40000401) {\n    if (timerValue == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timerValue == 0x40000800) {\n      return 0x1e;\n    }\n    if (timerValue == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  printErrorMessage(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_08007544",
                "param_1": "timerValue",
                "iprintf": "printErrorMessage"
            },
            "calling": [
                "TimerPulseDeinit",
                "TimerPulseInit"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  printMessage(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timerInstance",
                "iprintf": "printMessage"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_timer_frequency_080075dc",
            "code": "\nint calculateTimerFrequency_080075dc(undefined4 inputSource)\n\n{\n  uint local_counter1;\n  int timerFrequency;\n  uint local_counter2;\n  undefined4 clockConfig1;\n  undefined4 clockConfig2;\n  undefined4 clockConfig3;\n  undefined4 clockConfig4;\n  uint clockSrc1;\n  uint clockSrc2;\n  \n  clockConfig2 = 0;\n  clockConfig3 = 0;\n  clockConfig4 = 0;\n  clockSrc1 = 0;\n  clockSrc2 = 0;\n  clockConfig1 = 0;\n  HAL_RCC_GetClockConfig(&clockConfig2,&clockConfig1);\n  timerFrequency = getTimerClkSrc(inputSource);\n  local_counter1 = clockSrc2;\n  local_counter2 = clockSrc1;\n  if (timerFrequency == 1) {\n    timerFrequency = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (timerFrequency == 2) {\n    timerFrequency = HAL_RCC_GetPCLK2Freq();\n    local_counter2 = local_counter1;\n  }\n  else {\n    iprintf(\"TIM: Unknown clock source\");\n    timerFrequency = 0;\n    local_counter2 = 0;\n  }\n  if (local_counter2 != 0x500) {\n    if (local_counter2 < 0x501) {\n      if (local_counter2 != 0x400) {\n        return timerFrequency;\n      }\n    }\n    else if ((local_counter2 != 0x600) && (local_counter2 != 0x700)) {\n      return timerFrequency;\n    }\n  }\n  return timerFrequency << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_timer_frequency_080075dc",
                "param_1": "inputSource",
                "uVar1": "local_counter1",
                "iVar2": "timerFrequency",
                "uVar3": "local_counter2",
                "local_20": "clockConfig1",
                "local_1c": "clockConfig2",
                "local_18": "clockConfig3",
                "local_14": "clockConfig4",
                "local_10": "clockSrc1",
                "local_c": "clockSrc2"
            },
            "calling": [
                "TimerPulseInit",
                "pwm_start"
            ],
            "called": [
                "HAL_RCC_GetClockConfig",
                "HAL_RCC_GetPCLK2Freq",
                "getTimerClkSrc",
                "HAL_RCC_GetPCLK1Freq",
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_timer_08007648",
            "code": "\nvoid initializeTimer_08007648(undefined4 *timerConfig,undefined4 initialValue,undefined4 irqPriority,undefined4 irqHandler)\n\n{\n  char irqNumber;\n  uint timerFrequency;\n  int initResult;\n  undefined4 *timerHandle;\n  undefined4 channelValue;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined4 localVariable6;\n  \n  channelValue = 0;\n  localVariable1 = 0;\n  localVariable2 = 0;\n  localVariable3 = 0;\n  localVariable4 = 0;\n  localVariable5 = 0;\n  localVariable6 = 0;\n  timerHandle = timerConfig + 1;\n  *timerConfig = 0x40000000;\n  timerConfig[1] = 0x40000000;\n  timerConfig[4] = initialValue;\n  timerFrequency = getTimerClkFreq();\n  timerConfig[2] = timerFrequency / 1000000 - 1;\n  timerConfig[5] = 0;\n  timerConfig[3] = 0;\n  timerConfig[6] = 0;\n  timerConfig[0x13] = irqHandler;\n  channelValue = 0;\n  localVariable2 = 0;\n  localVariable4 = 0;\n  localVariable3 = 0;\n  localVariable5 = 0;\n  localVariable6 = 0;\n  localVariable1 = irqPriority;\n  irqNumber = getTimerIrq(*timerConfig);\n  HAL_NVIC_SetPriority((int)irqNumber,0xe,0);\n  irqNumber = getTimerIrq(*timerConfig);\n  HAL_NVIC_EnableIRQ((int)irqNumber);\n  initResult = HAL_TIM_OC_Init(timerHandle);\n  if ((initResult == 0) && (initResult = HAL_TIM_OC_ConfigChannel(timerHandle,&channelValue,0), initResult == 0)) {\n    HAL_TIM_OC_Start_IT(timerHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_timer_08007648",
                "param_1": "timerConfig",
                "param_2": "initialValue",
                "param_3": "irqPriority",
                "param_4": "irqHandler",
                "cVar1": "irqNumber",
                "uVar2": "timerFrequency",
                "iVar3": "initResult",
                "puVar4": "timerHandle",
                "local_34": "channelValue",
                "local_30": "localVariable1",
                "local_2c": "localVariable2",
                "local_28": "localVariable3",
                "local_24": "localVariable4",
                "local_20": "localVariable5",
                "local_1c": "localVariable6"
            },
            "calling": [
                "initISR"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_OC_ConfigChannel",
                "getTimerIrq",
                "HAL_TIM_OC_Init",
                "getTimerClkFreq",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "disable_timer_irq_080076e0",
            "code": "\nvoid disableTimerIRQ_080076e0(undefined4 *timerParams)\n\n{\n  char timerIRQ;\n  int deInitResult;\n  \n  timerParams[0x13] = 0;\n  timerIRQ = getTimerIrq(*timerParams);\n  HAL_NVIC_DisableIRQ((int)timerIRQ);\n  deInitResult = HAL_TIM_OC_DeInit(timerParams + 1);\n  if (deInitResult == 0) {\n    HAL_TIM_OC_Stop_IT(timerParams + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "disable_timer_irq_080076e0",
                "param_1": "timerParams",
                "cVar1": "timerIRQ",
                "iVar2": "deInitResult"
            },
            "calling": [
                "finISR"
            ],
            "called": [
                "HAL_NVIC_DisableIRQ",
                "getTimerIrq",
                "HAL_TIM_OC_DeInit",
                "HAL_TIM_OC_Stop_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_timer_08007708",
            "code": "\nvoid initializeTimer_08007708(void)\n\n{\n  enableClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_timer_08007708",
                "timer_enable_clock": "enableClock"
            },
            "calling": [
                "HAL_TIM_OC_Init"
            ],
            "called": [
                "timer_enable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "disable_timer_clock_08007710",
            "code": "\nvoid disable_timer_clock_08007710(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "disable_timer_clock_08007710"
            },
            "calling": [
                "HAL_TIM_OC_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtract_four_08007718(int input_val)\n\n{\n  return input_val + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input_val"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_timer_action_0800771c",
            "code": "\nvoid executeTimerAction_0800771c(int timerIndex)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if ((*(Action **)(timerObject + 0x4c) != (Action *)0x0) && (*(char *)(timerIndex + 0x1c) == '\\x01')) {\n    (**(Action **)(timerObject + 0x4c))(timerObject,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_timer_action_0800771c",
                "param_1": "timerIndex",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject",
                "code": "Action"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_timer_callback_08007736",
            "code": "\nvoid executeTimerCallback_08007736(void)\n\n{\n  int timerObj;\n  \n  timerObj = getTimerObject();\n  if (*(code **)(timerObj + 0x48) != (code *)0x0) {\n    (**(code **)(timerObj + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_timer_callback_08007736",
                "iVar1": "timerObj",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_memory_address_08007744",
            "code": "\nundefined4 getMemoryAddress_08007744(int address)\n\n{\n  return *(undefined4 *)(*(int *)(address + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_memory_address_08007744",
                "param_1": "address"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_memory_value_0800774a",
            "code": "\nvoid setMemoryValue_0800774a(int inputPointer,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(inputPointer + 4) + 0x24) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_memory_value_0800774a",
                "param_1": "inputPointer",
                "param_2": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "write_to_memory_08007750",
            "code": "\nvoid writeToMemory_08007750(int memoryAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(memoryAddress + 4) + 0x34 + offset * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "write_to_memory_08007750",
                "param_1": "memoryAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n\nvoid initializeI2C_080077b0(int *i2cConfig,int param2,int param3,int param4,undefined param5)\n\n{\n  int pinPeripheral1;\n  int pinPeripheral2;\n  undefined4 gpioPort;\n  uint pinFunction1;\n  uint pinFunction2;\n  int *i2cInstance;\n  uint gpioPinMask1;\n  uint mergedPinFunctions;\n  uint shiftedValue;\n  undefined4 constant3;\n  \n  if (i2cConfig != (int *)0x0) {\n    i2cInstance = i2cConfig + 1;\n    pinPeripheral1 = pinmap_peripheral((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n    pinPeripheral2 = pinmap_peripheral((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n    if ((pinPeripheral1 == 0) || (pinPeripheral2 == 0)) {\n      iprintf(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pinPeripheral1 = pinmap_merge_peripheral(pinPeripheral1,pinPeripheral2);\n      *i2cConfig = pinPeripheral1;\n      if (pinPeripheral1 == 0) {\n        iprintf(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pinPeripheral1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)i2cConfig + 0x5a) = 0x1f;\n          *(undefined *)((int)i2cConfig + 0x5b) = 0x20;\n          DAT_20000668 = i2cInstance;\n        }\n        if (*i2cConfig == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)i2cConfig + 0x5a) = 0x21;\n          *(undefined *)((int)i2cConfig + 0x5b) = 0x22;\n          DAT_2000066c = i2cInstance;\n        }\n        gpioPort = set_GPIO_Port_Clock((uint)((int)*(char *)((int)i2cConfig + 0x59) << 0x18) >> 0x1c);\n        gpioPinMask1 = 1 << ((int)*(char *)((int)i2cConfig + 0x59) & 0xfU) & 0xffff;\n        pinFunction1 = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        pinFunction2 = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        mergedPinFunctions = (pinFunction1 >> 3 & 1) << 4 | pinFunction2 & 7;\n        constant3 = 3;\n        pinPeripheral1 = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        shiftedValue = (uint)(pinPeripheral1 << 0x1a) >> 0x1e;\n        pinPeripheral1 = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        pinFunction2 = 1;\n        pinFunction1 = _DAT_40021018;\n        switch((uint)(pinPeripheral1 << 0x11) >> 0x19) {\n        case 1:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 2:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 3:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 4:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 5:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 6:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 7:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 8:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 9:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xb:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xc:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xd:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xe:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xf:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x11:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x12:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x13:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x14:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x15:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x16:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x17:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1b:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1c:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x21:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x22:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x23:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x24:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = pinFunction2;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioPinMask1,pinFunction1,pinFunction2);\n        gpioPort = set_GPIO_Port_Clock((uint)((int)*(char *)(i2cConfig + 0x16) << 0x18) >> 0x1c);\n        gpioPinMask1 = 1 << ((int)*(char *)(i2cConfig + 0x16) & 0xfU) & 0xffff;\n        pinFunction1 = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        pinFunction2 = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        mergedPinFunctions = (pinFunction1 >> 3 & 1) << 4 | pinFunction2 & 7;\n        constant3 = 3;\n        pinPeripheral1 = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        shiftedValue = (uint)(pinPeripheral1 << 0x1a) >> 0x1e;\n        pinPeripheral1 = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        pinFunction2 = 1;\n        pinFunction1 = _DAT_40021018;\n        switch((uint)(pinPeripheral1 << 0x11) >> 0x19) {\n        case 1:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 2:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 3:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 4:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 5:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 6:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 7:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 8:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 9:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xb:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xc:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xd:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xe:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xf:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x11:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x12:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x13:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x14:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x15:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x16:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x17:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1b:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1c:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x21:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x22:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x23:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x24:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = pinFunction2;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioPinMask1,pinFunction1,pinFunction2);\n        i2cConfig[1] = *i2cConfig;\n        i2cConfig[2] = param2;\n        i2cConfig[3] = 0;\n        i2cConfig[4] = param4;\n        i2cConfig[7] = 0xff;\n        i2cConfig[5] = param3;\n        i2cConfig[6] = 0;\n        i2cConfig[8] = 0;\n        i2cConfig[9] = 0;\n        *(undefined *)((int)i2cConfig + 0x41) = 0;\n        HAL_NVIC_SetPriority((int)*(char *)((int)i2cConfig + 0x5a),0,1);\n        HAL_NVIC_EnableIRQ((int)*(char *)((int)i2cConfig + 0x5a));\n        HAL_NVIC_SetPriority((int)*(char *)((int)i2cConfig + 0x5b),0,1);\n        HAL_NVIC_EnableIRQ((int)*(char *)((int)i2cConfig + 0x5b));\n        HAL_I2C_Init(i2cInstance);\n        *(undefined *)((int)i2cConfig + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "param_1": "i2cConfig",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "pinPeripheral1",
                "iVar2": "pinPeripheral2",
                "uVar3": "gpioPort",
                "uVar4": "pinFunction1",
                "uVar5": "pinFunction2",
                "piVar6": "i2cInstance",
                "local_38": "gpioPinMask1",
                "local_34": "mergedPinFunctions",
                "local_30": "shiftedValue",
                "local_2c": "constant3"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "iprintf",
                "pinmap_merge_peripheral",
                "HAL_I2C_Init",
                "HAL_GPIO_Init",
                "HAL_NVIC_SetPriority",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "transmit_data_08007e74",
            "code": "\nint transmitData_08007e74(int deviceAddress,undefined4 dataBuffer,undefined4 dataLength,undefined4 timeout)\n\n{\n  int startTime;\n  int errorCode;\n  uint elapsedTime;\n  int status;\n  int deviceAddressPlus4;\n  undefined4 timeoutCopy;\n  \n  timeoutCopy = timeout;\n  startTime = HAL_GetTick();\n  elapsedTime = 0;\n  status = 2;\n  do {\n    deviceAddressPlus4 = deviceAddress + 4;\n    errorCode = HAL_I2C_Master_Transmit_IT(deviceAddressPlus4,dataBuffer,dataLength,timeout,timeoutCopy);\n    if (errorCode == 0) {\n      status = 0;\n      while ((errorCode = HAL_I2C_GetState(deviceAddressPlus4), errorCode != 0x20 && (status == 0))) {\n        errorCode = HAL_GetTick();\n        elapsedTime = errorCode - startTime;\n        if (elapsedTime < 0x65) {\n          errorCode = HAL_I2C_GetError(deviceAddressPlus4);\n          if (errorCode != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    errorCode = HAL_I2C_GetError(deviceAddressPlus4);\n  } while ((errorCode == 4) && (elapsedTime < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "transmit_data_08007e74",
                "param_1": "deviceAddress",
                "param_2": "dataBuffer",
                "param_3": "dataLength",
                "param_4": "timeout",
                "iVar1": "startTime",
                "iVar2": "errorCode",
                "uVar3": "elapsedTime",
                "iVar4": "status",
                "iVar5": "deviceAddressPlus4",
                "uVar6": "timeoutCopy"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "HAL_I2C_Master_Transmit_IT",
                "HAL_I2C_GetState",
                "HAL_I2C_GetError",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copyData_08007ede(int destination,int source,uint length)\n\n{\n  uint i;\n  \n  if (0x20 < length) {\n    return 2;\n  }\n  for (i = 0; i < length; i = i + 1 & 0xff) {\n    *(undefined *)(destination + i + 0x68) = *(undefined *)(source + i);\n    *(char *)(destination + 0x88) = *(char *)(destination + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "uVar1": "i"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "receive_data_from_i2_c_08007f0e",
            "code": "\nint receiveDataFromI2C_08007f0e(int deviceAddress,undefined4 dataBuffer,undefined4 dataLength,undefined4 timeout)\n\n{\n  int startTime;\n  int i2cStatus;\n  uint elapsedTime;\n  int result;\n  int deviceI2CAddress;\n  undefined4 timeoutValue;\n  \n  timeoutValue = timeout;\n  startTime = HAL_GetTick();\n  elapsedTime = 0;\n  result = 2;\n  do {\n    deviceI2CAddress = deviceAddress + 4;\n    i2cStatus = HAL_I2C_Master_Receive_IT(deviceI2CAddress,dataBuffer,dataLength,timeout,timeoutValue);\n    if (i2cStatus == 0) {\n      result = 0;\n      while ((i2cStatus = HAL_I2C_GetState(deviceI2CAddress), i2cStatus != 0x20 && (result == 0))) {\n        i2cStatus = HAL_GetTick();\n        elapsedTime = i2cStatus - startTime;\n        if (elapsedTime < 0x65) {\n          i2cStatus = HAL_I2C_GetError(deviceI2CAddress);\n          if (i2cStatus != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    i2cStatus = HAL_I2C_GetError(deviceI2CAddress);\n  } while ((i2cStatus == 4) && (elapsedTime < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "receive_data_from_i2_c_08007f0e",
                "param_1": "deviceAddress",
                "param_2": "dataBuffer",
                "param_3": "dataLength",
                "param_4": "timeout",
                "iVar1": "startTime",
                "iVar2": "i2cStatus",
                "uVar3": "elapsedTime",
                "iVar4": "result",
                "iVar5": "deviceI2CAddress",
                "uVar6": "timeoutValue"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "HAL_I2C_GetState",
                "HAL_I2C_Master_Receive_IT",
                "HAL_I2C_GetError",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtract_four_08007f78(int num)\n\n{\n  return num + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "num"
            },
            "calling": [
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "set_i2_c_listen_and_enable_08007f7c",
            "code": "\nvoid setI2CListenAndEnable_08007f7c(int deviceHandle,int data)\n\n{\n  if (deviceHandle != 0) {\n    if (data != 0) {\n      *(int *)(deviceHandle + 0x60) = data;\n      HAL_I2C_EnableListen_IT(deviceHandle + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "set_i2_c_listen_and_enable_08007f7c",
                "param_1": "deviceHandle",
                "param_2": "data"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_i2_c_buffer_08007f8e",
            "code": "\nvoid updateI2CBuffer_08007f8e(int inputBuffer,int data)\n\n{\n  if (inputBuffer != 0) {\n    if (data != 0) {\n      *(int *)(inputBuffer + 100) = data;\n      enableI2CInterrupt(inputBuffer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_i2_c_buffer_08007f8e",
                "param_1": "inputBuffer",
                "param_2": "data",
                "HAL_I2C_EnableListen_IT": "enableI2CInterrupt"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "transmit_or_receive_data_08007fa0",
            "code": "\nvoid transmitOrReceiveData_08007fa0(int deviceAddress,int mode,int expectedSize,undefined4 userData)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (expectedSize == *(int *)(deviceAddress + 0xc)) {\n    if (mode == 0) {\n      *(undefined *)(i2cObj + 0x88) = 0;\n      *(undefined *)(i2cObj + 0x5c) = 0;\n      if (*(code **)(i2cObj + 100) != (code *)0x0) {\n        (**(code **)(i2cObj + 100))();\n      }\n      transmitDataSequentially(deviceAddress,i2cObj + 0x68,*(undefined *)(i2cObj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2cObj + 0x5c) = 1;\n    receiveDataSequentially(deviceAddress,i2cObj + 0x68,0x20,8,userData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "transmit_or_receive_data_08007fa0",
                "param_1": "deviceAddress",
                "param_2": "mode",
                "param_3": "expectedSize",
                "param_4": "userData",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmitDataSequentially",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receiveDataSequentially"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "enable_i2_c_and_listen_08007ff0",
            "code": "\nvoid enableI2CAndListen_08007ff0(undefined4 i2cParam)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (((*(functionPtr **)(i2cObj + 0x60) != (functionPtr *)0x0) && (*(char *)(i2cObj + 0x5c) == '\\x01')) &&\n     (*(char *)(i2cObj + 0x2c) != ' ')) {\n    (**(functionPtr **)(i2cObj + 0x60))(i2cObj + 0x68);\n  }\n  enableI2CListenInterrupt(i2cParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "enable_i2_c_and_listen_08007ff0",
                "param_1": "i2cParam",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "code": "functionPtr",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "enable_i2_c_listen_interrupt_08008020",
            "code": "\nvoid enableI2CListenInterrupt_08008020(undefined4 objAddress)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (*(char *)(i2cObj + 0x5d) == '\\0') {\n    enableI2CListen(objAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "enable_i2_c_listen_interrupt_08008020",
                "param_1": "objAddress",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListen"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_08008078",
            "code": "\n\n\nvoid initializeUART_08008078(int *uartParams)\n\n{\n  int pinmapResult1;\n  int pinmapResult2;\n  undefined4 gpioClockResult;\n  uint pinmapFunctionResult;\n  uint pinMask;\n  uint functionSelect;\n  uint pinMode;\n  undefined4 gpioConfig;\n  \n  if (uartParams != (int *)0x0) {\n    pinmapResult1 = findPeripherals((int)*(char *)(uartParams + 0x16),&DAT_0800a864);\n    pinmapResult2 = findPeripherals((int)*(char *)((int)uartParams + 0x59),&DAT_0800a81c);\n    if ((pinmapResult2 == 0) || (pinmapResult1 == 0)) {\n      printErrorMessage(\"ERROR: at least one UART pin has no peripheral\\n\",pinmapResult2);\n    }\n    else {\n      pinmapResult1 = mergePeripherals(pinmapResult1);\n      *uartParams = pinmapResult1;\n      if (pinmapResult1 == 0) {\n        printErrorMessage(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (pinmapResult1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uartParams + 0x11) = 0;\n          *(undefined *)((int)uartParams + 0x5a) = 0x25;\n        }\n        else if (pinmapResult1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uartParams + 0x11) = 1;\n          *(undefined *)((int)uartParams + 0x5a) = 0x26;\n        }\n        else if (pinmapResult1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uartParams + 0x11) = 2;\n          *(undefined *)((int)uartParams + 0x5a) = 0x27;\n        }\n        gpioClockResult = configureGPIOClock((uint)((int)*(char *)((int)uartParams + 0x59) << 0x18) >> 0x1c);\n        pinmapFunctionResult = mapFunctions((int)*(char *)((int)uartParams + 0x59),&DAT_0800a81c);\n        pinMask = 1 << (*(byte *)((int)uartParams + 0x59) & 0xf) & 0xffff;\n        functionSelect = (pinmapFunctionResult >> 3 & 1) << 4 | pinmapFunctionResult & 7;\n        pinMode = (pinmapFunctionResult << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinmapFunctionResult << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpioConfig = 3;\n        initializeGPIO(gpioClockResult,&pinMask);\n        gpioClockResult = configureGPIOClock((uint)((int)*(char *)(uartParams + 0x16) << 0x18) >> 0x1c);\n        pinmapFunctionResult = mapFunctions((int)*(char *)(uartParams + 0x16),&DAT_0800a864);\n        pinMask = 1 << (*(byte *)(uartParams + 0x16) & 0xf) & 0xffff;\n        functionSelect = (pinmapFunctionResult >> 3 & 1) << 4 | pinmapFunctionResult & 7;\n        pinMode = (pinmapFunctionResult << 0x1a) >> 0x1e;\n        initializeGPIO(gpioClockResult,&pinMask);\n        (&DAT_200006c0)[*(byte *)(uartParams + 0x11)] = uartParams + 1;\n        uartParams[1] = *uartParams;\n        uartParams[2] = uartParams[0x12];\n        uartParams[3] = uartParams[0x13];\n        uartParams[4] = uartParams[0x14];\n        uartParams[5] = uartParams[0x15];\n        uartParams[6] = 0xc;\n        uartParams[7] = 0;\n        uartParams[8] = 0;\n        initializeUART_08008078Peripheral(uartParams + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_08008078",
                "param_1": "uartParams",
                "iVar1": "pinmapResult1",
                "iVar2": "pinmapResult2",
                "uVar3": "gpioClockResult",
                "uVar4": "pinmapFunctionResult",
                "local_20": "pinMask",
                "local_1c": "functionSelect",
                "local_18": "pinMode",
                "local_14": "gpioConfig",
                "iprintf": "printErrorMessage",
                "set_GPIO_Port_Clock": "configureGPIOClock",
                "pinmap_peripheral": "findPeripherals",
                "pinmap_merge_peripheral": "mergePeripherals",
                "pinmap_function": "mapFunctions",
                "HAL_GPIO_Init": "initializeGPIO",
                "HAL_UART_Init": "initializeUARTPeripheral"
            },
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "called": [
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "HAL_UART_Init",
                "pinmap_merge_peripheral",
                "iprintf",
                "HAL_GPIO_Init",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int peripheral_result;\n  undefined4 pinmap_result;\n  \n  peripheral_result = pinmap_peripheral(2,&DAT_0800a864);\n  if (peripheral_result != 0) {\n    pinmap_result = pinmap_peripheral(2,&DAT_0800a864);\n    DAT_20000075 = pinmap_pin(pinmap_result,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_uart_080084b0_registers(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "peripheral_result",
                "uVar2": "pinmap_result",
                "uart_init": "initialize_uart_registers"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_pin",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "transmit_data_08008500",
            "code": "\nuint transmitData_08008500(undefined4 data,uint length)\n\n{\n  int startTime;\n  int peripheralID;\n  uint index;\n  \n  startTime = HAL_GetTick();\n  peripheralID = pinmap_peripheral(2,&DAT_0800a864);\n  if (peripheralID == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (peripheralID = pinmap_peripheral(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != peripheralID))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (uart_debug_init(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    peripheralID = HAL_UART_Transmit((&DAT_200006c0)[index],data,length & 0xffff,1000);\n    if (peripheralID == 0) {\n      return length;\n    }\n    peripheralID = HAL_GetTick();\n  } while ((uint)(peripheralID - startTime) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "transmit_data_08008500",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "startTime",
                "iVar2": "peripheralID",
                "uVar3": "index"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "uart_debug_init",
                "HAL_UART_Transmit",
                "HAL_GetTick",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "is_uart_state_set_to_busy_080085b8",
            "code": "\nbool isUARTStateSetToBusy_080085b8(int state)\n\n{\n  uint uartState;\n  \n  uartState = HAL_UART_GetState((&DAT_200006c0)[*(byte *)(state + 0x44)]);\n  return (uartState & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "is_uart_state_set_to_busy_080085b8",
                "param_1": "state",
                "uVar1": "uartState"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_uart_state_valid_080085dc",
            "code": "\nbool is_uart_state_valid_080085dc(int input_value)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_200006c0)[*(byte *)(input_value + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_uart_state_valid_080085dc",
                "param_1": "input_value",
                "uVar1": "uart_state"
            },
            "calling": [],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "receive_and_process_data_08008600",
            "code": "\nundefined4 receive_and_process_data_08008600(int data_ptr,undefined *received_data,undefined4 status,undefined4 callback_func)\n\n{\n  int is_rx_active;\n  \n  if (data_ptr == 0) {\n    return 0xffffffff;\n  }\n  is_rx_active = serial_rx_active();\n  if (is_rx_active == 0) {\n    *received_data = *(undefined *)(data_ptr + 0x45);\n    HAL_UART_Receive_IT((&DAT_200006c0)[*(byte *)(data_ptr + 0x44)],data_ptr + 0x45,1,&DAT_200006c0,\n                        callback_func);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "receive_and_process_data_08008600",
                "param_1": "data_ptr",
                "param_2": "received_data",
                "param_3": "status",
                "param_4": "callback_func",
                "iVar1": "is_rx_active"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "initialize_serial_communication_0800863c",
            "code": "\nvoid initializeSerialCommunication_0800863c(int serialPort,undefined4 data,undefined4 unused1,undefined4 unused2)\n\n{\n  int isSerialRxActive;\n  uint index;\n  \n  if (serialPort != 0) {\n    isSerialRxActive = serial_rx_active();\n    if (isSerialRxActive == 0) {\n      index = (uint)*(byte *)(serialPort + 0x44);\n      *(undefined4 *)(&DAT_20000670 + index * 4) = data;\n      *(int *)(&DAT_20000684 + index * 4) = serialPort;\n      setInterruptPriority((int)*(char *)(serialPort + 0x5a),0,1,index,unused2);\n      enableInterrupt((int)*(char *)(serialPort + 0x5a));\n      receiveDataAsync((&DAT_200006c0)[*(byte *)(serialPort + 0x44)],serialPort + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "initialize_serial_communication_0800863c",
                "param_1": "serialPort",
                "param_2": "data",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "isSerialRxActive",
                "uVar2": "index",
                "HAL_NVIC_SetPriority": "setInterruptPriority",
                "HAL_NVIC_EnableIRQ": "enableInterrupt",
                "HAL_UART_Receive_IT": "receiveDataAsync"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_SetPriority",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_priority_and_transmit_08008694",
            "code": "\nvoid updatePriorityAndTransmit_08008694(int data,undefined4 priority)\n\n{\n  byte byteValue;\n  \n  if (data != 0) {\n    byteValue = *(byte *)(data + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = priority;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = data;\n    HAL_NVIC_SetPriority((int)*(char *)(data + 0x5a),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(data + 0x5a));\n    HAL_UART_Transmit_IT\n              ((&DAT_200006c0)[*(byte *)(data + 0x44)],\n               *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_priority_and_transmit_08008694",
                "param_1": "data",
                "param_2": "priority",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_value_index_080086e8",
            "code": "\nuint find_value_index_080086e8(int value_to_find)\n\n{\n  uint index;\n  \n  if (value_to_find == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value_to_find == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_uart_command_0800870c",
            "code": "\nvoid executeUartCommand_0800870c(void)\n\n{\n  uint uartIndex;\n  \n  uartIndex = uart_index();\n  if (uartIndex < 5) {\n    (**(code **)(&DAT_20000670 + uartIndex * 4))(*(undefined4 *)(&DAT_20000684 + uartIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_uart_command_0800870c",
                "uVar1": "uartIndex"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "transmit_uart_data_08008730",
            "code": "\nvoid transmitUartData_08008730(void)\n\n{\n  uint uartIndex;\n  int transmitResult;\n  int uartConfiguration;\n  \n  uartIndex = uart_index();\n  uartConfiguration = *(int *)(&DAT_200006ac + uartIndex * 4);\n  if ((uartIndex < 5) && (transmitResult = (**(code **)(&DAT_20000698 + uartIndex * 4))(uartConfiguration), transmitResult != -1)) {\n    transmitDataUsingHAlUART\n              ((&DAT_200006c0)[*(byte *)(uartConfiguration + 0x44)],\n               *(int *)(uartConfiguration + 100) + (uint)*(ushort *)(uartConfiguration + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "transmit_uart_data_08008730",
                "uVar1": "uartIndex",
                "iVar2": "transmitResult",
                "iVar3": "uartConfiguration",
                "HAL_UART_Transmit_IT": "transmitDataUsingHAlUART"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "reserve_memory_08008804",
            "code": "\nundefined * reserveMemory_08008804(int numBytes)\n\n{\n  undefined *reservedMemoryPtr;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  reservedMemoryPtr = DAT_200006d4;\n  if (DAT_200006d4 + numBytes <= &stack0x00000000) {\n    DAT_200006d4 = DAT_200006d4 + numBytes;\n    return reservedMemoryPtr;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "reserve_memory_08008804",
                "param_1": "numBytes",
                "puVar1": "reservedMemoryPtr"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_error_code_08008840",
            "code": "\nundefined4 get_error_code_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_page_size_08008846",
            "code": "\nundefined4 setPageSize_08008846(undefined4 value,int buffer)\n\n{\n  *(undefined4 *)(buffer + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_page_size_08008846",
                "param_1": "value",
                "param_2": "buffer"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "initialize_flag_08008850",
            "code": "\nundefined4 initializeFlag_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "initialize_flag_08008850"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "calculate_value_08008854",
            "code": "\nundefined4 calculate_value_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "calculate_value_08008854"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_application_08008858",
            "code": "\nundefined4 initializeApplication_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_application_08008858"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "debug_write_uart_0800885c",
            "code": "\nvoid debug_write_uart_0800885c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  uart_debug_write(param2,param3,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "debug_write_uart_0800885c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infinite_loop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "abort",
                "_exit"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "check_return_value_0800887c",
            "code": "\nint checkReturnValue_0800887c(void)\n\n{\n  returnStatus 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "check_return_value_0800887c",
                "undefined4": "int",
                "return": "returnStatus"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "decode_value_08008880",
            "code": "\nuint decode_value_08008880(uint input_value)\n\n{\n  bool is_less_than_3c;\n  char decoded_char;\n  uint decoded_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_3c = true;\n    }\n    else {\n      is_less_than_3c = false;\n    }\n  }\n  else {\n    is_less_than_3c = input_value < 0x3c;\n  }\n  if (is_less_than_3c) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    decoded_char = (&DAT_0800a908)[input_value];\n  }\n  else {\n    decoded_char = -1;\n  }\n  if (decoded_char == -1) {\n    decoded_value = 0;\n  }\n  else {\n    decoded_value = adc_read_value();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return decoded_value >> (0xc - DAT_20000088 & 0xff);\n      }\n      return decoded_value << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_08008880": "decode_value_08008880",
                "param_1": "input_value",
                "bVar1": "is_less_than_3c",
                "cVar2": "decoded_char",
                "uVar3": "decoded_value"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "gpio_pin_control_080088e0",
            "code": "\nvoid gpio_pin_control_080088e0(uint pin_number,uint pin_value)\n\n{\n  int pin_status;\n  int gpio_index;\n  \n  if (pin_number < 0x3c) {\n    gpio_index = (int)(char)(&DAT_0800a908)[pin_number];\n  }\n  else {\n    gpio_index = -1;\n  }\n  if (gpio_index != -1) {\n    pin_status = pin_in_pinmap(gpio_index,&DAT_0800a6cc);\n    if (pin_status == 0) {\n      pinMode(pin_number,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          pin_value = pin_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          pin_value = pin_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (pin_value < 0x80) {\n        digitalWrite(pin_number,0);\n      }\n      else {\n        digitalWrite(pin_number,1);\n      }\n    }\n    else {\n      pin_status = is_pin_configured(gpio_index,&DAT_200006d8);\n      if (pin_status == 0) {\n        set_pin_configured(gpio_index,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          pin_value = pin_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          pin_value = pin_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      pwm_start(gpio_index,0x3e418,0xff,pin_value,pin_status == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "gpio_pin_control_080088e0",
                "param_1": "pin_number",
                "param_2": "pin_value",
                "iVar1": "pin_status",
                "iVar2": "gpio_index"
            },
            "calling": [
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "set_pin_configured",
                "pwm_start",
                "is_pin_configured",
                "digitalWrite",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "configure_pin_08008990",
            "code": "\nvoid configure_pin_08008990(uint pin_index,undefined4 io_mode,undefined4 param,undefined1 *pin_config)\n\n{\n  int is_configured;\n  undefined1 *pin_data;\n  int pin_param;\n  \n  if (pin_index < 0x3c) {\n    pin_param = (int)(char)(&DAT_0800a908)[pin_index];\n    pin_data = &DAT_0800a908;\n  }\n  else {\n    pin_param = -1;\n    pin_data = pin_config;\n  }\n  if (pin_param != -1) {\n    is_configured = is_pin_configured(pin_param,&DAT_200006d8,param,pin_data,pin_config);\n    if (is_configured != 0) {\n      is_configured = pin_in_pinmap(pin_param,&DAT_0800a6cc);\n      if (is_configured != 0) {\n        pwm_stop(pin_param);\n      }\n      reset_pin_configured(pin_param,&DAT_200006d8);\n    }\n    switch(io_mode) {\n    case 0:\n      digital_io_init(pin_param,0);\n      break;\n    case 1:\n      digital_io_init(pin_param,1,0);\n      break;\n    case 2:\n      digital_io_init(pin_param,0,1);\n      break;\n    case 3:\n      digital_io_init(pin_param,0,2);\n    }\n    set_pin_configured(pin_param,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "configure_pin_08008990",
                "param_1": "pin_index",
                "param_2": "io_mode",
                "param_3": "param",
                "param_4": "pin_config",
                "iVar1": "is_configured",
                "puVar2": "pin_data",
                "iVar3": "pin_param"
            },
            "calling": [
                "FUN_080025ac",
                "blinkVersion",
                "analogWrite",
                "setPinModeCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "set_pin_configured",
                "is_pin_configured",
                "pwm_stop",
                "reset_pin_configured",
                "digital_io_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "configure_pin_08008a24",
            "code": "\nvoid configurePin_08008a24(uint pinIndex,undefined4 value,undefined4 config,undefined1 *pinData)\n\n{\n  int isConfigured;\n  undefined4 gpioPort;\n  undefined1 *pinConfig;\n  uint pinDataValue;\n  \n  if (pinIndex < 0x3c) {\n    pinDataValue = (uint)(char)(&DAT_0800a908)[pinIndex];\n    pinConfig = &DAT_0800a908;\n  }\n  else {\n    pinDataValue = 0xffffffff;\n    pinConfig = pinData;\n  }\n  if ((pinDataValue != 0xffffffff) &&\n     (isConfigured = is_pin_configured(pinDataValue,&DAT_200006ec,config,pinConfig,pinData), isConfigured != 0)) {\n    gpioPort = get_GPIO_Port((pinDataValue << 0x18) >> 0x1c);\n    digital_io_write(gpioPort,1 << (pinDataValue & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "configure_pin_08008a24",
                "param_1": "pinIndex",
                "param_2": "value",
                "param_3": "config",
                "param_4": "pinData",
                "iVar1": "isConfigured",
                "uVar2": "gpioPort",
                "puVar3": "pinConfig",
                "uVar4": "pinDataValue"
            },
            "calling": [
                "strobeBlinkPin",
                "analogWrite",
                "setPinModeCallback"
            ],
            "called": [
                "is_pin_configured",
                "get_GPIO_Port",
                "digital_io_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_configured_pin_08008a6c",
            "code": "\nchar check_configured_pin_08008a6c(uint pin_number)\n\n{\n  char result_flag;\n  int is_configured;\n  undefined4 port;\n  uint pin;\n  \n  if (pin_number < 0x3c) {\n    pin = (uint)(char)(&DAT_0800a908)[pin_number];\n  }\n  else {\n    pin = 0xffffffff;\n  }\n  if (pin == 0xffffffff) {\n    result_flag = '\\0';\n  }\n  else {\n    is_configured = is_pin_configured(pin,&DAT_200006ec);\n    if (is_configured == 0) {\n      result_flag = '\\0';\n    }\n    else {\n      port = get_port_by_pin((pin << 0x18) >> 0x1c);\n      result_flag = read_digital_io(port,1 << (pin & 0xf) & 0xffff);\n    }\n  }\n  if (result_flag != '\\0') {\n    result_flag = '\\x01';\n  }\n  return result_flag;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_configured_pin_08008a6c",
                "param_1": "pin_number",
                "cVar1": "result_flag",
                "iVar2": "is_configured",
                "uVar3": "port",
                "uVar4": "pin",
                "digital_io_read": "read_digital_io",
                "get_GPIO_Port": "get_port_by_pin"
            },
            "calling": [
                "checkDigitalInputs"
            ],
            "called": [
                "digital_io_read",
                "is_pin_configured",
                "get_GPIO_Port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "get_current_millisecond_08008abc",
            "code": "\nvoid get_current_millisecond_08008abc(void)\n\n{\n  current_millisecond();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "get_current_millisecond_08008abc",
                "GetCurrentMilli": "current_millisecond"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "blinkVersion",
                "strobeBlinkPin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_shift_value_08008afa",
            "code": "\nushort calculate_shift_value_08008afa(int data_address)\n\n{\n  return (*(short *)(data_address + 0x134) + 0x40) - *(short *)(data_address + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_shift_value_08008afa",
                "param_1": "data_address"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "process_uart_input_08008b66",
            "code": "\nvoid process_uart_input_08008b66(int uart)\n\n{\n  int result;\n  ushort next_index;\n  undefined input_character;\n  \n  result = uart_getc(uart,&input_character);\n  if ((result == 0) &&\n     (next_index = *(short *)(uart + 0x60) + 1U & 0x3f, next_index != *(ushort *)(uart + 0x62))) {\n    *(undefined *)(*(int *)(uart + 0x5c) + (uint)*(ushort *)(uart + 0x60)) = input_character;\n    *(ushort *)(uart + 0x60) = next_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "process_uart_input_08008b66",
                "param_1": "uart",
                "iVar1": "result",
                "uVar2": "next_index",
                "local_9": "input_character"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_function_08008c20",
            "code": "\nvoid initializeFunction_08008c20(int functionPointer)\n\n{\n  *(int *)(functionPointer + 0x130) = functionPointer + 0x11;\n  *(undefined2 *)(functionPointer + 0x134) = 0;\n  *(undefined2 *)(functionPointer + 0x136) = 0;\n  *(int *)(functionPointer + 0x138) = functionPointer + 0x51;\n  *(undefined2 *)(functionPointer + 0x13c) = 0;\n  *(undefined2 *)(functionPointer + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_function_08008c20",
                "param_1": "functionPointer"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_port_08008c44",
            "code": "\nvoid initializeSerialPort_08008c44(int serialPortAddress,undefined4 baudRate,byte serialSettings)\n\n{\n  uint tempVariable1;\n  byte serialSettingsMasked;\n  int serialPortMode;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x140) = serialSettings;\n  serialSettingsMasked = serialSettings & 7;\n  if (serialSettingsMasked == 4) {\n    serialPortMode = 7;\n  }\n  else if (serialSettingsMasked == 6) {\n    serialPortMode = 8;\n  }\n  else if (serialSettingsMasked == 2) {\n    serialPortMode = 6;\n  }\n  else {\n    serialPortMode = 0;\n  }\n  if ((serialSettings & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    serialPortMode = serialPortMode + 1;\n  }\n  else if ((serialSettings & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    serialPortMode = serialPortMode + 1;\n  }\n  if ((serialSettings & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (serialPortMode == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (serialPortMode == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    serialPortMode = 0;\n  }\n  if (serialPortMode != 0) {\n    uart_init(serialPortAddress + 0xd4);\n    uart_attach_rx_callback(serialPortAddress + 0xd4,0x8008b67);\n    return;\n  }\n  jumpTable = (code *)0x8008cee;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (tempVariable1 < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[tempVariable1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0,tempVariable1,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_port_08008c44",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "serialSettings",
                "extraout_r1": "tempVariable1",
                "bVar1": "serialSettingsMasked",
                "iVar2": "serialPortMode",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "uart_init",
                "uart_attach_rx_callback",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_threshold_value_08008d00",
            "code": "\nvoid setThresholdValue_08008d00(int address,uint value)\n\n{\n  undefined threshold;\n  code *jumpTable;\n  \n  if (value < 0x3c) {\n    threshold = (&DAT_0800a908)[value];\n  }\n  else {\n    threshold = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = threshold;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_threshold_value_08008d00",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "threshold",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "update_param_value_08008d18",
            "code": "\nvoid updateParamValue_08008d18(int baseAddress,uint index)\n\n{\n  undefined newValue;\n  \n  if (index < 0x3c) {\n    newValue = (&DAT_0800a908)[index];\n  }\n  else {\n    newValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "update_param_value_08008d18",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "newValue"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_communication_08008d30",
            "code": "\nundefined4 *\ninitializeCommunication_08008d30(undefined4 *communicationData,undefined4 pin,undefined4 paramA,undefined4 paramB)\n\n{\n  undefined pinValue;\n  \n  communicationData[1] = 0;\n  communicationData[2] = 1000;\n  *communicationData = &PTR_LAB_08008ba4_1_0800aab8;\n  if (communicationData == (undefined4 *)&DAT_20000700) {\n    setRx(&DAT_20000700,0,paramA,&DAT_20000700,paramB);\n    setTx(&DAT_20000700,1);\n  }\n  else {\n    pinValue = pinmap_pin(pin,&DAT_0800a81c);\n    *(undefined *)((int)communicationData + 0x12d) = pinValue;\n    pinValue = pinmap_pin(pin,&DAT_0800a864);\n    *(undefined *)(communicationData + 0x4b) = pinValue;\n  }\n  init(communicationData);\n  return communicationData;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_communication_08008d30",
                "param_1": "communicationData",
                "param_2": "pin",
                "param_3": "paramA",
                "param_4": "paramB",
                "uVar1": "pinValue"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "setRx",
                "init",
                "setTx",
                "pinmap_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_serial_communication_08008d8c",
            "code": "\nvoid initializeSerialCommunication_08008d8c(int flag,int value,undefined4 configParameter1,undefined4 configParameter2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    HardwareSerial(&DAT_20000700,0x40004400,configParameter1,0xffff,configParameter2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_serial_communication_08008d8c",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "configParameter1",
                "param_4": "configParameter2"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_0800ab0c;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_ip_address_08008e14",
            "code": "\nvoid initializeIPAddress_08008e14(int isOne,int isMax)\n\n{\n  if ((isOne == 1) && (isMax == 0xffff)) {\n    IPAddress(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_ip_address_08008e14",
                "param_1": "isOne",
                "param_2": "isMax"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_interpolation_08008ef4",
            "code": "\nint calculate_interpolation_08008ef4(int x1,int x2,int x3,int y2,int y3)\n\n{\n  return (uint)((y3 - y2) * (x1 - x2)) / (uint)(x3 - x2) + y2;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_interpolation_08008ef4",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "x3",
                "param_4": "y2",
                "param_5": "y3"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_hardware_08008f0e",
            "code": "\nvoid initialize_hardware_08008f0e(void)\n\n{\n  set_nvic_priority_grouping(3);\n  initialize_hardware_08008f0e_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_hardware_08008f0e",
                "HAL_NVIC_SetPriorityGrouping": "set_nvic_priority_grouping",
                "initialize_hardware_configuration_080036a2": "initialize_hardware_configuration"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "FUN_080036a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "run_forever_08008f1c",
            "code": "\nvoid runForever_08008f1c(void)\n\n{\n  initializeVariant();\n  setupConfiguration();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "run_forever_08008f1c",
                "initVariant": "initializeVariant",
                "setup": "setupConfiguration",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "loop",
                "serialEventRun",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar countSetBits_08008f3c(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_parameters_08008f78",
            "code": "\nvoid initializeParameters_08008f78(int value,int errorCode,undefined4 param3,undefined4 param4)\n\n{\n  if (value != 1) {\n    return;\n  }\n  if (errorCode == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    __aeabi_atexit(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_parameters_08008f78",
                "param_1": "value",
                "param_2": "errorCode",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "check_and_call_function_08009084",
            "code": "\nvoid checkAndCallFunction_08009084(int input)\n\n{\n  int pinId;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pinId = get_pin_id();\n  if ((&DAT_20000858)[pinId * 5] != 0) {\n    checkAndCallFunction_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "check_and_call_function_08009084",
                "param_1": "input",
                "iVar1": "pinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_execute_operator_08009094",
            "code": "\nvoid checkAndExecuteOperator_08009094(void)\n\n{\n  int pinID;\n  \n  pinID = getPinID();\n  if ((&DAT_20000858)[pinID * 5] != 0) {\n    executeOperator();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_execute_operator_08009094",
                "iVar1": "pinID",
                "get_pin_id": "getPinID",
                "operator()": "executeOperator"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "register_exit_function_080090c2",
            "code": "\nvoid registerExitFunction_080090c2(undefined4 exitFunction,undefined4 cleanupObject)\n\n{\n  __cxa_atexit(cleanupObject,exitFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "register_exit_function_080090c2",
                "param_1": "exitFunction",
                "param_2": "cleanupObject"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "print_assertion_failure_080090cc",
            "code": "\nvoid printAssertionFailure_080090cc(undefined4 fileName,undefined4 lineNumber,char *assertion,undefined4 functionName)\n\n{\n  undefined4 outputStream;\n  char *additionalInformation;\n  undefined8 result;\n  undefined4 parameter;\n  \n  outputStream = *(undefined4 *)(DAT_20000090 + 0xc);\n  parameter = functionName;\n  if (assertion == (char *)0x0) goto LAB_080090f0;\n  additionalInformation = \", function: \";\n  do {\n    fiprintf(outputStream,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,fileName,lineNumber,\n             additionalInformation,assertion,parameter);\n    result = abort();\n    lineNumber = (undefined4)((ulonglong)result >> 0x20);\n    outputStream = (undefined4)result;\nLAB_080090f0:\n    assertion = \"\";\n    additionalInformation = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "print_assertion_failure_080090cc",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "assertion",
                "param_4": "functionName",
                "uVar1": "outputStream",
                "pcVar2": "additionalInformation",
                "uVar3": "result",
                "uVar4": "parameter"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_param_to_upper_bits_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftParamToUpperBits_08009108(undefined4 newValue,uint lowerBits)\n\n{\n  return (ulonglong)lowerBits << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_param_to_upper_bits_08009108",
                "param_1": "newValue",
                "param_2": "lowerBits"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "print_user_info_08009124",
            "code": "\nvoid print_user_info_08009124(undefined4 format_string,undefined4 param_2,undefined4 user_info,undefined4 user_info_size)\n\n{\n  undefined4 user_data;\n  undefined4 data_size;\n  \n  user_data = user_info;\n  data_size = user_info_size;\n  _vfiprintf_r(DAT_20000090,format_string,param_2,&user_data,format_string,&user_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "print_user_info_08009124",
                "param_1": "format_string",
                "param_3": "user_info",
                "param_4": "user_info_size",
                "uStack_8": "user_data",
                "uStack_4": "data_size"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "initialize_and_execute_functions_08009148",
            "code": "\nvoid initializeAndExecuteFunctions_08009148(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&DAT_0800abe4)[counter])();\n  }\n  _init();\n  for (counter = 0; counter != 0xc; counter = counter + 1) {\n    (*(code *)(&DAT_0800abe4)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "initialize_and_execute_functions_08009148",
                "iVar1": "counter"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "premain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid allocateMemory_08009190(undefined4 size)\n\n{\n  _malloc_r(DAT_20000090,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "param_1": "size"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "free_memory_block_080091a0",
            "code": "\nvoid freeMemoryBlock_080091a0(undefined4 memoryBlock)\n\n{\n  _free_r(DAT_20000090,memoryBlock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "free_memory_block_080091a0",
                "param_1": "memoryBlock"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copyData_080091b0(int startAddress,undefined *sourceData,int dataSize)\n\n{\n  undefined *endAddress;\n  undefined *destinationAddress;\n  \n  destinationAddress = (undefined *)(startAddress + -1);\n  endAddress = sourceData + dataSize;\n  for (; sourceData != endAddress; sourceData = sourceData + 1) {\n    destinationAddress = destinationAddress + 1;\n    *destinationAddress = *sourceData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "startAddress",
                "param_2": "sourceData",
                "param_3": "dataSize",
                "puVar1": "endAddress",
                "puVar2": "destinationAddress"
            },
            "calling": [
                "realloc",
                "FUN_080027f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *destination,undefined value,int length)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + length;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endAddress"
            },
            "calling": [
                "std.isra.0",
                "__sfp",
                "FUN_08002a58",
                "pwm_start",
                "adc_read_value",
                "FUN_08002968",
                "__sfmoreglue"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "allocate_memory_block_080091d8",
            "code": "\nvoid allocateMemoryBlock_080091d8(undefined4 *resultPtr,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **nextBlock;\n  int **currentBlock;\n  int **previousBlock;\n  int *tempBlock;\n  int **tempPtr;\n  int **blockPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  blockPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    blockPtr = (int **)((int)blockPtr + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  previousBlock = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    blockPtr[1] = (int *)0x0;\n    currentBlock = nextBlock;\n    DAT_2000098c = blockPtr;\n  }\n  else {\n    previousBlock = DAT_2000098c;\n    if (blockPtr < DAT_2000098c) {\n      currentBlock = (int **)*blockPtr;\n      previousBlock = (int **)((int)blockPtr + (int)currentBlock);\n      if (DAT_2000098c == previousBlock) {\n        tempBlock = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        previousBlock = (int **)((int)tempBlock + (int)currentBlock);\n        *blockPtr = (int *)previousBlock;\n      }\n      blockPtr[1] = (int *)DAT_2000098c;\n      DAT_2000098c = blockPtr;\n    }\n    else {\n      do {\n        tempPtr = previousBlock;\n        previousBlock = (int **)tempPtr[1];\n        if (previousBlock == (int **)0x0) break;\n      } while (previousBlock <= blockPtr);\n      currentBlock = (int **)*tempPtr;\n      if ((int **)((int)tempPtr + (int)currentBlock) == blockPtr) {\n        currentBlock = (int **)((int)currentBlock + (int)*blockPtr);\n        *tempPtr = (int *)currentBlock;\n        if (previousBlock == (int **)((int)tempPtr + (int)currentBlock)) {\n          tempBlock = *previousBlock;\n          previousBlock = (int **)previousBlock[1];\n          currentBlock = (int **)((int)currentBlock + (int)tempBlock);\n          *tempPtr = (int *)currentBlock;\n          tempPtr[1] = (int *)previousBlock;\n        }\n      }\n      else if (blockPtr < (int **)((int)tempPtr + (int)currentBlock)) {\n        *resultPtr = 0xc;\n      }\n      else {\n        currentBlock = (int **)((int)blockPtr + (int)*blockPtr);\n        if (previousBlock == currentBlock) {\n          tempBlock = *previousBlock;\n          previousBlock = (int **)previousBlock[1];\n          currentBlock = (int **)((int)tempBlock + (int)*blockPtr);\n          *blockPtr = (int *)currentBlock;\n        }\n        blockPtr[1] = (int *)previousBlock;\n        tempPtr[1] = (int *)blockPtr;\n      }\n    }\n  }\n  __malloc_unlock(resultPtr,currentBlock,previousBlock,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "allocate_memory_block_080091d8",
                "param_1": "resultPtr",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "nextBlock",
                "ppiVar1": "currentBlock",
                "ppiVar2": "previousBlock",
                "piVar3": "tempBlock",
                "ppiVar4": "tempPtr",
                "ppiVar5": "blockPtr"
            },
            "calling": [
                "abort",
                "realloc",
                "free",
                "__swsetup_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_block_08009270",
            "code": "\nuint allocate_memory_block_08009270(undefined4 *error_code,uint block_size)\n\n{\n  uint *current_block;\n  int remaining_size;\n  uint *previous_block;\n  uint difference;\n  uint *last_block;\n  uint allocated_block;\n  \n  allocated_block = (block_size + 3 & 0xfffffffc) + 8;\n  if (allocated_block < 0xc) {\n    allocated_block = 0xc;\n  }\n  if (((int)allocated_block < 0) || (allocated_block < block_size)) {\n    *error_code = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = DAT_2000098c;\n    last_block = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_block;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_block;\n          last_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = _sbrk_r(error_code);\n    }\n    current_block = (uint *)_sbrk_r(error_code,allocated_block);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (remaining_size = _sbrk_r(error_code,(int)last_block - (int)current_block), remaining_size != -1)))) {\n      *last_block = allocated_block;\nLAB_080092d4:\n      __malloc_unlock(error_code);\n      allocated_block = (int)last_block + 0xbU & 0xfffffff8;\n      remaining_size = allocated_block - (int)(last_block + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)last_block + remaining_size) = -remaining_size;\n        return allocated_block;\n      }\n      return allocated_block;\n    }\n    *error_code = 0xc;\n    __malloc_unlock(error_code);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "error_code",
                "param_2": "block_size",
                "puVar1": "current_block",
                "iVar2": "remaining_size",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "last_block",
                "uVar6": "allocated_block"
            },
            "calling": [
                "realloc",
                "__smakebuf_r",
                "malloc",
                "__sfmoreglue"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "reverse_bytes_0800932c",
            "code": "\nuint reverseBytes_0800932c(int originalValue,byte byteValue,byte **bytePtr)\n\n{\n  int tempVar;\n  byte *ptr2;\n  byte *ptr3;\n  uint returnValue;\n  \n  ptr2 = bytePtr[2] + -1;\n  bytePtr[2] = ptr2;\n  if ((-1 < (int)ptr2) ||\n     (((int)bytePtr[6] <= (int)ptr2 && (ptr2 = (byte *)(uint)byteValue, ptr2 != (byte *)0xa))))\n  {\n    ptr2 = *bytePtr;\n    *bytePtr = ptr2 + 1;\n    *ptr2 = byteValue;\n    return (uint)byteValue;\n  }\n  if ((originalValue != 0) && (*(int *)(originalValue + 0x18) == 0)) {\n    __sinit();\n  }\n  if (bytePtr == (byte **)&DAT_0800aba4) {\n    bytePtr = *(byte ***)(originalValue + 4);\n  }\n  else if (bytePtr == (byte **)&DAT_0800abc4) {\n    bytePtr = *(byte ***)(originalValue + 8);\n  }\n  else if (bytePtr == (byte **)&DAT_0800ab84) {\n    bytePtr = *(byte ***)(originalValue + 0xc);\n  }\n  bytePtr[2] = bytePtr[6];\n  ptr3 = (byte *)(uint)*(ushort *)(bytePtr + 3);\n  tempVar = (int)ptr3 << 0x1c;\n  if (((tempVar < 0) && (ptr3 = bytePtr[4], ptr3 != (byte *)0x0)) ||\n     (tempVar = __swsetup_r(originalValue,bytePtr,tempVar,ptr3,ptr2), tempVar == 0)) {\n    returnValue = (uint)byteValue;\n    tempVar = (int)*bytePtr - (int)bytePtr[4];\n    if ((tempVar < (int)bytePtr[5]) || (tempVar = _fflush_r(originalValue,bytePtr), tempVar == 0)) {\n      bytePtr[2] = bytePtr[2] + -1;\n      ptr2 = *bytePtr;\n      *bytePtr = ptr2 + 1;\n      *ptr2 = byteValue;\n      if ((byte *)(tempVar + 1) != bytePtr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(bytePtr + 3) << 0x1f)) {\n          return returnValue;\n        }\n        if (returnValue != 10) {\n          return returnValue;\n        }\n      }\n      tempVar = _fflush_r(originalValue,bytePtr);\n      if (tempVar == 0) {\n        return returnValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "reverse_bytes_0800932c",
                "param_1": "originalValue",
                "param_2": "byteValue",
                "param_3": "bytePtr",
                "iVar1": "tempVar",
                "pbVar2": "ptr2",
                "pbVar3": "ptr3",
                "uVar4": "returnValue"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__sinit",
                "_fflush_r",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "write_to_buffer_08009358",
            "code": "\nint write_to_buffer_08009358(undefined4 file_descriptor,undefined4 buffer,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int remaining_length;\n  \n  end_of_data = data + length;\n  remaining_length = length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    result = __sfputc_r(file_descriptor,*data,buffer,length,remaining_length);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "write_to_buffer_08009358",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "remaining_length"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "format_string_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint formatString_0800937c(int stream,undefined4 *format,byte *buffer,int *n)\n\n{\n  int result;\n  int *arg_ptr;\n  bool hasNumber;\n  byte *current_char;\n  byte *next_char;\n  int swsetup_result;\n  int value;\n  int *arg_list;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int number;\n  int total_chars;\n  byte specifier;\n  undefined SPACE;\n  undefined PLUS;\n  undefined pad_char;\n  undefined4 POINT;\n  \n  arg_list = n;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format == &DAT_0800aba4) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_0800abc4) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_0800ab84) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (value = __swsetup_r(stream,format), value != 0)) {\n    return -1;\n  }\n  total_chars = 0;\n  SPACE = 0x20;\n  PLUS = 0x30;\n  current_char = buffer;\nLAB_080093be:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  value = (int)next_char - (int)buffer;\n  if (value != 0) {\n    result = __sfputs_r(stream,format,buffer,value);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_chars;\n    }\n    total_chars = total_chars + value;\n  }\n  if (*next_char == 0) goto LAB_08009568;\n  flags = 0;\n  number = 0;\n  precision = -1;\n  width = 0;\n  pad_char = 0;\n  POINT = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    value = memchr(\"#-0+ \",*current_char);\n    buffer = current_char + 1;\n    if (value == 0) break;\n    flags = 1 << (value + 0xf7ff54b0U & 0xff) | flags;\n    current_char = buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    pad_char = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    pad_char = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    arg_ptr = arg_list + 1;\n    value = *arg_list;\n    arg_list = arg_ptr;\n    if (value < 0) {\n      number = -value;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    hasNumber = false;\n    value = number;\n    buffer = current_char;\n    while( true ) {\n      if (9 < *buffer - 0x30) break;\n      value = value * 10 + (*buffer - 0x30);\n      hasNumber = true;\n      buffer = buffer + 1;\n    }\n    if (!hasNumber) goto LAB_080094a6;\n  }\n  number = value;\nLAB_080094a6:\n  if (*buffer == 0x2e) {\n    if (buffer[1] == 0x2a) {\n      buffer = buffer + 2;\n      arg_ptr = arg_list + 1;\n      precision = *arg_list;\n      arg_list = arg_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      hasNumber = false;\n      value = 0;\n      precision = 0;\n      while( true ) {\n        buffer = buffer + 1;\n        if (9 < *buffer - 0x30) break;\n        value = value * 10 + (*buffer - 0x30);\n        hasNumber = true;\n      }\n      if (hasNumber) {\n        precision = value;\n      }\n    }\n  }\n  value = memchr(&DAT_0800ab56,*buffer,3);\n  if (value != 0) {\n    buffer = buffer + 1;\n    flags = flags | 0x40 << (value + 0xf7ff54aaU & 0xff);\n  }\n  specifier = *buffer;\n  buffer = buffer + 1;\n  value = memchr(\"efgEFG\",specifier,6);\n  if (value == 0) {\n    swsetup_result = _printf_i(stream,&flags,format,0x8009359,&arg_list);\n    if (swsetup_result == -1) goto LAB_08009568;\n  }\n  else {\n    arg_list = (int *)(((int)arg_list + 7U & 0xfffffff8) + 8);\n  }\n  total_chars = total_chars + swsetup_result;\n  current_char = buffer;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "format_string_0800937c",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "buffer",
                "param_4": "n",
                "iVar1": "result",
                "piVar2": "arg_ptr",
                "bVar3": "hasNumber",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "unaff_r9": "swsetup_result",
                "iVar6": "value",
                "local_8c": "arg_list",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "number",
                "local_74": "total_chars",
                "local_70": "specifier",
                "local_6f": "SPACE",
                "local_6e": "PLUS",
                "local_45": "pad_char",
                "local_30": "POINT"
            },
            "calling": [
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__sinit",
                "memchr",
                "_printf_i",
                "__sfputs_r",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocess_data_080095a8(undefined4 input_value,uint *data_array,uint *output_value,undefined4 additional_parameter,code *callback_function)\n\n{\n  int iterator_1;\n  int iterator_2;\n  uint max_value;\n  uint offset;\n  bool is_condition_true;\n  \n  max_value = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_value = data_array[2];\n  }\n  *output_value = max_value;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_value = max_value + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_value = *output_value + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (iterator_1 = 0; iterator_1 < (int)(data_array[3] - *output_value); iterator_1 = iterator_1 + 1) {\n      iterator_2 = (*callback_function)(input_value,additional_parameter,(int)data_array + 0x19,1);\n      if (iterator_2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data_array + max_value + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  iterator_1 = (*callback_function)(input_value,additional_parameter,(int)data_array + 0x43,offset);\n  if (iterator_1 != -1) {\n    max_value = data_array[3];\n    is_condition_true = (*data_array & 6) != 4;\n    if (is_condition_true) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!is_condition_true) {\n      max_value = max_value - *output_value;\n    }\n    if (!is_condition_true) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_value = max_value + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      iterator_1 = (*callback_function)(input_value,additional_parameter,(int)data_array + 0x1a,1);\n      if (iterator_1 == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "output_value",
                "param_4": "additional_parameter",
                "param_5": "callback_function",
                "iVar1": "iterator_1",
                "iVar2": "iterator_2",
                "uVar3": "max_value",
                "uVar4": "offset",
                "bVar5": "is_condition_true"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "print_formatted_data_08009698",
            "code": "\nuint printFormattedData_08009698(undefined4 formatString,uint *data,undefined4 stream,code *putcFunc,uint **argPointer)\n\n{\n  byte byte1;\n  int index;\n  uint *ptr;\n  int returnValue;\n  char *hexChars;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint length;\n  char *formattedData;\n  char *formatCursor;\n  uint localOffsets [2];\n  \n  byte1 = *(byte *)(data + 6);\n  formatCursor = (char *)((int)data + 0x43);\n  if (byte1 != 0x6e) {\n    if (byte1 < 0x6f) {\n      if (byte1 != 99) {\n        if (byte1 < 100) {\n          if (byte1 == 0) goto LAB_08009852;\n          if (byte1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hexChars = \"0123456789ABCDEF\";\nLAB_080097e2:\n          base = *data;\n          ptr = *argPointer;\n          *argPointer = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08009778:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byte1 != 100) && (byte1 != 0x69)) goto LAB_080096c8;\n          value = *data;\n          ptr = *argPointer;\n          if ((value & 0x80) == 0) {\n            *argPointer = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_080096e8;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *argPointer = ptr + 1;\nLAB_080096e8:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hexChars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        length = data[1];\n        data[2] = length;\n        formattedData = formatCursor;\n        if ((int)length < 0) {\n          if (value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)data + 0x42) = *hexChars;\n          formattedData = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (length != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              length = value / base;\n              formattedData = formattedData + -1;\n              *formattedData = hexChars[value - base * length];\n              value = length;\n            } while (length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          formattedData[-1] = '0';\n          formattedData = formattedData + -1;\n        }\n        data[4] = (int)formatCursor - (int)formattedData;\n        formatCursor = formattedData;\n        goto LAB_080097be;\n      }\n      ptr = *argPointer;\n      *argPointer = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08009728:\n      formatCursor = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte1 != 0x73) {\n        if (byte1 < 0x74) {\n          if (byte1 == 0x6f) {\nLAB_0800974e:\n            value = *data;\n            ptr = *argPointer;\n            if ((value & 0x80) == 0) {\n              *argPointer = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_0800975c;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *argPointer = ptr + 1;\nLAB_0800975c:\n              value = *ptr;\n            }\n            if (byte1 == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hexChars = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte1 == 0x70) {\n            *data = *data | 0x20;\nLAB_0800970e:\n            hexChars = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte1 == 0x75) goto LAB_0800974e;\n          if (byte1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)data + 0x42) = byte1;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*argPointer;\n      *argPointer = (uint *)(ppcVar8 + 1);\n      formatCursor = *ppcVar8;\n      index = searchNull(formatCursor,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)formatCursor;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  value = *data;\n  ppuVar7 = (uint **)*argPointer;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *argPointer = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *argPointer = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800983e:\n    *ptr = base;\n  }\nLAB_08009852:\n  data[4] = 0;\nLAB_080097be:\n  index = performFormatting(formatString,data,localOffsets,stream,putcFunc);\n  if ((index == -1) || (index = (*putcFunc)(formatString,stream,formatCursor,data[4]), index == -1)) {\nLAB_080097d2:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - localOffsets[0]); index = index + 1) {\n        returnValue = (*putcFunc)(formatString,stream,(int)data + 0x19,1);\n        if (returnValue == -1) goto LAB_080097d2;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)localOffsets[0]) {\n      value = localOffsets[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009698": "print_formatted_data_08009698",
                "param_1": "formatString",
                "param_2": "data",
                "param_3": "stream",
                "param_4": "putcFunc",
                "param_5": "argPointer",
                "bVar1": "byte1",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "returnValue",
                "pcVar5": "hexChars",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "length",
                "pcVar11": "formattedData",
                "pcVar12": "formatCursor",
                "local_24": "localOffsets",
                "_printf_common": "performFormatting",
                "memchr": "searchNull"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "print_formatted_message_080098d8",
            "code": "\nvoid printFormattedMessage_080098d8(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int data;\n  undefined4 formatStringPtr;\n  undefined4 arg1Ptr;\n  undefined4 arg2Ptr;\n  undefined4 arg3Ptr;\n  \n  data = DAT_20000090;\n  formatStringPtr = formatString;\n  arg1Ptr = arg1;\n  arg2Ptr = arg2;\n  arg3Ptr = arg3;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    __sinit(DAT_20000090);\n  }\n  _vfiprintf_r(data,*(undefined4 *)(data + 8),formatString,&arg1Ptr,formatStringPtr,&arg1Ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "print_formatted_message_080098d8",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "data",
                "uVar2": "formatStringPtr",
                "uStack_c": "arg1Ptr",
                "uStack_8": "arg2Ptr",
                "uStack_4": "arg3Ptr"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "getTimerClkSrc",
                "getTimerIrq",
                "getTimerClkFreq"
            ],
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "resize_and_copy_memory_08009908",
            "code": "\nint resizeAndCopyMemory_08009908(int sourcePtr,uint newSize)\n\n{\n  undefined4 defaultSize;\n  int resultPtr;\n  uint oldSize;\n  \n  defaultSize = DAT_20000090;\n  if (sourcePtr != 0) {\n    if (newSize == 0) {\n      _free_r();\n      resultPtr = 0;\n    }\n    else {\n      oldSize = _malloc_usable_size_r();\n      resultPtr = sourcePtr;\n      if ((oldSize < newSize) && (resultPtr = _malloc_r(defaultSize,newSize), resultPtr != 0)) {\n        memcpy(resultPtr,sourcePtr,newSize);\n        _free_r(defaultSize,sourcePtr);\n      }\n    }\n    return resultPtr;\n  }\n  resultPtr = _malloc_r(DAT_20000090,newSize,newSize,&DAT_20000090);\n  return resultPtr;\n}\n\n",
            "renaming": {
                "FUN_08009908": "resize_and_copy_memory_08009908",
                "param_1": "sourcePtr",
                "param_2": "newSize",
                "uVar1": "defaultSize",
                "iVar2": "resultPtr",
                "uVar3": "oldSize"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c",
                "allocateRxBuffer"
            ],
            "called": [
                "memcpy",
                "_malloc_usable_size_r",
                "_malloc_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_08009918",
            "code": "\nvoid allocateMemory_08009918(int *outputPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000a38 = 0;\n  allocationResult = _sbrk(size);\n  if ((allocationResult == -1) && (DAT_20000a38 != 0)) {\n    *outputPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "strrchr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copyString_08009954(char *destination,char *source,int size)\n\n{\n  char currentChar;\n  int remainingSize;\n  char *destinationPtr;\n  \n  do {\n    destinationPtr = destination;\n    remainingSize = size;\n    if (remainingSize == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = destinationPtr + 1;\n    *destinationPtr = currentChar;\n    source = source + 1;\n    size = remainingSize + -1;\n  } while (currentChar != '\\0');\n  for (; destination != destinationPtr + remainingSize; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "cVar1": "currentChar",
                "iVar2": "remainingSize",
                "pcVar3": "destinationPtr"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int string,int character,undefined4 start_index,undefined4 end_index)\n\n{\n  int occurrence;\n  int last_occurrence;\n  \n  if (character != 0) {\n    last_occurrence = 0;\n    while (occurrence = strchr(string,character,start_index,string,end_index), occurrence != 0) {\n      string = occurrence + 1;\n      last_occurrence = occurrence;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = strchr();\n  return last_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "string",
                "param_2": "character",
                "param_3": "start_index",
                "param_4": "end_index",
                "iVar1": "occurrence",
                "iVar2": "last_occurrence"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "strchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * findSubstring_080099a4(char *string1,char *string2)\n\n{\n  char *currentChar1;\n  char *currentChar2;\n  char *nextChar2;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    currentChar1 = string1;\n    if (*currentChar1 == '\\0') {\n      return (char *)0x0;\n    }\n    nextChar2 = string2 + -1;\n    currentChar2 = currentChar1 + -1;\n    do {\n      nextChar2 = nextChar2 + 1;\n      if (*nextChar2 == '\\0') {\n        return currentChar1;\n      }\n      currentChar2 = currentChar2 + 1;\n      string1 = currentChar1 + 1;\n    } while (*currentChar2 == *nextChar2);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "currentChar1",
                "pcVar2": "currentChar2",
                "pcVar3": "nextChar2"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint processData_08009a80(undefined4 *output,undefined4 *input)\n\n{\n  int dataPtr;\n  uint result;\n  ushort flags;\n  \n  dataPtr = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    __sinit(DAT_20000090);\n  }\n  if (input == &DAT_0800aba4) {\n    input = *(undefined4 **)(dataPtr + 4);\n  }\n  else if (input == (undefined4 *)&DAT_0800abc4) {\n    input = *(undefined4 **)(dataPtr + 8);\n  }\n  else if (input == (undefined4 *)&DAT_0800ab84) {\n    input = *(undefined4 **)(dataPtr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          _free_r(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfputc_r"
            ],
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_data_08009b5c",
            "code": "\nvoid processData_08009b5c(void)\n\n{\n  uint *ptr;\n  int count;\n  int *ptrArray;\n  int *ptrArray2;\n  uint num;\n  ushort flag;\n  int temp;\n  code *funcPtr;\n  int offset;\n  uint value;\n  code *jumpTable;\n  bool isVar11;\n  undefined8 result;\n  \n  raise(6);\n  jumpTable = (code *)0x8009b6b;\n  result = _exit(1);\n  ptrArray = (int *)((ulonglong)result >> 0x20);\n  ptr = (uint *)result;\n  flag = *(ushort *)(ptrArray + 3);\n  num = (uint)flag;\n  if ((int)(num << 0x1c) < 0) {\n    count = ptrArray[4];\n    if (count != 0) {\n      temp = num << 0x1e;\n      isVar11 = temp != 0;\n      if (isVar11) {\n        temp = 0;\n      }\n      offset = *ptrArray;\n      if (!isVar11) {\n        temp = ptrArray[5];\n      }\n      *ptrArray = count;\n      ptrArray[2] = temp;\n      for (offset = offset - count; 0 < offset; offset = offset - temp) {\n        temp = (*(code *)ptrArray[10])(ptr,ptrArray[8],count,offset);\n        if (temp < 1) {\n          flag = *(ushort *)(ptrArray + 3);\n          goto LAB_08009c62;\n        }\n        count = count + temp;\n      }\n    }\n  }\n  else if (((0 < ptrArray[1]) || (0 < ptrArray[0x10])) &&\n          (funcPtr = (code *)ptrArray[0xb], funcPtr != (code *)0x0)) {\n    value = *ptr;\n    *ptr = 0;\n    if ((flag & 0x1000) == 0) {\n      count = (*funcPtr)(ptr,ptrArray[8],num & 0x1000,1);\n      if ((count == -1) && (num = *ptr, num != 0)) {\n        if ((num != 0x1d) && (num != 0x16)) {\n          *(ushort *)(ptrArray + 3) = *(ushort *)(ptrArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *ptr = value;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      count = ptrArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptrArray + 3) << 0x1d) < 0) &&\n       (count = count - ptrArray[1], ptrArray[0xd] != 0)) {\n      count = count - ptrArray[0x10];\n    }\n    count = (*(code *)ptrArray[0xb])(ptr,ptrArray[8],count,0);\n    flag = *(ushort *)(ptrArray + 3);\n    if ((count == -1) &&\n       ((0x1d < *ptr || (-1 < (int)((0x20400001U >> (*ptr & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(ptrArray + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    ptrArray[1] = 0;\n    *ptrArray = ptrArray[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((count != -1 || (*ptr == 0)))) {\n      ptrArray[0x15] = count;\n    }\n    ptrArray2 = (int *)ptrArray[0xd];\n    *ptr = value;\n    if (ptrArray2 != (int *)0x0) {\n      if (ptrArray2 != ptrArray + 0x11) {\n        _free_r(ptr);\n      }\n      ptrArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "puVar1": "ptr",
                "iVar2": "count",
                "piVar3": "ptrArray",
                "piVar4": "ptrArray2",
                "uVar5": "num",
                "uVar6": "flag",
                "iVar7": "temp",
                "pcVar8": "funcPtr",
                "iVar9": "offset",
                "uVar10": "value",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isVar11",
                "uVar12": "result"
            },
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "called": [
                "raise",
                "_exit",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 processData_08009c7c(uint *dataPointer,int *paramPointer)\n\n{\n  undefined4 returnValue;\n  int loopCounter;\n  int *ptrVariable;\n  uint ushortValue;\n  ushort ushortFlag;\n  int tempVar;\n  undefined4 unaffected_r4;\n  undefined4 unaffected_r5;\n  code *functionPointer;\n  int innerLoopCounter;\n  uint tempValue;\n  code *jumptable;\n  bool boolVariable;\n  \n  if (paramPointer[4] != 0) {\n    if ((dataPointer != (uint *)0x0) && (dataPointer[6] == 0)) {\n      __sinit();\n    }\n    if (paramPointer == &DAT_0800aba4) {\n      paramPointer = (int *)dataPointer[1];\n    }\n    else if (paramPointer == (int *)&DAT_0800abc4) {\n      paramPointer = (int *)dataPointer[2];\n    }\n    else if (paramPointer == (int *)&DAT_0800ab84) {\n      paramPointer = (int *)dataPointer[3];\n    }\n    if (*(short *)(paramPointer + 3) != 0) {\n      ushortFlag = *(ushort *)(paramPointer + 3);\n      ushortValue = (uint)ushortFlag;\n      if ((int)(ushortValue << 0x1c) < 0) {\n        loopCounter = paramPointer[4];\n        if (loopCounter != 0) {\n          tempVar = ushortValue << 0x1e;\n          boolVariable = tempVar != 0;\n          if (boolVariable) {\n            tempVar = 0;\n          }\n          innerLoopCounter = *paramPointer;\n          if (!boolVariable) {\n            tempVar = paramPointer[5];\n          }\n          *paramPointer = loopCounter;\n          paramPointer[2] = tempVar;\n          for (innerLoopCounter = innerLoopCounter - loopCounter; 0 < innerLoopCounter; innerLoopCounter = innerLoopCounter - tempVar) {\n            tempVar = (*(code *)paramPointer[10])(dataPointer,paramPointer[8],loopCounter,innerLoopCounter,unaffected_r4,unaffected_r5);\n            if (tempVar < 1) {\n              ushortFlag = *(ushort *)(paramPointer + 3);\n              goto LAB_08009c62;\n            }\n            loopCounter = loopCounter + tempVar;\n          }\n        }\n      }\n      else if (((0 < paramPointer[1]) || (0 < paramPointer[0x10])) &&\n              (functionPointer = (code *)paramPointer[0xb], functionPointer != (code *)0x0)) {\n        tempValue = *dataPointer;\n        *dataPointer = 0;\n        if ((ushortFlag & 0x1000) == 0) {\n          loopCounter = (*functionPointer)(dataPointer,paramPointer[8],ushortValue & 0x1000,1);\n          if ((loopCounter == -1) && (ushortValue = *dataPointer, ushortValue != 0)) {\n            if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n              *(ushort *)(paramPointer + 3) = *(ushort *)(paramPointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumptable)();\n              return returnValue;\n            }\n            *dataPointer = tempValue;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          loopCounter = paramPointer[0x15];\n        }\n        if (((int)((uint)*(ushort *)(paramPointer + 3) << 0x1d) < 0) &&\n           (loopCounter = loopCounter - paramPointer[1], paramPointer[0xd] != 0)) {\n          loopCounter = loopCounter - paramPointer[0x10];\n        }\n        loopCounter = (*(code *)paramPointer[0xb])(dataPointer,paramPointer[8],loopCounter,0);\n        ushortFlag = *(ushort *)(paramPointer + 3);\n        if ((loopCounter == -1) &&\n           ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(paramPointer + 3) = ushortFlag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumptable)(0xffffffff);\n          return returnValue;\n        }\n        paramPointer[1] = 0;\n        *paramPointer = paramPointer[4];\n        if (((int)((uint)ushortFlag << 0x13) < 0) && ((loopCounter != -1 || (*dataPointer == 0)))) {\n          paramPointer[0x15] = loopCounter;\n        }\n        ptrVariable = (int *)paramPointer[0xd];\n        *dataPointer = tempValue;\n        if (ptrVariable != (int *)0x0) {\n          if (ptrVariable != paramPointer + 0x11) {\n            _free_r(dataPointer);\n          }\n          paramPointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumptable)();\n          return returnValue;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumptable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "dataPointer",
                "param_2": "paramPointer",
                "uVar1": "returnValue",
                "iVar2": "loopCounter",
                "piVar3": "ptrVariable",
                "uVar4": "ushortValue",
                "uVar5": "ushortFlag",
                "iVar6": "tempVar",
                "unaff_r4": "unaffected_r4",
                "unaff_r5": "unaffected_r5",
                "pcVar7": "functionPointer",
                "iVar8": "innerLoopCounter",
                "uVar9": "tempValue",
                "UNRECOVERED_JUMPTABLE_00": "jumptable",
                "bVar10": "boolVariable"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_function_08009cdc",
            "code": "\nvoid initializeFunction_08009cdc(undefined4 *outputArray,undefined2 value_1,undefined2 value_2)\n\n{\n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  *(undefined2 *)(outputArray + 3) = value_1;\n  outputArray[0x19] = 0;\n  *(undefined2 *)((int)outputArray + 0xe) = value_2;\n  outputArray[4] = 0;\n  outputArray[5] = 0;\n  outputArray[6] = 0;\n  memset(outputArray + 0x17,0,8);\n  outputArray[8] = outputArray;\n  outputArray[9] = 0x800a021;\n  outputArray[10] = 0x800a043;\n  outputArray[0xb] = 0x800a07b;\n  outputArray[0xc] = &LAB_0800a09e_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_function_08009cdc",
                "param_1": "outputArray",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_memory_08009d24",
            "code": "\nundefined4 * allocateMemory_08009d24(undefined4 size,int count)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  ptr = (undefined4 *)_malloc_r(size,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = count;\n    ptr[2] = ptr + 3;\n    memset(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initializeData_08009d50(undefined4 *dataArray)\n\n{\n  undefined4 result;\n  undefined4 *ptr;\n  \n  if (dataArray[6] == 0) {\n    dataArray[0x12] = 0;\n    dataArray[0x13] = 0;\n    dataArray[0x14] = 0;\n    ptr = &DAT_20000094;\n    dataArray[10] = label;\n    if (dataArray == &DAT_20000094) {\n      ptr = (undefined4 *)0x1;\n    }\n    if (dataArray == &DAT_20000094) {\n      dataArray[6] = ptr;\n    }\n    result = getFloatValue();\n    dataArray[1] = result;\n    result = getFloatValue(dataArray);\n    dataArray[2] = result;\n    result = getFloatValue(dataArray);\n    dataArray[3] = result;\n    processData(dataArray[1],4,0);\n    processData(dataArray[2],9,1);\n    processData(dataArray[3],0x12,2);\n    dataArray[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "dataArray",
                "uVar1": "result",
                "puVar2": "ptr",
                "&LAB_08009cd0_1": "label",
                "__sfp": "getFloatValue",
                "std_isra_0": "processData"
            },
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__sfp",
                "iprintf",
                "__sfputc_r",
                "__swsetup_r"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_structures_08009db0",
            "code": "\nint * initializeDataStructures_08009db0(undefined4 *errorCode,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *ptr;\n  int *currentStructPtr;\n  int **structPtr;\n  \n  if (DAT_200000ac == 0) {\n    __sinit(&DAT_20000094);\n  }\n  structPtr = (int **)&DAT_200000dc;\n  do {\n    currentStructPtr = structPtr[2];\n    ptr = structPtr[1];\n    while (ptr = (int *)((int)ptr + -1), -1 < (int)ptr) {\n      if (*(short *)(currentStructPtr + 3) == 0) {\n        *(undefined2 *)((int)currentStructPtr + 0xe) = 0xffff;\n        currentStructPtr[0x19] = 0;\n        *(undefined2 *)(currentStructPtr + 3) = 1;\n        *currentStructPtr = 0;\n        currentStructPtr[2] = 0;\n        currentStructPtr[1] = 0;\n        currentStructPtr[4] = 0;\n        currentStructPtr[5] = 0;\n        currentStructPtr[6] = 0;\n        memset(currentStructPtr + 0x17,0,8,1,param4);\n        currentStructPtr[0xd] = 0;\n        currentStructPtr[0xe] = 0;\n        currentStructPtr[0x12] = 0;\n        currentStructPtr[0x13] = 0;\n        return currentStructPtr;\n      }\n      currentStructPtr = currentStructPtr + 0x1a;\n    }\n    if (*structPtr == (int *)0x0) {\n      ptr = (int *)__sfmoreglue(errorCode,4);\n      *structPtr = ptr;\n      if (ptr == (int *)0x0) {\n        *errorCode = 0xc;\n        return (int *)0x0;\n      }\n    }\n    structPtr = (int **)*structPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_structures_08009db0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "ptr",
                "piVar2": "currentStructPtr",
                "ppiVar3": "structPtr"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sinit",
                "memset",
                "__sfmoreglue"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_file_permissions_08009e64",
            "code": "\nundefined4 checkFilePermissions_08009e64(undefined4 fileDescriptor,int fileInfo,undefined4 *permissionFlag,uint *isExecutable)\n\n{\n  int result;\n  undefined4 permissionValue;\n  undefined stackData [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileInfo + 0xe) < 0) ||\n     (result = _fstat_r(fileDescriptor,(int)*(short *)(fileInfo + 0xe),stackData), result < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileInfo + 0xc) << 0x18) < 0) {\n      permissionValue = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  permissionValue = 0x400;\nLAB_08009ea4:\n  *permissionFlag = permissionValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "param_3": "permissionFlag",
                "param_4": "isExecutable",
                "iVar1": "result",
                "uVar2": "permissionValue",
                "auStack_4c": "stackData",
                "local_48": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "decode_and_allocate_memory_08009eac",
            "code": "\nvoid decode_and_allocate_memory_08009eac(int param_pointer,int *output_array)\n\n{\n  ushort buffer_size;\n  int allocated_memory;\n  int param_size;\n  int *temp_array;\n  \n  if (-1 < (int)((uint)*(ushort *)(output_array + 3) << 0x1e)) {\n    param_size = param_pointer;\n    temp_array = output_array;\n    buffer_size = __swhatbuf_r(param_pointer,output_array,&param_size,&temp_array);\n    allocated_memory = _malloc_r(param_pointer,param_size);\n    if (allocated_memory != 0) {\n      *(undefined **)(param_pointer + 0x28) = &LAB_08009cd0_1;\n      *output_array = allocated_memory;\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x80;\n      output_array[4] = allocated_memory;\n      output_array[5] = param_size;\n      if ((temp_array != (int *)0x0) &&\n         (allocated_memory = _isatty_r(param_pointer,(int)*(short *)((int)output_array + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output_array + 3) = buffer_size | *(ushort *)(output_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xfffc | 2;\n  }\n  *output_array = (int)output_array + 0x47;\n  output_array[4] = (int)output_array + 0x47;\n  output_array[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "decode_and_allocate_memory_08009eac",
                "param_1": "param_pointer",
                "param_2": "output_array",
                "uVar1": "buffer_size",
                "iVar2": "allocated_memory",
                "local_18": "param_size",
                "local_14": "temp_array"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "__swhatbuf_r",
                "_malloc_r",
                "_isatty_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_08009f2c",
            "code": "\nchar * find_character_08009f2c(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "reverse_kill_process_08009fe8",
            "code": "\nint reverseKillProcess_08009fe8(uint processId)\n\n{\n  int *returnValue;\n  undefined4 pid;\n  int value;\n  code *functionPtr;\n  undefined4 argument1;\n  undefined4 argument2;\n  undefined4 internalRegister;\n  undefined4 *pointer;\n  \n  returnValue = DAT_20000090;\n  pointer = &DAT_20000090;\n  if (0x1f < processId) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  value = DAT_20000090[0x11];\n  if ((value != 0) && (functionPtr = *(code **)(value + processId * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + processId * 4) = 0;\n      (*functionPtr)(processId);\n    }\n    return 0;\n  }\n  pid = _getpid_r(DAT_20000090);\n  DAT_20000a38 = 0;\n  value = _kill(pid,processId,processId,0,pointer,argument1,argument2,internalRegister);\n  if ((value == -1) && (DAT_20000a38 != 0)) {\n    *returnValue = DAT_20000a38;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "reverse_kill_process_08009fe8",
                "param_1": "processId",
                "piVar1": "returnValue",
                "uVar2": "pid",
                "iVar3": "value",
                "pcVar4": "functionPtr",
                "puVar5": "pointer",
                "unaff_r4": "argument1",
                "unaff_r5": "argument2",
                "in_lr": "internalRegister"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a01c": {
            "entrypoint": "0x0800a01c",
            "current_name": "FUN_0800a01c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid updateData_0800a020(undefined4 fileDescriptor,int dataAddress)\n\n{\n  int readResult;\n  uint newData;\n  bool isSuccessfulRead;\n  \n  readResult = _read_r(fileDescriptor,(int)*(short *)(dataAddress + 0xe));\n  isSuccessfulRead = -1 < readResult;\n  if (isSuccessfulRead) {\n    newData = *(int *)(dataAddress + 0x54) + readResult;\n  }\n  else {\n    newData = *(ushort *)(dataAddress + 0xc) & 0xffffefff;\n  }\n  if (isSuccessfulRead) {\n    *(uint *)(dataAddress + 0x54) = newData;\n  }\n  if (!isSuccessfulRead) {\n    *(short *)(dataAddress + 0xc) = (short)newData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "fileDescriptor",
                "param_2": "dataAddress",
                "iVar1": "readResult",
                "uVar2": "newData",
                "bVar3": "isSuccessfulRead"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "write_to_file_0800a042",
            "code": "\nvoid write_to_file_0800a042(int *file_descriptor,int buffer,undefined4 data,undefined4 size)\n\n{\n  int write_result;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  \n  if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(buffer + 0xe),0,2);\n  }\n  *(ushort *)(buffer + 0xc) = *(ushort *)(buffer + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  write_result = _write((int)*(short *)(buffer + 0xe),data,size,size,size,unused_var1,unused_var2,\n                 unused_var3);\n  if ((write_result == -1) && (DAT_20000a38 != 0)) {\n    *file_descriptor = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "write_to_file_0800a042",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "write_result",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "in_lr": "unused_var3"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_file_position_0800a07a",
            "code": "\nvoid updateFilePosition_0800a07a(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  int seekResult;\n  ushort newFlags;\n  bool isSeekError;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  isSeekError = seekResult == -1;\n  if (isSeekError) {\n    newFlags = *(ushort *)(bufferAddress + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(bufferAddress + 0x54) = seekResult;\n    newFlags = *(ushort *)(bufferAddress + 0xc) | 0x1000;\n  }\n  if (isSeekError) {\n    *(ushort *)(bufferAddress + 0xc) = newFlags;\n  }\n  if (!isSeekError) {\n    *(ushort *)(bufferAddress + 0xc) = newFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_file_position_0800a07a",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "iVar1": "seekResult",
                "uVar2": "newFlags",
                "bVar3": "isSeekError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "check_and_assign_stat_0800a0ec",
            "code": "\nvoid checkAndAssignStat_0800a0ec(int *resultPointer,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 bufferSize)\n\n{\n  int statReturnValue;\n  \n  DAT_20000a38 = 0;\n  statReturnValue = _fstat(fileDescriptor,statBuffer,statBuffer,0,bufferSize);\n  if ((statReturnValue == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "check_and_assign_stat_0800a0ec",
                "param_1": "resultPointer",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "bufferSize",
                "iVar1": "statReturnValue"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "check_and_assign_tty_0800a110",
            "code": "\nvoid checkAndAssignTTY_0800a110(int *result,undefined4 fileDescriptor)\n\n{\n  int isTTY;\n  \n  DAT_20000a38 = 0;\n  isTTY = _isatty(fileDescriptor);\n  if ((isTTY == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "check_and_assign_tty_0800a110",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "iVar1": "isTTY"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "set_file_pointer_if_error_0800a130",
            "code": "\nvoid setFilePointerIfError_0800a130(int *result,undefined4 fileHandle,undefined4 distanceToMove,undefined4 moveMethod)\n\n{\n  int seekResult;\n  \n  DAT_20000a38 = 0;\n  seekResult = _lseek(fileHandle,distanceToMove,moveMethod,moveMethod,moveMethod);\n  if ((seekResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "set_file_pointer_if_error_0800a130",
                "param_1": "result",
                "param_2": "fileHandle",
                "param_3": "distanceToMove",
                "param_4": "moveMethod",
                "iVar1": "seekResult"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_new_value_0800a154",
            "code": "\nint calculateNewValue_0800a154(undefined4 inputValue,int arrayIndex)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(arrayIndex + -4) + -4;\n  if (*(int *)(arrayIndex + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(arrayIndex + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_new_value_0800a154",
                "param_1": "inputValue",
                "param_2": "arrayIndex",
                "iVar1": "currentIndex"
            },
            "calling": [
                "realloc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "read_and_assign_value_0800a168",
            "code": "\nvoid readAndAssignValue_0800a168(int *output,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20000a38 = 0;\n  readResult = _read(fileDescriptor,buffer,count,count,count);\n  if ((readResult == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "read_and_assign_value_0800a168",
                "param_1": "output",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "abort_if_negative_0800a18c",
            "code": "\nvoid abort_if_negative_0800a18c(void)\n\n{\n  code *jump_table;\n  \n  jump_table = abort_if_negative_0800a18c;\n  abort();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "abort_if_negative_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 207964,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08000588",
            "FUN_080005e0",
            "FUN_08000aec",
            "FUN_08000ef8",
            "FUN_08002400",
            "FUN_0800242c",
            "FUN_08002578",
            "FUN_08002580",
            "FUN_080025ac",
            "FUN_08002644",
            "FUN_0800267c",
            "FUN_080026b0",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_0800291c",
            "FUN_08002948",
            "FUN_08002968",
            "FUN_08002a30",
            "FUN_08002a58",
            "FUN_08002acc",
            "FUN_08002c2c",
            "FUN_08002dbc",
            "FUN_08002ddc",
            "FUN_08002df6",
            "FUN_08002e44",
            "FUN_08002ec4",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08002f14",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_08002fca",
            "FUN_08003002",
            "FUN_0800307a",
            "FUN_08003106",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_08003158",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800322c",
            "FUN_0800325a",
            "FUN_080032a2",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_080033cc",
            "FUN_0800344a",
            "FUN_08003474",
            "FUN_080035b8",
            "FUN_08003658",
            "FUN_080036a2",
            "FUN_080036ac",
            "FUN_080036d8",
            "FUN_08003724",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_0800376c",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003a20",
            "FUN_08003aa0",
            "FUN_08003b8c",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_08003e20",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_080042f0",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_080045c0",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_08004f3c",
            "FUN_08005084",
            "FUN_08005188",
            "FUN_080052f0",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005460",
            "FUN_08005840",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005a1c",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005a68",
            "FUN_08005aa4",
            "FUN_08005bb8",
            "FUN_08005cb4",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08005fe8",
            "FUN_08006060",
            "FUN_08006092",
            "FUN_080060c4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006262",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_08006420",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_08006538",
            "FUN_080066e8",
            "FUN_0800674e",
            "FUN_080067ac",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_080069ec",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006ca8",
            "FUN_08006d24",
            "FUN_08006d80",
            "FUN_08006e68",
            "FUN_08007110",
            "FUN_08007118",
            "FUN_080071e4",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_080072fa",
            "FUN_08007306",
            "FUN_08007320",
            "FUN_08007332",
            "FUN_0800734a",
            "FUN_0800735a",
            "FUN_08007376",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080075dc",
            "FUN_08007648",
            "FUN_080076e0",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_08007718",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_080077b0",
            "FUN_08007e74",
            "FUN_08007ede",
            "FUN_08007f0e",
            "FUN_08007f78",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_08008078",
            "FUN_080084b0",
            "FUN_08008500",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008694",
            "FUN_080086e8",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_0800885c",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008880",
            "FUN_080088e0",
            "FUN_08008990",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008afa",
            "FUN_08008b66",
            "FUN_08008c20",
            "FUN_08008c44",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008d30",
            "FUN_08008d8c",
            "FUN_08008df8",
            "FUN_08008e14",
            "FUN_08008ef4",
            "FUN_08008f1c",
            "FUN_08008f3c",
            "FUN_08008f78",
            "FUN_08009094",
            "FUN_080090c2",
            "FUN_080090cc",
            "FUN_08009108",
            "FUN_08009124",
            "FUN_08009148",
            "FUN_08009190",
            "FUN_080091a0",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_08009270",
            "FUN_0800932c",
            "FUN_08009358",
            "FUN_0800937c",
            "FUN_080095a8",
            "FUN_08009698",
            "FUN_080098d8",
            "FUN_08009908",
            "FUN_08009918",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_0800997e",
            "FUN_080099a4",
            "FUN_08009a80",
            "FUN_08009b5c",
            "FUN_08009c7c",
            "FUN_08009cdc",
            "FUN_08009d24",
            "FUN_08009d50",
            "FUN_08009db0",
            "FUN_08009e64",
            "FUN_08009eac",
            "FUN_08009f2c",
            "FUN_08009fe8",
            "FUN_0800a020",
            "FUN_0800a042",
            "FUN_0800a07a",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a154",
            "FUN_0800a168"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000488",
            "FUN_080005f8",
            "FUN_08000be8",
            "FUN_08001bf8",
            "FUN_08001c08",
            "FUN_08001c18",
            "FUN_08001cd0",
            "FUN_080022f8",
            "FUN_08002634",
            "FUN_08002a1c",
            "FUN_08002ac0",
            "FUN_08002b68",
            "FUN_08002c1e",
            "FUN_08002ce0",
            "FUN_08002e26",
            "FUN_08008f0e"
        ],
        [
            "FUN_08000500",
            "FUN_08002a26",
            "FUN_08002c00",
            "FUN_08003048"
        ],
        [
            "FUN_08000a64",
            "FUN_08001b48",
            "FUN_08002c14"
        ],
        [
            "FUN_08009084",
            "FUN_0800a18c"
        ]
    ],
    "locked_functions": []
}