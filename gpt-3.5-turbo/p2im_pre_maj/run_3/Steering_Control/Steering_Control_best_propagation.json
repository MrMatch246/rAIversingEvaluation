{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "update_map_values_00080164",
            "code": "\nvoid updateMapValues_00080164(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  update_map_values_000806f8(&DAT_200708e8,0x5a);\n  update_map_values_000806f8(&DAT_200708d4,0x5a,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "update_map_values_00080164",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "setup",
                "loop"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_device_000801e0",
            "code": "\nundefined8 initializeDevice_000801e0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initializePeripheral(&DAT_20070be8,0xe100,param3,param4,param4);\n  setPinMode(0xd,1);\n  setPinMode(6,1);\n  setPinMode(0x39,0);\n  setPinMode(4,0);\n  setPinMode(3,0);\n  setPinMode(2,0);\n  attach(&DAT_200708d4,5);\n  attach(&DAT_200708e8,6);\n  moveInStraightLineAndStop();\n  delayExecution(1000);\n  if (DAT_200708bc == 0) {\n    triggerSoftwareInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_device_000801e0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_peripheral_000813dc": "initializePeripheral",
                "pinMode": "setPinMode",
                "straightAndStop": "moveInStraightLineAndStop",
                "delay": "delayExecution",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "main"
            ],
            "called": [
                "pinMode",
                "attach",
                "straightAndStop",
                "delay",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "process_control_signals_00080250",
            "code": "\nvoid processControlSignals_00080250(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined *puVar3;\n  undefined inputBuffer [12];\n  \n  DAT_200708c0 = readPulse(4,1,20000);\n  wait(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  outputSignal(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        stopMoving();\n        calculateChecksum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      wait(10);\n      uVar1 = readPulse(3,1,20000);\n      DAT_200708d8 = mapToRange(0,1000,2000,0x28,0x96);\n      DAT_200708ec = mapToRange(uVar1,1000,2000,0x28,0x96);\n      while (iVar2 = bufferAvailable(&DAT_20070be8), 0 < iVar2) {\n        readControlSignal(&DAT_20070be8);\n        printValue(&DAT_20070be8,DAT_200708d8,10);\n        initializeProcessor(&DAT_20070be8,&DAT_00084b13);\n        printValueNewLine(&DAT_20070be8,DAT_200708ec,10);\n      }\n      updateMapValues(&DAT_200708e8,DAT_200708ec);\n      updateMapValues(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        stopMoving();\n        calculateChecksum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      iVar2 = bufferAvailable(&DAT_20070be8);\n      if (0 < iVar2) {\n        readStringUntilDelimiter(inputBuffer,&DAT_20070be8,0x2c);\n        assignValue(&DAT_200708dc,inputBuffer);\n        destroyString(inputBuffer);\n        readStringUntilDelimiter(inputBuffer,&DAT_20070be8,10);\n        assignValue(&DAT_200708c8,inputBuffer);\n        destroyString(inputBuffer);\n        readControlSignal(&DAT_20070be8);\n        iVar2 = compareStrings(&DAT_200708dc,\"steer\");\n        if (iVar2 == 0) goto LAB_0008039c;\n        uVar1 = convertToInt(&DAT_200708c8);\n        puVar3 = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    stopMoving();\n    calculateChecksum(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  iVar2 = compareStrings(&DAT_200708dc,\"motor\");\n  if (iVar2 != 0) {\n    uVar1 = convertToInt(&DAT_200708c8);\n    puVar3 = &DAT_200708e8;\nLAB_000803b2:\n    updateMapValues(puVar3,uVar1);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "process_control_signals_00080250",
                "auStack_1c": "inputBuffer",
                "pulseIn": "readPulse",
                "delay": "wait",
                "digitalWrite": "outputSignal",
                "straightAndStop": "stopMoving",
                "calculate_string_sum_000810e8": "calculateChecksum",
                "map": "mapToRange",
                "available": "bufferAvailable",
                "read": "readControlSignal",
                "print": "printValue",
                "initialize_processor_000810c4": "initializeProcessor",
                "println": "printValueNewLine",
                "update_map_values_000806f8": "updateMapValues",
                "readStringUntil": "readStringUntilDelimiter",
                "operator=": "assignValue",
                "~String": "destroyString",
                "equals": "compareStrings",
                "toInt": "convertToInt"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "FUN_000806f8",
                "~String",
                "delay",
                "FUN_000810c4",
                "operator=",
                "pulseIn",
                "read",
                "toInt",
                "map",
                "print",
                "readStringUntil",
                "straightAndStop",
                "available",
                "FUN_000810e8",
                "equals",
                "println"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "configure_timer_000803fc",
            "code": "\nvoid configureTimer_000803fc(int baseAddress,uint channel,undefined4 clockIndex,uint bitPosition)\n\n{\n  undefined4 unused;\n  undefined4 unused;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(channel,baseAddress);\n  pmc_enable_periph_clk(clockIndex);\n  TC_Configure(baseAddress,channel,0xc002);\n  TC_SetRA(baseAddress,channel,0xa41);\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  *(undefined4 *)(baseAddress + channel * 0x40 + 0x24) = 4;\n  if (2 < channel) {\n    combinedParams = __assert_func(\"../source/tc.c\",0x5c,\"TC_Start\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                          unused,unused);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "configure_timer_000803fc",
                "param_1": "baseAddress",
                "param_2": "channel",
                "param_3": "clockIndex",
                "param_4": "bitPosition",
                "unaff_r4": "unused",
                "in_lr": "unused",
                "uVar1": "combinedParams"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "__assert_func",
                "TC_Configure",
                "TC_SetRA"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid updateData_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int offsetIndex;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    offsetIndex = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + offsetIndex < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offsetIndex) * 8] << 0x19) < 0\n       )) {\n      digitalWrite((&DAT_200708f8)[(offsetIndex + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  offsetIndex = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + offsetIndex < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + offsetIndex) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offsetIndex) * 8] << 0x19\n                  )) {\n      return;\n    }\n    digitalWrite((&DAT_200708f8)[(offsetIndex + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit",
                "iVar2": "offsetIndex"
            },
            "calling": [],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_data_000805a8",
            "code": "\nvoid updateData_000805a8(byte *buffer)\n\n{\n  char nextValue;\n  uint index;\n  \n  index = (uint)DAT_200708f0;\n  if (index < 0x3c) {\n    nextValue = DAT_200708f0 + 1;\n    *buffer = DAT_200708f0;\n    DAT_200708f0 = nextValue;\n    *(uint *)(&DAT_200708fc + index * 8) =\n         (data[6].offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *buffer = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_data_000805a8",
                "param_1": "buffer",
                "cVar1": "nextValue",
                "uVar2": "index",
                "Elf32_Rel_ARRAY_20070000": "data",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "initialize_peripheral_000806a0",
            "code": "\nbyte initializePeripheral_000806a0(byte *inputBuffer,undefined4 peripheralAddress)\n\n{\n  byte originalSetting;\n  undefined4 baseAddress;\n  uint baseAddressOffset;\n  undefined4 interruptConfig;\n  int loopVariable;\n  uint bufferValue;\n  \n  if (0x3b < *inputBuffer) goto LAB_00080660;\n  pinMode(peripheralAddress,1,0x220,*inputBuffer,0x960);\n  bufferValue = (uint)*inputBuffer;\n  originalSetting = (&DAT_200708f8)[bufferValue * 8];\n  inputBuffer[2] = 0;\n  baseAddressOffset = bufferValue / 0xc;\n  (&DAT_200708f8)[bufferValue * 8] = originalSetting & 0xc0 | (byte)peripheralAddress & 0x3f;\n  inputBuffer[1] = 0;\n  loopVariable = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(loopVariable + baseAddressOffset * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    loopVariable = loopVariable + 1;\n  } while (loopVariable != 0xc);\n  if (baseAddressOffset == 0) {\n    baseAddress = 0x40084000;\n    interruptConfig = 0x1e;\nLAB_0008064c:\n    _initISR(baseAddress,baseAddressOffset,interruptConfig,interruptConfig);\n  }\n  else {\n    if (baseAddressOffset == 1) {\n      baseAddress = 0x40084000;\n      interruptConfig = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (baseAddressOffset == 2) {\n      baseAddress = 0x40084000;\n      interruptConfig = 0x20;\n      goto LAB_0008064c;\n    }\n    if (baseAddressOffset == 3) {\n      baseAddress = 0x40080000;\n      baseAddressOffset = 2;\n      interruptConfig = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (baseAddressOffset == 4) {\n      baseAddress = 0x40080000;\n      baseAddressOffset = 0;\n      interruptConfig = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*inputBuffer * 8] = (&DAT_200708f8)[(uint)*inputBuffer * 8] | 0x40;\nLAB_00080660:\n  return *inputBuffer;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "initialize_peripheral_000806a0",
                "param_1": "inputBuffer",
                "param_2": "peripheralAddress",
                "bVar1": "originalSetting",
                "uVar2": "baseAddress",
                "uVar3": "baseAddressOffset",
                "uVar4": "interruptConfig",
                "iVar5": "loopVariable",
                "uVar6": "bufferValue"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "_initISR"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "update_map_values_000806f8",
            "code": "\nvoid updateMapValues_000806f8(byte *byteArray,uint length)\n\n{\n  uint updatedLength;\n  \n  if ((int)length < 0x220) {\n    updatedLength = length;\n    if (0xb3 < (int)length) {\n      updatedLength = 0xb4;\n    }\n    length = adjustMapValues(updatedLength & ~((int)updatedLength >> 0x1f),0,0xb4,(0x88 - (char)byteArray[1]) * 4,\n                  (600 - (char)byteArray[2]) * 4,length);\n  }\n  if (*byteArray < 0x3c) {\n    updatedLength = (0x88 - (char)byteArray[1]) * 4;\n    if (((int)(length + (0x88 - (char)byteArray[1]) * -4) < 0 == isSubtractionOverflow(length,updatedLength)) &&\n       (updatedLength = (600 - (char)byteArray[2]) * 4, (int)length <= (int)updatedLength)) {\n      updatedLength = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*byteArray * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * (updatedLength - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "update_map_values_000806f8",
                "param_1": "byteArray",
                "param_2": "length",
                "uVar1": "updatedLength",
                "map": "adjustMapValues",
                "SBORROW4": "isSubtractionOverflow"
            },
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "called": [
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int loopIndex;\n  int nextIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  loopIndex = 0;\n  do {\n    nextIndex = loopIndex + 1;\n    digitalWrite(loopIndex,0);\n    loopIndex = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(0x400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(0x400e0e00,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,0x3000,0);\n  PIO_Configure(0x400e1400,2,0x30,0);\n  PIO_Configure(0x400e1000,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,3,0);\n  PIO_Configure(0x400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  adc_disable_all_channel(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "loopIndex",
                "iVar2": "nextIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "adc_disable_all_channel",
                "adc_init",
                "adc_disable_interrupt",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_configure_timing",
                "__libc_init_array",
                "adc_configure_trigger",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_peripherals_0008089c",
            "code": "\nvoid initializePeripherals_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initializeRingBuffer(&DAT_20070c0c);\n  initializeRingBuffer(&DAT_20070b60);\n  initializeUARTClass(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initializeRingBuffer(&DAT_20070e6c);\n  initializeRingBuffer(&DAT_20070ef4);\n  initializeRingBuffer(&DAT_20070f7c);\n  initializeRingBuffer(&DAT_20070ad8);\n  initializeRingBuffer(&DAT_20070d0c);\n  initializeRingBuffer(&DAT_20070d94);\n  initializeUSARTClass(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initializeUSARTClass(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initializeUSARTClass(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_peripherals_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "RingBuffer": "initializeRingBuffer",
                "UARTClass": "initializeUARTClass",
                "USARTClass": "initializeUSARTClass"
            },
            "calling": [],
            "called": [
                "USARTClass",
                "UARTClass",
                "RingBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_serial_events_00080970",
            "code": "\nvoid checkSerialEvents_00080970(void)\n\n{\n  int result;\n  \n  result = available(&DAT_20070be8);\n  if (result != 0) {\n    serialEvent();\n  }\n  result = available(&DAT_20070c94);\n  if (result != 0) {\n    serialEvent1();\n  }\n  result = available(&DAT_20070cbc);\n  if (result != 0) {\n    serialEvent2();\n  }\n  result = available(&DAT_20070ce4);\n  if (result != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_serial_events_00080970",
                "iVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent3",
                "available",
                "serialEvent2",
                "serialEvent1",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_data_000809be",
            "code": "\nvoid updateData_000809be(int dataAddress,undefined4 actionType,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(dataAddress + 0x44) = newValue;\n  switch(actionType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(dataAddress + 0x70) & *(uint *)(dataAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(dataAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(dataAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(dataAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "dataAddress",
                "param_2": "actionType",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_param_array_000809e4",
            "code": "\nvoid updateParamArray_000809e4(undefined4 *paramArray,undefined4 newValue,uint bitFlags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(bitFlags << 0x1f) < 0;\n  paramArray[0x11] = newValue;\n  if (isNegative) {\n    paramArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[0x18] = newValue;\n  }\n  isNegative = (bitFlags & 10) != 0;\n  if (isNegative) {\n    paramArray[8] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[9] = newValue;\n  }\n  if (((int)(bitFlags << 0x1e) < 0) || ((int)(bitFlags << 0x1c) < 0)) {\n    paramArray[0x20] = newValue;\n  }\n  paramArray[5] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_param_array_000809e4",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "bitFlags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_parameters_00080a0a",
            "code": "\nvoid setParameters_00080a0a(undefined4 *output,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  output[0x11] = value;\n  if (condition3 == 0) {\n    output[0x18] = value;\n  }\n  else {\n    output[0x19] = value;\n  }\n  if (condition2 == 0) {\n    output[0x15] = value;\n  }\n  else {\n    output[0x14] = value;\n  }\n  if (condition1 == 0) {\n    output[0xd] = value;\n  }\n  else {\n    output[0xc] = value;\n  }\n  output[4] = value;\n  *output = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "output",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "configure_peripheral_00080a30",
            "code": "\nundefined4 configurePeripheral_00080a30(int deviceAddress,int peripheralType,undefined4 peripheralConfig,uint peripheralValue)\n\n{\n  bool isNegative;\n  \n  switch(peripheralType) {\n  case 1:\n  case 2:\n    setPeripheral(deviceAddress,peripheralType,peripheralConfig);\n    isNegative = (int)(peripheralValue << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = peripheralConfig;\n    if (isNegative) {\n      *(undefined4 *)(deviceAddress + 100) = peripheralConfig;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(deviceAddress + 0x60) = peripheralConfig;\n    }\n    break;\n  case 3:\n    setInput(deviceAddress,peripheralConfig,peripheralValue,0x809e5,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    setOutput(deviceAddress,peripheralConfig,peripheralType == 5,(peripheralValue << 0x1d) >> 0x1f,peripheralValue & 1,peripheralType,peripheralConfig\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "configure_peripheral_00080a30",
                "param_1": "deviceAddress",
                "param_2": "peripheralType",
                "param_3": "peripheralConfig",
                "param_4": "peripheralValue",
                "bVar1": "isNegative",
                "PIO_SetPeripheral": "setPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "pinMode",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_intersection_00080a94",
            "code": "\nuint check_intersection_00080a94(int object_offset,uint collision_mask)\n\n{\n  uint collision_result;\n  \n  collision_result = *(uint *)(object_offset + 8) & collision_mask;\n  if (collision_result != 0) {\n    if ((collision_mask & *(uint *)(object_offset + 0x18)) == 0) {\n      collision_result = 0;\n    }\n    else {\n      collision_result = 1;\n    }\n  }\n  return collision_result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_intersection_00080a94",
                "param_1": "object_offset",
                "param_2": "collision_mask",
                "uVar1": "collision_result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080aa8(uint bitPosition)\n\n{\n  uint bitMask;\n  \n  if (bitPosition < 0x2d) {\n    if (bitPosition < 0x20) {\n      bitMask = 1 << (bitPosition & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (bitPosition - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_00080aa8",
                "param_1": "bitPosition",
                "uVar1": "bitMask"
            },
            "calling": [
                "pinMode",
                "_initISR",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_transmission_channel_00080b2c",
            "code": "\nvoid configureTransmissionChannel_00080b2c(undefined4 param1,uint param2,char *channelName)\n\n{\n  int channelIndexOffset;\n  int channelIndex;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    channelName = \"TC_Configure\";\n    combinedParams = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  channelIndexOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelIndex = (int)combinedParams + channelIndexOffset;\n  *(undefined4 *)((int)combinedParams + channelIndexOffset) = 2;\n  *(undefined4 *)(channelIndex + 0x28) = 0xffffffff;\n  *(char **)(channelIndex + 4) = channelName;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_transmission_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "channelName",
                "iVar1": "channelIndexOffset",
                "iVar2": "channelIndex",
                "uVar3": "combinedParams"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid setParamValue_00080b90(int baseAddress,int index,undefined4 newValue)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "newValue"
            },
            "calling": [
                "_initISR"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationTable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "initialize_elf_table_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid initializeElfTable_00080c20(void)\n\n{\n  int index;\n  undefined4 *currentPointer;\n  \n  for (index = 0; (undefined4 *)((int)elfTableEntry + index) < &DAT_200708a0\n      ; index = index + 4) {\n    *(undefined4 *)((int)elfTableEntry + index) =\n         *(undefined4 *)(&DAT_00085878 + index);\n  }\n  for (currentPointer = &DAT_200708a0; currentPointer < (undefined4 *)0x20071248; currentPointer = currentPointer + 1) {\n    *currentPointer = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "initialize_elf_table_00080c20",
                "iVar1": "index",
                "puVar2": "currentPointer",
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": "elfTableEntry"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *output,uint inputSize,int thresholdMultiplier,int timeMultiplier)\n\n{\n  uint threshold;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  threshold = inputSize / (uint)(thresholdMultiplier * 2);\n  if (inputSize == thresholdMultiplier * 2 * threshold) {\n    threshold = threshold - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(timeMultiplier * (int)(((ulonglong)inputSize / (ulonglong)((threshold + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output[1] = (index & 0xf) << 0x10 | (threshold & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "thresholdMultiplier",
                "param_4": "timeMultiplier",
                "uVar1": "threshold",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_param_00080d30",
            "code": "\nvoid updateParam_00080d30(int inputBuffer,uint newValue,uint flag)\n\n{\n  *(uint *)(inputBuffer + 4) = newValue | *(uint *)(inputBuffer + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_param_00080d30",
                "param_1": "inputBuffer",
                "param_2": "newValue",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_configuration_00080d3e",
            "code": "\nvoid updateConfiguration_00080d3e(int configPtr,uint paramA,uint paramB,uint paramC)\n\n{\n  *(uint *)(configPtr + 4) =\n       paramB | *(uint *)(configPtr + 4) | (paramA & 0xf) << 0x18 | (paramC & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_configuration_00080d3e",
                "param_1": "configPtr",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_value_00080d58",
            "code": "\nvoid setBitValue_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_value_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_value_00080d62",
            "code": "\nvoid initializeValue_00080d62(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_value_00080d62",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "get_return_value_00080e80",
            "code": "\nundefined4 getReturnValue_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "get_return_value_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "sum_values_00080e88",
            "code": "\nint sumValues_00080e88(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = inputValue + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "sum_values_00080e88",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_default_value_00080eaa",
            "code": "\nundefined4 get_default_value_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_default_value_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_memory_to2000_00080eb0",
            "code": "\nundefined4 setMemoryTo2000_00080eb0(undefined4 arg1,int arg2)\n\n{\n  *(undefined4 *)(arg2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_memory_to2000_00080eb0",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "is_one_00080eba",
            "code": "\nundefined4 is_one_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "is_one_00080eba"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_default_value_00080ebe",
            "code": "\nundefined4 getDefaultValue_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_default_value_00080ebe"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_application_00080ec2",
            "code": "\nundefined4 initializeApplication_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_application_00080ec2"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param_1,int src_pointer,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(src_pointer + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_2": "src_pointer",
                "param_3": "num_bytes",
                "iVar1": "index"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 unused1,undefined4 unused2,undefined4 unused3)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status,unused2,unused3,unused3);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_message_00080efe",
            "code": "\nundefined4 getErrorMessage_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_message_00080efe"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "FUN_00080f04",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {},
            "calling": [
                "timedRead"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "setup",
                "loop",
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "configure_pin_00080f0c",
            "code": "\n\n\nint configurePin_00080f0c(int pinIndex,int mode)\n\n{\n  int result;\n  uint portIndex;\n  undefined4 configType;\n  uint mask;\n  byte lowerNibble;\n  byte value;\n  int offset;\n  int pinConfig;\n  \n  result = pinIndex;\n  if ((&DAT_00084b50)[pinIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pinIndex] & 0xf) == 4) {\n      result = adc_disable_channel(0x400c0000,(&DAT_00084b5d)[pinIndex * 0x1c]);\n    }\n    value = (&DAT_20070e1c)[pinIndex];\n    lowerNibble = value & 0xf;\n    if ((lowerNibble < 3) && (value != 0)) {\n      if (lowerNibble == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = pinIndex * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084b4c + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),0);\n        value = (&DAT_20070e1c)[pinIndex] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = pinIndex * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084b4c + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),1);\n        value = (&DAT_20070e1c)[pinIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[pinIndex] = value;\n      return result;\n    }\n    offset = pinIndex * 0x1c;\n    pinConfig = *(int *)(&DAT_00084b44 + offset);\n    if (value >> 4 == 0) {\n      configType = 4;\n    }\n    else {\n      configType = 5;\n    }\n    result = PIO_Configure(pinConfig,configType,*(undefined4 *)(&DAT_00084b48 + offset),\n                          *(undefined4 *)(&DAT_00084b54 + offset));\n    (&DAT_20070e1c)[pinIndex] = (&DAT_20070e1c)[pinIndex] & 0xf0 | 3;\n    if (*(int *)(pinConfig + 0x18) == -1) {\n      portIndex = *(uint *)(&DAT_00084b4c + offset);\n      if (0x2c < portIndex) {\n        return 1;\n      }\n      if (portIndex < 0x20) {\n        portIndex = 1 << (portIndex & 0xff);\n        mask = _DAT_400e0618 & portIndex;\n        if (mask == portIndex) {\n          _DAT_400e0614 = mask;\n        }\n      }\n      else {\n        portIndex = 1 << (portIndex - 0x20 & 0xff);\n        mask = _DAT_400e0708 & portIndex;\n        if (mask == portIndex) {\n          _DAT_400e0704 = mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "configure_pin_00080f0c",
                "param_1": "pinIndex",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "portIndex",
                "uVar3": "configType",
                "uVar4": "mask",
                "bVar5": "lowerNibble",
                "bVar6": "value",
                "iVar7": "offset",
                "iVar8": "pinConfig"
            },
            "calling": [
                "attach",
                "digitalWrite",
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "configure_pin_00081014",
            "code": "\nvoid configurePin_00081014(int pinNumber,int value,undefined4 parameter)\n\n{\n  int status;\n  undefined4 outputData;\n  int pinData;\n  \n  if ((&DAT_00084b50)[pinNumber * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pinNumber] & 0xf) == 5) {\n      setPinMode(pinNumber,1,parameter,5,pinNumber,value,parameter);\n    }\n    (&DAT_20070e1c)[pinNumber] = (&DAT_20070e1c)[pinNumber] & 0xf | (byte)(value << 4);\n    pinData = *(int *)(&DAT_00084b44 + pinNumber * 0x1c);\n    outputData = *(undefined4 *)(&DAT_00084b48 + pinNumber * 0x1c);\n    status = getPinOutputStatus(pinData,outputData);\n    if (status == 0) {\n      if (value != 0) {\n        *(undefined4 *)(pinData + 100) = outputData;\n        return;\n      }\n      *(undefined4 *)(pinData + 0x60) = outputData;\n      return;\n    }\n    setPinOutput(pinData,outputData,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "configure_pin_00081014",
                "param_1": "pinNumber",
                "param_2": "value",
                "param_3": "parameter",
                "iVar1": "status",
                "uVar2": "outputData",
                "iVar3": "pinData",
                "pinMode": "setPinMode",
                "PIO_GetOutputDataStatus": "getPinOutputStatus",
                "PIO_SetOutput": "setPinOutput"
            },
            "calling": [
                "Servo_Handler",
                "loop",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "pinMode",
                "PIO_GetOutputDataStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_string_000810a6",
            "code": "\nvoid processString_000810a6(int *stringPointer,int inputString,undefined4 sizeParam,undefined4 additionalParam)\n\n{\n  undefined4 stringLength;\n  \n  if (inputString != 0) {\n    stringLength = strlen(inputString);\n    (**(code **)(*stringPointer + 4))(stringPointer,inputString,stringLength,*(code **)(*stringPointer + 4),additionalParam);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_string_000810a6",
                "param_1": "stringPointer",
                "param_2": "inputString",
                "param_3": "sizeParam",
                "param_4": "additionalParam",
                "uVar1": "stringLength"
            },
            "calling": [
                "FUN_000810d8",
                "printNumber",
                "FUN_000810c4",
                "FUN_000810e8"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "initialize_processor_000810c4",
            "code": "\nvoid initializeProcessor_000810c4(void)\n\n{\n  processString();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "initialize_processor_000810c4",
                "process_string_000810a6": "processString"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_first_function_000810cc",
            "code": "\nvoid executeFirstFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_first_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_and_print_string_000810d8",
            "code": "\nvoid process_and_print_string_000810d8(undefined4 input_string,undefined4 ignored_param,undefined4 start_index,undefined4 end_index)\n\n{\n  process_string_000810a6(input_string,&DAT_00085635,start_index,end_index,end_index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_and_print_string_000810d8",
                "param_1": "input_string",
                "param_2": "ignored_param",
                "param_3": "start_index",
                "param_4": "end_index"
            },
            "calling": [
                "FUN_000810e8",
                "println"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_string_sum_000810e8",
            "code": "\nint calculateStringSum_000810e8(undefined4 inputString)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_string_000810a6();\n  result2 = process_and_print_string_000810d8(inputString);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_string_sum_000810e8",
                "param_1": "inputString",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_number_to_base_string_000810fc",
            "code": "\nvoid convertNumberToBaseString_000810fc(undefined4 convertedString,uint numberToConvert,uint base)\n\n{\n  char *currentChar;\n  uint quotient;\n  char *ptrChar;\n  char convertedDigit;\n  uint remainder;\n  char convertedDigits [5];\n  \n  convertedDigits[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  currentChar = convertedDigits;\n  do {\n    ptrChar = currentChar;\n    quotient = numberToConvert / base;\n    remainder = numberToConvert - base * quotient & 0xff;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *ptrChar = convertedDigit;\n    numberToConvert = quotient;\n    currentChar = ptrChar + -1;\n  } while (quotient != 0);\n  process_string_000810a6(convertedString,ptrChar);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_number_to_base_string_000810fc",
                "param_1": "convertedString",
                "param_2": "numberToConvert",
                "param_3": "base",
                "pcVar1": "currentChar",
                "uVar2": "quotient",
                "pcVar3": "ptrChar",
                "cVar4": "convertedDigit",
                "uVar5": "remainder",
                "local_15": "convertedDigits"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_formatted_number_0008113a",
            "code": "\nint printFormattedNumber_0008113a(undefined4 *functionTable,uint number,uint base,undefined4 formatOptions)\n\n{\n  int firstFunctionResult;\n  int printNumberResult;\n  \n  if (base == 0) {\n    firstFunctionResult = (**(code **)*functionTable)(functionTable,number & 0xff);\n    return firstFunctionResult;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      firstFunctionResult = execute_first_function_000810cc(functionTable,0x2d);\n      printNumberResult = printNumber(functionTable,-number,10);\n      return printNumberResult + firstFunctionResult;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  firstFunctionResult = printNumber(functionTable,number,base,formatOptions);\n  return firstFunctionResult;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_formatted_number_0008113a",
                "param_1": "functionTable",
                "param_2": "number",
                "param_3": "base",
                "param_4": "formatOptions",
                "iVar1": "firstFunctionResult",
                "iVar2": "printNumberResult"
            },
            "calling": [
                "print",
                "println"
            ],
            "called": [
                "printNumber",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "FUN_00081176",
            "code": "\nint thunk_print_formatted_number_0008113a(undefined4 *param_1,uint param_2,uint param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_3 == 0) {\n    iVar1 = (**(code **)*param_1)(param_1,param_2 & 0xff);\n    return iVar1;\n  }\n  if (param_3 == 10) {\n    param_3 = 10;\n    if ((int)param_2 < 0) {\n      iVar1 = execute_first_function_000810cc(param_1,0x2d);\n      iVar2 = printNumber(param_1,-param_2,10);\n      return iVar2 + iVar1;\n    }\n  }\n  else {\n    param_3 = param_3 & 0xff;\n  }\n  iVar1 = printNumber(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_total_0008117a",
            "code": "\nint calculate_total_0008117a(undefined4 input_value)\n\n{\n  int formatted_number;\n  int processed_string;\n  \n  formatted_number = print_formatted_number_0008113a();\n  processed_string = process_and_print_string_000810d8(input_value);\n  return processed_string + formatted_number;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_total_0008117a",
                "param_1": "input_value",
                "iVar1": "formatted_number",
                "iVar2": "processed_string"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_function_if_condition_met_00081190",
            "code": "\nvoid execute_function_if_condition_met_00081190(void)\n\n{\n  if ((relocation_entries[6].relocation_info != 0xffffffff) &&\n     (relocation_entries[6].relocation_info = relocation_entries[6].relocation_info - 1,\n     relocation_entries[6].relocation_info == 0)) {\n    (*(code *)((int)&relocation_entries[0].relative_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_function_if_condition_met_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "r_info": "relocation_info",
                "r_offset": "relative_offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryBlock)\n\n{\n  memset(memoryBlock,0,0x80);\n  *(undefined4 *)(memoryBlock + 0x80) = 0;\n  *(undefined4 *)(memoryBlock + 0x84) = 0;\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryBlock"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_param_000811ca",
            "code": "\nvoid updateParam_000811ca(int param,undefined value)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(param + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(param + 0x84)) {\n    *(undefined *)(param + *(int *)(param + 0x80)) = value;\n    *(uint *)(param + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_param_000811ca",
                "param_1": "param",
                "param_2": "value",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "wait_for_condition_000811e8",
            "code": "\nint waitForCondition_000811e8(int *conditionParams)\n\n{\n  int currentTime;\n  \n  currentTime = getCurrentTime();\n  conditionParams[3] = currentTime;\n  do {\n    currentTime = (**(code **)(*conditionParams + 0xc))(conditionParams);\n    if (-1 < currentTime) {\n      return currentTime;\n    }\n    currentTime = getCurrentTime();\n  } while ((uint)(currentTime - conditionParams[3]) < (uint)conditionParams[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "wait_for_condition_000811e8",
                "param_1": "conditionParams",
                "iVar1": "currentTime",
                "millis": "getCurrentTime",
                "param_1[3]": "conditionParams[3]",
                "param_1[2]": "conditionParams[2]"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_and_concatenate_00081214",
            "code": "\nvoid readAndConcatenate_00081214(undefined4 output,undefined4 input,uint delimiter)\n\n{\n  uint readResult;\n  \n  String(output,&DAT_00085637);\n  while ((readResult = timedRead(input), -1 < (int)readResult && (readResult != delimiter))) {\n    concat(output,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "read_and_concatenate_00081214",
                "param_1": "output",
                "param_2": "input",
                "param_3": "delimiter",
                "uVar1": "readResult"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "String",
                "timedRead",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_memory_00081276",
            "code": "\nuint extractByteFromMemory_00081276(int memoryAddress)\n\n{\n  byte extractedByte;\n  int pointerToMemory;\n  \n  pointerToMemory = *(int *)(memoryAddress + 0x10);\n  if (*(int *)(pointerToMemory + 0x80) != *(int *)(pointerToMemory + 0x84)) {\n    extractedByte = *(byte *)(pointerToMemory + *(int *)(pointerToMemory + 0x84));\n    *(uint *)(pointerToMemory + 0x84) = *(int *)(pointerToMemory + 0x84) + 1U & 0x7f;\n    return (uint)extractedByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_memory_00081276",
                "param_1": "memoryAddress",
                "bVar1": "extractedByte",
                "iVar2": "pointerToMemory"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataPointer,undefined4 newValue)\n\n{\n  int var1;\n  uint updatedValue;\n  \n  var1 = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(var1 + 0x84) == *(int *)(var1 + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(var1 + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(var1 + 0x84) == updatedValue);\n    *(char *)(var1 + *(int *)(var1 + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "var1",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_parameters_00081348",
            "code": "\nvoid initializeParameters_00081348(undefined4 *param_1,undefined4 param_2,undefined param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6)\n\n{\n  parameter1 = 0;\n  parameter2 = 1000;\n  parameter3 = param_2;\n  *param_1 = &PTR_write_1_00085650;\n  *(undefined *)(param_1 + 7) = param_3;\n  parameter5 = param_5;\n  parameter6 = param_4;\n  parameter7 = param_6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1[1]": "parameter1",
                "param_1[2]": "parameter2",
                "param_1[6]": "parameter3",
                "param_1[4]": "parameter5",
                "param_1[8]": "parameter6",
                "param_1[5]": "parameter7"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_peripheral_000813dc",
            "code": "\nvoid initializePeripheral_000813dc(int peripheralAddress,uint frameRate)\n\n{\n  int offset1;\n  undefined4 *configPointer;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(peripheralAddress + 0x20));\n  configPointer = *(undefined4 **)(peripheralAddress + 0x18);\n  configPointer[0x48] = 0x202;\n  *configPointer = 0xac;\n  configPointer[1] = 0x800;\n  configPointer[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / frameRate >> 4;\n  configPointer[3] = 0xffffffff;\n  configPointer[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheralAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheralAddress + 0x1c) & 0x1f);\n  offset1 = *(int *)(peripheralAddress + 0x10);\n  *(undefined4 *)(offset1 + 0x84) = 0;\n  *(undefined4 *)(offset1 + 0x80) = 0;\n  offset1 = *(int *)(peripheralAddress + 0x14);\n  *(undefined4 *)(offset1 + 0x84) = 0;\n  *(undefined4 *)(offset1 + 0x80) = 0;\n  *configPointer = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_peripheral_000813dc",
                "param_1": "peripheralAddress",
                "param_2": "frameRate",
                "iVar1": "offset1",
                "puVar2": "configPointer"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_uart_00081438",
            "code": "\nundefined4 * initializeUART_00081438(undefined4 *uartInstance,undefined4 data)\n\n{\n  UARTClass();\n  *uartInstance = &PTR_write_1_00085680;\n  dataPtr = data;\n  return uartInstance;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_uart_00081438",
                "param_1": "uartInstance",
                "param_2": "data",
                "param_1[9]": "dataPtr"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolated_value_0008145c",
            "code": "\nint calculateInterpolatedValue_0008145c(int startValue,int startInput,int endInput,int startOutput,int endOutput)\n\n{\n  return (uint)((startValue - startInput) * (endOutput - startOutput)) / (uint)(endInput - startInput) + startOutput;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolated_value_0008145c",
                "param_1": "startValue",
                "param_2": "startInput",
                "param_3": "endInput",
                "param_4": "startOutput",
                "param_5": "endOutput"
            },
            "calling": [
                "FUN_000806f8",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "free_memory_00081472",
            "code": "\nundefined4 * freeMemory_00081472(undefined4 *memoryBlock)\n\n{\n  free(*memoryBlock);\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_00081472": "free_memory_00081472",
                "param_1": "memoryBlock"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_memory_00081480",
            "code": "\nvoid resetMemory_00081480(int *memoryPtr)\n\n{\n  if (*memoryPtr != 0) {\n    free();\n  }\n  *memoryPtr = 0;\n  memoryPtr[2] = 0;\n  memoryPtr[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_memory_00081480",
                "param_1": "memoryPtr",
                "param_1[1]": "memoryPtr[1]",
                "param_1[2]": "memoryPtr[2]"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_array_00081496",
            "code": "\nint resizeArray_00081496(int *array,int size,undefined4 oldSize,undefined4 newSize)\n\n{\n  int resizedArray;\n  \n  resizedArray = realloc(*array,size + 1,oldSize,newSize,newSize);\n  if (resizedArray != 0) {\n    *array = resizedArray;\n    array[1] = size;\n    resizedArray = 1;\n  }\n  return resizedArray;\n}\n\n",
            "renaming": {
                "FUN_00081496": "resize_array_00081496",
                "param_1": "array",
                "param_2": "size",
                "param_3": "oldSize",
                "param_4": "newSize",
                "iVar1": "resizedArray"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_buffer_000814ae",
            "code": "\nundefined4 checkBuffer_000814ae(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < size)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_buffer_000814ae",
                "param_1": "buffer",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "copy",
                "FUN_00081570"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "update_array_000814d0",
            "code": "\nundefined4 * updateArray_000814d0(undefined4 *array,undefined4 source,undefined4 length)\n\n{\n  int result;\n  \n  result = reserve(array,length);\n  if (result == 0) {\n    invalidate(array);\n  }\n  else {\n    array[2] = length;\n    strcpy(*array,source);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "update_array_000814d0",
                "param_1": "array",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "result"
            },
            "calling": [
                "String"
            ],
            "called": [
                "reserve",
                "invalidate",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_and_copy_000814f6",
            "code": "\nundefined4 * initializeAndCopy_000814f6(undefined4 *outputArray,int inputString)\n\n{\n  undefined4 inputLength;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputString != 0) {\n    inputLength = strlen(inputString);\n    copy(outputArray,inputString,inputLength);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_and_copy_000814f6",
                "param_1": "outputArray",
                "param_2": "inputString",
                "uVar1": "inputLength"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_parameters_0008151c",
            "code": "\nvoid updateParameters_0008151c(int *sourceParams,int *targetParams)\n\n{\n  if (*sourceParams != 0) {\n    if ((*targetParams != 0) && ((uint)targetParams[2] <= (uint)sourceParams[1])) {\n      copyString();\n      sourceParams[2] = targetParams[2];\n      goto LAB_00081558;\n    }\n    releaseMemory();\n  }\n  *sourceParams = *targetParams;\n  sourceParams[1] = targetParams[1];\n  sourceParams[2] = targetParams[2];\n  *targetParams = 0;\n  targetParams[1] = 0;\nLAB_00081558:\n  targetParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_parameters_0008151c",
                "param_1": "sourceParams",
                "param_2": "targetParams",
                "strcpy": "copyString",
                "free": "releaseMemory"
            },
            "calling": [
                "operator="
            ],
            "called": [
                "free",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_move_if_different_00081560",
            "code": "\nint check_and_move_if_different_00081560(int first_param,int second_param)\n\n{\n  if (first_param != second_param) {\n    move();\n  }\n  return first_param;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_move_if_different_00081560",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "move"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "update_string_00081570",
            "code": "\nundefined4 updateString_00081570(int *array,int sourceString,int additionalLength)\n\n{\n  int reserveResult;\n  int arrayIndex;\n  \n  arrayIndex = array[2];\n  if (sourceString == 0) {\n    return 0;\n  }\n  if (additionalLength != 0) {\n    reserveResult = reserve(array,arrayIndex + additionalLength);\n    if (reserveResult == 0) {\n      return 0;\n    }\n    strcpy(*array + array[2],sourceString);\n    array[2] = arrayIndex + additionalLength;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "update_string_00081570",
                "param_1": "array",
                "param_2": "sourceString",
                "param_3": "additionalLength",
                "iVar1": "reserveResult",
                "iVar2": "arrayIndex"
            },
            "calling": [
                "concat"
            ],
            "called": [
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "update_string_0008159e",
            "code": "\nvoid update_string_0008159e(undefined4 input_string,undefined4 local_variable_1,undefined4 local_variable_2)\n\n{\n  undefined4 local_variable_3;\n  undefined4 local_variable_4;\n  \n  local_variable_4 = local_variable_2;\n  update_string_0008159e_00081570(input_string,&local_variable_3,1,0,input_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "update_string_0008159e",
                "param_1": "input_string",
                "param_2": "local_variable_1",
                "param_3": "local_variable_2",
                "local_c": "local_variable_3",
                "uStack_8": "local_variable_4"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_input_validity_000815b8",
            "code": "\nint check_input_validity_000815b8(byte **input_list,byte *input_data)\n\n{\n  uint comparison_result;\n  int validity_flag;\n  \n  if (input_list[2] == (byte *)0x0) {\n    if (input_data == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (input_data != (byte *)0x0) {\n      comparison_result = strcmp(*input_list);\n      goto LAB_000815d4;\n    }\n    input_data = *input_list;\n  }\n  comparison_result = (uint)*input_data;\nLAB_000815d4:\n  validity_flag = 1 - comparison_result;\n  if (1 < comparison_result) {\n    validity_flag = 0;\n  }\n  return validity_flag;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_input_validity_000815b8",
                "param_1": "input_list",
                "param_2": "input_data",
                "uVar1": "comparison_result",
                "iVar2": "validity_flag"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_decimal_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseDecimal_000815de(byte **input)\n\n{\n  byte byte1;\n  byte byteFlag;\n  uint result;\n  byte *ptr;\n  uint temp;\n  byte *ptrTemp;\n  int temp2;\n  int negativeFlag;\n  uint maxValue;\n  uint minValue;\n  \n  ptr = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    ptrTemp = ptr;\n    ptr = ptrTemp + 1;\n    temp = (uint)*ptrTemp;\n    byte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + temp + 1);\n    byteFlag = byte1 & 8;\n  } while ((byte1 & 8) != 0);\n  if (temp == 0x2d) {\n    ptr = ptrTemp + 2;\n    temp = (uint)ptrTemp[1];\n    byteFlag = 1;\n  }\n  else if (temp == 0x2b) {\n    temp = (uint)ptrTemp[1];\n    ptr = ptrTemp + 2;\n  }\n  if (byteFlag == 0) {\n    minValue = 0x7fffffff;\n  }\n  else {\n    minValue = 0x80000000;\n  }\n  maxValue = minValue / 10;\n  negativeFlag = 0;\n  result = 0;\n  do {\n    byte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + temp + 1);\n    if ((byte1 & 4) == 0) {\n      if ((byte1 & 3) == 0) {\nLAB_0008277e:\n        if (negativeFlag == -1) {\n          if (byteFlag == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (byteFlag != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byte1 & 3) == 1) {\n        temp2 = 0x37;\n      }\n      else {\n        temp2 = 0x57;\n      }\n      temp2 = temp - temp2;\n    }\n    else {\n      temp2 = temp - 0x30;\n    }\n    if (9 < temp2) goto LAB_0008277e;\n    if (negativeFlag != -1) {\n      if ((maxValue <= result && result != maxValue) || ((result == maxValue && ((int)(minValue % 10) < temp2))))\n      {\n        negativeFlag = -1;\n      }\n      else {\n        result = result * 10 + temp2;\n        negativeFlag = 1;\n      }\n    }\n    temp = (uint)*ptr;\n    ptr = ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_decimal_000815de",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byteFlag",
                "uVar3": "result",
                "pbVar4": "ptr",
                "uVar5": "temp",
                "pbVar6": "ptrTemp",
                "iVar7": "temp2",
                "iVar8": "negativeFlag",
                "uVar9": "maxValue",
                "uVar10": "minValue"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_firmware_000815ec",
            "code": "\nvoid runFirmware_000815ec(void)\n\n{\n  setupWatchdog();\n  initializeSystem();\n  initializeVariant();\n  wait(1);\n  setupDevice();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_firmware_000815ec",
                "_watchdogDefaultSetup": "setupWatchdog",
                "initialize_system_00080774": "initializeSystem",
                "initVariant": "initializeVariant",
                "delay": "wait",
                "setup": "setupDevice",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_watchdogDefaultSetup",
                "serialEventRun",
                "setup",
                "delay",
                "loop",
                "initVariant",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_global_variable_00081618",
            "code": "\n\n\nvoid initializeGlobalVariable_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_global_variable_00081618"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_pulse_duration_00081624",
            "code": "\nint calculatePulseDuration_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int result;\n  undefined4 pulseOffset;\n  \n  pulseOffset = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    pulseOffset = 0;\n  }\n  result = countPulseASM(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                        *(undefined4 *)(&DAT_00084b48 + index * 0x1c),pulseOffset,\n                        ((RelOffsetArray[6].r_offset / 1000000) * multiplier) / 0x12,param)\n  ;\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)RelOffsetArray[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_pulse_duration_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "pulseOffset",
                "Elf32_Rel_ARRAY_20070000": "RelOffsetArray"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "countPulseASM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bit_pattern_00081684",
            "code": "\nint check_bit_pattern_00081684(uint *data_pointer,uint bit_mask,uint expected_value,int iteration_count)\n\n{\n  int matching_iterations;\n  \n  do {\n    if ((*data_pointer & bit_mask) != expected_value) {\n      do {\n        if ((*data_pointer & bit_mask) == expected_value) {\n          matching_iterations = 0;\n          do {\n            if ((*data_pointer & bit_mask) != expected_value) {\n              return matching_iterations;\n            }\n            matching_iterations = matching_iterations + 1;\n          } while (iteration_count != matching_iterations);\n          return 0;\n        }\n        iteration_count = iteration_count + -1;\n      } while (iteration_count != 0);\n      return 0;\n    }\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "param_1": "data_pointer",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "iteration_count",
                "iVar1": "matching_iterations"
            },
            "calling": [
                "pulseIn"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_data_value_000816d8",
            "code": "\nundefined4 get_data_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_data_value_000816d8"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_000816ec",
            "code": "\nvoid updateRelocation_000816ec(dword data_address,dword param_2,dword function_address)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  code *call_function;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocation_entry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)malloc(400);\n    if (relocation_entry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*call_function)(0xffffffff);\n      return;\n    }\n    *relocation_entry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = data_address;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = function_address;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = param_2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*call_function)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_000816ec",
                "param_1": "data_address",
                "param_3": "function_address",
                "pdVar1": "relocation_entry",
                "uVar2": "index",
                "uVar3": "bit_mask",
                "UNRECOVERED_JUMPTABLE_00": "call_function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failed_message_000816f8",
            "code": "\nvoid print_assertion_failed_message_000816f8(undefined4 file_name,undefined4 line_number,char *assertion_condition,undefined4 function_name)\n\n{\n  undefined4 file_output;\n  undefined4 current_function;\n  char *additional_info;\n  undefined8 abort_output;\n  \n  file_output = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion_condition == (char *)0x0) goto LAB_0008171c;\n  current_function = function_name;\n  additional_info = \", function: \";\n  do {\n    function_name = file_name;\n    fiprintf(file_output,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",current_function,file_name,line_number,\n             additional_info,assertion_condition);\n    abort_output = abort();\n    line_number = (undefined4)((ulonglong)abort_output >> 0x20);\n    file_output = (undefined4)abort_output;\nLAB_0008171c:\n    assertion_condition = \"\";\n    current_function = function_name;\n    additional_info = assertion_condition;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "assertion_condition",
                "param_4": "function_name",
                "uVar1": "file_output",
                "uVar2": "current_function",
                "pcVar3": "additional_info",
                "uVar4": "abort_output"
            },
            "calling": [
                "_initISR",
                "TC_Configure"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "printf_with_stack_args_00081750",
            "code": "\nvoid printfWithStackArgs_00081750(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_stack;\n  undefined4 arg3_stack;\n  \n  arg2_stack = arg2;\n  arg3_stack = arg3;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,formatString,arg1,&arg2_stack);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "printf_with_stack_args_00081750",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_stack",
                "uStack_4": "arg3_stack"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "initialize_and_execute_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid initialize_and_execute_functions_00081778(void)\n\n{\n  int loop_counter;\n  code **function_pointer;\n  \n  initialize();\n  function_pointer = (code **)0x8584c;\n  loop_counter = 0;\n  do {\n    loop_counter = loop_counter + 1;\n    function_pointer = function_pointer + 1;\n    (**function_pointer)();\n  } while (loop_counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "initialize_and_execute_functions_00081778",
                "iVar1": "loop_counter",
                "ppcVar2": "function_pointer",
                "_init": "initialize"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_with_format_and_params_000817c8",
            "code": "\nvoid printWithFormatAndParams_000817c8(undefined4 formatString,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),formatString,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_with_format_and_params_000817c8",
                "param_1": "formatString",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_relocation_entry_000817f0",
            "code": "\nvoid allocateRelocationEntry_000817f0(undefined4 memorySize)\n\n{\n  _malloc_r(relocationEntryArray[140].r_offset,memorySize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_relocation_entry_000817f0",
                "param_1": "memorySize",
                "Elf32_Rel_ARRAY_20070000": "relocationEntryArray"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "free_elf_rel_offset_00081800",
            "code": "\nvoid freeElfRelOffset_00081800(undefined4 memAddress)\n\n{\n  _free_r(relTable[140].r_offset,memAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "free_elf_rel_offset_00081800",
                "param_1": "memAddress",
                "Elf32_Rel_ARRAY_20070000": "relTable"
            },
            "calling": [
                "invalidate",
                "~String",
                "move"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081810(undefined4 *lock,uint size)\n\n{\n  dword relOffset;\n  int nextOffset;\n  uint sizeAligned;\n  uint sizeDiff;\n  int prevOffset;\n  uint remainingSize;\n  dword currentOffset;\n  uint prevSize;\n  int prevOffset2;\n  undefined *currentAddress;\n  dword existingOffset;\n  dword existingOffset2;\n  int index;\n  dword *relArray;\n  uint minSize;\n  undefined *newRelEntry;\n  dword *curRelInfo;\n  uint relIndex;\n  \n  if (size + 0xb < 0x17) {\n    minSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    minSize = size + 0xb & 0xfffffff8;\n    if (((int)minSize < 0) || (minSize < size)) {\nLAB_00081876:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  relOffset = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (minSize < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + minSize);\n    if ((index != minSize + 0x20070464) ||\n       (nextOffset = index + 8, index = *(int *)(index + 0x14), nextOffset != index)) {\n      prevOffset = *(int *)(index + 0xc);\n      prevOffset2 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      minSize = *(uint *)(prevOffset2 + 4);\n      nextOffset = *(int *)(index + 8);\n      *(int *)(nextOffset + 0xc) = prevOffset;\n      *(int *)(prevOffset + 8) = nextOffset;\n      *(uint *)(prevOffset2 + 4) = minSize | 1;\n      __malloc_unlock(lock);\n      return (int *)(index + 8);\n    }\n    relIndex = (minSize >> 3) + 2;\n  }\n  else {\n    relIndex = minSize >> 9;\n    if (relIndex == 0) {\n      nextOffset = 0x7e;\n      index = 0x3f;\n    }\n    else if (relIndex < 5) {\n      index = (minSize >> 6) + 0x38;\n      nextOffset = index * 2;\n    }\n    else if (relIndex < 0x15) {\n      index = relIndex + 0x5b;\n      nextOffset = index * 2;\n    }\n    else if (relIndex < 0x55) {\n      index = (minSize >> 0xc) + 0x6e;\n      nextOffset = index * 2;\n    }\n    else if (relIndex < 0x155) {\n      index = (minSize >> 0xf) + 0x77;\n      nextOffset = index * 2;\n    }\n    else if (relIndex < 0x555) {\n      index = (minSize >> 0x12) + 0x7c;\n      nextOffset = index * 2;\n    }\n    else {\n      nextOffset = 0xfc;\n      index = 0x7e;\n    }\n    for (currentOffset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[nextOffset]; nextOffset * 4 + 0x20070464U != currentOffset\n        ; currentOffset = *(dword *)(currentOffset + 0xc)) {\n      relIndex = *(uint *)(currentOffset + 4) & 0xfffffffc;\n      prevOffset = relIndex - minSize;\n      if (0xf < prevOffset) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < prevOffset) {\n        nextOffset = relIndex + currentOffset;\n        minSize = *(uint *)(nextOffset + 4);\n        prevOffset = *(int *)(currentOffset + 0xc);\n        index = *(int *)(currentOffset + 8);\n        *(int *)(index + 0xc) = prevOffset;\n        *(int *)(prevOffset + 8) = index;\n        *(uint *)(nextOffset + 4) = minSize | 1;\n        __malloc_unlock(lock);\n        return (int *)(currentOffset + 8);\n      }\n    }\n    relIndex = index + 1;\n  }\n  currentOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    sizeAligned = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    sizeDiff = sizeAligned & 0xfffffffc;\n    remainingSize = sizeDiff - minSize;\n    if (0xf < (int)remainingSize) {\n      currentOffset = minSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = minSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currentOffset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currentOffset;\n      *(undefined4 *)(currentOffset + 0xc) = 0x2007046c;\n      *(undefined4 *)(currentOffset + 8) = 0x2007046c;\n      *(uint *)(currentOffset + 4) = remainingSize | 1;\n      *(uint *)(currentOffset + remainingSize) = remainingSize;\n      __malloc_unlock(lock);\n      return (int *)(relOffset + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)remainingSize) {\n      *(uint *)(sizeDiff + relOffset + 4) = *(uint *)(sizeDiff + relOffset + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(relOffset + 8);\n    }\n    if (sizeDiff < 0x200) {\n      sizeDiff = sizeAligned & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + sizeDiff);\n      currentOffset = 1 << ((int)(sizeAligned >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relOffset + 8) = index;\n      *(uint *)(relOffset + 0xc) = sizeDiff + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currentOffset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + sizeDiff) = relOffset;\n      *(dword *)(index + 0xc) = relOffset;\n    }\n    else {\n      remainingSize = sizeAligned >> 9;\n      if (remainingSize < 5) {\n        nextOffset = (sizeAligned >> 6) + 0x38;\n        index = nextOffset * 2;\n      }\n      else if (remainingSize < 0x15) {\n        nextOffset = remainingSize + 0x5b;\n        index = nextOffset * 2;\n      }\n      else if (remainingSize < 0x55) {\n        nextOffset = (sizeAligned >> 0xc) + 0x6e;\n        index = nextOffset * 2;\n      }\n      else if (remainingSize < 0x155) {\n        nextOffset = (sizeAligned >> 0xf) + 0x77;\n        index = nextOffset * 2;\n      }\n      else if (remainingSize < 0x555) {\n        nextOffset = (sizeAligned >> 0x12) + 0x7c;\n        index = nextOffset * 2;\n      }\n      else {\n        index = 0xfc;\n        nextOffset = 0x7e;\n      }\n      currentOffset = index * 4 + 0x20070464;\n      existingOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (existingOffset == currentOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (nextOffset >> 2 & 0xffU);\n        existingOffset2 = existingOffset;\n      }\n      else {\n        do {\n          existingOffset2 = existingOffset;\n          if ((*(uint *)(existingOffset + 4) & 0xfffffffc) <= sizeDiff) break;\n          existingOffset = *(dword *)(existingOffset + 8);\n          existingOffset2 = existingOffset;\n        } while (currentOffset != existingOffset);\n        existingOffset = *(dword *)(existingOffset2 + 0xc);\n      }\n      currentOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relOffset + 0xc) = existingOffset;\n      *(dword *)(relOffset + 8) = existingOffset2;\n      *(dword *)(existingOffset + 8) = relOffset;\n      *(dword *)(existingOffset2 + 0xc) = relOffset;\n    }\n  }\n  relOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  sizeAligned = 1 << ((int)relIndex >> 2 & 0xffU);\n  if (sizeAligned <= currentOffset) {\n    if ((currentOffset & sizeAligned) == 0) {\n      relIndex = relIndex & 0xfffffffc;\n      do {\n        sizeAligned = sizeAligned << 1;\n        relIndex = relIndex + 4;\n      } while ((currentOffset & sizeAligned) == 0);\n    }\n    do {\n      curRelInfo = &Elf32_Rel_ARRAY_20070000[relIndex + 0x8c].r_info;\n      relArray = curRelInfo;\n      sizeDiff = relIndex;\n      do {\n        for (currentAddress = (undefined *)relArray[3]; relArray != (dword *)currentAddress;\n            currentAddress = *(undefined **)(currentAddress + 0xc)) {\n          remainingSize = *(uint *)(currentAddress + 4) & 0xfffffffc;\n          prevSize = remainingSize - minSize;\n          if (0xf < (int)prevSize) {\n            nextOffset = *(int *)(currentAddress + 8);\n            index = *(int *)(currentAddress + 0xc);\n            newRelEntry = currentAddress + minSize;\n            *(uint *)(currentAddress + 4) = minSize | 1;\n            *(int *)(nextOffset + 0xc) = index;\n            *(int *)(index + 8) = nextOffset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newRelEntry;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newRelEntry;\n            *(undefined4 *)(newRelEntry + 0xc) = 0x2007046c;\n            *(undefined4 *)(newRelEntry + 8) = 0x2007046c;\n            *(uint *)(newRelEntry + 4) = prevSize | 1;\n            *(uint *)(newRelEntry + prevSize) = prevSize;\n            __malloc_unlock(lock);\n            return (int *)(currentAddress + 8);\n          }\n          if (-1 < (int)prevSize) {\n            index = *(int *)(currentAddress + 8);\n            nextOffset = *(int *)(currentAddress + 0xc);\n            *(uint *)(currentAddress + remainingSize + 4) = *(uint *)(currentAddress + remainingSize + 4) | 1;\n            *(int *)(index + 0xc) = nextOffset;\n            *(int *)(nextOffset + 8) = index;\n            __malloc_unlock(lock);\n            return (int *)(currentAddress + 8);\n          }\n        }\n        sizeDiff = sizeDiff + 1;\n        relArray = relArray + 2;\n      } while ((sizeDiff & 3) != 0);\n      do {\n        remainingSize = relIndex & 3;\n        currentAddress = (undefined *)(curRelInfo + -2);\n        relIndex = relIndex - 1;\n        if (remainingSize == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~sizeAligned;\n          break;\n        }\n        curRelInfo = (dword *)*curRelInfo;\n      } while (curRelInfo == (dword *)currentAddress);\n      sizeAligned = sizeAligned * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= sizeAligned &&\n           sizeAligned - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (relIndex = sizeDiff, sizeAligned == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & sizeAligned) == 0; sizeAligned = sizeAligned << 1) {\n        relIndex = relIndex + 4;\n      }\n    } while( true );\n  }\n  relIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((minSize <= relIndex) &&\n     (sizeAligned = relIndex - minSize, currentOffset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)sizeAligned))\n  goto LAB_00081b1a;\n  sizeAligned = Elf32_Rel_ARRAY_20070000[141].r_info + relIndex;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    sizeDiff = minSize + DAT_20071218 + 0x10;\n  }\n  else {\n    sizeDiff = minSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  currentOffset = _sbrk_r(lock,sizeDiff);\n  if ((currentOffset == 0xffffffff) || ((currentOffset < sizeAligned && (relOffset != 0x20070464)))) {\n    relIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    remainingSize = DAT_2007121c + sizeDiff;\n    DAT_2007121c = remainingSize;\n    if ((sizeAligned == currentOffset) && ((sizeAligned & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = sizeDiff + relIndex | 1;\n    }\n    else {\n      existingOffset = currentOffset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        existingOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = remainingSize + (currentOffset - sizeAligned);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = existingOffset;\n      sizeAligned = currentOffset & 7;\n      if (sizeAligned == 0) {\n        index = 0x1000;\n      }\n      else {\n        currentOffset = currentOffset + (8 - sizeAligned);\n        index = 0x1008 - sizeAligned;\n      }\n      index = index - (sizeDiff + currentOffset & 0xfff);\n      nextOffset = _sbrk_r(lock,index);\n      if (nextOffset == -1) {\n        sizeAligned = 1;\n        index = 0;\n      }\n      else {\n        sizeAligned = (nextOffset - currentOffset) + index | 1;\n      }\n      remainingSize = DAT_2007121c + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currentOffset;\n      DAT_2007121c = remainingSize;\n      *(uint *)(currentOffset + 4) = sizeAligned;\n      if (relOffset != 0x20070464) {\n        if (relIndex < 0x10) {\n          *(undefined4 *)(currentOffset + 4) = 1;\n          relIndex = 0;\n          goto LAB_00081b04;\n        }\n        relIndex = relIndex - 0xc & 0xfffffff8;\n        *(uint *)(relOffset + 4) = relIndex | *(uint *)(relOffset + 4) & 1;\n        *(undefined4 *)(relOffset + relIndex + 4) = 5;\n        *(undefined4 *)(relOffset + relIndex + 8) = 5;\n        if (0xf < relIndex) {\n          _free_r(lock,relOffset + 8);\n          remainingSize = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < remainingSize) {\n      DAT_20071214 = remainingSize;\n    }\n    if (DAT_20071210 < remainingSize) {\n      DAT_20071210 = remainingSize;\n    }\n    relIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  sizeAligned = relIndex - minSize;\n  if ((relIndex < minSize) || ((int)sizeAligned < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = minSize + currentOffset;\n  *(uint *)(currentOffset + 4) = minSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = sizeAligned | 1;\n  __malloc_unlock(lock);\n  return (int *)(currentOffset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "lock",
                "param_2": "size",
                "dVar1": "relOffset",
                "iVar2": "nextOffset",
                "uVar3": "sizeAligned",
                "uVar4": "sizeDiff",
                "iVar5": "prevOffset",
                "uVar6": "remainingSize",
                "dVar7": "currentOffset",
                "uVar8": "prevSize",
                "iVar9": "prevOffset2",
                "puVar10": "currentAddress",
                "dVar11": "existingOffset",
                "dVar12": "existingOffset2",
                "iVar13": "index",
                "pdVar14": "relArray",
                "uVar15": "minSize",
                "puVar16": "newRelEntry",
                "pdVar17": "curRelInfo",
                "uVar18": "relIndex"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "__smakebuf_r",
                "malloc"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *dst;\n  undefined4 *src;\n  uint remaining;\n  uint copySize;\n  bool copying;\n  \n  dst = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      copySize = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          src = dst;\n          copying = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)src = *(undefined *)destPtr;\n          dst = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (copying);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto copyRemaining;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copySize = 4 - ((uint)destination & 3);\n      length = length - copySize;\n      destPtr = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dst = destPtr;\n      source = src;\n      if ((copySize & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dst = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *dst = *source;\n    dst[1] = source[1];\n    dst[2] = source[2];\n    dst[3] = source[3];\n    dst[4] = source[4];\n    dst[5] = source[5];\n    dst[6] = source[6];\n    dst[7] = source[7];\n    dst[8] = source[8];\n    dst[9] = source[9];\n    dst[10] = source[10];\n    dst[0xb] = source[0xb];\n    dst[0xc] = source[0xc];\n    dst[0xd] = source[0xd];\n    dst[0xe] = source[0xe];\n    dst[0xf] = source[0xf];\n    dst = dst + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remaining = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *dst = *source;\n      dst[1] = source[1];\n      dst[2] = source[2];\n      dst[3] = source[3];\n      dst = dst + 4;\n      source = source + 4;\n      copying = 0xf < remaining;\n      remaining = remaining - 0x10;\n    } while (copying);\n  }\n  copySize = remaining + 0xc;\n  src = dst;\n  destPtr = source;\n  if (0xfffffff3 < remaining) {\n    do {\n      source = destPtr + 1;\n      *src = *destPtr;\n      copying = 3 < copySize;\n      copySize = copySize - 4;\n      dst = src + 1;\n      src = src + 1;\n      destPtr = source;\n    } while (copying);\n  }\ncopyRemaining:\n  if (copySize + 4 != 0) {\n    destPtr = dst;\n    src = source;\n    if ((copySize & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)dst + 1);\n      *(undefined *)dst = *(undefined *)source;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "dst",
                "puVar3": "src",
                "uVar4": "remaining",
                "uVar5": "copySize",
                "bVar6": "copying",
                "LAB_00081dcc": "copyRemaining"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *tmp_ptr;\n  uint tmp_size;\n  undefined *tmp;\n  uint remaining;\n  \n  if ((src < dest) && (tmp_ptr = (undefined4 *)((int)src + size), dest < tmp_ptr)) {\n    tmp = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        tmp_ptr = (undefined4 *)((int)tmp_ptr + -1);\n        index = index + -1;\n        tmp = tmp + -1;\n        *tmp = *(undefined *)tmp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tmp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = tmp_ptr + 4;\n      *tmp_ptr = *src_ptr;\n      tmp_ptr[1] = src_ptr[1];\n      tmp_ptr[2] = src_ptr[2];\n      tmp_ptr[3] = src_ptr[3];\n      tmp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remaining = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    tmp_size = remaining;\n    tmp_ptr = dest;\n    src_ptr = src;\n    if (3 < remaining) {\n      do {\n        tmp_size = tmp_size - 4;\n        *tmp_ptr = *src_ptr;\n        tmp_ptr = tmp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < tmp_size);\n      index = (remaining - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remaining = size & 3;\n    }\n    size = remaining;\n    if (size == 0) {\n      return;\n    }\n  }\n  tmp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)tmp_ptr + 1);\n    *(undefined *)tmp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tmp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "tmp_ptr",
                "uVar5": "tmp_size",
                "puVar6": "tmp",
                "uVar7": "remaining"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid memset_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *new_dest_ptr;\n  undefined4 value32;\n  uint temp_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    temp_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      temp_size = size - 0x10;\n      do {\n        *dest_ptr = value32;\n        dest_ptr[1] = value32;\n        dest_ptr[2] = value32;\n        dest_ptr[3] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (temp_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((temp_size >> 4) + 1) * 4;\n      temp_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (temp_size - 4 & 0xfffffffc) + 4);\n    size = temp_size & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      new_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = new_dest_ptr;\n    } while (new_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "new_dest_ptr",
                "uVar3": "value32",
                "uVar4": "temp_size",
                "bVar5": "is_zero"
            },
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reallocate_memory_00081f9c",
            "code": "\nvoid reallocateMemory_00081f9c(undefined4 oldPointer,undefined4 newSize)\n\n{\n  _realloc_r(Elf32_Rel_ARRAY_20070000[140].r_offset,oldPointer,newSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reallocate_memory_00081f9c",
                "param_1": "oldPointer",
                "param_2": "newSize"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocate_memory_00081fac(undefined4 *mem_lock,int *old_buffer,uint size)\n\n{\n  dword temp;\n  int *new_buffer;\n  uint offset;\n  int i;\n  uint flag;\n  int tmp;\n  int *p;\n  uint old_size;\n  uint buffer_size;\n  int *result;\n  \n  if (old_buffer == (int *)0x0) {\n    new_buffer = (int *)_malloc_r(mem_lock,size);\n    return new_buffer;\n  }\n  __malloc_lock();\n  flag = old_buffer[-1];\n  old_size = flag & 0xfffffffc;\n  new_buffer = old_buffer + -2;\n  if (size + 0xb < 0x17) {\n    buffer_size = 0x10;\n  }\n  else {\n    buffer_size = size + 0xb & 0xfffffff8;\n    if ((int)buffer_size < 0) goto LAB_00082078;\n  }\n  if (buffer_size < size) {\nLAB_00082078:\n    *mem_lock = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)old_size < (int)buffer_size) {\n    temp = (int)new_buffer + old_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp) {\n      offset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(buffer_size + 0x10) <= (int)(offset + old_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_buffer + buffer_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (offset + old_size) - buffer_size | 1;\n        old_buffer[-1] = buffer_size | old_buffer[-1] & 1U;\n        __malloc_unlock(mem_lock);\n        return old_buffer;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp + 4) & 0xfffffffe) + temp + 4) & 1) == 0) {\n      offset = *(uint *)(temp + 4) & 0xfffffffc;\n      if ((int)buffer_size <= (int)(offset + old_size)) {\n        tmp = *(int *)(temp + 0xc);\n        i = *(int *)(temp + 8);\n        *(int *)(i + 0xc) = tmp;\n        *(int *)(tmp + 8) = i;\n        old_size = offset + old_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      offset = 0;\n      temp = 0;\n    }\n    if (-1 < (int)(flag << 0x1f)) {\n      result = (int *)((int)new_buffer - old_buffer[-2]);\n      flag = (result[1] & 0xfffffffcU) + old_size;\n      if (temp != 0) {\n        if (temp == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(buffer_size + 0x10) <= (int)(offset + flag)) {\n            new_buffer = result + 2;\n            i = *new_buffer;\n            tmp = result[3];\n            old_size = old_size - 4;\n            *(int *)(i + 0xc) = tmp;\n            *(int *)(tmp + 8) = i;\n            if (old_size < 0x25) {\n              p = new_buffer;\n              if (0x13 < old_size) {\n                result[2] = *old_buffer;\n                result[3] = old_buffer[1];\n                if (old_size < 0x1c) {\n                  old_buffer = old_buffer + 2;\n                  p = result + 4;\n                }\n                else {\n                  result[4] = old_buffer[2];\n                  result[5] = old_buffer[3];\n                  if (old_size == 0x24) {\n                    result[6] = old_buffer[4];\n                    p = old_buffer + 5;\n                    old_buffer = old_buffer + 6;\n                    result[7] = *p;\n                    p = result + 8;\n                  }\n                  else {\n                    old_buffer = old_buffer + 4;\n                    p = result + 6;\n                  }\n                }\n              }\n              *p = *old_buffer;\n              p[1] = old_buffer[1];\n              p[2] = old_buffer[2];\n            }\n            else {\n              memmove(new_buffer,old_buffer);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)result + buffer_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (offset + flag) - buffer_size | 1;\n            result[1] = buffer_size | result[1] & 1U;\n            __malloc_unlock(mem_lock);\n            return new_buffer;\n          }\n        }\n        else {\n          offset = offset + flag;\n          if ((int)buffer_size <= (int)offset) {\n            tmp = *(int *)(temp + 0xc);\n            i = *(int *)(temp + 8);\n            *(int *)(i + 0xc) = tmp;\n            *(int *)(tmp + 8) = i;\n            p = result + 2;\n            i = *p;\n            tmp = result[3];\n            flag = old_size - 4;\n            *(int *)(i + 0xc) = tmp;\n            *(int *)(tmp + 8) = i;\n            old_size = offset;\n            if (flag < 0x25) {\n              new_buffer = p;\n              if (0x13 < flag) {\n                result[2] = *old_buffer;\n                result[3] = old_buffer[1];\n                if (flag < 0x1c) {\n                  old_buffer = old_buffer + 2;\n                  new_buffer = result + 4;\n                }\n                else {\n                  result[4] = old_buffer[2];\n                  result[5] = old_buffer[3];\n                  if (flag == 0x24) {\n                    result[6] = old_buffer[4];\n                    new_buffer = old_buffer + 5;\n                    old_buffer = old_buffer + 6;\n                    result[7] = *new_buffer;\n                    new_buffer = result + 8;\n                  }\n                  else {\n                    old_buffer = old_buffer + 4;\n                    new_buffer = result + 6;\n                  }\n                }\n              }\n              *new_buffer = *old_buffer;\n              new_buffer[1] = old_buffer[1];\n              new_buffer[2] = old_buffer[2];\n              flag = result[1];\n              new_buffer = result;\n              old_buffer = p;\n            }\n            else {\n              memmove(p,old_buffer);\n              flag = result[1];\n              new_buffer = result;\n              old_buffer = p;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)buffer_size <= (int)flag) {\n        p = result + 2;\n        i = *p;\n        tmp = result[3];\n        offset = old_size - 4;\n        *(int *)(i + 0xc) = tmp;\n        *(int *)(tmp + 8) = i;\n        old_size = flag;\n        if (offset < 0x25) {\n          new_buffer = p;\n          if (0x13 < offset) {\n            result[2] = *old_buffer;\n            result[3] = old_buffer[1];\n            if (offset < 0x1c) {\n              old_buffer = old_buffer + 2;\n              new_buffer = result + 4;\n            }\n            else {\n              result[4] = old_buffer[2];\n              result[5] = old_buffer[3];\n              if (offset == 0x24) {\n                result[6] = old_buffer[4];\n                new_buffer = old_buffer + 5;\n                old_buffer = old_buffer + 6;\n                result[7] = *new_buffer;\n                new_buffer = result + 8;\n              }\n              else {\n                old_buffer = old_buffer + 4;\n                new_buffer = result + 6;\n              }\n            }\n          }\n          *new_buffer = *old_buffer;\n          new_buffer[1] = old_buffer[1];\n          new_buffer[2] = old_buffer[2];\n          flag = result[1];\n          new_buffer = result;\n          old_buffer = p;\n        }\n        else {\n          memmove(p,old_buffer);\n          flag = result[1];\n          new_buffer = result;\n          old_buffer = p;\n        }\n        goto LAB_00082088;\n      }\n    }\n    result = (int *)_malloc_r(mem_lock,size);\n    if (result == (int *)0x0) goto LAB_000820a0;\n    flag = old_buffer[-1];\n    if (result + -2 != (int *)((flag & 0xfffffffe) + (int)new_buffer)) {\n      old_size = old_size - 4;\n      if (old_size < 0x25) {\n        new_buffer = old_buffer;\n        p = result;\n        if (0x13 < old_size) {\n          *result = *old_buffer;\n          result[1] = old_buffer[1];\n          if (old_size < 0x1c) {\n            new_buffer = old_buffer + 2;\n            p = result + 2;\n          }\n          else {\n            result[2] = old_buffer[2];\n            result[3] = old_buffer[3];\n            if (old_size == 0x24) {\n              result[4] = old_buffer[4];\n              result[5] = old_buffer[5];\n              new_buffer = old_buffer + 6;\n              p = result + 6;\n            }\n            else {\n              new_buffer = old_buffer + 4;\n              p = result + 4;\n            }\n          }\n        }\n        *p = *new_buffer;\n        p[1] = new_buffer[1];\n        p[2] = new_buffer[2];\n      }\n      else {\n        memmove(result,old_buffer);\n      }\n      _free_r(mem_lock,old_buffer);\n      goto LAB_000820a0;\n    }\n    old_size = old_size + (result[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  offset = old_size - buffer_size;\n  result = old_buffer;\n  if (offset < 0x10) {\n    new_buffer[1] = flag & 1 | old_size;\n    *(uint *)((int)new_buffer + old_size + 4) = *(uint *)((int)new_buffer + old_size + 4) | 1;\n  }\n  else {\n    new_buffer[1] = flag & 1 | buffer_size;\n    *(uint *)((int)new_buffer + buffer_size + 4) = offset | 1;\n    *(uint *)((int)new_buffer + offset + buffer_size + 4) = *(uint *)((int)new_buffer + offset + buffer_size + 4) | 1;\n    _free_r(mem_lock,(int)new_buffer + buffer_size + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(mem_lock);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "mem_lock",
                "param_2": "old_buffer",
                "param_3": "size",
                "dVar1": "temp",
                "piVar2": "new_buffer",
                "uVar3": "offset",
                "iVar4": "i",
                "uVar5": "flag",
                "iVar6": "tmp",
                "piVar7": "p",
                "uVar8": "old_size",
                "uVar9": "buffer_size",
                "piVar10": "result"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "__malloc_unlock",
                "_free_r",
                "_malloc_r",
                "memmove",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "initialize_memory_0008236c",
            "code": "\nvoid initializeMemory_0008236c(int *memoryPointer,undefined4 size)\n\n{\n  int allocatedSize;\n  \n  DAT_20071244 = 0;\n  allocatedSize = _sbrk(size);\n  if ((allocatedSize == -1) && (DAT_20071244 != 0)) {\n    *memoryPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "initialize_memory_0008236c",
                "param_1": "memoryPointer",
                "param_2": "size",
                "iVar1": "allocatedSize"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_uint_arrays_00082390",
            "code": "\nint compareUintArrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (temp1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)array2 & 3;\n    if (temp1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      temp1 = *ptr1;\n      ptr2 = array2 + 1;\n      temp3 = *array2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\nLAB_0008259a:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      temp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp2 = *array1;\n        temp3 = array1[1];\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto LAB_0008258e;\n        temp4 = *ptr1;\n        temp1 = ptr1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    temp1 = *array1;\n    temp2 = array1[1];\n    temp3 = *array2;\n    temp4 = array2[1];\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto LAB_0008259a;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\nLAB_0008259e:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 | temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - LZCOUNT(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\nLAB_0008258e:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5"
            },
            "calling": [
                "equals"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copyString_000825cc(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *ptrNextInt;\n  uint *ptrNextUInt;\n  uint currentUInt;\n  uint shiftedUInt;\n  uint *ptrDest;\n  bool isZero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    ptrNextUInt = src;\n    if (((uint)src & 1) != 0) {\n      ptrNextUInt = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = ptrNextUInt;\n    if (((uint)ptrNextUInt & 2) != 0) {\n      src = (uint *)((int)ptrNextUInt + 2);\n      currentShort = *(ushort *)ptrNextUInt;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  currentUInt = *src;\n  ptrNextUInt = src + 1;\n  ptrDest = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentUInt + 0xfefefeff & ~currentUInt & 0x80808080) != 0) goto LAB_00082630;\n    ptrDest = dest + 1;\n    *dest = currentUInt;\n    ptrNextUInt = src + 2;\n    currentUInt = src[1];\n  }\n  while( true ) {\n    ptrNextInt = ptrNextUInt + 1;\n    shiftedUInt = *ptrNextUInt;\n    dest = ptrDest;\n    if ((currentUInt + 0xfefefeff & ~currentUInt & 0x80808080) != 0) break;\n    dest = ptrDest + 1;\n    *ptrDest = currentUInt;\n    currentUInt = shiftedUInt;\n    if ((shiftedUInt + 0xfefefeff & ~shiftedUInt & 0x80808080) != 0) break;\n    ptrNextUInt = ptrNextUInt + 2;\n    currentUInt = *ptrNextInt;\n    ptrDest = ptrDest + 2;\n    *dest = shiftedUInt;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)currentUInt;\n    shiftedUInt = currentUInt & 0xff;\n    currentUInt = currentUInt >> 8 | currentUInt << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (shiftedUInt != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "ptrNextInt",
                "puVar4": "ptrNextUInt",
                "uVar5": "currentUInt",
                "uVar6": "shiftedUInt",
                "puVar7": "ptrDest",
                "bVar8": "isZero"
            },
            "calling": [
                "move",
                "copy",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_trailing_zeros_00082688",
            "code": "\nint countTrailingZeros_00082688(uint num)\n\n{\n  int count;\n  uint *ptr;\n  uint data;\n  bool isZero;\n  \n  ptr = (uint *)(num & 0xfffffffc);\n  count = -(num & 3);\n  data = *ptr;\n  if ((num & 3) != 0) {\n    data = data | 0xffffffffU >> ((count + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (data + 0xfefefeff & ~data & 0x80808080) == 0) {\n    count = count + 4;\n    data = *ptr;\n  }\n  isZero = (data & 0xff) == 0;\n  if (!isZero) {\n    count = count + 1;\n    isZero = (data & 0xff00) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n    isZero = (data & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_trailing_zeros_00082688",
                "param_1": "num",
                "iVar1": "count",
                "puVar2": "ptr",
                "uVar3": "data",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "FUN_000810a6",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_to_file_00082824",
            "code": "\nint writeToFile_00082824(undefined4 stream,int fileDesc,int **buffer)\n\n{\n  int *currentBuffer;\n  int result;\n  int *remainingBuffer;\n  uint count;\n  undefined4 *dataPtr;\n  uint bufferSize;\n  uint numBuffers;\n  \n  if (-1 < *(int *)(fileDesc + 100) << 0x12) {\n    result = __sfvwrite_r();\n    buffer[2] = (int *)0x0;\n    buffer[1] = (int *)0x0;\n    return result;\n  }\n  remainingBuffer = buffer[2];\n  currentBuffer = *buffer;\n  while (remainingBuffer != (int *)0x0) {\n    bufferSize = currentBuffer[1];\n    numBuffers = bufferSize >> 2;\n    if (numBuffers != 0) {\n      dataPtr = (undefined4 *)(*currentBuffer + -4);\n      count = 0;\n      do {\n        dataPtr = dataPtr + 1;\n        result = _fputwc_r(stream,*dataPtr,fileDesc);\n        count = count + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (numBuffers != count);\n      remainingBuffer = buffer[2];\n    }\n    remainingBuffer = (int *)((int)remainingBuffer - (bufferSize & 0xfffffffc));\n    buffer[2] = remainingBuffer;\n    currentBuffer = currentBuffer + 2;\n  }\n  result = 0;\nLAB_00082864:\n  buffer[2] = (int *)0x0;\n  buffer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_to_file_00082824",
                "param_1": "stream",
                "param_2": "fileDesc",
                "param_3": "buffer",
                "piVar1": "currentBuffer",
                "iVar2": "result",
                "piVar3": "remainingBuffer",
                "uVar4": "count",
                "puVar5": "dataPtr",
                "uVar6": "bufferSize",
                "uVar7": "numBuffers"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_0008289c(int buffer,int format,int *******arg,int **args)\n\n{\n  bool hasFlag;\n  bool hasWidthSpecifier;\n  bool hasPrecisionSpecifier;\n  char signChar;\n  bool hasZeroSpecifier;\n  int ********formatArgs;\n  int *argPtr;\n  int result;\n  char charVal;\n  int *******pppppppiVar10;\n  uint digit;\n  int **argPtrPtr;\n  uint flags;\n  uint ch;\n  int count;\n  int ********pfirstArgPtr;\n  int i;\n  int *******argDistance;\n  int *argValue;\n  int *******argPtrPtr;\n  uint width;\n  int *argValueHigh;\n  int *******argDistance;\n  undefined4 argWidth;\n  int ********signArg;\n  bool isNegative;\n  longlong value;\n  int *******argDistanceMax;\n  int *******argDistanceTemp;\n  int **argPtrPtr;\n  int totalChars;\n  char *hexDigits;\n  char signChar;\n  undefined padChar;\n  undefined hexLowerCase;\n  int ********firstArgPtr;\n  int argCount;\n  int *******formatArgsTemp;\n  undefined isHexFlag;\n  char tempChar;\n  undefined tempChar;\n  undefined formatArgs [4];\n  int *******formatArgsTempArray [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = __swsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = __sbprintf(buffer,format,arg,args);\n    return result;\n  }\nLAB_000828ee:\n  hexDigits = (char *)0x0;\n  formatArgsTemp = (int *******)0x0;\n  argCount = 0;\n  totalChars = 0;\n  formatArgs = (int ********)formatArgs;\n  argPtrPtr = args;\n  firstArgPtr = (int ********)formatArgs;\nLAB_00082902:\n  pppppppiVar10 = arg;\n  if ((*(char *)arg != '\\0') && (*(char *)arg != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    argPtrPtr = (int *******)((int)pppppppiVar10 - (int)arg);\n    if (argPtrPtr != (int *******)0x0) {\n      argCount = argCount + 1;\n      formatArgsTemp = (int *******)((int)formatArgsTemp + (int)argPtrPtr);\n      *formatArgs = arg;\n      formatArgs[1] = argPtrPtr;\n      if (argCount < 8) {\n        formatArgs = formatArgs + 2;\n      }\n      else {\n        if (formatArgsTemp == (int *******)0x0) {\n          totalChars = totalChars + (int)argPtrPtr;\n          argCount = 0;\n          formatArgs = (int ********)formatArgs;\n          goto LAB_00082952;\n        }\n        result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n        formatArgs = (int ********)formatArgs;\n        if (result != 0) goto LAB_00083142;\n      }\n      totalChars = totalChars + (int)argPtrPtr;\n    }\n  }\nLAB_00082952:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    signChar = '\\0';\n    ch = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    flags = 0;\n    hasZeroSpecifier = false;\n    hasWidthSpecifier = false;\n    hasFlag = false;\n    hasPrecisionSpecifier = false;\n    isNegative = false;\n    argPtrPtr = (int *******)0x0;\n    argDistanceTemp = (int *******)0xffffffff;\n    arg = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082976:\n    arg = (int *******)((int)arg + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        argDistanceMax = (int *******)0x1;\n        argDistanceTemp = (int *******)0x1;\n        signArg = (int ********)&isHexFlag;\n        isHexFlag = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      hasPrecisionSpecifier = true;\n      ch = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x2a:\n      argPtrPtr = (int *******)*argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      if ((int)argPtrPtr < 0) {\n        argPtrPtr = (int *******)-(int)argPtrPtr;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)arg;\n      signChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)arg;\n      pppppppiVar10 = (int *******)((int)arg + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)arg + 1);\n        argDistanceTemp = (int *******)*argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        arg = pppppppiVar10;\n        if ((int)argDistanceTemp < 0) {\n          argDistanceTemp = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        width = 0;\n        do {\n          arg = (int *******)((int)pppppppiVar10 + 1);\n          ch = (uint)*(byte *)pppppppiVar10;\n          width = digit + width * 10;\n          digit = ch - 0x30;\n          pppppppiVar10 = arg;\n        } while (digit < 10);\n        argDistanceTemp = (int *******)(width | (int)width >> 0x1f);\n      }\n      else {\n        argDistanceTemp = (int *******)0x0;\n        arg = pppppppiVar10;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      hasWidthSpecifier = true;\n      if (hasFlag == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argValue = *argPtrPtr;\n      argValueHigh = argPtrPtr[1];\n      argPtrPtr = argPtrPtr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      hasWidthSpecifier = true;\n      if (hasFlag != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)hasWidthSpecifier << 4;\n      count = (uint)hasFlag << 5;\n      if ((hasWidthSpecifier == 0) && (count = (uint)isNegative << 6, isNegative != 0)) {\n        argValue = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValueHigh = (int *)0x0;\n      }\n      else {\n        result = count;\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValueHigh = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      hasWidthSpecifier = true;\n      if (hasFlag != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((hasWidthSpecifier) || (isNegative == false)) {\n        result = 1;\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValueHigh = (int *)0x0;\n      }\n      else {\n        argValueHigh = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexDigits = \"0123456789ABCDEF\";\n      if (hasFlag == false) goto LAB_00082efa;\nLAB_00082d1a:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrPtr + 2;\n      argValue = *argPtrPtr;\n      argValueHigh = argPtrPtr[1];\n      goto LAB_00082d2e;\n    case 99:\n      argValue = *argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      argDistanceMax = (int *******)0x1;\n      isHexFlag = SUB41(argValue,0);\n      argDistanceTemp = (int *******)0x1;\n      signArg = (int ********)&isHexFlag;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (hasFlag != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((hasWidthSpecifier == false) && (isNegative != false)) {\n        argValue = (int *)(int)*(short *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValueHigh = (int *)((int)argValue >> 0x1f);\n      }\n      else {\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValueHigh = (int *)((int)argValue >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)argValueHigh < 0) {\n        isNegative = argValue != (int *)0x0;\n        argValue = (int *)-(int)argValue;\n        argValueHigh = (int *)(-(int)argValueHigh - (uint)isNegative);\n        signChar = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)argDistanceTemp) {\n        flags = flags & 0xffffff7f;\n      }\n      hasZeroSpecifier = false;\n      ch = (uint)argValue | (uint)argValueHigh;\n      result = 1;\n      signChar = signChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isNegative = true;\n      ch = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)arg;\n      if (ch == 0x6c) {\n        hasFlag = true;\n        ch = (uint)*(byte *)((int)arg + 1);\n        arg = (int *******)((int)arg + 1);\n      }\n      else {\n        hasWidthSpecifier = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (hasFlag == false) {\n        if (hasWidthSpecifier == false) {\n          if (isNegative) {\n            argValue = *argPtrPtr;\n            argPtrPtr = argPtrPtr + 1;\n            *(short *)argValue = (short)totalChars;\n          }\n          else {\n            argValue = *argPtrPtr;\n            argPtrPtr = argPtrPtr + 1;\n            *argValue = totalChars;\n          }\n        }\n        else {\n          argValue = *argPtrPtr;\n          argPtrPtr = argPtrPtr + 1;\n          *argValue = totalChars;\n        }\n      }\n      else {\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        *argValue = totalChars;\n        argValue[1] = totalChars >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (hasFlag == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrPtr + 2;\n      argValue = *argPtrPtr;\n      argValueHigh = argPtrPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      argValue = *argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      hexLowerCase = 0x78;\n      hasZeroSpecifier = true;\n      argValueHigh = (int *)0x0;\n      padChar = 0x30;\n      hexDigits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      hasFlag = true;\n      ch = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x73:\n      signArg = (int ********)*argPtrPtr;\n      signChar = '\\0';\n      argPtrPtr = argPtrPtr + 1;\n      if (signArg != (int ********)0x0) {\n        if ((int)argDistanceTemp < 0) {\n          argDistanceTemp = (int *******)strlen(signArg);\n          pppppppiVar10 = (int *******)0x0;\n          signChar = signChar;\n        }\n        else {\n          result = memchr(signArg,0,argDistanceTemp);\n          signChar = signChar;\n          if (result == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            argDistance = (int *******)(result - (int)signArg);\n            if ((int)argDistanceTemp <= (int)(int *******)(result - (int)signArg)) {\n              argDistance = argDistanceTemp;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            argDistanceTemp = argDistance;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < argDistanceTemp) {\n        argDistanceTemp = (int *******)0x6;\n      }\n      argDistanceMax = (int *******)((uint)argDistanceTemp & ~((int)argDistanceTemp >> 0x1f));\n      signArg = (int ********)&UNK_00085728;\nLAB_00082d76:\n      signChar = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!hasFlag) goto LAB_00082ce0;\nLAB_00082bc6:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrPtr + 2;\n      argValue = *argPtrPtr;\n      argValueHigh = argPtrPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexDigits = \"0123456789abcdef\";\n      if (hasFlag != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((hasWidthSpecifier == false) && (isNegative != false)) {\n        argValueHigh = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n      }\n      else {\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argValueHigh = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((hasPrecisionSpecifier) && (((uint)argValue | (uint)argValueHigh) != 0)) {\n        hasZeroSpecifier = true;\n        padChar = 0x30;\n        result = 2;\n        hexLowerCase = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    signChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)argDistanceTemp) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)argValue | (uint)argValueHigh;\njoined_r0x00082adc:\n    value = CONCAT44(argValueHigh,argValue);\n    pppppppiVar10 = argDistanceTemp;\n    if ((ch == 0) && (argDistanceTemp == (int *******)0x0)) {\n      signArg = (int ********)formatArgs;\n      if ((result != 0) || (!hasPrecisionSpecifier)) goto LAB_00082b04;\n      signArg = (int ********)(&tempChar + 1);\n      tempChar = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (argValueHigh != (int *)0x0 || (int *)0x9 < argValue) {\n        pfirstArgPtr = (int ********)(&tempChar + 1);\n        do {\n          signArg = pfirstArgPtr;\n          argWidth = (undefined4)((ulonglong)value >> 0x20);\n          charVal = '\\n';\n          __aeabi_uldivmod((int)value,argWidth,10,0);\n          *(char *)signArg = charVal + '0';\n          value = __aeabi_uldivmod((int)value,argWidth,10,0);\n          pfirstArgPtr = (int ********)((int)signArg + -1);\n        } while (value != 0);\n        argDistanceTemp = (int *******)((int)formatArgs - (int)signArg);\n        goto LAB_00082b04;\n      }\n      tempChar = (char)argValue + '0';\n      signArg = (int ********)(&tempChar + 1);\n      goto LAB_00083282;\n    }\n    pfirstArgPtr = (int ********)(&tempChar + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      signArg = pfirstArgPtr;\n      ch = (uint)argValue & 0xf;\n      argValue = (int *)((uint)argValue >> 4 | (int)argValueHigh << 0x1c);\n      argValueHigh = (int *)((uint)argValueHigh >> 4);\n      *(char *)signArg = hexDigits[ch];\n      pfirstArgPtr = (int ********)((int)signArg + -1);\n    } while (((uint)argValue | (uint)argValueHigh) != 0);\n    argDistanceTemp = (int *******)((int)formatArgs - (int)signArg);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (formatArgsTemp != (int *******)0x0) {\n    __sprint_r_part_0(buffer,format,&firstArgPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalChars;\nLAB_000830e2:\n  do {\n    signArg = pfirstArgPtr;\n    argPtr = (int *)((uint)argValue >> 3 | (int)argValueHigh << 0x1d);\n    argValueHigh = (int *)((uint)argValueHigh >> 3);\n    result = ((uint)argValue & 7) + 0x30;\n    *(char *)signArg = (char)result;\n    pfirstArgPtr = (int ********)((int)signArg + -1);\n    argValue = argPtr;\n  } while (((uint)argPtr | (uint)argValueHigh) != 0);\n  if (hasPrecisionSpecifier) {\n    if (result == 0x30) {\nLAB_00082afe:\n      argDistanceTemp = (int *******)((int)formatArgs - (int)signArg);\n    }\n    else {\n      *(undefined *)((int)signArg + -1) = 0x30;\n      signArg = pfirstArgPtr;\n      argDistanceTemp = (int *******)((int)formatArgs - (int)pfirstArgPtr);\n    }\n  }\n  else {\nLAB_00083282:\n    argDistanceTemp = (int *******)((int)formatArgs - (int)signArg);\n  }\nLAB_00082b04:\n  argDistanceMax = argDistanceTemp;\n  if ((int)argDistanceTemp < (int)pppppppiVar10) {\n    argDistanceMax = pppppppiVar10;\n  }\n  if (signChar != '\\0') {\n    argDistanceMax = (int *******)((int)argDistanceMax + 1);\n  }\nLAB_00082b1e:\n  if (hasZeroSpecifier) {\n    argDistanceMax = (int *******)((int)argDistanceMax + 2);\n  }\n  if ((flags == 0) &&\n     (argDistance = (int *******)((int)argPtrPtr - (int)argDistanceMax), 0 < (int)argDistance)) {\n    if ((int)argDistance < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        argDistance = argDistance;\n        result = argCount + 1;\n        formatArgsTemp = formatArgsTemp + 4;\n        *formatArgs = (int *******)0x856f0;\n        formatArgs[1] = (int *******)0x10;\n        if (result < 8) {\n          count = argCount + 2;\n          formatArgs = formatArgs + 2;\n          argCount = result;\n        }\n        else if (formatArgsTemp == (int *******)0x0) {\n          count = 1;\n          formatArgs = (int ********)formatArgs;\n          argCount = 0;\n        }\n        else {\n          argCount = result;\n          result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n          if (result != 0) goto LAB_00083142;\n          count = argCount + 1;\n          formatArgs = (int ********)formatArgs;\n        }\n        argDistance = argDistance + -4;\n      } while (0x10 < (int)argDistance);\n      argDistance = argDistance + -4;\n      argCount = count;\n    }\n    formatArgsTemp = (int *******)((int)formatArgsTemp + (int)argDistance);\n    *formatArgs = (int *******)0x856f0;\n    formatArgs[1] = argDistance;\n    if (argCount < 8) {\n      result = argCount + 1;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsTemp == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      formatArgs = (int ********)formatArgs;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      formatArgs = (int ********)formatArgs;\n    }\n  }\n  else {\n    result = argCount + 1;\n  }\n  count = result;\n  if (signChar != '\\0') {\n    formatArgsTemp = (int *******)((int)formatArgsTemp + 1);\n    count = 1;\n    *formatArgs = (int *******)&signChar;\n    formatArgs[1] = (int *******)0x1;\n    argCount = result;\n    if (result < 8) {\n      count = result + 1;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsTemp == (int *******)0x0) {\n      argCount = 0;\n      formatArgs = (int ********)formatArgs;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n      if (result != 0) goto LAB_00083142;\n      count = argCount + 1;\n      formatArgs = (int ********)formatArgs;\n    }\n  }\n  result = count;\n  i = argCount;\n  if (hasZeroSpecifier) {\n    formatArgsTemp = (int *******)((int)formatArgsTemp + 2);\n    *formatArgs = (int *******)&padChar;\n    formatArgs[1] = (int *******)0x2;\n    if (count < 8) {\n      result = count + 1;\n      i = count;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsTemp == (int *******)0x0) {\n      result = 1;\n      i = 0;\n      formatArgs = (int ********)formatArgs;\n    }\n    else {\n      argCount = count;\n      result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      i = argCount;\n      formatArgs = (int ********)formatArgs;\n    }\n  }\n  argCount = i;\n  if ((flags == 0x80) &&\n     (argDistance = (int *******)((int)argPtrPtr - (int)argDistanceMax), 0 < (int)argDistance)) {\n    if (0x10 < (int)argDistance) {\n      do {\n        while( true ) {\n          argDistance = argDistance;\n          argCount = i + 1;\n          formatArgsTemp = formatArgsTemp + 4;\n          *formatArgs = (int *******)\"0000000000000000\";\n          formatArgs[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = i + 2;\n          formatArgs = formatArgs + 2;\nLAB_000831f2:\n          i = argCount;\n          argDistance = argDistance + -4;\n          if ((int)(argDistance + -4) < 0x11) goto LAB_00083218;\n        }\n        if (formatArgsTemp != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n          if (result == 0) {\n            result = argCount + 1;\n            formatArgs = (int ********)formatArgs;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        i = 0;\n        argDistance = argDistance + -4;\n        formatArgs = (int ********)formatArgs;\n      } while (0x10 < (int)(argDistance + -4));\nLAB_00083218:\n      argDistance = argDistance + -4;\n    }\n    formatArgsTemp = (int *******)((int)formatArgsTemp + (int)argDistance);\n    *formatArgs = (int *******)\"0000000000000000\";\n    formatArgs[1] = argDistance;\n    argCount = result;\n    if (result < 8) {\n      result = result + 1;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsTemp == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      formatArgs = (int ********)formatArgs;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      formatArgs = (int ********)formatArgs;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)argDistanceTemp);\n  pfirstArgPtr = (int ********)formatArgs;\n  if ((int)pppppppiVar10 < 1) {\nLAB_0008302a:\n    formatArgsTemp = (int *******)((int)formatArgsTemp + (int)argDistanceTemp);\n    *formatArgs = (int *******)signArg;\n    formatArgs[1] = argDistanceTemp;\n    argDistanceTemp = formatArgsTemp;\n    argCount = result;\n    if (result < 8) goto LAB_000831be;\n    if (formatArgsTemp == (int *******)0x0) {\n      argCount = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    count = argCount;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          argDistance = pppppppiVar10;\n          argCount = count + 1;\n          formatArgsTemp = formatArgsTemp + 4;\n          *formatArgs = (int *******)\"0000000000000000\";\n          formatArgs[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = count + 2;\n          formatArgs = formatArgs + 2;\nLAB_00082fe6:\n          count = argCount;\n          pppppppiVar10 = argDistance + -4;\n          if ((int)(argDistance + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (formatArgsTemp != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n          if (result == 0) {\n            result = argCount + 1;\n            formatArgs = (int ********)formatArgs;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        formatArgs = (int ********)formatArgs;\n        count = 0;\n        pppppppiVar10 = argDistance + -4;\n      } while (0x10 < (int)(argDistance + -4));\nLAB_0008300e:\n      pppppppiVar10 = argDistance + -4;\n    }\n    formatArgsTemp = (int *******)((int)formatArgsTemp + (int)pppppppiVar10);\n    *formatArgs = (int *******)\"0000000000000000\";\n    formatArgs[1] = pppppppiVar10;\n    if (result < 8) {\n      result = result + 1;\n      formatArgs = formatArgs + 2;\n      goto LAB_0008302a;\n    }\n    if (formatArgsTemp != (int *******)0x0) {\n      argCount = result;\n      result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      formatArgs = (int ********)formatArgs;\n      goto LAB_0008302a;\n    }\n    formatArgsTempArray[0] = argDistanceTemp;\n    argCount = 1;\n    formatArgs = (int ********)formatArgs;\n    formatArgs = (undefined  [4])signArg;\nLAB_000831be:\n    pfirstArgPtr = formatArgs + 2;\n    formatArgsTemp = argDistanceTemp;\n  }\n  if (((flags & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)argPtrPtr - (int)argDistanceMax), 0 < (int)pppppppiVar10)) {\n    result = argCount;\n    if ((int)pppppppiVar10 < 0x11) {\n      count = argCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argCount = result + 1;\n          formatArgsTemp = formatArgsTemp + 4;\n          *pfirstArgPtr = (int *******)0x856f0;\n          pfirstArgPtr[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          count = result + 2;\n          pfirstArgPtr = pfirstArgPtr + 2;\nLAB_0008307a:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          result = argCount;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_000830a2;\n        }\n        if (formatArgsTemp != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n          if (result == 0) {\n            count = argCount + 1;\n            pfirstArgPtr = (int ********)formatArgs;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        count = 1;\n        result = 0;\n        pfirstArgPtr = (int ********)formatArgs;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_000830a2:\n    formatArgsTemp = (int *******)((int)formatArgsTemp + (int)pppppppiVar10);\n    *pfirstArgPtr = (int *******)0x856f0;\n    pfirstArgPtr[1] = pppppppiVar10;\n    argCount = count;\n    if (7 < count) {\n      if (formatArgsTemp == (int *******)0x0) {\n        if ((int)argDistanceMax < (int)argPtrPtr) {\n          argDistanceMax = argPtrPtr;\n        }\n        totalChars = totalChars + (int)argDistanceMax;\n        goto LAB_00083186;\n      }\n      result = __sprint_r_part_0(buffer,format,&firstArgPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)argDistanceMax < (int)argPtrPtr) {\n    argDistanceMax = argPtrPtr;\n  }\n  totalChars = totalChars + (int)argDistanceMax;\n  if ((formatArgsTemp != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,format,&firstArgPtr), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  argCount = 0;\n  formatArgs = (int ********)formatArgs;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  argPtrPtr = (int *******)0x0;\n  pppppppiVar10 = arg;\n  do {\n    arg = (int *******)((int)pppppppiVar10 + 1);\n    ch = (uint)*(byte *)pppppppiVar10;\n    argPtrPtr = (int *******)(digit + (int)argPtrPtr * 10);\n    digit = ch - 0x30;\n    pppppppiVar10 = arg;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)arg;\n  if (signChar == '\\0') {\n    signChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "format_string_0008289c",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "arg",
                "param_4": "args",
                "bVar1": "hasFlag",
                "bVar2": "hasWidthSpecifier",
                "bVar3": "hasPrecisionSpecifier",
                "cVar4": "signChar",
                "bVar5": "hasZeroSpecifier",
                "ppppppppiVar6": "formatArgs",
                "piVar7": "argPtr",
                "iVar8": "result",
                "cVar9": "charVal",
                "uVar11": "digit",
                "ppiVar12": "argPtrPtr",
                "uVar13": "flags",
                "uVar14": "ch",
                "iVar15": "count",
                "pppppppiVar16": "firstArgPtr",
                "iVar17": "i",
                "pppppppiVar18": "argDistance",
                "piVar19": "argValue",
                "pppppppiVar20": "argPtrPtr",
                "uVar21": "width",
                "piVar22": "argValueHigh",
                "pppppppiVar23": "argDistance",
                "uVar24": "argWidth",
                "ppppppppiVar25": "signArg",
                "bVar26": "isNegative",
                "lVar27": "value",
                "local_dc": "argDistanceMax",
                "local_d4": "argDistanceTemp",
                "local_c8": "argPtrPtr",
                "local_c4": "totalChars",
                "local_c0": "hexDigits",
                "local_a1": "signChar",
                "local_a0": "padChar",
                "local_9f": "hexLowerCase",
                "local_9c": "firstArgPtr",
                "local_98": "argCount",
                "local_94": "formatArgsTemp",
                "local_90": "isHexFlag",
                "cStack_6a": "tempChar",
                "local_69": "tempChar",
                "local_68": "formatArgs",
                "local_64": "formatArgsTempArray"
            },
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__aeabi_uldivmod",
                "__sbprintf",
                "strlen",
                "__swsetup_r",
                "__sinit",
                "__sprint_r.part.0",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_formatted_output_000834f0",
            "code": "\nint printFormattedOutput_000834f0(undefined4 outputStream,int dataBuffer)\n\n{\n  int result;\n  int flushResult;\n  undefined *local_488 [2];\n  undefined4 stringLength1;\n  ushort ushortValue1;\n  undefined2 ushortValue2;\n  undefined *stringPointer;\n  undefined4 stringLength2;\n  undefined4 integerValue;\n  undefined4 integerValue2;\n  undefined4 integerValue3;\n  undefined4 integerValue4;\n  undefined stackBuffer [1024];\n  \n  integerValue4 = *(undefined4 *)(dataBuffer + 100);\n  integerValue2 = *(undefined4 *)(dataBuffer + 0x1c);\n  ushortValue2 = *(undefined2 *)(dataBuffer + 0xe);\n  integerValue3 = *(undefined4 *)(dataBuffer + 0x24);\n  local_488[0] = stackBuffer;\n  ushortValue1 = *(ushort *)(dataBuffer + 0xc) & 0xfffd;\n  stringLength1 = 0x400;\n  stringLength2 = 0x400;\n  integerValue = 0;\n  stringPointer = local_488[0];\n  result = _vfiprintf_r(outputStream,local_488);\n  if ((-1 < result) && (flushResult = _fflush_r(outputStream,local_488), flushResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)ushortValue1 << 0x19) < 0) {\n    *(ushort *)(dataBuffer + 0xc) = *(ushort *)(dataBuffer + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_formatted_output_000834f0",
                "param_1": "outputStream",
                "param_2": "dataBuffer",
                "iVar1": "result",
                "iVar2": "flushResult",
                "local_480": "stringLength1",
                "local_47c": "ushortValue1",
                "local_47a": "ushortValue2",
                "local_478": "stringPointer",
                "local_474": "stringLength2",
                "local_470": "integerValue",
                "local_46c": "integerValue2",
                "local_464": "integerValue3",
                "local_424": "integerValue4",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_0008356c",
            "code": "\nundefined4 initialize_0008356c(undefined4 *output,int *input)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  ushort tempVar4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  tempVar4 = *(ushort *)(input + 3);\n  tempVar3 = (uint)tempVar4;\n  if ((int)(tempVar3 << 0x1c) < 0) {\n    tempVar2 = input[4];\n  }\n  else {\n    if (-1 < (int)(tempVar3 << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = tempVar4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tempVar3 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          _free_r(output);\n          tempVar4 = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      tempVar2 = input[4];\n      tempVar4 = tempVar4 & 0xffdb;\n      *input = tempVar2;\n      input[1] = 0;\n    }\n    else {\n      tempVar2 = input[4];\n    }\n    *(ushort *)(input + 3) = tempVar4 | 8;\n    tempVar3 = (uint)(tempVar4 | 8);\n  }\n  if ((tempVar2 == 0) && ((tempVar3 & 0x280) != 0x200)) {\n    __smakebuf_r(output,input);\n    tempVar3 = (uint)*(ushort *)(input + 3);\n    tempVar2 = input[4];\n  }\n  if ((tempVar3 & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(tempVar3 << 0x1e)) {\n      tempVar1 = input[5];\n    }\n    input[2] = tempVar1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_0008356c",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_error_handler_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeErrorHandler_000836ec(void)\n\n{\n  dword *relPtr;\n  dword exitCode;\n  int count;\n  code *unrecoveredJumpTable;\n  \n  raise(6);\n  unrecoveredJumpTable = (code *)0x836fb;\n  exitCode = _exit(1);\n  if (relocations[48].r_offset == 0) {\n    relocations[48].r_offset = 0x20070184;\n  }\n  count = *(int *)(relocations[48].r_offset + 4);\n  relPtr = (dword *)relocations[48].r_offset;\n  if (0x1f < count) {\n    relPtr = (dword *)allocateMemory(400);\n    if (relPtr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    *relPtr = relocations[48].r_offset;\n    relPtr[1] = 0;\n    count = 0;\n    relocations[48].r_offset = (dword)relPtr;\n    relPtr[0x62] = 0;\n    relPtr[99] = 0;\n  }\n  relPtr[1] = count + 1;\n  relPtr[count + 2] = exitCode;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_error_handler_000836ec",
                "pdVar1": "relPtr",
                "dVar2": "exitCode",
                "iVar3": "count",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable",
                "Elf32_Rel_ARRAY_20070000": "relocations",
                "malloc": "allocateMemory"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_exit",
                "raise",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "decompressed_function_00083850",
            "code": "\nundefined4 decompressedFunction_00083850(int *dataPointer,int *infoPointer)\n\n{\n  int *tempPointer;\n  int tempVar;\n  ushort flag;\n  uint tempFlag;\n  int tempVar2;\n  code *functionPointer;\n  undefined4 result;\n  int tempVar3;\n  \n  if ((dataPointer != (int *)0x0) && (dataPointer[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(infoPointer + 3) == 0) {\n    return 0;\n  }\n  flag = *(ushort *)(infoPointer + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    tempVar3 = infoPointer[4];\n    if (tempVar3 == 0) {\n      return 0;\n    }\n    tempVar = *infoPointer;\n    if ((flag & 3) == 0) {\n      tempVar2 = infoPointer[5];\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *infoPointer = tempVar3;\n    tempVar = tempVar - tempVar3;\n    infoPointer[2] = tempVar2;\n    do {\n      if (tempVar < 1) {\n        return 0;\n      }\n      tempVar2 = (*(code *)infoPointer[9])(dataPointer,infoPointer[7],tempVar3,tempVar,result);\n      tempVar = tempVar - tempVar2;\n      tempVar3 = tempVar3 + tempVar2;\n    } while (0 < tempVar2);\nLAB_000837c8:\n    *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoPointer + 3) = flag | 0x800;\n  if ((infoPointer[1] < 1) && (infoPointer[0xf] < 1)) {\n    return 0;\n  }\n  functionPointer = (code *)infoPointer[10];\n  if (functionPointer == (code *)0x0) {\n    return 0;\n  }\n  tempFlag = (uint)(flag | 0x800);\n  tempVar3 = *dataPointer;\n  *dataPointer = 0;\n  if ((flag & 0x1000) == 0) {\n    tempVar = (*functionPointer)(dataPointer,infoPointer[7],tempFlag & 0x1000,1);\n    if ((tempVar == -1) && (tempVar2 = *dataPointer, tempVar2 != 0)) {\n      if ((tempVar2 == 0x1d) || (tempVar2 == 0x16)) {\n        *dataPointer = tempVar3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    tempFlag = (uint)*(ushort *)(infoPointer + 3);\n    functionPointer = (code *)infoPointer[10];\n  }\n  else {\n    tempVar = infoPointer[0x14];\n  }\n  if (((int)(tempFlag << 0x1d) < 0) && (tempVar = tempVar - infoPointer[1], infoPointer[0xc] != 0)) {\n    tempVar = tempVar - infoPointer[0xf];\n  }\n  tempVar = (*functionPointer)(dataPointer,infoPointer[7],tempVar,0);\n  if (tempVar == -1) {\n    tempVar2 = *dataPointer;\n    if (tempVar2 != 0) {\n      if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n        *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) & 0xf7ff;\n      *infoPointer = infoPointer[4];\n      infoPointer[1] = 0;\n      goto LAB_00083774;\n    }\n    flag = *(ushort *)(infoPointer + 3) & 0xf7ff;\n    infoPointer[1] = 0;\n    *(ushort *)(infoPointer + 3) = flag;\n    *infoPointer = infoPointer[4];\n  }\n  else {\n    flag = *(ushort *)(infoPointer + 3) & 0xf7ff;\n    *infoPointer = infoPointer[4];\n    *(ushort *)(infoPointer + 3) = flag;\n    infoPointer[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    infoPointer[0x14] = tempVar;\n  }\nLAB_00083774:\n  tempPointer = (int *)infoPointer[0xc];\n  *dataPointer = tempVar3;\n  if (tempPointer == (int *)0x0) {\n    return 0;\n  }\n  if (tempPointer != infoPointer + 0x10) {\n    _free_r(dataPointer);\n  }\n  infoPointer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "decompressed_function_00083850",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "piVar1": "tempPointer",
                "iVar2": "tempVar",
                "uVar3": "flag",
                "uVar4": "tempFlag",
                "iVar5": "tempVar2",
                "pcVar6": "functionPointer",
                "unaff_r4": "result",
                "iVar7": "tempVar3"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructures)\n\n{\n  undefined4 *struct1;\n  undefined4 *struct2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    struct1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &constant1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(struct1 + 3) = 4;\n    *struct1 = 0;\n    struct1[1] = 0;\n    struct1[2] = 0;\n    struct1[0x19] = 0;\n    *(undefined2 *)((int)struct1 + 0xe) = 0;\n    struct1[4] = 0;\n    struct1[5] = 0;\n    struct1[6] = 0;\n    memset(struct1 + 0x17,0,8);\n    struct2 = *(undefined4 **)(dataStructures + 8);\n    struct1[7] = struct1;\n    struct1[8] = 0x84221;\n    struct1[9] = 0x84245;\n    struct1[10] = 0x8427d;\n    struct1[0xb] = &constant2;\n    *(undefined2 *)((int)struct2 + 0xe) = 1;\n    *(undefined2 *)(struct2 + 3) = 9;\n    *struct2 = 0;\n    struct2[1] = 0;\n    struct2[2] = 0;\n    struct2[0x19] = 0;\n    struct2[4] = 0;\n    struct2[5] = 0;\n    struct2[6] = 0;\n    memset(struct2 + 0x17,0,8);\n    struct1 = *(undefined4 **)(dataStructures + 0xc);\n    struct2[7] = struct2;\n    struct2[8] = 0x84221;\n    struct2[9] = 0x84245;\n    struct2[10] = 0x8427d;\n    struct2[0xb] = &constant2;\n    *(undefined2 *)(struct1 + 3) = 0x12;\n    *(undefined2 *)((int)struct1 + 0xe) = 2;\n    *struct1 = 0;\n    struct1[1] = 0;\n    struct1[2] = 0;\n    struct1[0x19] = 0;\n    struct1[4] = 0;\n    struct1[5] = 0;\n    struct1[6] = 0;\n    memset(struct1 + 0x17,0,8);\n    struct1[7] = struct1;\n    struct1[8] = 0x84221;\n    struct1[9] = 0x84245;\n    struct1[10] = 0x8427d;\n    struct1[0xb] = &constant2;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructures",
                "puVar1": "struct1",
                "puVar2": "struct2",
                "LAB_0008387c_1": "constant1",
                "LAB_0008429c_1": "constant2"
            },
            "calling": [
                "fclose",
                "__swsetup_r",
                "__swbuf_r",
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "convert_and_write_000839b4",
            "code": "\nuint convertAndWrite_000839b4(undefined4 stream,uint value,byte **buffer)\n\n{\n  int maxBytes;\n  uint result;\n  uint byteValue;\n  byte *bufferPtr;\n  uint byteIndex;\n  byte convertedByte;\n  byte conversionStack [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (value - 1 < 0xff)) {\n    byteValue = value & 0xff;\n    convertedByte = (byte)byteValue;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(stream,&convertedByte,value,buffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return value;\n    }\n    byteValue = (uint)convertedByte;\n  }\n  byteIndex = 0;\n  do {\n    bufferPtr = buffer[2] + -1;\n    buffer[2] = bufferPtr;\n    if ((int)bufferPtr < 0) {\n      if ((int)buffer[6] <= (int)bufferPtr) {\n        **buffer = (byte)byteValue;\n        bufferPtr = *buffer;\n        byteValue = (uint)*bufferPtr;\n        if (byteValue != 10) goto LAB_00083a04;\n      }\n      maxBytes = __swbuf_r(stream,byteValue,buffer);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)byteValue;\n      bufferPtr = *buffer;\nLAB_00083a04:\n      *buffer = bufferPtr + 1;\n    }\n    if (result <= byteIndex + 1) {\n      return value;\n    }\n    byteValue = (uint)conversionStack[byteIndex];\n    byteIndex = byteIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "convert_and_write_000839b4",
                "param_1": "stream",
                "param_2": "value",
                "param_3": "buffer",
                "iVar1": "maxBytes",
                "uVar2": "result",
                "uVar3": "byteValue",
                "pbVar4": "bufferPtr",
                "uVar5": "byteIndex",
                "local_1c": "convertedByte",
                "abStack_1b": "conversionStack"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "__locale_mb_cur_max",
                "_wcrtomb_r",
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "allocate_memory_00083a74",
            "code": "\nundefined4 allocate_memory_00083a74(undefined4 param_ptr,int size)\n\n{\n  int result;\n  uint offset;\n  int aligned_address;\n  \n  __malloc_lock();\n  offset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  aligned_address = ((offset - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < aligned_address) {\n    result = _sbrk_r(param_ptr,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + offset) {\n      result = _sbrk_r(param_ptr,-aligned_address);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - aligned_address;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = offset - aligned_address | 1;\n        __malloc_unlock(param_ptr);\n        return 1;\n      }\n      aligned_address = _sbrk_r(param_ptr,0);\n      if (0xf < (int)(aligned_address - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = aligned_address - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             aligned_address - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  __malloc_unlock(param_ptr);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "param_ptr",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "offset",
                "iVar3": "aligned_address"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_binary_data_00083b10",
            "code": "\nvoid processBinaryData_00083b10(undefined4 mutex,int dataPointer)\n\n{\n  int indexVar1;\n  bool isOffset2007046c;\n  uint sizeVar;\n  dword offsetVar;\n  int indexVar2;\n  uint alignedSizeVar;\n  dword currentOffsetVar;\n  uint newOffsetVar;\n  dword tempOffsetVar;\n  \n  if (dataPointer == 0) {\n    return;\n  }\n  __malloc_lock();\n  sizeVar = *(uint *)(dataPointer + -4);\n  currentOffsetVar = dataPointer - 8;\n  alignedSizeVar = sizeVar & 0xfffffffe;\n  offsetVar = currentOffsetVar + alignedSizeVar;\n  newOffsetVar = *(uint *)(offsetVar + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == offsetVar) {\n    newOffsetVar = newOffsetVar + alignedSizeVar;\n    if (-1 < (int)(sizeVar << 0x1f)) {\n      currentOffsetVar = currentOffsetVar - *(int *)(dataPointer + -8);\n      indexVar2 = *(int *)(currentOffsetVar + 0xc);\n      indexVar1 = *(int *)(currentOffsetVar + 8);\n      newOffsetVar = newOffsetVar + *(int *)(dataPointer + -8);\n      *(int *)(indexVar1 + 0xc) = indexVar2;\n      *(int *)(indexVar2 + 8) = indexVar1;\n    }\n    offsetVar = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(currentOffsetVar + 4) = newOffsetVar | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = currentOffsetVar;\n    if (offsetVar <= newOffsetVar) {\n      _malloc_trim_r(mutex,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(offsetVar + 4) = newOffsetVar;\n    if ((sizeVar & 1) == 0) {\n      currentOffsetVar = currentOffsetVar - *(int *)(dataPointer + -8);\n      indexVar1 = *(int *)(currentOffsetVar + 8);\n      alignedSizeVar = alignedSizeVar + *(int *)(dataPointer + -8);\n      if (indexVar1 == 0x2007046c) {\n        isOffset2007046c = true;\n      }\n      else {\n        indexVar2 = *(int *)(currentOffsetVar + 0xc);\n        *(int *)(indexVar1 + 0xc) = indexVar2;\n        *(int *)(indexVar2 + 8) = indexVar1;\n        isOffset2007046c = false;\n      }\n    }\n    else {\n      isOffset2007046c = false;\n    }\n    if (-1 < *(int *)(offsetVar + newOffsetVar + 4) << 0x1f) {\n      alignedSizeVar = alignedSizeVar + newOffsetVar;\n      indexVar1 = *(int *)(offsetVar + 8);\n      if ((!isOffset2007046c) && (indexVar1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = currentOffsetVar;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = currentOffsetVar;\n        *(undefined4 *)(currentOffsetVar + 0xc) = 0x2007046c;\n        *(undefined4 *)(currentOffsetVar + 8) = 0x2007046c;\n        *(uint *)(currentOffsetVar + 4) = alignedSizeVar | 1;\n        *(uint *)(currentOffsetVar + alignedSizeVar) = alignedSizeVar;\n        goto LAB_00083ba4;\n      }\n      indexVar2 = *(int *)(offsetVar + 0xc);\n      *(int *)(indexVar1 + 0xc) = indexVar2;\n      *(int *)(indexVar2 + 8) = indexVar1;\n    }\n    *(uint *)(currentOffsetVar + 4) = alignedSizeVar | 1;\n    *(uint *)(currentOffsetVar + alignedSizeVar) = alignedSizeVar;\n    if (!isOffset2007046c) {\n      if (alignedSizeVar < 0x200) {\n        sizeVar = alignedSizeVar & 0xfffffff8;\n        indexVar1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + sizeVar);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(alignedSizeVar >> 3) >> 2 & 0xffU);\n        *(int *)(currentOffsetVar + 8) = indexVar1;\n        *(uint *)(currentOffsetVar + 0xc) = sizeVar + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + sizeVar) = currentOffsetVar;\n        *(dword *)(indexVar1 + 0xc) = currentOffsetVar;\n        __malloc_unlock(mutex);\n        return;\n      }\n      sizeVar = alignedSizeVar >> 9;\n      if (sizeVar < 5) {\n        indexVar1 = (alignedSizeVar >> 6) + 0x38;\n        indexVar2 = indexVar1 * 2;\n      }\n      else if (sizeVar < 0x15) {\n        indexVar1 = sizeVar + 0x5b;\n        indexVar2 = indexVar1 * 2;\n      }\n      else if (sizeVar < 0x55) {\n        indexVar1 = (alignedSizeVar >> 0xc) + 0x6e;\n        indexVar2 = indexVar1 * 2;\n      }\n      else if (sizeVar < 0x155) {\n        indexVar1 = (alignedSizeVar >> 0xf) + 0x77;\n        indexVar2 = indexVar1 * 2;\n      }\n      else if (sizeVar < 0x555) {\n        indexVar1 = (alignedSizeVar >> 0x12) + 0x7c;\n        indexVar2 = indexVar1 * 2;\n      }\n      else {\n        indexVar2 = 0xfc;\n        indexVar1 = 0x7e;\n      }\n      tempOffsetVar = indexVar2 * 4 + 0x20070464;\n      offsetVar = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[indexVar2];\n      if (offsetVar == tempOffsetVar) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (indexVar1 >> 2 & 0xffU);\n        tempOffsetVar = offsetVar;\n      }\n      else {\n        do {\n          if ((*(uint *)(offsetVar + 4) & 0xfffffffc) <= alignedSizeVar) break;\n          offsetVar = *(dword *)(offsetVar + 8);\n        } while (tempOffsetVar != offsetVar);\n        tempOffsetVar = *(dword *)(offsetVar + 0xc);\n      }\n      *(dword *)(currentOffsetVar + 0xc) = tempOffsetVar;\n      *(dword *)(currentOffsetVar + 8) = offsetVar;\n      *(dword *)(tempOffsetVar + 8) = currentOffsetVar;\n      *(dword *)(offsetVar + 0xc) = currentOffsetVar;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(mutex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_binary_data_00083b10",
                "param_1": "mutex",
                "param_2": "dataPointer",
                "iVar1": "indexVar1",
                "bVar2": "isOffset2007046c",
                "uVar3": "sizeVar",
                "dVar4": "offsetVar",
                "iVar5": "indexVar2",
                "uVar6": "alignedSizeVar",
                "dVar7": "currentOffsetVar",
                "uVar8": "newOffsetVar",
                "dVar9": "tempOffsetVar"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "__swsetup_r",
                "_malloc_r",
                "free",
                "_fflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "_malloc_trim_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "decompress_data_00083ca8",
            "code": "\nundefined4 decompressData_00083ca8(undefined4 *error_status,uint *input_data,uint **output_data)\n\n{\n  int swsetup_result;\n  uint temp_var1;\n  uint temp_var2;\n  ushort temp_var3;\n  uint temp_var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint temp_var9;\n  \n  if (output_data[2] != (uint *)0x0) {\n    temp_var3 = *(ushort *)(input_data + 3);\n    temp_var4 = (uint)temp_var3;\n    if (((int)(temp_var4 << 0x1c) < 0) && (input_data[4] != 0)) {\n      ptr2 = *output_data;\n    }\n    else {\n      swsetup_result = __swsetup_r(error_status,input_data);\n      if (swsetup_result != 0) {\n        return 0xffffffff;\n      }\n      temp_var3 = *(ushort *)(input_data + 3);\n      temp_var4 = (uint)temp_var3;\n      ptr2 = *output_data;\n    }\n    if ((temp_var3 & 2) == 0) {\n      temp_var1 = temp_var4 & 2;\n      temp_var7 = temp_var1;\n      temp_var5 = temp_var1;\n      temp_var9 = temp_var1;\n      if ((temp_var4 & 1) == 0) {\n        temp_var1 = 0;\n        temp_var7 = 0;\n        while( true ) {\n          while (temp_var1 == 0) {\n            temp_var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp_var1 = *ptr1;\n          }\n          temp_var5 = input_data[2];\n          if ((int)(temp_var4 << 0x16) < 0) {\n            if (temp_var1 < temp_var5) {\n              temp_var4 = *input_data;\n              temp_var5 = temp_var1;\n            }\n            else if ((temp_var4 & 0x480) == 0) {\n              temp_var4 = *input_data;\n            }\n            else {\n              swsetup_result = *input_data - input_data[4];\n              temp_var5 = swsetup_result + 1 + temp_var1;\n              temp_var6 = (int)(input_data[5] * 3) / 2;\n              if (temp_var5 <= temp_var6) {\n                temp_var5 = temp_var6;\n              }\n              if ((int)(temp_var4 << 0x15) < 0) {\n                temp_var6 = _malloc_r(error_status,temp_var5);\n                if (temp_var6 == 0) {\n                  *error_status = 0xc;\n                  temp_var3 = *(ushort *)(input_data + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(temp_var6,input_data[4],swsetup_result);\n                *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_var6 = _realloc_r(error_status);\n                if (temp_var6 == 0) {\n                  _free_r(error_status,input_data[4]);\n                  temp_var3 = *(ushort *)(input_data + 3) & 0xff7f;\n                  *error_status = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp_var4 = temp_var6 + swsetup_result;\n              input_data[4] = temp_var6;\n              input_data[5] = temp_var5;\n              *input_data = temp_var4;\n              input_data[2] = temp_var5 - swsetup_result;\n              temp_var5 = temp_var1;\n            }\n            memmove(temp_var4,temp_var7,temp_var5);\n            input_data[2] = input_data[2] - temp_var5;\n            *input_data = *input_data + temp_var5;\n            temp_var5 = temp_var1;\n          }\n          else if ((input_data[4] < *input_data) || (temp_var4 = input_data[5], temp_var1 < temp_var4)) {\n            if (temp_var1 < temp_var5) {\n              temp_var5 = temp_var1;\n            }\n            memmove(*input_data,temp_var7,temp_var5);\n            temp_var4 = input_data[2];\n            input_data[2] = temp_var4 - temp_var5;\n            *input_data = *input_data + temp_var5;\n            if ((temp_var4 - temp_var5 == 0) && (swsetup_result = _fflush_r(error_status,input_data), swsetup_result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            temp_var5 = 0x7fffffff;\n            if (temp_var1 < 0x7fffffff) {\n              temp_var5 = temp_var1;\n            }\n            temp_var5 = (*(code *)input_data[9])(error_status,input_data[7],temp_var7,(temp_var5 / temp_var4) * temp_var4);\n            if ((int)temp_var5 < 1) goto LAB_00083da2;\n          }\n          ptr1 = output_data[2];\n          temp_var7 = temp_var7 + temp_var5;\n          temp_var1 = temp_var1 - temp_var5;\n          output_data[2] = (uint *)((int)ptr1 - temp_var5);\n          if ((uint *)((int)ptr1 - temp_var5) == (uint *)0x0) break;\n          temp_var4 = (uint)*(ushort *)(input_data + 3);\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == 0) {\n            temp_var5 = *ptr2;\n            temp_var1 = ptr2[1];\n            temp_var9 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp_var9 == 0) {\n            swsetup_result = memchr(temp_var5,10,temp_var1);\n            if (swsetup_result == 0) {\n              temp_var7 = temp_var1 + 1;\n              temp_var9 = 1;\n            }\n            else {\n              temp_var7 = (swsetup_result + 1) - temp_var5;\n              temp_var9 = 1;\n            }\n          }\n          temp_var6 = *input_data;\n          temp_var4 = temp_var7;\n          if (temp_var1 <= temp_var7) {\n            temp_var4 = temp_var1;\n          }\n          temp_var2 = input_data[5];\n          if ((input_data[4] < temp_var6) && (temp_var8 = input_data[2] + temp_var2, (int)temp_var8 < (int)temp_var4)) {\n            memmove(temp_var6,temp_var5,temp_var8);\n            *input_data = *input_data + temp_var8;\n            swsetup_result = _fflush_r(error_status,input_data);\n            if (swsetup_result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp_var4 < (int)temp_var2) {\n            memmove(temp_var6,temp_var5,temp_var4);\n            input_data[2] = input_data[2] - temp_var4;\n            *input_data = temp_var4 + *input_data;\n            temp_var8 = temp_var4;\n          }\n          else {\n            temp_var8 = (*(code *)input_data[9])(error_status,input_data[7],temp_var5,temp_var2);\n            if ((int)temp_var8 < 1) goto LAB_00083da2;\n          }\n          temp_var7 = temp_var7 - temp_var8;\n          if (temp_var7 == 0) {\n            swsetup_result = _fflush_r(error_status,input_data);\n            if (swsetup_result != 0) goto LAB_00083da2;\n            temp_var9 = 0;\n          }\n          ptr1 = output_data[2];\n          temp_var5 = temp_var5 + temp_var8;\n          temp_var1 = temp_var1 - temp_var8;\n          output_data[2] = (uint *)((int)ptr1 - temp_var8);\n        } while ((uint *)((int)ptr1 - temp_var8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp_var1 = 0;\n      temp_var4 = 0;\n      do {\n        while( true ) {\n          temp_var7 = temp_var4;\n          if (0x7ffffbff < temp_var4) {\n            temp_var7 = 0x7ffffc00;\n          }\n          if (temp_var4 != 0) break;\n          temp_var1 = *ptr2;\n          temp_var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        swsetup_result = (*(code *)input_data[9])(error_status,input_data[7],temp_var1,temp_var7);\n        if (swsetup_result < 1) {\nLAB_00083da2:\n          temp_var3 = *(ushort *)(input_data + 3);\nLAB_00083da4:\n          *(ushort *)(input_data + 3) = temp_var3 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = output_data[2];\n        temp_var1 = temp_var1 + swsetup_result;\n        temp_var4 = temp_var4 - swsetup_result;\n        output_data[2] = (uint *)((int)ptr1 - swsetup_result);\n      } while ((uint *)((int)ptr1 - swsetup_result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "decompress_data_00083ca8",
                "param_1": "error_status",
                "param_2": "input_data",
                "param_3": "output_data",
                "iVar1": "swsetup_result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6",
                "uVar10": "temp_var7",
                "uVar11": "temp_var8",
                "local_2c": "temp_var9"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memcpy",
                "_realloc_r",
                "_free_r",
                "__swsetup_r",
                "_malloc_r",
                "_fflush_r",
                "memchr",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf_relocation_offset_0008400c",
            "code": "\ndword getElfRelocationOffset_0008400c(void)\n\n{\n  return relArray[275].relocationOffset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_file_00084018",
            "code": "\nvoid initializeFile_00084018(int fileDescriptor,int *fileInfo)\n\n{\n  ushort fileAttributes;\n  int fileStatus;\n  int mallocResult;\n  uint convertedAttributes;\n  bool isExecutable;\n  undefined fileStatBuffer [4];\n  uint filePermission;\n  \n  fileAttributes = *(ushort *)(fileInfo + 3);\n  convertedAttributes = (uint)fileAttributes;\n  if ((int)(convertedAttributes << 0x1e) < 0) {\n    *fileInfo = (int)fileInfo + 0x43;\n    fileInfo[4] = (int)fileInfo + 0x43;\n    fileInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileInfo + 0xe)) {\n    fileStatus = _fstat_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe),fileStatBuffer);\n    if (-1 < fileStatus) {\n      isExecutable = (filePermission & 0xf000) == 0x2000;\n      if (((filePermission & 0xf000) == 0x8000) && (fileInfo[10] == 0x8427d)) {\n        fileStatus = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x400;\n        fileInfo[0x13] = 0x400;\n      }\n      else {\n        fileStatus = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    fileAttributes = *(ushort *)(fileInfo + 3);\n    convertedAttributes = (uint)fileAttributes;\n  }\n  *(ushort *)(fileInfo + 3) = fileAttributes | 0x800;\n  if ((convertedAttributes & 0x80) == 0) {\n    fileStatus = 0x400;\n  }\n  else {\n    fileStatus = 0x40;\n  }\n  isExecutable = false;\nLAB_00084074:\n  mallocResult = _malloc_r(fileDescriptor,fileStatus);\n  fileAttributes = *(ushort *)(fileInfo + 3);\n  if (mallocResult == 0) {\n    if (-1 < (int)((uint)fileAttributes << 0x16)) {\n      *(ushort *)(fileInfo + 3) = fileAttributes | 2;\n      *fileInfo = (int)fileInfo + 0x43;\n      fileInfo[4] = (int)fileInfo + 0x43;\n      fileInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(fileDescriptor + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(fileInfo + 3) = fileAttributes | 0x80;\n    *fileInfo = mallocResult;\n    fileInfo[4] = mallocResult;\n    fileInfo[5] = fileStatus;\n    if ((isExecutable) && (fileStatus = _isatty_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe)), fileStatus != 0)) {\n      *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_file_00084018",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "uVar1": "fileAttributes",
                "iVar2": "fileStatus",
                "iVar3": "mallocResult",
                "uVar4": "convertedAttributes",
                "bVar5": "isExecutable",
                "auStack_54": "fileStatBuffer",
                "local_50": "filePermission"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_character_sequence_000840f8",
            "code": "\nuint * find_character_sequence_000840f8(uint *data,char character,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *ptr;\n  bool is_last_index;\n  \n  if (((uint)data & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      ptr = data;\n      do {\n        xor_result = *ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        data = ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        data = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != character) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_00084150;\n      } while (*(char *)data != character);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != character) {\n    ptr = (uint *)((int)data + 1);\n    length = length - 1;\n    do {\n      data = ptr;\n      if (((uint)data & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      ptr = (uint *)((int)data + 1);\n      length = length - 1;\n    } while (*(char *)data != character);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_character_sequence_000840f8",
                "param_1": "data",
                "param_2": "character",
                "param_3": "length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "handle_process_000841e4",
            "code": "\nint handleProcess_000841e4(uint processId)\n\n{\n  dword offset;\n  undefined4 pid;\n  int pointer;\n  code *functionPtr;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 linkRegister;\n  undefined4 constant;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < processId) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  pointer = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((pointer == 0) || (functionPtr = *(code **)(pointer + processId * 4), functionPtr == (code *)0x0)) {\n    pid = _getpid_r(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    pointer = _kill(pid,processId,processId,0,constant,register4,register5,linkRegister);\n    if ((pointer == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return pointer;\n  }\n  if (functionPtr == (code *)0x1) {\n    return 0;\n  }\n  if (functionPtr != (code *)0xffffffff) {\n    *(undefined4 *)(pointer + processId * 4) = 0;\n    (*functionPtr)(processId);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "handle_process_000841e4",
                "param_1": "processId",
                "dVar1": "offset",
                "uVar2": "pid",
                "iVar3": "pointer",
                "pcVar4": "functionPtr",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "linkRegister",
                "uVar5": "constant"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_read_count_00084220",
            "code": "\nvoid updateReadCount_00084220(undefined4 stream,int data)\n\n{\n  int bytesRead;\n  \n  bytesRead = _read_r(stream,(int)*(short *)(data + 0xe));\n  if (-1 < bytesRead) {\n    *(int *)(data + 0x50) = *(int *)(data + 0x50) + bytesRead;\n    return;\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_read_count_00084220",
                "param_1": "stream",
                "param_2": "data",
                "iVar1": "bytesRead"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "write_to_file_00084244",
            "code": "\nvoid writeToFile_00084244(int *fileDescriptor,int fileInfoPtr,undefined4 buffer,undefined4 size)\n\n{\n  int writeResult;\n  ushort fileOffset;\n  undefined4 unaff_register4;\n  undefined4 unaff_register5;\n  undefined4 unaff_register6;\n  undefined4 linkRegister;\n  \n  fileOffset = *(ushort *)(fileInfoPtr + 0xc);\n  if ((int)((uint)fileOffset << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(fileInfoPtr + 0xe),0,2);\n    fileOffset = *(ushort *)(fileInfoPtr + 0xc);\n  }\n  *(ushort *)(fileInfoPtr + 0xc) = fileOffset & 0xefff;\n  DAT_20071244 = 0;\n  writeResult = _write((int)*(short *)(fileInfoPtr + 0xe),buffer,size,size,unaff_register4,unaff_register5,unaff_register6,\n                 linkRegister);\n  if ((writeResult == -1) && (DAT_20071244 != 0)) {\n    *fileDescriptor = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "write_to_file_00084244",
                "param_1": "fileDescriptor",
                "param_2": "fileInfoPtr",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "writeResult",
                "uVar2": "fileOffset",
                "unaff_r4": "unaff_register4",
                "unaff_r5": "unaff_register5",
                "unaff_r6": "unaff_register6",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_file_position_0008427c",
            "code": "\nvoid updateFilePosition_0008427c(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  int seekResult;\n  ushort updatedFlag;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  if (seekResult == -1) {\n    updatedFlag = *(ushort *)(bufferAddress + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(bufferAddress + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(bufferAddress + 0x50) = seekResult;\n  }\n  *(ushort *)(bufferAddress + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_file_position_0008427c",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "iVar1": "seekResult",
                "uVar2": "updatedFlag"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int data_ptr,uint data_size,undefined4 *buffer_ptr,undefined4 param_4)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *byte_ptr;\n  int index;\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n    initialize_stream();\n  }\n  ushort_value = *(ushort *)(buffer_ptr + 3);\n  uint_value = (uint)ushort_value;\n  buffer_ptr[2] = buffer_ptr[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = buffer_ptr[4], index == 0)) {\n    index = setup_stream(data_ptr,buffer_ptr,ushort_value,uint_value,param_4);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(buffer_ptr + 3);\n    index = buffer_ptr[4];\n    uint_value = (uint)ushort_value;\n  }\n  data_size = data_size & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    byte_ptr = (undefined *)*buffer_ptr;\n    index = (int)byte_ptr - index;\n    if (index < (int)buffer_ptr[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer_ptr[0x19] = buffer_ptr[0x19] & 0xffffdfff;\n    byte_ptr = (undefined *)*buffer_ptr;\n    *(ushort *)(buffer_ptr + 3) = ushort_value | 0x2000;\n    index = (int)byte_ptr - index;\n    if (index < (int)buffer_ptr[5]) goto LAB_000842d6;\n  }\n  index = flush_stream(data_ptr,buffer_ptr);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  byte_ptr = (undefined *)*buffer_ptr;\n  index = 1;\nLAB_000842d8:\n  buffer_ptr[2] = buffer_ptr[2] + -1;\n  *buffer_ptr = byte_ptr + 1;\n  *byte_ptr = (char)data_size;\n  if (((buffer_ptr[5] == index) ||\n      (((int)((uint)*(ushort *)(buffer_ptr + 3) << 0x1f) < 0 && (data_size == 10)))) &&\n     (index = flush_stream(data_ptr,buffer_ptr), index != 0)) {\n    return 0xffffffff;\n  }\n  return data_size;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "buffer_ptr",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "byte_ptr",
                "iVar4": "index",
                "__sinit": "initialize_stream",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_stream"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__swsetup_r",
                "__sinit",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_function_and_check_result_0008434c",
            "code": "\nvoid executeFunctionAndCheckResult_0008434c(undefined4 *result,int length,undefined4 param,undefined4 *status)\n\n{\n  dword address;\n  undefined4 charset;\n  int returnValue;\n  undefined buffer [12];\n  \n  address = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (length == 0) {\n    charset = __locale_charset();\n    returnValue = (*(code *)address)(result,buffer,0,charset,status);\n  }\n  else {\n    charset = __locale_charset();\n    returnValue = (*(code *)address)(result,length,param,charset,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_function_and_check_result_0008434c",
                "param_1": "result",
                "param_2": "length",
                "param_3": "param",
                "param_4": "status",
                "dVar1": "address",
                "uVar2": "charset",
                "iVar3": "returnValue",
                "auStack_24": "buffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "write_byte_0008439c",
            "code": "\nundefined4 write_byte_0008439c(undefined4 *output_buffer,undefined *input_data,uint data_size)\n\n{\n  if (input_data == (undefined *)0x0) {\n    return 0;\n  }\n  if (data_size < 0x100) {\n    *input_data = (char)data_size;\n    return 1;\n  }\n  *output_buffer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "write_byte_0008439c",
                "param_1": "output_buffer",
                "param_2": "input_data",
                "param_3": "data_size"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "flush_and_free_resources_00084484",
            "code": "\nundefined4 flushAndFreeResources_00084484(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = _fflush_r(offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        _free_r(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          _free_r(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        _free_r(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(input + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "flush_and_free_resources_00084484",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "_free_r",
                "__sinit",
                "__sfp_lock_release",
                "__sfp_lock_acquire",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "check_and_assign_file_length_00084494",
            "code": "\nvoid checkAndAssignFileLength_00084494(int *fileLength,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 bufferSize)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = _fstat(fileDescriptor,statBuffer,statBuffer,0,bufferSize);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *fileLength = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "check_and_assign_file_length_00084494",
                "param_1": "fileLength",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "bufferSize",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_assign_tty_000844bc",
            "code": "\nvoid check_and_assign_tty_000844bc(int *result,undefined4 file_descriptor)\n\n{\n  int is_tty;\n  \n  DAT_20071244 = 0;\n  is_tty = _isatty(file_descriptor);\n  if ((is_tty == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_assign_tty_000844bc",
                "param_1": "result",
                "param_2": "file_descriptor",
                "iVar1": "is_tty"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "set_file_pointer_000844e0",
            "code": "\nvoid setFilePointer_000844e0(int *fileHandle,undefined4 fileDescriptor,undefined4 offset,undefined4 origin)\n\n{\n  int iVar1;\n  \n  DAT_20071244 = 0;\n  iVar1 = _lseek(fileDescriptor,offset,origin);\n  if ((iVar1 == -1) && (DAT_20071244 != 0)) {\n    *fileHandle = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "set_file_pointer_000844e0",
                "param_1": "fileHandle",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "origin"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_and_assign_value_00084508",
            "code": "\nvoid readAndAssignValue_00084508(int *outputValue,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20071244 = 0;\n  readResult = _read(fileDescriptor,buffer,count);\n  if ((readResult == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_and_assign_value_00084508",
                "param_1": "outputValue",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_result_00084530",
            "code": "\nint calculateResult_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_result_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculate_difference_0008455c(uint input_value,int param_size,undefined4 lower_bits,undefined4 upper_bits,int *output_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __divdi3();\n  product = product * CONCAT44(upper_bits,lower_bits);\n  result = (uint)product;\n  *output_array = input_value - result;\n  output_array[1] = (param_size - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_value",
                "param_2": "param_size",
                "param_3": "lower_bits",
                "param_4": "upper_bits",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_difference_0008458c",
            "code": "\nvoid calculate_difference_0008458c(uint input_value,int param_value,undefined4 multiplier_low,undefined4 multiplier_high,int *output_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(multiplier_high,multiplier_low);\n  result = (uint)product;\n  *output_array = input_value - result;\n  output_array[1] = (param_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "input_value",
                "param_2": "param_value",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "improved_divide_000845c0",
            "code": "\nundefined8 improvedDivide_000845c0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp1;\n  uint quotient1;\n  uint quotient2;\n  uint remainder1;\n  uint remainder2;\n  int shiftAmount;\n  uint temp2;\n  uint temp3;\n  uint isNegativeDividend;\n  uint dividend1;\n  uint dividend2;\n  uint divisor1;\n  bool carryFlag;\n  \n  if ((int)divisor < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)carryFlag;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)remainder < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    carryFlag = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)carryFlag;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount != 0) {\n        quotient2 = dividend >> (0x20U - shiftAmount & 0xff);\n        quotient = quotient << shiftAmount;\n        dividend = dividend << shiftAmount;\n        divisor = divisor << shiftAmount | quotient2;\n      }\n      quotient1 = quotient >> 0x10;\n      remainder1 = divisor / quotient1;\n      temp2 = (quotient & 0xffff) * remainder1;\n      dividend1 = dividend >> 0x10 | (divisor - quotient1 * remainder1) * 0x10000;\n      quotient2 = remainder1;\n      if (dividend1 <= temp2 && temp2 - dividend1 != 0) {\n        carryFlag = CARRY4(dividend1,quotient);\n        dividend1 = dividend1 + quotient;\n        quotient2 = remainder1 - 1;\n        if ((carryFlag == false) && (dividend1 <= temp2 && temp2 - dividend1 != 0)) {\n          quotient2 = remainder1 - 2;\n          dividend1 = dividend1 + quotient;\n        }\n      }\n      temp3 = (dividend1 - temp2) / quotient1;\n      remainder1 = (quotient & 0xffff) * temp3;\n      temp2 = dividend & 0xffff | ((dividend1 - temp2) - quotient1 * temp3) * 0x10000;\n      quotient1 = temp3;\n      if (temp2 <= remainder1 && remainder1 - temp2 != 0) {\n        quotient1 = temp3 - 1;\n        if ((CARRY4(temp2,quotient) == false) &&\n           (temp2 + quotient <= remainder1 && remainder1 - (temp2 + quotient) != 0)) {\n          quotient1 = temp3 - 2;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      quotient2 = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount == 0) {\n        divisor = divisor - quotient;\n        remainder1 = quotient >> 0x10;\n        divisor1 = quotient & 0xffff;\n        quotient2 = 1;\n      }\n      else {\n        quotient = quotient << shiftAmount;\n        quotient2 = divisor >> (0x20U - shiftAmount & 0xff);\n        remainder1 = quotient >> 0x10;\n        dividend1 = quotient2 / remainder1;\n        divisor1 = quotient & 0xffff;\n        temp2 = divisor1 * dividend1;\n        temp3 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        quotient2 = temp3 >> 0x10 | (quotient2 - remainder1 * dividend1) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotient1 = dividend1;\n        if (quotient2 <= temp2 && temp2 - quotient2 != 0) {\n          carryFlag = CARRY4(quotient2,quotient);\n          quotient2 = quotient2 + quotient;\n          quotient1 = dividend1 - 1;\n          if ((carryFlag == false) && (quotient2 <= temp2 && temp2 - quotient2 != 0)) {\n            quotient1 = dividend1 - 2;\n            quotient2 = quotient2 + quotient;\n          }\n        }\n        remainder2 = (quotient2 - temp2) / remainder1;\n        dividend1 = divisor1 * remainder2;\n        divisor = temp3 & 0xffff | ((quotient2 - temp2) - remainder1 * remainder2) * 0x10000;\n        quotient2 = remainder2;\n        if (divisor <= dividend1 && dividend1 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient2 = remainder2 - 1;\n          if ((carryFlag == false) && (divisor <= dividend1 && dividend1 - divisor != 0)) {\n            quotient2 = remainder2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - dividend1;\n        quotient2 = quotient2 | quotient1 << 0x10;\n      }\n      quotient1 = divisor / remainder1;\n      dividend1 = divisor1 * quotient1;\n      temp3 = dividend >> 0x10 | (divisor - remainder1 * quotient1) * 0x10000;\n      temp2 = quotient1;\n      if (temp3 <= dividend1 && dividend1 - temp3 != 0) {\n        carryFlag = CARRY4(temp3,quotient);\n        temp3 = temp3 + quotient;\n        temp2 = quotient1 - 1;\n        if ((carryFlag == false) && (temp3 <= dividend1 && dividend1 - temp3 != 0)) {\n          temp2 = quotient1 - 2;\n          temp3 = temp3 + quotient;\n        }\n      }\n      remainder2 = (temp3 - dividend1) / remainder1;\n      divisor1 = divisor1 * remainder2;\n      remainder1 = dividend & 0xffff | ((temp3 - dividend1) - remainder1 * remainder2) * 0x10000;\n      quotient1 = remainder2;\n      if (remainder1 <= divisor1 && divisor1 - remainder1 != 0) {\n        quotient1 = remainder2 - 1;\n        if ((CARRY4(remainder1,quotient) == false) &&\n           (remainder1 + quotient <= divisor1 && divisor1 - (remainder1 + quotient) != 0)) {\n          quotient1 = remainder2 - 2;\n        }\n      }\n      quotient1 = quotient1 | temp2 << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    quotient2 = 0;\n    quotient1 = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(remainder);\n    if (shiftAmount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        quotient2 = 0;\n        quotient1 = 1;\n      }\n      else {\n        quotient1 = 0;\n        quotient2 = 0;\n      }\n    }\n    else {\n      quotient2 = 0x20 - shiftAmount;\n      remainder1 = divisor >> (quotient2 & 0xff);\n      divisor1 = quotient >> (quotient2 & 0xff) | remainder << shiftAmount;\n      dividend1 = divisor1 >> 0x10;\n      quotient1 = remainder1 / dividend1;\n      temp3 = (divisor1 & 0xffff) * quotient1;\n      temp2 = divisor << shiftAmount | dividend >> (quotient2 & 0xff);\n      remainder1 = temp2 >> 0x10 | (remainder1 - dividend1 * quotient1) * 0x10000;\n      quotient2 = quotient1;\n      if (remainder1 <= temp3 && temp3 - remainder1 != 0) {\n        carryFlag = CARRY4(remainder1,divisor1);\n        remainder1 = remainder1 + divisor1;\n        quotient2 = quotient1 - 1;\n        if ((carryFlag == false) && (remainder1 <= temp3 && temp3 - remainder1 != 0)) {\n          quotient2 = quotient1 - 2;\n          remainder1 = remainder1 + divisor1;\n        }\n      }\n      remainder2 = (remainder1 - temp3) / dividend1;\n      dividend2 = (divisor1 & 0xffff) * remainder2;\n      remainder1 = temp2 & 0xffff | ((remainder1 - temp3) - dividend1 * remainder2) * 0x10000;\n      quotient1 = remainder2;\n      if (remainder1 <= dividend2 && dividend2 - remainder1 != 0) {\n        carryFlag = CARRY4(remainder1,divisor1);\n        remainder1 = remainder1 + divisor1;\n        quotient1 = remainder2 - 1;\n        if ((carryFlag == false) && (remainder1 <= dividend2 && dividend2 - remainder1 != 0)) {\n          quotient1 = remainder2 - 2;\n          remainder1 = remainder1 + divisor1;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      temp1 = (ulonglong)quotient1 * (ulonglong)(quotient << shiftAmount);\n      temp2 = (uint)((ulonglong)temp1 >> 0x20);\n      quotient2 = 0;\n      if ((remainder1 - dividend2 < temp2) ||\n         ((remainder1 - dividend2 == temp2 && (dividend << shiftAmount < (uint)temp1)))) {\n        quotient1 = quotient1 - 1;\n        quotient2 = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    carryFlag = quotient1 != 0;\n    quotient1 = -quotient1;\n    quotient2 = -quotient2 - (uint)carryFlag;\n  }\n  return CONCAT44(quotient2,quotient1);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "improved_divide_000845c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp1",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "remainder1",
                "uVar5": "remainder2",
                "iVar6": "shiftAmount",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "isNegativeDividend",
                "uVar10": "dividend1",
                "uVar11": "dividend2",
                "uVar12": "divisor1",
                "bVar13": "carryFlag"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_quotient_00084860",
            "code": "\nulonglong calculateQuotient_00084860(uint dividend,uint divisor,uint remainder,uint shiftAmount)\n\n{\n  longlong quotient;\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (shiftAmount == 0) {\n    if (remainder <= divisor) {\n      if (remainder == 0) {\n        remainder = 1 / 0;\n      }\n      shiftCount = LZCOUNT(remainder);\n      if (shiftCount == 0) {\n        divisor = divisor - remainder;\n        temp1 = remainder >> 0x10;\n        temp3 = remainder & 0xffff;\n        result = 1;\n      }\n      else {\n        remainder = remainder << shiftCount;\n        temp6 = divisor >> (0x20U - shiftCount & 0xff);\n        temp1 = remainder >> 0x10;\n        temp7 = temp6 / temp1;\n        temp3 = remainder & 0xffff;\n        result = temp3 * temp7;\n        temp4 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        temp2 = temp4 >> 0x10 | (temp6 - temp1 * temp7) * 0x10000;\n        dividend = dividend << shiftCount;\n        temp6 = temp7;\n        if (temp2 <= result && result - temp2 != 0) {\n          carryFlag = CARRY4(temp2,remainder);\n          temp2 = temp2 + remainder;\n          temp6 = temp7 - 1;\n          if ((carryFlag == false) && (temp2 <= result && result - temp2 != 0)) {\n            temp6 = temp7 - 2;\n            temp2 = temp2 + remainder;\n          }\n        }\n        temp5 = (temp2 - result) / temp1;\n        temp7 = temp3 * temp5;\n        divisor = temp4 & 0xffff | ((temp2 - result) - temp1 * temp5) * 0x10000;\n        result = temp5;\n        if (divisor <= temp7 && temp7 - divisor != 0) {\n          carryFlag = CARRY4(divisor,remainder);\n          divisor = divisor + remainder;\n          result = temp5 - 1;\n          if ((carryFlag == false) && (divisor <= temp7 && temp7 - divisor != 0)) {\n            result = temp5 - 2;\n            divisor = divisor + remainder;\n          }\n        }\n        divisor = divisor - temp7;\n        result = result | temp6 << 0x10;\n      }\n      temp7 = divisor / temp1;\n      temp2 = temp3 * temp7;\n      temp4 = dividend >> 0x10 | (divisor - temp1 * temp7) * 0x10000;\n      temp6 = temp7;\n      if (temp4 <= temp2 && temp2 - temp4 != 0) {\n        carryFlag = CARRY4(temp4,remainder);\n        temp4 = temp4 + remainder;\n        temp6 = temp7 - 1;\n        if ((carryFlag == false) && (temp4 <= temp2 && temp2 - temp4 != 0)) {\n          temp6 = temp7 - 2;\n          temp4 = temp4 + remainder;\n        }\n      }\n      temp7 = (temp4 - temp2) / temp1;\n      temp3 = temp3 * temp7;\n      temp4 = dividend & 0xffff | ((temp4 - temp2) - temp1 * temp7) * 0x10000;\n      temp1 = temp7;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        temp1 = temp7 - 1;\n        if ((CARRY4(temp4,remainder) == false) &&\n           (temp4 + remainder <= temp3 && temp3 - (temp4 + remainder) != 0)) {\n          temp1 = temp7 - 2;\n        }\n      }\n      return CONCAT44(result,temp1 | temp6 << 0x10);\n    }\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount != 0) {\n      temp6 = dividend >> (0x20U - shiftCount & 0xff);\n      remainder = remainder << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = temp6 | divisor << shiftCount;\n    }\n    result = remainder >> 0x10;\n    temp1 = divisor / result;\n    temp3 = (remainder & 0xffff) * temp1;\n    temp7 = dividend >> 0x10 | (divisor - result * temp1) * 0x10000;\n    temp6 = temp1;\n    if (temp7 <= temp3 && temp3 - temp7 != 0) {\n      carryFlag = CARRY4(temp7,remainder);\n      temp7 = temp7 + remainder;\n      temp6 = temp1 - 1;\n      if ((carryFlag == false) && (temp7 <= temp3 && temp3 - temp7 != 0)) {\n        temp6 = temp1 - 2;\n        temp7 = temp7 + remainder;\n      }\n    }\n    temp4 = (temp7 - temp3) / result;\n    temp1 = (remainder & 0xffff) * temp4;\n    temp3 = dividend & 0xffff | ((temp7 - temp3) - result * temp4) * 0x10000;\n    result = temp4;\n    if (temp3 <= temp1 && temp1 - temp3 != 0) {\n      result = temp4 - 1;\n      if ((CARRY4(temp3,remainder) == false) &&\n         (temp3 + remainder <= temp1 && temp1 - (temp3 + remainder) != 0)) {\n        result = temp4 - 2;\n      }\n    }\n    result = result | temp6 << 0x10;\n  }\n  else {\n    if (divisor < shiftAmount) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(shiftAmount);\n    if (shiftCount == 0) {\n      if ((shiftAmount < divisor) || (remainder <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - shiftCount;\n      temp6 = divisor >> (result & 0xff);\n      temp1 = shiftAmount << shiftCount | remainder >> (result & 0xff);\n      temp3 = temp1 >> 0x10;\n      temp2 = temp6 / temp3;\n      temp7 = (temp1 & 0xffff) * temp2;\n      temp4 = dividend >> (result & 0xff) | divisor << shiftCount;\n      result = temp4 >> 0x10 | (temp6 - temp3 * temp2) * 0x10000;\n      temp6 = temp2;\n      if (result <= temp7 && temp7 - result != 0) {\n        carryFlag = CARRY4(result,temp1);\n        result = result + temp1;\n        temp6 = temp2 - 1;\n        if ((carryFlag == false) && (result <= temp7 && temp7 - result != 0)) {\n          temp6 = temp2 - 2;\n          result = result + temp1;\n        }\n      }\n      temp2 = (result - temp7) / temp3;\n      temp5 = (temp1 & 0xffff) * temp2;\n      temp3 = temp4 & 0xffff | ((result - temp7) - temp3 * temp2) * 0x10000;\n      result = temp2;\n      if (temp3 <= temp5 && temp5 - temp3 != 0) {\n        carryFlag = CARRY4(temp3,temp1);\n        temp3 = temp3 + temp1;\n        result = temp2 - 1;\n        if ((carryFlag == false) && (temp3 <= temp5 && temp5 - temp3 != 0)) {\n          result = temp2 - 2;\n          temp3 = temp3 + temp1;\n        }\n      }\n      result = result | temp6 << 0x10;\n      quotient = (ulonglong)result * (ulonglong)(remainder << shiftCount);\n      temp6 = (uint)((ulonglong)quotient >> 0x20);\n      if ((temp3 - temp5 < temp6) || ((temp3 - temp5 == temp6 && (dividend << shiftCount < (uint)quotient)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_quotient_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "shiftAmount",
                "lVar1": "quotient",
                "uVar2": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "iVar10": "shiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 95416,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_0008159e",
            "FUN_000815ec"
        ],
        [
            "FUN_000810e8",
            "FUN_0008117a"
        ],
        [
            "FUN_00080250"
        ]
    ],
    "locked_functions": []
}