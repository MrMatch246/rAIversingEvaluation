{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_08000134(undefined4 source_value,undefined4 destination_value)\n\n{\n  return CONCAT44(destination_value,source_value);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "source_value",
                "param_2": "destination_value"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "serialPrint"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_result_08000168",
            "code": "\nulonglong calculateResult_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool isZero1;\n  bool isZero2;\n  bool isNegative;\n  \n  temp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  isZero1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  isZero2 = isZero1 && input1 == input3;\n  if (!isZero1 || input1 != input3) {\n    isZero2 = (result1 | input1) == 0;\n  }\n  if (!isZero2) {\n    isZero2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)result1 >> 0x15;\n  if (!isZero2) {\n    isZero2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!isZero2) {\n    isZero2 = shift1 == -1;\n  }\n  if (isZero2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = temp4;\n      result3 = input3;\n      if (shift2 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = result3;\n        temp4 = result1;\n      }\n      isZero2 = (result3 | result1 << 0xc) == 0;\n      if (isZero2) {\n        isZero2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (isZero2) {\n        isZero2 = result1 == temp4;\n      }\n      if (!isZero2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      isZero2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)isZero2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isZero2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  isZero2 = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (isZero2 && result1 <= input4) {\n    result1 = result1 + result3;\n    result2 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    isZero2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)isZero2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    isZero2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)isZero2;\n  }\n  if (result1 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    isZero2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp4;\n    temp4 = -(uint)!isZero2 - temp4;\n    result3 = -(uint)(isZero2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isZero2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      isZero2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)isZero2) | input2,\n                    temp4 + isZero2);\n  }\n  isZero1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp4 * 2;\n  isZero2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)isZero1;\n  result3 = result3 * 2 + (uint)(isZero2 || CARRY4(result2,(uint)isZero1));\n  result2 = result1 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  result1 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  shift2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  isNegative = SBORROW4(result3,0x20);\n  temp4 = shift2 - 0x2b;\n  isZero2 = (int)temp4 < 0;\n  isZero1 = temp4 == 0;\n  if ((int)result3 < 0x20) {\n    isNegative = SCARRY4(temp4,0xc);\n    shift2 = shift2 + -0x1f;\n    isZero2 = shift2 < 0;\n    isZero1 = shift2 == 0;\n    temp4 = result3;\n    if (!isZero1 && isZero2 == isNegative) {\n      temp5 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero1 || isZero2 != isNegative) {\n    result4 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (isZero1 || isZero2 != isNegative) {\n    result1 = result1 | temp5 >> (result4 & 0xff);\n  }\n  if (isZero1 || isZero2 != isNegative) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result2 - result3);\n  if ((int)temp4 < 0x1f) {\n    shift2 = temp4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift2) & 0xff) | result1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_result_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "isZero1",
                "bVar14": "isZero2",
                "bVar15": "isNegative"
            },
            "calling": [
                "taskScheduler",
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_absolute_difference_0800016c",
            "code": "\nulonglong calculate_absolute_difference_0800016c(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  int shifted_input_b;\n  byte carry_bit;\n  uint input_a_temp;\n  uint input_b_temp;\n  uint input_c_temp;\n  int shifted_input_d;\n  uint shifted_input_b_temp;\n  uint shifted_input_d_temp;\n  uint output_low;\n  uint output_high;\n  uint temp_low;\n  uint temp_high;\n  bool is_equal;\n  bool is_zero;\n  bool carry_check;\n  \n  shifted_input_b_temp = input_b << 1;\n  output_low = input_d << 1;\n  is_equal = ((input_b ^ input_d) & 0x7fffffff) == 0;\n  is_zero = is_equal && input_a == input_c;\n  if (!is_equal || input_a != input_c) {\n    is_zero = (shifted_input_b_temp | input_a) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (output_low | input_c) == 0;\n  }\n  shifted_input_d = (int)shifted_input_b_temp >> 0x15;\n  if (!is_zero) {\n    is_zero = shifted_input_d == -1;\n  }\n  shifted_input_b = (int)output_low >> 0x15;\n  if (!is_zero) {\n    is_zero = shifted_input_b == -1;\n  }\n  if (is_zero) {\n    if (shifted_input_d == -1 || shifted_input_b == -1) {\n      output_low = input_d;\n      shifted_input_b_temp = input_c;\n      if (shifted_input_d == -1) {\n        output_low = input_b;\n        shifted_input_b_temp = input_a;\n      }\n      if (shifted_input_d != -1 || shifted_input_b != -1) {\n        input_c = shifted_input_b_temp;\n        input_d = output_low;\n      }\n      is_zero = (shifted_input_b_temp | output_low << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input_c | input_d << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = output_low == input_d;\n      }\n      if (!is_zero) {\n        output_low = output_low | 0x80000;\n      }\n      return CONCAT44(output_low,shifted_input_b_temp);\n    }\n    if (((input_b ^ input_d) & 0x7fffffff) != 0 || input_a != input_c) {\n      if ((shifted_input_b_temp | input_a) == 0) {\n        input_a = input_c;\n        input_b = input_d;\n      }\n      return CONCAT44(input_b,input_a);\n    }\n    if (input_b != input_d) {\n      return 0;\n    }\n    if (shifted_input_b_temp >> 0x15 == 0) {\n      is_zero = (input_a & 0x80000000) != 0;\n      output_low = input_b * 2 + (uint)is_zero;\n      if (CARRY4(input_b,input_b) || CARRY4(input_b * 2,(uint)is_zero)) {\n        output_low = output_low | 0x80000000;\n      }\n      return CONCAT44(output_low,input_a << 1);\n    }\n    if (shifted_input_b_temp < 0xffc00000) {\n      return CONCAT44(input_b + 0x100000,input_a);\n    }\n    input_b = input_b & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_b | 0x7ff00000) << 0x20;\n  }\n  shifted_input_b_temp = shifted_input_b_temp >> 0x15;\n  output_low = output_low >> 0x15;\n  output_high = output_low - shifted_input_b_temp;\n  is_zero = output_high != 0;\n  if (output_low < shifted_input_b_temp) {\n    output_high = -output_high;\n  }\n  shifted_input_d_temp = input_a;\n  input_c_temp = input_b;\n  if (is_zero && shifted_input_b_temp <= output_low) {\n    shifted_input_b_temp = shifted_input_b_temp + output_high;\n    shifted_input_d_temp = input_c;\n    input_c_temp = input_d;\n    input_c = input_a;\n    input_d = input_b;\n  }\n  if (0x36 < output_high) {\n    return CONCAT44(input_c_temp,shifted_input_d_temp);\n  }\n  output_low = input_c_temp & 0xfffff | 0x100000;\n  if ((input_c_temp & 0x80000000) != 0) {\n    is_zero = shifted_input_d_temp != 0;\n    shifted_input_d_temp = -shifted_input_d_temp;\n    output_low = -output_low - (uint)is_zero;\n  }\n  input_c_temp = input_d & 0xfffff | 0x100000;\n  if ((input_d & 0x80000000) != 0) {\n    is_zero = input_c != 0;\n    input_c = -input_c;\n    input_c_temp = -input_c_temp - (uint)is_zero;\n  }\n  if (shifted_input_b_temp == output_high) {\n    input_c_temp = input_c_temp ^ 0x100000;\n    if (shifted_input_b_temp == 0) {\n      output_low = output_low ^ 0x100000;\n      shifted_input_b_temp = 1;\n    }\n    else {\n      output_high = output_high - 1;\n    }\n  }\n  temp_high = -output_high + 0x20;\n  if ((int)output_high < 0x21) {\n    temp_low = input_c << (temp_high & 0xff);\n    input_c = input_c >> (output_high & 0xff);\n    input_a_temp = shifted_input_d_temp + input_c;\n    input_b_temp = input_c_temp << (temp_high & 0xff);\n    temp_high = input_a_temp + input_b_temp;\n    output_low = output_low + CARRY4(shifted_input_d_temp,input_c) + ((int)input_c_temp >> (output_high & 0xff)) +\n            (uint)CARRY4(input_a_temp,input_b_temp);\n  }\n  else {\n    temp_low = input_c_temp << (-output_high + 0x40 & 0xff);\n    if (input_c != 0) {\n      temp_low = temp_low | 2;\n    }\n    input_c_temp = (int)input_c_temp >> (output_high - 0x20 & 0xff);\n    temp_high = shifted_input_d_temp + input_c_temp;\n    output_low = output_low + ((int)input_c_temp >> 0x1f) + (uint)CARRY4(shifted_input_d_temp,input_c_temp);\n  }\n  input_b = output_low & 0x80000000;\n  output_high = output_low;\n  if ((int)output_low < 0) {\n    is_zero = temp_low == 0;\n    temp_low = -temp_low;\n    output_high = -temp_high;\n    temp_high = -(uint)!is_zero - temp_high;\n    output_high = -(uint)(is_zero <= output_high) - output_low;\n  }\n  if (0xfffff < output_high) {\n    shifted_input_d_temp = shifted_input_b_temp - 1;\n    if (0x1fffff < output_high) {\n      output_low = output_high & 1;\n      output_high = output_high >> 1;\n      carry_bit = (byte)temp_high;\n      temp_high = (uint)(output_low != 0) << 0x1f | temp_high >> 1;\n      temp_low = (uint)(carry_bit & 1) << 0x1f | temp_low >> 1;\n      shifted_input_d_temp = shifted_input_b_temp;\n      if (0xffbfffff < shifted_input_b_temp * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < temp_low;\n    if (temp_low == 0x80000000) {\n      is_zero = (temp_high & 1) != 0;\n    }\n    return CONCAT44(output_high + shifted_input_d_temp * 0x100000 + (uint)CARRY4(temp_high,(uint)is_zero) | input_b,\n                    temp_high + is_zero);\n  }\n  is_equal = (temp_low & 0x80000000) != 0;\n  temp_low = temp_low << 1;\n  shifted_input_d_temp = temp_high * 2;\n  is_zero = CARRY4(temp_high,temp_high);\n  temp_high = temp_high * 2 + (uint)is_equal;\n  output_high = output_high * 2 + (uint)(is_zero || CARRY4(shifted_input_d_temp,(uint)is_equal));\n  shifted_input_d_temp = shifted_input_b_temp - 2;\n  if ((output_high & 0x100000) != 0) goto LAB_08000278;\n  input_c_temp = temp_high;\n  shifted_input_b_temp = output_high;\n  if (output_high == 0) {\n    input_c_temp = 0;\n    shifted_input_b_temp = temp_high;\n  }\n  shifted_input_d = LZCOUNT(shifted_input_b_temp);\n  if (output_high == 0) {\n    shifted_input_d = shifted_input_d + 0x20;\n  }\n  temp_high = shifted_input_d - 0xb;\n  carry_check = SBORROW4(temp_high,0x20);\n  output_high = shifted_input_d - 0x2b;\n  is_zero = (int)output_high < 0;\n  is_equal = output_high == 0;\n  if ((int)temp_high < 0x20) {\n    carry_check = SCARRY4(output_high,0xc);\n    shifted_input_d = shifted_input_d + -0x1f;\n    is_zero = shifted_input_d < 0;\n    is_equal = shifted_input_d == 0;\n    output_high = temp_high;\n    if (!is_equal && is_zero == carry_check) {\n      input_c_temp = shifted_input_b_temp << (temp_high & 0xff);\n      shifted_input_b_temp = shifted_input_b_temp >> (0xcU - shifted_input_d & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_zero != carry_check) {\n    temp_low = 0x20 - output_high;\n  }\n  shifted_input_b_temp = shifted_input_b_temp << (output_high & 0xff);\n  if (is_equal || is_zero != carry_check) {\n    shifted_input_b_temp = shifted_input_b_temp | input_c_temp >> (temp_low & 0xff);\n  }\n  if (is_equal || is_zero != carry_check) {\n    input_c_temp = input_c_temp << (output_high & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_high <= (int)shifted_input_d_temp) {\n    return CONCAT44(shifted_input_b_temp + (shifted_input_d_temp - temp_high) * 0x100000 | input_b,input_c_temp);\n  }\n  output_high = ~(shifted_input_d_temp - temp_high);\n  if ((int)output_high < 0x1f) {\n    shifted_input_d = output_high - 0x13;\n    if (shifted_input_d != 0 && shifted_input_d < 0 == SCARRY4(output_high - 0x1f,0xc)) {\n      return CONCAT44(output_low,input_c_temp >> (0x20 - (0xcU - shifted_input_d) & 0xff) | shifted_input_b_temp << (0xcU - shifted_input_d & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    output_high = output_high + 1;\n    return CONCAT44(input_b | shifted_input_b_temp >> (output_high & 0xff),\n                    input_c_temp >> (output_high & 0xff) | shifted_input_b_temp << (0x20 - output_high & 0xff));\n  }\n  return CONCAT44(output_low,shifted_input_b_temp >> (output_high - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_absolute_difference_0800016c",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "iVar1": "shifted_input_b",
                "bVar2": "carry_bit",
                "uVar3": "input_a_temp",
                "uVar4": "input_b_temp",
                "uVar5": "input_c_temp",
                "iVar6": "shifted_input_d",
                "uVar7": "shifted_input_b_temp",
                "uVar8": "shifted_input_d_temp",
                "uVar9": "output_low",
                "uVar10": "output_high",
                "uVar11": "temp_low",
                "uVar12": "temp_high",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "carry_check"
            },
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "calculate_shifted_value_08000404",
            "code": "\nulonglong calculateShiftedValue_08000404(uint input)\n\n{\n  uint shiftCount;\n  uint absInput;\n  uint shiftAmount;\n  int signBit;\n  uint finalShiftCount;\n  uint signMask;\n  uint shiftedMask;\n  bool shiftSign;\n  bool shiftZero;\n  bool carryFlag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signMask = input & 0x80000000;\n  absInput = input;\n  if ((int)signMask < 0) {\n    absInput = -input;\n  }\n  shiftCount = 0;\n  signBit = LZCOUNT(absInput);\n  finalShiftCount = signBit + 0x15;\n  carryFlag = SBORROW4(finalShiftCount,0x20);\n  shiftAmount = signBit - 0xb;\n  shiftSign = (int)shiftAmount < 0;\n  shiftZero = shiftAmount == 0;\n  if (finalShiftCount < 0x20) {\n    carryFlag = SCARRY4(shiftAmount,0xc);\n    shiftSign = false;\n    shiftZero = signBit + 1 == 0;\n    shiftAmount = finalShiftCount;\n    if (!shiftZero && carryFlag == false) {\n      shiftCount = absInput << finalShiftCount;\n      absInput = absInput >> (0xcU - (signBit + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (shiftZero || shiftSign != carryFlag) {\n    shiftedMask = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (shiftZero || shiftSign != carryFlag) {\n    absInput = absInput | 0U >> (shiftedMask & 0xff);\n  }\n  if (shiftZero || shiftSign != carryFlag) {\n    shiftCount = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (finalShiftCount < 0x433) {\n    return CONCAT44(absInput + (0x432 - finalShiftCount) * 0x100000 | signMask,shiftCount);\n  }\n  shiftAmount = ~(0x432 - finalShiftCount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  signBit = shiftAmount - 0x13;\n  if (signBit == 0 || signBit < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signMask | absInput >> (shiftAmount & 0xff),\n                    shiftCount >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,shiftCount >> (0x20 - (0xcU - signBit) & 0xff) | absInput << (0xcU - signBit & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input",
                "uVar1": "shiftCount",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "signBit",
                "uVar5": "finalShiftCount",
                "uVar6": "signMask",
                "in_r12": "shiftedMask",
                "bVar7": "shiftSign",
                "bVar8": "shiftZero",
                "bVar9": "carryFlag"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "extract_and_transform_08000428",
            "code": "\nulonglong extract_and_transform_08000428(uint input_value,undefined4 unused_param_1,undefined4 unused_param_2,uint unused_param_3)\n\n{\n  uint leading_zeroes;\n  uint result_high;\n  uint output_high;\n  uint shifted_input_1;\n  uint shifted_input_2;\n  int result_low;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_subtraction_true;\n  bool is_condition_true_1;\n  bool is_condition_true_2;\n  \n  shifted_input_2 = input_value << 1;\n  is_condition_true_1 = shifted_input_2 == 0;\n  leading_zeroes = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  shifted_input_1 = (uint)((int)shifted_input_2 >> 3) >> 1;\n  output_high = leading_zeroes | shifted_input_1;\n  input_value = input_value << 0x1d;\n  if (!is_condition_true_1) {\n    unused_param_3 = shifted_input_2 & 0xff000000;\n    is_condition_true_1 = unused_param_3 == 0;\n  }\n  if (!is_condition_true_1) {\n    is_condition_true_1 = unused_param_3 == 0xff000000;\n  }\n  if (!is_condition_true_1) {\n    return combine_low_high(output_high,input_value) ^ 0x3800000000000000;\n  }\n  if (shifted_input_2 == 0 || unused_param_3 == 0xff000000) {\n    return combine_low_high(output_high,input_value);\n  }\n  result_high = input_value;\n  shifted_input_2 = shifted_input_1;\n  if (shifted_input_1 == 0) {\n    result_high = 0;\n    shifted_input_2 = input_value;\n  }\n  result_low = leading_zero_count(shifted_input_2);\n  if (shifted_input_1 == 0) {\n    result_low = result_low + 0x20;\n  }\n  shift_amount = result_low - 0xb;\n  is_condition_true_2 = signed_subtraction_overflow(shift_amount,0x20);\n  shifted_input_1 = result_low - 0x2b;\n  is_condition_true_1 = (int)shifted_input_1 < 0;\n  is_subtraction_true = shifted_input_1 == 0;\n  if ((int)shift_amount < 0x20) {\n    is_condition_true_2 = signed_addition_overflow(shifted_input_1,0xc);\n    result_low = result_low + -0x1f;\n    is_condition_true_1 = result_low < 0;\n    is_subtraction_true = result_low == 0;\n    shifted_input_1 = shift_amount;\n    if (!is_subtraction_true && is_condition_true_1 == is_condition_true_2) {\n      result_high = shifted_input_2 << (shift_amount & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - result_low & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_subtraction_true || is_condition_true_1 != is_condition_true_2) {\n    remaining_bits = 0x20 - shifted_input_1;\n  }\n  shifted_input_2 = shifted_input_2 << (shifted_input_1 & 0xff);\n  if (is_subtraction_true || is_condition_true_1 != is_condition_true_2) {\n    shifted_input_2 = shifted_input_2 | result_high >> (remaining_bits & 0xff);\n  }\n  if (is_subtraction_true || is_condition_true_1 != is_condition_true_2) {\n    result_high = result_high << (shifted_input_1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return combine_low_high(shifted_input_2 + (0x380 - shift_amount) * 0x100000 | leading_zeroes,result_high);\n  }\n  shifted_input_1 = ~(0x380 - shift_amount);\n  if ((int)shifted_input_1 < 0x1f) {\n    result_low = shifted_input_1 - 0x13;\n    if (result_low != 0 && result_low < 0 == signed_addition_overflow(shifted_input_1 - 0x1f,0xc)) {\n      return combine_low_high(output_high,result_high >> (0x20 - (0xcU - result_low) & 0xff) | shifted_input_2 << (0xcU - result_low & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_input_1 = shifted_input_1 + 1;\n    return combine_low_high(leading_zeroes | shifted_input_2 >> (shifted_input_1 & 0xff),\n                    result_high >> (shifted_input_1 & 0xff) | shifted_input_2 << (0x20 - shifted_input_1 & 0xff));\n  }\n  return combine_low_high(output_high,shifted_input_2 >> (shifted_input_1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "extract_and_transform_08000428",
                "param_1": "input_value",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3",
                "uVar1": "leading_zeroes",
                "uVar2": "result_high",
                "uVar3": "output_high",
                "uVar4": "shifted_input_1",
                "uVar5": "shifted_input_2",
                "uVar7": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar8": "is_subtraction_true",
                "bVar9": "is_condition_true_1",
                "bVar10": "is_condition_true_2",
                "iVar6": "result_low",
                "CONCAT44": "combine_low_high",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "signed_subtraction_overflow",
                "SCARRY4": "signed_addition_overflow"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_shifted_xor_080004d0",
            "code": "\nulonglong calculate_shifted_xor_080004d0(undefined4 value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  ulonglong result_1;\n  longlong result_2;\n  uint temp_1;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong temp_8;\n  \n  temp_8 = CONCAT44(value_2,value_1);\n  temp_6 = 0x7ff;\n  temp_2 = value_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_2 == 0;\n  if (!flag_1) {\n    temp_5 = value_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_5 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_2 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_5 == 0x7ff;\n  }\n  if (flag_1) {\n    temp_8 = calculate_shifted_xor_080004d0_080006ac();\n  }\n  temp_1 = (uint)(temp_8 >> 0x20);\n  temp_3 = temp_2 + temp_5;\n  temp_2 = temp_1 ^ value_4;\n  temp_1 = temp_1 & ~(temp_6 << 0x15);\n  value_4 = value_4 & ~(temp_6 << 0x15);\n  flag_1 = ((uint)temp_8 | temp_1 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (value_3 | value_4 << 0xc) == 0;\n  }\n  temp_1 = temp_1 | 0x100000;\n  value_4 = value_4 | 0x100000;\n  if (flag_1) {\n    value_3 = (uint)temp_8 | value_3;\n    value_4 = (temp_2 & 0x80000000 | temp_1) ^ value_4;\n    temp_2 = temp_6 >> 1;\n    flag_3 = SBORROW4(temp_3,temp_2);\n    temp_4 = temp_3 - temp_2;\n    flag_1 = temp_4 == 0;\n    temp_1 = temp_4;\n    if (!flag_1 && (int)temp_2 <= temp_3) {\n      flag_3 = SBORROW4(temp_6,temp_4);\n      temp_1 = temp_6 - temp_4;\n      flag_1 = temp_6 == temp_4;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      value_4 = value_4 | temp_4 * 0x100000;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      return CONCAT44(value_4,value_3);\n    }\n    value_4 = value_4 | 0x100000;\n    temp_6 = 0;\n    flag_3 = SBORROW4(temp_4,1);\n    temp_4 = temp_4 - 1;\n    flag_1 = temp_4 == 0;\n    temp_2 = temp_4;\n  }\n  else {\n    result_1 = (temp_8 & 0xffffffff) * (ulonglong)value_3;\n    temp_8 = (temp_8 & 0xffffffff) * (ulonglong)value_4 +\n             (ulonglong)temp_1 * (ulonglong)value_3 + (result_1 >> 0x20);\n    temp_7 = (uint)temp_8;\n    result_2 = (ulonglong)temp_1 * (ulonglong)value_4 + (temp_8 >> 0x20);\n    temp_6 = (uint)result_2;\n    temp_1 = (uint)((ulonglong)result_2 >> 0x20);\n    if ((int)result_1 != 0) {\n      temp_7 = temp_7 | 1;\n    }\n    temp_4 = (temp_3 + -0x3ff) - (uint)(temp_1 < 0x200);\n    if (temp_1 < 0x200) {\n      flag_1 = (temp_7 & 0x80000000) != 0;\n      temp_7 = temp_7 << 1;\n      result_2 = CONCAT44(temp_1 * 2 + (uint)(CARRY4(temp_6,temp_6) || CARRY4(temp_6 * 2,(uint)flag_1)),\n                       temp_6 * 2 + (uint)flag_1);\n    }\n    value_4 = temp_2 & 0x80000000 | (int)((ulonglong)result_2 >> 0x20) << 0xb | (uint)result_2 >> 0x15;\n    value_3 = (uint)result_2 << 0xb | temp_7 >> 0x15;\n    temp_6 = temp_7 * 0x800;\n    flag_2 = 0xfc < temp_4;\n    flag_3 = SBORROW4(temp_4,0xfd);\n    temp_1 = temp_4 - 0xfd;\n    flag_1 = temp_1 == 0;\n    temp_2 = temp_1;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < temp_1;\n      flag_3 = SBORROW4(temp_1,0x700);\n      temp_2 = temp_4 - 0x7fd;\n      flag_1 = temp_1 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < temp_6;\n      if (temp_6 == 0x80000000) {\n        flag_1 = (temp_7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(value_4 + temp_4 * 0x100000 + (uint)CARRY4(value_3,(uint)flag_1),value_3 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)temp_2 < 0 == flag_3) {\n    return (ulonglong)(value_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(temp_4,0x36);\n  flag_1 = (int)(temp_4 + 0x36) < 0;\n  flag_3 = temp_4 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    value_3 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    value_4 = value_4 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(value_4,value_3);\n  }\n  temp_2 = -temp_4;\n  temp_1 = temp_2 - 0x20;\n  if (0x1f < (int)temp_2) {\n    temp_4 = value_3 >> (temp_1 & 0xff) | value_4 << (0x20 - temp_1 & 0xff);\n    temp_2 = (value_4 >> (temp_1 & 0xff) & ~((value_4 & 0x80000000) >> (temp_1 & 0xff))) -\n            ((int)temp_4 >> 0x1f);\n    if ((temp_6 | value_3 << (0x20 - temp_1 & 0xff) | temp_4 << 1) == 0) {\n      temp_2 = temp_2 & ~(temp_4 >> 0x1f);\n    }\n    return CONCAT44(value_4,temp_2) & 0x80000000ffffffff;\n  }\n  temp_3 = temp_2 - 0x14;\n  if (temp_3 == 0 || temp_3 < 0 != SCARRY4(temp_1,0xc)) {\n    temp_7 = value_3 << (temp_4 + 0x20 & 0xff);\n    temp_1 = value_3 >> (temp_2 & 0xff) | value_4 << (temp_4 + 0x20 & 0xff);\n    temp_4 = temp_1 + -((int)temp_7 >> 0x1f);\n    if ((temp_6 | temp_7 << 1) == 0) {\n      temp_4 = temp_4 & ~(temp_7 >> 0x1f);\n    }\n    return CONCAT44((value_4 & 0x80000000) +\n                    ((value_4 & 0x7fffffff) >> (temp_2 & 0xff)) +\n                    (uint)CARRY4(temp_1,-((int)temp_7 >> 0x1f)),temp_4);\n  }\n  temp_2 = 0xc - temp_3;\n  temp_4 = value_3 << (temp_2 & 0xff);\n  temp_2 = value_3 >> (0x20 - temp_2 & 0xff) | value_4 << (temp_2 & 0xff);\n  temp_1 = temp_2 + -((int)temp_4 >> 0x1f);\n  if ((temp_6 | temp_4 << 1) == 0) {\n    temp_1 = temp_1 & ~(temp_4 >> 0x1f);\n  }\n  return CONCAT44((value_4 & 0x80000000) + (uint)CARRY4(temp_2,-((int)temp_4 >> 0x1f)),temp_1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_shifted_xor_080004d0",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result_1",
                "lVar2": "result_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "iVar5": "temp_3",
                "uVar6": "temp_4",
                "unaff_r5": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_7",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "temp_8"
            },
            "calling": [
                "taskScheduler",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_shifted_xor_080006ac",
            "code": "\nulonglong calculate_shifted_xor_080006ac(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp_shifted_param_1;\n  uint temp_param_1;\n  uint temp_shifted_param_2;\n  uint temp_param_3;\n  uint temp_param_2;\n  bool is_zero;\n  \n  temp_shifted_param_2 = temp_param_2 & input_param_4 >> 0x14;\n  if (temp_param_1 != temp_param_2 && temp_shifted_param_2 != temp_param_2) {\n    is_zero = (input_param_1 | input_param_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_param_3 | input_param_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000) << 0x20;\n    }\n    if (temp_param_1 == 0) {\n      temp_param_3 = input_param_2 & 0x80000000;\n      do {\n        temp_shifted_param_1 = input_param_1 & 0x80000000;\n        input_param_1 = input_param_1 << 1;\n        input_param_2 = input_param_2 * 2 + (uint)(temp_shifted_param_1 != 0);\n      } while ((input_param_2 & 0x100000) == 0);\n      input_param_2 = input_param_2 | temp_param_3;\n      if (temp_shifted_param_2 != 0) {\n        return CONCAT44(input_param_2,input_param_1);\n      }\n    }\n    do {\n      temp_shifted_param_2 = input_param_3 & 0x80000000;\n      input_param_3 = input_param_3 << 1;\n      input_param_4 = input_param_4 * 2 + (uint)(temp_shifted_param_2 != 0);\n    } while ((input_param_4 & 0x100000) == 0);\n    return CONCAT44(input_param_2,input_param_1);\n  }\n  is_zero = (input_param_1 | input_param_2 << 1) == 0;\n  if (is_zero) {\n    input_param_2 = input_param_4;\n    input_param_1 = input_param_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_param_3 | input_param_4 << 1) == 0;\n  }\n  temp_param_3 = input_param_2;\n  if (((!is_zero) && ((temp_param_1 != temp_param_2 || ((input_param_1 | input_param_2 << 0xc) == 0)))) &&\n     ((temp_shifted_param_2 != temp_param_2 || (input_param_1 = input_param_3, temp_param_3 = input_param_4, (input_param_3 | input_param_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_param_3,input_param_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_shifted_xor_080006ac",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_shifted_param_1",
                "unaff_r4": "temp_param_1",
                "uVar2": "temp_shifted_param_2",
                "uVar3": "temp_param_3",
                "in_r12": "temp_param_2",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "convert_to_double_08000724",
            "code": "\nulonglong convertToDouble_08000724(undefined4 value,uint exponent,uint sign,uint fraction)\n\n{\n  uint fractionMask;\n  uint exponentMask;\n  uint signMask;\n  uint fractionBits;\n  uint exponentBits;\n  uint signBit;\n  uint biasedExponent;\n  int exponentDifference;\n  uint shiftedExponent;\n  uint unaff_r5;\n  uint shiftedFraction;\n  uint integerPart;\n  uint error;\n  uint bias;\n  bool isSpecialCase;\n  bool isZero;\n  bool isNegative;\n  undefined8 fractionMask7;\n  \n  fractionMask7 = CONCAT44(exponent,value);\n  bias = 0x7ff;\n  biasedExponent = exponent >> 0x14 & 0x7ff;\n  isSpecialCase = biasedExponent == 0;\n  if (!isSpecialCase) {\n    unaff_r5 = fraction >> 0x14 & 0x7ff;\n    isSpecialCase = unaff_r5 == 0;\n  }\n  if (!isSpecialCase) {\n    isSpecialCase = biasedExponent == 0x7ff;\n  }\n  if (!isSpecialCase) {\n    isSpecialCase = unaff_r5 == 0x7ff;\n  }\n  if (isSpecialCase) {\n    fractionMask7 = floating_point_conversion_08000892();\n  }\n  shiftedExponent = (uint)((ulonglong)fractionMask7 >> 0x20);\n  integerPart = (uint)fractionMask7;\n  exponentDifference = biasedExponent - unaff_r5;\n  if ((sign | fraction << 0xc) == 0) {\n    biasedExponent = (shiftedExponent ^ fraction) & 0x80000000 | shiftedExponent & 0xfffff;\n    isNegative = SCARRY4(exponentDifference,bias >> 1);\n    shiftedExponent = exponentDifference + (bias >> 1);\n    isSpecialCase = (int)shiftedExponent < 0;\n    isZero = shiftedExponent == 0;\n    if (!isZero && isSpecialCase == isNegative) {\n      isNegative = SBORROW4(bias,shiftedExponent);\n      isSpecialCase = (int)(bias - shiftedExponent) < 0;\n      isZero = bias == shiftedExponent;\n    }\n    if (!isZero && isSpecialCase == isNegative) {\n      biasedExponent = biasedExponent | shiftedExponent * 0x100000;\n    }\n    if (!isZero && isSpecialCase == isNegative) {\n      return CONCAT44(biasedExponent,integerPart);\n    }\n    biasedExponent = biasedExponent | 0x100000;\n    bias = 0;\n    isZero = SBORROW4(shiftedExponent,1);\n    shiftedExponent = shiftedExponent - 1;\n    isSpecialCase = shiftedExponent == 0;\n    signMask = shiftedExponent;\n  }\n  else {\n    signMask = (fraction << 0xc) >> 4 | 0x10000000 | sign >> 0x18;\n    bias = sign << 8;\n    shiftedFraction = (shiftedExponent << 0xc) >> 4 | 0x10000000 | integerPart >> 0x18;\n    integerPart = integerPart * 0x100;\n    biasedExponent = (shiftedExponent ^ fraction) & 0x80000000;\n    isSpecialCase = signMask <= shiftedFraction;\n    if (shiftedFraction == signMask) {\n      isSpecialCase = bias <= integerPart;\n    }\n    exponentDifference = exponentDifference + (uint)isSpecialCase;\n    shiftedExponent = exponentDifference + 0x3fd;\n    if (isSpecialCase == false) {\n      signMask = signMask >> 1;\n      bias = (uint)((sign >> 0x18 & 1) != 0) << 0x1f | bias >> 1;\n    }\n    error = integerPart - bias;\n    shiftedFraction = (shiftedFraction - signMask) - (uint)(integerPart < bias);\n    fractionBits = signMask >> 1;\n    fractionMask = (uint)((signMask & 1) != 0) << 0x1f | bias >> 1;\n    integerPart = 0x100000;\n    signMask = 0x80000;\n    while( true ) {\n      isSpecialCase = fractionMask <= error;\n      if (fractionBits < shiftedFraction || shiftedFraction - fractionBits < (uint)isSpecialCase) {\n        error = error - fractionMask;\n        integerPart = integerPart | signMask;\n        shiftedFraction = (shiftedFraction - fractionBits) - (uint)!isSpecialCase;\n      }\n      exponentBits = fractionBits >> 1;\n      fractionMask = (uint)((fractionBits & 1) != 0) << 0x1f | fractionMask >> 1;\n      isZero = fractionMask <= error;\n      isSpecialCase = shiftedFraction - exponentBits < (uint)isZero;\n      bias = shiftedFraction;\n      if (exponentBits < shiftedFraction || isSpecialCase) {\n        error = error - fractionMask;\n        bias = (shiftedFraction - exponentBits) - (uint)!isZero;\n      }\n      if (exponentBits < shiftedFraction || isSpecialCase) {\n        integerPart = integerPart | signMask >> 1;\n      }\n      shiftedFraction = fractionBits >> 2;\n      exponentMask = (uint)((exponentBits & 1) != 0) << 0x1f | fractionMask >> 1;\n      isZero = exponentMask <= error;\n      isSpecialCase = bias - shiftedFraction < (uint)isZero;\n      exponentBits = bias;\n      if (shiftedFraction < bias || isSpecialCase) {\n        error = error - exponentMask;\n        exponentBits = (bias - shiftedFraction) - (uint)!isZero;\n      }\n      if (shiftedFraction < bias || isSpecialCase) {\n        integerPart = integerPart | signMask >> 2;\n      }\n      signBit = fractionBits >> 3;\n      fractionMask = (uint)((shiftedFraction & 1) != 0) << 0x1f | exponentMask >> 1;\n      isZero = fractionMask <= error;\n      isSpecialCase = exponentBits - signBit < (uint)isZero;\n      shiftedFraction = exponentBits;\n      if (signBit < exponentBits || isSpecialCase) {\n        error = error - fractionMask;\n        shiftedFraction = (exponentBits - signBit) - (uint)!isZero;\n      }\n      if (signBit < exponentBits || isSpecialCase) {\n        integerPart = integerPart | signMask >> 3;\n      }\n      bias = shiftedFraction | error;\n      if (bias == 0) break;\n      shiftedFraction = shiftedFraction << 4 | error >> 0x1c;\n      error = error << 4;\n      fractionBits = fractionBits & 0xfffffff8 | fractionMask >> 0x1d;\n      fractionMask = (exponentMask >> 1) << 3;\n      signMask = signMask >> 4;\n      if (signMask == 0) {\n        signBit = fractionBits;\n        if ((biasedExponent & 0x100000) != 0) goto LAB_08000842;\n        biasedExponent = biasedExponent | integerPart;\n        integerPart = 0;\n        signMask = 0x80000000;\n      }\n    }\n    if ((biasedExponent & 0x100000) == 0) {\n      biasedExponent = biasedExponent | integerPart;\n      integerPart = 0;\n    }\nLAB_08000842:\n    isNegative = 0xfc < shiftedExponent;\n    isZero = SBORROW4(shiftedExponent,0xfd);\n    fractionBits = exponentDifference + 0x300;\n    isSpecialCase = fractionBits == 0;\n    signMask = fractionBits;\n    if (isNegative && !isSpecialCase) {\n      isNegative = 0x6ff < fractionBits;\n      isZero = SBORROW4(fractionBits,0x700);\n      signMask = exponentDifference - 0x400;\n      isSpecialCase = fractionBits == 0x700;\n    }\n    if (!isNegative || isSpecialCase) {\n      isSpecialCase = signBit <= shiftedFraction;\n      if (shiftedFraction == signBit) {\n        isSpecialCase = fractionMask <= error;\n      }\n      if (shiftedFraction == signBit && error == fractionMask) {\n        isSpecialCase = (integerPart & 1) != 0;\n      }\n      return CONCAT44(biasedExponent + shiftedExponent * 0x100000 + (uint)CARRY4(integerPart,(uint)isSpecialCase),integerPart + isSpecialCase);\n    }\n  }\n  if (!isSpecialCase && (int)signMask < 0 == isZero) {\n    return (ulonglong)(biasedExponent & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(shiftedExponent,0x36);\n  isSpecialCase = (int)(shiftedExponent + 0x36) < 0;\n  isZero = shiftedExponent == 0xffffffca;\n  if (isZero || isSpecialCase != isNegative) {\n    integerPart = 0;\n  }\n  if (isZero || isSpecialCase != isNegative) {\n    biasedExponent = biasedExponent & 0x80000000;\n  }\n  if (isZero || isSpecialCase != isNegative) {\n    return CONCAT44(biasedExponent,integerPart);\n  }\n  signMask = -shiftedExponent;\n  shiftedFraction = signMask - 0x20;\n  if (0x1f < (int)signMask) {\n    signMask = integerPart >> (shiftedFraction & 0xff) | biasedExponent << (0x20 - shiftedFraction & 0xff);\n    shiftedExponent = (biasedExponent >> (shiftedFraction & 0xff) & ~((biasedExponent & 0x80000000) >> (shiftedFraction & 0xff))) -\n            ((int)signMask >> 0x1f);\n    if ((bias | integerPart << (0x20 - shiftedFraction & 0xff) | signMask << 1) == 0) {\n      shiftedExponent = shiftedExponent & ~(signMask >> 0x1f);\n    }\n    return CONCAT44(biasedExponent,shiftedExponent) & 0x80000000ffffffff;\n  }\n  exponentDifference = signMask - 0x14;\n  if (exponentDifference != 0 && exponentDifference < 0 == SCARRY4(shiftedFraction,0xc)) {\n    shiftedExponent = 0xc - exponentDifference;\n    signMask = integerPart << (shiftedExponent & 0xff);\n    integerPart = integerPart >> (0x20 - shiftedExponent & 0xff) | biasedExponent << (shiftedExponent & 0xff);\n    shiftedExponent = integerPart + -((int)signMask >> 0x1f);\n    if ((bias | signMask << 1) == 0) {\n      shiftedExponent = shiftedExponent & ~(signMask >> 0x1f);\n    }\n    return CONCAT44((biasedExponent & 0x80000000) + (uint)CARRY4(integerPart,-((int)signMask >> 0x1f)),shiftedExponent);\n  }\n  shiftedFraction = integerPart << (shiftedExponent + 0x20 & 0xff);\n  integerPart = integerPart >> (signMask & 0xff) | biasedExponent << (shiftedExponent + 0x20 & 0xff);\n  shiftedExponent = integerPart + -((int)shiftedFraction >> 0x1f);\n  if ((bias | shiftedFraction << 1) == 0) {\n    shiftedExponent = shiftedExponent & ~(shiftedFraction >> 0x1f);\n  }\n  return CONCAT44((biasedExponent & 0x80000000) +\n                  ((biasedExponent & 0x7fffffff) >> (signMask & 0xff)) +\n                  (uint)CARRY4(integerPart,-((int)shiftedFraction >> 0x1f)),shiftedExponent);\n}\n\n",
            "renaming": {
                "FUN_08000724": "convert_to_double_08000724",
                "param_1": "value",
                "param_2": "exponent",
                "param_3": "sign",
                "param_4": "fraction",
                "uVar1": "fractionMask",
                "uVar2": "exponentMask",
                "uVar3": "signMask",
                "uVar4": "fractionBits",
                "uVar5": "exponentBits",
                "uVar6": "signBit",
                "uVar7": "biasedExponent",
                "iVar8": "exponentDifference",
                "uVar9": "shiftedExponent",
                "uVar10": "shiftedFraction",
                "uVar11": "integerPart",
                "uVar12": "error",
                "uVar13": "bias",
                "bVar14": "isSpecialCase",
                "bVar15": "isZero",
                "bVar16": "isNegative"
            },
            "calling": [
                "__ieee754_atan2",
                "sqrt",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "floating_point_conversion_08000892",
            "code": "\nulonglong floatingPointConversion_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint tempVar3;\n  uint tempVar1;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar2;\n  bool flag;\n  \n  tempVar4 = tempVar2 & input4 >> 0x14;\n  tempVar5 = input2;\n  if (tempVar1 != tempVar2 || tempVar4 != tempVar2) {\n    if (tempVar1 == tempVar2) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, tempVar5 = input4, tempVar4 != tempVar2)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (tempVar4 == tempVar2) {\n      input1 = input3;\n      tempVar5 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      flag = (input1 | input2 << 1) == 0;\n      if (!flag) {\n        flag = (input3 | input4 << 1) == 0;\n      }\n      if (!flag) {\n        if (tempVar1 == 0) {\n          tempVar5 = input2 & 0x80000000;\n          do {\n            tempVar3 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(tempVar3 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | tempVar5;\n          if (tempVar4 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          tempVar5 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(tempVar5 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(tempVar5,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "floating_point_conversion_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "tempVar1",
                "in_r12": "tempVar2",
                "uVar1": "tempVar3",
                "uVar2": "tempVar4",
                "uVar3": "tempVar5",
                "bVar4": "flag"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "compare_parameters_08000904",
            "code": "\nuint compareParameters_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xorResult;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    xorResult = value2 ^ value4;\n    isZero = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)xorResult && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "compare_parameters_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xorResult",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "compare_floats_08000980",
            "code": "\nvoid compareFloats_08000980(undefined4 firstFloat,undefined4 secondFloat,undefined4 compareResult,undefined4 comparisonThreshold)\n\n{\n  __aeabi_cdcmpeq(compareResult,comparisonThreshold,firstFloat,secondFloat);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "compare_floats_08000980",
                "param_1": "firstFloat",
                "param_2": "secondFloat",
                "param_3": "compareResult",
                "param_4": "comparisonThreshold"
            },
            "calling": [
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "convert_float_to_undefined_08000990",
            "code": "\nundefined4 convertFloatToUndefined_08000990(undefined4 inputFloat)\n\n{\n  performUndefinedConversion();\n  return inputFloat;\n}\n\n",
            "renaming": {
                "FUN_08000990": "convert_float_to_undefined_08000990",
                "param_1": "inputFloat",
                "__nedf2": "performUndefinedConversion"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_dcmpeq"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_cdec_eq_zero_080009a0",
            "code": "\nbool check_cdec_eq_zero_080009a0(void)\n\n{\n  char result;\n  \n  compare_double();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_cdec_eq_zero_080009a0",
                "in_ZR": "result",
                "__aeabi_cdcmpeq": "compare_double"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_if_null_character_080009b4",
            "code": "\nbool check_if_null_character_080009b4(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_if_null_character_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "sqrt",
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "compare_floats_080009c8",
            "code": "\nbool compareFloats_080009c8(void)\n\n{\n  undefined isZero;\n  undefined isSignDifferent;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)isSignDifferent || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "compare_floats_080009c8",
                "in_ZR": "isZero",
                "in_CY": "isSignDifferent"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_null_terminated_080009f0",
            "code": "\nbool is_null_terminated_080009f0(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_null_terminated_080009f0",
                "in_CY": "input_char"
            },
            "calling": [
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_inputs_08000a04",
            "code": "\nundefined4 check_inputs_08000a04(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_inputs_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_value_08000a30",
            "code": "\nuint calculateFloatingPointValue_08000a30(uint inputValue,uint bitPattern)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  temp1 = bitPattern * 2;\n  isLessThanThreshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThanThreshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((bitPattern & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputValue | bitPattern << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return bitPattern & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return bitPattern & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputValue >> (temp1 & 0xff);\n    if (inputValue << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = bitPattern & 0x1fffff | 0x100000;\n    inputValue = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (bitPattern & 0x80000000 | inputValue >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_value_08000a30",
                "param_1": "inputValue",
                "param_2": "bitPattern",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_float_08000ad8",
            "code": "\nuint calculate_float_08000ad8(uint input_a,uint input_b,undefined4 input_c,uint input_d)\n\n{\n  int shifted_a;\n  int shifted_b;\n  uint temp_a;\n  uint temp_b;\n  uint result_a;\n  uint result_b;\n  uint difference;\n  bool isEqual;\n  \n  temp_a = input_b ^ 0x80000000;\n  result_a = input_a << 1;\n  isEqual = result_a == 0;\n  if (!isEqual) {\n    input_d = input_b << 1;\n    isEqual = input_d == 0;\n  }\n  if (!isEqual) {\n    isEqual = result_a == input_d;\n  }\n  shifted_a = (int)result_a >> 0x18;\n  if (!isEqual) {\n    isEqual = shifted_a == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input_d >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shifted_b = (int)(input_b << 1) >> 0x18;\n    if (shifted_a == -1 || shifted_b == -1) {\n      result_a = temp_a;\n      if (shifted_a == -1) {\n        result_a = input_a;\n      }\n      if (shifted_a != -1 || shifted_b != -1) {\n        temp_a = result_a;\n      }\n      isEqual = (result_a & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (temp_a & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = result_a == temp_a;\n      }\n      if (!isEqual) {\n        result_a = result_a | 0x400000;\n      }\n      return result_a;\n    }\n    if (((input_a ^ temp_a) & 0x7fffffff) != 0) {\n      if (result_a == 0) {\n        input_a = temp_a;\n      }\n      return input_a;\n    }\n    if (input_a != temp_a) {\n      return 0;\n    }\n    if ((result_a & 0xff000000) == 0) {\n      temp_a = input_a << 1;\n      if ((input_a & 0x80000000) != 0) {\n        temp_a = temp_a | 0x80000000;\n      }\n      return temp_a;\n    }\n    if (result_a < 0xfe000000) {\n      return input_a + 0x800000;\n    }\n    input_a = input_a & 0x80000000;\nLAB_08000c12:\n    return input_a | 0x7f800000;\n  }\n  result_a = result_a >> 0x18;\n  input_d = input_d >> 0x18;\n  difference = input_d - result_a;\n  isEqual = difference != 0;\n  result_b = result_a;\n  if (isEqual && result_a <= input_d) {\n    result_b = result_a + difference;\n  }\n  if (isEqual && result_a <= input_d) {\n    temp_a = temp_a ^ input_a;\n  }\n  if (isEqual && result_a <= input_d) {\n    input_a = input_a ^ temp_a;\n  }\n  if (isEqual && result_a <= input_d) {\n    temp_a = temp_a ^ input_a;\n  }\n  if (input_d < result_a) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_a;\n  }\n  result_a = input_a & 0xffffff | 0x800000;\n  if ((input_a & 0x80000000) != 0) {\n    result_a = -result_a;\n  }\n  temp_b = temp_a & 0xffffff | 0x800000;\n  if ((temp_a & 0x80000000) != 0) {\n    temp_b = -temp_b;\n  }\n  if (result_b == difference) {\n    temp_b = temp_b ^ 0x800000;\n    if (result_b == 0) {\n      result_a = result_a ^ 0x800000;\n      result_b = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result_a = result_a + ((int)temp_b >> (difference & 0xff));\n  temp_b = temp_b << (0x20 - difference & 0xff);\n  input_a = result_a & 0x80000000;\n  if ((int)result_a < 0) {\n    isEqual = temp_b != 0;\n    temp_b = -temp_b;\n    result_a = -result_a - (uint)isEqual;\n  }\n  if (result_a < 0x800000) {\n    temp_a = temp_b & 0x80000000;\n    temp_b = temp_b << 1;\n    result_a = result_a * 2 + (uint)(temp_a != 0);\n    temp_a = result_b - 2;\n    if ((result_a & 0x800000) == 0) {\n      difference = LZCOUNT(result_a) - 8;\n      result_a = result_a << (difference & 0xff);\n      if ((int)temp_a < (int)difference) {\n        result_a = result_a >> (-(temp_a - difference) & 0xff);\n      }\n      else {\n        result_a = result_a + (temp_a - difference) * 0x800000;\n      }\n      return result_a | input_a;\n    }\n  }\n  else {\n    temp_a = result_b - 1;\n    if (0xffffff < result_a) {\n      temp_a = result_a & 1;\n      result_a = result_a >> 1;\n      temp_b = (uint)(temp_a != 0) << 0x1f | temp_b >> 1;\n      temp_a = result_b;\n      if (0xfd < result_b) goto LAB_08000c12;\n    }\n  }\n  result_a = result_a + temp_a * 0x800000 + (uint)(0x7fffffff < temp_b);\n  if (temp_b == 0x80000000) {\n    result_a = result_a & 0xfffffffe;\n  }\n  return result_a | input_a;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "iVar1": "shifted_a",
                "iVar2": "shifted_b",
                "uVar3": "temp_a",
                "uVar4": "temp_b",
                "uVar5": "result_a",
                "uVar6": "result_b",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_result_08000adc",
            "code": "\nuint calculateFloatingPointResult_08000adc(uint num1,uint num2,undefined4 param3,uint param4)\n\n{\n  int shiftAmt1;\n  int shiftAmt2;\n  uint num1Shifted;\n  uint num1ShiftedTwice;\n  uint tmpVar1;\n  uint tmpVar2;\n  bool isConditionMet;\n  \n  num1ShiftedTwice = num1 << 1;\n  isConditionMet = num1ShiftedTwice == 0;\n  if (!isConditionMet) {\n    param4 = num2 << 1;\n    isConditionMet = param4 == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = num1ShiftedTwice == param4;\n  }\n  shiftAmt1 = (int)num1ShiftedTwice >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftAmt1 == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)param4 >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftAmt2 = (int)(num2 << 1) >> 0x18;\n    if (shiftAmt1 == -1 || shiftAmt2 == -1) {\n      num1ShiftedTwice = num2;\n      if (shiftAmt1 == -1) {\n        num1ShiftedTwice = num1;\n      }\n      if (shiftAmt1 != -1 || shiftAmt2 != -1) {\n        num2 = num1ShiftedTwice;\n      }\n      isConditionMet = (num1ShiftedTwice & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (num2 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = num1ShiftedTwice == num2;\n      }\n      if (!isConditionMet) {\n        num1ShiftedTwice = num1ShiftedTwice | 0x400000;\n      }\n      return num1ShiftedTwice;\n    }\n    if (((num1 ^ num2) & 0x7fffffff) != 0) {\n      if (num1ShiftedTwice == 0) {\n        num1 = num2;\n      }\n      return num1;\n    }\n    if (num1 != num2) {\n      return 0;\n    }\n    if ((num1ShiftedTwice & 0xff000000) == 0) {\n      num1ShiftedTwice = num1 << 1;\n      if ((num1 & 0x80000000) != 0) {\n        num1ShiftedTwice = num1ShiftedTwice | 0x80000000;\n      }\n      return num1ShiftedTwice;\n    }\n    if (num1ShiftedTwice < 0xfe000000) {\n      return num1 + 0x800000;\n    }\n    num1 = num1 & 0x80000000;\nLAB_08000c12:\n    return num1 | 0x7f800000;\n  }\n  num1ShiftedTwice = num1ShiftedTwice >> 0x18;\n  param4 = param4 >> 0x18;\n  tmpVar2 = param4 - num1ShiftedTwice;\n  isConditionMet = tmpVar2 != 0;\n  tmpVar1 = num1ShiftedTwice;\n  if (isConditionMet && num1ShiftedTwice <= param4) {\n    tmpVar1 = num1ShiftedTwice + tmpVar2;\n  }\n  if (isConditionMet && num1ShiftedTwice <= param4) {\n    num2 = num2 ^ num1;\n  }\n  if (isConditionMet && num1ShiftedTwice <= param4) {\n    num1 = num1 ^ num2;\n  }\n  if (isConditionMet && num1ShiftedTwice <= param4) {\n    num2 = num2 ^ num1;\n  }\n  if (param4 < num1ShiftedTwice) {\n    tmpVar2 = -tmpVar2;\n  }\n  if (0x19 < tmpVar2) {\n    return num1;\n  }\n  num1ShiftedTwice = num1 & 0xffffff | 0x800000;\n  if ((num1 & 0x80000000) != 0) {\n    num1ShiftedTwice = -num1ShiftedTwice;\n  }\n  num1Shifted = num2 & 0xffffff | 0x800000;\n  if ((num2 & 0x80000000) != 0) {\n    num1Shifted = -num1Shifted;\n  }\n  if (tmpVar1 == tmpVar2) {\n    num1Shifted = num1Shifted ^ 0x800000;\n    if (tmpVar1 == 0) {\n      num1ShiftedTwice = num1ShiftedTwice ^ 0x800000;\n      tmpVar1 = 1;\n    }\n    else {\n      tmpVar2 = tmpVar2 - 1;\n    }\n  }\n  num1ShiftedTwice = num1ShiftedTwice + ((int)num1Shifted >> (tmpVar2 & 0xff));\n  num1Shifted = num1Shifted << (0x20 - tmpVar2 & 0xff);\n  num1 = num1ShiftedTwice & 0x80000000;\n  if ((int)num1ShiftedTwice < 0) {\n    isConditionMet = num1Shifted != 0;\n    num1Shifted = -num1Shifted;\n    num1ShiftedTwice = -num1ShiftedTwice - (uint)isConditionMet;\n  }\n  if (num1ShiftedTwice < 0x800000) {\n    tmpVar2 = num1Shifted & 0x80000000;\n    num1Shifted = num1Shifted << 1;\n    num1ShiftedTwice = num1ShiftedTwice * 2 + (uint)(tmpVar2 != 0);\n    tmpVar2 = tmpVar1 - 2;\n    if ((num1ShiftedTwice & 0x800000) == 0) {\n      tmpVar1 = LZCOUNT(num1ShiftedTwice) - 8;\n      num1ShiftedTwice = num1ShiftedTwice << (tmpVar1 & 0xff);\n      if ((int)tmpVar2 < (int)tmpVar1) {\n        num1ShiftedTwice = num1ShiftedTwice >> (-(tmpVar2 - tmpVar1) & 0xff);\n      }\n      else {\n        num1ShiftedTwice = num1ShiftedTwice + (tmpVar2 - tmpVar1) * 0x800000;\n      }\n      return num1ShiftedTwice | num1;\n    }\n  }\n  else {\n    tmpVar2 = tmpVar1 - 1;\n    if (0xffffff < num1ShiftedTwice) {\n      tmpVar2 = num1ShiftedTwice & 1;\n      num1ShiftedTwice = num1ShiftedTwice >> 1;\n      num1Shifted = (uint)(tmpVar2 != 0) << 0x1f | num1Shifted >> 1;\n      tmpVar2 = tmpVar1;\n      if (0xfd < tmpVar1) goto LAB_08000c12;\n    }\n  }\n  num1ShiftedTwice = num1ShiftedTwice + tmpVar2 * 0x800000 + (uint)(0x7fffffff < num1Shifted);\n  if (num1Shifted == 0x80000000) {\n    num1ShiftedTwice = num1ShiftedTwice & 0xfffffffe;\n  }\n  return num1ShiftedTwice | num1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_result_08000adc",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftAmt1",
                "iVar2": "shiftAmt2",
                "uVar3": "num1Shifted",
                "uVar4": "num1ShiftedTwice",
                "uVar5": "tmpVar1",
                "uVar6": "tmpVar2",
                "bVar7": "isConditionMet"
            },
            "calling": [
                "taskScheduler",
                "AHRS_GetPitch",
                "AK8963_Init",
                "Motor_DistributeSpeed",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_result_08000c3c",
            "code": "\nuint calculateResult_08000c3c(uint inputValue)\n\n{\n  uint leadingZeroCount;\n  uint shiftCount;\n  int offsetValue;\n  uint maskValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroCount = LZCOUNT(inputValue);\n  shiftCount = leadingZeroCount - 8;\n  offsetValue = shiftCount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroCount) {\n    maskValue = 0 << (shiftCount & 0xff);\n    leadingZeroCount = offsetValue + (inputValue << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < maskValue);\n    if (maskValue == 0x80000000) {\n      leadingZeroCount = leadingZeroCount & 0xfffffffe;\n    }\n    return leadingZeroCount;\n  }\n  shiftCount = inputValue << leadingZeroCount + 0x18;\n  leadingZeroCount = offsetValue + ((inputValue >> (0x20 - (leadingZeroCount + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    leadingZeroCount = leadingZeroCount & ~(shiftCount >> 0x1f);\n  }\n  return leadingZeroCount;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_result_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroCount",
                "uVar2": "shiftCount",
                "iVar3": "offsetValue",
                "uVar4": "maskValue"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "reverse_bits_08000c44",
            "code": "\nuint reverseBits_08000c44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "reverse_bits_08000c44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "taskScheduler",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_value_08000cec",
            "code": "\nuint calculateFloatValue_08000cec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint shiftAmount1;\n  int sumShiftedInputs;\n  int shiftedDiff;\n  uint lowerProduct;\n  int shiftAmount2;\n  uint bitwiseResult;\n  bool isZero;\n  bool isNegative;\n  \n  shiftAmount1 = input1 >> 0x17 & 0xff;\n  isZero = shiftAmount1 == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftAmount1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shiftAmount1 == 0xff || input4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      bitwiseResult = result;\n      if (((isZero) || ((shiftAmount1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (bitwiseResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return bitwiseResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = shiftAmount1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      shiftAmount1 = shiftAmount1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sumShiftedInputs = shiftAmount1 + input4;\n  bitwiseResult = input1 ^ input2;\n  shiftAmount1 = input1 << 9;\n  isZero = shiftAmount1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (shiftAmount1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = bitwiseResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(sumShiftedInputs,0x7f);\n    shiftedDiff = sumShiftedInputs + -0x7f;\n    isZero = shiftedDiff == 0;\n    shiftAmount2 = shiftedDiff;\n    if (!isZero && 0x7e < sumShiftedInputs) {\n      isNegative = SBORROW4(0xff,shiftedDiff);\n      shiftAmount2 = 0xff - shiftedDiff;\n      isZero = shiftedDiff == 0xff;\n    }\n    if (!isZero && shiftAmount2 < 0 == isNegative) {\n      result = result | shiftedDiff * 0x800000;\n    }\n    if (!isZero && shiftAmount2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    lowerProduct = 0;\n    isNegative = SBORROW4(shiftedDiff,1);\n    bitwiseResult = sumShiftedInputs - 0x80;\n    isZero = bitwiseResult == 0;\n    shiftAmount1 = bitwiseResult;\n  }\n  else {\n    product = (ulonglong)(shiftAmount1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    lowerProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | lowerProduct >> 0x1f;\n      lowerProduct = lowerProduct << 1;\n    }\n    result = bitwiseResult & 0x80000000 | result;\n    bitwiseResult = (sumShiftedInputs + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(bitwiseResult,0xfd);\n    isZero = bitwiseResult == 0xfd;\n    shiftAmount1 = bitwiseResult - 0xfd;\n    if (bitwiseResult < 0xfe) {\n      result = result + bitwiseResult * 0x800000 + (uint)(0x7fffffff < lowerProduct);\n      if (lowerProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)shiftAmount1 < 0 != isNegative) {\n    isZero = (int)(bitwiseResult + 0x19) < 0;\n    if (bitwiseResult == 0xffffffe7 || isZero != SCARRY4(bitwiseResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (bitwiseResult != 0xffffffe7 && isZero == SCARRY4(bitwiseResult,0x19)) {\n      shiftAmount1 = (result << 1) >> (-bitwiseResult & 0xff);\n      bitwiseResult = result << (bitwiseResult + 0x20 & 0xff);\n      shiftAmount1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftAmount1 >> 1) + (uint)((byte)shiftAmount1 & 1);\n      if ((lowerProduct | bitwiseResult << 1) == 0) {\n        shiftAmount1 = shiftAmount1 & ~(bitwiseResult >> 0x1f);\n      }\n      return shiftAmount1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_value_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shiftAmount1",
                "iVar4": "sumShiftedInputs",
                "iVar5": "shiftedDiff",
                "uVar6": "lowerProduct",
                "iVar7": "shiftAmount2",
                "uVar8": "bitwiseResult",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "AHRS_GetPitch",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "PID_UpdateAltitude",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_08000e54",
            "code": "\nuint calculateFloatingPoint_08000e54(uint num1,uint num2,undefined4 param3,uint param4)\n\n{\n  uint mantissa1;\n  uint exponent1;\n  int exponentDifference;\n  uint uVar4;\n  int newExponent;\n  uint result;\n  bool isZero;\n  bool bVar8;\n  bool bVar9;\n  \n  exponent1 = num1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    param4 = num2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = num2 >> 0x17 & 0xff;\n    result = num1;\n    if (exponent1 == 0xff) {\n      if (((num1 & 0x7fffff) != 0) || (result = num2, param4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = num2;\n        if ((num2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (num1 ^ num2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (num1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (num2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent1 == 0;\n        result = num1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            num1 = num1 << 1;\n            isZero = (num1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent1 = exponent1 - 1;\n        }\n        num1 = num1 | result;\n        isZero = param4 == 0;\n        result = num2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            num2 = num2 << 1;\n            isZero = (num2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        num2 = num2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((num1 & 0x7fffffff) == 0) {\n        if ((num2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    num1 = num1 ^ num2;\n  }\n  else {\nLAB_08000e6c:\n    exponentDifference = exponent1 - param4;\n    if (num2 << 9 == 0) {\n      num1 = (num1 ^ num2) & 0x80000000 | num1 & 0x7fffff;\n      bVar9 = SCARRY4(exponentDifference,0x7f);\n      newExponent = exponentDifference + 0x7f;\n      isZero = newExponent < 0;\n      bVar8 = newExponent == 0;\n      if (!bVar8 && isZero == bVar9) {\n        bVar9 = SBORROW4(0xff,newExponent);\n        isZero = 0xff - newExponent < 0;\n        bVar8 = newExponent == 0xff;\n      }\n      if (!bVar8 && isZero == bVar9) {\n        num1 = num1 | newExponent * 0x800000;\n      }\n      if (!bVar8 && isZero == bVar9) {\n        return num1;\n      }\n      num1 = num1 | 0x800000;\n      exponent1 = 0;\n      bVar8 = SBORROW4(newExponent,1);\n      uVar4 = exponentDifference + 0x7e;\n      isZero = uVar4 == 0;\n      result = uVar4;\n    }\n    else {\n      mantissa1 = (num2 << 9) >> 4 | 0x10000000;\n      exponent1 = (num1 << 9) >> 4 | 0x10000000;\n      num1 = (num1 ^ num2) & 0x80000000;\n      isZero = mantissa1 <= exponent1;\n      if (!isZero) {\n        exponent1 = exponent1 << 1;\n      }\n      uVar4 = exponentDifference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (mantissa1 <= exponent1) {\n          exponent1 = exponent1 - mantissa1;\n          num1 = num1 | result;\n        }\n        isZero = mantissa1 >> 1 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (mantissa1 >> 1);\n        }\n        if (isZero) {\n          num1 = num1 | result >> 1;\n        }\n        isZero = mantissa1 >> 2 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (mantissa1 >> 2);\n        }\n        if (isZero) {\n          num1 = num1 | result >> 2;\n        }\n        isZero = mantissa1 >> 3 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (mantissa1 >> 3);\n        }\n        if (isZero) {\n          num1 = num1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        isZero = exponent1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      isZero = uVar4 == 0xfd;\n      result = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        num1 = num1 + uVar4 * 0x800000 + (uint)(mantissa1 <= exponent1);\n        if (exponent1 - mantissa1 == 0) {\n          num1 = num1 & 0xfffffffe;\n        }\n        return num1;\n      }\n    }\n    if (isZero || (int)result < 0 != bVar8) {\n      isZero = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || isZero != SCARRY4(uVar4,0x19)) {\n        num1 = num1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || isZero != SCARRY4(uVar4,0x19)) {\n        return num1;\n      }\n      result = (num1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = num1 << (uVar4 + 0x20 & 0xff);\n      result = ((uint)((num1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | uVar4 << 1) == 0) {\n        result = result & ~(uVar4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return num1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_08000e54",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "mantissa1",
                "uVar2": "exponent1",
                "iVar3": "exponentDifference",
                "iVar5": "newExponent",
                "uVar6": "result",
                "bVar7": "isZero"
            },
            "calling": [
                "taskScheduler",
                "PID_Compute",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculate_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs",
                "bVar5": "is_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "compare_floats_08000ffc",
            "code": "\nvoid compareFloats_08000ffc(undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cfcmpeq(value2,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 firstParam,undefined4 secondParam)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "compare_floating_point_numbers_08001014",
            "code": "\nbool compareFloatingPointNumbers_08001014(void)\n\n{\n  char result;\n  \n  __aeabi_cfcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "compare_floating_point_numbers_08001014",
                "in_ZR": "result"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_zero_08001028",
            "code": "\nbool check_if_zero_08001028(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_zero_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "PID_Compute",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "is_inverse_of_zero_or_carry_flag_le_08001050",
            "code": "\nboolean is_inverse_of_zero_or_carry_flag_le_08001050(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_flag;\n  \n  check_float_less_than_or_equal();\n  result !(boolean)is_carry_flag || (boolean)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "is_inverse_of_zero_or_carry_flag_le_08001050",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_flag",
                "__aeabi_cfrcmple": "check_float_less_than_or_equal",
                "bool": "boolean",
                "return": "result",
                "(bool)": "(boolean)"
            },
            "calling": [
                "AHRS_GetYaw"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_null_termination_08001064",
            "code": "\nbool check_null_termination_08001064(void)\n\n{\n  char char_to_check;\n  \n  __aeabi_cfrcmple();\n  return char_to_check == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_null_termination_08001064",
                "in_CY": "char_to_check"
            },
            "calling": [
                "PID_Compute",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "reverse_and_shift_08001078",
            "code": "\nuint reverse_and_shift_08001078(uint input_num)\n\n{\n  uint shifted_value;\n  uint shift_difference;\n  \n  if (input_num << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_num << 1) >> 0x18;\n  shift_difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && shift_difference != 0) {\n    shifted_value = (input_num << 8 | 0x80000000) >> (shift_difference & 0xff);\n    if ((input_num & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((shift_difference == 0xffffff9f) && ((input_num & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_num = input_num & 0x80000000;\n  if (input_num == 0) {\n    input_num = 0x7fffffff;\n  }\n  return input_num;\n}\n\n",
            "renaming": {
                "FUN_08001078": "reverse_and_shift_08001078",
                "param_1": "input_num",
                "uVar1": "shifted_value",
                "uVar2": "shift_difference"
            },
            "calling": [
                "taskScheduler",
                "Motor_DistributeSpeed",
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "bitwise_operation_080010c4",
            "code": "\nuint bitwiseOperation_080010c4(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "bitwise_operation_080010c4",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initializeSystem_08001104(undefined4 priority)\n\n{\n  uint sysClockFreq;\n  \n  sysClockFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(sysClockFreq / 1000);\n  HAL_NVIC_SetPriority(0xffffffff,priority,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "priority",
                "uVar1": "sysClockFreq"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_hardware_08001128",
            "code": "\n\n\nundefined4 initializeHardware_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setInterruptPriorityGrouping(3);\n  initializeTick(0);\n  initializeHardware_08001128Specific();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_hardware_08001128",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializeHardwareSpecific"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "micros",
                "HAL_I2C_Mem_Read",
                "serialWrite",
                "HAL_RCC_OscConfig",
                "millis",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_protection_08001170",
            "code": "\n\n\nvoid configureMemoryProtection_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_protection_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_MspInit",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "assign_parameter_to_memory_08001194",
            "code": "\n\n\nvoid assignParameterToMemory_08001194(uint parameter1,uint parameter2,uint parameter3)\n\n{\n  undefined shiftedValue;\n  uint shiftAmount;\n  uint shiftedPosition;\n  uint shiftedPositionOffset;\n  \n  shiftedPosition = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - shiftedPosition;\n  shiftedPositionOffset = shiftedPosition + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (shiftedPositionOffset < 7) {\n    shiftedPosition = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < shiftedPositionOffset) {\n    shiftedPosition = shiftedPosition - 3;\n  }\n  shiftedValue = (undefined)\n          ((parameter3 & (1 << (shiftedPosition & 0xff)) - 1U | (parameter2 & shiftAmount) << (shiftedPosition & 0xff)) << 4);\n  if (-1 < (int)parameter1) {\n    shiftedPosition = parameter1 + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    shiftedPosition = parameter1 & 0xf;\n  }\n  if (-1 < (int)parameter1) {\n    *(undefined *)(shiftedPosition + 0x300) = shiftedValue;\n  }\n  else {\n    *(undefined *)(shiftAmount + shiftedPosition) = shiftedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "assign_parameter_to_memory_08001194",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount",
                "uVar3": "shiftedPosition",
                "uVar4": "shiftedPositionOffset"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config",
                "HAL_UART_MspInit",
                "HAL_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_memory_080011fc",
            "code": "\nvoid setBitInMemory_080011fc(uint bitPosition)\n\n{\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_memory_080011fc",
                "param_1": "bitPosition"
            },
            "calling": [
                "HAL_UART_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "FUNC_08001214",
            "code": "\n\n\nundefined4 FUNC_08001214(int param_1)\n\n{\n  if (param_1 - 1U < 0x1000000) {\n    _DAT_e000e014 = param_1 - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "FUNC_08001214"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_value_08001240",
            "code": "\n\n\nvoid setFlagValue_08001240(int flag)\n\n{\n  if (flag == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_value_08001240",
                "param_1": "flag"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_permissions_08001264",
            "code": "\n\n\nvoid updatePermissions_08001264(uint *permissions,uint *mask)\n\n{\n  uint permissionFlag;\n  uint bitwiseAndResult;\n  uint headerValue;\n  int permissionIndex;\n  uint iteration;\n  uint bitwiseCheck;\n  uint headerValueCheck;\n  uint *permissionPtr;\n  int bitShift;\n  \n  permissionFlag = 0;\n  iteration = 0;\n  do {\n    bitwiseCheck = 1 << (iteration & 0xff);\n    bitwiseAndResult = bitwiseCheck & *mask;\n    if (bitwiseCheck == bitwiseAndResult) {\n      headerValue = mask[1];\n      if (headerValue == 0x12) {\n        permissionFlag = mask[3] + 0xc;\n      }\n      else if (headerValue < 0x13) {\n        if (headerValue == 2) {\n          permissionFlag = mask[3] + 8;\n        }\n        else if (headerValue < 3) {\n          if (headerValue == 0) goto LAB_080013be;\n          if (headerValue == 1) {\n            permissionFlag = mask[3];\n          }\n        }\n        else if (headerValue == 3) {\n          permissionFlag = 0;\n        }\n        else if (headerValue == 0x11) {\n          permissionFlag = mask[3] + 4;\n        }\n      }\n      else {\n        if (headerValue != 0x10210000) {\n          if (headerValue < 0x10210001) {\n            if (headerValue != 0x10110000) {\n              headerValueCheck = 0x10120000;\nLAB_080013b8:\n              if (headerValue != headerValueCheck) goto LAB_080012a8;\n            }\n          }\n          else if ((headerValue != 0x10310000) && (headerValue != 0x10320000)) {\n            headerValueCheck = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        permissionFlag = mask[2];\n        if (permissionFlag == 0) {\n          permissionFlag = 4;\n        }\n        else {\n          if (permissionFlag == 1) {\n            permissions[4] = bitwiseCheck;\n          }\n          if (permissionFlag != 1) {\n            permissions[5] = bitwiseCheck;\n          }\n          permissionFlag = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitwiseAndResult < 0x100) {\n        bitwiseCheck = *permissions;\n        headerValue = iteration << 2;\n        permissionPtr = permissions;\n      }\n      else {\n        bitwiseCheck = permissions[1];\n        headerValue = (iteration + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitwiseAndResult) {\n        permissionPtr = permissions + 1;\n      }\n      *permissionPtr = bitwiseCheck & ~(0xf << (headerValue & 0xff)) | permissionFlag << (headerValue & 0xff);\n      permissionPtr = (uint *)mask[1];\n      if (((uint)permissionPtr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitShift = (iteration & 3) << 2;\n        if (permissions == (uint *)0x40010800) {\n          permissionIndex = 0;\n        }\n        else if (permissions == (uint *)0x40010c00) {\n          permissionIndex = 1;\n        }\n        else if (permissions == (uint *)0x40011000) {\n          permissionIndex = 2;\n        }\n        else if (permissions == (uint *)0x40011400) {\n          permissionIndex = 3;\n        }\n        else {\n          permissionIndex = 4;\n        }\n        *(uint *)((iteration & 0xfffffffc) + 0x40010008) =\n             permissionIndex << bitShift | *(uint *)((iteration & 0xfffffffc) + 0x40010008) & ~(0xf << bitShift);\n        if (((uint)permissionPtr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitwiseAndResult;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitwiseAndResult;\n        }\n        if (((uint)permissionPtr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitwiseAndResult;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitwiseAndResult;\n        }\n        if (((uint)permissionPtr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitwiseAndResult;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitwiseAndResult;\n        }\n        if (((uint)permissionPtr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitwiseAndResult;\n        }\n        else {\n          _DAT_4001040c = bitwiseAndResult | _DAT_4001040c;\n        }\n      }\n    }\n    iteration = iteration + 1;\n    if (iteration == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_permissions_08001264",
                "param_1": "permissions",
                "param_2": "mask",
                "uVar1": "permissionFlag",
                "uVar2": "bitwiseAndResult",
                "uVar3": "headerValue",
                "iVar4": "permissionIndex",
                "uVar5": "iteration",
                "uVar6": "bitwiseCheck",
                "uVar7": "headerValueCheck",
                "unaff_r10": "permissionPtr",
                "iVar8": "bitShift"
            },
            "calling": [
                "Peripherals_Init",
                "HAL_UART_MspInit",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "update_value_08001424",
            "code": "\nvoid updateValue_08001424(int address,int newValue,int flag)\n\n{\n  if (flag == 0) {\n    newValue = newValue << 0x10;\n  }\n  *(int *)(address + 0x10) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "update_value_08001424",
                "param_1": "address",
                "param_2": "newValue",
                "param_3": "flag"
            },
            "calling": [
                "Peripherals_Init",
                "toggleLED",
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "update_param_with_xor_0800142e",
            "code": "\nvoid update_param_with_xor_0800142e(int input_ptr,uint value)\n\n{\n  *(uint *)(input_ptr + 0xc) = value ^ *(uint *)(input_ptr + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "update_param_with_xor_0800142e",
                "param_1": "input_ptr",
                "param_2": "value"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_flag_status_08001436",
            "code": "\nundefined4 checkFlagStatus_08001436(int *flagPointer)\n\n{\n  int flagValue;\n  \n  flagValue = *flagPointer;\n  if ((*(uint *)(flagValue + 0x14) & 0x400) != 0) {\n    *(uint *)(flagValue + 0x14) = *(uint *)(flagValue + 0x14) & 0xfffffbff;\n    flagStatus = 4;\n    *(undefined *)((int)flagPointer + 0x35) = 0x20;\n    *(undefined *)(flagPointer + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "param_1": "flagPointer",
                "iVar1": "flagValue",
                "param_1[0xe]": "flagStatus"
            },
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_08001460",
            "code": "\nundefined4 checkData_08001460(uint **dataPointer,uint condition,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint value;\n  uint *data;\n  \n  startTime = HAL_GetTick();\n  do {\n    data = *dataPointer;\n    if ((condition << 8) >> 0x18 == 1) {\n      value = data[5];\n    }\n    else {\n      value = data[6];\n    }\n    if ((condition & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(data[5] << 0x15) < 0) {\n      *data = *data | 0x200;\n      data[5] = data[5] & 0xfffffbff;\n      dataPointer[0xe] = (uint *)0x4;\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout))));\n  *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_08001460",
                "param_1": "dataPointer",
                "param_2": "condition",
                "param_3": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "value",
                "puVar4": "data"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_i2_c_acknowledgment_080014e2",
            "code": "\nundefined4 checkI2CAcknowledgment_080014e2(int *deviceRegisters,uint timeout)\n\n{\n  int startTime;\n  int acknowledgmentFailed;\n  \n  startTime = getCurrentTick();\n  while( true ) {\n    if (*(int *)(*deviceRegisters + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    acknowledgmentFailed = isAcknowledgeFailed(deviceRegisters);\n    if (acknowledgmentFailed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (acknowledgmentFailed = getCurrentTick(), timeout < (uint)(acknowledgmentFailed - startTime))))) {\n      deviceRegisters[0xe] = deviceRegisters[0xe] | 0x20;\n      *(undefined *)((int)deviceRegisters + 0x35) = 0x20;\n      *(undefined *)(deviceRegisters + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_i2_c_acknowledgment_080014e2",
                "param_1": "deviceRegisters",
                "param_2": "timeout",
                "iVar1": "startTime",
                "iVar2": "acknowledgmentFailed",
                "HAL_GetTick": "getCurrentTick",
                "I2C_IsAcknowledgeFailed": "isAcknowledgeFailed"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "process_i2_c_data_08001530",
            "code": "\nundefined4 processI2CData_08001530(uint **inputData,uint data1,uint data2,int isConditionMet,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint *ptr;\n  uint **inputDataPtr;\n  uint data1Copy;\n  uint data2Copy;\n  \n  **inputData = **inputData | 0x100;\n  inputDataPtr = inputData;\n  data1Copy = data1;\n  data2Copy = data2;\n  startTime = HAL_GetTick();\n  do {\n    ptr = *inputData;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = data1 & 0xfe;\n        startTime = I2C_WaitOnMasterAddressFlagUntilTimeout\n                          (inputData,0x10002,timeout,ptr,inputDataPtr,data1Copy,data2Copy);\n        if (startTime == 0) {\n          startTime = I2C_WaitOnTXEFlagUntilTimeout(inputData,timeout,(*inputData)[5],(*inputData)[6]);\n          if (startTime == 0) {\n            ptr = *inputData;\n            if (isConditionMet == 1) {\nLAB_080015ca:\n              ptr[4] = data2 & 0xff;\n              return 0;\n            }\n            ptr[4] = data2 >> 8;\n            startTime = I2C_WaitOnTXEFlagUntilTimeout(inputData,timeout);\n            if (startTime == 0) {\n              ptr = *inputData;\n              goto LAB_080015ca;\n            }\n          }\n          if (inputData[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **inputData = **inputData | 0x200;\n        }\n        else if (inputData[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (timeout == 0xffffffff);\n    if ((timeout == 0) || (currentTime = HAL_GetTick(), timeout < (uint)(currentTime - startTime))) {\n      *(undefined *)((int)inputData + 0x35) = 0x20;\n      *(undefined *)(inputData + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "process_i2_c_data_08001530",
                "param_1": "inputData",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "isConditionMet",
                "param_5": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "ptr",
                "ppuVar4": "inputDataPtr",
                "uVar5": "data1Copy",
                "uVar6": "data2Copy"
            },
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "configure_i2_c_080015e8",
            "code": "\nundefined4 configureI2C_080015e8(uint **i2cConfig,uint deviceAddress,uint registerAddress,int isMultipleRegisters,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint *i2cConfigPtr;\n  uint **i2cConfigPtrPtr;\n  uint deviceAddrWithReadBit;\n  uint regAddr;\n  \n  i2cConfigPtr = *i2cConfig;\n  *i2cConfigPtr = *i2cConfigPtr | 0x400;\n  *i2cConfigPtr = *i2cConfigPtr | 0x100;\n  i2cConfigPtrPtr = i2cConfig;\n  deviceAddrWithReadBit = deviceAddress;\n  regAddr = registerAddress;\n  startTime = HAL_GetTick();\nLAB_0800160e:\n  i2cConfigPtr = *i2cConfig;\n  while (-1 < (int)(i2cConfigPtr[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  i2cConfigPtr[4] = deviceAddress & 0xfe;\n  startTime = I2C_WaitOnMasterAddressFlagUntilTimeout\n                    (i2cConfig,0x10002,timeout,i2cConfigPtr,i2cConfigPtrPtr,deviceAddrWithReadBit,regAddr);\n  if (startTime != 0) goto LAB_080016ba;\n  startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cConfig,timeout,(*i2cConfig)[5],(*i2cConfig)[6]);\n  if (startTime == 0) {\n    i2cConfigPtr = *i2cConfig;\n    if (isMultipleRegisters != 1) {\n      i2cConfigPtr[4] = registerAddress >> 8;\n      startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cConfig,timeout);\n      if (startTime != 0) goto LAB_08001642;\n      i2cConfigPtr = *i2cConfig;\n    }\n    i2cConfigPtr[4] = registerAddress & 0xff;\n    startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cConfig,timeout);\n    if (startTime == 0) {\n      **i2cConfig = **i2cConfig | 0x100;\n      startTime = HAL_GetTick();\n      do {\n        do {\n          if ((int)((*i2cConfig)[5] << 0x1f) < 0) {\n            (*i2cConfig)[4] = deviceAddress & 0xff | 1;\n            startTime = I2C_WaitOnMasterAddressFlagUntilTimeout(i2cConfig,0x10002,timeout);\n            if (startTime == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (i2cConfig[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)i2cConfig + 0x35) = 0x20;\n      *(undefined *)(i2cConfig + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (i2cConfig[0xe] == (uint *)0x4) {\n    **i2cConfig = **i2cConfig | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentTime = HAL_GetTick(), timeout < (uint)(currentTime - startTime))) goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "configure_i2_c_080015e8",
                "param_1": "i2cConfig",
                "param_2": "deviceAddress",
                "param_3": "registerAddress",
                "param_4": "isMultipleRegisters",
                "param_5": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "i2cConfigPtr",
                "ppuVar4": "i2cConfigPtrPtr",
                "uVar5": "deviceAddrWithReadBit",
                "uVar6": "regAddr"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "validate_timeout_080016f4",
            "code": "\nundefined4 validate_timeout_080016f4(int *input_values,uint timeout_duration)\n\n{\n  int start_time;\n  int current_value;\n  \n  start_time = HAL_GetTick();\n  while( true ) {\n    current_value = *input_values;\n    if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_value + 0x14) << 0x1b < 0) break;\n    if ((timeout_duration == 0) || (current_value = HAL_GetTick(), timeout_duration < (uint)(current_value - start_time))) {\n      input_values[0xe] = input_values[0xe] | 0x20;\n      *(undefined *)((int)input_values + 0x35) = 0x20;\n      *(undefined *)(input_values + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n  input_values[0xe] = 0;\n  *(undefined *)(input_values + 0xd) = 0;\n  *(undefined *)((int)input_values + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "validate_timeout_080016f4",
                "param_1": "input_values",
                "param_2": "timeout_duration",
                "iVar1": "start_time",
                "iVar2": "current_value"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_i2_c_device_08001754",
            "code": "\nundefined4 initializeI2CDevice_08001754(uint **deviceParams)\n\n{\n  uint pclk1FreqLow;\n  uint pclk1FreqHigh;\n  uint *deviceReg1;\n  uint *deviceReg2;\n  uint *deviceReg3;\n  uint pclk1FreqDiv;\n  undefined8 pclk1Freq;\n  \n  if (deviceParams != (uint **)0x0) {\n    if (*(char *)((int)deviceParams + 0x35) == '\\0') {\n      *(undefined *)(deviceParams + 0xd) = 0;\n      HAL_I2C_MspInit();\n    }\n    *(undefined *)((int)deviceParams + 0x35) = 0x24;\n    **deviceParams = **deviceParams & 0xfffffffe;\n    pclk1Freq = HAL_RCC_GetPCLK1Freq();\n    pclk1FreqHigh = (uint)((ulonglong)pclk1Freq >> 0x20);\n    pclk1FreqLow = (uint)pclk1Freq;\n    deviceReg2 = deviceParams[1];\n    pclk1FreqDiv = pclk1FreqLow / 1000000;\n    if ((uint *)0x186a0 < deviceReg2) {\n      pclk1FreqHigh = 300;\n    }\n    deviceReg1 = *deviceParams;\n    if ((uint *)0x186a0 < deviceReg2) {\n      pclk1FreqHigh = pclk1FreqDiv * pclk1FreqHigh;\n    }\n    deviceReg1[1] = pclk1FreqDiv;\n    if ((uint *)0x186a0 < deviceReg2) {\n      pclk1FreqDiv = pclk1FreqHigh / 1000;\n    }\n    deviceReg1[8] = pclk1FreqDiv + 1;\n    if (deviceReg2 < (uint *)0x186a1) {\n      pclk1FreqLow = pclk1FreqLow / (uint)((int)deviceReg2 << 1);\n      if ((pclk1FreqLow & 0xfff) < 4) {\n        pclk1FreqLow = 4;\n      }\n    }\n    else {\n      if (deviceParams[2] == (uint *)0x0) {\n        pclk1FreqLow = pclk1FreqLow / (uint)((int)deviceReg2 * 3) | 0x8000;\n      }\n      else {\n        pclk1FreqLow = pclk1FreqLow / (uint)((int)deviceReg2 * 0x19) | 0xc000;\n      }\n      if ((pclk1FreqLow & 0xfff) == 0) {\n        pclk1FreqLow = 1;\n      }\n    }\n    deviceReg2 = deviceParams[8];\n    deviceReg3 = deviceParams[7];\n    deviceReg1[7] = pclk1FreqLow;\n    *deviceReg1 = (uint)deviceReg3 | (uint)deviceReg2;\n    deviceReg1[2] = (uint)deviceParams[4] | (uint)deviceParams[3];\n    deviceReg1[3] = (uint)deviceParams[5] | (uint)deviceParams[6];\n    *deviceReg1 = *deviceReg1 | 1;\n    deviceParams[0xe] = (uint *)0x0;\n    *(undefined *)((int)deviceParams + 0x35) = 0x20;\n    *(undefined *)((int)deviceParams + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_i2_c_device_08001754",
                "param_1": "deviceParams",
                "uVar1": "pclk1FreqLow",
                "uVar2": "pclk1FreqHigh",
                "puVar3": "deviceReg1",
                "puVar4": "deviceReg2",
                "puVar5": "deviceReg3",
                "uVar6": "pclk1FreqDiv",
                "uVar7": "pclk1Freq"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "perform_i2_c_communication_08001828",
            "code": "\nundefined4\nperformI2CCommunication_08001828(uint **communicationData,undefined4 param1,undefined4 param2,undefined4 param3,byte *dataBuffer,\n            short dataSize,undefined4 param4)\n\n{\n  int startTime;\n  int currentTime;\n  uint *currentCommunicationData;\n  uint currentValue;\n  \n  if (*(char *)((int)communicationData + 0x35) == ' ') {\n    if (dataBuffer == (byte *)0x0) {\n      return 1;\n    }\n    if (dataSize == 0) {\n      return 1;\n    }\n    startTime = HAL_GetTick();\n    do {\n      currentCommunicationData = *communicationData;\n      if ((~currentCommunicationData[6] & 2) != 0) {\n        if (*(char *)(communicationData + 0xd) == '\\x01') {\n          return 2;\n        }\n        currentValue = *currentCommunicationData;\n        *(undefined *)(communicationData + 0xd) = 1;\n        *currentCommunicationData = currentValue & 0xfffff7ff;\n        *(undefined *)((int)communicationData + 0x35) = 0x21;\n        *(undefined *)((int)communicationData + 0x36) = 0x40;\n        communicationData[0xe] = (uint *)0x0;\n        startTime = I2C_RequestMemoryWrite(communicationData,param1,param2,param3,param4);\n        if (startTime != 0) {\n          *(undefined *)(communicationData + 0xd) = 0;\n          if (communicationData[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 0x2711);\n    *(undefined *)(communicationData + 0xd) = 0;\n    *(undefined *)((int)communicationData + 0x35) = 0x20;\n  }\n  return 2;\n  while (dataSize != 0) {\nLAB_080018e2:\n    startTime = I2C_WaitOnTXEFlagUntilTimeout(communicationData,param4);\n    if (startTime != 0) goto LAB_080018ee;\n    currentCommunicationData = *communicationData;\n    currentCommunicationData[4] = (uint)*dataBuffer;\n    if ((int)(currentCommunicationData[5] << 0x1d) < 0) {\n      if ((short)(dataSize + -1) == 0) break;\n      dataSize = dataSize + -2;\n      currentCommunicationData[4] = (uint)dataBuffer[1];\n      dataBuffer = dataBuffer + 2;\n    }\n    else {\n      dataBuffer = dataBuffer + 1;\n      dataSize = dataSize + -1;\n    }\n  }\n  startTime = I2C_WaitOnTXEFlagUntilTimeout(communicationData,param4);\n  if (startTime == 0) {\n    **communicationData = **communicationData | 0x200;\n    *(undefined *)(communicationData + 0xd) = 0;\n    *(undefined *)((int)communicationData + 0x35) = 0x20;\n    *(undefined *)((int)communicationData + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (communicationData[0xe] == (uint *)0x4) {\n    **communicationData = **communicationData | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "perform_i2_c_communication_08001828",
                "param_1": "communicationData",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "dataBuffer",
                "param_6": "dataSize",
                "param_7": "param4",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "currentCommunicationData",
                "uVar4": "currentValue"
            },
            "calling": [
                "I2C_WriteByte"
            ],
            "called": [
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "perform_i2_c_communication_08001938",
            "code": "\nundefined4\nperformI2CCommunication_08001938(uint **communicationData,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *resultData,ushort dataLength,uint timeout)\n\n{\n  undefined *tempPtr1;\n  int startTime;\n  int currentTime;\n  uint *dataPtr;\n  uint tempVar;\n  undefined *tempPtr2;\n  bool isNegative;\n  \n  if (*(char *)((int)communicationData + 0x35) != ' ') {\n    return 2;\n  }\n  if (resultData == (undefined *)0x0) {\n    return 1;\n  }\n  if (dataLength == 0) {\n    return 1;\n  }\n  startTime = HAL_GetTick();\n  while (dataPtr = *communicationData, (~dataPtr[6] & 2) == 0) {\n    currentTime = HAL_GetTick();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(communicationData + 0xd) = 0;\n      *(undefined *)((int)communicationData + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(communicationData + 0xd) == '\\x01') {\n    return 2;\n  }\n  tempVar = *dataPtr;\n  *(undefined *)(communicationData + 0xd) = 1;\n  *dataPtr = tempVar & 0xfffff7ff;\n  *(undefined *)((int)communicationData + 0x35) = 0x22;\n  *(undefined *)((int)communicationData + 0x36) = 0x40;\n  communicationData[0xe] = (uint *)0x0;\n  startTime = requestMemoryRead(communicationData,param2,param3,param4,timeout);\n  if (startTime != 0) {\n    *(undefined *)(communicationData + 0xd) = 0;\n    if (communicationData[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  dataPtr = *communicationData;\n  tempVar = *dataPtr;\n  if (dataLength == 1) {\n    *dataPtr = tempVar & 0xfffffbff;\n    disableInterrupts();\n    **communicationData = **communicationData | 0x200;\n    enableInterrupts();\n    startTime = waitForRXNEFlagUntilTimeout(communicationData,timeout);\n    if (startTime == 0) {\n      *resultData = (char)(*communicationData)[4];\nLAB_08001ab8:\n      *(undefined *)((int)communicationData + 0x35) = 0x20;\n      *(undefined *)((int)communicationData + 0x36) = 0;\n      *(undefined *)(communicationData + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (communicationData[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (dataLength == 2) {\n    *dataPtr = tempVar | 0x800;\n    disableInterrupts();\n    **communicationData = **communicationData & 0xfffffbff;\n    enableInterrupts();\n  }\n  else {\n    *dataPtr = tempVar | 0x400;\n    while (3 < dataLength) {\n      startTime = waitForRXNEFlagUntilTimeout(communicationData,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *resultData = (char)(*communicationData)[4];\n      dataPtr = *communicationData;\n      isNegative = (int)(dataPtr[5] << 0x1d) < 0;\n      if (isNegative) {\n        dataPtr = (uint *)dataPtr[4];\n        tempPtr2 = resultData + 2;\n        dataLength = dataLength - 2;\n      }\n      else {\n        tempPtr2 = resultData + 1;\n        dataLength = dataLength - 1;\n      }\n      tempPtr1 = resultData + 1;\n      resultData = tempPtr2;\n      if (isNegative) {\n        *tempPtr1 = (char)dataPtr;\n      }\n    }\n    if (dataLength != 2) {\n      startTime = HAL_GetTick();\n      do {\n        dataPtr = *communicationData;\n        do {\n          if ((int)(dataPtr[5] << 0x1d) < 0) {\n            *dataPtr = *dataPtr & 0xfffffbff;\n            disableInterrupts();\n            *resultData = (char)(*communicationData)[4];\n            startTime = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = HAL_GetTick();\n  do {\n    do {\n      if ((int)((*communicationData)[5] << 0x1d) < 0) {\n        disableInterrupts();\n        dataPtr = *communicationData;\n        *dataPtr = *dataPtr | 0x200;\n        *resultData = (char)dataPtr[4];\n        enableInterrupts();\n        resultData[1] = (char)(*communicationData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)communicationData + 0x35) = 0x20;\n  *(undefined *)(communicationData + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    dataPtr = *communicationData;\n    do {\n      if ((int)(dataPtr[5] << 0x1d) < 0) {\n        *dataPtr = *dataPtr | 0x200;\n        resultData[1] = (char)dataPtr[4];\n        enableInterrupts();\n        resultData[2] = (char)(*communicationData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "perform_i2_c_communication_08001938",
                "param_1": "communicationData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "resultData",
                "param_6": "dataLength",
                "param_7": "timeout",
                "puVar1": "tempPtr1",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "dataPtr",
                "uVar5": "tempVar",
                "puVar6": "tempPtr2",
                "bVar7": "isNegative",
                "disableIRQinterrupts": "disableInterrupts",
                "enableIRQinterrupts": "enableInterrupts",
                "I2C_RequestMemoryRead": "requestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout": "waitForRXNEFlagUntilTimeout"
            },
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "HAL_GetTick",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_status_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 checkStatus_08001b58(int *statusArray)\n\n{\n  int value1;\n  int value2;\n  \n  if (*statusArray << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (statusArray[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value1 = statusArray[1];\n      if (value1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value1 = getTickCount();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            value2 = getTickCount();\n            if (100 < (uint)(value2 - value1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value1 = getTickCount();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        value2 = getTickCount();\n        if (100 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*statusArray << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (statusArray[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      variable1 = statusArray[4];\n      if (variable1 == 0) {\n        value1 = getTickCount();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          value2 = getTickCount();\n          if (2 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      variable1 = 1;\n      value1 = getTickCount();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        value2 = getTickCount();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = statusArray[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*statusArray << 0x1c < 0) {\n    variable2 = statusArray[6];\n    if (variable2 == 0) {\n      value1 = getTickCount();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        value2 = getTickCount();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      variable2 = 1;\n      value1 = getTickCount();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        value2 = getTickCount();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  if (-1 < *statusArray << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value1 = getTickCount();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    value2 = getTickCount();\n    if (100 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\n  value1 = statusValue;\n  if (value1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value1 = getTickCount();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        value2 = getTickCount();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value1 = getTickCount();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    value2 = getTickCount();\n    if (5000 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (statusFlag == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (statusFlag != 2) {\n      variable3 = 0;\n      value1 = getTickCount();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        value2 = getTickCount();\n      } while ((uint)(value2 - value1) < 3);\n      return 3;\n    }\n    variable3 = 0;\n    value1 = getTickCount();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (value3 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | value4;\n        }\n        _DAT_40021004 = value3 | value5 | _DAT_40021004 & 0xffc2ffff;\n        variable3 = 1;\n        value1 = getTickCount();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          value2 = getTickCount();\n        } while ((uint)(value2 - value1) < 3);\n        return 3;\n      }\n      value2 = getTickCount();\n    } while ((uint)(value2 - value1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_status_08001b58",
                "param_1": "statusArray",
                "iVar1": "value1",
                "iVar2": "value2",
                "HAL_GetTick": "getTickCount",
                "iRam42420000": "variable1",
                "iRam42420480": "variable2",
                "param_1[3]": "statusValue",
                "param_1[7]": "statusFlag",
                "uRam42420060": "variable3",
                "param_1[8]": "value3",
                "param_1[2]": "value4",
                "param_1[9]": "value5"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_clock_frequency_08002008",
            "code": "\n\n\nint calculateClockFrequency_08002008(void)\n\n{\n  undefined4 value1;\n  int clockFrequency;\n  undefined4 value2;\n  undefined4 *dataPointer;\n  uint divider;\n  undefined4 *copyPointer;\n  byte byteArray [4];\n  undefined4 valueArray [5];\n  \n  dataPointer = &DAT_080072f0;\n  copyPointer = valueArray;\n  do {\n    value1 = *dataPointer;\n    value2 = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *copyPointer = value1;\n    copyPointer[1] = value2;\n    copyPointer = copyPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  byteArray[0] = 1;\n  byteArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      divider = 8000000 / byteArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      divider = 4000000;\n    }\n    clockFrequency = divider * *(byte *)((int)valueArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockFrequency = 8000000;\n  }\n  return clockFrequency;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_clock_frequency_08002008",
                "uVar1": "value1",
                "iVar2": "clockFrequency",
                "uVar3": "value2",
                "puVar4": "dataPointer",
                "uVar5": "divider",
                "puVar6": "copyPointer",
                "local_24": "byteArray",
                "local_20": "valueArray"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_system_0800209c",
            "code": "\n\n\nundefined4 initializeSystem_0800209c(uint *config,uint sysClockFreq)\n\n{\n  char flag1;\n  char flag2;\n  int tickCount;\n  uint configData1;\n  int currentTick;\n  uint configData2;\n  \n  if ((sysClockFreq <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | sysClockFreq, sysClockFreq == (sysClockFreq & 7))) {\n    if ((int)(*config << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config[2];\n    }\n    tickCount = *config << 0x1f;\n    if (-1 < tickCount) {\nLAB_080020ba:\n      if ((sysClockFreq < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | sysClockFreq, sysClockFreq != (sysClockFreq & 7))) {\n        return 1;\n      }\n      if ((*config & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config[3];\n      }\n      if ((int)(*config << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config[4] << 3;\n      }\n      configData1 = HAL_RCC_GetSysClockFreq();\n      DAT_200001bc = configData1 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      HAL_InitTick(0);\n      return 0;\n    }\n    configData1 = config[1];\n    if (configData1 == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      configData2 = _DAT_40021000;\n      if (configData1 == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    configData2 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag1 << 6) << 0x18 | (uint)(byte)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)configData2 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | configData1;\n      tickCount = HAL_GetTick(tickCount,configData2);\n      if (config[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - tickCount) < 0x1389);\n      }\n      else if (config[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - tickCount) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - tickCount) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "initialize_system_0800209c",
                "param_1": "config",
                "param_2": "sysClockFreq",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "iVar3": "tickCount",
                "uVar4": "configData1",
                "iVar5": "currentTick",
                "uVar6": "configData2"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_from_memory_08002214",
            "code": "\nundefined4 get_data_from_memory_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_from_memory_08002214"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint getShiftedValue_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "HAL_I2C_Init",
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "calculate_shifted_value_08002250",
            "code": "\n\n\nuint calculate_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "calculate_shifted_value_08002250"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_data_08002280",
            "code": "\nvoid updateData_08002280(int dataAddress,uint *dataValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(dataAddress + 4);\n  updatedValue3 = *dataValues;\n  updatedValue1 = *(uint *)(dataAddress + 0x20) & 0xfffffffd | dataValues[2];\n  if (dataAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | dataValues[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | dataValues[5] | dataValues[6];\n  }\n  *(uint *)(dataAddress + 4) = updatedValue2;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(dataAddress + 0x34) = dataValues[1];\n  *(uint *)(dataAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_data_08002280",
                "param_1": "dataAddress",
                "param_2": "dataValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_params_080022d0",
            "code": "\nvoid updateParams_080022d0(int baseAddress,uint *paramsArray)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  uint updatedVar3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  updatedVar2 = *(uint *)(baseAddress + 4);\n  updatedVar3 = *paramsArray;\n  updatedVar1 = *(uint *)(baseAddress + 0x20) & 0xfffffdff | paramsArray[2] << 8;\n  if (baseAddress == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xfffff7ff | paramsArray[3] << 8) & 0xfffffbff;\n    updatedVar2 = updatedVar2 & 0xffffcfff | (paramsArray[5] | paramsArray[6]) << 4;\n  }\n  *(uint *)(baseAddress + 4) = updatedVar2;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | updatedVar3;\n  *(uint *)(baseAddress + 0x3c) = paramsArray[1];\n  *(uint *)(baseAddress + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_params_080022d0",
                "param_1": "baseAddress",
                "param_2": "paramsArray",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_register_values_08002324",
            "code": "\nvoid updateRegisterValues_08002324(int registerAddress,int *registerValues)\n\n{\n  uint registerValue;\n  int value1;\n  int value2;\n  int constantValue;\n  \n  *(uint *)(registerAddress + 0x20) = *(uint *)(registerAddress + 0x20) & 0xffffefff;\n  registerValue = *(uint *)(registerAddress + 4);\n  value1 = *registerValues;\n  value2 = registerValues[2];\n  constantValue = 0x40012c00;\n  if (registerAddress == 0x40012c00) {\n    constantValue = registerValues[5];\n    registerValue = registerValue & 0xffffbfff;\n  }\n  if (registerAddress == 0x40012c00) {\n    registerValue = registerValue | constantValue << 6;\n  }\n  *(uint *)(registerAddress + 4) = registerValue;\n  *(uint *)(registerAddress + 0x1c) = *(uint *)(registerAddress + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(registerAddress + 0x40) = registerValues[1];\n  *(uint *)(registerAddress + 0x20) = *(uint *)(registerAddress + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_register_values_08002324",
                "param_1": "registerAddress",
                "param_2": "registerValues",
                "uVar1": "registerValue",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constantValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_block_08002368",
            "code": "\nvoid updateMemoryBlock_08002368(uint *memoryBlock,uint *sourceBlock)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryBlock;\n  if (((((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n       (memoryBlock == (uint *)0x40000400)) || (memoryBlock == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | sourceBlock[1], memoryBlock == (uint *)0x40012c00 ||\n       (memoryBlock == (uint *)0x40000000)) ||\n      ((memoryBlock == (uint *)0x40000400 || (memoryBlock == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | sourceBlock[3];\n  }\n  *memoryBlock = updatedValue;\n  memoryBlock[0xb] = sourceBlock[2];\n  memoryBlock[10] = *sourceBlock;\n  updatedValue = 0x40012c00;\n  if (memoryBlock == (uint *)0x40012c00) {\n    updatedValue = sourceBlock[4];\n  }\n  if (memoryBlock == (uint *)0x40012c00) {\n    memoryBlock[0xc] = updatedValue;\n  }\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_block_08002368",
                "param_1": "memoryBlock",
                "param_2": "sourceBlock",
                "uVar1": "updatedValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_pwm_080023d0",
            "code": "\nundefined4 initializePWM_080023d0(undefined4 *configArray)\n\n{\n  if (configArray != (undefined4 *)0x0) {\n    if (*(char *)((int)configArray + 0x39) == '\\0') {\n      *(undefined *)(configArray + 0xe) = 0;\n      HAL_TIM_PWM_MspInit();\n    }\n    *(undefined *)((int)configArray + 0x39) = 2;\n    TIM_Base_SetConfig(*configArray,configArray + 1);\n    *(undefined *)((int)configArray + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_pwm_080023d0",
                "param_1": "configArray"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_parameters_08002404",
            "code": "\nvoid updateParameters_08002404(int address,int *parameters)\n\n{\n  uint modifiedValue1;\n  uint modifiedValue2;\n  int inputValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffffef;\n  modifiedValue2 = *(uint *)(address + 4);\n  inputValue = *parameters;\n  modifiedValue1 = *(uint *)(address + 0x20) & 0xffffffdf | param2Value2 << 4;\n  if (address == 0x40012c00) {\n    modifiedValue1 = (modifiedValue1 & 0xffffff7f | parameters[3] << 4) & 0xffffffbf;\n    modifiedValue2 = modifiedValue2 & 0xfffff3ff | (parameters[5] | parameters[6]) << 2;\n  }\n  *(uint *)(address + 4) = modifiedValue2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(address + 0x38) = param2Value1;\n  *(uint *)(address + 0x20) = modifiedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_parameters_08002404",
                "param_1": "address",
                "param_2": "parameters",
                "uVar1": "modifiedValue1",
                "uVar2": "modifiedValue2",
                "iVar3": "inputValue",
                "param_2[2]": "param2Value2",
                "param_2[1]": "param2Value1"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "set_pwm_configuration_0800245c",
            "code": "\nvoid set_PWM_Configuration_0800245c(int *pwm_config,undefined4 param_2,undefined4 channel)\n\n{\n  int channel;\n  int channel;\n  int channel;\n  int channel;\n  int channel_value;\n  uint updated_value;\n  int pwm_address;\n  \n  if (*(char *)(pwm_config + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)pwm_config + 0x39) = 2;\n  *(undefined *)(pwm_config + 0xe) = 1;\n  switch(channel) {\n  case 0:\n    TIM_OC1_SetConfig(*pwm_config);\n    pwm_address = *pwm_config;\n    updated_value = *(uint *)(channel + 0x10);\n    *(uint *)(pwm_address + 0x18) = *(uint *)(pwm_address + 0x18) | 8;\n    *(uint *)(pwm_address + 0x18) = *(uint *)(pwm_address + 0x18) & 0xfffffffb;\n    updated_value = *(uint *)(pwm_address + 0x18) | updated_value;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    TIM_OC2_SetConfig(*pwm_config);\n    pwm_address = *pwm_config;\n    channel_value = *(int *)(channel + 0x10);\n    *(uint *)(pwm_address + 0x18) = *(uint *)(pwm_address + 0x18) | 0x800;\n    *(uint *)(pwm_address + 0x18) = *(uint *)(pwm_address + 0x18) & 0xfffffbff;\n    updated_value = *(uint *)(pwm_address + 0x18) | channel_value << 8;\n    break;\n  case 8:\n    TIM_OC3_SetConfig(*pwm_config);\n    pwm_address = *pwm_config;\n    updated_value = *(uint *)(channel + 0x10);\n    *(uint *)(pwm_address + 0x1c) = *(uint *)(pwm_address + 0x1c) | 8;\n    *(uint *)(pwm_address + 0x1c) = *(uint *)(pwm_address + 0x1c) & 0xfffffffb;\n    updated_value = *(uint *)(pwm_address + 0x1c) | updated_value;\n    goto LAB_080024fa;\n  case 0xc:\n    TIM_OC4_SetConfig(*pwm_config);\n    pwm_address = *pwm_config;\n    channel_value = *(int *)(channel + 0x10);\n    *(uint *)(pwm_address + 0x1c) = *(uint *)(pwm_address + 0x1c) | 0x800;\n    *(uint *)(pwm_address + 0x1c) = *(uint *)(pwm_address + 0x1c) & 0xfffffbff;\n    updated_value = *(uint *)(pwm_address + 0x1c) | channel_value << 8;\nLAB_080024fa:\n    *(uint *)(pwm_address + 0x1c) = updated_value;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(pwm_address + 0x18) = updated_value;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)pwm_config + 0x39) = 1;\n  *(undefined *)(pwm_config + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "set_pwm_configuration_0800245c",
                "param_1": "pwm_config",
                "param_3": "channel",
                "extraout_r1": "channel",
                "extraout_r1_00": "channel",
                "extraout_r1_01": "channel",
                "extraout_r1_02": "channel",
                "iVar1": "channel_value",
                "uVar2": "updated_value",
                "iVar3": "pwm_address"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_OC2_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "clear_bit_and_shift_08002520",
            "code": "\nvoid clearBitAndShift_08002520(int input,uint bitPosition,int value)\n\n{\n  *(uint *)(input + 0x20) = *(uint *)(input + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(input + 0x20) = value << (bitPosition & 0xff) | *(uint *)(input + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "clear_bit_and_shift_08002520",
                "param_1": "input",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "configure_tim_c_cx_channel_08002538",
            "code": "\nundefined4 configureTIM_CCxChannel_08002538(uint **channel,undefined4 parameter)\n\n{\n  uint defaultConfig;\n  uint *channelPtr;\n  \n  TIM_CCxChannelCmd(*channel,parameter,1);\n  channelPtr = *channel;\n  defaultConfig = 0x40012c00;\n  if (channelPtr == (uint *)0x40012c00) {\n    defaultConfig = uRam40012c44 | 0x8000;\n  }\n  if (channelPtr == (uint *)0x40012c00) {\n    channelPtr[0x11] = defaultConfig;\n  }\n  *channelPtr = *channelPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "configure_tim_c_cx_channel_08002538",
                "param_1": "channel",
                "param_2": "parameter",
                "uVar1": "defaultConfig",
                "puVar2": "channelPtr"
            },
            "calling": [
                "PWM_Init"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_status_08002564",
            "code": "\nundefined4 checkAndUpdateStatus_08002564(int *statusPointer,uint *dataPointer)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(statusPointer + 0xe) != '\\x01') {\n    *(undefined *)((int)statusPointer + 0x39) = 2;\n    *(uint *)(*statusPointer + 0x44) =\n         *dataPointer | dataPointer[1] | dataPointer[2] | dataPointer[3] | dataPointer[4] | dataPointer[5] | dataPointer[6];\n    *(undefined *)((int)statusPointer + 0x39) = 1;\n    result = 0;\n    *(undefined *)(statusPointer + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_status_08002564",
                "param_1": "statusPointer",
                "param_2": "dataPointer",
                "uVar1": "result"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_flags_and_values_080025a4",
            "code": "\nundefined4 updateFlagsAndValues_080025a4(int *data,uint *values)\n\n{\n  uint value1;\n  undefined4 result;\n  int ptr;\n  uint value2;\n  \n  result = 2;\n  if (*(char *)(data + 0xe) != '\\x01') {\n    *(undefined *)((int)data + 0x39) = 2;\n    ptr = *data;\n    value2 = *values;\n    value1 = values[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | value2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | value1;\n    *(undefined *)((int)data + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_flags_and_values_080025a4",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "result",
                "iVar3": "ptr",
                "uVar4": "value2"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "calculate_clock_configuration_080025e8",
            "code": "\nvoid calculateClockConfiguration_080025e8(int *clockParams)\n\n{\n  int pclkFreq;\n  int adjustedValue;\n  uint tempValue;\n  int dividedValue;\n  int param1Value;\n  int baseAddress;\n  \n  baseAddress = *clockParams;\n  tempValue = clockParams[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | clockParams[3];\n  *(uint *)(baseAddress + 0xc) = clockParams[2] | tempValue | clockParams[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | clockParams[6];\n  if (baseAddress == 0x40013800) {\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    dividedValue = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(clockParams[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    param1Value = clockParams[1];\n    adjustedValue = HAL_RCC_GetPCLK2Freq();\n    adjustedValue = (uint)(pclkFreq * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(adjustedValue * 0x19) / (ulonglong)(uint)(clockParams[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    tempValue = (uint)(pclkFreq * 0x19) / (uint)(clockParams[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    dividedValue = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(clockParams[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    param1Value = clockParams[1];\n    adjustedValue = HAL_RCC_GetPCLK1Freq();\n    adjustedValue = (uint)(pclkFreq * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(adjustedValue * 0x19) / (ulonglong)(uint)(clockParams[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    tempValue = (uint)(pclkFreq * 0x19) / (uint)(clockParams[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((tempValue + (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(clockParams[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (adjustedValue * 0x10 + 0x32U) / 100 & 0xf0) +\n       dividedValue * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "calculate_clock_configuration_080025e8",
                "param_1": "clockParams",
                "iVar1": "pclkFreq",
                "iVar2": "adjustedValue",
                "uVar3": "tempValue",
                "iVar4": "dividedValue",
                "iVar5": "param1Value",
                "iVar6": "baseAddress"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "FUNC_08002724",
            "code": "\nundefined4 FUNC_08002724(int *param_1)\n\n{\n  int iVar1;\n  \n  if (param_1 != (int *)0x0) {\n    if (*(char *)((int)param_1 + 0x39) == '\\0') {\n      *(undefined *)(param_1 + 0xe) = 0;\n      HAL_UART_MspInit();\n    }\n    *(undefined *)((int)param_1 + 0x39) = 2;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) & 0xffffdfff;\n    UART_SetConfig(param_1);\n    iVar1 = *param_1;\n    *(uint *)(iVar1 + 0x10) = *(uint *)(iVar1 + 0x10) & 0xffffb7ff;\n    *(uint *)(iVar1 + 0x14) = *(uint *)(iVar1 + 0x14) & 0xffffffd5;\n    *(uint *)(iVar1 + 0xc) = *(uint *)(iVar1 + 0xc) | 0x2000;\n    param_1[0xf] = 0;\n    *(undefined *)((int)param_1 + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "FUNC_08002724"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *data)\n\n{\n  byte tempByte;\n  int ptrData;\n  uint tempUInt;\n  undefined4 tempUndefined4;\n  short tempShort;\n  ushort *ptrUShort1;\n  ushort *ptrUShort2;\n  bool condition;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptrData = *data;\n  ptrUShort1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ptrUShort2 = ptrUShort1 + 1;\n      *ptrUShort1 = (ushort)((uint)(*(int *)(ptrData + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptrUShort2 = (ushort *)((int)ptrUShort1 + 1);\n      *ptrUShort1 = (ushort)*(int *)(ptrData + 4) & 0xff;\n    }\n    data[10] = (int)ptrUShort2;\n  }\n  else {\n    if (data[4] == 0) {\n      tempByte = (byte)*(undefined4 *)(ptrData + 4);\n      data[10] = (int)ptrUShort1 + 1;\n    }\n    else {\n      tempUndefined4 = *(undefined4 *)(ptrData + 4);\n      data[10] = (int)ptrUShort1 + 1;\n      tempByte = (byte)tempUndefined4 & 0x7f;\n    }\n    *(byte *)ptrUShort1 = tempByte;\n  }\n  tempShort = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = tempShort;\n  if (tempShort == 0) {\n    ptrData = *data;\n    *(uint *)(ptrData + 0xc) = *(uint *)(ptrData + 0xc) & 0xffffffdf;\n    condition = *(char *)((int)data + 0x39) != '2';\n    if (condition) {\n      tempUInt = *(uint *)(ptrData + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptrData = 0x12;\n      tempUInt = 0x32;\n    }\n    if (condition) {\n      *(uint *)(ptrData + 0xc) = tempUInt;\n      tempUInt = *(uint *)(ptrData + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(ptrData + 0x14) = tempUInt;\n      ptrData = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)ptrData;\n    HAL_UART_RxCpltCallback();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "tempByte",
                "iVar2": "ptrData",
                "uVar3": "tempUInt",
                "uVar4": "tempUndefined4",
                "sVar5": "tempShort",
                "puVar6": "ptrUShort1",
                "puVar7": "ptrUShort2",
                "bVar8": "condition"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **data)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *ptr1;\n  undefined flag;\n  uint *ptr2;\n  uint flag2;\n  bool isNegative;\n  \n  ptr2 = *data;\n  value2 = *ptr2;\n  value1 = ptr2[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      receiveData();\n      return;\n    }\n  }\n  else {\n    flag2 = ptr2[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      ptr2 = (uint *)(value2 << 0x1f);\n      if ((int)ptr2 < 0) {\n        isNegative = (int)(value1 << 0x17) < 0;\n        if (isNegative) {\n          ptr2 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (isNegative) {\n          data[0xf] = ptr2;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        receiveData(data);\n      }\n      ptr2 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((ptr2[5] & 0x40) == 0)) {\n        handleError(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      ptr2[3] = ptr2[3] & 0xfffffedf;\n      ptr2[5] = ptr2[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      handleError(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      ptr1 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        ptr2[1] = *(ushort *)ptr1 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          ptr1 = (uint *)((int)ptr1 + 2);\n        }\n        else {\n          ptr1 = (uint *)((int)ptr1 + 1);\n        }\n        data[8] = ptr1;\n      }\n      else {\n        data[8] = (uint *)((int)ptr1 + 1);\n        ptr2[1] = (uint)*(byte *)ptr1;\n      }\n      count = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = count;\n      if (count == 0) {\n        ptr2[3] = ptr2[3] & 0xffffff7f;\n        ptr2[3] = ptr2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptr2[3] = ptr2[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    handleTxComplete(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "ptr1",
                "uVar5": "flag",
                "puVar6": "ptr2",
                "uVar7": "flag2",
                "bVar8": "isNegative",
                "UART_Receive_IT": "receiveData",
                "HAL_UART_ErrorCallback": "handleError",
                "HAL_UART_TxCpltCallback": "handleTxComplete"
            },
            "calling": [],
            "called": [
                "UART_Receive_IT",
                "HAL_UART_TxCpltCallback",
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  readByteFromI2C(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  writeByteToI2C(0xd0,0x6b,0x80,1);\n  writeByteToI2C(0xd0,0x6b,1);\n  writeByteToI2C(0xd0,0x6c,0,1);\n  writeByteToI2C(0xd0,0x19,0,1);\n  writeByteToI2C(0xd0,0x1d,3,1);\n  writeByteToI2C(0xd0,0x1a,3,1);\n  writeByteToI2C(0xd0,0x1b,0x10,1);\n  writeByteToI2C(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "I2C_ReadByte": "readByteFromI2C",
                "I2C_WriteByte": "writeByteToI2C"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_sensor_data_08002b48",
            "code": "\nvoid initializeSensorData_08002b48(void)\n\n{\n  undefined4 floatValue;\n  uint sensorParameter;\n  int intValue2;\n  int intValue1;\n  undefined4 sensorReading1;\n  undefined4 sensorReading2;\n  \n  sensorReading1 = 0;\n  sensorReading2 = sensorParameter & 0xffff0000;\n  I2C_ReadByteArray(0xd0,0x3b,&sensorReading1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(sensorReading1._2_1_,sensorReading1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)sensorReading1,sensorReading1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)sensorReading2,sensorReading2._1_1_);\n  intValue1 = (int)DAT_200002f6;\n  intValue2 = (int)DAT_200002f8;\n  floatValue = __floatsisf();\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d0 = __aeabi_fmul(floatValue,0x38000000);\n  floatValue = __floatsisf(intValue1);\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d4 = __aeabi_fmul(floatValue,0x38000000);\n  floatValue = __floatsisf(intValue2);\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d8 = __aeabi_fmul(floatValue,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_sensor_data_08002b48",
                "in_r3": "sensorParameter",
                "local_18": "sensorReading1",
                "local_14": "sensorReading2",
                "iVar3": "intValue1",
                "iVar2": "intValue2",
                "uVar1": "floatValue"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "read_and_process_sensor_data_08002bf0",
            "code": "\nvoid readAndProcessSensorData_08002bf0(void)\n\n{\n  undefined4 floatConversionResult;\n  int convertedSensorData2;\n  int convertedSensorData1;\n  undefined4 sensorDataBytes;\n  undefined2 sensorDataBytes2;\n  \n  sensorDataBytes = 0;\n  sensorDataBytes2 = 0;\n  readByteArrayFromI2C(0xd0,0x43,&sensorDataBytes,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sensorDataBytes._2_1_,sensorDataBytes._3_1_);\n  DAT_200002be = CONCAT11((undefined)sensorDataBytes,sensorDataBytes._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)sensorDataBytes2,sensorDataBytes2._1_1_);\n  convertedSensorData1 = (int)DAT_200002c0;\n  convertedSensorData2 = (int)DAT_200002c2;\n  floatConversionResult = __floatsisf();\n  floatConversionResult = __aeabi_fmul(floatConversionResult,0x447a0000);\n  floatConversionResult = __aeabi_fmul(floatConversionResult,0x38000000);\n  DAT_200002c4 = __aeabi_fsub(floatConversionResult,DAT_20000000);\n  floatConversionResult = __floatsisf(convertedSensorData1);\n  floatConversionResult = __aeabi_fmul(floatConversionResult,0x447a0000);\n  floatConversionResult = __aeabi_fmul(floatConversionResult,0x38000000);\n  DAT_200002c8 = __aeabi_fsub(floatConversionResult,DAT_20000004);\n  floatConversionResult = __floatsisf(convertedSensorData2);\n  floatConversionResult = __aeabi_fmul(floatConversionResult,0x447a0000);\n  floatConversionResult = __aeabi_fmul(floatConversionResult,0x38000000);\n  DAT_200002cc = __aeabi_fsub(floatConversionResult,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "read_and_process_sensor_data_08002bf0",
                "local_20": "sensorDataBytes",
                "local_1c": "sensorDataBytes2",
                "I2C_ReadByteArray": "readByteArrayFromI2C",
                "iVar3": "convertedSensorData1",
                "iVar2": "convertedSensorData2",
                "uVar1": "floatConversionResult"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "FUNC_08002cb0",
            "code": "\nvoid FUNC_08002cb0(undefined4 param_1,undefined4 param_2,undefined4 param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint local_c;\n  \n  local_c = param_4;\n  I2C_WriteByte(0xd0,0x37,0x22,1,param_1,param_2,param_3);\n  I2C_WriteByte(0xd0,0x6a,1);\n  I2C_ReadByte(0x18,0,\"../Src/MPU9250.c\",0xad);\n  I2C_WriteByte(0x18,0xb,1);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0xf,1);\n  I2C_ReadByteArray(0x18,0x10,&local_c,3,\"../Src/MPU9250.c\",0xb6);\n  uVar1 = __floatsisf((local_c & 0xff) - 0x80);\n  uVar1 = __aeabi_fmul(uVar1,0x3b800000);\n  DAT_200002e8 = __addsf3(uVar1,0x3f800000);\n  uVar1 = __floatsisf((local_c >> 8 & 0xff) - 0x80);\n  uVar1 = __aeabi_fmul(uVar1,0x3b800000);\n  DAT_200002ec = __addsf3(uVar1,0x3f800000);\n  uVar1 = __floatsisf((local_c >> 0x10 & 0xff) - 0x80);\n  uVar1 = __aeabi_fmul(uVar1,0x3b800000);\n  DAT_200002f0 = __addsf3(uVar1,0x3f800000);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "FUNC_08002cb0"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "__floatsisf",
                "I2C_WriteByte",
                "I2C_ReadByte",
                "__addsf3",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "read_sensor_data_08002d88",
            "code": "\nvoid readSensorData_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result1;\n  undefined4 temp1;\n  undefined4 temp2;\n  int result2;\n  undefined2 data;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  byte byte5;\n  undefined upperByte;\n  \n  upperByte = (undefined)((uint)param4 >> 0x18);\n  data = 0;\n  byte1 = 0;\n  byte2 = 0;\n  byte3 = 0;\n  byte4 = 0;\n  byte5 = 0;\n  result1 = I2C_ReadByte(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (result1 << 0x1f < 0) {\n    I2C_ReadByteArray(0x18,3,&data,7,\"../Src/MPU9250.c\",0xda);\n    temp2 = DAT_2000001c;\n    if ((int)((uint)byte5 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(byte2,byte1);\n      DAT_200002bc = CONCAT11(byte4,byte3);\n      result2 = (int)DAT_200002ba;\n      result1 = (int)DAT_200002bc;\n      DAT_200002b8 = data;\n      temp1 = __floatsisf();\n      temp1 = __aeabi_fmul(temp1,temp2);\n      temp1 = __aeabi_fmul(temp1,DAT_200002e8);\n      temp1 = __aeabi_fsub(temp1,DAT_20000020);\n      DAT_200002dc = __aeabi_fmul(temp1,DAT_2000002c);\n      temp1 = __floatsisf(result2);\n      temp1 = __aeabi_fmul(temp1,temp2);\n      temp1 = __aeabi_fmul(temp1,DAT_200002ec);\n      temp1 = __aeabi_fsub(temp1,DAT_20000024);\n      DAT_200002e0 = __aeabi_fmul(temp1,DAT_20000030);\n      temp1 = __floatsisf(result1);\n      temp2 = __aeabi_fmul(temp1,temp2);\n      temp2 = __aeabi_fmul(temp2,DAT_200002f0);\n      temp2 = __aeabi_fsub(temp2,DAT_20000028);\n      DAT_200002e4 = __aeabi_fmul(temp2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "read_sensor_data_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_21": "upperByte",
                "local_28": "data",
                "uStack_26": "byte1",
                "uStack_25": "byte2",
                "local_24": "byte3",
                "local_23": "byte4",
                "local_22": "byte5",
                "iVar1": "result1",
                "iVar4": "result2",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByte",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensor_08002ea0",
            "code": "\nvoid initializeSensor_08002ea0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 tempVar1;\n  \n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(0x3f19999a);\n  MadgwickSetDelta(0,tempVar1,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensor_08002ea0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "tempVar1"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_sum_08002ec0",
            "code": "\nvoid calculateSum_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 data1;\n  undefined4 data2;\n  \n  data1 = DAT_2000024c;\n  data2 = DAT_20000010;\n  result1 = __aeabi_fsub(0x3f800000,DAT_20000010);\n  data1 = __aeabi_fmul(result1,data1);\n  data2 = __aeabi_fmul(data2,DAT_2000000c);\n  DAT_2000000c = __addsf3(data2,data1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_sum_08002ec0",
                "uVar1": "result1",
                "uVar2": "data1",
                "uVar3": "data2"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "FUNC_08002ed4",
            "code": "\nvoid FUNC_08002ed4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  \n  uVar2 = DAT_20000248;\n  uVar3 = uRam20000018;\n  uVar1 = __aeabi_fsub(0x3f800000,uRam20000018);\n  uVar2 = __aeabi_fmul(uVar1,uVar2);\n  uVar3 = __aeabi_fmul(uVar3,uRam20000014);\n  uRam20000014 = __addsf3(uVar3,uVar2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "FUNC_08002ed4"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "adjust_float_value_08002ee8",
            "code": "\nvoid adjustFloatValue_08002ee8(void)\n\n{\n  undefined4 originalValue;\n  int comparisonResult;\n  \n  originalValue = DAT_20000250;\n  comparisonResult = __aeabi_fcmpge(DAT_20000250,0xc3340000);\n  if ((comparisonResult != 0) && (comparisonResult = __aeabi_fcmplt(originalValue,0x42b40000), comparisonResult != 0)) {\n    __addsf3(originalValue,0x42b40000);\n    return;\n  }\n  __aeabi_fsub(originalValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "adjust_float_value_08002ee8",
                "uVar1": "originalValue",
                "iVar2": "comparisonResult"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmplt",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "sensor_data_processing_08002f28",
            "code": "\n\n\nvoid sensorDataProcessing_08002f28(void)\n\n{\n  undefined4 timeDifference;\n  \n  readAccelerometerData();\n  readGyroscopeData();\n  readMagnetometerData();\n  DAT_20000258 = micros();\n  timeDifference = calculateTimeDifference(DAT_20000258 - DAT_20000254);\n  divideTimeDifference(timeDifference,0x447a0000);\n  setDelta();\n  DAT_20000254 = DAT_20000258;\n  updateQuaternion\n            (DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n             DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n             &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  timeDifference = getRoll();\n  multiplyValue(timeDifference,0x41200000);\n  DAT_20001395._0_2_ = __aeabi_f2iz();\n  timeDifference = getPitch();\n  multiplyValue(timeDifference,0x41200000);\n  DAT_20001395._2_2_ = __aeabi_f2iz();\n  getYaw();\n  DAT_20001399 = __aeabi_f2iz();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "sensor_data_processing_08002f28",
                "uVar1": "timeDifference",
                "MPU9250_ReadAccelData": "readAccelerometerData",
                "MPU9250_ReadGyroData": "readGyroscopeData",
                "AK8963_ReadData": "readMagnetometerData",
                "__floatunsisf": "calculateTimeDifference",
                "__aeabi_fdiv": "divideTimeDifference",
                "MadgwickSetDelta": "setDelta",
                "MadgwickQuaternionUpdate": "updateQuaternion",
                "__aeabi_fmul": "multiplyValue",
                "AHRS_GetRoll": "getRoll",
                "AHRS_GetPitch": "getPitch",
                "AHRS_GetYaw": "getYaw"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MadgwickSetDelta",
                "AHRS_GetPitch",
                "MPU9250_ReadGyroData",
                "__aeabi_f2iz",
                "__floatunsisf",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "AK8963_ReadData",
                "micros",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "__aeabi_fdiv",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "read_sensor_data_08003034",
            "code": "\nuint readSensorData_08003034(undefined4 address,undefined4 offset,undefined4 bufferSize,undefined4 data)\n\n{\n  undefined4 result;\n  \n  result = data;\n  I2C_ReadBytes(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,bufferSize);\n  return (uint)CONCAT12((undefined)result,CONCAT11(result._1_1_,result._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "read_sensor_data_08003034",
                "param_1": "address",
                "param_2": "offset",
                "param_3": "bufferSize",
                "param_4": "data",
                "local_c": "result"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "I2C_ReadBytes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "PID_UpdateAltitude"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "read_sensor_data_08003298",
            "code": "\nvoid readSensorData_08003298(void)\n\n{\n  int counter;\n  undefined firstByte;\n  undefined secondByte;\n  \n  counter = 0;\n  I2C_WriteByte(0xee,0x1e,1);\n  delay_ms(10);\n  DAT_20000038 = 8;\n  do {\n    firstByte = 0;\n    secondByte = 0;\n    I2C_ReadByteArray(0xee,counter + 0xa0U & 0xffff,&firstByte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + counter) = CONCAT11(firstByte,secondByte);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    (&DAT_20000300)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "read_sensor_data_08003298",
                "local_1c": "firstByte",
                "local_1b": "secondByte",
                "iVar1": "counter"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "I2C_WriteByte",
                "delay_ms",
                "I2C_ReadByteArray"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "FUNC_08003314",
            "code": "\nvoid FUNC_08003314(undefined4 param_1)\n\n{\n  DAT_2000035c = param_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "FUNC_08003314"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_variable_08003320",
            "code": "\nvoid setGlobalVariable_08003320(undefined4 newValue)\n\n{\n  DAT_20000360 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_variable_08003320",
                "param_1": "newValue"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_coordinates_08003330",
            "code": "\nvoid calculateCoordinates_08003330(undefined4 x1,undefined4 y1,undefined4 z1,undefined4 x2,\n                 undefined4 y2,undefined4 z2,undefined4 x3,undefined4 y3,\n                 undefined4 z3,undefined4 *coordinates)\n\n{\n  undefined4 distance1;\n  undefined4 distance2;\n  int check1;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  int check2;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined4 temp12;\n  undefined4 temp13;\n  undefined4 temp14;\n  int temp15;\n  undefined4 temp16;\n  undefined4 temp17;\n  undefined4 temp18;\n  undefined4 temp19;\n  undefined4 temp20;\n  undefined4 temp21;\n  int check3;\n  undefined4 distance3;\n  undefined4 scale;\n  undefined4 factor1;\n  int factor2;\n  undefined8 angle1;\n  undefined8 angle2;\n  \n  factor1 = DAT_20000048;\n  scale = DAT_20000044;\n  factor2 = DAT_20000040;\n  distance3 = DAT_2000003c;\n  distance1 = __aeabi_fmul(x1,x1);\n  distance2 = __aeabi_fmul(y1);\n  distance1 = __addsf3(distance1,distance2);\n  distance2 = __aeabi_fmul(z1);\n  __addsf3(distance1,distance2);\n  __aeabi_f2d();\n  sqrt();\n  distance1 = __truncdfsf2();\n  check1 = __aeabi_fcmpeq(distance1,0);\n  if (check1 == 0) {\n    distance2 = __aeabi_fmul(x3);\n    temp1 = __aeabi_fmul(y3);\n    distance2 = __addsf3(distance2,temp1);\n    temp1 = __aeabi_fmul(z3);\n    __addsf3(distance2,temp1);\n    __aeabi_f2d();\n    sqrt();\n    distance2 = __truncdfsf2();\n    check1 = __aeabi_fcmpeq(distance2,0);\n    if (check1 == 0) {\n      angle1 = __aeabi_f2d(x2);\n      __muldf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0xa2529d39,0x3f91df46);\n      temp1 = __truncdfsf2();\n      angle1 = __aeabi_f2d(y2);\n      __muldf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0xa2529d39,0x3f91df46);\n      temp2 = __truncdfsf2();\n      angle1 = __aeabi_f2d(z2);\n      __muldf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0xa2529d39,0x3f91df46);\n      temp3 = __truncdfsf2();\n      check1 = __addsf3(distance3);\n      temp4 = __addsf3(factor2);\n      check2 = __addsf3(scale,scale);\n      temp5 = __addsf3(factor1,factor1);\n      temp6 = __aeabi_fmul(distance3);\n      temp7 = __aeabi_fmul(distance3,factor2);\n      temp8 = __aeabi_fmul(distance3,scale);\n      temp9 = __aeabi_fmul(factor2);\n      temp10 = __aeabi_fmul(factor2,factor1);\n      temp11 = __aeabi_fmul(scale,scale);\n      temp12 = __aeabi_fmul(factor1,factor1);\n      distance1 = __aeabi_fdiv(0x3f800000,distance1);\n      distance2 = __aeabi_fdiv(0x3f800000,distance2);\n      temp13 = __aeabi_fmul(x3,distance2);\n      temp14 = __aeabi_fmul(y3,distance2);\n      distance2 = __aeabi_fmul(z3,distance2);\n      temp15 = __aeabi_fmul(check1,temp13);\n      temp16 = __aeabi_fmul(check1,temp14);\n      temp17 = __aeabi_fmul(check1,distance2);\n      temp18 = __aeabi_fmul(temp4,temp13);\n      temp19 = __aeabi_fmul(temp6,temp13);\n      temp20 = __aeabi_fmul(factor1,temp16);\n      temp19 = __aeabi_fsub(temp19,temp20);\n      temp20 = __aeabi_fmul(scale,temp17);\n      temp19 = __addsf3(temp19,temp20);\n      temp20 = __aeabi_fmul(temp9,temp13);\n      temp19 = __addsf3(temp19,temp20);\n      temp20 = __aeabi_fmul(temp4,temp14);\n      temp20 = __aeabi_fmul(temp20,scale);\n      temp19 = __addsf3(temp19,temp20);\n      temp20 = __aeabi_fmul(temp4,distance2);\n      temp20 = __aeabi_fmul(temp20,factor1);\n      temp19 = __addsf3(temp19,temp20);\n      temp20 = __aeabi_fmul(temp11,temp13);\n      temp19 = __aeabi_fsub(temp19,temp20);\n      temp20 = __aeabi_fmul(temp12,temp13);\n      temp19 = __aeabi_fsub(temp19,temp20);\n      temp20 = __aeabi_fmul(factor1,temp15);\n      temp21 = __aeabi_fmul(temp6,temp14);\n      temp20 = __addsf3(temp20,temp21);\n      temp17 = __aeabi_fmul(factor2,temp17);\n      temp17 = __aeabi_fsub(temp20,temp17);\n      temp20 = __aeabi_fmul(scale,temp18);\n      temp17 = __addsf3(temp17,temp20);\n      temp20 = __aeabi_fmul(temp9,temp14);\n      temp17 = __aeabi_fsub(temp17,temp20);\n      temp20 = __aeabi_fmul(temp11,temp14);\n      temp17 = __addsf3(temp17,temp20);\n      temp20 = __aeabi_fmul(check2,distance2);\n      temp20 = __aeabi_fmul(temp20,factor1);\n      temp17 = __addsf3(temp17,temp20);\n      temp20 = __aeabi_fmul(temp12,temp14);\n      temp17 = __aeabi_fsub(temp17,temp20);\n      temp19 = __aeabi_fmul(temp19,temp19);\n      temp17 = __aeabi_fmul(temp17,temp17);\n      __addsf3(temp19,temp17);\n      __aeabi_f2d();\n      sqrt();\n      check3 = __truncdfsf2();\n      temp17 = __aeabi_fmul(temp15 + -0x80000000,scale);\n      temp16 = __aeabi_fmul(factor2,temp16);\n      temp16 = __addsf3(temp17,temp16);\n      temp6 = __aeabi_fmul(temp6,distance2);\n      temp6 = __addsf3(temp16,temp6);\n      temp16 = __aeabi_fmul(factor1,temp18);\n      temp6 = __addsf3(temp6,temp16);\n      temp16 = __aeabi_fmul(temp9,distance2);\n      temp6 = __aeabi_fsub(temp6,temp16);\n      temp16 = __aeabi_fmul(check2,temp14);\n      temp16 = __aeabi_fmul(temp16,factor1);\n      temp6 = __addsf3(temp6,temp16);\n      temp16 = __aeabi_fmul(temp11,distance2);\n      temp6 = __aeabi_fsub(temp6,temp16);\n      temp16 = __aeabi_fmul(temp12,distance2);\n      temp6 = __addsf3(temp6,temp16);\n      temp16 = __addsf3(temp6,temp6);\n      temp17 = __addsf3(temp10);\n      temp18 = __aeabi_fmul(scale,check1);\n      temp17 = __aeabi_fsub(temp17,temp18);\n      temp18 = __aeabi_fmul(x1,distance1);\n      temp17 = __aeabi_fsub(temp17,temp18);\n      temp18 = __aeabi_fmul(factor1,check2);\n      temp19 = __addsf3(temp7);\n      temp18 = __addsf3(temp18,temp19);\n      temp19 = __aeabi_fmul(y1,distance1);\n      temp18 = __aeabi_fsub(temp18,temp19);\n      temp19 = __aeabi_fmul(scale,temp6);\n      temp20 = __aeabi_fsub(0x3f000000,temp11);\n      temp12 = __aeabi_fsub(temp20,temp12);\n      temp12 = __aeabi_fmul(temp12,check3);\n      temp20 = __aeabi_fsub(temp10,temp8);\n      temp20 = __aeabi_fmul(temp20,temp6);\n      temp12 = __addsf3(temp12,temp20);\n      temp12 = __aeabi_fsub(temp12,temp13);\n      temp13 = __aeabi_fmul(factor2,temp6);\n      temp20 = __aeabi_fmul(factor2,scale);\n      temp21 = __aeabi_fmul(distance3,factor1);\n      temp20 = __aeabi_fsub(temp20,temp21);\n      temp20 = __aeabi_fmul(temp20,check3);\n      temp21 = __aeabi_fmul(scale,factor1);\n      temp7 = __addsf3(temp21,temp7);\n      temp7 = __aeabi_fmul(temp7,temp6);\n      temp7 = __addsf3(temp20,temp7);\n      temp7 = __aeabi_fsub(temp7,temp14);\n      temp14 = __aeabi_fmul(scale,check3);\n      temp20 = __aeabi_fsub(0x3f000000,temp9);\n      temp20 = __aeabi_fsub(temp20,temp11);\n      temp20 = __aeabi_fmul(temp20,temp6);\n      temp8 = __addsf3(temp8,temp10);\n      temp8 = __aeabi_fmul(temp8,check3);\n      temp8 = __addsf3(temp20,temp8);\n      distance2 = __aeabi_fsub(temp8,distance2);\n      temp8 = __aeabi_fmul(check2 + -0x80000000,temp17);\n      temp10 = __aeabi_fmul(temp4,temp18);\n      temp8 = __addsf3(temp8,temp10);\n      temp10 = __aeabi_fmul(temp19,temp12);\n      temp8 = __aeabi_fsub(temp8,temp10);\n      temp10 = __aeabi_fmul(factor1,check3 + -0x80000000);\n      temp10 = __addsf3(temp10,temp13);\n      temp10 = __aeabi_fmul(temp10,temp7);\n      temp8 = __addsf3(temp8,temp10);\n      temp10 = __aeabi_fmul(temp14,distance2);\n      temp8 = __addsf3(temp8,temp10);\n      temp9 = __addsf3(temp9);\n      temp9 = __aeabi_fsub(0x3f800000,temp9);\n      temp10 = __addsf3(temp11);\n      temp9 = __aeabi_fsub(temp9,temp10);\n      distance1 = __aeabi_fmul(z1,distance1);\n      distance1 = __aeabi_fsub(temp9,distance1);\n      temp9 = __aeabi_fmul(factor1,temp6);\n      temp6 = __aeabi_fmul(distance3,temp6);\n      temp10 = __aeabi_fmul(temp5,temp17);\n      temp11 = __aeabi_fmul(check1,temp18);\n      temp10 = __addsf3(temp10,temp11);\n      temp11 = __aeabi_fmul(factor2,0x40800000);\n      temp11 = __aeabi_fmul(temp11,distance1);\n      temp10 = __aeabi_fsub(temp10,temp11);\n      temp11 = __aeabi_fmul(temp12,temp9);\n      temp10 = __addsf3(temp10,temp11);\n      temp11 = __addsf3(temp14,temp6);\n      temp11 = __aeabi_fmul(temp11,temp7);\n      temp10 = __addsf3(temp10,temp11);\n      temp11 = __aeabi_fmul(factor1,check3);\n      temp14 = __aeabi_fmul(factor2,temp16);\n      temp11 = __aeabi_fsub(temp11,temp14);\n      temp11 = __aeabi_fmul(temp11,distance2);\n      temp10 = __addsf3(temp10,temp11);\n      temp15 = __addsf3(check3,check3);\n      temp11 = __aeabi_fmul(factor2,check3);\n      temp14 = __aeabi_fmul(check1 + -0x80000000,temp17);\n      temp5 = __aeabi_fmul(temp5,temp18);\n      temp5 = __addsf3(temp14,temp5);\n      temp14 = __aeabi_fmul(scale,0x40800000);\n      distance1 = __aeabi_fmul(temp14,distance1);\n      distance1 = __aeabi_fsub(temp5,distance1);\n      temp5 = __aeabi_fmul(scale,temp15 + -0x80000000);\n      temp5 = __aeabi_fsub(temp5,temp6);\n      temp5 = __aeabi_fmul(temp5,temp12);\n      distance1 = __addsf3(distance1,temp5);\n      temp5 = __addsf3(temp9,temp11);\n      temp5 = __aeabi_fmul(temp5,temp7);\n      distance1 = __addsf3(distance1,temp5);\n      temp5 = __aeabi_fmul(distance3,check3);\n      temp6 = __aeabi_fmul(scale,temp16);\n      temp5 = __aeabi_fsub(temp5,temp6);\n      temp5 = __aeabi_fmul(temp5,distance2);\n      temp5 = __addsf3(distance1,temp5);\n      distance1 = __aeabi_fmul(temp4,temp17);\n      temp4 = __aeabi_fmul(check2,temp18);\n      distance1 = __addsf3(distance1,temp4);\n      temp4 = __aeabi_fmul(factor1,temp15 + -0x80000000);\n      temp4 = __addsf3(temp4,temp13);\n      temp4 = __aeabi_fmul(temp4,temp12);\n      distance1 = __addsf3(distance1,temp4);\n      temp4 = __aeabi_fmul(distance3,check3 + -0x80000000);\n      temp4 = __addsf3(temp4,temp19);\n      temp4 = __aeabi_fmul(temp4,temp7);\n      distance1 = __addsf3(distance1,temp4);\n      distance2 = __aeabi_fmul(distance2,temp11);\n      temp4 = __addsf3(distance1,distance2);\n      distance1 = __aeabi_fmul(temp8);\n      distance2 = __aeabi_fmul(temp10);\n      distance1 = __addsf3(distance1,distance2);\n      distance2 = __aeabi_fmul(temp5,temp5);\n      distance1 = __addsf3(distance1,distance2);\n      distance2 = __aeabi_fmul(temp4,temp4);\n      __addsf3(distance1,distance2);\n      __aeabi_f2d();\n      sqrt();\n      distance1 = __truncdfsf2();\n      temp6 = __aeabi_fdiv(0x3f800000,distance1);\n      distance1 = DAT_2000035c;\n      distance2 = __aeabi_fmul(factor2 + -0x80000000,temp1);\n      temp7 = __aeabi_fmul(scale,temp2);\n      distance2 = __aeabi_fsub(distance2,temp7);\n      temp7 = __aeabi_fmul(factor1,temp3);\n      distance2 = __aeabi_fsub(distance2,temp7);\n      temp7 = __aeabi_fmul(distance2,0x3f000000);\n      temp8 = __aeabi_fmul(temp8,temp6);\n      distance2 = DAT_20000360;\n      temp8 = __aeabi_fmul(temp8,distance1);\n      temp7 = __aeabi_fsub(temp7,temp8);\n      distance2 = __aeabi_fmul(temp7,distance2);\n      temp7 = __addsf3(distance2,distance3);\n      temp8 = __aeabi_fmul(distance3,temp1);\n      temp9 = __aeabi_fmul(scale,temp3);\n      distance2 = DAT_20000360;\n      temp8 = __addsf3(temp8,temp9);\n      temp9 = __aeabi_fmul(factor1,temp2);\n      temp8 = __aeabi_fsub(temp8,temp9);\n      temp8 = __aeabi_fmul(temp8,0x3f000000);\n      temp9 = __aeabi_fmul(temp10,temp6);\n      temp9 = __aeabi_fmul(temp9,distance1);\n      temp8 = __aeabi_fsub(temp8,temp9);\n      distance2 = __aeabi_fmul(temp8,distance2);\n      temp8 = __addsf3(distance2,factor2);\n      distance2 = DAT_20000360;\n      temp9 = __aeabi_fmul(distance3,temp2);\n      temp10 = __aeabi_fmul(factor2,temp3);\n      temp9 = __aeabi_fsub(temp9,temp10);\n      temp10 = __aeabi_fmul(factor1,temp1);\n      temp9 = __addsf3(temp9,temp10);\n      temp9 = __aeabi_fmul(temp9,0x3f000000);\n      temp5 = __aeabi_fmul(temp5,temp6);\n      temp5 = __aeabi_fmul(temp5,distance1);\n      temp5 = __aeabi_fsub(temp9,temp5);\n      distance2 = __aeabi_fmul(temp5,distance2);\n      distance2 = __addsf3(distance2,scale);\n      distance3 = __aeabi_fmul(distance3,temp3);\n      temp2 = __aeabi_fmul(factor2,temp2);\n      distance3 = __addsf3(distance3,temp2);\n      scale = __aeabi_fmul(scale,temp1);\n      distance3 = __aeabi_fsub(distance3,scale);\n      scale = __aeabi_fmul(distance3,0x3f000000);\n      distance3 = __aeabi_fmul(temp4,temp6);\n      distance1 = __aeabi_fmul(distance3,distance1);\n      distance3 = DAT_20000360;\n      scale = __aeabi_fsub(scale,distance1);\n      distance3 = __aeabi_fmul(scale,distance3);\n      distance3 = __addsf3(distance3,factor1);\n      scale = __aeabi_fmul(temp7,temp7);\n      factor1 = __aeabi_fmul(temp8,temp8);\n      scale = __addsf3(scale,factor1);\n      factor1 = __aeabi_fmul(distance2,distance2);\n      scale = __addsf3(scale,factor1);\n      factor1 = __aeabi_fmul(distance3,distance3);\n      __addsf3(scale,factor1);\n      __aeabi_f2d();\n      sqrt();\n      scale = __truncdfsf2();\n      scale = __aeabi_fdiv(0x3f800000,scale);\n      factor1 = __aeabi_fmul(temp7,scale);\n      DAT_2000003c = factor1;\n      factor2 = __aeabi_fmul(temp8,scale);\n      DAT_20000040 = factor2;\n      distance1 = __aeabi_fmul(distance2,scale);\n      DAT_20000044 = distance1;\n      DAT_20000048 = __aeabi_fmul(distance3,scale);\n      distance3 = __aeabi_fmul(factor2,DAT_20000048);\n      scale = __aeabi_fmul(factor1,distance1);\n      distance3 = __aeabi_fsub(distance3,scale);\n      __addsf3(distance3,distance3);\n      __aeabi_f2d();\n      angle1 = asin();\n      angle1 = __muldf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0,0x40668000);\n      __divdf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0x54442d18,0x400921fb);\n      distance3 = __truncdfsf2();\n      *coordinates = distance3;\n      factor2 = DAT_20000040;\n      distance3 = DAT_2000003c;\n      scale = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      factor1 = __aeabi_fmul(factor2,factor2);\n      factor1 = __aeabi_fsub(scale,factor1);\n      scale = DAT_20000044;\n      distance1 = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      distance1 = __aeabi_fsub(factor1,distance1);\n      factor1 = DAT_20000048;\n      distance2 = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __addsf3(distance1,distance2);\n      angle1 = __aeabi_f2d();\n      distance3 = __aeabi_fmul(distance3,factor2);\n      scale = __aeabi_fmul(scale,factor1);\n      distance3 = __addsf3(distance3,scale);\n      __addsf3(distance3,distance3);\n      angle2 = __aeabi_f2d();\n      angle1 = atan2((int)angle2,(int)((ulonglong)angle2 >> 0x20),(int)angle1,\n                     (int)((ulonglong)angle1 >> 0x20));\n      angle1 = __muldf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0,0x40668000);\n      __divdf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0x54442d18,0x400921fb);\n      distance3 = __truncdfsf2();\n      coordinates[1] = distance3;\n      factor2 = DAT_20000040;\n      distance3 = DAT_2000003c;\n      scale = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      factor1 = __aeabi_fmul(factor2,factor2);\n      factor1 = __addsf3(scale,factor1);\n      scale = DAT_20000044;\n      distance1 = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      distance1 = __aeabi_fsub(factor1,distance1);\n      factor1 = DAT_20000048;\n      distance2 = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __aeabi_fsub(distance1,distance2);\n      angle1 = __aeabi_f2d();\n      scale = __aeabi_fmul(factor2,scale);\n      distance3 = __aeabi_fmul(distance3,factor1);\n      distance3 = __addsf3(scale,distance3);\n      __addsf3(distance3,distance3);\n      angle2 = __aeabi_f2d();\n      angle1 = atan2((int)angle2,(int)((ulonglong)angle2 >> 0x20),(int)angle1,\n                     (int)((ulonglong)angle1 >> 0x20));\n      angle1 = __muldf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0,0x40668000);\n      __divdf3((int)angle1,(int)((ulonglong)angle1 >> 0x20),0x54442d18,0x400921fb);\n      distance3 = __truncdfsf2();\n      coordinates[2] = distance3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_coordinates_08003330",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "z1",
                "param_4": "x2",
                "param_5": "y2",
                "param_6": "z2",
                "param_7": "x3",
                "param_8": "y3",
                "param_9": "z3",
                "param_10": "coordinates",
                "uVar1": "distance1",
                "uVar2": "distance2",
                "iVar3": "check1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "iVar8": "check2",
                "uVar9": "temp5",
                "uVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "uVar18": "temp14",
                "iVar19": "temp15",
                "uVar20": "temp16",
                "uVar21": "temp17",
                "uVar22": "temp18",
                "uVar23": "temp19",
                "uVar24": "temp20",
                "uVar25": "temp21",
                "iVar26": "check3",
                "uVar27": "distance3",
                "uVar28": "scale",
                "uVar29": "factor1",
                "iVar30": "factor2",
                "uVar31": "angle1",
                "uVar32": "angle2"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "atan2",
                "sqrt",
                "__aeabi_fcmpeq",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__addsf3",
                "__muldf3",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "__aeabi_fmul",
                "asin",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_parameter_left_08003eb0",
            "code": "\nlonglong shiftParameterLeft_08003eb0(uint input)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(input,1);\n  }\n  return (ulonglong)input << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_parameter_left_08003eb0",
                "param_1": "input",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 incrementAndStore_08003ec8(int basePointer,undefined data)\n\n{\n  *(short *)(basePointer + 0x804) = *(short *)(basePointer + 0x804) + 1;\n  *(undefined *)(basePointer + (uint)*(ushort *)(basePointer + 0x802)) = data;\n  *(ushort *)(basePointer + 0x802) = *(short *)(basePointer + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "basePointer",
                "param_2": "data"
            },
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_gpio_pins_08003f3c",
            "code": "\nvoid set_GPIO_pins_08003f3c(int pin_1_state,int pin_2_state,int pin_3_state)\n\n{\n  HAL_GPIO_WritePin(0x40011000,0x8000,pin_1_state == 0);\n  HAL_GPIO_WritePin(0x40011000,0x4000,pin_2_state == 0);\n  HAL_GPIO_WritePin(0x40011000,0x2000,pin_3_state == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_gpio_pins_08003f3c",
                "param_1": "pin_1_state",
                "param_2": "pin_2_state",
                "param_3": "pin_3_state"
            },
            "calling": [
                "PID_Update",
                "Devices_Init"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_value_08003fc4",
            "code": "\nvoid setParamValue_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_value_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_pointer_offset_08003fd0",
            "code": "\nvoid setPointerOffset_08003fd0(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_pointer_offset_08003fd0",
                "param_1": "newValue"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_global_parameter_08003fdc",
            "code": "\nvoid setGlobalParameter_08003fdc(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_global_parameter_08003fdc",
                "param_1": "newValue"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "write_to_memory_location_08003fe8",
            "code": "\nvoid writeToMemoryLocation_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "write_to_memory_location_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "Motor_DistributeSpeed",
                "Motor_StopAll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "start_pwm_timers_08003ff4",
            "code": "\nvoid start_PWM_timers_08003ff4(void)\n\n{\n  HAL_TIM_PWM_Start(&DAT_200015f8,4);\n  HAL_TIM_PWM_Start(&DAT_20001540,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "start_pwm_timers_08003ff4"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "led_flash_pattern_08004028",
            "code": "\nvoid LED_FlashPattern_08004028(void)\n\n{\n  int iterationCount;\n  \n  Peripherals_Init();\n  PWM_Init();\n  iterationCount = 3;\n  do {\n    toggleLED(1,0);\n    delay_ms(100);\n    toggleLED(0,1);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    iterationCount = iterationCount + -1;\n  } while (iterationCount != 0);\n  toggleLED(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "led_flash_pattern_08004028",
                "iVar1": "iterationCount"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "Peripherals_Init",
                "PWM_Init",
                "delay_ms",
                "toggleLED"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "write_data_to_i2_c_0800403c",
            "code": "\nvoid writeDataToI2C_0800403c(undefined4 deviceAddress,undefined4 memoryAddress,undefined data,int delayEnabled)\n\n{\n  int writeResult;\n  undefined dataBuffer [8];\n  \n  dataBuffer[0] = data;\n  writeResult = HAL_I2C_Mem_Write(&DAT_20001504,deviceAddress,memoryAddress,1,dataBuffer,1,200);\n  if (writeResult != 0) {\n    _Error_Handler(\"../Src/i2c.c\",0x1b);\n  }\n  if (delayEnabled != 0) {\n    delay_ms(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "write_data_to_i2_c_0800403c",
                "param_1": "deviceAddress",
                "param_2": "memoryAddress",
                "param_3": "data",
                "param_4": "delayEnabled",
                "iVar1": "writeResult",
                "local_14": "dataBuffer"
            },
            "calling": [
                "taskScheduler",
                "MPU9250_Init",
                "AK8963_Init",
                "MS5611_Init"
            ],
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "read_i2_c_data_0800407c",
            "code": "\nundefined readI2CData_0800407c(undefined4 deviceAddress,undefined4 dataAddress,undefined4 errorHandlerParam1,undefined4 errorHandlerParam2)\n\n{\n  int iVar1;\n  undefined readBuffer [8];\n  \n  readBuffer[0] = 0;\n  iVar1 = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,dataAddress,1,readBuffer,1,200);\n  if (iVar1 != 0) {\n    _Error_Handler(errorHandlerParam1,errorHandlerParam2);\n  }\n  return readBuffer[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "read_i2_c_data_0800407c",
                "param_1": "deviceAddress",
                "param_2": "dataAddress",
                "param_3": "errorHandlerParam1",
                "param_4": "errorHandlerParam2",
                "local_14": "readBuffer"
            },
            "calling": [
                "MPU9250_Init",
                "AK8963_Init",
                "I2C_ReadByteArray",
                "AK8963_ReadData"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "mem_read_error_check_080040b8",
            "code": "\nvoid memReadErrorCheck_080040b8(undefined4 deviceAddress,undefined4 memAddress,undefined4 dataSize,undefined4 readBuffer,\n                 undefined4 errorHandlerParam1,undefined4 errorHandlerParam2)\n\n{\n  int readStatus;\n  \n  readStatus = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,memAddress,1,dataSize,readBuffer,200,readBuffer);\n  if (readStatus != 0) {\n    _Error_Handler(errorHandlerParam1,errorHandlerParam2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "mem_read_error_check_080040b8",
                "param_1": "deviceAddress",
                "param_2": "memAddress",
                "param_3": "dataSize",
                "param_4": "readBuffer",
                "param_5": "errorHandlerParam1",
                "param_6": "errorHandlerParam2",
                "iVar1": "readStatus"
            },
            "calling": [
                "MS5611_ReadADC"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_bytes_080040e8",
            "code": "\nvoid copyBytes_080040e8(undefined4 device,int startAddress,int destination,int count)\n\n{\n  undefined byte;\n  int i;\n  undefined *destPtr;\n  int strLen;\n  \n  destPtr = (undefined *)(destination + -1);\n  strLen = count;\n  for (i = 0; i < count; i = i + 1) {\n    byte = I2C_ReadByte(device,startAddress + i & 0xffff,\"../Src/i2c.c\",0x4c,strLen);\n    destPtr = destPtr + 1;\n    *destPtr = byte;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_bytes_080040e8",
                "param_1": "device",
                "param_2": "startAddress",
                "param_3": "destination",
                "param_4": "count",
                "uVar1": "byte",
                "iVar2": "i",
                "puVar3": "destPtr",
                "iVar4": "strLen"
            },
            "calling": [
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "MS5611_Init",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "update_sensors_0800411c",
            "code": "\nvoid updateSensors_0800411c(void)\n\n{\n  undefined4 *result;\n  longlong product;\n  uint diff1;\n  uint diff2;\n  uint sum;\n  undefined4 quotient1;\n  undefined4 quotient2;\n  int currentTime;\n  uint calculation1;\n  uint calculation2;\n  uint calculation3;\n  uint calculation4;\n  undefined4 *ptr;\n  undefined4 parameter;\n  int calculation5;\n  int calculation6;\n  bool condition1;\n  undefined8 powResult;\n  \n  currentTime = millis();\n  if (1 < (uint)(currentTime - DAT_2000028c)) {\n    DAT_2000028c = millis();\n    AHRS_ComputeAngles();\n  }\n  currentTime = millis();\n  if (2 < (uint)(currentTime - DAT_20000294)) {\n    DAT_20000294 = millis();\n    PID_Update();\n  }\n  currentTime = millis();\n  if (3 < (uint)(currentTime - DAT_20000290)) {\n    DAT_20000290 = millis();\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    calculation6 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    calculation1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)calculation6) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)calculation6) >> 0x20) << 9;\n    calculation2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)calculation6 >> 7);\n    calculation3 = calculation2 + (uint)DAT_20000260 * 0x10000;\n    diff2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)calculation6) >> 8);\n    currentTime = calculation1 + 2000;\n    sum = diff2 + (uint)DAT_2000025e * 0x8000;\n    condition1 = (int)calculation1 < 0;\n    if (1999 < currentTime) {\n      calculation1 = 0;\n    }\n    diff1 = calculation1;\n    if (condition1 != SBORROW4(currentTime,2000)) {\n      calculation5 = calculation1 * calculation1 * 5;\n      calculation1 = calculation5 >> 2;\n      diff1 = calculation5 >> 1;\n    }\n    calculation4 = calculation3 - diff1;\n    product = (ulonglong)(sum - calculation1) * (ulonglong)DAT_2000026c;\n    calculation5 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)calculation6 >> 0x28) +\n               (uint)CARRY4(diff2,(uint)DAT_2000025e * 0x8000)) - ((int)calculation1 >> 0x1f)) -\n             (uint)(sum < calculation1)) + (int)((ulonglong)product >> 0x20);\n    diff2 = (uint)product >> 0x15 | calculation5 * 0x800;\n    quotient1 = __floatsisf(diff2 - calculation4 >> 0xf |\n                        (((calculation5 >> 0x15) -\n                         ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)calculation6 >> 0x27) +\n                           (uint)CARRY4(calculation2,(uint)DAT_20000260 * 0x10000)) - ((int)diff1 >> 0x1f)\n                          ) - (uint)(calculation3 < diff1))) - (uint)(diff2 < calculation4)) * 0x20000);\n    quotient1 = __aeabi_fdiv(quotient1,0x42c80000);\n    DAT_20000354 = quotient1;\n    quotient2 = __floatsisf(currentTime);\n    DAT_20000358 = __aeabi_fdiv(quotient2,0x42c80000);\n    __aeabi_fdiv(quotient1,0x447d5000);\n    powResult = __aeabi_f2d();\n    powResult = pow((int)powResult,(int)((ulonglong)powResult >> 0x20),0x60000000,0x3fc85b95);\n    powResult = __subdf3(0,0x3ff00000,(int)powResult,(int)((ulonglong)powResult >> 0x20));\n    __muldf3((int)powResult,(int)((ulonglong)powResult >> 0x20),0,0x40e5a540);\n    quotient1 = __truncdfsf2();\n    quotient2 = 0;\n    ptr = &DAT_20000300;\n    DAT_20000350 = quotient1;\n    do {\n      result = ptr + 1;\n      *ptr = *result;\n      quotient2 = __addsf3(quotient2);\n      ptr = result;\n    } while (result != &DAT_2000034c);\n    DAT_2000034c = quotient1;\n    quotient1 = __addsf3(quotient2,quotient1);\n    DAT_200002fc = __aeabi_fdiv(quotient1,0x41a00000);\n    currentTime = __aeabi_f2iz();\n    DAT_200014ab = currentTime * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = MS5611_ReadADC();\n    DAT_20000275 = '\\x01';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x40,1,0,parameter);\n    DAT_20000278 = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = MS5611_ReadADC();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "update_sensors_0800411c",
                "puVar1": "result",
                "lVar2": "product",
                "uVar3": "diff1",
                "uVar4": "diff2",
                "uVar5": "sum",
                "uVar6": "quotient1",
                "uVar7": "quotient2",
                "iVar8": "currentTime",
                "uVar9": "calculation1",
                "uVar10": "calculation2",
                "uVar11": "calculation3",
                "uVar12": "calculation4",
                "puVar13": "ptr",
                "unaff_r4": "parameter",
                "iVar14": "calculation5",
                "iVar15": "calculation6",
                "bVar16": "condition1",
                "uVar17": "powResult"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MSP_SendPID",
                "I2C_WriteByte",
                "MSP_SendMotor",
                "millis",
                "MSP_SendAltitude",
                "__subdf3",
                "__addsf3",
                "AHRS_ComputeAngles",
                "__aeabi_f2iz",
                "__muldf3",
                "pow",
                "MSP_SendIdent",
                "__truncdfsf2",
                "__floatsisf",
                "MSP_SendRawIMU",
                "__aeabi_f2d",
                "MSP_SendAttitude",
                "MS5611_ReadADC",
                "PID_Update",
                "__aeabi_fdiv",
                "MSP_SendStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_components_08004194",
            "code": "\nvoid initializeComponents_08004194(void)\n\n{\n  initializeDevices();\n  startSerialCommunication();\n  initializeIMU();\n  initializeMS5611();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_components_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "startSerialCommunication",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MS5611_Init",
                "serialBegin",
                "IMU_Init",
                "Devices_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_task_execution_080041ae",
            "code": "\nvoid continuousTaskExecution_080041ae(void)\n\n{\n  initializeForkserver(0);\n  initializeSystem();\n  do {\n    incrementSystemTick();\n    executeTaskScheduler();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_task_execution_080041ae",
                "startForkserver": "initializeForkserver",
                "setup": "initializeSystem",
                "HAL_IncTick": "incrementSystemTick",
                "taskScheduler": "executeTaskScheduler"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "taskScheduler",
                "startForkserver",
                "HAL_IncTick",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "stop_motors_080041c4",
            "code": "\nvoid stopMotors_080041c4(undefined4 unusedParam1,undefined4 unusedParam2,undefined4 unusedParam3,undefined4 unusedParam4)\n\n{\n  undefined4 unusedVariable;\n  \n  setMotor1PWM(0);\n  setMotor2PWM(0);\n  setMotor3PWM(0);\n  setMotor4PWM(0,unusedVariable,unusedParam3,unusedParam4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "stop_motors_080041c4",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "param_3": "unusedParam3",
                "param_4": "unusedParam4",
                "extraout_r1": "unusedVariable",
                "Motor1_SetPWM": "setMotor1PWM",
                "Motor2_SetPWM": "setMotor2PWM",
                "Motor3_SetPWM": "setMotor3PWM",
                "Motor4_SetPWM": "setMotor4PWM"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "adjust_motor_pwm_0800426c",
            "code": "\n\n\nvoid adjustMotorPWM_0800426c(undefined4 motor1,undefined4 motor2,undefined4 motor3,undefined4 motor4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint value1;\n  uint value2;\n  uint value3;\n  uint value4;\n  \n  result1 = __aeabi_fsub();\n  result2 = __addsf3(motor1,motor2);\n  result3 = __aeabi_fsub(result1,motor3);\n  result3 = __addsf3(result3,motor4);\n  __aeabi_fsub(result3,0x447a0000);\n  value1 = __aeabi_f2iz();\n  result3 = __aeabi_fsub(result2,motor3);\n  result3 = __aeabi_fsub(result3,motor4);\n  __aeabi_fsub(result3,0x447a0000);\n  value2 = __aeabi_f2iz();\n  result1 = __addsf3(result1,motor3);\n  result1 = __aeabi_fsub(result1,motor4);\n  __aeabi_fsub(result1,0x447a0000);\n  value3 = __aeabi_f2iz();\n  result1 = __addsf3(motor3,result2);\n  result1 = __addsf3(result1,motor4);\n  __aeabi_fsub(result1,0x447a0000);\n  value4 = __aeabi_f2iz();\n  if (999 < (int)value4) {\n    value4 = 1000;\n  }\n  if (999 < (int)value3) {\n    value3 = 1000;\n  }\n  if (999 < (int)value2) {\n    value2 = 1000;\n  }\n  if (999 < (int)value1) {\n    value1 = 1000;\n  }\n  DAT_200002a0 = value2 & ~((int)value2 >> 0x1f);\n  DAT_200002a4 = value1 & ~((int)value1 >> 0x1f);\n  DAT_2000029c = value3 & ~((int)value3 >> 0x1f);\n  DAT_20000298 = value4 & ~((int)value4 >> 0x1f);\n  Motor1_SetPWM();\n  Motor2_SetPWM(DAT_2000029c);\n  Motor3_SetPWM(DAT_200002a0);\n  Motor4_SetPWM(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "adjust_motor_pwm_0800426c",
                "param_1": "motor1",
                "param_2": "motor2",
                "param_3": "motor3",
                "param_4": "motor4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "value1",
                "uVar5": "value2",
                "uVar6": "value3",
                "uVar7": "value4"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "__addsf3",
                "__aeabi_f2iz",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "print_and_checksum_08004300",
            "code": "\nvoid printAndChecksum_08004300(uint checksumSeed,byte *data,uint dataSize)\n\n{\n  uint checksum;\n  byte *currentByte;\n  \n  serialPrint(&DAT_0800732e);\n  serialWrite(dataSize & 0xff);\n  checksum = dataSize & 0xff ^ checksumSeed;\n  serialWrite(checksumSeed);\n  for (currentByte = data; (int)currentByte - (int)data < (int)dataSize; currentByte = currentByte + 1) {\n    serialWrite(*currentByte);\n    checksum = checksum ^ *currentByte;\n  }\n  serialWrite(checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "print_and_checksum_08004300",
                "param_1": "checksumSeed",
                "param_2": "data",
                "param_3": "dataSize",
                "uVar1": "checksum",
                "pbVar2": "currentByte"
            },
            "calling": [
                "MSP_SendPID",
                "MSP_SendMotor",
                "MSP_SendAltitude",
                "MSP_SendRawIMU",
                "MSP_SendAttitude",
                "MSP_SendIdent",
                "MSP_SendStatus"
            ],
            "called": [
                "serialWrite",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_frame_08004348",
            "code": "\n\n\nvoid initializeFrame_08004348(undefined4 arg1,uint frameData,undefined4 arg3)\n\n{\n  undefined4 frameAddress;\n  uint maskedData;\n  undefined4 stackParam;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  frameAddress = 0x40003e9;\n  maskedData = frameData & 0xff000000;\n  stackParam = arg3;\n  MSP_SendFrame(100,&frameAddress,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_frame_08004348",
                "param_1": "arg1",
                "param_2": "frameData",
                "param_3": "arg3",
                "local_10": "frameAddress",
                "local_c": "maskedData",
                "uStack_8": "stackParam"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "send_frame_to_msp_08004384",
            "code": "\n\n\nvoid sendFrameToMSP_08004384(undefined4 frameData,undefined4 param2,undefined4 param3,uint flags)\n\n{\n  undefined4 dataBuffer;\n  undefined4 constant;\n  uint maskedFlags;\n  \n  _DAT_200013bd = 0x2a0007;\n  dataBuffer = _DAT_200013b9;\n  constant = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedFlags = flags & 0xff000000;\n  MSP_SendFrame(0x65,&dataBuffer,0xb,0,frameData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "send_frame_to_msp_08004384",
                "param_1": "frameData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "flags",
                "local_14": "dataBuffer",
                "uStack_10": "constant",
                "local_c": "maskedFlags"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "send_local_data_080043bc",
            "code": "\nvoid sendLocalData_080043bc(void)\n\n{\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  undefined4 *ptrLocalArray;\n  undefined4 *ptrDataArray;\n  undefined4 dataArray [2];\n  undefined2 localArray [6];\n  \n  ptrDataArray = (undefined4 *)&DAT_2000142a;\n  ptrLocalArray = dataArray;\n  do {\n    tempValue1 = *ptrDataArray;\n    tempValue2 = ptrDataArray[1];\n    ptrDataArray = ptrDataArray + 2;\n    *ptrLocalArray = tempValue1;\n    ptrLocalArray[1] = tempValue2;\n    ptrLocalArray = ptrLocalArray + 2;\n  } while (ptrDataArray != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)ptrLocalArray = DAT_2000143a;\n  MSP_SendFrame(0x66,dataArray,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "send_local_data_080043bc",
                "puVar4": "ptrDataArray",
                "puVar3": "ptrLocalArray",
                "local_24": "dataArray",
                "local_1c": "localArray",
                "uVar1": "tempValue1",
                "uVar2": "tempValue2"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "send_frame_to_msp_080043f0",
            "code": "\n\n\nvoid sendFrameToMSP_080043f0(undefined4 deviceId,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 dataArray [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  dataArray[0] = param3;\n  MSP_SendFrame(0x68,&data1,8,dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "send_frame_to_msp_080043f0",
                "param_1": "deviceId",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "dataArray"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "send_frame_with_data_08004410",
            "code": "\nvoid sendFrameWithData_08004410(undefined4 unused,undefined4 frameData,undefined4 frameSize)\n\n{\n  undefined4 dataPtr;\n  undefined4 combinedData;\n  undefined4 framePtr;\n  \n  dataPtr = DAT_20001395;\n  combinedData = CONCAT22((short)((uint)frameData >> 0x10),DAT_20001399);\n  framePtr = frameSize;\n  MSP_SendFrame(0x6c,&dataPtr,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "send_frame_with_data_08004410",
                "param_1": "unused",
                "param_2": "frameData",
                "param_3": "frameSize",
                "local_10": "dataPtr",
                "local_c": "combinedData",
                "uStack_8": "framePtr"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "send_frame_to_msp_08004434",
            "code": "\nvoid sendFrameToMSP_08004434(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 mspAddr;\n  undefined4 mspData;\n  undefined4 frameType;\n  \n  mspAddr = DAT_200014ab;\n  mspData = CONCAT22((short)((uint)arg2 >> 0x10),DAT_200014af);\n  frameType = arg3;\n  MSP_SendFrame(0x6d,&mspAddr,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "send_frame_to_msp_08004434",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "mspAddr",
                "local_c": "mspData",
                "uStack_8": "frameType"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "send_modified_frame_08004458",
            "code": "\nvoid sendModifiedFrame_08004458(void)\n\n{\n  undefined4 *destinationPtr;\n  undefined4 *sourcePtr;\n  undefined4 tempValue;\n  undefined4 *currentDestinationPtr;\n  undefined4 *currentSourcePtr;\n  undefined4 modifiedData [3];\n  undefined2 extraData [10];\n  \n  destinationPtr = modifiedData;\n  sourcePtr = &DAT_2000139b;\n  do {\n    currentSourcePtr = sourcePtr;\n    currentDestinationPtr = destinationPtr;\n    tempValue = currentSourcePtr[1];\n    *currentDestinationPtr = *currentSourcePtr;\n    currentDestinationPtr[1] = tempValue;\n    destinationPtr = currentDestinationPtr + 2;\n    sourcePtr = currentSourcePtr + 2;\n  } while (currentSourcePtr + 2 != (undefined4 *)0x200013b3);\n  currentDestinationPtr[2] = uRam200013b3;\n  *(undefined2 *)(currentDestinationPtr + 3) = *(undefined2 *)(currentSourcePtr + 3);\n  MSP_SendFrame(0x70,modifiedData,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "send_modified_frame_08004458",
                "puVar1": "destinationPtr",
                "puVar2": "sourcePtr",
                "uVar3": "tempValue",
                "puVar4": "currentDestinationPtr",
                "puVar5": "currentSourcePtr",
                "local_30": "modifiedData",
                "local_24": "extraData"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "error_handling_08004490",
            "code": "\nvoid errorHandling_08004490(undefined4 errorCode,undefined4 errorLine)\n\n{\n  togglePinWrite(0x40011000,0x4000,1);\n  togglePinWrite(0x40011000,0x8000,0);\n  togglePinWrite(0x40011000,0x2000,0);\n  do {\n    togglePin(0x40011000,0x4000);\n    togglePin(0x40011000,0x8000);\n    togglePin(0x40011000,0x2000);\n    printError(\"Error with \");\n    printError(errorCode);\n    printError(\" at line: \");\n    printInteger(errorLine);\n    writeLine(10);\n    delayMilliseconds(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "error_handling_08004490",
                "param_1": "errorCode",
                "param_2": "errorLine",
                "HAL_GPIO_WritePin": "togglePinWrite",
                "HAL_GPIO_TogglePin": "togglePin",
                "serialPrint": "printError",
                "serialInt": "printInteger",
                "serialWrite": "writeLine",
                "delay_ms": "delayMilliseconds"
            },
            "calling": [
                "Peripherals_Init",
                "I2C_WriteByte",
                "SystemClock_Config",
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "serialInt",
                "serialWrite",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "HAL_GPIO_TogglePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_clock_08004514",
            "code": "\nvoid initializeClock_08004514(void)\n\n{\n  int result;\n  uint hclkFrequency;\n  undefined4 configIndex;\n  int clockConfig;\n  undefined4 flashLatency;\n  int clockSource;\n  int errorHandlerArg1;\n  undefined4 sysclkSource;\n  int sysclkConfig;\n  undefined4 rccConfig [4];\n  undefined4 oscillatorType;\n  undefined4 oscillatorConfig;\n  undefined4 systickSource;\n  undefined4 systickPriority;\n  undefined4 syscfgMemory;\n  \n  oscillatorType = 1;\n  oscillatorConfig = 0x10;\n  clockConfig = 2;\n  systickPriority = 0;\n  rccConfig[0] = 2;\n  systickSource = 2;\n  syscfgMemory = 0x380000;\n  result = HAL_RCC_OscConfig(rccConfig);\n  if (result == 0) goto LAB_08004540;\n  configIndex = 0x3c;\n  while( true ) {\n    result = _Error_Handler(\"../Src/peripherals.c\",configIndex);\nLAB_08004540:\n    flashLatency = 0xf;\n    sysclkSource = 0x400;\n    clockSource = clockConfig;\n    errorHandlerArg1 = result;\n    sysclkConfig = result;\n    clockConfig = HAL_RCC_ClockConfig(&flashLatency,clockConfig);\n    if (clockConfig == 0) break;\n    configIndex = 0x49;\n  }\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFrequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_clock_08004514",
                "iVar1": "result",
                "uVar2": "hclkFrequency",
                "uVar3": "configIndex",
                "iVar4": "clockConfig",
                "local_44": "flashLatency",
                "local_40": "clockSource",
                "local_3c": "errorHandlerArg1",
                "local_38": "sysclkSource",
                "local_34": "sysclkConfig",
                "local_30": "rccConfig",
                "local_20": "oscillatorType",
                "local_1c": "oscillatorConfig",
                "local_14": "systickSource",
                "local_10": "systickPriority",
                "local_c": "syscfgMemory"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripherals_0800458c",
            "code": "\n\n\nvoid initializePeripherals_0800458c(void)\n\n{\n  int result;\n  undefined4 errorCode;\n  int value;\n  int channelVar1;\n  int channelVar2;\n  int channelVar3;\n  int channelVar4;\n  int channelVar5;\n  int channelVar6;\n  int channelVar7;\n  int channelVar8;\n  int gpioInitVar;\n  int gpioInitVar2;\n  int gpioInitVar3;\n  int gpioInitVar4;\n  int breakDeadTimeVar;\n  undefined4 breakDeadTime;\n  int generalVar;\n  \n  initializeHardwareAbstractionLayer();\n  configureSystemClock();\n  value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  writeToGPIO(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  writeToGPIO(0x40010800,0x20,0);\n  gpioInitVar = 0xe000;\n  gpioInitVar2 = 1;\n  gpioInitVar4 = 2;\n  initializeGPIO(0x40011000,&gpioInitVar);\n  gpioInitVar = 0x20;\n  gpioInitVar2 = 1;\n  gpioInitVar4 = 2;\n  initializeGPIO(0x40010800,&gpioInitVar);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = initializeI2C();\n  if (result == 0) goto LAB_0800463a;\n  errorCode = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = handleError(\"../Src/peripherals.c\",errorCode);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = initializeUART(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  errorCode = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = initializeTIMPWM(&DAT_200015bc);\n                                if (result == 0) break;\n                                errorCode = 0x88;\n                              }\n                              channelVar1 = result;\n                              channelVar2 = result;\n                              result = configSync(&DAT_200015bc,&channelVar1)\n                              ;\n                              if (result == 0) break;\n                              errorCode = 0x8f;\n                            }\n                            channelVar3 = 0x60;\n                            channelVar4 = result;\n                            channelVar5 = result;\n                            channelVar6 = result;\n                            channelVar7 = result;\n                            channelVar8 = result;\n                            result = HAL_TIM_PWM_ConfigChannel(&DAT_200015bc,&channelVar3,0xc);\n                            if (result == 0) break;\n                            errorCode = 0x9a;\n                          }\n                          breakDeadTime = 0x2000;\n                          gpioInitVar = result;\n                          gpioInitVar2 = result;\n                          gpioInitVar3 = result;\n                          gpioInitVar4 = result;\n                          breakDeadTimeVar = result;\n                          generalVar = result;\n                          result = HAL_TIMEx_ConfigBreakDeadTime(&DAT_200015bc,&gpioInitVar);\n                          if (result == 0) break;\n                          errorCode = 0xa6;\n                        }\n                        postInitTIM(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = initializeTIMPWM(&DAT_200015f8);\n                        if (result == 0) break;\n                        errorCode = 0xc3;\n                      }\n                      channelVar3 = result;\n                      channelVar4 = result;\n                      result = configSync(&DAT_200015f8,&channelVar3);\n                      if (result == 0) break;\n                      errorCode = 0xca;\n                    }\n                    gpioInitVar = 0x60;\n                    gpioInitVar2 = result;\n                    gpioInitVar3 = result;\n                    breakDeadTimeVar = result;\n                    result = HAL_TIM_PWM_ConfigChannel(&DAT_200015f8,&gpioInitVar,4);\n                    if (result == 0) break;\n                    errorCode = 0xd3;\n                  }\n                  postInitTIM(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = initializeTIMPWM();\n                  if (result == 0) break;\n                  errorCode = 0xf0;\n                }\n                channelVar3 = 0;\n                channelVar4 = 0;\n                result = configSync(&DAT_20001540,&channelVar3);\n                if (result == 0) break;\n                errorCode = 0xf7;\n              }\n              gpioInitVar = 0x60;\n              gpioInitVar2 = result;\n              gpioInitVar3 = result;\n              breakDeadTimeVar = result;\n              result = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&gpioInitVar,8);\n              if (result == 0) break;\n              errorCode = 0x100;\n            }\n            value = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&gpioInitVar,0xc);\n            if (value == 0) break;\n            errorCode = 0x105;\n          }\n          postInitTIM(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = value;\n          DAT_200014d8 = value;\n          result = initializeTIMPWM(&DAT_200014c8);\n          if (result == 0) break;\n          errorCode = 0x122;\n        }\n        channelVar3 = result;\n        channelVar4 = result;\n        result = configSync(&DAT_200014c8,&channelVar3);\n        if (result == 0) break;\n        errorCode = 0x129;\n      }\n      gpioInitVar = 0x60;\n      gpioInitVar2 = result;\n      gpioInitVar3 = result;\n      breakDeadTimeVar = result;\n      result = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&gpioInitVar,8);\n      if (result == 0) break;\n      errorCode = 0x132;\n    }\n    result = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&gpioInitVar,0xc);\n    if (result == 0) break;\n    errorCode = 0x137;\n  }\n  postInitTIM(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "iVar1": "result",
                "uVar2": "errorCode",
                "iVar3": "value",
                "local_58": "channelVar1",
                "local_54": "channelVar2",
                "local_50": "channelVar3",
                "local_4c": "channelVar4",
                "local_48": "channelVar5",
                "local_40": "channelVar6",
                "local_3c": "channelVar7",
                "local_38": "channelVar8",
                "local_34": "gpioInitVar",
                "local_30": "gpioInitVar2",
                "local_2c": "gpioInitVar3",
                "local_28": "gpioInitVar4",
                "local_24": "breakDeadTimeVar",
                "local_20": "breakDeadTime",
                "local_1c": "generalVar",
                "HAL_Init": "initializeHardwareAbstractionLayer",
                "SystemClock_Config": "configureSystemClock",
                "HAL_GPIO_WritePin": "writeToGPIO",
                "HAL_GPIO_Init": "initializeGPIO",
                "HAL_I2C_Init": "initializeI2C",
                "_Error_Handler": "handleError",
                "HAL_UART_Init": "initializeUART",
                "HAL_TIM_PWM_Init": "initializeTIMPWM",
                "HAL_TIMEx_MasterConfigSynchronization": "configSync",
                "HAL_TIM_MspPostInit": "postInitTIM"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_I2C_Init",
                "HAL_TIM_PWM_Init",
                "HAL_UART_Init",
                "SystemClock_Config",
                "HAL_TIM_MspPostInit",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "_Error_Handler",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_GPIO_WritePin",
                "HAL_Init",
                "HAL_GPIO_Init",
                "HAL_TIMEx_MasterConfigSynchronization"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_values_0800483c",
            "code": "\nvoid calculateValues_0800483c(int *inputArray)\n\n{\n  undefined4 sumResult;\n  undefined4 multiplicationResult;\n  int tempVar1;\n  int tempVar2;\n  int tempVar3;\n  \n  tempVar2 = inputArray[0xc];\n  sumResult = __addsf3(inputArray[7],inputArray[9]);\n  tempVar2 = __aeabi_fsub(sumResult,tempVar2);\n  inputArray[10] = tempVar2;\n  if (*inputArray == 3) {\n    tempVar2 = __aeabi_fcmpgt(inputArray[10],0);\n    if (tempVar2 == 0) {\n      tempVar2 = __aeabi_fcmplt(inputArray[10],0xc3340000);\n    }\n    else {\n      tempVar2 = __aeabi_fcmpgt(inputArray[10],0x43340000);\n    }\n    if (tempVar2 != 0) {\n      tempVar3 = inputArray[10];\n      sumResult = __aeabi_fmul(inputArray[10],0x43b40000);\n      tempVar2 = __aeabi_fcmpgt(inputArray[10],0);\n      tempVar1 = inputArray[10];\n      if (tempVar2 == 0) {\n        tempVar1 = tempVar1 + -0x80000000;\n      }\n      sumResult = __aeabi_fdiv(sumResult,tempVar1);\n      tempVar2 = __aeabi_fsub(tempVar3,sumResult);\n      inputArray[10] = tempVar2;\n    }\n  }\n  tempVar3 = inputArray[2];\n  tempVar1 = inputArray[3];\n  tempVar2 = __aeabi_fmul(inputArray[1],inputArray[10]);\n  inputArray[0xe] = tempVar2;\n  tempVar2 = __addsf3(inputArray[10],inputArray[0xf]);\n  inputArray[0xf] = tempVar2;\n  tempVar2 = __aeabi_fcmplt(inputArray[0xf],0xc3fa0000);\n  if (tempVar2 == 0) {\n    tempVar2 = __aeabi_fcmpgt(inputArray[0xf],0x43fa0000);\n    if (tempVar2 == 0) {\n      tempVar2 = inputArray[0xf];\n    }\n    else {\n      tempVar2 = 0x43fa0000;\n    }\n  }\n  else {\n    tempVar2 = -0x3c060000;\n  }\n  inputArray[0xf] = tempVar2;\n  tempVar2 = __aeabi_fsub(inputArray[0xc],inputArray[0xd]);\n  inputArray[0x10] = tempVar2;\n  tempVar2 = inputArray[0xe];\n  sumResult = __aeabi_fmul(tempVar3,inputArray[0xf]);\n  sumResult = __addsf3(sumResult,tempVar2);\n  multiplicationResult = __aeabi_fmul(tempVar1,inputArray[0x10]);\n  tempVar2 = __aeabi_fsub(sumResult,multiplicationResult);\n  inputArray[0x12] = tempVar2;\n  sumResult = __floatsisf(inputArray[0x13]);\n  tempVar2 = __aeabi_fcmplt(inputArray[0x12],0xc3fa0000);\n  if (tempVar2 == 0) {\n    tempVar2 = __aeabi_fcmpgt(inputArray[0x12],0x43fa0000);\n    if (tempVar2 == 0) {\n      tempVar2 = inputArray[0x12];\n    }\n    else {\n      tempVar2 = 0x43fa0000;\n    }\n  }\n  else {\n    tempVar2 = -0x3c060000;\n  }\n  tempVar2 = __aeabi_fmul(tempVar2,sumResult);\n  inputArray[0x12] = tempVar2;\n  inputArray[0xd] = inputArray[0xc];\n  inputArray[0xb] = inputArray[10];\n  inputArray[0x15] = inputArray[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_values_0800483c",
                "param_1": "inputArray",
                "uVar1": "sumResult",
                "uVar2": "multiplicationResult",
                "iVar3": "tempVar1",
                "iVar4": "tempVar2",
                "iVar5": "tempVar3"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_filtered_altitude_08004a30",
            "code": "\nvoid updateFilteredAltitude_08004a30(void)\n\n{\n  undefined4 filteredAltitude;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      filteredAltitude = MS5611_GetFilteredAltitude();\n      DAT_20000068 = __aeabi_fmul(filteredAltitude,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      filteredAltitude = MS5611_GetFilteredAltitude();\n      DAT_2000007c = __aeabi_fmul(filteredAltitude,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_filtered_altitude_08004a30",
                "uVar1": "filteredAltitude"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "MS5611_GetFilteredAltitude",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "update_flight_data_08004a84",
            "code": "\nvoid updateFlightData_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = getPitchValue();\n  DAT_20000134 = getRollValue();\n  DAT_20000190 = getYawValue();\n  updateAltitudeController();\n  iVar1 = compareFloatGreaterThan(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = compareFloatLessThan(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = compareFloatGreaterThan(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = compareFloatGreaterThan(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = compareFloatLessThan(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = compareFloatGreaterThan(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      toggleLEDState(1,1);\n      computePID(&DAT_200000a8);\n      computePID(&DAT_20000104);\n      computePID(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        computePID(&DAT_2000004c);\n        addSinglePrecisionFloats(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        stopAllMotors();\n      }\n      else {\n        distributeMotorSpeed(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      multiplyFloats(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = convertFloatToUnsignedInt();\n      multiplyFloats(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = convertFloatToUnsignedInt();\n      return;\n    }\n  }\n  stopAllMotors();\n  toggleLEDState(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "update_flight_data_08004a84",
                "AHRS_GetPitch": "getPitchValue",
                "AHRS_GetRoll": "getRollValue",
                "AHRS_GetYaw": "getYawValue",
                "PID_UpdateAltitude": "updateAltitudeController",
                "__aeabi_fcmpgt": "compareFloatGreaterThan",
                "__aeabi_fcmplt": "compareFloatLessThan",
                "toggleLED": "toggleLEDState",
                "PID_Compute": "computePID",
                "__addsf3": "addSinglePrecisionFloats",
                "Motor_StopAll": "stopAllMotors",
                "Motor_DistributeSpeed": "distributeMotorSpeed",
                "__aeabi_fmul": "multiplyFloats",
                "__fixunssfsi": "convertFloatToUnsignedInt"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "Motor_StopAll",
                "PID_Compute",
                "__addsf3",
                "toggleLED",
                "__aeabi_fcmpgt",
                "__aeabi_fmul",
                "__fixunssfsi",
                "PID_UpdateAltitude",
                "AHRS_GetYaw",
                "__aeabi_fcmplt",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processData_08004c18(undefined input)\n\n{\n  int *ptr1;\n  int var1;\n  int var2;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      var1 = HAL_GetTick();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        var2 = HAL_GetTick();\n      } while ((uint)(var2 - var1) < 6);\nLAB_0800281c:\n      ptr1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr1[3] = ptr1[3] & 0xffffffdf;\n      ptr1[3] = ptr1[3] & 0xfffffeff;\n      ptr1[5] = ptr1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      var1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = HAL_GetTick();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      var1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = HAL_GetTick();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "iVar3": "var2",
                "puVar4": "ptr2"
            },
            "calling": [
                "MSP_SendFrame",
                "serialPrint",
                "_Error_Handler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "write_if_not_zero_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * write_if_not_zero_08004c30(int *input_ptr)\n\n{\n  int temp_var;\n  \n  if (*input_ptr != 0x40013800) {\n    return input_ptr;\n  }\n  CB_Write(&DAT_20000364,DAT_20001634);\n  temp_var = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(temp_var + 0x14) = *(uint *)(temp_var + 0x14) | 1;\n    *(uint *)(temp_var + 0xc) = *(uint *)(temp_var + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "write_if_not_zero_08004c30",
                "param_1": "input_ptr",
                "iVar1": "temp_var"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "CB_Write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "serialBegin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_serial_communication_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeSerialCommunication_08004c70(void)\n\n{\n  int tempVar;\n  \n  flushSerialData();\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_serial_communication_08004c70",
                "iVar1": "tempVar",
                "serialFlush": "flushSerialData"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "serialFlush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "print_string_08004c8c",
            "code": "\nvoid printString_08004c8c(undefined *str)\n\n{\n  uint strLength;\n  undefined *currentChar;\n  \n  currentChar = str;\n  while( true ) {\n    strLength = strlen(str);\n    if (strLength <= (uint)((int)currentChar - (int)str)) break;\n    serialWrite(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "print_string_08004c8c",
                "param_1": "str",
                "uVar1": "strLength",
                "puVar2": "currentChar"
            },
            "calling": [
                "serialInt",
                "MSP_SendFrame",
                "_Error_Handler"
            ],
            "called": [
                "serialWrite",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "print_formatted_integer_08004cac",
            "code": "\nvoid printFormattedInteger_08004cac(undefined4 value)\n\n{\n  siprintf(&DAT_20001636,&DAT_0800735e,value);\n  serialPrint(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "print_formatted_integer_08004cac",
                "param_1": "value"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "configure_interrupt_priorities_08004ccc",
            "code": "\n\n\nvoid configureInterruptPriorities_08004ccc(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  HAL_NVIC_SetPriorityGrouping(3,param2,_DAT_40021018,1,param1,1,param3);\n  HAL_NVIC_SetPriority(0xfffffff4,0);\n  HAL_NVIC_SetPriority(0xfffffff5,0);\n  HAL_NVIC_SetPriority(0xfffffff6,0);\n  HAL_NVIC_SetPriority(0xfffffffb,0);\n  HAL_NVIC_SetPriority(0xfffffffc,0);\n  HAL_NVIC_SetPriority(0xfffffffe,0);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "configure_interrupt_priorities_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "initialize_gpio_08004d48",
            "code": "\n\n\nvoid initializeGPIO_08004d48(int *gpioPtr,undefined4 param)\n\n{\n  undefined4 gpioConfig1;\n  undefined4 gpioConfig2;\n  \n  if (*gpioPtr == 0x40005400) {\n    gpioConfig1 = 0xc0;\n    gpioConfig2 = 0x12;\n    HAL_GPIO_Init(0x40010c00,&gpioConfig1,0x40005400,3,gpioPtr,param);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "initialize_gpio_08004d48",
                "param_1": "gpioPtr",
                "param_2": "param",
                "local_18": "gpioConfig1",
                "local_14": "gpioConfig2"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_status_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateStatusFlags_08004d8c(int *flagPtr)\n\n{\n  int flagValue;\n  \n  flagValue = *flagPtr;\n  if (flagValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (flagValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (flagValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (flagValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_status_flags_08004d8c",
                "param_1": "flagPtr",
                "iVar1": "flagValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_gpio_08004e14",
            "code": "\nvoid initializeGPIO_08004e14(int *gpioConfig,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpioBaseAddress;\n  int gpioIdentifier;\n  undefined4 gpioMode;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  gpioIdentifier = *gpioConfig;\n  if (gpioIdentifier == 0x40012c00) {\n    gpioMode = 0x800;\n  }\n  else {\n    if (gpioIdentifier != 0x40000000) {\n      if (gpioIdentifier == 0x40000400) {\n        gpioMode = 3;\n      }\n      else {\n        if (gpioIdentifier != 0x40000800) {\n          return;\n        }\n        gpioMode = 0x300;\n      }\n      gpioBaseAddress = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    gpioMode = 2;\n  }\n  gpioBaseAddress = 0x40010800;\nLAB_08004e2e:\n  localVar3 = 2;\n  localVar1 = 2;\n  localVar2 = param3;\n  HAL_GPIO_Init(gpioBaseAddress,&gpioMode);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_gpio_08004e14",
                "param_1": "gpioConfig",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpioBaseAddress",
                "iVar2": "gpioIdentifier",
                "local_18": "gpioMode",
                "local_14": "localVar1",
                "uStack_10": "localVar2",
                "local_c": "localVar3"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_gpio_08004e7c",
            "code": "\n\n\nvoid initializeGPIO_08004e7c(int *gpioPin)\n\n{\n  undefined4 gpioInitStruct;\n  undefined4 gpioInitStruct2;\n  undefined4 gpioInitStruct3;\n  undefined4 gpioInitStruct4;\n  \n  if (*gpioPin == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    gpioInitStruct = 0x200;\n    gpioInitStruct2 = 2;\n    gpioInitStruct4 = 3;\n    HAL_GPIO_Init(0x40010800,&gpioInitStruct);\n    gpioInitStruct = 0x400;\n    gpioInitStruct2 = 0;\n    gpioInitStruct3 = 0;\n    HAL_GPIO_Init(0x40010800,&gpioInitStruct);\n    HAL_NVIC_SetPriority(0x25,0,0);\n    HAL_NVIC_EnableIRQ(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_gpio_08004e7c",
                "param_1": "gpioPin",
                "local_18": "gpioInitStruct",
                "local_14": "gpioInitStruct2",
                "local_10": "gpioInitStruct3",
                "local_c": "gpioInitStruct4"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_hardware_08004f10",
            "code": "\n\n\nvoid initializeHardware_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_hardware_08004f10"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f5c": {
            "entrypoint": "0x08004f5c",
            "current_name": "FUN_08004f5c",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "FUN_08004f60",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f64": {
            "entrypoint": "0x08004f64",
            "current_name": "FUN_08004f64",
            "code": "\nvoid HAL_Delay(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "I2C_WriteByte",
                "MS5611_Init",
                "_Error_Handler",
                "Devices_Init"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f68": {
            "entrypoint": "0x08004f68",
            "current_name": "initialize_system_and_call_main_08004f68",
            "code": "\nvoid initializeSystemAndCallMain_08004f68(void)\n\n{\n  int index;\n  undefined4 *pointer;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_20000228; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8007448);\n  }\n  for (pointer = &DAT_20000228; pointer < &DAT_200016a0; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x8004f9a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f68": "initialize_system_and_call_main_08004f68",
                "iVar1": "index",
                "puVar2": "pointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_all_functions_08004fb4",
            "code": "\nvoid executeAllFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  _init();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_all_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_buffer_08004ffc",
            "code": "\nvoid initializeBuffer_08004ffc(undefined *buffer,undefined4 length,undefined4 unknownValue1,undefined4 unknownValue2)\n\n{\n  undefined *bufferPointer [2];\n  undefined4 maxLength;\n  undefined2 bufferSize;\n  undefined2 unknownShort1;\n  undefined *bufferStart;\n  undefined4 unknownValue3;\n  undefined4 unknownStack1;\n  undefined4 unknownStack2;\n  undefined4 unknownStack3;\n  \n  bufferSize = 0x208;\n  maxLength = 0x7fffffff;\n  unknownValue3 = 0x7fffffff;\n  unknownShort1 = 0xffff;\n  bufferPointer[0] = buffer;\n  bufferStart = buffer;\n  unknownStack1 = length;\n  unknownStack2 = unknownValue1;\n  unknownStack3 = unknownValue2;\n  _svfiprintf_r(DAT_200001c0,bufferPointer,length);\n  *bufferPointer[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_buffer_08004ffc",
                "param_1": "buffer",
                "param_2": "length",
                "param_3": "unknownValue1",
                "param_4": "unknownValue2",
                "local_78": "bufferPointer",
                "local_70": "maxLength",
                "local_6c": "bufferSize",
                "local_6a": "unknownShort1",
                "local_68": "bufferStart",
                "local_64": "unknownValue3",
                "uStack_c": "unknownStack1",
                "uStack_8": "unknownStack2",
                "uStack_4": "unknownStack3"
            },
            "calling": [
                "serialInt"
            ],
            "called": [
                "_svfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "copy_and_extend_array_08005044",
            "code": "\nundefined4 copyAndExtendArray_08005044(undefined4 *destinationArray,int *sourceArray,undefined4 sourceData,uint sourceLength)\n\n{\n  int dynamicAllocationResult;\n  uint newArrayLength;\n  uint currentArrayLength;\n  int initialOffset;\n  \n  currentArrayLength = sourceArray[2];\n  if ((currentArrayLength <= sourceLength) && ((*(ushort *)(sourceArray + 3) & 0x480) != 0)) {\n    initialOffset = *sourceArray - sourceArray[4];\n    currentArrayLength = (uint)(sourceArray[5] * 3) / 2;\n    newArrayLength = sourceLength + 1 + initialOffset;\n    if (currentArrayLength < newArrayLength) {\n      currentArrayLength = newArrayLength;\n    }\n    if ((int)((uint)*(ushort *)(sourceArray + 3) << 0x15) < 0) {\n      dynamicAllocationResult = _malloc_r(destinationArray,currentArrayLength);\n      if (dynamicAllocationResult == 0) {\nLAB_0800508a:\n        *destinationArray = 0xc;\n        *(ushort *)(sourceArray + 3) = *(ushort *)(sourceArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      memcpy(dynamicAllocationResult,sourceArray[4],initialOffset);\n      *(ushort *)(sourceArray + 3) = *(ushort *)(sourceArray + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      dynamicAllocationResult = _realloc_r(destinationArray,sourceArray[4],currentArrayLength);\n      if (dynamicAllocationResult == 0) {\n        _free_r(destinationArray,sourceArray[4]);\n        goto LAB_0800508a;\n      }\n    }\n    sourceArray[4] = dynamicAllocationResult;\n    *sourceArray = dynamicAllocationResult + initialOffset;\n    sourceArray[5] = currentArrayLength;\n    sourceArray[2] = currentArrayLength - initialOffset;\n    currentArrayLength = sourceLength;\n  }\n  if (sourceLength <= currentArrayLength) {\n    currentArrayLength = sourceLength;\n  }\n  memmove(*sourceArray,sourceData,currentArrayLength);\n  sourceArray[2] = sourceArray[2] - currentArrayLength;\n  *sourceArray = currentArrayLength + *sourceArray;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "copy_and_extend_array_08005044",
                "param_1": "destinationArray",
                "param_2": "sourceArray",
                "param_3": "sourceData",
                "param_4": "sourceLength",
                "iVar1": "dynamicAllocationResult",
                "uVar2": "newArrayLength",
                "uVar3": "currentArrayLength",
                "iVar4": "initialOffset"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "memmove",
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "parse_format_string_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint parseFormatString_080050fc(undefined4 *alloc_ptr,int *format_info,byte *format_string,int *buffer)\n\n{\n  int result;\n  int ssputs_result;\n  int *temp_ptr;\n  bool digit_found;\n  byte *current_char;\n  byte *format_start;\n  int printf_result;\n  int *arg_info_array;\n  uint flags;\n  int precision;\n  undefined4 field_width;\n  int width_arg_index;\n  int bytes_written;\n  byte conversion_specifier;\n  undefined space_padding_char;\n  undefined zero_padding_char;\n  undefined plus_padding_char;\n  undefined4 conversion_result;\n  \n  arg_info_array = buffer;\n  if (((int)((uint)*(ushort *)(format_info + 3) << 0x18) < 0) && (format_info[4] == 0)) {\n    result = _malloc_r(alloc_ptr,0x40);\n    *format_info = result;\n    format_info[4] = result;\n    if (result == 0) {\n      *alloc_ptr = 0xc;\n      return -1;\n    }\n    format_info[5] = 0x40;\n  }\n  bytes_written = 0;\n  space_padding_char = 0x20;\n  zero_padding_char = 0x30;\n  current_char = format_string;\nLAB_08005146:\n  format_start = current_char;\n  if (*format_start != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = format_start + 1;\n  if (*format_start != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)format_start - (int)format_string;\n  if (result != 0) {\n    ssputs_result = __ssputs_r(alloc_ptr,format_info,format_string,result);\n    if (ssputs_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(format_info + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return bytes_written;\n    }\n    bytes_written = bytes_written + result;\n  }\n  if (*format_start == 0) goto LAB_080052ac;\n  flags = 0;\n  width_arg_index = 0;\n  precision = -1;\n  field_width = 0;\n  plus_padding_char = 0;\n  conversion_result = 0;\n  current_char = format_start + 1;\n  while( true ) {\n    result = memchr(&DAT_08007379,*current_char);\n    format_string = current_char + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    current_char = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    plus_padding_char = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    plus_padding_char = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    temp_ptr = arg_info_array + 1;\n    result = *arg_info_array;\n    arg_info_array = temp_ptr;\n    if (result < 0) {\n      width_arg_index = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    digit_found = false;\n    result = width_arg_index;\n    format_string = current_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      result = result * 10 + (*format_string - 0x30);\n      digit_found = true;\n      format_string = format_string + 1;\n    }\n    if (!digit_found) goto LAB_080051fc;\n  }\n  width_arg_index = result;\nLAB_080051fc:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      temp_ptr = arg_info_array + 1;\n      precision = *arg_info_array;\n      arg_info_array = temp_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      digit_found = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        result = result * 10 + (*format_string - 0x30);\n        digit_found = true;\n      }\n      if (digit_found) {\n        precision = result;\n      }\n    }\n  }\n  result = memchr(&DAT_0800737f,*format_string,3);\n  if (result != 0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  conversion_specifier = *format_string;\n  format_string = format_string + 1;\n  result = memchr(\"efgEFG\",conversion_specifier,6);\n  if (result == 0) {\n    printf_result = _printf_i(alloc_ptr,&flags,format_info,0x8005045,&arg_info_array);\n    if (printf_result == -1) goto LAB_080052ac;\n  }\n  else {\n    arg_info_array = (int *)(((int)arg_info_array + 7U & 0xfffffff8) + 8);\n  }\n  bytes_written = bytes_written + printf_result;\n  current_char = format_string;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "parse_format_string_080050fc",
                "param_1": "alloc_ptr",
                "param_2": "format_info",
                "param_3": "format_string",
                "param_4": "buffer",
                "iVar1": "result",
                "iVar2": "ssputs_result",
                "piVar3": "temp_ptr",
                "bVar4": "digit_found",
                "pbVar5": "current_char",
                "pbVar6": "format_start",
                "unaff_r9": "printf_result",
                "local_8c": "arg_info_array",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "field_width",
                "local_7c": "width_arg_index",
                "local_74": "bytes_written",
                "local_70": "conversion_specifier",
                "local_6f": "space_padding_char",
                "local_6e": "zero_padding_char",
                "local_45": "plus_padding_char",
                "local_30": "conversion_result"
            },
            "calling": [
                "siprintf"
            ],
            "called": [
                "memchr",
                "_malloc_r",
                "__ssputs_r",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input,uint *array,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint increment;\n  bool condition;\n  \n  max_value = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    max_value = array[2];\n  }\n  *output = max_value;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *output = max_value + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (index = 0; index < (int)(array[3] - *output); index = index + 1) {\n      result = (*callback)(input,param,(int)array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)array + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  increment = max_value;\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + max_value + 0x43) = 0x30;\n    increment = max_value + 2;\n    *(undefined *)((int)array + max_value + 0x44) = *(undefined *)((int)array + 0x45);\n  }\n  index = (*callback)(input,param,(int)array + 0x43,increment);\n  if (index != -1) {\n    max_value = array[3];\n    condition = (*array & 6) != 4;\n    if (condition) {\n      max_value = 0;\n    }\n    increment = 0;\n    if (!condition) {\n      max_value = max_value - *output;\n    }\n    if (!condition) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)array[4] < (int)array[2]) {\n      max_value = max_value + (array[2] - array[4]);\n    }\n    while( true ) {\n      if (max_value == increment) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)array + 0x1a,1);\n      if (index == -1) break;\n      increment = increment + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "array",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_value",
                "uVar4": "increment",
                "bVar5": "condition"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "print_formatted_string_080053d4",
            "code": "\nuint print_formatted_string_080053d4(undefined4 format_string,uint *flags,undefined4 width,code *output_function,uint **args)\n\n{\n  byte flag_char;\n  int result;\n  uint *ptr;\n  int output_result;\n  char *digits;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint num_digits;\n  uint arg_size;\n  char *ptr_to_arg;\n  char *format_char;\n  uint local_temps [2];\n  \n  flag_char = *(byte *)(flags + 6);\n  format_char = (char *)((int)flags + 0x43);\n  if (flag_char != 0x6e) {\n    if (flag_char < 0x6f) {\n      if (flag_char != 99) {\n        if (flag_char < 100) {\n          if (flag_char == 0) goto LAB_0800558e;\n          if (flag_char != 0x58) goto LAB_08005404;\n          *(undefined *)((int)flags + 0x45) = 0x58;\n          digits = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *flags;\n          ptr = *args;\n          *args = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            num_digits = (uint)*(ushort *)ptr;\n          }\n          else {\n            num_digits = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *flags = base | 0x20;\n          }\n          if (num_digits == 0) {\n            *flags = *flags & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)flags + 0x43) = 0;\n        }\n        else {\n          if ((flag_char != 100) && (flag_char != 0x69)) goto LAB_08005404;\n          num_digits = *flags;\n          ptr = *args;\n          if ((num_digits & 0x80) == 0) {\n            *args = ptr + 1;\n            if ((num_digits & 0x40) == 0) goto LAB_08005424;\n            num_digits = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *args = ptr + 1;\nLAB_08005424:\n            num_digits = *ptr;\n          }\n          if ((int)num_digits < 0) {\n            num_digits = -num_digits;\n            *(undefined *)((int)flags + 0x43) = 0x2d;\n          }\n          digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        arg_size = flags[1];\n        flags[2] = arg_size;\n        ptr_to_arg = format_char;\n        if ((int)arg_size < 0) {\n          if (num_digits != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)flags + 0x42) = *digits;\n          ptr_to_arg = (char *)((int)flags + 0x42);\n        }\n        else {\n          *flags = *flags & 0xfffffffb;\n          if (num_digits == 0) {\n            if (arg_size != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              arg_size = num_digits / base;\n              ptr_to_arg = ptr_to_arg + -1;\n              *ptr_to_arg = digits[num_digits - base * arg_size];\n              num_digits = arg_size;\n            } while (arg_size != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*flags << 0x1f) < 0)) && ((int)flags[1] <= (int)flags[4]))\n        {\n          ptr_to_arg[-1] = '0';\n          ptr_to_arg = ptr_to_arg + -1;\n        }\n        flags[4] = (int)format_char - (int)ptr_to_arg;\n        format_char = ptr_to_arg;\n        goto LAB_080054fa;\n      }\n      ptr = *args;\n      *args = ptr + 1;\n      *(char *)((int)flags + 0x42) = (char)*ptr;\nLAB_08005464:\n      format_char = (char *)((int)flags + 0x42);\n      num_digits = 1;\n    }\n    else {\n      if (flag_char != 0x73) {\n        if (flag_char < 0x74) {\n          if (flag_char == 0x6f) {\nLAB_0800548a:\n            num_digits = *flags;\n            ptr = *args;\n            if ((num_digits & 0x80) == 0) {\n              *args = ptr + 1;\n              if ((num_digits & 0x40) == 0) goto LAB_08005498;\n              num_digits = (uint)*(ushort *)ptr;\n            }\n            else {\n              *args = ptr + 1;\nLAB_08005498:\n              num_digits = *ptr;\n            }\n            if (flag_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            digits = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (flag_char == 0x70) {\n            *flags = *flags | 0x20;\nLAB_0800544a:\n            digits = \"0123456789abcdef\";\n            *(undefined *)((int)flags + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (flag_char == 0x75) goto LAB_0800548a;\n          if (flag_char == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)flags + 0x42) = flag_char;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*args;\n      *args = (uint *)(ppcVar8 + 1);\n      format_char = *ppcVar8;\n      result = memchr(format_char,0,flags[1]);\n      if (result != 0) {\n        flags[1] = result - (int)format_char;\n      }\n      num_digits = flags[1];\n    }\n    flags[4] = num_digits;\n    *(undefined *)((int)flags + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  num_digits = *flags;\n  ppuVar7 = (uint **)*args;\n  base = flags[5];\n  if ((num_digits & 0x80) == 0) {\n    *args = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((num_digits & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *args = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = base;\n  }\nLAB_0800558e:\n  flags[4] = 0;\nLAB_080054fa:\n  result = _printf_common(format_string,flags,local_temps,width,output_function);\n  if ((result == -1) || (result = (*output_function)(format_string,width,format_char,flags[4]), result == -1)) {\nLAB_0800550e:\n    num_digits = 0xffffffff;\n  }\n  else {\n    if ((int)(*flags << 0x1e) < 0) {\n      for (result = 0; result < (int)(flags[3] - local_temps[0]); result = result + 1) {\n        output_result = (*output_function)(format_string,width,(int)flags + 0x19,1);\n        if (output_result == -1) goto LAB_0800550e;\n      }\n    }\n    num_digits = flags[3];\n    if ((int)flags[3] < (int)local_temps[0]) {\n      num_digits = local_temps[0];\n    }\n  }\n  return num_digits;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "print_formatted_string_080053d4",
                "param_1": "format_string",
                "param_2": "flags",
                "param_3": "width",
                "param_4": "output_function",
                "param_5": "args",
                "bVar1": "flag_char",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "output_result",
                "pcVar5": "digits",
                "uVar6": "base",
                "uVar9": "num_digits",
                "uVar10": "arg_size",
                "pcVar11": "ptr_to_arg",
                "pcVar12": "format_char",
                "local_24": "local_temps"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *ptr;\n  char *current_ptr;\n  \n  ptr = string;\n  do {\n    current_ptr = ptr;\n    if (current_ptr == string + length) {\n      return (char *)0x0;\n    }\n    ptr = current_ptr + 1;\n  } while (*current_ptr != character);\n  return current_ptr;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "ptr",
                "pcVar2": "current_ptr"
            },
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copy_data_08005630(int dest_ptr,undefined *src_ptr,int num_bytes)\n\n{\n  undefined *dest_end_ptr;\n  undefined *dest_curr_ptr;\n  \n  dest_curr_ptr = (undefined *)(dest_ptr + -1);\n  dest_end_ptr = src_ptr + num_bytes;\n  for (; src_ptr != dest_end_ptr; src_ptr = src_ptr + 1) {\n    dest_curr_ptr = dest_curr_ptr + 1;\n    *dest_curr_ptr = *src_ptr;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "dest_ptr",
                "param_2": "src_ptr",
                "param_3": "num_bytes",
                "puVar1": "dest_end_ptr",
                "puVar2": "dest_curr_ptr"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_08005646",
            "code": "\nvoid copyAndReverse_08005646(undefined *dest,undefined *src,int count)\n\n{\n  undefined *end;\n  \n  end = src + count;\n  if ((src < dest) && (dest < end)) {\n    dest = dest + count;\n    count = count - (int)end;\n    while (end + count != (undefined *)0x0) {\n      end = end + -1;\n      dest = dest + -1;\n      *dest = *end;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != end; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "count",
                "puVar1": "end"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "allocate_memory_0800567c",
            "code": "\nvoid allocate_memory_0800567c(undefined4 *result_ptr,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **extra_out_result;\n  int **current_ptr;\n  int **next_ptr;\n  int *temp_ptr;\n  int **prev_ptr;\n  int **new_ptr;\n  \n  if (size == 0) {\n    return;\n  }\n  new_ptr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_ptr = (int **)((int)new_ptr + *(int *)(size + -4));\n  }\n  lock_memory_allocation();\n  next_ptr = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    new_ptr[1] = (int *)0x0;\n    current_ptr = extra_out_result;\n    DAT_200002ac = new_ptr;\n  }\n  else {\n    next_ptr = DAT_200002ac;\n    if (new_ptr < DAT_200002ac) {\n      current_ptr = (int **)*new_ptr;\n      next_ptr = (int **)((int)new_ptr + (int)current_ptr);\n      if (DAT_200002ac == next_ptr) {\n        temp_ptr = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        next_ptr = (int **)((int)temp_ptr + (int)current_ptr);\n        *new_ptr = (int *)next_ptr;\n      }\n      new_ptr[1] = (int *)DAT_200002ac;\n      DAT_200002ac = new_ptr;\n    }\n    else {\n      do {\n        prev_ptr = next_ptr;\n        next_ptr = (int **)prev_ptr[1];\n        if (next_ptr == (int **)0x0) break;\n      } while (next_ptr <= new_ptr);\n      current_ptr = (int **)*prev_ptr;\n      if ((int **)((int)prev_ptr + (int)current_ptr) == new_ptr) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_ptr);\n        *prev_ptr = (int *)current_ptr;\n        if (next_ptr == (int **)((int)prev_ptr + (int)current_ptr)) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp_ptr);\n          *prev_ptr = (int *)current_ptr;\n          prev_ptr[1] = (int *)next_ptr;\n        }\n      }\n      else if (new_ptr < (int **)((int)prev_ptr + (int)current_ptr)) {\n        *result_ptr = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_ptr + (int)*new_ptr);\n        if (next_ptr == current_ptr) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_ptr = (int **)((int)temp_ptr + (int)*new_ptr);\n          *new_ptr = (int *)current_ptr;\n        }\n        new_ptr[1] = (int *)next_ptr;\n        prev_ptr[1] = (int *)new_ptr;\n      }\n    }\n  }\n  __malloc_unlock(result_ptr,current_ptr,next_ptr,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "allocate_memory_0800567c",
                "param_1": "result_ptr",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "extra_out_result",
                "ppiVar1": "current_ptr",
                "ppiVar2": "next_ptr",
                "piVar3": "temp_ptr",
                "ppiVar4": "prev_ptr",
                "ppiVar5": "new_ptr",
                "__malloc_lock": "lock_memory_allocation"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *size,uint alignment)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint block_difference;\n  uint *new_block;\n  uint total_size;\n  \n  total_size = (alignment + 3 & 0xfffffffc) + 8;\n  if (total_size < 0xc) {\n    total_size = 0xc;\n  }\n  if (((int)total_size < 0) || (total_size < alignment)) {\n    *size = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = DAT_200002ac;\n    new_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_difference = *previous_block - total_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_difference;\n          *(uint *)((int)previous_block + block_difference) = total_size;\n          new_block = (uint *)((int)previous_block + block_difference);\n        }\n        goto LAB_08005778;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = _sbrk_r(size);\n    }\n    current_block = (uint *)_sbrk_r(size,total_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_space = _sbrk_r(size,(int)new_block - (int)current_block), remaining_space != -1)))) {\n      *new_block = total_size;\nLAB_08005778:\n      __malloc_unlock(size);\n      total_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_space = total_size - (int)(new_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_block + remaining_space) = -remaining_space;\n        return total_size;\n      }\n      return total_size;\n    }\n    *size = 0xc;\n    __malloc_unlock(size);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "size",
                "param_2": "alignment",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "block_difference",
                "puVar5": "new_block",
                "uVar6": "total_size"
            },
            "calling": [
                "_svfiprintf_r",
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_copy_memory_080057d0",
            "code": "\nint allocate_and_copy_memory_080057d0(undefined4 memory_context,int source_memory,uint source_size,undefined4 additional_param)\n\n{\n  int allocated_memory;\n  uint usable_memory;\n  \n  if (source_memory != 0) {\n    if (source_size == 0) {\n      _free_r();\n      allocated_memory = 0;\n    }\n    else {\n      usable_memory = _malloc_usable_size_r();\n      allocated_memory = source_memory;\n      if ((usable_memory < source_size) && (allocated_memory = _malloc_r(memory_context,source_size), allocated_memory != 0)) {\n        memcpy(allocated_memory,source_memory,source_size);\n        _free_r(memory_context,source_memory);\n      }\n    }\n    return allocated_memory;\n  }\n  allocated_memory = _malloc_r(memory_context,source_size,source_size,additional_param);\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_copy_memory_080057d0",
                "param_1": "memory_context",
                "param_2": "source_memory",
                "param_3": "source_size",
                "param_4": "additional_param",
                "iVar1": "allocated_memory",
                "uVar2": "usable_memory"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "allocate_memory_0800581c",
            "code": "\nvoid allocateMemory_0800581c(int *resultPtr,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_2000169c = 0;\n  allocationResult = _sbrk(size);\n  if ((allocationResult == -1) && (DAT_2000169c != 0)) {\n    *resultPtr = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "resultPtr",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 param,int array)\n\n{\n  int index;\n  \n  index = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    index = index + *(int *)(array + index);\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "param",
                "param_2": "array",
                "iVar1": "index"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "calculate_asin_08005854",
            "code": "\nundefined8 calculate_asin_08005854(undefined4 input_1,undefined4 input_2)\n\n{\n  int comparison_result;\n  undefined4 *errno_pointer;\n  int *errno_pointer2;\n  undefined8 result;\n  undefined8 absolute_value;\n  undefined4 flag;\n  undefined *constant_ptr;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined8 return_value;\n  int unordered_result;\n  \n  result = __ieee754_asin();\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  unordered_result = __unorddf2(input_1,input_2,input_1,input_2);\n  if (unordered_result != 0) {\n    return result;\n  }\n  absolute_value = fabs(input_1,input_2);\n  comparison_result = __aeabi_dcmpgt((int)absolute_value,(int)((ulonglong)absolute_value >> 0x20),0,0x3ff00000);\n  if (comparison_result == 0) {\n    return result;\n  }\n  flag = 1;\n  constant_ptr = &DAT_080073ac;\n  temp_1 = input_1;\n  temp_2 = input_2;\n  temp_3 = input_1;\n  temp_4 = input_2;\n  return_value = nan(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    comparison_result = matherr(&flag);\n    if (comparison_result != 0) goto LAB_080058d0;\n  }\n  errno_pointer = (undefined4 *)__errno();\n  *errno_pointer = 0x21;\nLAB_080058d0:\n  if (unordered_result != 0) {\n    errno_pointer2 = (int *)__errno();\n    *errno_pointer2 = unordered_result;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08005854": "calculate_asin_08005854",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "comparison_result",
                "puVar2": "errno_pointer",
                "piVar3": "errno_pointer2",
                "uVar4": "result",
                "uVar5": "absolute_value",
                "local_48": "flag",
                "local_44": "constant_ptr",
                "local_40": "temp_1",
                "uStack_3c": "temp_2",
                "local_38": "temp_3",
                "uStack_34": "temp_4",
                "local_30": "return_value",
                "local_28": "unordered_result"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "fabs",
                "nan",
                "__unorddf2",
                "__errno",
                "__ieee754_asin",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058fc": {
            "entrypoint": "0x080058fc",
            "current_name": "FUN_080058fc",
            "code": "\nundefined8 __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  \n  uVar5 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar5 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar3 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar3 | (-param_1 | param_1) >> 0x1f))) {\n    uVar6 = __aeabi_dadd(param_1,param_2,param_3,param_4,param_4);\n    return uVar6;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar6 = atan();\n    return uVar6;\n  }\n  uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((param_1 | uVar3) == 0) {\n    if (uVar2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (uVar2 != 3) {\n      return CONCAT44(param_2,param_1);\n    }\nLAB_0800613e:\n    uVar6 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((param_3 | uVar5) != 0) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 0x7ff00000) {\n          if (uVar2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (uVar2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (uVar2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (uVar2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (uVar2 != 3) {\n          if (uVar2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (uVar3 != 0x7ff00000) {\n        iVar4 = (int)(uVar3 - uVar5) >> 0x14;\n        if (iVar4 < 0x3d) {\n          if (((int)param_4 < 0) && (iVar4 + 0x3c < 0 != SCARRY4(iVar4,0x3c))) {\n            uVar6 = 0;\n          }\n          else {\n            __divdf3(param_1,param_2);\n            fabs();\n            uVar6 = atan();\n          }\n        }\n        else {\n          uVar6 = 0x3ff921fb54442d18;\n        }\n        iVar4 = (int)((ulonglong)uVar6 >> 0x20);\n        uVar1 = (undefined4)uVar6;\n        if (uVar2 == 1) {\n          return CONCAT44(iVar4 + -0x80000000,uVar1);\n        }\n        if (uVar2 == 2) {\n          uVar7 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar6 = 0x400921fb54442d18;\n        }\n        else {\n          if (uVar2 == 0) {\n            return uVar6;\n          }\n          uVar6 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar7 = 0x400921fb54442d18;\n        }\n        uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                         (int)((ulonglong)uVar7 >> 0x20));\n        return uVar6;\n      }\n    }\n    if ((int)param_2 < 0) {\n      uVar6 = 0xbff921fb54442d18;\n    }\n    else {\n      uVar6 = 0x3ff921fb54442d18;\n    }\n  }\n  return uVar6;\n}\n\n",
            "renaming": {},
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_power_08005900",
            "code": "\nundefined8 calculatePower_08005900(undefined4 base1,undefined4 base2,undefined4 exp1,undefined4 exp2)\n\n{\n  char conditionVariable;\n  int result;\n  int *errnoPointer;\n  undefined4 *errnoAddress;\n  int finiteResult;\n  undefined4 powerUpper;\n  undefined4 powerLower;\n  undefined8 power;\n  undefined8 roundedPower;\n  undefined4 errorCode;\n  undefined *errorCodeMessage;\n  undefined4 base1Copy;\n  undefined4 base2Copy;\n  undefined4 exp1Copy;\n  undefined4 exp2Copy;\n  undefined8 finalPower;\n  int errorNumber;\n  \n  power = __ieee754_pow();\n  conditionVariable = DAT_20000224;\n  powerUpper = (undefined4)((ulonglong)power >> 0x20);\n  powerLower = (undefined4)power;\n  if (DAT_20000224 == -1) {\n    return power;\n  }\n  result = __unorddf2(exp1,exp2,exp1,exp2);\n  if (result != 0) {\n    return power;\n  }\n  result = __unorddf2(base1,base2,base1,base2);\n  base1Copy = base1;\n  base2Copy = base2;\n  exp1Copy = exp1;\n  exp2Copy = exp2;\n  if (result == 0) {\n    result = __aeabi_dcmpeq(base1,base2,0,0);\n    if (result != 0) {\n      result = __aeabi_dcmpeq(exp1,exp2,0,0);\n      if (result != 0) {\n        errorCode = 1;\n        errorCodeMessage = &DAT_080073b1;\n        finalPower = 0;\n        errorNumber = 0;\n        if (conditionVariable != '\\0') {\n          finalPower = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return power;\n      }\n      result = __aeabi_dcmplt(exp1,exp2,0,0);\n      if (result == 0) {\n        return power;\n      }\n      errorCode = 1;\n      errorCodeMessage = &DAT_080073b1;\n      errorNumber = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      finalPower = 0xfff0000000000000;\n      errorNumber = 0;\n      conditionVariable = DAT_20000224;\nLAB_08005a32:\n      if (conditionVariable != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = finite(powerLower,powerUpper);\n    if (((result != 0) || (finiteResult = finite(base1,base2), finiteResult == 0)) ||\n       (finiteResult = finite(exp1,exp2), finiteResult == 0)) {\n      result = __aeabi_dcmpeq(powerLower,powerUpper,0,0);\n      if (result == 0) {\n        return power;\n      }\n      result = finite(base1,base2);\n      if (result == 0) {\n        return power;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return power;\n      }\n      errorCode = 4;\n      errorCodeMessage = &DAT_080073b1;\n      errorNumber = 0;\n      finalPower._0_4_ = 0;\n      finalPower._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    errorNumber = __unorddf2(powerLower,powerUpper);\n    conditionVariable = DAT_20000224;\n    if (errorNumber != 0) {\n      errorCodeMessage = &DAT_080073b1;\n      errorCode = 1;\n      errorNumber = result;\n      if (DAT_20000224 != '\\0') {\n        finalPower = __divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      errorCodeMessage = &DAT_080073b1;\n      errorCode = 1;\n      finalPower = 0;\n      goto LAB_08005978;\n    }\n    errorCodeMessage = &DAT_080073b1;\n    errorCode = 3;\n    if (DAT_20000224 == '\\0') {\n      finalPower._0_4_ = 0xe0000000;\n      finalPower._4_4_ = 0x47efffff;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        power = __muldf3(exp1,exp2,0,0x3fe00000);\n        roundedPower = rint();\n        result = __aeabi_dcmpeq((int)power,(int)((ulonglong)power >> 0x20),(int)roundedPower,\n                               (int)((ulonglong)roundedPower >> 0x20));\n        if (result == 0) {\n          finalPower._0_4_ = 0xe0000000;\n          finalPower._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = matherr(&errorCode);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      finalPower._0_4_ = 0;\n      finalPower._4_4_ = 0x7ff00000;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        power = __muldf3(exp1,exp2,0,0x3fe00000);\n        roundedPower = rint();\n        result = __aeabi_dcmpeq((int)power,(int)((ulonglong)power >> 0x20),(int)roundedPower,\n                               (int)((ulonglong)roundedPower >> 0x20));\n        if (result == 0) {\n          finalPower._0_4_ = 0;\n          finalPower._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    errnoAddress = (undefined4 *)__errno();\n    powerLower = 0x22;\n  }\n  else {\n    result = __aeabi_dcmpeq(exp1,exp2,0,0);\n    if (result == 0) {\n      return power;\n    }\n    errorCode = 1;\n    errorCodeMessage = &DAT_080073b1;\n    finalPower = 0x3ff0000000000000;\n    errorNumber = 0;\n    if (conditionVariable == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = matherr(&errorCode);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    errnoAddress = (undefined4 *)__errno();\n    powerLower = 0x21;\n  }\n  *errnoAddress = powerLower;\nLAB_080059d0:\n  if (errorNumber != 0) {\n    errnoPointer = (int *)__errno();\n    *errnoPointer = errorNumber;\n  }\n  return finalPower;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_power_08005900",
                "param_1": "base1",
                "param_2": "base2",
                "param_3": "exp1",
                "param_4": "exp2",
                "cVar1": "conditionVariable",
                "iVar2": "result",
                "piVar3": "errnoPointer",
                "puVar4": "errnoAddress",
                "iVar5": "finiteResult",
                "uVar6": "powerUpper",
                "uVar7": "powerLower",
                "uVar8": "power",
                "uVar9": "roundedPower",
                "local_50": "errorCode",
                "local_4c": "errorCodeMessage",
                "local_48": "base1Copy",
                "uStack_44": "base2Copy",
                "local_40": "exp1Copy",
                "uStack_3c": "exp2Copy",
                "local_38": "finalPower",
                "local_30": "errorNumber"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__ieee754_pow",
                "__unorddf2",
                "finite",
                "__muldf3",
                "__errno",
                "__aeabi_dcmpeq",
                "rint",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_square_root_08005bc8",
            "code": "\nundefined8 calculateSquareRoot_08005bc8(undefined4 firstNumber,undefined4 secondNumber)\n\n{\n  char charValue;\n  int comparisonVariable;\n  int *errorPointer;\n  undefined4 *errnoPointer;\n  undefined8 result;\n  undefined4 flag;\n  undefined *messagePointer;\n  undefined4 firstInput;\n  undefined4 secondInput;\n  undefined4 tempFirst;\n  undefined4 tempSecond;\n  undefined8 returnValue;\n  int comparisonResult;\n  \n  result = __ieee754_sqrt();\n  charValue = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  comparisonResult = __unorddf2(firstNumber,secondNumber,firstNumber,secondNumber);\n  if (comparisonResult != 0) {\n    return result;\n  }\n  comparisonVariable = __aeabi_dcmplt(firstNumber,secondNumber,0,0);\n  if (comparisonVariable == 0) {\n    return result;\n  }\n  flag = 1;\n  messagePointer = &DAT_080073b5;\n  firstInput = firstNumber;\n  secondInput = secondNumber;\n  tempFirst = firstNumber;\n  tempSecond = secondNumber;\n  if (charValue == '\\0') {\n    returnValue = 0;\nLAB_08005c26:\n    comparisonVariable = matherr(&flag);\n    if (comparisonVariable != 0) goto LAB_08005c2e;\n  }\n  else {\n    returnValue = __divdf3(0,0,0,0);\n    if (charValue != '\\x02') goto LAB_08005c26;\n  }\n  errnoPointer = (undefined4 *)__errno();\n  *errnoPointer = 0x21;\nLAB_08005c2e:\n  if (comparisonResult != 0) {\n    errorPointer = (int *)__errno();\n    *errorPointer = comparisonResult;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_square_root_08005bc8",
                "param_1": "firstNumber",
                "param_2": "secondNumber",
                "cVar1": "charValue",
                "iVar2": "comparisonVariable",
                "piVar3": "errorPointer",
                "puVar4": "errnoPointer",
                "uVar5": "result",
                "local_50": "flag",
                "local_4c": "messagePointer",
                "local_48": "firstInput",
                "uStack_44": "secondInput",
                "local_40": "tempFirst",
                "uStack_3c": "tempSecond",
                "local_38": "returnValue",
                "local_30": "comparisonResult"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "__errno",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_square_root_08005c70",
            "code": "\nundefined8 calculate_square_root_08005c70(uint input_1,uint input_2)\n\n{\n  int comparison_result;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  uint abs_value;\n  undefined8 result;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  \n  result = CONCAT44(input_2,input_1);\n  abs_value = input_2 & 0x7fffffff;\n  if (abs_value < 0x3ff00000) {\n    if (abs_value < 0x3fe00000) {\n      if (0x3e3fffff < abs_value) {\n        temp_result_1 = __muldf3(input_1,input_2,input_1,input_2);\n        temp_6 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n        temp_5 = (undefined4)temp_result_1;\n        temp_result_1 = __muldf3(temp_5,temp_6,0xdfdf709,0x3f023de1);\n        temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xe884455,0x3fc9c155);\n        temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x55555555,0x3fc55555);\n        temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_2 = __muldf3(temp_5,temp_6,0xb12e9282,0x3fb3b8c5);\n        temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp_5,temp_6);\n        temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp_5,temp_6);\n        temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp_5,temp_6);\n        temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n        temp_result_1 = __divdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                          (int)((ulonglong)temp_result_2 >> 0x20));\n        temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      temp_result_1 = __aeabi_dadd(input_1,input_2,0x8800759c,0x7e37e43c);\n      comparison_result = __aeabi_dcmpgt((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3ff00000);\n      if (comparison_result != 0) {\n        return result;\n      }\n    }\n    result = fabs(input_1,input_2);\n    result = __subdf3(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3fe00000);\n    temp_1 = (undefined4)((ulonglong)result >> 0x20);\n    temp_5 = (undefined4)result;\n    result = __muldf3(temp_5,temp_1,0xdfdf709,0x3f023de1);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x7501b288,0x3f49efe0);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0xb5688f3b,0x3fa48228);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xe884455,0x3fc9c155);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x55555555,0x3fc55555);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    temp_2 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result_1 = __muldf3(temp_5,temp_1,0xb12e9282,0x3fb3b8c5);\n    temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_1);\n    temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_1);\n    temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_1);\n    temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3ff00000);\n    temp_3 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    temp_result_2 = __ieee754_sqrt(temp_5,temp_1);\n    temp_4 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n    temp_6 = (undefined4)temp_result_2;\n    if (abs_value < 0x3fef3333) {\n      result = __divdf3((int)result,temp_2,(int)temp_result_1,temp_3);\n      temp_result_1 = __aeabi_dadd(temp_6,temp_4,temp_6,temp_4);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                       (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_1 = __muldf3(0,temp_4,0,temp_4);\n      temp_result_1 = __subdf3(temp_5,temp_1,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_2 = __aeabi_dadd(temp_6,temp_4,0,temp_4);\n      temp_result_1 = __divdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                        (int)((ulonglong)temp_result_2 >> 0x20));\n      temp_5 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      temp_result_1 = __aeabi_dadd((int)temp_result_1,temp_5,(int)temp_result_1,temp_5);\n      temp_result_1 = __subdf3(0x33145c07,0x3c91a626,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                       (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_1 = __aeabi_dadd(0,temp_4,0,temp_4);\n      temp_result_1 = __subdf3(0x54442d18,0x3fe921fb,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                       (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_5 = 0x3fe921fb;\n    }\n    else {\n      result = __divdf3((int)result,temp_2,(int)temp_result_1,temp_3);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_6,temp_4);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),temp_6,temp_4);\n      temp_5 = (undefined4)((ulonglong)result >> 0x20);\n      result = __aeabi_dadd((int)result,temp_5,(int)result,temp_5);\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0x33145c07,0x3c91a626);\n      temp_5 = 0x3ff921fb;\n    }\n    result = __subdf3(0x54442d18,temp_5,(int)result,(int)((ulonglong)result >> 0x20));\n    if ((int)input_2 < 1) {\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n  }\n  else {\n    if ((abs_value + 0xc0100000 | input_1) != 0) {\n      result = __subdf3(input_1,input_2,input_1,input_2);\n      temp_5 = (undefined4)((ulonglong)result >> 0x20);\n      result = __divdf3((int)result,temp_5,(int)result,temp_5);\n      return result;\n    }\n    result = __muldf3(input_1,input_2,0x54442d18,0x3ff921fb);\n    temp_result_1 = __muldf3(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                         (int)((ulonglong)temp_result_1 >> 0x20));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_square_root_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "comparison_result",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "uVar4": "temp_3",
                "uVar5": "temp_4",
                "uVar6": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "abs_value",
                "uVar9": "result",
                "uVar10": "temp_result_1",
                "uVar11": "temp_result_2"
            },
            "calling": [
                "asin"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_special_value_08006070",
            "code": "\nundefined8 calculate_special_value_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint flags_1;\n  uint result_2;\n  int temp_1;\n  uint flags_2;\n  undefined8 final_result_1;\n  undefined8 final_result_2;\n  \n  flags_2 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (flags_2 | (-input_3 | input_3) >> 0x1f)) ||\n     (result_2 = input_2 & 0x7fffffff, 0x7ff00000 < (result_2 | (-input_1 | input_1) >> 0x1f))) {\n    final_result_1 = __aeabi_dadd(input_1,input_2,input_3,input_4,input_4);\n    return final_result_1;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result_1 = atan();\n    return final_result_1;\n  }\n  flags_1 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result_2) == 0) {\n    if (flags_1 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (flags_1 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result_1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | flags_2) != 0) {\n      if (flags_2 == 0x7ff00000) {\n        if (result_2 == 0x7ff00000) {\n          if (flags_1 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (flags_1 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (flags_1 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (flags_1 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (flags_1 != 3) {\n          if (flags_1 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_2 != 0x7ff00000) {\n        temp_1 = (int)(result_2 - flags_2) >> 0x14;\n        if (temp_1 < 0x3d) {\n          if (((int)input_4 < 0) && (temp_1 + 0x3c < 0 != SCARRY4(temp_1,0x3c))) {\n            final_result_1 = 0;\n          }\n          else {\n            __divdf3(input_1,input_2);\n            fabs();\n            final_result_1 = atan();\n          }\n        }\n        else {\n          final_result_1 = 0x3ff921fb54442d18;\n        }\n        temp_1 = (int)((ulonglong)final_result_1 >> 0x20);\n        result_1 = (undefined4)final_result_1;\n        if (flags_1 == 1) {\n          return CONCAT44(temp_1 + -0x80000000,result_1);\n        }\n        if (flags_1 == 2) {\n          final_result_2 = __subdf3(result_1,temp_1,0x33145c07,0x3ca1a626);\n          final_result_1 = 0x400921fb54442d18;\n        }\n        else {\n          if (flags_1 == 0) {\n            return final_result_1;\n          }\n          final_result_1 = __subdf3(result_1,temp_1,0x33145c07,0x3ca1a626);\n          final_result_2 = 0x400921fb54442d18;\n        }\n        final_result_1 = __subdf3((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),(int)final_result_2,\n                         (int)((ulonglong)final_result_2 >> 0x20));\n        return final_result_1;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result_1 = 0xbff921fb54442d18;\n    }\n    else {\n      final_result_1 = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result_1;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_special_value_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "flags_1",
                "uVar3": "result_2",
                "iVar4": "temp_1",
                "uVar5": "flags_2",
                "uVar6": "final_result_1",
                "uVar7": "final_result_2"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "atan",
                "__aeabi_dadd",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculateFloatingPoint_08006228(uint num1,uint num2,uint num3,uint num4)\n\n{\n  undefined4 result;\n  uint mask;\n  uint extra;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  uint temp5;\n  undefined4 temp6;\n  int count1;\n  int count2;\n  undefined4 temp7;\n  uint maskNum2;\n  undefined4 temp8;\n  int count3;\n  uint temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  undefined8 temp14;\n  undefined8 temp15;\n  longlong temp16;\n  ulonglong temp17;\n  undefined8 temp18;\n  uint result1;\n  undefined4 result2;\n  undefined4 result3;\n  int count4;\n  \n  temp13 = CONCAT44(num2,num1);\n  temp9 = num4 & 0x7fffffff;\n  if ((temp9 | num3) == 0) {\n    return 0;\n  }\n  maskNum2 = num2 & 0x7fffffff;\n  if (maskNum2 < 0x7ff00001) {\n    if (maskNum2 == 0x7ff00000) {\n      if (num1 == 0) {\n        if (0x7ff00000 < temp9) goto LAB_08006278;\nLAB_08006262:\n        if ((temp9 != 0x7ff00000) || (num3 == 0)) {\n          if (-1 < (int)num2) goto LAB_0800632a;\n          if (temp9 < 0x43400000) {\n            if (temp9 < 0x3ff00000) {\nLAB_0800632a:\n              result1 = 0;\n              goto LAB_080062ba;\n            }\n            count1 = ((int)temp9 >> 0x14) + -0x3ff;\n            if (0x14 < count1) {\n              mask = num3 >> (0x34U - count1 & 0xff);\n              if (num3 == mask << (0x34U - count1 & 0xff)) {\n                result1 = 2 - (mask & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (num3 == 0) {\n              mask = (int)temp9 >> (0x14U - count1 & 0xff);\n              if (temp9 == mask << (0x14U - count1 & 0xff)) {\n                result1 = 2 - (mask & 1);\n              }\n              else {\n                result1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            result1 = 0;\n          }\n          else {\n            result1 = 2;\nLAB_080062ba:\n            if (num3 == 0) {\n              if (temp9 == 0x7ff00000) {\n                if ((maskNum2 + 0xc0100000 | num1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < maskNum2) {\n                  if ((int)num4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)num4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (temp9 == 0x3ff00000) {\n                if (-1 < (int)num4) {\n                  return num1;\n                }\n                temp12 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (num4 == 0x40000000) goto LAB_0800634a;\n              if ((num4 == 0x3fe00000) && (-1 < (int)num2)) {\n                temp9 = __ieee754_sqrt(num1,num2);\n                return temp9;\n              }\n            }\n          }\n          temp12 = fabs(num1,num2);\n          temp10 = (undefined4)((ulonglong)temp12 >> 0x20);\n          result = (undefined4)temp12;\n          temp17 = CONCAT44(num2,result) & 0x7fffffffffffffff;\n          if ((num1 == 0) && ((maskNum2 == 0 || ((num2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)num4 < 0) {\n              temp12 = __divdf3(0,0x3ff00000,result,temp10);\n            }\n            if (-1 < (int)num2) {\n              return (uint)temp12;\n            }\n            if ((result1 | maskNum2 + 0xc0100000) != 0) {\n              return (uint)temp12;\n            }\n          }\n          else {\n            mask = 0xffffffff - ((int)num2 >> 0x1f);\n            temp12 = temp13;\n            if ((result1 | mask) != 0) {\n              if (temp9 < 0x41e00001) {\n                count4 = 0;\n                if (maskNum2 < 0x100000) {\n                  temp17 = __muldf3();\n                  count4 = -0x35;\n                }\n                temp9 = (uint)(temp17 >> 0x20);\n                result = (undefined4)temp17;\n                count4 = ((int)temp9 >> 0x14) + -0x3ff + count4;\n                temp9 = temp9 & 0xfffff;\n                maskNum2 = temp9 | 0x3ff00000;\n                if (temp9 < 0x3988f) {\nLAB_08006628:\n                  count1 = 0;\n                }\n                else {\n                  if (0xbb679 < temp9) {\n                    maskNum2 = maskNum2 - 0x100000;\n                    count4 = count4 + 1;\n                    goto LAB_08006628;\n                  }\n                  count1 = 1;\n                }\n                count2 = count1 * 8;\n                temp7 = (&DAT_080073c0)[count1 * 2];\n                temp8 = (&DAT_080073c4)[count1 * 2];\n                temp13 = __subdf3(result,maskNum2,temp7,temp8);\n                temp11 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp12 = __aeabi_dadd(result,maskNum2,temp7,temp8);\n                temp12 = __divdf3(0,0x3ff00000,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp1 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp14 = __muldf3((int)temp13,temp11,(int)temp12,temp1);\n                temp2 = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp10 = (undefined4)temp14;\n                temp14 = __muldf3(0,temp2);\n                temp13 = __subdf3((int)temp13,temp11,(int)temp14,(int)((ulonglong)temp14 >> 0x20));\n                temp14 = __subdf3(0,((int)maskNum2 >> 1 | 0x20000000U) + 0x80000 + count1 * 0x40000,\n                                  temp7,temp8);\n                temp14 = __subdf3(result,maskNum2,(int)temp14,(int)((ulonglong)temp14 >> 0x20));\n                temp14 = __muldf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),0,temp2);\n                temp13 = __subdf3((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                                  (int)((ulonglong)temp14 >> 0x20));\n                temp13 = __muldf3((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,temp1);\n                temp11 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp12 = __muldf3(temp10,temp2);\n                temp1 = (undefined4)((ulonglong)temp12 >> 0x20);\n                result = (undefined4)temp12;\n                temp12 = __muldf3(result,temp1,0x4a454eef,0x3fca7e28);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),result,temp1);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),result,temp1);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),result,temp1);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),result,temp1);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp14 = __muldf3(result,temp1,result,temp1);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp14,\n                                  (int)((ulonglong)temp14 >> 0x20));\n                temp14 = __aeabi_dadd(temp10,temp2,0,temp2);\n                temp14 = __muldf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp13,temp11);\n                temp12 = __aeabi_dadd((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                result = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp14 = __muldf3(0,temp2,0,temp2);\n                temp1 = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp15 = __aeabi_dadd((int)temp14,temp1,0,0x40080000);\n                __aeabi_dadd((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp12,result);\n                temp15 = __muldf3(0,temp2,0,temp3);\n                temp7 = (undefined4)((ulonglong)temp15 >> 0x20);\n                temp18 = __subdf3(0,temp3,0,0x40080000);\n                temp14 = __subdf3((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp14,temp1);\n                temp12 = __subdf3((int)temp12,result,(int)temp14,(int)((ulonglong)temp14 >> 0x20));\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp10,temp2);\n                temp13 = __muldf3((int)temp13,temp11,0,temp3);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                result = (undefined4)((ulonglong)temp12 >> 0x20);\n                __aeabi_dadd((int)temp15,temp7,(int)temp12,result);\n                temp13 = __muldf3(0,temp4,0xe0000000,0x3feec709);\n                temp14 = __subdf3(0,temp4,(int)temp15,temp7);\n                temp12 = __subdf3((int)temp12,result,(int)temp14,(int)((ulonglong)temp14 >> 0x20));\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0xdc3a03fd,0x3feec709\n                                 );\n                temp14 = __muldf3(0,temp4,0x145b01f5,0xbe3e2fe0);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp14,\n                                      (int)((ulonglong)temp14 >> 0x20));\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + count2),\n                                      *(undefined4 *)(&DAT_080073e4 + count2));\n                temp14 = __aeabi_i2d(count4);\n                result = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp10 = *(undefined4 *)(&DAT_080073d0 + count2);\n                temp11 = *(undefined4 *)(&DAT_080073d4 + count2);\n                temp15 = __aeabi_dadd((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp15 = __aeabi_dadd((int)temp15,(int)((ulonglong)temp15 >> 0x20),temp10,temp11);\n                __aeabi_dadd((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp14,result);\n                temp14 = __subdf3(0,temp5,(int)temp14,result);\n                temp16 = __subdf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),temp10,temp11);\n                temp9 = temp5;\n              }\n              else {\n                if (0x43f00000 < temp9) {\n                  if (maskNum2 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)num4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  num1 = 0x8800759c;\n                  num2 = 0x7e37e43c;\n                  temp13 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (maskNum2 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)num4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < maskNum2) goto LAB_08006418;\n                temp13 = __subdf3(result,temp10,0,0x3ff00000);\n                temp10 = (undefined4)((ulonglong)temp13 >> 0x20);\n                result = (undefined4)temp13;\n                temp13 = __muldf3(result,temp10,0x60000000,0x3ff71547);\n                temp12 = __muldf3(result,temp10,0xf85ddf44,0x3e54ae0b);\n                temp14 = __muldf3(result,temp10,0,0x3fd00000);\n                temp14 = __subdf3(0x55555555,0x3fd55555,(int)temp14,(int)((ulonglong)temp14 >> 0x20)\n                                 );\n                temp14 = __muldf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),result,temp10);\n                temp14 = __subdf3(0,0x3fe00000,(int)temp14,(int)((ulonglong)temp14 >> 0x20));\n                temp15 = __muldf3(result,temp10,result,temp10);\n                temp14 = __muldf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp15,\n                                  (int)((ulonglong)temp15 >> 0x20));\n                temp14 = __muldf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),0x652b82fe,0x3ff71547\n                                 );\n                temp12 = __subdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp14,\n                                  (int)((ulonglong)temp14 >> 0x20));\n                __aeabi_dadd((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,\n                             (int)((ulonglong)temp12 >> 0x20));\n                temp16 = (ulonglong)extra << 0x20;\n                temp9 = extra;\n              }\n              temp13 = __subdf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp13,\n                                (int)((ulonglong)temp13 >> 0x20));\n              temp13 = __subdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                (int)((ulonglong)temp13 >> 0x20));\n              if ((result1 - 1 | mask) == 0) {\n                num2 = 0xbff00000;\n              }\n              else {\n                num2 = 0x3ff00000;\n              }\n              result1 = 0;\n              temp12 = __subdf3(num3,num4,0,num4);\n              temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0,temp9);\n              temp13 = __muldf3((int)temp13,(int)((ulonglong)temp13 >> 0x20),num3,num4);\n              temp13 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                    (int)((ulonglong)temp13 >> 0x20));\n              temp11 = (undefined4)((ulonglong)temp13 >> 0x20);\n              result = (undefined4)temp13;\n              temp13 = __muldf3(0,temp9,0,num4);\n              temp1 = (undefined4)((ulonglong)temp13 >> 0x20);\n              temp10 = (undefined4)temp13;\n              temp16 = __aeabi_dadd(result,temp11,temp10,temp1);\n              maskNum2 = (uint)((ulonglong)temp16 >> 0x20);\n              temp9 = (uint)temp16;\n              if (0x408fffffffffffff < temp16) {\n                if ((maskNum2 + 0xbf700000 | temp9) == 0) {\n                  temp12 = __aeabi_dadd(result,temp11,0x652b82fe,0x3c971547);\n                  temp14 = __subdf3(temp9,maskNum2,temp10,temp1);\n                  count1 = __aeabi_dcmpgt((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp14,\n                                         (int)((ulonglong)temp14 >> 0x20));\n                  if (count1 == 0) goto LAB_08006968;\n                }\n                temp13 = __muldf3(0,num2,0x8800759c,0x7e37e43c);\n                num1 = 0x8800759c;\n                num2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((maskNum2 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((maskNum2 & 0x7fffffff) < 0x3fe00001) {\n                  count1 = 0;\n                }\n                else {\n                  maskNum2 = (0x100000 >> (((int)(maskNum2 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          maskNum2;\n                  temp9 = (maskNum2 * 2 >> 0x15) - 0x3ff;\n                  count1 = (int)(maskNum2 & 0xfffff | 0x100000) >> (0x14 - temp9 & 0xff);\n                  if (temp16 < 0) {\n                    count1 = -count1;\n                  }\n                  temp13 = __subdf3(temp10,temp1,0,maskNum2 & ~(0xfffff >> (temp9 & 0xff)));\n                }\n                result3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                result2 = (undefined4)temp13;\n                __aeabi_dadd(result2,result3,result,temp11);\n                temp13 = __muldf3(0,temp6,0,0x3fe62e43);\n                temp10 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp12 = __subdf3(0,temp6,result2,result3);\n                temp12 = __subdf3(result,temp11,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0xfefa39ef,0x3fe62e42\n                                 );\n                temp14 = __muldf3(0,temp6,0xca86c39,0xbe205c61);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp14,\n                                      (int)((ulonglong)temp14 >> 0x20));\n                temp11 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp14 = __aeabi_dadd((int)temp13,temp10,(int)temp12,temp11);\n                temp1 = (undefined4)((ulonglong)temp14 >> 0x20);\n                result = (undefined4)temp14;\n                temp13 = __subdf3(result,temp1,(int)temp13,temp10);\n                temp13 = __subdf3((int)temp12,temp11,(int)temp13,(int)((ulonglong)temp13 >> 0x20));\n                temp11 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp12 = __muldf3(result,temp1,result,temp1);\n                temp2 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp10 = (undefined4)temp12;\n                temp12 = __muldf3(temp10,temp2,0x72bea4d0,0x3e663769);\n                temp12 = __subdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0xc5d26bf1,0x3ebbbd41\n                                 );\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp10,temp2);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp10,temp2);\n                temp12 = __subdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x16bebd93,0x3f66c16c\n                                 );\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp10,temp2);\n                temp12 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp10,temp2);\n                temp12 = __subdf3(result,temp1,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp10 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp14 = __muldf3(result,temp1,(int)temp12,temp10);\n                temp12 = __subdf3((int)temp12,temp10,0,0x40000000);\n                temp12 = __divdf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp12,\n                                  (int)((ulonglong)temp12 >> 0x20));\n                temp14 = __muldf3(result,temp1,(int)temp13,temp11);\n                temp13 = __aeabi_dadd((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp13,\n                                      temp11);\n                temp13 = __subdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                  (int)((ulonglong)temp13 >> 0x20));\n                temp13 = __subdf3((int)temp13,(int)((ulonglong)temp13 >> 0x20),result,temp1);\n                temp12 = __subdf3(0,0x3ff00000,(int)temp13,(int)((ulonglong)temp13 >> 0x20));\n                count2 = (int)((ulonglong)temp12 >> 0x20);\n                count3 = count2 + count1 * 0x100000;\n                temp13 = CONCAT44(count3,(int)temp12);\n                num1 = result1;\n                if (count3 < 0x100000) {\n                  temp13 = scalbn((int)temp12,count2,count1);\n                }\n              }\n              else {\n                if ((maskNum2 + 0x3f6f3400 | temp9) == 0) {\n                  temp12 = __subdf3(temp9,maskNum2,temp10,temp1);\n                  count1 = __aeabi_dcmple(result,temp11,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                  if (count1 == 0) goto LAB_08006968;\n                }\n                temp13 = __muldf3(0,num2,0xc2f8f359,0x1a56e1f);\n                num1 = 0xc2f8f359;\n                num2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              temp9 = __muldf3((int)temp13,(int)((ulonglong)temp13 >> 0x20),num1,num2);\n              return temp9;\n            }\n          }\n          result = (undefined4)((ulonglong)temp12 >> 0x20);\n          temp12 = __subdf3((int)temp12,result,(int)temp12,result);\n          temp13 = temp12;\nLAB_08006320:\n          temp9 = __divdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                            (int)((ulonglong)temp13 >> 0x20));\n          return temp9;\n        }\n      }\n    }\n    else if (temp9 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((maskNum2 + 0xc0100000 | num1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  temp9 = nan(&DAT_0800737e);\n  return temp9;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "result",
                "uVar2": "mask",
                "extraout_r1": "extra",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "extraout_r1_00": "temp3",
                "extraout_r1_01": "temp4",
                "extraout_r1_02": "temp5",
                "extraout_r1_03": "temp6",
                "iVar5": "count1",
                "iVar6": "count2",
                "uVar7": "temp7",
                "uVar8": "maskNum2",
                "uVar9": "temp8",
                "iVar10": "count3",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar13": "temp11",
                "uVar14": "temp12",
                "uVar15": "temp13",
                "uVar16": "temp14",
                "uVar17": "temp15",
                "lVar18": "temp16",
                "uVar19": "temp17",
                "uVar20": "temp18",
                "local_70": "result1",
                "local_68": "result2",
                "local_64": "result3",
                "local_54": "count4"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan",
                "scalbn",
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_dcmple",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_product_and_sum_08006c0c",
            "code": "\nundefined8 calculateFloatingPointProductAndSum_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  int shiftAmount;\n  int count;\n  uint temp3;\n  uint temp4;\n  int sum;\n  uint temp5;\n  uint temp6;\n  int innerCount;\n  uint temp7;\n  undefined8 result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    result = __muldf3(input1,input2,input1,input2);\n    result = __aeabi_dadd(input1,input2,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      result = __subdf3(input1,input2,input1,input2);\n      temp1 = (undefined4)((ulonglong)result >> 0x20);\n      result = __divdf3((int)result,temp1,(int)result,temp1);\n      return result;\n    }\n  }\n  shiftAmount = (int)input2 >> 0x14;\n  if (shiftAmount == 0) {\n    while (input2 == 0) {\n      shiftAmount = shiftAmount + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    temp2 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      temp2 = temp2 + 1;\n    }\n    shiftAmount = shiftAmount - (temp2 - 1);\n    input2 = input2 | input1 >> (0x20 - temp2 & 0xff);\n    input1 = input1 << (temp2 & 0xff);\n  }\n  sum = 0;\n  temp2 = input2 & 0xfffff | 0x100000;\n  if ((shiftAmount + -0x3ff) * -0x80000000 < 0) {\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n  count = 0x16;\n  temp3 = 0;\n  temp5 = 0x200000;\n  input1 = input1 << 1;\n  do {\n    innerCount = temp3 + temp5;\n    if (innerCount <= (int)temp2) {\n      temp2 = temp2 - innerCount;\n      temp3 = innerCount + temp5;\n      sum = sum + temp5;\n    }\n    count = count + -1;\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    temp5 = temp5 >> 1;\n    input1 = input1 << 1;\n  } while (count != 0);\n  innerCount = 0x20;\n  temp6 = 0x80000000;\n  temp5 = 0;\n  count = 0;\n  do {\n    temp7 = temp6 + count;\n    temp4 = temp3;\n    if (((int)temp3 < (int)temp2) || ((temp2 == temp3 && (temp7 <= input1)))) {\n      count = temp7 + temp6;\n      if (((int)temp7 < 0) && (-1 < count)) {\n        temp4 = temp3 + 1;\n      }\n      temp2 = temp2 - temp3;\n      if (input1 < temp7) {\n        temp2 = temp2 - 1;\n      }\n      input1 = input1 - temp7;\n      temp5 = temp5 + temp6;\n    }\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    innerCount = innerCount + -1;\n    input1 = input1 << 1;\n    temp6 = temp6 >> 1;\n    temp3 = temp4;\n  } while (innerCount != 0);\n  if ((input1 | temp2) != 0) {\n    if (temp5 == 0xffffffff) {\n      sum = sum + 1;\n      temp5 = 0;\n    }\n    else {\n      temp5 = temp5 + 1 & 0xfffffffe;\n    }\n  }\n  temp5 = temp5 >> 1;\n  if (sum << 0x1f < 0) {\n    temp5 = temp5 | 0x80000000;\n  }\n  return CONCAT44((sum >> 1) + 0x3fe00000 + (shiftAmount + -0x3ff >> 1) * 0x100000,temp5);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_product_and_sum_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "shiftAmount",
                "iVar4": "count",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "iVar7": "sum",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "iVar10": "innerCount",
                "uVar11": "temp7",
                "uVar12": "result"
            },
            "calling": [
                "sqrt",
                "__ieee754_pow",
                "__ieee754_asin"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_square_root_08006d68",
            "code": "\nundefined8 calculateSquareRoot_08006d68(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int comparison;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint nonNegativeInput;\n  undefined8 result1;\n  undefined8 result2;\n  \n  result1 = CONCAT44(input2,input1);\n  nonNegativeInput = input2 & 0x7fffffff;\n  if (nonNegativeInput < 0x44100000) {\n    if (nonNegativeInput < 0x3fdc0000) {\n      if (nonNegativeInput < 0x3e200000) {\n        result2 = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,input4);\n        comparison = __aeabi_dcmpgt((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n        if (comparison != 0) {\n          return result1;\n        }\n      }\n      comparison = -1;\n    }\n    else {\n      result1 = fabs();\n      temp2 = (undefined4)((ulonglong)result1 >> 0x20);\n      temp1 = (undefined4)result1;\n      if (nonNegativeInput < 0x3ff30000) {\n        if (nonNegativeInput < 0x3fe60000) {\n          result1 = __aeabi_dadd(temp1,temp2,temp1,temp2);\n          result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),0,0x3ff00000);\n          result2 = __aeabi_dadd(temp1,temp2,0,0x40000000);\n          result1 = __divdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                           (int)((ulonglong)result2 >> 0x20));\n          comparison = 0;\n        }\n        else {\n          result1 = __subdf3(temp1,temp2,0,0x3ff00000);\n          result2 = __aeabi_dadd(temp1,temp2,0,0x3ff00000);\n          result1 = __divdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                           (int)((ulonglong)result2 >> 0x20));\n          comparison = 1;\n        }\n      }\n      else if (nonNegativeInput < 0x40038000) {\n        result1 = __subdf3(temp1,temp2,0,0x3ff80000);\n        result2 = __muldf3(temp1,temp2,0,0x3ff80000);\n        result2 = __aeabi_dadd((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n        result1 = __divdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                         (int)((ulonglong)result2 >> 0x20));\n        comparison = 2;\n      }\n      else {\n        result1 = __divdf3(0,0xbff00000,temp1,temp2);\n        comparison = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp5 = (undefined4)result1;\n    result1 = __muldf3(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp1 = (undefined4)result1;\n    result1 = __muldf3(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp2 = (undefined4)result1;\n    result1 = __muldf3(temp2,temp4,0xe322da11,0x3f90ad3a);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0x24760deb,0x3fa97b4b);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0xc54c206e,0x3fb745cd);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0x920083ff,0x3fc24924);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0x5555550d,0x3fd55555);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)result1 >> 0x20);\n    result2 = __muldf3(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0x52defd9a,0x3fadde2d);\n    result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0xfe231671,0x3fbc71c6);\n    result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0x9998ebc4,0x3fc99999);\n    result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n    if (comparison == -1) {\n      result1 = __aeabi_dadd((int)result1,temp1,(int)result2,temp2);\n      result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp6);\n      result1 = __subdf3(temp5,temp6,(int)result1,(int)((ulonglong)result1 >> 0x20));\n    }\n    else {\n      result1 = __aeabi_dadd((int)result1,temp1,(int)result2,temp2);\n      result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp6);\n      comparison = comparison * 8;\n      result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),\n                       *(undefined4 *)(&UNK_08007410 + comparison),*(undefined4 *)(&UNK_08007414 + comparison)\n                      );\n      result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp6);\n      result1 = __subdf3(*(undefined4 *)(&UNK_080073f0 + comparison),*(undefined4 *)(&UNK_080073f4 + comparison)\n                       ,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      if ((int)input2 < 0) {\n        result1 = CONCAT44((int)((ulonglong)result1 >> 0x20) + -0x80000000,(int)result1);\n      }\n    }\n  }\n  else if ((nonNegativeInput < 0x7ff00001) && ((nonNegativeInput != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      result1 = 0xbff921fb54442d18;\n    }\n    else {\n      result1 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result1 = __aeabi_dadd(input1,input2,input1,input2,input4);\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_square_root_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "comparison",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "nonNegativeInput",
                "uVar9": "result1",
                "uVar10": "result2"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "calculate_param_flag_08007092",
            "code": "\nuint calculateParamFlag_08007092(undefined4 inputFlag,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "calculate_param_flag_08007092",
                "param_1": "inputFlag",
                "param_2": "inputValue"
            },
            "calling": [
                "pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_application_0800709e",
            "code": "\nvoid initializeApplication_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_application_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "__ieee754_pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_double_precision_080070b0",
            "code": "\nundefined8 calculateDoublePrecision_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  undefined8 tempVar8;\n  \n  tempVar7 = (input2 << 1) >> 0x15;\n  tempVar6 = tempVar7 - 0x3ff;\n  tempVar3 = input2;\n  if ((int)tempVar6 < 0x14) {\n    if ((int)tempVar6 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar3 = input2 & 0xfffff | input1;\n      tempVar1 = ((int)input2 >> 0x1f) * -8;\n      tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n      tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n      tempVar8 = __aeabi_dadd(input1,(-tempVar3 | tempVar3) >> 0xc & 0x80000 | input2 & 0xfffe0000,tempVar2,\n                           tempVar4,input1,input2,input3);\n      tempVar8 = __subdf3((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n      return CONCAT44((uint)((ulonglong)tempVar8 >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)tempVar8);\n    }\n    tempVar7 = 0xfffff >> (tempVar6 & 0xff);\n    if ((input2 & tempVar7 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar7 = tempVar7 >> 1;\n    tempVar5 = input2 & tempVar7 | input1;\n    if (tempVar5 != 0) {\n      if (tempVar6 == 0x13) {\n        tempVar5 = 0x80000000;\n      }\n      else {\n        tempVar5 = 0;\n      }\n      tempVar3 = 0x40000 >> (tempVar6 & 0xff) | input2 & ~tempVar7;\n    }\n  }\n  else {\n    if (0x33 < (int)tempVar6) {\n      if (tempVar6 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar8 = __aeabi_dadd();\n      return tempVar8;\n    }\n    tempVar7 = tempVar7 - 0x413;\n    tempVar6 = 0xffffffff >> (tempVar7 & 0xff);\n    if ((input1 & tempVar6) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar6 = tempVar6 >> 1;\n    tempVar5 = input1;\n    if ((input1 & tempVar6) != 0) {\n      tempVar5 = 0x40000000 >> (tempVar7 & 0xff) | input1 & ~tempVar6;\n    }\n  }\n  tempVar1 = ((int)input2 >> 0x1f) * -8;\n  tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n  tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n  tempVar8 = __aeabi_dadd(tempVar5,tempVar3,tempVar2,tempVar4,input1,input2,input3);\n  tempVar8 = __subdf3((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n  return tempVar8;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_double_precision_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_product_080071c0",
            "code": "\nundefined8 calculate_product_080071c0(uint input1,uint input2,int exponent,undefined4 constant)\n\n{\n  uint shiftCount;\n  undefined4 result1;\n  int newExponent;\n  undefined4 result2;\n  uint result2Shifted;\n  undefined8 product;\n  \n  product = CONCAT44(input2,input1);\n  shiftCount = (input2 << 1) >> 0x15;\n  if (shiftCount == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return product;\n    }\n    product = __muldf3(input1,input2,0,0x43500000);\n    if (-0xc351 < exponent) {\n      shiftCount = ((uint)((int)((ulonglong)product >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result1 = 0xc2f8f359;\n    result2 = 0x1a56e1f;\n  }\n  else {\n    if (shiftCount == 0x7ff) {\n      product = __aeabi_dadd(input1,input2,input1,input2,constant);\n      return product;\n    }\nLAB_08007210:\n    result2Shifted = (uint)((ulonglong)product >> 0x20);\n    result1 = (undefined4)product;\n    newExponent = shiftCount + exponent;\n    if (newExponent < 0x7ff) {\n      if (0 < newExponent) {\n        return CONCAT44(result2Shifted & 0x800fffff | newExponent * 0x100000,result1);\n      }\n      if (newExponent + 0x35 < 0 == SCARRY4(newExponent,0x35)) {\n        product = CONCAT44(result2Shifted & 0x800fffff | (newExponent + 0x36) * 0x100000,result1);\n        result1 = 0;\n        result2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (exponent < 0xc351) {\n        product = copysign(0xc2f8f359,0x1a56e1f,result1,result2Shifted);\n        goto LAB_080071ec;\n      }\n    }\n    product = copysign(0x8800759c,0x7e37e43c,result1,result2Shifted);\n    result1 = 0x8800759c;\n    result2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  product = __muldf3((int)product,(int)((ulonglong)product >> 0x20),result1,result2);\n  return product;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_product_080071c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "exponent",
                "param_4": "constant",
                "uVar1": "shiftCount",
                "uVar2": "result1",
                "iVar3": "newExponent",
                "uVar4": "result2",
                "uVar5": "result2Shifted",
                "uVar6": "product"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "copysign",
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "scalbn"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_value_080072b8",
            "code": "\nvoid updateValue_080072b8(int value)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_value_080072b8",
                "param_1": "value"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array",
                "frame_dummy"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 157452,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "FUN_08004f68",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724"
        ]
    ],
    "locked_functions": []
}