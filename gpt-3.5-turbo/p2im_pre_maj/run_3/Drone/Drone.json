{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "set_flag_if_needed_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 setFlagIfNeeded_08000110(undefined4 inputParam)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08000110": "set_flag_if_needed_08000110",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_variables_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_variables_08000134(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_variables_08000134",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *str)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = str;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "str",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_inverse_08000168",
            "code": "\nulonglong calculate_inverse_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int bit_count;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift_amount;\n  uint result_low;\n  uint result_high;\n  uint difference;\n  uint temp6;\n  bool is_overflow;\n  bool condition_check;\n  bool is_negative;\n  \n  temp4 = param_4 ^ 0x80000000;\n  result_low = param_2 << 1;\n  param_4 = param_4 << 1;\n  is_overflow = ((param_2 ^ temp4) & 0x7fffffff) == 0;\n  condition_check = is_overflow && param_1 == param_3;\n  if (!is_overflow || param_1 != param_3) {\n    condition_check = (result_low | param_1) == 0;\n  }\n  if (!condition_check) {\n    condition_check = (param_4 | param_3) == 0;\n  }\n  shift_amount = (int)result_low >> 0x15;\n  if (!condition_check) {\n    condition_check = shift_amount == -1;\n  }\n  bit_count = (int)param_4 >> 0x15;\n  if (!condition_check) {\n    condition_check = bit_count == -1;\n  }\n  if (condition_check) {\n    if (shift_amount == -1 || bit_count == -1) {\n      result_low = temp4;\n      difference = param_3;\n      if (shift_amount == -1) {\n        result_low = param_2;\n        difference = param_1;\n      }\n      if (shift_amount != -1 || bit_count != -1) {\n        param_3 = difference;\n        temp4 = result_low;\n      }\n      condition_check = (difference | result_low << 0xc) == 0;\n      if (condition_check) {\n        condition_check = (param_3 | temp4 << 0xc) == 0;\n      }\n      if (condition_check) {\n        condition_check = result_low == temp4;\n      }\n      if (!condition_check) {\n        result_low = result_low | 0x80000;\n      }\n      return CONCAT44(result_low,difference);\n    }\n    if (((param_2 ^ temp4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((result_low | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = temp4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != temp4) {\n      return 0;\n    }\n    if (result_low >> 0x15 == 0) {\n      condition_check = (param_1 & 0x80000000) != 0;\n      temp4 = param_2 * 2 + (uint)condition_check;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)condition_check)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,param_1 << 1);\n    }\n    if (result_low < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  result_low = result_low >> 0x15;\n  param_4 = param_4 >> 0x15;\n  difference = param_4 - result_low;\n  condition_check = difference != 0;\n  if (param_4 < result_low) {\n    difference = -difference;\n  }\n  result_high = param_1;\n  temp5 = param_2;\n  if (condition_check && result_low <= param_4) {\n    result_low = result_low + difference;\n    result_high = param_3;\n    temp5 = temp4;\n    param_3 = param_1;\n    temp4 = param_2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp5,result_high);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    condition_check = result_high != 0;\n    result_high = -result_high;\n    temp2 = -temp2 - (uint)condition_check;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    condition_check = param_3 != 0;\n    param_3 = -param_3;\n    temp5 = -temp5 - (uint)condition_check;\n  }\n  if (result_low == difference) {\n    temp5 = temp5 ^ 0x100000;\n    if (result_low == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result_low = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp4 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp6 = param_3 << (temp4 & 0xff);\n    param_3 = param_3 >> (difference & 0xff);\n    temp1 = result_high + param_3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result_high,param_3) + ((int)temp5 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp6 = temp5 << (-difference + 0x40 & 0xff);\n    if (param_3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    temp5 = (int)temp5 >> (difference - 0x20 & 0xff);\n    temp4 = result_high + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result_high,temp5);\n  }\n  param_2 = temp2 & 0x80000000;\n  difference = temp2;\n  if ((int)temp2 < 0) {\n    condition_check = temp6 == 0;\n    temp6 = -temp6;\n    difference = -temp4;\n    temp4 = -(uint)!condition_check - temp4;\n    difference = -(uint)(condition_check <= difference) - temp2;\n  }\n  if (0xfffff < difference) {\n    result_high = result_low - 1;\n    if (0x1fffff < difference) {\n      result_high = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result_high != 0) << 0x1f | temp4 >> 1;\n      temp6 = (uint)(carry & 1) << 0x1f | temp6 >> 1;\n      result_high = result_low;\n      if (0xffbfffff < result_low * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition_check = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      condition_check = (temp4 & 1) != 0;\n    }\n    return CONCAT44(difference + result_high * 0x100000 + (uint)CARRY4(temp4,(uint)condition_check) | param_2,\n                    temp4 + condition_check);\n  }\n  is_overflow = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  result_high = temp4 * 2;\n  condition_check = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)is_overflow;\n  difference = difference * 2 + (uint)(condition_check || CARRY4(result_high,(uint)is_overflow));\n  result_high = result_low - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  result_low = difference;\n  if (difference == 0) {\n    temp5 = 0;\n    result_low = temp4;\n  }\n  shift_amount = LZCOUNT(result_low);\n  if (difference == 0) {\n    shift_amount = shift_amount + 0x20;\n  }\n  difference = shift_amount - 0xb;\n  is_negative = SBORROW4(difference,0x20);\n  temp4 = shift_amount - 0x2b;\n  condition_check = (int)temp4 < 0;\n  is_overflow = temp4 == 0;\n  if ((int)difference < 0x20) {\n    is_negative = SCARRY4(temp4,0xc);\n    shift_amount = shift_amount + -0x1f;\n    condition_check = shift_amount < 0;\n    is_overflow = shift_amount == 0;\n    temp4 = difference;\n    if (!is_overflow && condition_check == is_negative) {\n      temp5 = result_low << (difference & 0xff);\n      result_low = result_low >> (0xcU - shift_amount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_overflow || condition_check != is_negative) {\n    temp6 = 0x20 - temp4;\n  }\n  result_low = result_low << (temp4 & 0xff);\n  if (is_overflow || condition_check != is_negative) {\n    result_low = result_low | temp5 >> (temp6 & 0xff);\n  }\n  if (is_overflow || condition_check != is_negative) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)difference <= (int)result_high) {\n    return CONCAT44(result_low + (result_high - difference) * 0x100000 | param_2,temp5);\n  }\n  temp4 = ~(result_high - difference);\n  if ((int)temp4 < 0x1f) {\n    shift_amount = temp4 - 0x13;\n    if (shift_amount != 0 && shift_amount < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift_amount) & 0xff) | result_low << (0xcU - shift_amount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(param_2 | result_low >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result_low << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result_low >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_inverse_08000168",
                "iVar1": "bit_count",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift_amount",
                "uVar9": "result_low",
                "uVar10": "result_high",
                "uVar11": "difference",
                "uVar12": "temp6",
                "bVar13": "is_overflow",
                "bVar14": "condition_check",
                "bVar15": "is_negative"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_result_0800016c",
            "code": "\nulonglong calculate_result_0800016c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shifted_bits_1;\n  byte carry_bit;\n  uint uVar3;\n  uint result_1;\n  uint uVar5;\n  int shifted_bits_2;\n  uint shifted_input_2;\n  uint result_2;\n  uint shifted_input_4;\n  uint difference;\n  uint shifted_added_1;\n  uint shifted_result_1;\n  bool check_1;\n  bool check_2;\n  bool check_3;\n  \n  shifted_input_2 = input_2 << 1;\n  shifted_input_4 = input_4 << 1;\n  check_1 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  check_2 = check_1 && input_1 == input_3;\n  if (!check_1 || input_1 != input_3) {\n    check_2 = (shifted_input_2 | input_1) == 0;\n  }\n  if (!check_2) {\n    check_2 = (shifted_input_4 | input_3) == 0;\n  }\n  shifted_bits_2 = (int)shifted_input_2 >> 0x15;\n  if (!check_2) {\n    check_2 = shifted_bits_2 == -1;\n  }\n  shifted_bits_1 = (int)shifted_input_4 >> 0x15;\n  if (!check_2) {\n    check_2 = shifted_bits_1 == -1;\n  }\n  if (check_2) {\n    if (shifted_bits_2 == -1 || shifted_bits_1 == -1) {\n      shifted_input_4 = input_4;\n      shifted_input_2 = input_3;\n      if (shifted_bits_2 == -1) {\n        shifted_input_4 = input_2;\n        shifted_input_2 = input_1;\n      }\n      if (shifted_bits_2 != -1 || shifted_bits_1 != -1) {\n        input_3 = shifted_input_2;\n        input_4 = shifted_input_4;\n      }\n      check_2 = (shifted_input_2 | shifted_input_4 << 0xc) == 0;\n      if (check_2) {\n        check_2 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (check_2) {\n        check_2 = shifted_input_4 == input_4;\n      }\n      if (!check_2) {\n        shifted_input_4 = shifted_input_4 | 0x80000;\n      }\n      return CONCAT44(shifted_input_4,shifted_input_2);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((shifted_input_2 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (shifted_input_2 >> 0x15 == 0) {\n      check_2 = (input_1 & 0x80000000) != 0;\n      shifted_input_4 = input_2 * 2 + (uint)check_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)check_2)) {\n        shifted_input_4 = shifted_input_4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input_4,input_1 << 1);\n    }\n    if (shifted_input_2 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input_2 = shifted_input_2 >> 0x15;\n  shifted_input_4 = shifted_input_4 >> 0x15;\n  difference = shifted_input_4 - shifted_input_2;\n  check_2 = difference != 0;\n  if (shifted_input_4 < shifted_input_2) {\n    difference = -difference;\n  }\n  result_2 = input_1;\n  uVar5 = input_2;\n  if (check_2 && shifted_input_2 <= shifted_input_4) {\n    shifted_input_2 = shifted_input_2 + difference;\n    result_2 = input_3;\n    uVar5 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(uVar5,result_2);\n  }\n  shifted_input_4 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    check_2 = result_2 != 0;\n    result_2 = -result_2;\n    shifted_input_4 = -shifted_input_4 - (uint)check_2;\n  }\n  uVar5 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    check_2 = input_3 != 0;\n    input_3 = -input_3;\n    uVar5 = -uVar5 - (uint)check_2;\n  }\n  if (shifted_input_2 == difference) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (shifted_input_2 == 0) {\n      shifted_input_4 = shifted_input_4 ^ 0x100000;\n      shifted_input_2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_result_1 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    shifted_added_1 = input_3 << (shifted_result_1 & 0xff);\n    input_3 = input_3 >> (difference & 0xff);\n    uVar3 = result_2 + input_3;\n    result_1 = uVar5 << (shifted_result_1 & 0xff);\n    shifted_result_1 = uVar3 + result_1;\n    shifted_input_4 = shifted_input_4 + CARRY4(result_2,input_3) + ((int)uVar5 >> (difference & 0xff)) +\n            (uint)CARRY4(uVar3,result_1);\n  }\n  else {\n    shifted_added_1 = uVar5 << (-difference + 0x40 & 0xff);\n    if (input_3 != 0) {\n      shifted_added_1 = shifted_added_1 | 2;\n    }\n    uVar5 = (int)uVar5 >> (difference - 0x20 & 0xff);\n    shifted_result_1 = result_2 + uVar5;\n    shifted_input_4 = shifted_input_4 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(result_2,uVar5);\n  }\n  input_2 = shifted_input_4 & 0x80000000;\n  difference = shifted_input_4;\n  if ((int)shifted_input_4 < 0) {\n    check_2 = shifted_added_1 == 0;\n    shifted_added_1 = -shifted_added_1;\n    difference = -shifted_result_1;\n    shifted_result_1 = -(uint)!check_2 - shifted_result_1;\n    difference = -(uint)(check_2 <= difference) - shifted_input_4;\n  }\n  if (0xfffff < difference) {\n    result_2 = shifted_input_2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input_4 = difference & 1;\n      difference = difference >> 1;\n      carry_bit = (byte)shifted_result_1;\n      shifted_result_1 = (uint)(shifted_input_4 != 0) << 0x1f | shifted_result_1 >> 1;\n      shifted_added_1 = (uint)(carry_bit & 1) << 0x1f | shifted_added_1 >> 1;\n      result_2 = shifted_input_2;\n      if (0xffbfffff < shifted_input_2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    check_2 = 0x7fffffff < shifted_added_1;\n    if (shifted_added_1 == 0x80000000) {\n      check_2 = (shifted_result_1 & 1) != 0;\n    }\n    return CONCAT44(difference + result_2 * 0x100000 + (uint)CARRY4(shifted_result_1,(uint)check_2) | input_2,\n                    shifted_result_1 + check_2);\n  }\n  check_1 = (shifted_added_1 & 0x80000000) != 0;\n  shifted_added_1 = shifted_added_1 << 1;\n  result_2 = shifted_result_1 * 2;\n  check_2 = CARRY4(shifted_result_1,shifted_result_1);\n  shifted_result_1 = shifted_result_1 * 2 + (uint)check_1;\n  difference = difference * 2 + (uint)(check_2 || CARRY4(result_2,(uint)check_1));\n  result_2 = shifted_input_2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  uVar5 = shifted_result_1;\n  shifted_input_2 = difference;\n  if (difference == 0) {\n    uVar5 = 0;\n    shifted_input_2 = shifted_result_1;\n  }\n  shifted_bits_2 = LZCOUNT(shifted_input_2);\n  if (difference == 0) {\n    shifted_bits_2 = shifted_bits_2 + 0x20;\n  }\n  shifted_result_1 = shifted_bits_2 - 0xb;\n  check_3 = SBORROW4(shifted_result_1,0x20);\n  difference = shifted_bits_2 - 0x2b;\n  check_2 = (int)difference < 0;\n  check_1 = difference == 0;\n  if ((int)shifted_result_1 < 0x20) {\n    check_3 = SCARRY4(difference,0xc);\n    shifted_bits_2 = shifted_bits_2 + -0x1f;\n    check_2 = shifted_bits_2 < 0;\n    check_1 = shifted_bits_2 == 0;\n    difference = shifted_result_1;\n    if (!check_1 && check_2 == check_3) {\n      uVar5 = shifted_input_2 << (shifted_result_1 & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - shifted_bits_2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (check_1 || check_2 != check_3) {\n    shifted_added_1 = 0x20 - difference;\n  }\n  shifted_input_2 = shifted_input_2 << (difference & 0xff);\n  if (check_1 || check_2 != check_3) {\n    shifted_input_2 = shifted_input_2 | uVar5 >> (shifted_added_1 & 0xff);\n  }\n  if (check_1 || check_2 != check_3) {\n    uVar5 = uVar5 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shifted_result_1 <= (int)result_2) {\n    return CONCAT44(shifted_input_2 + (result_2 - shifted_result_1) * 0x100000 | input_2,uVar5);\n  }\n  difference = ~(result_2 - shifted_result_1);\n  if ((int)difference < 0x1f) {\n    shifted_bits_2 = difference - 0x13;\n    if (shifted_bits_2 != 0 && shifted_bits_2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input_4,uVar5 >> (0x20 - (0xcU - shifted_bits_2) & 0xff) | shifted_input_2 << (0xcU - shifted_bits_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input_2 | shifted_input_2 >> (difference & 0xff),\n                    uVar5 >> (difference & 0xff) | shifted_input_2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input_4,shifted_input_2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_bits_1",
                "bVar2": "carry_bit",
                "uVar4": "result_1",
                "iVar6": "shifted_bits_2",
                "uVar7": "shifted_input_2",
                "uVar8": "result_2",
                "uVar9": "shifted_input_4",
                "uVar10": "difference",
                "uVar11": "shifted_added_1",
                "uVar12": "shifted_result_1",
                "bVar13": "check_1",
                "bVar14": "check_2",
                "bVar15": "check_3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "calculate_shifted_value_08000404",
            "code": "\nulonglong calculateShiftedValue_08000404(uint input)\n\n{\n  uint outputShifted;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint adjustedShiftAmount;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZeroShift;\n  bool isCarrySet;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  outputShifted = 0;\n  leadingZeros = LZCOUNT(absInput);\n  adjustedShiftAmount = leadingZeros + 0x15;\n  isCarrySet = SBORROW4(adjustedShiftAmount,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZeroShift = shiftAmount == 0;\n  if (adjustedShiftAmount < 0x20) {\n    isCarrySet = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZeroShift = leadingZeros + 1 == 0;\n    shiftAmount = adjustedShiftAmount;\n    if (!isZeroShift && isCarrySet == false) {\n      outputShifted = absInput << adjustedShiftAmount;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZeroShift || isNegative != isCarrySet) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZeroShift || isNegative != isCarrySet) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZeroShift || isNegative != isCarrySet) {\n    outputShifted = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (adjustedShiftAmount < 0x433) {\n    return CONCAT44(absInput + (0x432 - adjustedShiftAmount) * 0x100000 | signBit,outputShifted);\n  }\n  shiftAmount = ~(0x432 - adjustedShiftAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    outputShifted >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,outputShifted >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input",
                "uVar1": "outputShifted",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "adjustedShiftAmount",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZeroShift",
                "bVar9": "isCarrySet"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "apply_transformation_08000428",
            "code": "\nulonglong applyTransformation_08000428(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint upperBit;\n  uint uVar2;\n  uint result1;\n  uint result2;\n  uint shiftedInput;\n  int shiftCount;\n  uint temp;\n  uint in_r12;\n  bool bVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  shiftedInput = input << 1;\n  bVar9 = shiftedInput == 0;\n  upperBit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  result2 = (uint)((int)shiftedInput >> 3) >> 1;\n  result1 = upperBit | result2;\n  input = input << 0x1d;\n  if (!bVar9) {\n    param4 = shiftedInput & 0xff000000;\n    bVar9 = param4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = param4 == 0xff000000;\n  }\n  if (!bVar9) {\n    return CONCAT44(result1,input) ^ 0x3800000000000000;\n  }\n  if (shiftedInput == 0 || param4 == 0xff000000) {\n    return CONCAT44(result1,input);\n  }\n  uVar2 = input;\n  shiftedInput = result2;\n  if (result2 == 0) {\n    uVar2 = 0;\n    shiftedInput = input;\n  }\n  shiftCount = LZCOUNT(shiftedInput);\n  if (result2 == 0) {\n    shiftCount = shiftCount + 0x20;\n  }\n  temp = shiftCount - 0xb;\n  bVar10 = SBORROW4(temp,0x20);\n  result2 = shiftCount - 0x2b;\n  bVar9 = (int)result2 < 0;\n  bVar8 = result2 == 0;\n  if ((int)temp < 0x20) {\n    bVar10 = SCARRY4(result2,0xc);\n    shiftCount = shiftCount + -0x1f;\n    bVar9 = shiftCount < 0;\n    bVar8 = shiftCount == 0;\n    result2 = temp;\n    if (!bVar8 && bVar9 == bVar10) {\n      uVar2 = shiftedInput << (temp & 0xff);\n      shiftedInput = shiftedInput >> (0xcU - shiftCount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar8 || bVar9 != bVar10) {\n    in_r12 = 0x20 - result2;\n  }\n  shiftedInput = shiftedInput << (result2 & 0xff);\n  if (bVar8 || bVar9 != bVar10) {\n    shiftedInput = shiftedInput | uVar2 >> (in_r12 & 0xff);\n  }\n  if (bVar8 || bVar9 != bVar10) {\n    uVar2 = uVar2 << (result2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp < 0x381) {\n    return CONCAT44(shiftedInput + (0x380 - temp) * 0x100000 | upperBit,uVar2);\n  }\n  result2 = ~(0x380 - temp);\n  if ((int)result2 < 0x1f) {\n    shiftCount = result2 - 0x13;\n    if (shiftCount != 0 && shiftCount < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,uVar2 >> (0x20 - (0xcU - shiftCount) & 0xff) | shiftedInput << (0xcU - shiftCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(upperBit | shiftedInput >> (result2 & 0xff),\n                    uVar2 >> (result2 & 0xff) | shiftedInput << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,shiftedInput >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "apply_transformation_08000428",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "upperBit",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "shiftedInput",
                "iVar6": "shiftCount",
                "uVar7": "temp"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_shifted_xor_080004d0",
            "code": "\nulonglong calculate_shifted_xor_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong concatenated_result;\n  \n  concatenated_result = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    concatenated_result = calculate_shifted_xor_080004d0_080006ac();\n  }\n  temp1 = (uint)(concatenated_result >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)concatenated_result | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)concatenated_result | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (concatenated_result & 0xffffffff) * (ulonglong)input3;\n    concatenated_result = (concatenated_result & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)concatenated_result;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (concatenated_result >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_shifted_xor_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "concatenated_result"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_shifted_xor_080006ac",
            "code": "\nulonglong calculate_shifted_xor_080006ac(uint num1,uint num2,uint num3,uint num4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool isZero;\n  \n  temp3 = temp5 & num4 >> 0x14;\n  if (temp2 != temp5 && temp3 != temp5) {\n    isZero = (num1 | num2 << 1) == 0;\n    if (!isZero) {\n      isZero = (num3 | num4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n    }\n    if (temp2 == 0) {\n      temp4 = num2 & 0x80000000;\n      do {\n        temp1 = num1 & 0x80000000;\n        num1 = num1 << 1;\n        num2 = num2 * 2 + (uint)(temp1 != 0);\n      } while ((num2 & 0x100000) == 0);\n      num2 = num2 | temp4;\n      if (temp3 != 0) {\n        return CONCAT44(num2,num1);\n      }\n    }\n    do {\n      temp3 = num3 & 0x80000000;\n      num3 = num3 << 1;\n      num4 = num4 * 2 + (uint)(temp3 != 0);\n    } while ((num4 & 0x100000) == 0);\n    return CONCAT44(num2,num1);\n  }\n  isZero = (num1 | num2 << 1) == 0;\n  if (isZero) {\n    num2 = num4;\n    num1 = num3;\n  }\n  if (!isZero) {\n    isZero = (num3 | num4 << 1) == 0;\n  }\n  temp4 = num2;\n  if (((!isZero) && ((temp2 != temp5 || ((num1 | num2 << 0xc) == 0)))) &&\n     ((temp3 != temp5 || (num1 = num3, temp4 = num4, (num3 | num4 << 0xc) == 0)))) {\n    return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp4,num1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_shifted_xor_080006ac",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "convert_floating_point_08000724",
            "code": "\nulonglong convertFloatingPoint_08000724(undefined4 value,uint exponent,uint sign,uint mantissa)\n\n{\n  uint exponentBits;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int diffExp;\n  uint adjustedExponent;\n  uint otherExponentBits;\n  uint exponentBits0;\n  uint exponentBits1;\n  uint diffMantissa;\n  uint exponentBits3;\n  bool isZero;\n  bool bVar15;\n  bool bVar16;\n  undefined8 exponentBits7;\n  \n  exponentBits7 = CONCAT44(exponent,value);\n  exponentBits3 = 0x7ff;\n  uVar7 = exponent >> 0x14 & 0x7ff;\n  isZero = uVar7 == 0;\n  if (!isZero) {\n    otherExponentBits = mantissa >> 0x14 & 0x7ff;\n    isZero = otherExponentBits == 0;\n  }\n  if (!isZero) {\n    isZero = uVar7 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = otherExponentBits == 0x7ff;\n  }\n  if (isZero) {\n    exponentBits7 = extracted_binary_function_08000892();\n  }\n  adjustedExponent = (uint)((ulonglong)exponentBits7 >> 0x20);\n  exponentBits1 = (uint)exponentBits7;\n  diffExp = uVar7 - otherExponentBits;\n  if ((sign | mantissa << 0xc) == 0) {\n    uVar7 = (adjustedExponent ^ mantissa) & 0x80000000 | adjustedExponent & 0xfffff;\n    bVar16 = SCARRY4(diffExp,exponentBits3 >> 1);\n    adjustedExponent = diffExp + (exponentBits3 >> 1);\n    isZero = (int)adjustedExponent < 0;\n    bVar15 = adjustedExponent == 0;\n    if (!bVar15 && isZero == bVar16) {\n      bVar16 = SBORROW4(exponentBits3,adjustedExponent);\n      isZero = (int)(exponentBits3 - adjustedExponent) < 0;\n      bVar15 = exponentBits3 == adjustedExponent;\n    }\n    if (!bVar15 && isZero == bVar16) {\n      uVar7 = uVar7 | adjustedExponent * 0x100000;\n    }\n    if (!bVar15 && isZero == bVar16) {\n      return CONCAT44(uVar7,exponentBits1);\n    }\n    uVar7 = uVar7 | 0x100000;\n    exponentBits3 = 0;\n    bVar15 = SBORROW4(adjustedExponent,1);\n    adjustedExponent = adjustedExponent - 1;\n    isZero = adjustedExponent == 0;\n    uVar3 = adjustedExponent;\n  }\n  else {\n    uVar3 = (mantissa << 0xc) >> 4 | 0x10000000 | sign >> 0x18;\n    exponentBits3 = sign << 8;\n    exponentBits0 = (adjustedExponent << 0xc) >> 4 | 0x10000000 | exponentBits1 >> 0x18;\n    exponentBits1 = exponentBits1 * 0x100;\n    uVar7 = (adjustedExponent ^ mantissa) & 0x80000000;\n    isZero = uVar3 <= exponentBits0;\n    if (exponentBits0 == uVar3) {\n      isZero = exponentBits3 <= exponentBits1;\n    }\n    diffExp = diffExp + (uint)isZero;\n    adjustedExponent = diffExp + 0x3fd;\n    if (isZero == false) {\n      uVar3 = uVar3 >> 1;\n      exponentBits3 = (uint)((sign >> 0x18 & 1) != 0) << 0x1f | exponentBits3 >> 1;\n    }\n    diffMantissa = exponentBits1 - exponentBits3;\n    exponentBits0 = (exponentBits0 - uVar3) - (uint)(exponentBits1 < exponentBits3);\n    uVar4 = uVar3 >> 1;\n    exponentBits = (uint)((uVar3 & 1) != 0) << 0x1f | exponentBits3 >> 1;\n    exponentBits1 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      isZero = exponentBits <= diffMantissa;\n      if (uVar4 < exponentBits0 || exponentBits0 - uVar4 < (uint)isZero) {\n        diffMantissa = diffMantissa - exponentBits;\n        exponentBits1 = exponentBits1 | uVar3;\n        exponentBits0 = (exponentBits0 - uVar4) - (uint)!isZero;\n      }\n      uVar5 = uVar4 >> 1;\n      exponentBits = (uint)((uVar4 & 1) != 0) << 0x1f | exponentBits >> 1;\n      bVar15 = exponentBits <= diffMantissa;\n      isZero = exponentBits0 - uVar5 < (uint)bVar15;\n      exponentBits3 = exponentBits0;\n      if (uVar5 < exponentBits0 || isZero) {\n        diffMantissa = diffMantissa - exponentBits;\n        exponentBits3 = (exponentBits0 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < exponentBits0 || isZero) {\n        exponentBits1 = exponentBits1 | uVar3 >> 1;\n      }\n      exponentBits0 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | exponentBits >> 1;\n      bVar15 = uVar2 <= diffMantissa;\n      isZero = exponentBits3 - exponentBits0 < (uint)bVar15;\n      uVar5 = exponentBits3;\n      if (exponentBits0 < exponentBits3 || isZero) {\n        diffMantissa = diffMantissa - uVar2;\n        uVar5 = (exponentBits3 - exponentBits0) - (uint)!bVar15;\n      }\n      if (exponentBits0 < exponentBits3 || isZero) {\n        exponentBits1 = exponentBits1 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      exponentBits = (uint)((exponentBits0 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = exponentBits <= diffMantissa;\n      isZero = uVar5 - uVar6 < (uint)bVar15;\n      exponentBits0 = uVar5;\n      if (uVar6 < uVar5 || isZero) {\n        diffMantissa = diffMantissa - exponentBits;\n        exponentBits0 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || isZero) {\n        exponentBits1 = exponentBits1 | uVar3 >> 3;\n      }\n      exponentBits3 = exponentBits0 | diffMantissa;\n      if (exponentBits3 == 0) break;\n      exponentBits0 = exponentBits0 << 4 | diffMantissa >> 0x1c;\n      diffMantissa = diffMantissa << 4;\n      uVar4 = uVar4 & 0xfffffff8 | exponentBits >> 0x1d;\n      exponentBits = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | exponentBits1;\n        exponentBits1 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | exponentBits1;\n      exponentBits1 = 0;\n    }\nLAB_08000842:\n    bVar16 = 0xfc < adjustedExponent;\n    bVar15 = SBORROW4(adjustedExponent,0xfd);\n    uVar4 = diffExp + 0x300;\n    isZero = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !isZero) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = diffExp - 0x400;\n      isZero = uVar4 == 0x700;\n    }\n    if (!bVar16 || isZero) {\n      isZero = uVar6 <= exponentBits0;\n      if (exponentBits0 == uVar6) {\n        isZero = exponentBits <= diffMantissa;\n      }\n      if (exponentBits0 == uVar6 && diffMantissa == exponentBits) {\n        isZero = (exponentBits1 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + adjustedExponent * 0x100000 + (uint)CARRY4(exponentBits1,(uint)isZero),exponentBits1 + isZero);\n    }\n  }\n  if (!isZero && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(adjustedExponent,0x36);\n  isZero = (int)(adjustedExponent + 0x36) < 0;\n  bVar15 = adjustedExponent == 0xffffffca;\n  if (bVar15 || isZero != bVar16) {\n    exponentBits1 = 0;\n  }\n  if (bVar15 || isZero != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || isZero != bVar16) {\n    return CONCAT44(uVar7,exponentBits1);\n  }\n  uVar3 = -adjustedExponent;\n  exponentBits0 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = exponentBits1 >> (exponentBits0 & 0xff) | uVar7 << (0x20 - exponentBits0 & 0xff);\n    adjustedExponent = (uVar7 >> (exponentBits0 & 0xff) & ~((uVar7 & 0x80000000) >> (exponentBits0 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((exponentBits3 | exponentBits1 << (0x20 - exponentBits0 & 0xff) | uVar3 << 1) == 0) {\n      adjustedExponent = adjustedExponent & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,adjustedExponent) & 0x80000000ffffffff;\n  }\n  diffExp = uVar3 - 0x14;\n  if (diffExp != 0 && diffExp < 0 == SCARRY4(exponentBits0,0xc)) {\n    adjustedExponent = 0xc - diffExp;\n    uVar3 = exponentBits1 << (adjustedExponent & 0xff);\n    exponentBits1 = exponentBits1 >> (0x20 - adjustedExponent & 0xff) | uVar7 << (adjustedExponent & 0xff);\n    adjustedExponent = exponentBits1 + -((int)uVar3 >> 0x1f);\n    if ((exponentBits3 | uVar3 << 1) == 0) {\n      adjustedExponent = adjustedExponent & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(exponentBits1,-((int)uVar3 >> 0x1f)),adjustedExponent);\n  }\n  exponentBits0 = exponentBits1 << (adjustedExponent + 0x20 & 0xff);\n  exponentBits1 = exponentBits1 >> (uVar3 & 0xff) | uVar7 << (adjustedExponent + 0x20 & 0xff);\n  adjustedExponent = exponentBits1 + -((int)exponentBits0 >> 0x1f);\n  if ((exponentBits3 | exponentBits0 << 1) == 0) {\n    adjustedExponent = adjustedExponent & ~(exponentBits0 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(exponentBits1,-((int)exponentBits0 >> 0x1f)),adjustedExponent);\n}\n\n",
            "renaming": {
                "FUN_08000724": "convert_floating_point_08000724",
                "param_1": "value",
                "param_2": "exponent",
                "param_3": "sign",
                "param_4": "mantissa",
                "uVar1": "exponentBits",
                "iVar8": "diffExp",
                "uVar9": "adjustedExponent",
                "unaff_r5": "otherExponentBits",
                "uVar12": "diffMantissa",
                "bVar14": "isZero"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "extracted_binary_function_08000892",
            "code": "\nulonglong extracted_binary_function_08000892(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  bool temp_var_6;\n  \n  temp_var_3 = temp_var_5 & input_param_4 >> 0x14;\n  temp_var_4 = input_param_2;\n  if (temp_var_2 != temp_var_5 || temp_var_3 != temp_var_5) {\n    if (temp_var_2 == temp_var_5) {\n      if (((input_param_1 | input_param_2 << 0xc) == 0) && (input_param_1 = input_param_3, temp_var_4 = input_param_4, temp_var_3 != temp_var_5)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp_var_3 == temp_var_5) {\n      input_param_1 = input_param_3;\n      temp_var_4 = input_param_4;\n      if ((input_param_3 | input_param_4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      temp_var_6 = (input_param_1 | input_param_2 << 1) == 0;\n      if (!temp_var_6) {\n        temp_var_6 = (input_param_3 | input_param_4 << 1) == 0;\n      }\n      if (!temp_var_6) {\n        if (temp_var_2 == 0) {\n          temp_var_4 = input_param_2 & 0x80000000;\n          do {\n            temp_var_1 = input_param_1 & 0x80000000;\n            input_param_1 = input_param_1 << 1;\n            input_param_2 = input_param_2 * 2 + (uint)(temp_var_1 != 0);\n          } while ((input_param_2 & 0x100000) == 0);\n          input_param_2 = input_param_2 | temp_var_4;\n          if (temp_var_3 != 0) {\n            return CONCAT44(input_param_2,input_param_1);\n          }\n        }\n        do {\n          temp_var_4 = input_param_3 & 0x80000000;\n          input_param_3 = input_param_3 << 1;\n          input_param_4 = input_param_4 * 2 + (uint)(temp_var_4 != 0);\n        } while ((input_param_4 & 0x100000) == 0);\n        return CONCAT44(input_param_2,input_param_1);\n      }\n      if ((input_param_1 | input_param_2 << 1) != 0) goto LAB_08000704;\n      if ((input_param_3 | input_param_4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp_var_4,input_param_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "extracted_binary_function_08000892",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_var_1",
                "unaff_r4": "temp_var_2",
                "uVar2": "temp_var_3",
                "uVar3": "temp_var_4",
                "in_r12": "temp_var_5",
                "bVar4": "temp_var_6"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "compare_values_08000904",
            "code": "\nuint compareValues_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xorResult;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    xorResult = value2 ^ value4;\n    isZero = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)xorResult && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "compare_values_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xorResult",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "compare_and_return_param_08000980",
            "code": "\nvoid compareAndReturnParam_08000980(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3,undefined4 parameter4)\n\n{\n  compare_and_return_param_08000990(parameter3,parameter4,parameter1,parameter2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "compare_and_return_param_08000980",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "compare_and_return_param_08000990",
            "code": "\nundefined4 compare_and_return_param_08000990(undefined4 input_param)\n\n{\n  compare_values();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000990": "compare_and_return_param_08000990",
                "param_1": "input_param",
                "compare_values_08000904": "compare_values"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_param_not_null_080009a0",
            "code": "\nbool check_if_param_not_null_080009a0(void)\n\n{\n  char result;\n  \n  compare_and_return_param_08000990();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_param_not_null_080009a0",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_if_empty_string_080009b4",
            "code": "\nbool check_if_empty_string_080009b4(void)\n\n{\n  char input_character;\n  \n  compare_and_return_param_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_if_empty_string_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_and_return_zero_080009c8",
            "code": "\nbool check_and_return_zero_080009c8(void)\n\n{\n  undefined is_zero_flag;\n  undefined is_carry_flag;\n  \n  compare_and_return_param_08000990();\n  return !(bool)is_carry_flag || (bool)is_zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_and_return_zero_080009c8",
                "in_ZR": "is_zero_flag",
                "in_CY": "is_carry_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_null_termination_080009f0",
            "code": "\nbool check_null_termination_080009f0(void)\n\n{\n  char input_char;\n  \n  compare_and_return_param_08000980();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_null_termination_080009f0",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_params_08000a04",
            "code": "\nundefined4 check_params_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_params_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint inputFloat,uint inputBits)\n\n{\n  uint result;\n  uint doubledBits;\n  uint adjustedBits;\n  uint alternateAdjustedBits;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  doubledBits = inputBits * 2;\n  isLessThanThreshold = doubledBits < 0x70000000;\n  adjustedBits = doubledBits + 0x90000000;\n  result = adjustedBits;\n  if (!isLessThanThreshold) {\n    alternateAdjustedBits = doubledBits + 0x8fe00000;\n    result = alternateAdjustedBits;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && adjustedBits >= 0x200000) {\n    isZero = alternateAdjustedBits == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || adjustedBits < 0x200000) || 0x1fc00000 < alternateAdjustedBits) || isZero) {\n    if ((inputBits & 0x40000000) != 0) {\n      if (((int)doubledBits >> 0x15 == -1) && ((inputFloat | inputBits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputBits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(doubledBits + 0x92e00000) < 0 != SCARRY4(adjustedBits,0x2e00000)) {\n      return inputBits & 0x80000000;\n    }\n    doubledBits = 0x18 - (doubledBits + 0x92e00000 >> 0x15);\n    result = inputFloat >> (doubledBits & 0xff);\n    if (inputFloat << (0x20 - doubledBits & 0xff) != 0) {\n      result = result | 1;\n    }\n    adjustedBits = inputBits & 0x1fffff | 0x100000;\n    inputFloat = result | adjustedBits << (0x20 - doubledBits & 0xff);\n    adjustedBits = (adjustedBits >> (doubledBits & 0xff)) << 1;\n  }\n  result = (inputBits & 0x80000000 | inputFloat >> 0x1d) + adjustedBits * 4 + (uint)(0x7fffffff < inputFloat * 8);\n  if (inputFloat * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "inputFloat",
                "param_2": "inputBits",
                "uVar1": "result",
                "uVar2": "doubledBits",
                "uVar3": "adjustedBits",
                "in_r12": "alternateAdjustedBits",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_floating_point_08000ad8",
            "code": "\nuint calculateFloatingPoint_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shift1;\n  int shift2;\n  uint input2XorMSB;\n  uint shiftedInput1;\n  uint temp1;\n  uint temp2;\n  uint shiftedDifference;\n  bool checkCondition;\n  \n  input2XorMSB = input2 ^ 0x80000000;\n  temp1 = input1 << 1;\n  checkCondition = temp1 == 0;\n  if (!checkCondition) {\n    input4 = input2 << 1;\n    checkCondition = input4 == 0;\n  }\n  if (!checkCondition) {\n    checkCondition = temp1 == input4;\n  }\n  shift1 = (int)temp1 >> 0x18;\n  if (!checkCondition) {\n    checkCondition = shift1 == -1;\n  }\n  if (!checkCondition) {\n    checkCondition = (int)input4 >> 0x18 == -1;\n  }\n  if (checkCondition) {\n    shift2 = (int)(input2 << 1) >> 0x18;\n    if (shift1 == -1 || shift2 == -1) {\n      temp1 = input2XorMSB;\n      if (shift1 == -1) {\n        temp1 = input1;\n      }\n      if (shift1 != -1 || shift2 != -1) {\n        input2XorMSB = temp1;\n      }\n      checkCondition = (temp1 & 0x7fffff) == 0;\n      if (checkCondition) {\n        checkCondition = (input2XorMSB & 0x7fffff) == 0;\n      }\n      if (checkCondition) {\n        checkCondition = temp1 == input2XorMSB;\n      }\n      if (!checkCondition) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2XorMSB) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2XorMSB;\n      }\n      return input1;\n    }\n    if (input1 != input2XorMSB) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      input2XorMSB = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        input2XorMSB = input2XorMSB | 0x80000000;\n      }\n      return input2XorMSB;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  shiftedDifference = input4 - temp1;\n  checkCondition = shiftedDifference != 0;\n  temp2 = temp1;\n  if (checkCondition && temp1 <= input4) {\n    temp2 = temp1 + shiftedDifference;\n  }\n  if (checkCondition && temp1 <= input4) {\n    input2XorMSB = input2XorMSB ^ input1;\n  }\n  if (checkCondition && temp1 <= input4) {\n    input1 = input1 ^ input2XorMSB;\n  }\n  if (checkCondition && temp1 <= input4) {\n    input2XorMSB = input2XorMSB ^ input1;\n  }\n  if (input4 < temp1) {\n    shiftedDifference = -shiftedDifference;\n  }\n  if (0x19 < shiftedDifference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  shiftedInput1 = input2XorMSB & 0xffffff | 0x800000;\n  if ((input2XorMSB & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  if (temp2 == shiftedDifference) {\n    shiftedInput1 = shiftedInput1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      shiftedDifference = shiftedDifference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)shiftedInput1 >> (shiftedDifference & 0xff));\n  shiftedInput1 = shiftedInput1 << (0x20 - shiftedDifference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    checkCondition = shiftedInput1 != 0;\n    shiftedInput1 = -shiftedInput1;\n    temp1 = -temp1 - (uint)checkCondition;\n  }\n  if (temp1 < 0x800000) {\n    input2XorMSB = shiftedInput1 & 0x80000000;\n    shiftedInput1 = shiftedInput1 << 1;\n    temp1 = temp1 * 2 + (uint)(input2XorMSB != 0);\n    input2XorMSB = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      shiftedDifference = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (shiftedDifference & 0xff);\n      if ((int)input2XorMSB < (int)shiftedDifference) {\n        temp1 = temp1 >> (-(input2XorMSB - shiftedDifference) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (input2XorMSB - shiftedDifference) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    input2XorMSB = temp2 - 1;\n    if (0xffffff < temp1) {\n      input2XorMSB = temp1 & 1;\n      temp1 = temp1 >> 1;\n      shiftedInput1 = (uint)(input2XorMSB != 0) << 0x1f | shiftedInput1 >> 1;\n      input2XorMSB = temp2;\n      if (0xfd < temp2) goto LAB_08000c12;\n    }\n  }\n  temp1 = temp1 + input2XorMSB * 0x800000 + (uint)(0x7fffffff < shiftedInput1);\n  if (shiftedInput1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_floating_point_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "iVar2": "shift2",
                "uVar3": "input2XorMSB",
                "uVar4": "shiftedInput1",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "shiftedDifference",
                "bVar8": "checkCondition"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_result_08000adc",
            "code": "\nuint calculateFloatResult_08000adc(uint inputValue1,uint inputValue2,undefined4 param3,uint param4)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint floatValue1;\n  uint floatValue2;\n  uint tempValue1;\n  uint tempValue2;\n  bool isZero;\n  \n  floatValue2 = inputValue1 << 1;\n  isZero = floatValue2 == 0;\n  if (!isZero) {\n    param4 = inputValue2 << 1;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = floatValue2 == param4;\n  }\n  shiftedValue1 = (int)floatValue2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedValue1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)param4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedValue2 = (int)(inputValue2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      floatValue2 = inputValue2;\n      if (shiftedValue1 == -1) {\n        floatValue2 = inputValue1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        inputValue2 = floatValue2;\n      }\n      isZero = (floatValue2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (inputValue2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = floatValue2 == inputValue2;\n      }\n      if (!isZero) {\n        floatValue2 = floatValue2 | 0x400000;\n      }\n      return floatValue2;\n    }\n    if (((inputValue1 ^ inputValue2) & 0x7fffffff) != 0) {\n      if (floatValue2 == 0) {\n        inputValue1 = inputValue2;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != inputValue2) {\n      return 0;\n    }\n    if ((floatValue2 & 0xff000000) == 0) {\n      floatValue2 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        floatValue2 = floatValue2 | 0x80000000;\n      }\n      return floatValue2;\n    }\n    if (floatValue2 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_08000c12:\n    return inputValue1 | 0x7f800000;\n  }\n  floatValue2 = floatValue2 >> 0x18;\n  param4 = param4 >> 0x18;\n  tempValue2 = param4 - floatValue2;\n  isZero = tempValue2 != 0;\n  tempValue1 = floatValue2;\n  if (isZero && floatValue2 <= param4) {\n    tempValue1 = floatValue2 + tempValue2;\n  }\n  if (isZero && floatValue2 <= param4) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (isZero && floatValue2 <= param4) {\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  if (isZero && floatValue2 <= param4) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (param4 < floatValue2) {\n    tempValue2 = -tempValue2;\n  }\n  if (0x19 < tempValue2) {\n    return inputValue1;\n  }\n  floatValue2 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    floatValue2 = -floatValue2;\n  }\n  floatValue1 = inputValue2 & 0xffffff | 0x800000;\n  if ((inputValue2 & 0x80000000) != 0) {\n    floatValue1 = -floatValue1;\n  }\n  if (tempValue1 == tempValue2) {\n    floatValue1 = floatValue1 ^ 0x800000;\n    if (tempValue1 == 0) {\n      floatValue2 = floatValue2 ^ 0x800000;\n      tempValue1 = 1;\n    }\n    else {\n      tempValue2 = tempValue2 - 1;\n    }\n  }\n  floatValue2 = floatValue2 + ((int)floatValue1 >> (tempValue2 & 0xff));\n  floatValue1 = floatValue1 << (0x20 - tempValue2 & 0xff);\n  inputValue1 = floatValue2 & 0x80000000;\n  if ((int)floatValue2 < 0) {\n    isZero = floatValue1 != 0;\n    floatValue1 = -floatValue1;\n    floatValue2 = -floatValue2 - (uint)isZero;\n  }\n  if (floatValue2 < 0x800000) {\n    tempValue2 = floatValue1 & 0x80000000;\n    floatValue1 = floatValue1 << 1;\n    floatValue2 = floatValue2 * 2 + (uint)(tempValue2 != 0);\n    tempValue2 = tempValue1 - 2;\n    if ((floatValue2 & 0x800000) == 0) {\n      tempValue1 = LZCOUNT(floatValue2) - 8;\n      floatValue2 = floatValue2 << (tempValue1 & 0xff);\n      if ((int)tempValue2 < (int)tempValue1) {\n        floatValue2 = floatValue2 >> (-(tempValue2 - tempValue1) & 0xff);\n      }\n      else {\n        floatValue2 = floatValue2 + (tempValue2 - tempValue1) * 0x800000;\n      }\n      return floatValue2 | inputValue1;\n    }\n  }\n  else {\n    tempValue2 = tempValue1 - 1;\n    if (0xffffff < floatValue2) {\n      tempValue2 = floatValue2 & 1;\n      floatValue2 = floatValue2 >> 1;\n      floatValue1 = (uint)(tempValue2 != 0) << 0x1f | floatValue1 >> 1;\n      tempValue2 = tempValue1;\n      if (0xfd < tempValue1) goto LAB_08000c12;\n    }\n  }\n  floatValue2 = floatValue2 + tempValue2 * 0x800000 + (uint)(0x7fffffff < floatValue1);\n  if (floatValue1 == 0x80000000) {\n    floatValue2 = floatValue2 & 0xfffffffe;\n  }\n  return floatValue2 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_result_08000adc",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "floatValue1",
                "uVar4": "floatValue2",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_result_08000c3c",
            "code": "\nuint calculateResult_08000c3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constant1;\n  uint maskedValue;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  constant1 = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    maskedValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = constant1 + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < maskedValue);\n    if (maskedValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = constant1 + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_result_08000c3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constant1",
                "uVar4": "maskedValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_value_08000c44",
            "code": "\nuint calculate_value_08000c44(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_value_08000c44",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint inputA,uint inputB,undefined4 unusedInput,uint bitMask)\n\n{\n  longlong lVar1;\n  uint result;\n  uint byteA;\n  int sum;\n  int sumDiff;\n  uint multiplyResult;\n  int sumTemp;\n  uint tempA;\n  bool checkA;\n  bool checkB;\n  \n  byteA = inputA >> 0x17 & 0xff;\n  checkA = byteA == 0;\n  if (!checkA) {\n    bitMask = inputB >> 0x17 & 0xff;\n    checkA = bitMask == 0;\n  }\n  if (!checkA) {\n    checkA = byteA == 0xff;\n  }\n  if (!checkA) {\n    checkA = bitMask == 0xff;\n  }\n  if (checkA) {\n    bitMask = inputB >> 0x17 & 0xff;\n    if (byteA == 0xff || bitMask == 0xff) {\n      checkA = inputA == 0 || inputA == 0x80000000;\n      result = inputB;\n      if (inputA != 0 && inputA != 0x80000000) {\n        checkA = inputB == 0;\n        result = inputA;\n      }\n      if (!checkA) {\n        checkA = inputB == 0x80000000;\n      }\n      tempA = result;\n      if (((checkA) || ((byteA == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((bitMask == 0xff && (tempA = inputB, (inputB & 0x7fffff) != 0)))) {\n        return tempA | 0x7fc00000;\n      }\n      result = result ^ inputB;\n      goto LAB_08000e3c;\n    }\n    checkA = (inputA & 0x7fffffff) == 0;\n    if (!checkA) {\n      checkA = (inputB & 0x7fffffff) == 0;\n    }\n    if (checkA) {\n      return (inputA ^ inputB) & 0x80000000;\n    }\n    checkA = byteA == 0;\n    result = inputA & 0x80000000;\n    while( true ) {\n      if (checkA) {\n        inputA = inputA << 1;\n        checkA = (inputA & 0x800000) == 0;\n      }\n      if (!checkA) break;\n      byteA = byteA - 1;\n    }\n    inputA = inputA | result;\n    checkA = bitMask == 0;\n    result = inputB & 0x80000000;\n    while( true ) {\n      if (checkA) {\n        inputB = inputB << 1;\n        checkA = (inputB & 0x800000) == 0;\n      }\n      if (!checkA) break;\n      bitMask = bitMask - 1;\n    }\n    inputB = inputB | result;\n  }\n  sum = byteA + bitMask;\n  tempA = inputA ^ inputB;\n  byteA = inputA << 9;\n  checkA = byteA == 0;\n  if (!checkA) {\n    inputB = inputB << 9;\n    checkA = inputB == 0;\n  }\n  if (checkA) {\n    if (byteA == 0) {\n      inputB = inputB << 9;\n    }\n    result = tempA & 0x80000000 | inputA & 0x7fffff | inputB >> 9;\n    checkB = SBORROW4(sum,0x7f);\n    sumDiff = sum + -0x7f;\n    checkA = sumDiff == 0;\n    sumTemp = sumDiff;\n    if (!checkA && 0x7e < sum) {\n      checkB = SBORROW4(0xff,sumDiff);\n      sumTemp = 0xff - sumDiff;\n      checkA = sumDiff == 0xff;\n    }\n    if (!checkA && sumTemp < 0 == checkB) {\n      result = result | sumDiff * 0x800000;\n    }\n    if (!checkA && sumTemp < 0 == checkB) {\n      return result;\n    }\n    result = result | 0x800000;\n    multiplyResult = 0;\n    checkB = SBORROW4(sumDiff,1);\n    tempA = sum - 0x80;\n    checkA = tempA == 0;\n    byteA = tempA;\n  }\n  else {\n    lVar1 = (ulonglong)(byteA >> 5 | 0x8000000) * (ulonglong)(inputB >> 5 | 0x8000000);\n    multiplyResult = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    checkA = result < 0x800000;\n    if (checkA) {\n      result = result << 1;\n    }\n    if (checkA) {\n      result = result | multiplyResult >> 0x1f;\n      multiplyResult = multiplyResult << 1;\n    }\n    result = tempA & 0x80000000 | result;\n    tempA = (sum + -0x7f) - (uint)checkA;\n    checkB = SBORROW4(tempA,0xfd);\n    checkA = tempA == 0xfd;\n    byteA = tempA - 0xfd;\n    if (tempA < 0xfe) {\n      result = result + tempA * 0x800000 + (uint)(0x7fffffff < multiplyResult);\n      if (multiplyResult == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (checkA || (int)byteA < 0 != checkB) {\n    checkA = (int)(tempA + 0x19) < 0;\n    if (tempA == 0xffffffe7 || checkA != SCARRY4(tempA,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (tempA != 0xffffffe7 && checkA == SCARRY4(tempA,0x19)) {\n      byteA = (result << 1) >> (-tempA & 0xff);\n      tempA = result << (tempA + 0x20 & 0xff);\n      byteA = ((uint)((result & 0x80000000) != 0) << 0x1f | byteA >> 1) + (uint)((byte)byteA & 1);\n      if ((multiplyResult | tempA << 1) == 0) {\n        byteA = byteA & ~(tempA >> 0x1f);\n      }\n      return byteA;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "unusedInput",
                "param_4": "bitMask",
                "uVar3": "byteA",
                "uVar2": "result",
                "uVar6": "multiplyResult",
                "uVar8": "tempA",
                "bVar9": "checkA",
                "bVar10": "checkB",
                "iVar4": "sum",
                "iVar5": "sumDiff",
                "iVar7": "sumTemp"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_08000e54",
            "code": "\nuint calculateFloatingPoint_08000e54(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp2 = value1 >> 0x17 & 0xff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    param4 = value2 >> 0x17 & 0xff;\n    flag1 = param4 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = param4 == 0xff;\n  }\n  if (flag1) {\n    param4 = value2 >> 0x17 & 0xff;\n    temp6 = value1;\n    if (temp2 == 0xff) {\n      if (((value1 & 0x7fffff) != 0) || (temp6 = value2, param4 == 0xff)) {\nLAB_08000e4a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        temp6 = value2;\n        if ((value2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (value1 ^ value2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      flag1 = (value1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (value2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = temp2 == 0;\n        temp6 = value1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            value1 = value1 << 1;\n            flag1 = (value1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          temp2 = temp2 - 1;\n        }\n        value1 = value1 | temp6;\n        flag1 = param4 == 0;\n        temp6 = value2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            value2 = value2 << 1;\n            flag1 = (value2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          param4 = param4 - 1;\n        }\n        value2 = value2 | temp6;\n        goto LAB_08000e6c;\n      }\n      if ((value1 & 0x7fffffff) == 0) {\n        if ((value2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    value1 = value1 ^ value2;\n  }\n  else {\nLAB_08000e6c:\n    temp3 = temp2 - param4;\n    if (value2 << 9 == 0) {\n      value1 = (value1 ^ value2) & 0x80000000 | value1 & 0x7fffff;\n      flag3 = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      flag1 = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp5);\n        flag1 = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        value1 = value1 | temp5 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return value1;\n      }\n      value1 = value1 | 0x800000;\n      temp2 = 0;\n      flag2 = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      flag1 = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (value2 << 9) >> 4 | 0x10000000;\n      temp2 = (value1 << 9) >> 4 | 0x10000000;\n      value1 = (value1 ^ value2) & 0x80000000;\n      flag1 = temp1 <= temp2;\n      if (!flag1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)flag1;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          value1 = value1 | temp6;\n        }\n        flag1 = temp1 >> 1 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (flag1) {\n          value1 = value1 | temp6 >> 1;\n        }\n        flag1 = temp1 >> 2 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (flag1) {\n          value1 = value1 | temp6 >> 2;\n        }\n        flag1 = temp1 >> 3 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (flag1) {\n          value1 = value1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        flag1 = temp2 == 0;\n        if (!flag1) {\n          temp6 = temp6 >> 4;\n          flag1 = temp6 == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp4,0xfd);\n      flag1 = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        value1 = value1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          value1 = value1 & 0xfffffffe;\n        }\n        return value1;\n      }\n    }\n    if (flag1 || (int)temp6 < 0 != flag2) {\n      flag1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        value1 = value1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        return value1;\n      }\n      temp6 = (value1 << 1) >> (-temp4 & 0xff);\n      temp4 = value1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((value1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return value1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_08000e54",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculate_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_input;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_params_08000ffc",
            "code": "\nvoid concatenateParams_08000ffc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_params_08001004(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_params_08000ffc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenate_params_08001004(undefined4 first_param,undefined4 second_param)\n\n{\n  calculate_result();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "first_param",
                "param_2": "second_param",
                "calculate_result_08000f9c": "calculate_result"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenated_params_08001014",
            "code": "\nbool check_concatenated_params_08001014(void)\n\n{\n  char is_not_null;\n  \n  perform_param_concatenation();\n  return is_not_null != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenated_params_08001014",
                "in_ZR": "is_not_null",
                "concatenate_params_08001004": "perform_param_concatenation"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_concatenation_successful_08001028",
            "code": "\nbool check_if_concatenation_successful_08001028(void)\n\n{\n  char concatenation_result;\n  \n  concatenate_params_08001004();\n  return concatenation_result == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_concatenation_successful_08001028",
                "in_CY": "concatenation_result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenation_result_08001050",
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined is_concatenation_zero;\n  undefined is_concatenation_carry_set;\n  \n  concatenate_params_08000ffc();\n  return !(bool)is_concatenation_carry_set || (bool)is_concatenation_zero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "in_ZR": "is_concatenation_zero",
                "in_CY": "is_concatenation_carry_set"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_null_termination_08001064",
            "code": "\nbool check_null_termination_08001064(void)\n\n{\n  char input_character;\n  \n  concatenate_params_08000ffc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_null_termination_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extracted_value_to_integer_conversion_08001078",
            "code": "\nuint extractedValueToIntegerConversion_08001078(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extracted_value_to_integer_conversion_08001078",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "calculate_result_080010c4",
            "code": "\nuint calculateResult_080010c4(uint inputParam)\n\n{\n  uint result;\n  \n  if (((inputParam & 0x80000000) != 0) || (inputParam << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((inputParam << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (inputParam << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((inputParam & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "calculate_result_080010c4",
                "param_1": "inputParam",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_process_08001104",
            "code": "\nundefined4 initializeProcess_08001104(undefined4 inputArg)\n\n{\n  uint data;\n  \n  data = getData();\n  checkLimit(data / 1000);\n  setConditions(0xffffffff,inputArg,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_process_08001104",
                "param_1": "inputArg",
                "uVar1": "data",
                "get_data_08002214": "getData",
                "limit_check_08001214": "checkLimit",
                "set_bits_with_conditions_08001194": "setConditions"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_and_configure_system_08001128",
            "code": "\n\n\nundefined4 initialize_and_configure_system_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_memory_protection(3);\n  initialize_process(0);\n  initialize_memory_protection();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_and_configure_system_08001128",
                "configure_memory_protection_08001170": "configure_memory_protection",
                "initialize_process_08001104": "initialize_process",
                "initialize_memory_protection_08004ccc": "initialize_memory_protection"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_dat_value_0800115c",
            "code": "\nundefined4 get_dat_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_dat_value_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_protection_08001170",
            "code": "\n\n\nvoid configureMemoryProtection_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_protection_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "set_bits_with_conditions_08001194",
            "code": "\n\n\nvoid setBitsWithConditions_08001194(uint inputA,uint inputB,uint inputC)\n\n{\n  undefined result;\n  uint shiftAmount;\n  uint maskBitPosition;\n  uint modifiedMaskBitPosition;\n  \n  maskBitPosition = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - maskBitPosition;\n  modifiedMaskBitPosition = maskBitPosition + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (modifiedMaskBitPosition < 7) {\n    maskBitPosition = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < modifiedMaskBitPosition) {\n    maskBitPosition = maskBitPosition - 3;\n  }\n  result = (undefined)\n          ((inputC & (1 << (maskBitPosition & 0xff)) - 1U | (inputB & shiftAmount) << (maskBitPosition & 0xff)) << 4);\n  if (-1 < (int)inputA) {\n    maskBitPosition = inputA + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    maskBitPosition = inputA & 0xf;\n  }\n  if (-1 < (int)inputA) {\n    *(undefined *)(maskBitPosition + 0x300) = result;\n  }\n  else {\n    *(undefined *)(shiftAmount + maskBitPosition) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "set_bits_with_conditions_08001194",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "uVar3": "maskBitPosition",
                "uVar4": "modifiedMaskBitPosition"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint index)\n\n{\n  *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "index"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "limit_check_08001214",
            "code": "\n\n\nundefined4 limit_check_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "limit_check_08001214",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid setFlag_08001240(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_bits_08001264",
            "code": "\n\n\nvoid updateBits_08001264(uint *result,uint *bits)\n\n{\n  uint mask;\n  uint bitCheck;\n  uint bitValue;\n  int index;\n  uint i;\n  uint bitPosition;\n  uint flag;\n  uint *resultPtr;\n  int shiftAmount;\n  \n  mask = 0;\n  i = 0;\n  do {\n    bitPosition = 1 << (i & 0xff);\n    bitCheck = bitPosition & *bits;\n    if (bitPosition == bitCheck) {\n      bitValue = bits[1];\n      if (bitValue == 0x12) {\n        mask = bits[3] + 0xc;\n      }\n      else if (bitValue < 0x13) {\n        if (bitValue == 2) {\n          mask = bits[3] + 8;\n        }\n        else if (bitValue < 3) {\n          if (bitValue == 0) goto LAB_080013be;\n          if (bitValue == 1) {\n            mask = bits[3];\n          }\n        }\n        else if (bitValue == 3) {\n          mask = 0;\n        }\n        else if (bitValue == 0x11) {\n          mask = bits[3] + 4;\n        }\n      }\n      else {\n        if (bitValue != 0x10210000) {\n          if (bitValue < 0x10210001) {\n            if (bitValue != 0x10110000) {\n              flag = 0x10120000;\nLAB_080013b8:\n              if (bitValue != flag) goto LAB_080012a8;\n            }\n          }\n          else if ((bitValue != 0x10310000) && (bitValue != 0x10320000)) {\n            flag = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        mask = bits[2];\n        if (mask == 0) {\n          mask = 4;\n        }\n        else {\n          if (mask == 1) {\n            result[4] = bitPosition;\n          }\n          if (mask != 1) {\n            result[5] = bitPosition;\n          }\n          mask = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitCheck < 0x100) {\n        bitPosition = *result;\n        bitValue = i << 2;\n        resultPtr = result;\n      }\n      else {\n        bitPosition = result[1];\n        bitValue = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitCheck) {\n        resultPtr = result + 1;\n      }\n      *resultPtr = bitPosition & ~(0xf << (bitValue & 0xff)) | mask << (bitValue & 0xff);\n      resultPtr = (uint *)bits[1];\n      if (((uint)resultPtr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount = (i & 3) << 2;\n        if (result == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (result == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (result == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (result == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             index << shiftAmount | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << shiftAmount);\n        if (((uint)resultPtr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitCheck;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitCheck;\n        }\n        if (((uint)resultPtr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitCheck;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitCheck;\n        }\n        if (((uint)resultPtr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitCheck;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitCheck;\n        }\n        if (((uint)resultPtr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitCheck;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_bits_08001264",
                "param_1": "result",
                "param_2": "bits",
                "uVar1": "mask",
                "uVar2": "bitCheck",
                "uVar3": "bitValue",
                "iVar4": "index",
                "uVar5": "i",
                "uVar6": "bitPosition",
                "uVar7": "flag",
                "unaff_r10": "resultPtr",
                "iVar8": "shiftAmount"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int shift_flag)\n\n{\n  if (shift_flag == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "shift_flag"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_param_with_variable_0800142e",
            "code": "\nvoid xorParamWithVariable_0800142e(int inputPointer,uint value)\n\n{\n  *(uint *)(inputPointer + 0xc) = value ^ *(uint *)(inputPointer + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_param_with_variable_0800142e",
                "param_1": "inputPointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "update_flag_and_values_08001436",
            "code": "\nundefined4 updateFlagAndValues_08001436(int *ptr)\n\n{\n  int value;\n  \n  value = *ptr;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)ptr + 0x35) = 0x20;\n    *(undefined *)(ptr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "update_flag_and_values_08001436",
                "param_1": "ptr",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_flag_validity_08001460",
            "code": "\nundefined4 checkFlagValidity_08001460(uint **pointerArray,uint flag,uint timeElapsed)\n\n{\n  int datValue;\n  int currentDatValue;\n  uint value;\n  uint *pointer;\n  \n  datValue = get_dat_value_0800115c();\n  do {\n    pointer = *pointerArray;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = pointer[5];\n    }\n    else {\n      value = pointer[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(pointer[5] << 0x15) < 0) {\n      *pointer = *pointer | 0x200;\n      pointer[5] = pointer[5] & 0xfffffbff;\n      pointerArray[0xe] = (uint *)0x4;\n      *(undefined *)((int)pointerArray + 0x35) = 0x20;\n      *(undefined *)(pointerArray + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeElapsed == 0xffffffff) ||\n          ((timeElapsed != 0 && (currentDatValue = get_dat_value_0800115c(), (uint)(currentDatValue - datValue) <= timeElapsed))));\n  *(undefined *)((int)pointerArray + 0x35) = 0x20;\n  *(undefined *)(pointerArray + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_flag_validity_08001460",
                "param_1": "pointerArray",
                "param_2": "flag",
                "param_3": "timeElapsed",
                "iVar1": "datValue",
                "iVar2": "currentDatValue",
                "uVar3": "value",
                "puVar4": "pointer"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_and_update_values_080014e2",
            "code": "\nundefined4 checkAndUpdateValues_080014e2(int *inputArray,uint comparisonValue)\n\n{\n  int dataValue1;\n  int dataValue2;\n  \n  dataValue1 = get_dat_value_0800115c();\n  while( true ) {\n    if (*(int *)(*inputArray + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    dataValue2 = update_flag_and_values_08001436(inputArray);\n    if (dataValue2 != 0) break;\n    if ((comparisonValue != 0xffffffff) &&\n       ((comparisonValue == 0 || (dataValue2 = get_dat_value_0800115c(), comparisonValue < (uint)(dataValue2 - dataValue1))))) {\n      inputArray[0xe] = inputArray[0xe] | 0x20;\n      *(undefined *)((int)inputArray + 0x35) = 0x20;\n      *(undefined *)(inputArray + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_and_update_values_080014e2",
                "param_1": "inputArray",
                "param_2": "comparisonValue",
                "iVar1": "dataValue1",
                "iVar2": "dataValue2"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_flag_08001530",
            "code": "\nundefined4 updateFlag_08001530(uint **flag,uint value,uint mask,int flagType,uint flagLimit)\n\n{\n  int startValue;\n  int endValue;\n  uint *currentFlag;\n  uint **ppFlag;\n  uint param_2_copy;\n  uint param_3_copy;\n  \n  **flag = **flag | 0x100;\n  ppFlag = flag;\n  param_2_copy = value;\n  param_3_copy = mask;\n  startValue = get_dat_value_0800115c();\n  do {\n    currentFlag = *flag;\n    do {\n      if ((int)(currentFlag[5] << 0x1f) < 0) {\n        currentFlag[4] = value & 0xfe;\n        startValue = check_flag_validity_08001460(flag,0x10002,flagLimit,currentFlag,ppFlag,param_2_copy,param_3_copy);\n        if (startValue == 0) {\n          startValue = check_and_update_values_080014e2(flag,flagLimit,(*flag)[5],(*flag)[6]);\n          if (startValue == 0) {\n            currentFlag = *flag;\n            if (flagType == 1) {\nLAB_080015ca:\n              currentFlag[4] = mask & 0xff;\n              return 0;\n            }\n            currentFlag[4] = mask >> 8;\n            startValue = check_and_update_values_080014e2(flag,flagLimit);\n            if (startValue == 0) {\n              currentFlag = *flag;\n              goto LAB_080015ca;\n            }\n          }\n          if (flag[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **flag = **flag | 0x200;\n        }\n        else if (flag[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (flagLimit == 0xffffffff);\n    if ((flagLimit == 0) || (endValue = get_dat_value_0800115c(), flagLimit < (uint)(endValue - startValue))) {\n      *(undefined *)((int)flag + 0x35) = 0x20;\n      *(undefined *)(flag + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_flag_08001530",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "mask",
                "param_4": "flagType",
                "param_5": "flagLimit",
                "iVar1": "startValue",
                "iVar2": "endValue",
                "puVar3": "currentFlag",
                "ppuVar4": "ppFlag",
                "uVar5": "param_2_copy",
                "uVar6": "param_3_copy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "update_flags_080015e8",
            "code": "\nundefined4 updateFlags_080015e8(uint **flagPointer,uint value1,uint value2,int condition,uint limit)\n\n{\n  int dataValue1;\n  int dataValue2;\n  uint *flagData1;\n  uint **flagPointerPointer;\n  uint value1Copy;\n  uint value2Copy;\n  \n  flagData1 = *flagPointer;\n  *flagData1 = *flagData1 | 0x400;\n  *flagData1 = *flagData1 | 0x100;\n  flagPointerPointer = flagPointer;\n  value1Copy = value1;\n  value2Copy = value2;\n  dataValue1 = get_dat_value_0800115c();\nLAB_0800160e:\n  flagData1 = *flagPointer;\n  while (-1 < (int)(flagData1[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  flagData1[4] = value1 & 0xfe;\n  dataValue1 = check_flag_validity_08001460(flagPointer,0x10002,limit,flagData1,flagPointerPointer,value1Copy,value2Copy);\n  if (dataValue1 != 0) goto LAB_080016ba;\n  dataValue1 = check_and_update_values_080014e2(flagPointer,limit,(*flagPointer)[5],(*flagPointer)[6]);\n  if (dataValue1 == 0) {\n    flagData1 = *flagPointer;\n    if (condition != 1) {\n      flagData1[4] = value2 >> 8;\n      dataValue1 = check_and_update_values_080014e2(flagPointer,limit);\n      if (dataValue1 != 0) goto LAB_08001642;\n      flagData1 = *flagPointer;\n    }\n    flagData1[4] = value2 & 0xff;\n    dataValue1 = check_and_update_values_080014e2(flagPointer,limit);\n    if (dataValue1 == 0) {\n      **flagPointer = **flagPointer | 0x100;\n      dataValue1 = get_dat_value_0800115c();\n      do {\n        do {\n          if ((int)((*flagPointer)[5] << 0x1f) < 0) {\n            (*flagPointer)[4] = value1 & 0xff | 1;\n            dataValue1 = check_flag_validity_08001460(flagPointer,0x10002,limit);\n            if (dataValue1 == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (flagPointer[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (dataValue2 = get_dat_value_0800115c(), (uint)(dataValue2 - dataValue1) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)flagPointer + 0x35) = 0x20;\n      *(undefined *)(flagPointer + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (flagPointer[0xe] == (uint *)0x4) {\n    **flagPointer = **flagPointer | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (dataValue2 = get_dat_value_0800115c(), limit < (uint)(dataValue2 - dataValue1)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "update_flags_080015e8",
                "param_1": "flagPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "condition",
                "param_5": "limit",
                "iVar1": "dataValue1",
                "iVar2": "dataValue2",
                "puVar3": "flagData1",
                "ppuVar4": "flagPointerPointer",
                "uVar5": "value1Copy",
                "uVar6": "value2Copy"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_data_validity_080016f4",
            "code": "\nundefined4 checkDataValidity_080016f4(int *dataPointer,uint dataSize)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  initialValue = get_dat_value_0800115c();\n  while( true ) {\n    currentValue = *dataPointer;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((dataSize == 0) || (currentValue = get_dat_value_0800115c(), dataSize < (uint)(currentValue - initialValue))) {\n      dataPointer[0xe] = dataPointer[0xe] | 0x20;\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  dataPointer[0xe] = 0;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_data_validity_080016f4",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "update_param_08001754",
            "code": "\nundefined4 updateParam_08001754(uint **param)\n\n{\n  uint value1;\n  uint value2;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr3;\n  uint dividedValue;\n  undefined8 extractedValue;\n  \n  if (param != (uint **)0x0) {\n    if (*(char *)((int)param + 0x35) == '\\0') {\n      *(undefined *)(param + 0xd) = 0;\n      update_bits_if_condition_met_08004d48();\n    }\n    *(undefined *)((int)param + 0x35) = 0x24;\n    **param = **param & 0xfffffffe;\n    extractedValue = extracted_value_08002220();\n    value2 = (uint)((ulonglong)extractedValue >> 0x20);\n    value1 = (uint)extractedValue;\n    ptr2 = param[1];\n    dividedValue = value1 / 1000000;\n    if ((uint *)0x186a0 < ptr2) {\n      value2 = 300;\n    }\n    ptr1 = *param;\n    if ((uint *)0x186a0 < ptr2) {\n      value2 = dividedValue * value2;\n    }\n    ptr1[1] = dividedValue;\n    if ((uint *)0x186a0 < ptr2) {\n      dividedValue = value2 / 1000;\n    }\n    ptr1[8] = dividedValue + 1;\n    if (ptr2 < (uint *)0x186a1) {\n      value1 = value1 / (uint)((int)ptr2 << 1);\n      if ((value1 & 0xfff) < 4) {\n        value1 = 4;\n      }\n    }\n    else {\n      if (param[2] == (uint *)0x0) {\n        value1 = value1 / (uint)((int)ptr2 * 3) | 0x8000;\n      }\n      else {\n        value1 = value1 / (uint)((int)ptr2 * 0x19) | 0xc000;\n      }\n      if ((value1 & 0xfff) == 0) {\n        value1 = 1;\n      }\n    }\n    ptr2 = param[8];\n    ptr3 = param[7];\n    ptr1[7] = value1;\n    *ptr1 = (uint)ptr3 | (uint)ptr2;\n    ptr1[2] = (uint)param[4] | (uint)param[3];\n    ptr1[3] = (uint)param[5] | (uint)param[6];\n    *ptr1 = *ptr1 | 1;\n    param[0xe] = (uint *)0x0;\n    *(undefined *)((int)param + 0x35) = 0x20;\n    *(undefined *)((int)param + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "update_param_08001754",
                "param_1": "param",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "puVar5": "ptr3",
                "uVar6": "dividedValue",
                "uVar7": "extractedValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "update_data_values_08001828",
            "code": "\nundefined4\nupdateDataValues_08001828(uint **inputData,undefined4 param2,undefined4 param3,undefined4 param4,byte *data,\n            short dataSize,undefined4 param7)\n\n{\n  int value1;\n  int value2;\n  uint *ptr;\n  uint var;\n  \n  if (*(char *)((int)inputData + 0x35) == ' ') {\n    if (data == (byte *)0x0) {\n      return 1;\n    }\n    if (dataSize == 0) {\n      return 1;\n    }\n    value1 = getDatValue();\n    do {\n      ptr = *inputData;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(inputData + 0xd) == '\\x01') {\n          return 2;\n        }\n        var = *ptr;\n        *(undefined *)(inputData + 0xd) = 1;\n        *ptr = var & 0xfffff7ff;\n        *(undefined *)((int)inputData + 0x35) = 0x21;\n        *(undefined *)((int)inputData + 0x36) = 0x40;\n        inputData[0xe] = (uint *)0x0;\n        value1 = updateFlag(inputData,param2,param3,param4,param7);\n        if (value1 != 0) {\n          *(undefined *)(inputData + 0xd) = 0;\n          if (inputData[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      value2 = getDatValue();\n    } while ((uint)(value2 - value1) < 0x2711);\n    *(undefined *)(inputData + 0xd) = 0;\n    *(undefined *)((int)inputData + 0x35) = 0x20;\n  }\n  return 2;\n  while (dataSize != 0) {\nLAB_080018e2:\n    value1 = checkAndUpdateValues(inputData,param7);\n    if (value1 != 0) goto LAB_080018ee;\n    ptr = *inputData;\n    ptr[4] = (uint)*data;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(dataSize + -1) == 0) break;\n      dataSize = dataSize + -2;\n      ptr[4] = (uint)data[1];\n      data = data + 2;\n    }\n    else {\n      data = data + 1;\n      dataSize = dataSize + -1;\n    }\n  }\n  value1 = checkAndUpdateValues(inputData,param7);\n  if (value1 == 0) {\n    **inputData = **inputData | 0x200;\n    *(undefined *)(inputData + 0xd) = 0;\n    *(undefined *)((int)inputData + 0x35) = 0x20;\n    *(undefined *)((int)inputData + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (inputData[0xe] == (uint *)0x4) {\n    **inputData = **inputData | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "update_data_values_08001828",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "data",
                "param_6": "dataSize",
                "param_7": "param7",
                "iVar1": "value1",
                "iVar2": "value2",
                "puVar3": "ptr",
                "uVar4": "var",
                "get_dat_value_0800115c": "getDatValue",
                "update_flag_08001530": "updateFlag",
                "check_and_update_values_080014e2": "checkAndUpdateValues"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **data,undefined4 paramA,undefined4 paramB,undefined4 paramC,\n            undefined *output,ushort count,uint threshold)\n\n{\n  undefined *tempVar1;\n  int tempVar2;\n  int tempVar3;\n  uint *tempVar4;\n  uint tempVar5;\n  undefined *tempVar6;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (count == 0) {\n    return 1;\n  }\n  tempVar2 = get_dat_value_0800115c();\n  while (tempVar4 = *data, (~tempVar4[6] & 2) == 0) {\n    tempVar3 = get_dat_value_0800115c();\n    if (10000 < (uint)(tempVar3 - tempVar2)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  tempVar5 = *tempVar4;\n  *(undefined *)(data + 0xd) = 1;\n  *tempVar4 = tempVar5 & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  tempVar2 = update_flags_080015e8(data,paramA,paramB,paramC,threshold);\n  if (tempVar2 != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  tempVar4 = *data;\n  tempVar5 = *tempVar4;\n  if (count == 1) {\n    *tempVar4 = tempVar5 & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    tempVar2 = check_data_validity_080016f4(data,threshold);\n    if (tempVar2 == 0) {\n      *output = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (count == 2) {\n    *tempVar4 = tempVar5 | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *tempVar4 = tempVar5 | 0x400;\n    while (3 < count) {\n      tempVar2 = check_data_validity_080016f4(data,threshold);\n      if (tempVar2 != 0) goto LAB_08001a18;\n      *output = (char)(*data)[4];\n      tempVar4 = *data;\n      flag = (int)(tempVar4[5] << 0x1d) < 0;\n      if (flag) {\n        tempVar4 = (uint *)tempVar4[4];\n        tempVar6 = output + 2;\n        count = count - 2;\n      }\n      else {\n        tempVar6 = output + 1;\n        count = count - 1;\n      }\n      tempVar1 = output + 1;\n      output = tempVar6;\n      if (flag) {\n        *tempVar1 = (char)tempVar4;\n      }\n    }\n    if (count != 2) {\n      tempVar2 = get_dat_value_0800115c();\n      do {\n        tempVar4 = *data;\n        do {\n          if ((int)(tempVar4[5] << 0x1d) < 0) {\n            *tempVar4 = *tempVar4 & 0xfffffbff;\n            disableIRQinterrupts();\n            *output = (char)(*data)[4];\n            tempVar2 = get_dat_value_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (threshold == 0xffffffff);\n      } while ((threshold != 0) && (tempVar3 = get_dat_value_0800115c(), (uint)(tempVar3 - tempVar2) <= threshold));\n      goto LAB_08001afa;\n    }\n  }\n  tempVar2 = get_dat_value_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        tempVar4 = *data;\n        *tempVar4 = *tempVar4 | 0x200;\n        *output = (char)tempVar4[4];\n        enableIRQinterrupts();\n        output[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (threshold == 0xffffffff);\n  } while ((threshold != 0) && (tempVar3 = get_dat_value_0800115c(), (uint)(tempVar3 - tempVar2) <= threshold));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    tempVar4 = *data;\n    do {\n      if ((int)(tempVar4[5] << 0x1d) < 0) {\n        *tempVar4 = *tempVar4 | 0x200;\n        output[1] = (char)tempVar4[4];\n        enableIRQinterrupts();\n        output[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (threshold == 0xffffffff);\n  } while ((threshold != 0) && (tempVar3 = get_dat_value_0800115c(), (uint)(tempVar3 - tempVar2) <= threshold));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "param_5": "output",
                "param_6": "count",
                "param_7": "threshold",
                "puVar1": "tempVar1",
                "iVar2": "tempVar2",
                "iVar3": "tempVar3",
                "puVar4": "tempVar4",
                "uVar5": "tempVar5",
                "puVar6": "tempVar6",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_and_values_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_and_values_08001b58(int *conditions)\n\n{\n  int value1;\n  int value2;\n  \n  if (*conditions << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (conditions[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value1 = conditions[1];\n      if (value1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value1 = get_dat_value_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            value2 = get_dat_value_0800115c();\n            if (100 < (uint)(value2 - value1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value1 = get_dat_value_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        value2 = get_dat_value_0800115c();\n        if (100 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*conditions << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (conditions[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = conditions[4];\n      if (iRam42420000 == 0) {\n        value1 = get_dat_value_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          value2 = get_dat_value_0800115c();\n          if (2 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      value1 = get_dat_value_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        value2 = get_dat_value_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = conditions[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*conditions << 0x1c < 0) {\n    iRam42420480 = conditions[6];\n    if (iRam42420480 == 0) {\n      value1 = get_dat_value_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        value2 = get_dat_value_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      value1 = get_dat_value_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        value2 = get_dat_value_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *conditions << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value1 = get_dat_value_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    value2 = get_dat_value_0800115c();\n    if (100 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\n  value1 = conditions[3];\n  if (value1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value1 = get_dat_value_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        value2 = get_dat_value_0800115c();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value1 = get_dat_value_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    value2 = get_dat_value_0800115c();\n    if (5000 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (conditions[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (conditions[7] != 2) {\n      uRam42420060 = 0;\n      value1 = get_dat_value_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        value2 = get_dat_value_0800115c();\n      } while ((uint)(value2 - value1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    value1 = get_dat_value_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (conditions[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | conditions[2];\n        }\n        _DAT_40021004 = conditions[8] | conditions[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        value1 = get_dat_value_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          value2 = get_dat_value_0800115c();\n        } while ((uint)(value2 - value1) < 3);\n        return 3;\n      }\n      value2 = get_dat_value_0800115c();\n    } while ((uint)(value2 - value1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_conditions_and_values_08001b58",
                "param_1": "conditions",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_08002008",
            "code": "\n\n\nint calculateMPU9250Clock_08002008(void)\n\n{\n  undefined4 value1;\n  int clock;\n  undefined4 value2;\n  undefined4 *dataPtr;\n  uint clockFrequency;\n  undefined4 *copyPtr;\n  byte values [4];\n  undefined4 dataArray [5];\n  \n  dataPtr = &DAT_080072f0;\n  copyPtr = dataArray;\n  do {\n    value1 = *dataPtr;\n    value2 = dataPtr[1];\n    dataPtr = dataPtr + 2;\n    *copyPtr = value1;\n    copyPtr[1] = value2;\n    copyPtr = copyPtr + 2;\n  } while (dataPtr != (undefined4 *)\"../Src/MPU9250.c\");\n  values[0] = 1;\n  values[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockFrequency = 8000000 / values[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockFrequency = 4000000;\n    }\n    clock = clockFrequency * *(byte *)((int)dataArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clock = 8000000;\n  }\n  return clock;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_08002008",
                "uVar1": "value1",
                "iVar2": "clock",
                "uVar3": "value2",
                "puVar4": "dataPtr",
                "uVar5": "clockFrequency",
                "puVar6": "copyPtr",
                "local_24": "values",
                "local_20": "dataArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_mpu9250_0800209c",
            "code": "\n\n\nundefined4 initialize_mpu9250_0800209c(uint *input_data,uint input_len)\n\n{\n  char flag_1;\n  char flag_2;\n  int shifted_value;\n  uint control_value;\n  int comparison_value;\n  uint shifted_control_val;\n  \n  if ((input_len <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | input_len, input_len == (input_len & 7))) {\n    if ((int)(*input_data << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | input_data[2];\n    }\n    shifted_value = *input_data << 0x1f;\n    if (-1 < shifted_value) {\nLAB_080020ba:\n      if ((input_len < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | input_len, input_len != (input_len & 7))) {\n        return 1;\n      }\n      if ((*input_data & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | input_data[3];\n      }\n      if ((int)(*input_data << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | input_data[4] << 3;\n      }\n      control_value = calculate_mpu9250_clock_08002008();\n      DAT_200001bc = control_value >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_process_08001104(0);\n      return 0;\n    }\n    control_value = input_data[1];\n    if (control_value == 1) {\n      flag_2 = '\\x01';\n      flag_1 = '\\0';\n    }\n    else {\n      shifted_control_val = _DAT_40021000;\n      if (control_value == 2) goto LAB_08002176;\n      flag_2 = '\\0';\n      flag_1 = '\\x01';\n    }\n    shifted_control_val = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag_1 << 6) << 0x18 | (uint)(byte)(flag_2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_control_val < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | control_value;\n      shifted_value = get_dat_value_0800115c(shifted_value,shifted_control_val);\n      if (input_data[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          comparison_value = get_dat_value_0800115c();\n        } while ((uint)(comparison_value - shifted_value) < 0x1389);\n      }\n      else if (input_data[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          comparison_value = get_dat_value_0800115c();\n        } while ((uint)(comparison_value - shifted_value) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          comparison_value = get_dat_value_0800115c();\n        } while ((uint)(comparison_value - shifted_value) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "initialize_mpu9250_0800209c",
                "param_1": "input_data",
                "param_2": "input_len",
                "cVar1": "flag_1",
                "cVar2": "flag_2",
                "iVar3": "shifted_value",
                "uVar4": "control_value",
                "iVar5": "comparison_value",
                "uVar6": "shifted_control_val"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "extracted_value_08002220",
            "code": "\n\n\nuint extractedValue_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "extracted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_value_08002250",
            "code": "\n\n\nuint getShiftedValue_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_flags_and_values_08002280",
            "code": "\nvoid updateFlagsAndValues_08002280(int targetAddress,uint *values)\n\n{\n  uint updatedFlag1;\n  uint updatedFlag2;\n  uint value1;\n  \n  *(uint *)(targetAddress + 0x20) = *(uint *)(targetAddress + 0x20) & 0xfffffffe;\n  updatedFlag2 = *(uint *)(targetAddress + 4);\n  value1 = *values;\n  updatedFlag1 = *(uint *)(targetAddress + 0x20) & 0xfffffffd | flag3;\n  if (targetAddress == 0x40012c00) {\n    updatedFlag1 = (updatedFlag1 & 0xfffffff7 | flag4) & 0xfffffffb;\n    updatedFlag2 = updatedFlag2 & 0xfffffcff | flag5 | flag6;\n  }\n  *(uint *)(targetAddress + 4) = updatedFlag2;\n  *(uint *)(targetAddress + 0x18) = *(uint *)(targetAddress + 0x18) & 0xffffff8c | value1;\n  *(uint *)(targetAddress + 0x34) = values[1];\n  *(uint *)(targetAddress + 0x20) = updatedFlag1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_flags_and_values_08002280",
                "param_1": "targetAddress",
                "param_2": "values",
                "uVar1": "updatedFlag1",
                "uVar2": "updatedFlag2",
                "uVar3": "value1",
                "param_2[2]": "flag3",
                "param_2[3]": "flag4",
                "param_2[5]": "flag5",
                "param_2[6]": "flag6"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_config_080022d0",
            "code": "\nvoid updateConfig_080022d0(int configAddress,uint *configData)\n\n{\n  uint updatedConfigValue1;\n  uint updatedConfigValue2;\n  uint configDataValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffeff;\n  updatedConfigValue2 = *(uint *)(configAddress + 4);\n  configDataValue = *configData;\n  updatedConfigValue1 = *(uint *)(configAddress + 0x20) & 0xfffffdff | configData[2] << 8;\n  if (configAddress == 0x40012c00) {\n    updatedConfigValue1 = (updatedConfigValue1 & 0xfffff7ff | configData[3] << 8) & 0xfffffbff;\n    updatedConfigValue2 = updatedConfigValue2 & 0xffffcfff | (configData[5] | configData[6]) << 4;\n  }\n  *(uint *)(configAddress + 4) = updatedConfigValue2;\n  *(uint *)(configAddress + 0x1c) = *(uint *)(configAddress + 0x1c) & 0xffffff8c | configDataValue;\n  *(uint *)(configAddress + 0x3c) = configData[1];\n  *(uint *)(configAddress + 0x20) = updatedConfigValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_config_080022d0",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "updatedConfigValue1",
                "uVar2": "updatedConfigValue2",
                "uVar3": "configDataValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_param_values_08002324",
            "code": "\nvoid updateParamValues_08002324(int paramAddr,int *paramValues)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int value4;\n  \n  *(uint *)(paramAddr + 0x20) = *(uint *)(paramAddr + 0x20) & 0xffffefff;\n  value1 = *(uint *)(paramAddr + 4);\n  value2 = *paramValues;\n  value3 = paramValues[2];\n  value4 = 0x40012c00;\n  if (paramAddr == 0x40012c00) {\n    value4 = paramValues[5];\n    value1 = value1 & 0xffffbfff;\n  }\n  if (paramAddr == 0x40012c00) {\n    value1 = value1 | value4 << 6;\n  }\n  *(uint *)(paramAddr + 4) = value1;\n  *(uint *)(paramAddr + 0x1c) = *(uint *)(paramAddr + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(paramAddr + 0x40) = paramValues[1];\n  *(uint *)(paramAddr + 0x20) = *(uint *)(paramAddr + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_param_values_08002324",
                "param_1": "paramAddr",
                "param_2": "paramValues",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryBlock,uint *dataBlock)\n\n{\n  uint newValue;\n  \n  newValue = *memoryBlock;\n  if (((((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n       (memoryBlock == (uint *)0x40000400)) || (memoryBlock == (uint *)0x40000800)) &&\n     (((newValue = newValue & 0xffffff8f | dataBlock[1], memoryBlock == (uint *)0x40012c00 ||\n       (memoryBlock == (uint *)0x40000000)) ||\n      ((memoryBlock == (uint *)0x40000400 || (memoryBlock == (uint *)0x40000800)))))) {\n    newValue = newValue & 0xfffffcff | dataBlock[3];\n  }\n  *memoryBlock = newValue;\n  memoryBlock[0xb] = dataBlock[2];\n  memoryBlock[10] = *dataBlock;\n  newValue = 0x40012c00;\n  if (memoryBlock == (uint *)0x40012c00) {\n    newValue = dataBlock[4];\n  }\n  if (memoryBlock == (uint *)0x40012c00) {\n    memoryBlock[0xc] = newValue;\n  }\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryBlock",
                "param_2": "dataBlock",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "update_data_and_memory_080023d0",
            "code": "\nundefined4 updateDataAndMemory_080023d0(undefined4 *dataPointer)\n\n{\n  if (dataPointer != (undefined4 *)0x0) {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      updateDataDependingOnValue();\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 2;\n    updateMemory(*dataPointer,dataPointer + 1);\n    *(undefined *)((int)dataPointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "update_data_and_memory_080023d0",
                "param_1": "dataPointer",
                "update_data_depending_on_value_08004d8c": "updateDataDependingOnValue",
                "update_memory_08002368": "updateMemory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_parameters_08002404",
            "code": "\nvoid updateParameters_08002404(int functionPointer,int *params)\n\n{\n  uint modifiedFlag1;\n  uint modifiedFlag2;\n  int paramValue;\n  \n  *(uint *)(functionPointer + 0x20) = *(uint *)(functionPointer + 0x20) & 0xffffffef;\n  modifiedFlag2 = *(uint *)(functionPointer + 4);\n  paramValue = *params;\n  modifiedFlag1 = *(uint *)(functionPointer + 0x20) & 0xffffffdf | params[2] << 4;\n  if (functionPointer == 0x40012c00) {\n    modifiedFlag1 = (modifiedFlag1 & 0xffffff7f | params[3] << 4) & 0xffffffbf;\n    modifiedFlag2 = modifiedFlag2 & 0xfffff3ff | (params[5] | params[6]) << 2;\n  }\n  *(uint *)(functionPointer + 4) = modifiedFlag2;\n  *(uint *)(functionPointer + 0x18) = *(uint *)(functionPointer + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(functionPointer + 0x38) = params[1];\n  *(uint *)(functionPointer + 0x20) = modifiedFlag1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_parameters_08002404",
                "param_1": "functionPointer",
                "param_2": "params",
                "uVar1": "modifiedFlag1",
                "uVar2": "modifiedFlag2",
                "iVar3": "paramValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "handle_parameter_update_0800245c",
            "code": "\nvoid handleParameterUpdate_0800245c(int *parameter,undefined4 arg1,undefined4 arg2)\n\n{\n  int tmp1;\n  int tmp2;\n  int tmp3;\n  int tmp4;\n  int var1;\n  uint var2;\n  int var3;\n  \n  if (*(char *)(parameter + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)parameter + 0x39) = 2;\n  *(undefined *)(parameter + 0xe) = 1;\n  switch(arg2) {\n  case 0:\n    update_flags_and_values_08002280(*parameter);\n    var3 = *parameter;\n    var2 = *(uint *)(tmp1 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 8;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffffb;\n    var2 = *(uint *)(var3 + 0x18) | var2;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_parameters_08002404(*parameter);\n    var3 = *parameter;\n    var1 = *(int *)(tmp2 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 0x800;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffbff;\n    var2 = *(uint *)(var3 + 0x18) | var1 << 8;\n    break;\n  case 8:\n    update_config_080022d0(*parameter);\n    var3 = *parameter;\n    var2 = *(uint *)(tmp3 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 8;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffffb;\n    var2 = *(uint *)(var3 + 0x1c) | var2;\n    goto LAB_080024fa;\n  case 0xc:\n    update_param_values_08002324(*parameter);\n    var3 = *parameter;\n    var1 = *(int *)(tmp4 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 0x800;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffbff;\n    var2 = *(uint *)(var3 + 0x1c) | var1 << 8;\nLAB_080024fa:\n    *(uint *)(var3 + 0x1c) = var2;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(var3 + 0x18) = var2;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)parameter + 0x39) = 1;\n  *(undefined *)(parameter + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "handle_parameter_update_0800245c",
                "param_1": "parameter",
                "param_2": "arg1",
                "param_3": "arg2",
                "extraout_r1": "tmp1",
                "extraout_r1_00": "tmp2",
                "extraout_r1_01": "tmp3",
                "extraout_r1_02": "tmp4",
                "iVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_08002520",
            "code": "\nvoid updateBit_08002520(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = bitValue << (bitPosition & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_flag_08002538",
            "code": "\nundefined4 updateFlag_08002538(uint **pointerArray,undefined4 value)\n\n{\n  uint updatedValue;\n  uint *currentPointer;\n  \n  update_bit_08002520(*pointerArray,value,1);\n  currentPointer = *pointerArray;\n  updatedValue = 0x40012c00;\n  if (currentPointer == (uint *)0x40012c00) {\n    updatedValue = uRam40012c44 | 0x8000;\n  }\n  if (currentPointer == (uint *)0x40012c00) {\n    currentPointer[0x11] = updatedValue;\n  }\n  *currentPointer = *currentPointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_flag_08002538",
                "param_1": "pointerArray",
                "param_2": "value",
                "uVar1": "updatedValue",
                "puVar2": "currentPointer"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_param_status_08002564",
            "code": "\nundefined4 checkAndUpdateParamStatus_08002564(int *paramArray,uint *flagsArray)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(paramArray + 0xe) != '\\x01') {\n    *(undefined *)((int)paramArray + 0x39) = 2;\n    *(uint *)(*paramArray + 0x44) =\n         *flagsArray | flagsArray[1] | flagsArray[2] | flagsArray[3] | flagsArray[4] | flagsArray[5] | flagsArray[6];\n    *(undefined *)((int)paramArray + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(paramArray + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_param_status_08002564",
                "param_1": "paramArray",
                "param_2": "flagsArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_flags_and_value_080025a4",
            "code": "\nundefined4 updateFlagsAndValue_080025a4(int *arrayPtr,uint *valuePtr)\n\n{\n  uint value1;\n  undefined4 result;\n  int array;\n  uint value2;\n  \n  result = 2;\n  if (*(char *)(arrayPtr + 0xe) != '\\x01') {\n    *(undefined *)((int)arrayPtr + 0x39) = 2;\n    array = *arrayPtr;\n    value2 = *valuePtr;\n    value1 = valuePtr[1];\n    *(uint *)(array + 4) = *(uint *)(array + 4) & 0xffffff8f;\n    *(uint *)(array + 4) = *(uint *)(array + 4) | value2;\n    *(uint *)(array + 8) = *(uint *)(array + 8) & 0xffffff7f;\n    *(uint *)(array + 8) = *(uint *)(array + 8) | value1;\n    *(undefined *)((int)arrayPtr + 0x39) = 1;\n    result = 0;\n    *(undefined *)(arrayPtr + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_flags_and_value_080025a4",
                "param_1": "arrayPtr",
                "param_2": "valuePtr",
                "uVar1": "value1",
                "uVar2": "result",
                "iVar3": "array",
                "uVar4": "value2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_data_080025e8",
            "code": "\nvoid updateData_080025e8(int *data)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint shiftedValue3;\n  int calcResult1;\n  int param1Value;\n  int baseAddress;\n  \n  baseAddress = *data;\n  shiftedValue3 = data[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | data[3];\n  *(uint *)(baseAddress + 0xc) = data[2] | shiftedValue3 | data[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | data[6];\n  if (baseAddress == 0x40013800) {\n    shiftedValue1 = get_shifted_value_08002250();\n    calcResult1 = (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n    shiftedValue1 = get_shifted_value_08002250();\n    param1Value = data[1];\n    shiftedValue2 = get_shifted_value_08002250();\n    shiftedValue2 = (uint)(shiftedValue1 * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n            -100;\n    shiftedValue1 = get_shifted_value_08002250();\n    shiftedValue3 = (uint)(shiftedValue1 * 0x19) / (uint)(data[1] << 2);\n    shiftedValue1 = get_shifted_value_08002250();\n  }\n  else {\n    shiftedValue1 = extracted_value_08002220();\n    calcResult1 = (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n    shiftedValue1 = extracted_value_08002220();\n    param1Value = data[1];\n    shiftedValue2 = extracted_value_08002220();\n    shiftedValue2 = (uint)(shiftedValue1 * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n            -100;\n    shiftedValue1 = extracted_value_08002220();\n    shiftedValue3 = (uint)(shiftedValue1 * 0x19) / (uint)(data[1] << 2);\n    shiftedValue1 = extracted_value_08002220();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((shiftedValue3 + (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (shiftedValue2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calcResult1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_data_080025e8",
                "param_1": "data",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "shiftedValue3",
                "iVar4": "calcResult1",
                "iVar5": "param1Value",
                "iVar6": "baseAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_system_08002724",
            "code": "\nundefined4 initialize_system_08002724(int *system_data)\n\n{\n  int system_data_ptr;\n  \n  if (system_data != (int *)0x0) {\n    if (*(char *)((int)system_data + 0x39) == '\\0') {\n      *(undefined *)(system_data + 0xe) = 0;\n      initialize_system_08002724_08004e7c();\n    }\n    *(undefined *)((int)system_data + 0x39) = 2;\n    *(uint *)(*system_data + 0xc) = *(uint *)(*system_data + 0xc) & 0xffffdfff;\n    update_data_080025e8(system_data);\n    system_data_ptr = *system_data;\n    *(uint *)(system_data_ptr + 0x10) = *(uint *)(system_data_ptr + 0x10) & 0xffffb7ff;\n    *(uint *)(system_data_ptr + 0x14) = *(uint *)(system_data_ptr + 0x14) & 0xffffffd5;\n    *(uint *)(system_data_ptr + 0xc) = *(uint *)(system_data_ptr + 0xc) | 0x2000;\n    system_data[0xf] = 0;\n    *(undefined *)((int)system_data + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_system_08002724",
                "param_1": "system_data",
                "iVar1": "system_data_ptr"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "update_value_0800290c",
            "code": "\nundefined4 updateValue_0800290c(int *input)\n\n{\n  byte byteValue;\n  int functionVar;\n  uint resultVar;\n  undefined4 tempVar;\n  short countVar;\n  ushort *ushortPtr1;\n  ushort *ushortPtr2;\n  bool flag;\n  \n  if ((*(byte *)((int)input + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  functionVar = *input;\n  ushortPtr1 = (ushort *)input[10];\n  if (input[2] == 0x1000) {\n    if (input[4] == 0) {\n      ushortPtr2 = ushortPtr1 + 1;\n      *ushortPtr1 = (ushort)((uint)(*(int *)(functionVar + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ushortPtr2 = (ushort *)((int)ushortPtr1 + 1);\n      *ushortPtr1 = (ushort)*(int *)(functionVar + 4) & 0xff;\n    }\n    input[10] = (int)ushortPtr2;\n  }\n  else {\n    if (input[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(functionVar + 4);\n      input[10] = (int)ushortPtr1 + 1;\n    }\n    else {\n      tempVar = *(undefined4 *)(functionVar + 4);\n      input[10] = (int)ushortPtr1 + 1;\n      byteValue = (byte)tempVar & 0x7f;\n    }\n    *(byte *)ushortPtr1 = byteValue;\n  }\n  countVar = *(short *)((int)input + 0x2e) + -1;\n  *(short *)((int)input + 0x2e) = countVar;\n  if (countVar == 0) {\n    functionVar = *input;\n    *(uint *)(functionVar + 0xc) = *(uint *)(functionVar + 0xc) & 0xffffffdf;\n    flag = *(char *)((int)input + 0x39) != '2';\n    if (flag) {\n      resultVar = *(uint *)(functionVar + 0xc) & 0xfffffeff;\n    }\n    else {\n      functionVar = 0x12;\n      resultVar = 0x32;\n    }\n    if (flag) {\n      *(uint *)(functionVar + 0xc) = resultVar;\n      resultVar = *(uint *)(functionVar + 0x14) & 0xfffffffe;\n    }\n    if (flag) {\n      *(uint *)(functionVar + 0x14) = resultVar;\n      functionVar = 1;\n    }\n    *(char *)((int)input + 0x39) = (char)functionVar;\n    checkAndUpdateValue();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "update_value_0800290c",
                "param_1": "input",
                "bVar1": "byteValue",
                "iVar2": "functionVar",
                "uVar3": "resultVar",
                "uVar4": "tempVar",
                "sVar5": "countVar",
                "puVar6": "ushortPtr1",
                "puVar7": "ushortPtr2",
                "bVar8": "flag",
                "check_and_update_value_08004c30": "checkAndUpdateValue"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "update_flags_0800299a",
            "code": "\nvoid update_flags_0800299a(uint **parameter)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *pointer1;\n  undefined flag;\n  uint *pointer2;\n  uint flag2;\n  bool flag3;\n  \n  pointer2 = *parameter;\n  value2 = *pointer2;\n  value1 = pointer2[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      update_value_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = pointer2[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      pointer2 = (uint *)(value2 << 0x1f);\n      if ((int)pointer2 < 0) {\n        flag3 = (int)(value1 << 0x17) < 0;\n        if (flag3) {\n          pointer2 = (uint *)((uint)parameter[0xf] | 1);\n        }\n        if (flag3) {\n          parameter[0xf] = pointer2;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        parameter[0xf] = (uint *)((uint)parameter[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        parameter[0xf] = (uint *)((uint)parameter[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        parameter[0xf] = (uint *)((uint)parameter[0xf] | 8);\n      }\n      if (parameter[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        update_value_0800290c(parameter);\n      }\n      pointer2 = *parameter;\n      if ((-1 < (int)parameter[0xf] << 0x1c) && ((pointer2[5] & 0x40) == 0)) {\n        FUNC_08002998(parameter);\n        parameter[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer2[3] = pointer2[3] & 0xfffffedf;\n      pointer2[5] = pointer2[5] & 0xfffffffe;\n      *(undefined *)((int)parameter + 0x39) = 1;\n      FUNC_08002998(parameter);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)parameter + 0x39) & 0xdf) == 0x12) {\n      pointer1 = parameter[8];\n      if (parameter[2] == (uint *)0x1000) {\n        pointer2[1] = *(ushort *)pointer1 & 0x1ff;\n        if (parameter[4] == (uint *)0x0) {\n          pointer1 = (uint *)((int)pointer1 + 2);\n        }\n        else {\n          pointer1 = (uint *)((int)pointer1 + 1);\n        }\n        parameter[8] = pointer1;\n      }\n      else {\n        parameter[8] = (uint *)((int)pointer1 + 1);\n        pointer2[1] = (uint)*(byte *)pointer1;\n      }\n      count = *(short *)((int)parameter + 0x26) + -1;\n      *(short *)((int)parameter + 0x26) = count;\n      if (count == 0) {\n        pointer2[3] = pointer2[3] & 0xffffff7f;\n        pointer2[3] = pointer2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    pointer2[3] = pointer2[3] & 0xffffffbf;\n    if (*(char *)((int)parameter + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)parameter + 0x39) = flag;\n    FUNC_0800290a(parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "update_flags_0800299a",
                "param_1": "parameter",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "pointer1",
                "uVar5": "flag",
                "puVar6": "pointer2",
                "uVar7": "flag2",
                "bVar8": "flag3"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  processAndHandleData(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  updateAndHandleErrors(0xd0,0x6b,0x80,1);\n  updateAndHandleErrors(0xd0,0x6b,1);\n  updateAndHandleErrors(0xd0,0x6c,0,1);\n  updateAndHandleErrors(0xd0,0x19,0,1);\n  updateAndHandleErrors(0xd0,0x1d,3,1);\n  updateAndHandleErrors(0xd0,0x1a,3,1);\n  updateAndHandleErrors(0xd0,0x1b,0x10,1);\n  updateAndHandleErrors(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "process_and_handle_data_0800407c": "processAndHandleData",
                "update_and_handle_errors_0800403c": "updateAndHandleErrors"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint inputData;\n  int value1;\n  int value2;\n  undefined4 tempResult1;\n  undefined4 tempResult2;\n  \n  tempResult1 = 0;\n  tempResult2 = inputData & 0xffff0000;\n  process_and_handle_data_080040e8(0xd0,0x3b,&tempResult1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(tempResult1._2_1_,tempResult1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)tempResult1,tempResult1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)tempResult2,tempResult2._1_1_);\n  value2 = (int)DAT_200002f6;\n  value1 = (int)DAT_200002f8;\n  uVar1 = calculate_value_08000c44();\n  uVar1 = calculate_floating_point_08000cec(uVar1,0x40800000);\n  DAT_200002d0 = calculate_floating_point_08000cec(uVar1,0x38000000);\n  uVar1 = calculate_value_08000c44(value2);\n  uVar1 = calculate_floating_point_08000cec(uVar1,0x40800000);\n  DAT_200002d4 = calculate_floating_point_08000cec(uVar1,0x38000000);\n  uVar1 = calculate_value_08000c44(value1);\n  uVar1 = calculate_floating_point_08000cec(uVar1,0x40800000);\n  DAT_200002d8 = calculate_floating_point_08000cec(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputData",
                "iVar2": "value1",
                "iVar3": "value2",
                "local_18": "tempResult1",
                "local_14": "tempResult2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 calculatedValue;\n  int accelerationValue;\n  int temperatureValue;\n  undefined4 temperature;\n  undefined2 acceleration;\n  \n  temperature = 0;\n  acceleration = 0;\n  processAndHandleData(0xd0,0x43,&temperature,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(temperature._2_1_,temperature._3_1_);\n  DAT_200002be = CONCAT11((undefined)temperature,temperature._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)acceleration,acceleration._1_1_);\n  temperatureValue = (int)DAT_200002c0;\n  accelerationValue = (int)DAT_200002c2;\n  calculatedValue = calculateValue();\n  calculatedValue = calculateFloatingPoint(calculatedValue,0x447a0000);\n  calculatedValue = calculateFloatingPoint(calculatedValue,0x38000000);\n  DAT_200002c4 = calculateFloatingPoint2(calculatedValue,DAT_20000000);\n  calculatedValue = calculateValue(temperatureValue);\n  calculatedValue = calculateFloatingPoint(calculatedValue,0x447a0000);\n  calculatedValue = calculateFloatingPoint(calculatedValue,0x38000000);\n  DAT_200002c8 = calculateFloatingPoint2(calculatedValue,DAT_20000004);\n  calculatedValue = calculateValue(accelerationValue);\n  calculatedValue = calculateFloatingPoint(calculatedValue,0x447a0000);\n  calculatedValue = calculateFloatingPoint(calculatedValue,0x38000000);\n  DAT_200002cc = calculateFloatingPoint2(calculatedValue,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "temperature",
                "local_1c": "acceleration",
                "iVar2": "accelerationValue",
                "iVar3": "temperatureValue",
                "uVar1": "calculatedValue",
                "process_and_handle_data_080040e8": "processAndHandleData",
                "calculate_value_08000c44": "calculateValue",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "calculate_floating_point_08000ad8": "calculateFloatingPoint2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 tempValue;\n  uint localParam;\n  \n  localParam = param4;\n  updateAndHandleErrors(0xd0,0x37,0x22,1,param1,param2,param3);\n  updateAndHandleErrors(0xd0,0x6a,1);\n  processAndHandleData(0x18,0,\"../Src/MPU9250.c\",0xad);\n  updateAndHandleErrors(0x18,0xb,1);\n  updateAndHandleErrors(0x18,10,0,1);\n  updateAndHandleErrors(0x18,10,0xf,1);\n  processAndHandleData(0x18,0x10,&localParam,3,\"../Src/MPU9250.c\",0xb6);\n  tempValue = calculateValue((localParam & 0xff) - 0x80);\n  tempValue = calculateFloatingPoint(tempValue,0x3b800000);\n  DAT_200002e8 = calculateFloatResult(tempValue,0x3f800000);\n  tempValue = calculateValue((localParam >> 8 & 0xff) - 0x80);\n  tempValue = calculateFloatingPoint(tempValue,0x3b800000);\n  DAT_200002ec = calculateFloatResult(tempValue,0x3f800000);\n  tempValue = calculateValue((localParam >> 0x10 & 0xff) - 0x80);\n  tempValue = calculateFloatingPoint(tempValue,0x3b800000);\n  DAT_200002f0 = calculateFloatResult(tempValue,0x3f800000);\n  updateAndHandleErrors(0x18,10,0,1);\n  updateAndHandleErrors(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "tempValue",
                "local_c": "localParam",
                "update_and_handle_errors_0800403c": "updateAndHandleErrors",
                "process_and_handle_data_0800407c": "processAndHandleData",
                "process_and_handle_data_080040e8": "processAndHandleData",
                "calculate_value_08000c44": "calculateValue",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "calculate_float_result_08000adc": "calculateFloatResult"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_and_handle_data_08002d88",
            "code": "\nvoid processAndHandleData_08002d88(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int result1;\n  undefined4 result2;\n  undefined4 result3;\n  int result4;\n  undefined2 var1;\n  undefined var2;\n  undefined var3;\n  undefined var4;\n  undefined var5;\n  byte var6;\n  undefined uStack_21;\n  \n  uStack_21 = (undefined)((uint)arg4 >> 0x18);\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  var5 = 0;\n  var6 = 0;\n  result1 = process_and_handle_data_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,arg1,arg2);\n  if (result1 << 0x1f < 0) {\n    process_and_handle_data_080040e8(0x18,3,&var1,7,\"../Src/MPU9250.c\",0xda);\n    result3 = DAT_2000001c;\n    if ((int)((uint)var6 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(var3,var2);\n      DAT_200002bc = CONCAT11(var5,var4);\n      result4 = (int)DAT_200002ba;\n      result1 = (int)DAT_200002bc;\n      DAT_200002b8 = var1;\n      result2 = calculate_value_08000c44();\n      result2 = calculate_floating_point_08000cec(result2,result3);\n      result2 = calculate_floating_point_08000cec(result2,DAT_200002e8);\n      result2 = calculate_floating_point_08000ad8(result2,DAT_20000020);\n      DAT_200002dc = calculate_floating_point_08000cec(result2,DAT_2000002c);\n      result2 = calculate_value_08000c44(result4);\n      result2 = calculate_floating_point_08000cec(result2,result3);\n      result2 = calculate_floating_point_08000cec(result2,DAT_200002ec);\n      result2 = calculate_floating_point_08000ad8(result2,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point_08000cec(result2,DAT_20000030);\n      result2 = calculate_value_08000c44(result1);\n      result3 = calculate_floating_point_08000cec(result2,result3);\n      result3 = calculate_floating_point_08000cec(result3,DAT_200002f0);\n      result3 = calculate_floating_point_08000ad8(result3,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point_08000cec(result3,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_and_handle_data_08002d88",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "local_28": "var1",
                "uStack_26": "var2",
                "uStack_25": "var3",
                "local_24": "var4",
                "local_23": "var5",
                "local_22": "var6"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_mpu9250_and_data_08002ea0",
            "code": "\nvoid initialize_mpu9250_and_data_08002ea0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 extra_result;\n  \n  initialize_mpu9250();\n  initialize_data();\n  set_param_value(0x3f19999a);\n  initialize_data_with_params(0,extra_result,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_mpu9250_and_data_08002ea0",
                "extraout_r1": "extra_result",
                "initialize_mpu9250_08002ad0": "initialize_mpu9250",
                "initialize_mpu9250_08002cb0": "initialize_data",
                "set_param_08003314": "set_param_value",
                "initialize_data_08003320": "initialize_data_with_params"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_and_set_float_result_08002ec0",
            "code": "\nvoid calculateAndSetFloatResult_08002ec0(void)\n\n{\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 input3;\n  \n  input2 = DAT_2000024c;\n  input3 = DAT_20000010;\n  input1 = calculate_floating_point_08000ad8(0x3f800000,DAT_20000010);\n  input2 = calculate_floating_point_08000cec(input1,input2);\n  input3 = calculate_floating_point_08000cec(input3,DAT_2000000c);\n  DAT_2000000c = calculate_float_result_08000adc(input3,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_and_set_float_result_08002ec0",
                "uVar1": "input1",
                "uVar2": "input2",
                "uVar3": "input3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_store_result_08002ed4",
            "code": "\nvoid calculateAndStoreResult_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constant;\n  undefined4 variable1;\n  \n  constant = DAT_20000248;\n  variable1 = constant2;\n  result1 = FUN_08000ad8(0x3f800000,constant2);\n  constant = FUN_08000cec(result1,constant);\n  variable1 = FUN_08000cec(variable1,variable2);\n  variable2 = FUN_08000adc(variable1,constant);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_store_result_08002ed4",
                "uVar1": "result1",
                "uVar2": "constant",
                "uVar3": "variable1",
                "uRam20000018": "constant2",
                "uRam20000014": "variable2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "check_and_calculate_result_08002ee8",
            "code": "\nvoid check_and_calculate_result_08002ee8(void)\n\n{\n  undefined4 prevResult;\n  int concatResult;\n  \n  prevResult = DAT_20000250;\n  concatResult = checkConcatenationResult(DAT_20000250,0xc3340000);\n  if ((concatResult != 0) && (concatResult = checkConcatenationSuccess(prevResult,0x42b40000), concatResult != 0)) {\n    calculateFloatResult(prevResult,0x42b40000);\n    return;\n  }\n  calculateFloatingPoint(prevResult,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "check_and_calculate_result_08002ee8",
                "uVar1": "prevResult",
                "iVar2": "concatResult",
                "check_concatenation_result_08001050": "checkConcatenationResult",
                "check_if_concatenation_successful_08001028": "checkConcatenationSuccess",
                "calculate_float_result_08000adc": "calculateFloatResult",
                "calculate_floating_point_08000ad8": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_and_process_data_08002f28",
            "code": "\n\n\nvoid initialize_and_process_data_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  initialize_mpu9250_08002b48();\n  initialize_mpu9250_08002bf0();\n  process_and_handle_data_08002d88();\n  DAT_20000258 = thunk_get_dat_value_0800115c();\n  uVar1 = calculate_result_08000c3c(DAT_20000258 - DAT_20000254);\n  calculate_floating_point_08000e54(uVar1,0x447a0000);\n  initialize_data_08003320();\n  DAT_20000254 = DAT_20000258;\n  calculate_result_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = calculate_and_store_result_08002ed4();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._0_2_ = extracted_value_to_integer_conversion_08001078();\n  uVar1 = calculate_and_set_float_result_08002ec0();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._2_2_ = extracted_value_to_integer_conversion_08001078();\n  check_and_calculate_result_08002ee8();\n  DAT_20001399 = extracted_value_to_integer_conversion_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_and_process_data_08002f28"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "handle_sensor_data_08003034",
            "code": "\nuint handle_sensor_data_08003034(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 processed_data;\n  \n  processed_data = input_4;\n  process_and_handle_data_080040b8(0xee,0,&processed_data,3,\"../Src/MS5611.c\",0x8c,input_3);\n  return (uint)CONCAT12((undefined)processed_data,CONCAT11(processed_data._1_1_,processed_data._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "handle_sensor_data_08003034",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "local_c": "processed_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_08003068",
            "code": "\nundefined4 get_data_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initializeSensorData_08003298(void)\n\n{\n  int index;\n  undefined dataByte1;\n  undefined dataByte2;\n  \n  index = 0;\n  update_and_handle_errors_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    dataByte1 = 0;\n    dataByte2 = 0;\n    process_and_handle_data_080040e8(0xee,index + 0xa0U & 0xffff,&dataByte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(dataByte1,dataByte2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "local_1c": "dataByte1",
                "local_1b": "dataByte2",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_param_08003314",
            "code": "\nvoid set_param_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_param_08003314",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_result_08003330",
            "code": "\nvoid calculate_result_08003330(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4,\n                 undefined4 input_param_5,undefined4 input_param_6,undefined4 input_param_7,undefined4 input_param_8,\n                 undefined4 input_param_9,undefined4 *result_array)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int check_result;\n  undefined4 calc_result_1;\n  undefined4 calc_result_2;\n  undefined4 calc_result_3;\n  undefined4 calc_result_4;\n  int result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  undefined4 result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  int calc_result_5;\n  undefined4 calc_result_6;\n  undefined4 calc_result_7;\n  undefined4 calc_result_8;\n  undefined4 calc_result_9;\n  undefined4 calc_result_10;\n  undefined4 calc_result_11;\n  int calc_result_12;\n  undefined4 calc_result_13;\n  undefined4 calc_result_14;\n  undefined4 calc_result_15;\n  int calc_result_16;\n  undefined8 calc_result_17;\n  undefined8 calc_result_18;\n  \n  calc_result_15 = DAT_20000048;\n  calc_result_14 = DAT_20000044;\n  calc_result_16 = DAT_20000040;\n  calc_result_13 = DAT_2000003c;\n  result_1 = calculate_floating_point_08000cec(input_param_1,input_param_1);\n  result_2 = calculate_floating_point_08000cec(input_param_2);\n  result_1 = calculate_float_result_08000adc(result_1,result_2);\n  result_2 = calculate_floating_point_08000cec(input_param_3);\n  calculate_float_result_08000adc(result_1,result_2);\n  apply_transformation_08000428();\n  validate_and_initialize_program_08005bc8();\n  result_1 = calculate_floating_point_08000a30();\n  check_result = check_concatenated_params_08001014(result_1,0);\n  if (check_result == 0) {\n    result_2 = calculate_floating_point_08000cec(input_param_7);\n    calc_result_1 = calculate_floating_point_08000cec(input_param_8);\n    result_2 = calculate_float_result_08000adc(result_2,calc_result_1);\n    calc_result_1 = calculate_floating_point_08000cec(input_param_9);\n    calculate_float_result_08000adc(result_2,calc_result_1);\n    apply_transformation_08000428();\n    validate_and_initialize_program_08005bc8();\n    result_2 = calculate_floating_point_08000a30();\n    check_result = check_concatenated_params_08001014(result_2,0);\n    if (check_result == 0) {\n      calc_result_17 = apply_transformation_08000428(input_param_4);\n      calculate_shifted_xor_080004d0((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0xa2529d39,0x3f91df46);\n      calc_result_1 = calculate_floating_point_08000a30();\n      calc_result_17 = apply_transformation_08000428(input_param_5);\n      calculate_shifted_xor_080004d0((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0xa2529d39,0x3f91df46);\n      calc_result_2 = calculate_floating_point_08000a30();\n      calc_result_17 = apply_transformation_08000428(input_param_6);\n      calculate_shifted_xor_080004d0((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0xa2529d39,0x3f91df46);\n      calc_result_3 = calculate_floating_point_08000a30();\n      check_result = calculate_float_result_08000adc(calc_result_13);\n      calc_result_4 = calculate_float_result_08000adc(calc_result_16);\n      result_3 = calculate_float_result_08000adc(calc_result_14,calc_result_14);\n      result_4 = calculate_float_result_08000adc(calc_result_15,calc_result_15);\n      result_5 = calculate_floating_point_08000cec(calc_result_13);\n      result_6 = calculate_floating_point_08000cec(calc_result_13,calc_result_16);\n      result_7 = calculate_floating_point_08000cec(calc_result_13,calc_result_14);\n      result_8 = calculate_floating_point_08000cec(calc_result_16);\n      result_9 = calculate_floating_point_08000cec(calc_result_16,calc_result_15);\n      result_10 = calculate_floating_point_08000cec(calc_result_14,calc_result_14);\n      result_11 = calculate_floating_point_08000cec(calc_result_15,calc_result_15);\n      result_1 = calculate_floating_point_08000e54(0x3f800000,result_1);\n      result_2 = calculate_floating_point_08000e54(0x3f800000,result_2);\n      result_12 = calculate_floating_point_08000cec(input_param_7,result_2);\n      result_13 = calculate_floating_point_08000cec(input_param_8,result_2);\n      result_2 = calculate_floating_point_08000cec(input_param_9,result_2);\n      calc_result_5 = calculate_floating_point_08000cec(check_result,result_12);\n      calc_result_6 = calculate_floating_point_08000cec(check_result,result_13);\n      calc_result_7 = calculate_floating_point_08000cec(check_result,result_2);\n      calc_result_8 = calculate_floating_point_08000cec(calc_result_4,result_12);\n      calc_result_9 = calculate_floating_point_08000cec(result_5,result_12);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_15,calc_result_6);\n      calc_result_9 = calculate_floating_point_08000ad8(calc_result_9,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_14,calc_result_7);\n      calc_result_9 = calculate_float_result_08000adc(calc_result_9,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(result_8,result_12);\n      calc_result_9 = calculate_float_result_08000adc(calc_result_9,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_4,result_13);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_10,calc_result_14);\n      calc_result_9 = calculate_float_result_08000adc(calc_result_9,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_4,result_2);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_10,calc_result_15);\n      calc_result_9 = calculate_float_result_08000adc(calc_result_9,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(result_10,result_12);\n      calc_result_9 = calculate_floating_point_08000ad8(calc_result_9,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(result_11,result_12);\n      calc_result_9 = calculate_floating_point_08000ad8(calc_result_9,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_15,calc_result_5);\n      calc_result_11 = calculate_floating_point_08000cec(result_5,result_13);\n      calc_result_10 = calculate_float_result_08000adc(calc_result_10,calc_result_11);\n      calc_result_7 = calculate_floating_point_08000cec(calc_result_16,calc_result_7);\n      calc_result_7 = calculate_floating_point_08000ad8(calc_result_10,calc_result_7);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_14,calc_result_8);\n      calc_result_7 = calculate_float_result_08000adc(calc_result_7,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(result_8,result_13);\n      calc_result_7 = calculate_floating_point_08000ad8(calc_result_7,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(result_10,result_13);\n      calc_result_7 = calculate_float_result_08000adc(calc_result_7,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(result_3,result_2);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_10,calc_result_15);\n      calc_result_7 = calculate_float_result_08000adc(calc_result_7,calc_result_10);\n      calc_result_10 = calculate_floating_point_08000cec(result_11,result_13);\n      calc_result_7 = calculate_floating_point_08000ad8(calc_result_7,calc_result_10);\n      calc_result_9 = calculate_floating_point_08000cec(calc_result_9,calc_result_9);\n      calc_result_7 = calculate_floating_point_08000cec(calc_result_7,calc_result_7);\n      calculate_float_result_08000adc(calc_result_9,calc_result_7);\n      apply_transformation_08000428();\n      validate_and_initialize_program_08005bc8();\n      calc_result_12 = calculate_floating_point_08000a30();\n      calc_result_7 = calculate_floating_point_08000cec(calc_result_5 + -0x80000000,calc_result_14);\n      calc_result_6 = calculate_floating_point_08000cec(calc_result_16,calc_result_6);\n      calc_result_6 = calculate_float_result_08000adc(calc_result_7,calc_result_6);\n      result_5 = calculate_floating_point_08000cec(result_5,result_2);\n      result_5 = calculate_float_result_08000adc(calc_result_6,result_5);\n      calc_result_6 = calculate_floating_point_08000cec(calc_result_15,calc_result_8);\n      result_5 = calculate_float_result_08000adc(result_5,calc_result_6);\n      calc_result_6 = calculate_floating_point_08000cec(result_8,result_2);\n      result_5 = calculate_floating_point_08000ad8(result_5,calc_result_6);\n      calc_result_6 = calculate_floating_point_08000cec(result_3,result_13);\n      calc_result_6 = calculate_floating_point_08000cec(calc_result_6,calc_result_15);\n      result_5 = calculate_float_result_08000adc(result_5,calc_result_6);\n      calc_result_6 = calculate_floating_point_08000cec(result_10,result_2);\n      result_5 = calculate_floating_point_08000ad8(result_5,calc_result_6);\n      calc_result_6 = calculate_floating_point_08000cec(result_11,result_2);\n      result_5 = calculate_float_result_08000adc(result_5,calc_result_6);\n      calc_result_6 = calculate_float_result_08000adc(result_5,result_5);\n      calc_result_7 = calculate_float_result_08000adc(result_9);\n      calc_result_8 = calculate_floating_point_08000cec(calc_result_14,check_result);\n      calc_result_7 = calculate_floating_point_08000ad8(calc_result_7,calc_result_8);\n      calc_result_8 = calculate_floating_point_08000cec(input_param_1,result_1);\n      calc_result_7 = calculate_floating_point_08000ad8(calc_result_7,calc_result_8);\n      calc_result_8 = calculate_floating_point_08000cec(calc_result_15,result_3);\n      calc_result_9 = calculate_float_result_08000adc(result_6);\n      calc_result_8 = calculate_float_result_08000adc(calc_result_8,calc_result_9);\n      calc_result_9 = calculate_floating_point_08000cec(input_param_2,result_1);\n      calc_result_8 = calculate_floating_point_08000ad8(calc_result_8,calc_result_9);\n      calc_result_9 = calculate_floating_point_08000cec(calc_result_14,result_5);\n      calc_result_10 = calculate_floating_point_08000ad8(0x3f000000,result_10);\n      result_11 = calculate_floating_point_08000ad8(calc_result_10,result_11);\n      result_11 = calculate_floating_point_08000cec(result_11,calc_result_12);\n      calc_result_10 = calculate_floating_point_08000ad8(result_9,result_7);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_10,result_5);\n      result_11 = calculate_float_result_08000adc(result_11,calc_result_10);\n      result_11 = calculate_floating_point_08000ad8(result_11,result_12);\n      result_12 = calculate_floating_point_08000cec(calc_result_16,result_5);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_16,calc_result_14);\n      calc_result_11 = calculate_floating_point_08000cec(calc_result_13,calc_result_15);\n      calc_result_10 = calculate_floating_point_08000ad8(calc_result_10,calc_result_11);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_10,calc_result_12);\n      calc_result_11 = calculate_floating_point_08000cec(calc_result_14,calc_result_15);\n      result_6 = calculate_float_result_08000adc(calc_result_11,result_6);\n      result_6 = calculate_floating_point_08000cec(result_6,result_5);\n      result_6 = calculate_float_result_08000adc(calc_result_10,result_6);\n      result_6 = calculate_floating_point_08000ad8(result_6,result_13);\n      result_13 = calculate_floating_point_08000cec(calc_result_14,calc_result_12);\n      calc_result_10 = calculate_floating_point_08000ad8(0x3f000000,result_8);\n      calc_result_10 = calculate_floating_point_08000ad8(calc_result_10,result_10);\n      calc_result_10 = calculate_floating_point_08000cec(calc_result_10,result_5);\n      result_7 = calculate_float_result_08000adc(result_7,result_9);\n      result_7 = calculate_floating_point_08000cec(result_7,calc_result_12);\n      result_7 = calculate_float_result_08000adc(calc_result_10,result_7);\n      result_2 = calculate_floating_point_08000ad8(result_7,result_2);\n      result_7 = calculate_floating_point_08000cec(result_3 + -0x80000000,calc_result_7);\n      result_9 = calculate_floating_point_08000cec(calc_result_4,calc_result_8);\n      result_7 = calculate_float_result_08000adc(result_7,result_9);\n      result_9 = calculate_floating_point_08000cec(calc_result_9,result_11);\n      result_7 = calculate_floating_point_08000ad8(result_7,result_9);\n      result_9 = calculate_floating_point_08000cec(calc_result_15,calc_result_12 + -0x80000000);\n      result_9 = calculate_float_result_08000adc(result_9,result_12);\n      result_9 = calculate_floating_point_08000cec(result_9,result_6);\n      result_7 = calculate_float_result_08000adc(result_7,result_9);\n      result_9 = calculate_floating_point_08000cec(result_13,result_2);\n      result_7 = calculate_float_result_08000adc(result_7,result_9);\n      result_8 = calculate_float_result_08000adc(result_8);\n      result_8 = calculate_floating_point_08000ad8(0x3f800000,result_8);\n      result_9 = calculate_float_result_08000adc(result_10);\n      result_8 = calculate_floating_point_08000ad8(result_8,result_9);\n      result_1 = calculate_floating_point_08000cec(input_param_3,result_1);\n      result_1 = calculate_floating_point_08000ad8(result_8,result_1);\n      result_8 = calculate_floating_point_08000cec(calc_result_15,result_5);\n      result_5 = calculate_floating_point_08000cec(calc_result_13,result_5);\n      result_9 = calculate_floating_point_08000cec(result_4,calc_result_7);\n      result_10 = calculate_floating_point_08000cec(check_result,calc_result_8);\n      result_9 = calculate_float_result_08000adc(result_9,result_10);\n      result_10 = calculate_floating_point_08000cec(calc_result_16,0x40800000);\n      result_10 = calculate_floating_point_08000cec(result_10,result_1);\n      result_9 = calculate_floating_point_08000ad8(result_9,result_10);\n      result_10 = calculate_floating_point_08000cec(result_11,result_8);\n      result_9 = calculate_float_result_08000adc(result_9,result_10);\n      result_10 = calculate_float_result_08000adc(result_13,result_5);\n      result_10 = calculate_floating_point_08000cec(result_10,result_6);\n      result_9 = calculate_float_result_08000adc(result_9,result_10);\n      result_10 = calculate_floating_point_08000cec(calc_result_15,calc_result_12);\n      result_13 = calculate_floating_point_08000cec(calc_result_16,calc_result_6);\n      result_10 = calculate_floating_point_08000ad8(result_10,result_13);\n      result_10 = calculate_floating_point_08000cec(result_10,result_2);\n      result_9 = calculate_float_result_08000adc(result_9,result_10);\n      calc_result_5 = calculate_float_result_08000adc(calc_result_12,calc_result_12);\n      result_10 = calculate_floating_point_08000cec(calc_result_16,calc_result_12);\n      result_13 = calculate_floating_point_08000cec(check_result + -0x80000000,calc_result_7);\n      result_4 = calculate_floating_point_08000cec(result_4,calc_result_8);\n      result_4 = calculate_float_result_08000adc(result_13,result_4);\n      result_13 = calculate_floating_point_08000cec(calc_result_14,0x40800000);\n      result_1 = calculate_floating_point_08000cec(result_13,result_1);\n      result_1 = calculate_floating_point_08000ad8(result_4,result_1);\n      result_4 = calculate_floating_point_08000cec(calc_result_14,calc_result_5 + -0x80000000);\n      result_4 = calculate_floating_point_08000ad8(result_4,result_5);\n      result_4 = calculate_floating_point_08000cec(result_4,result_11);\n      result_1 = calculate_float_result_08000adc(result_1,result_4);\n      result_4 = calculate_float_result_08000adc(result_8,result_10);\n      result_4 = calculate_floating_point_08000cec(result_4,result_6);\n      result_1 = calculate_float_result_08000adc(result_1,result_4);\n      result_4 = calculate_floating_point_08000cec(calc_result_13,calc_result_12);\n      result_5 = calculate_floating_point_08000cec(calc_result_14,calc_result_6);\n      result_4 = calculate_floating_point_08000ad8(result_4,result_5);\n      result_4 = calculate_floating_point_08000cec(result_4,result_2);\n      result_4 = calculate_float_result_08000adc(result_1,result_4);\n      result_1 = calculate_floating_point_08000cec(calc_result_4,calc_result_7);\n      calc_result_4 = calculate_floating_point_08000cec(result_3,calc_result_8);\n      result_1 = calculate_float_result_08000adc(result_1,calc_result_4);\n      calc_result_4 = calculate_floating_point_08000cec(calc_result_15,calc_result_5 + -0x80000000);\n      calc_result_4 = calculate_float_result_08000adc(calc_result_4,result_12);\n      calc_result_4 = calculate_floating_point_08000cec(calc_result_4,result_11);\n      result_1 = calculate_float_result_08000adc(result_1,calc_result_4);\n      calc_result_4 = calculate_floating_point_08000cec(calc_result_13,calc_result_12 + -0x80000000);\n      calc_result_4 = calculate_float_result_08000adc(calc_result_4,calc_result_9);\n      calc_result_4 = calculate_floating_point_08000cec(calc_result_4,result_6);\n      result_1 = calculate_float_result_08000adc(result_1,calc_result_4);\n      result_2 = calculate_floating_point_08000cec(result_2,result_10);\n      calc_result_4 = calculate_float_result_08000adc(result_1,result_2);\n      result_1 = calculate_floating_point_08000cec(result_7);\n      result_2 = calculate_floating_point_08000cec(result_9);\n      result_1 = calculate_float_result_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(result_4,result_4);\n      result_1 = calculate_float_result_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(calc_result_4,calc_result_4);\n      calculate_float_result_08000adc(result_1,result_2);\n      apply_transformation_08000428();\n      validate_and_initialize_program_08005bc8();\n      result_1 = calculate_floating_point_08000a30();\n      result_5 = calculate_floating_point_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = calculate_floating_point_08000cec(calc_result_16 + -0x80000000,calc_result_1);\n      result_6 = calculate_floating_point_08000cec(calc_result_14,calc_result_2);\n      result_2 = calculate_floating_point_08000ad8(result_2,result_6);\n      result_6 = calculate_floating_point_08000cec(calc_result_15,calc_result_3);\n      result_2 = calculate_floating_point_08000ad8(result_2,result_6);\n      result_6 = calculate_floating_point_08000cec(result_2,0x3f000000);\n      result_7 = calculate_floating_point_08000cec(result_7,result_5);\n      result_2 = DAT_20000360;\n      result_7 = calculate_floating_point_08000cec(result_7,result_1);\n      result_6 = calculate_floating_point_08000ad8(result_6,result_7);\n      result_2 = calculate_floating_point_08000cec(result_6,result_2);\n      result_6 = calculate_float_result_08000adc(result_2,calc_result_13);\n      result_7 = calculate_floating_point_08000cec(calc_result_13,calc_result_1);\n      result_8 = calculate_floating_point_08000cec(calc_result_14,calc_result_3);\n      result_2 = DAT_20000360;\n      result_7 = calculate_float_result_08000adc(result_7,result_8);\n      result_8 = calculate_floating_point_08000cec(calc_result_15,calc_result_2);\n      result_7 = calculate_floating_point_08000ad8(result_7,result_8);\n      result_7 = calculate_floating_point_08000cec(result_7,0x3f000000);\n      result_8 = calculate_floating_point_08000cec(result_9,result_5);\n      result_8 = calculate_floating_point_08000cec(result_8,result_1);\n      result_7 = calculate_floating_point_08000ad8(result_7,result_8);\n      result_2 = calculate_floating_point_08000cec(result_7,result_2);\n      result_7 = calculate_float_result_08000adc(result_2,calc_result_16);\n      result_2 = DAT_20000360;\n      result_8 = calculate_floating_point_08000cec(calc_result_13,calc_result_2);\n      result_9 = calculate_floating_point_08000cec(calc_result_16,calc_result_3);\n      result_8 = calculate_floating_point_08000ad8(result_8,result_9);\n      result_9 = calculate_floating_point_08000cec(calc_result_15,calc_result_1);\n      result_8 = calculate_float_result_08000adc(result_8,result_9);\n      result_8 = calculate_floating_point_08000cec(result_8,0x3f000000);\n      result_4 = calculate_floating_point_08000cec(result_4,result_5);\n      result_4 = calculate_floating_point_08000cec(result_4,result_1);\n      result_4 = calculate_floating_point_08000ad8(result_8,result_4);\n      result_2 = calculate_floating_point_08000cec(result_4,result_2);\n      result_2 = calculate_float_result_08000adc(result_2,calc_result_14);\n      calc_result_13 = calculate_floating_point_08000cec(calc_result_13,calc_result_3);\n      calc_result_2 = calculate_floating_point_08000cec(calc_result_16,calc_result_2);\n      calc_result_13 = calculate_float_result_08000adc(calc_result_13,calc_result_2);\n      calc_result_14 = calculate_floating_point_08000cec(calc_result_14,calc_result_1);\n      calc_result_13 = calculate_floating_point_08000ad8(calc_result_13,calc_result_14);\n      calc_result_14 = calculate_floating_point_08000cec(calc_result_13,0x3f000000);\n      calc_result_13 = calculate_floating_point_08000cec(calc_result_4,result_5);\n      result_1 = calculate_floating_point_08000cec(calc_result_13,result_1);\n      calc_result_13 = DAT_20000360;\n      calc_result_14 = calculate_floating_point_08000ad8(calc_result_14,result_1);\n      calc_result_13 = calculate_floating_point_08000cec(calc_result_14,calc_result_13);\n      calc_result_13 = calculate_float_result_08000adc(calc_result_13,calc_result_15);\n      calc_result_14 = calculate_floating_point_08000cec(result_6,result_6);\n      calc_result_15 = calculate_floating_point_08000cec(result_7,result_7);\n      calc_result_14 = calculate_float_result_08000adc(calc_result_14,calc_result_15);\n      calc_result_15 = calculate_floating_point_08000cec(result_2,result_2);\n      calc_result_14 = calculate_float_result_08000adc(calc_result_14,calc_result_15);\n      calc_result_15 = calculate_floating_point_08000cec(calc_result_13,calc_result_13);\n      calculate_float_result_08000adc(calc_result_14,calc_result_15);\n      apply_transformation_08000428();\n      validate_and_initialize_program_08005bc8();\n      calc_result_14 = calculate_floating_point_08000a30();\n      calc_result_14 = calculate_floating_point_08000e54(0x3f800000,calc_result_14);\n      calc_result_15 = calculate_floating_point_08000cec(result_6,calc_result_14);\n      DAT_2000003c = calc_result_15;\n      calc_result_16 = calculate_floating_point_08000cec(result_7,calc_result_14);\n      DAT_20000040 = calc_result_16;\n      result_1 = calculate_floating_point_08000cec(result_2,calc_result_14);\n      DAT_20000044 = result_1;\n      DAT_20000048 = calculate_floating_point_08000cec(calc_result_13,calc_result_14);\n      calc_result_13 = calculate_floating_point_08000cec(calc_result_16,DAT_20000048);\n      calc_result_14 = calculate_floating_point_08000cec(calc_result_15,result_1);\n      calc_result_13 = calculate_floating_point_08000ad8(calc_result_13,calc_result_14);\n      calculate_float_result_08000adc(calc_result_13,calc_result_13);\n      apply_transformation_08000428();\n      calc_result_17 = perform_operation_08005854();\n      calc_result_17 = calculate_shifted_xor_080004d0((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0,0x40668000);\n      convert_floating_point_08000724((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0x54442d18,0x400921fb);\n      calc_result_13 = calculate_floating_point_08000a30();\n      *result_array = calc_result_13;\n      calc_result_16 = DAT_20000040;\n      calc_result_13 = DAT_2000003c;\n      calc_result_14 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      calc_result_15 = calculate_floating_point_08000cec(calc_result_16,calc_result_16);\n      calc_result_15 = calculate_floating_point_08000ad8(calc_result_14,calc_result_15);\n      calc_result_14 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_floating_point_08000ad8(calc_result_15,result_1);\n      calc_result_15 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_result_08000adc(result_1,result_2);\n      calc_result_17 = apply_transformation_08000428();\n      calc_result_13 = calculate_floating_point_08000cec(calc_result_13,calc_result_16);\n      calc_result_14 = calculate_floating_point_08000cec(calc_result_14,calc_result_15);\n      calc_result_13 = calculate_float_result_08000adc(calc_result_13,calc_result_14);\n      calculate_float_result_08000adc(calc_result_13,calc_result_13);\n      calc_result_18 = apply_transformation_08000428();\n      calc_result_17 = thunk_calculate_result_08003330_08006070((int)calc_result_18,(int)((ulonglong)calc_result_18 >> 0x20),(int)calc_result_17,\n                                  (int)((ulonglong)calc_result_17 >> 0x20));\n      calc_result_17 = calculate_shifted_xor_080004d0((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0,0x40668000);\n      convert_floating_point_08000724((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0x54442d18,0x400921fb);\n      calc_result_13 = calculate_floating_point_08000a30();\n      result_array[1] = calc_result_13;\n      calc_result_16 = DAT_20000040;\n      calc_result_13 = DAT_2000003c;\n      calc_result_14 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      calc_result_15 = calculate_floating_point_08000cec(calc_result_16,calc_result_16);\n      calc_result_15 = calculate_float_result_08000adc(calc_result_14,calc_result_15);\n      calc_result_14 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_floating_point_08000ad8(calc_result_15,result_1);\n      calc_result_15 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000ad8(result_1,result_2);\n      calc_result_17 = apply_transformation_08000428();\n      calc_result_14 = calculate_floating_point_08000cec(calc_result_16,calc_result_14);\n      calc_result_13 = calculate_floating_point_08000cec(calc_result_13,calc_result_15);\n      calc_result_13 = calculate_float_result_08000adc(calc_result_14,calc_result_13);\n      calculate_float_result_08000adc(calc_result_13,calc_result_13);\n      calc_result_18 = apply_transformation_08000428();\n      calc_result_17 = thunk_calculate_result_08003330_08006070((int)calc_result_18,(int)((ulonglong)calc_result_18 >> 0x20),(int)calc_result_17,\n                                  (int)((ulonglong)calc_result_17 >> 0x20));\n      calc_result_17 = calculate_shifted_xor_080004d0((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0,0x40668000);\n      convert_floating_point_08000724((int)calc_result_17,(int)((ulonglong)calc_result_17 >> 0x20),0x54442d18,0x400921fb);\n      calc_result_13 = calculate_floating_point_08000a30();\n      result_array[2] = calc_result_13;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_result_08003330",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "param_7": "input_param_7",
                "param_8": "input_param_8",
                "param_9": "input_param_9",
                "param_10": "result_array",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "check_result",
                "uVar4": "calc_result_1",
                "uVar5": "calc_result_2",
                "uVar6": "calc_result_3",
                "uVar7": "calc_result_4",
                "iVar8": "result_3",
                "uVar9": "result_4",
                "uVar10": "result_5",
                "uVar11": "result_6",
                "uVar12": "result_7",
                "uVar13": "result_8",
                "uVar14": "result_9",
                "uVar15": "result_10",
                "uVar16": "result_11",
                "uVar17": "result_12",
                "uVar18": "result_13",
                "iVar19": "calc_result_5",
                "uVar20": "calc_result_6",
                "uVar21": "calc_result_7",
                "uVar22": "calc_result_8",
                "uVar23": "calc_result_9",
                "uVar24": "calc_result_10",
                "uVar25": "calc_result_11",
                "iVar26": "calc_result_12",
                "uVar27": "calc_result_13",
                "uVar28": "calc_result_14",
                "uVar29": "calc_result_15",
                "iVar30": "calc_result_16",
                "uVar31": "calc_result_17",
                "uVar32": "calc_result_18"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_param_left_08003eb0",
            "code": "\nlonglong shift_param_left_08003eb0(uint input)\n\n{\n  if (DAT_20000280 == 0) {\n    call_interrupt(0x3f);\n    return concat_result(input,1);\n  }\n  return (ulonglong)input << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_param_left_08003eb0",
                "param_1": "input",
                "software_interrupt": "call_interrupt",
                "CONCAT44": "concat_result"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_value_08003ec8",
            "code": "\nundefined4 incrementAndStoreValue_08003ec8(int baseAddress,undefined newValue)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = newValue;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid setParamValues_08003f3c(int isParam1Zero,int isParam2Zero,int isParam3Zero)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,isParam1Zero == 0);\n  set_param_value_08001424(0x40011000,0x4000,isParam2Zero == 0);\n  set_param_value_08001424(0x40011000,0x2000,isParam3Zero == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "isParam1Zero",
                "param_2": "isParam2Zero",
                "param_3": "isParam3Zero"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_in_memory_08003fc4",
            "code": "\nvoid setParamInMemory_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_in_memory_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "update_value_in_data_structure_08003fd0",
            "code": "\nvoid updateValueInDataStructure_08003fd0(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "update_value_in_data_structure_08003fd0",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "update_parameter_08003fdc",
            "code": "\nvoid updateParameter_08003fdc(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "update_parameter_08003fdc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid setParamValue_08003fe8(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "update_flag_values_08003ff4",
            "code": "\nvoid update_flag_values_08003ff4(void)\n\n{\n  update_flag(&DAT_200015f8,4);\n  update_flag(&DAT_20001540,8);\n  update_flag(&DAT_200014c8,8);\n  update_flag(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "update_flag_values_08003ff4",
                "update_flag_08002538": "update_flag"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "configure_and_update_system_08004028",
            "code": "\nvoid configure_and_update_system_08004028(void)\n\n{\n  int iteration_count;\n  \n  initialize_and_configure_system();\n  update_flag_values();\n  iteration_count = 3;\n  do {\n    set_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  set_parameter_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "configure_and_update_system_08004028",
                "initialize_and_configure_system_0800458c": "initialize_and_configure_system",
                "update_flag_values_08003ff4": "update_flag_values",
                "set_param_values_08003f3c": "set_parameter_values",
                "iVar1": "iteration_count"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "update_and_handle_errors_0800403c",
            "code": "\nvoid updateAndHandleErrors_0800403c(undefined4 dataPtr1,undefined4 dataPtr2,undefined updateFlag,int errorFlag)\n\n{\n  int errorCheck;\n  undefined localData [8];\n  \n  localData[0] = updateFlag;\n  errorCheck = update_data_values_08001828(&DAT_20001504,dataPtr1,dataPtr2,1,localData,1,200);\n  if (errorCheck != 0) {\n    continuous_error_handling_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (errorFlag != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "update_and_handle_errors_0800403c",
                "param_1": "dataPtr1",
                "param_2": "dataPtr2",
                "param_3": "updateFlag",
                "param_4": "errorFlag",
                "iVar1": "errorCheck",
                "local_14": "localData"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_and_handle_data_0800407c",
            "code": "\nundefined process_and_handle_data_0800407c(undefined4 input_param_1,undefined4 input_param_2,undefined4 error_param_1,undefined4 error_param_2)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = process_data_08001938(&DAT_20001504,input_param_1,input_param_2,1,result,1,200);\n  if (iVar1 != 0) {\n    continuous_error_handling_08004490(error_param_1,error_param_2);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_and_handle_data_0800407c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "error_param_1",
                "param_4": "error_param_2",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_and_handle_data_080040b8",
            "code": "\nvoid processAndHandleData_080040b8(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4,\n                 undefined4 errorData1,undefined4 errorData2)\n\n{\n  int result;\n  \n  result = process_data_08001938(&DAT_20001504,data1,data2,1,data3,data4,200,data4);\n  if (result != 0) {\n    continuous_error_handling_08004490(errorData1,errorData2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_and_handle_data_080040b8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "errorData1",
                "param_6": "errorData2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "process_and_handle_data_080040e8",
            "code": "\nvoid processAndHandleData_080040e8(undefined4 input,int baseAddress,int outputPointer,int length)\n\n{\n  undefined processedData;\n  int index;\n  undefined *currentPointer;\n  int lineNumber;\n  \n  currentPointer = (undefined *)(outputPointer + -1);\n  lineNumber = length;\n  for (index = 0; index < length; index = index + 1) {\n    processedData = process_and_handle_data_0800407c(input,baseAddress + index & 0xffff,\"../Src/i2c.c\",0x4c,lineNumber);\n    currentPointer = currentPointer + 1;\n    *currentPointer = processedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "process_and_handle_data_080040e8",
                "param_1": "input",
                "param_2": "baseAddress",
                "param_3": "outputPointer",
                "param_4": "length",
                "uVar1": "processedData",
                "iVar2": "index",
                "puVar3": "currentPointer",
                "iVar4": "lineNumber"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_sensor_data_0800411c",
            "code": "\nvoid processSensorData_0800411c(void)\n\n{\n  undefined4 *ptr1;\n  longlong result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  int value;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  undefined4 *ptr2;\n  undefined4 unaff_value;\n  int temp10;\n  int temp11;\n  bool isNegative;\n  undefined8 result2;\n  \n  value = thunk_get_dat_value_0800115c();\n  if (1 < (uint)(value - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_dat_value_0800115c();\n    initialize_and_process_data_08002f28();\n  }\n  value = thunk_get_dat_value_0800115c();\n  if (2 < (uint)(value - DAT_20000294)) {\n    DAT_20000294 = thunk_get_dat_value_0800115c();\n    initialize_and_calculate_results_08004a84();\n  }\n  value = thunk_get_dat_value_0800115c();\n  if (3 < (uint)(value - DAT_20000290)) {\n    DAT_20000290 = thunk_get_dat_value_0800115c();\n    initialize_data_processing_08004348();\n    process_and_decode_data_08004384();\n    decode_and_process_data_080043f0();\n    process_and_decode_data_08004410();\n    process_and_decode_data_08004434();\n    copy_and_process_data_080043bc();\n    decode_and_process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    temp11 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    temp6 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)temp11) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)temp11) >> 0x20) << 9;\n    temp7 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)temp11 >> 7);\n    temp8 = temp7 + (uint)DAT_20000260 * 0x10000;\n    temp2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)temp11) >> 8);\n    value = temp6 + 2000;\n    temp3 = temp2 + (uint)DAT_2000025e * 0x8000;\n    isNegative = (int)temp6 < 0;\n    if (1999 < value) {\n      temp6 = 0;\n    }\n    temp1 = temp6;\n    if (isNegative != SBORROW4(value,2000)) {\n      temp10 = temp6 * temp6 * 5;\n      temp6 = temp10 >> 2;\n      temp1 = temp10 >> 1;\n    }\n    temp9 = temp8 - temp1;\n    result = (ulonglong)(temp3 - temp6) * (ulonglong)DAT_2000026c;\n    temp10 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)temp11 >> 0x28) +\n               (uint)CARRY4(temp2,(uint)DAT_2000025e * 0x8000)) - ((int)temp6 >> 0x1f)) -\n             (uint)(temp3 < temp6)) + (int)((ulonglong)result >> 0x20);\n    temp2 = (uint)result >> 0x15 | temp10 * 0x800;\n    temp4 = calculate_value_08000c44(temp2 - temp9 >> 0xf |\n                         (((temp10 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)temp11 >> 0x27) +\n                            (uint)CARRY4(temp7,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)temp1 >> 0x1f)) - (uint)(temp8 < temp1))) - (uint)(temp2 < temp9)\n                         ) * 0x20000);\n    temp4 = calculate_floating_point_08000e54(temp4,0x42c80000);\n    DAT_20000354 = temp4;\n    temp5 = calculate_value_08000c44(value);\n    DAT_20000358 = calculate_floating_point_08000e54(temp5,0x42c80000);\n    calculate_floating_point_08000e54(temp4,0x447d5000);\n    result2 = apply_transformation_08000428();\n    result2 = perform_calculation_08005900((int)result2,(int)((ulonglong)result2 >> 0x20),0x60000000,0x3fc85b95);\n    result2 = calculate_inverse_08000168(0,0x3ff00000,(int)result2,(int)((ulonglong)result2 >> 0x20));\n    calculate_shifted_xor_080004d0((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40e5a540);\n    temp4 = calculate_floating_point_08000a30();\n    temp5 = 0;\n    ptr2 = &DAT_20000300;\n    DAT_20000350 = temp4;\n    do {\n      ptr1 = ptr2 + 1;\n      *ptr2 = *ptr1;\n      temp5 = calculate_float_result_08000adc(temp5);\n      ptr2 = ptr1;\n    } while (ptr1 != &DAT_2000034c);\n    DAT_2000034c = temp4;\n    temp4 = calculate_float_result_08000adc(temp5,temp4);\n    DAT_200002fc = calculate_floating_point_08000e54(temp4,0x41a00000);\n    value = extracted_value_to_integer_conversion_08001078();\n    DAT_200014ab = value * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    update_and_handle_errors_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_dat_value_0800115c();\n  }\n  value = thunk_get_dat_value_0800115c();\n  if (((10 < (uint)(value - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = handle_sensor_data_08003034();\n    DAT_20000275 = '\\x01';\n    update_and_handle_errors_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaff_value);\n    DAT_20000278 = thunk_get_dat_value_0800115c();\n  }\n  value = thunk_get_dat_value_0800115c();\n  if (((10 < (uint)(value - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = handle_sensor_data_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "puVar1": "ptr1",
                "lVar2": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "value",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "puVar13": "ptr2",
                "unaff_r4": "unaff_value",
                "iVar14": "temp10",
                "iVar15": "temp11",
                "bVar16": "isNegative",
                "uVar17": "result2"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initialize_system_08004194(void)\n\n{\n  configure_and_update_system();\n  initialize_and_check_status();\n  initialize_mpu9250_and_data();\n  initialize_sensor_data();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "configure_and_update_system_08004028": "configure_and_update_system",
                "initialize_and_check_status_08004c70": "initialize_and_check_status",
                "initialize_mpu9250_and_data_08002ea0": "initialize_mpu9250_and_data",
                "initialize_sensor_data_08003298": "initialize_sensor_data"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_data_processing_080041ae",
            "code": "\nvoid continuous_data_processing_080041ae(void)\n\n{\n  shift_parameter_left(0);\n  initialize_system();\n  do {\n    increment_counter();\n    process_sensor_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_data_processing_080041ae",
                "shift_param_left_08003eb0": "shift_parameter_left",
                "initialize_system_08004194": "initialize_system",
                "increment_counter_0800114c": "increment_counter",
                "process_sensor_data_0800411c": "process_sensor_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_data_structure_080041c4",
            "code": "\nvoid initializeDataStructure_080041c4(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 extraOutput;\n  \n  set_param_in_memory_08003fc4(0);\n  update_value_in_data_structure_08003fd0(0);\n  update_parameter_08003fdc(0);\n  set_param_value_08003fe8(0,extraOutput,inputParam3,inputParam4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_data_structure_080041c4",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "extraout_r1": "extraOutput"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "update_parameter_value_0800426c",
            "code": "\n\n\nvoid updateParameterValue_0800426c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint intValue1;\n  uint intValue2;\n  uint intValue3;\n  uint intValue4;\n  \n  result1 = calculate_floating_point_08000ad8();\n  result2 = calculate_float_result_08000adc(input1,input2);\n  result3 = calculate_floating_point_08000ad8(result1,input3);\n  result3 = calculate_float_result_08000adc(result3,input4);\n  calculate_floating_point_08000ad8(result3,0x447a0000);\n  intValue1 = extracted_value_to_integer_conversion_08001078();\n  result3 = calculate_floating_point_08000ad8(result2,input3);\n  result3 = calculate_floating_point_08000ad8(result3,input4);\n  calculate_floating_point_08000ad8(result3,0x447a0000);\n  intValue2 = extracted_value_to_integer_conversion_08001078();\n  result1 = calculate_float_result_08000adc(result1,input3);\n  result1 = calculate_floating_point_08000ad8(result1,input4);\n  calculate_floating_point_08000ad8(result1,0x447a0000);\n  intValue3 = extracted_value_to_integer_conversion_08001078();\n  result1 = calculate_float_result_08000adc(input3,result2);\n  result1 = calculate_float_result_08000adc(result1,input4);\n  calculate_floating_point_08000ad8(result1,0x447a0000);\n  intValue4 = extracted_value_to_integer_conversion_08001078();\n  if (999 < (int)intValue4) {\n    intValue4 = 1000;\n  }\n  if (999 < (int)intValue3) {\n    intValue3 = 1000;\n  }\n  if (999 < (int)intValue2) {\n    intValue2 = 1000;\n  }\n  if (999 < (int)intValue1) {\n    intValue1 = 1000;\n  }\n  DAT_200002a0 = intValue2 & ~((int)intValue2 >> 0x1f);\n  DAT_200002a4 = intValue1 & ~((int)intValue1 >> 0x1f);\n  DAT_2000029c = intValue3 & ~((int)intValue3 >> 0x1f);\n  DAT_20000298 = intValue4 & ~((int)intValue4 >> 0x1f);\n  set_param_in_memory_08003fc4();\n  update_value_in_data_structure_08003fd0(DAT_2000029c);\n  update_parameter_08003fdc(DAT_200002a0);\n  set_param_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "update_parameter_value_0800426c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "intValue1",
                "uVar5": "intValue2",
                "uVar6": "intValue3",
                "uVar7": "intValue4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_and_decode_data_08004300",
            "code": "\nvoid process_and_decode_data_08004300(uint input_key,byte *input_data,uint data_length)\n\n{\n  uint result;\n  byte *current_byte;\n  \n  process_string_data_08004c8c(&DAT_0800732e);\n  decode_and_process_data_08004c18(data_length & 0xff);\n  result = data_length & 0xff ^ input_key;\n  decode_and_process_data_08004c18(input_key);\n  for (current_byte = input_data; (int)current_byte - (int)input_data < (int)data_length; current_byte = current_byte + 1) {\n    decode_and_process_data_08004c18(*current_byte);\n    result = result ^ *current_byte;\n  }\n  decode_and_process_data_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_and_decode_data_08004300",
                "param_1": "input_key",
                "param_2": "input_data",
                "param_3": "data_length",
                "uVar1": "result",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_processing_08004348",
            "code": "\n\n\nvoid initializeDataProcessing_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 dataAddress;\n  uint maskedParam2;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  dataAddress = 0x40003e9;\n  maskedParam2 = param2 & 0xff000000;\n  param3Copy = param3;\n  process_and_decode_data_08004300(100,&dataAddress,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_processing_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "dataAddress",
                "local_c": "maskedParam2",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "process_and_decode_data_08004384",
            "code": "\n\n\nvoid processAndDecodeData_08004384(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  undefined4 temporaryVar1;\n  undefined4 temporaryVar2;\n  uint temporaryVar3;\n  \n  _DAT_200013bd = 0x2a0007;\n  temporaryVar1 = _DAT_200013b9;\n  temporaryVar2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  temporaryVar3 = inputParam4 & 0xff000000;\n  process_and_decode_data_08004300(0x65,&temporaryVar1,0xb,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "process_and_decode_data_08004384",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_14": "temporaryVar1",
                "uStack_10": "temporaryVar2",
                "local_c": "temporaryVar3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_data_080043bc",
            "code": "\nvoid copyAndProcessData_080043bc(void)\n\n{\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  undefined4 *outputPtr;\n  undefined4 *inputPtr;\n  undefined4 outputData [2];\n  undefined2 inputData [6];\n  \n  inputPtr = (undefined4 *)&DAT_2000142a;\n  outputPtr = outputData;\n  do {\n    tempValue1 = *inputPtr;\n    tempValue2 = inputPtr[1];\n    inputPtr = inputPtr + 2;\n    *outputPtr = tempValue1;\n    outputPtr[1] = tempValue2;\n    outputPtr = outputPtr + 2;\n  } while (inputPtr != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)outputPtr = DAT_2000143a;\n  process_and_decode_data_08004300(0x66,outputData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_data_080043bc",
                "puVar4": "inputPtr",
                "puVar3": "outputPtr",
                "local_24": "outputData",
                "local_1c": "inputData",
                "uVar1": "tempValue1",
                "uVar2": "tempValue2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "decode_and_process_data_080043f0",
            "code": "\n\n\nvoid decode_and_process_data_080043f0(undefined4 data_ptr,undefined4 data_len,undefined4 additional_data)\n\n{\n  undefined4 ptr_1;\n  undefined4 ptr_2;\n  undefined4 data_array [2];\n  \n  ptr_1 = _DAT_200013dd;\n  ptr_2 = _DAT_200013e1;\n  data_array[0] = additional_data;\n  process_and_decode_data_08004300(0x68,&ptr_1,8,data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "decode_and_process_data_080043f0",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "param_3": "additional_data",
                "local_10": "ptr_1",
                "uStack_c": "ptr_2",
                "auStack_8": "data_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_and_decode_data_08004410",
            "code": "\nvoid processAndDecodeData_08004410(undefined4 unusedParam,undefined4 dataSegment,undefined4 inputData)\n\n{\n  undefined4 globalVar;\n  undefined4 decodedData;\n  undefined4 stackData;\n  \n  globalVar = DAT_20001395;\n  decodedData = CONCAT22((short)((uint)dataSegment >> 0x10),DAT_20001399);\n  stackData = inputData;\n  process_and_decode_data_08004300(0x6c,&globalVar,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_and_decode_data_08004410",
                "param_1": "unusedParam",
                "param_2": "dataSegment",
                "param_3": "inputData",
                "local_10": "globalVar",
                "local_c": "decodedData",
                "uStack_8": "stackData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "process_and_decode_data_08004434",
            "code": "\nvoid processAndDecodeData_08004434(undefined4 dataPtr,undefined4 sizePtr,undefined4 dataPtr2)\n\n{\n  undefined4 constantValue;\n  undefined4 encodedData;\n  undefined4 decodedData;\n  \n  constantValue = DAT_200014ab;\n  encodedData = CONCAT22((short)((uint)sizePtr >> 0x10),DAT_200014af);\n  decodedData = dataPtr2;\n  process_and_decode_data_08004300(0x6d,&constantValue,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "process_and_decode_data_08004434",
                "param_1": "dataPtr",
                "param_2": "sizePtr",
                "param_3": "dataPtr2",
                "local_10": "constantValue",
                "local_c": "encodedData",
                "uStack_8": "decodedData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "decode_and_process_data_08004458",
            "code": "\nvoid decode_and_process_data_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 temp;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 data_buffer [3];\n  undefined2 code_buffer [10];\n  \n  destination = data_buffer;\n  source = &DAT_2000139b;\n  do {\n    src_ptr = source;\n    dest_ptr = destination;\n    temp = src_ptr[1];\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = temp;\n    destination = dest_ptr + 2;\n    source = src_ptr + 2;\n  } while (src_ptr + 2 != (undefined4 *)0x200013b3);\n  dest_ptr[2] = uRam200013b3;\n  *(undefined2 *)(dest_ptr + 3) = *(undefined2 *)(src_ptr + 3);\n  process_and_decode_data_08004300(0x70,data_buffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "decode_and_process_data_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "temp",
                "puVar4": "dest_ptr",
                "puVar5": "src_ptr",
                "local_30": "data_buffer",
                "local_24": "code_buffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "continuous_error_handling_08004490",
            "code": "\nvoid continuousErrorHandling_08004490(undefined4 errorType,undefined4 lineNumber)\n\n{\n  set_param_value_08001424(0x40011000,0x4000,1);\n  set_param_value_08001424(0x40011000,0x8000,0);\n  set_param_value_08001424(0x40011000,0x2000,0);\n  do {\n    xor_param_with_variable_0800142e(0x40011000,0x4000);\n    xor_param_with_variable_0800142e(0x40011000,0x8000);\n    xor_param_with_variable_0800142e(0x40011000,0x2000);\n    process_string_data_08004c8c(\"Error with \");\n    process_string_data_08004c8c(errorType);\n    process_string_data_08004c8c(\" at line: \");\n    initialize_and_process_data_08004cac(lineNumber);\n    decode_and_process_data_08004c18(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "continuous_error_handling_08004490",
                "param_1": "errorType",
                "param_2": "lineNumber"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initialize_peripherals_08004514(void)\n\n{\n  int condition_result;\n  uint data;\n  undefined4 file_offset;\n  int mpu_result;\n  undefined4 error_code;\n  int mpu_input;\n  int error_input;\n  undefined4 flag_value;\n  int limit_value;\n  undefined4 initialization_values [4];\n  undefined4 initial_value;\n  undefined4 constant_value1;\n  undefined4 constant_value2;\n  undefined4 constant_value3;\n  undefined4 constant_value4;\n  \n  initial_value = 1;\n  constant_value1 = 0x10;\n  mpu_result = 2;\n  constant_value3 = 0;\n  initialization_values[0] = 2;\n  constant_value2 = 2;\n  constant_value4 = 0x380000;\n  condition_result = check_conditions_and_values_08001b58(initialization_values);\n  if (condition_result == 0) goto LAB_08004540;\n  file_offset = 0x3c;\n  while( true ) {\n    condition_result = continuous_error_handling_08004490(\"../Src/peripherals.c\",file_offset);\nLAB_08004540:\n    error_code = 0xf;\n    flag_value = 0x400;\n    mpu_input = mpu_result;\n    error_input = condition_result;\n    limit_value = condition_result;\n    mpu_result = initialize_mpu9250_0800209c(&error_code,mpu_result);\n    if (mpu_result == 0) break;\n    file_offset = 0x49;\n  }\n  data = get_data_08002214();\n  limit_check_08001214(data / 1000);\n  set_flag_08001240(4);\n  set_bits_with_conditions_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "iVar1": "condition_result",
                "uVar2": "data",
                "uVar3": "file_offset",
                "iVar4": "mpu_result",
                "local_44": "error_code",
                "local_40": "mpu_input",
                "local_3c": "error_input",
                "local_38": "flag_value",
                "local_34": "limit_value",
                "local_30": "initialization_values",
                "local_20": "initial_value",
                "local_1c": "constant_value1",
                "local_14": "constant_value2",
                "local_10": "constant_value3",
                "local_c": "constant_value4"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_configure_system_0800458c",
            "code": "\n\n\nvoid initialize_and_configure_system_0800458c(void)\n\n{\n  int result;\n  undefined4 loop_variable;\n  int loop_variable_2;\n  int temp_1;\n  int temp_2;\n  int temp_3;\n  int temp_4;\n  int temp_5;\n  int temp_6;\n  int temp_7;\n  int temp_8;\n  int temp_9;\n  int temp_10;\n  int temp_11;\n  int temp_12;\n  int temp_13;\n  undefined4 temp_14;\n  int temp_15;\n  \n  initialize_and_configure_system_0800458c_function();\n  initialize_peripherals_function();\n  loop_variable_2 = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_parameter_value_function(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_parameter_value_function(0x40010800,0x20,0);\n  temp_9 = 0xe000;\n  temp_10 = 1;\n  temp_12 = 2;\n  update_bits_08001264(0x40011000,&temp_9);\n  temp_9 = 0x20;\n  temp_10 = 1;\n  temp_12 = 2;\n  update_bits_08001264(0x40010800,&temp_9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = update_parameter_function();\n  if (result == 0) goto LAB_0800463a;\n  loop_variable = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = continuous_error_handling_08004490(\"../Src/peripherals.c\",loop_variable);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = initialize_system_function(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  loop_variable = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = loop_variable_2;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = update_data_and_memory_function(&DAT_200015bc);\n                                if (result == 0) break;\n                                loop_variable = 0x88;\n                              }\n                              temp_1 = result;\n                              temp_2 = result;\n                              result = update_flags_and_value_function(&DAT_200015bc,&temp_1);\n                              if (result == 0) break;\n                              loop_variable = 0x8f;\n                            }\n                            temp_3 = 0x60;\n                            temp_4 = result;\n                            temp_5 = result;\n                            temp_6 = result;\n                            temp_7 = result;\n                            temp_8 = result;\n                            result = handle_parameter_update_function(&DAT_200015bc,&temp_3,0xc);\n                            if (result == 0) break;\n                            loop_variable = 0x9a;\n                          }\n                          temp_14 = 0x2000;\n                          temp_9 = result;\n                          temp_10 = result;\n                          temp_11 = result;\n                          temp_12 = result;\n                          temp_13 = result;\n                          temp_15 = result;\n                          result = check_and_update_param_status_08002564(&DAT_200015bc,&temp_9);\n                          if (result == 0) break;\n                          loop_variable = 0xa6;\n                        }\n                        update_bits_function(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = loop_variable_2;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = update_data_and_memory_function(&DAT_200015f8);\n                        if (result == 0) break;\n                        loop_variable = 0xc3;\n                      }\n                      temp_3 = result;\n                      temp_4 = result;\n                      result = update_flags_and_value_function(&DAT_200015f8,&temp_3);\n                      if (result == 0) break;\n                      loop_variable = 0xca;\n                    }\n                    temp_9 = 0x60;\n                    temp_10 = result;\n                    temp_11 = result;\n                    temp_13 = result;\n                    result = handle_parameter_update_function(&DAT_200015f8,&temp_9,4);\n                    if (result == 0) break;\n                    loop_variable = 0xd3;\n                  }\n                  update_bits_function(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = loop_variable_2;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = update_data_and_memory_function();\n                  if (result == 0) break;\n                  loop_variable = 0xf0;\n                }\n                temp_3 = 0;\n                temp_4 = 0;\n                result = update_flags_and_value_function(&DAT_20001540,&temp_3);\n                if (result == 0) break;\n                loop_variable = 0xf7;\n              }\n              temp_9 = 0x60;\n              temp_10 = result;\n              temp_11 = result;\n              temp_13 = result;\n              result = handle_parameter_update_function(&DAT_20001540,&temp_9,8);\n              if (result == 0) break;\n              loop_variable = 0x100;\n            }\n            loop_variable_2 = handle_parameter_update_function(&DAT_20001540,&temp_9,0xc);\n            if (loop_variable_2 == 0) break;\n            loop_variable = 0x105;\n          }\n          update_bits_function(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = loop_variable_2;\n          DAT_200014d8 = loop_variable_2;\n          result = update_data_and_memory_function(&DAT_200014c8);\n          if (result == 0) break;\n          loop_variable = 0x122;\n        }\n        temp_3 = result;\n        temp_4 = result;\n        result = update_flags_and_value_function(&DAT_200014c8,&temp_3);\n        if (result == 0) break;\n        loop_variable = 0x129;\n      }\n      temp_9 = 0x60;\n      temp_10 = result;\n      temp_11 = result;\n      temp_13 = result;\n      result = handle_parameter_update_function(&DAT_200014c8,&temp_9,8);\n      if (result == 0) break;\n      loop_variable = 0x132;\n    }\n    result = handle_parameter_update_function(&DAT_200014c8,&temp_9,0xc);\n    if (result == 0) break;\n    loop_variable = 0x137;\n  }\n  update_bits_function(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_configure_system_0800458c",
                "iVar1": "result",
                "uVar2": "loop_variable",
                "iVar3": "loop_variable_2",
                "local_58": "temp_1",
                "local_54": "temp_2",
                "local_50": "temp_3",
                "local_4c": "temp_4",
                "local_48": "temp_5",
                "local_40": "temp_6",
                "local_3c": "temp_7",
                "local_38": "temp_8",
                "local_34": "temp_9",
                "local_30": "temp_10",
                "local_2c": "temp_11",
                "local_28": "temp_12",
                "local_24": "temp_13",
                "local_20": "temp_14",
                "local_1c": "temp_15",
                "initialize_and_configure_system_08001128": "initialize_and_configure_system_function",
                "initialize_peripherals_08004514": "initialize_peripherals_function",
                "set_param_value_08001424": "set_parameter_value_function",
                "update_param_08001754": "update_parameter_function",
                "initialize_system_08002724": "initialize_system_function",
                "update_data_and_memory_080023d0": "update_data_and_memory_function",
                "update_bits_08004e14": "update_bits_function",
                "update_flags_and_value_080025a4": "update_flags_and_value_function",
                "handle_parameter_update_0800245c": "handle_parameter_update_function"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_result_0800483c",
            "code": "\nvoid calculate_result_0800483c(int *function_params)\n\n{\n  undefined4 floating_point_result_1;\n  undefined4 floating_point_result_2;\n  int variable_1;\n  int variable_2;\n  int variable_3;\n  \n  variable_2 = function_params[0xc];\n  floating_point_result_1 = calculate_float_result_08000adc(function_params[7],function_params[9]);\n  variable_2 = calculate_floating_point_08000ad8(floating_point_result_1,variable_2);\n  function_params[10] = variable_2;\n  if (*function_params == 3) {\n    variable_2 = check_null_termination_08001064(function_params[10],0);\n    if (variable_2 == 0) {\n      variable_2 = check_if_concatenation_successful_08001028(function_params[10],0xc3340000);\n    }\n    else {\n      variable_2 = check_null_termination_08001064(function_params[10],0x43340000);\n    }\n    if (variable_2 != 0) {\n      variable_3 = function_params[10];\n      floating_point_result_1 = calculate_floating_point_08000cec(function_params[10],0x43b40000);\n      variable_2 = check_null_termination_08001064(function_params[10],0);\n      variable_1 = function_params[10];\n      if (variable_2 == 0) {\n        variable_1 = variable_1 + -0x80000000;\n      }\n      floating_point_result_1 = calculate_floating_point_08000e54(floating_point_result_1,variable_1);\n      variable_2 = calculate_floating_point_08000ad8(variable_3,floating_point_result_1);\n      function_params[10] = variable_2;\n    }\n  }\n  variable_3 = function_params[2];\n  variable_1 = function_params[3];\n  variable_2 = calculate_floating_point_08000cec(function_params[1],function_params[10]);\n  function_params[0xe] = variable_2;\n  variable_2 = calculate_float_result_08000adc(function_params[10],function_params[0xf]);\n  function_params[0xf] = variable_2;\n  variable_2 = check_if_concatenation_successful_08001028(function_params[0xf],0xc3fa0000);\n  if (variable_2 == 0) {\n    variable_2 = check_null_termination_08001064(function_params[0xf],0x43fa0000);\n    if (variable_2 == 0) {\n      variable_2 = function_params[0xf];\n    }\n    else {\n      variable_2 = 0x43fa0000;\n    }\n  }\n  else {\n    variable_2 = -0x3c060000;\n  }\n  function_params[0xf] = variable_2;\n  variable_2 = calculate_floating_point_08000ad8(function_params[0xc],function_params[0xd]);\n  function_params[0x10] = variable_2;\n  variable_2 = function_params[0xe];\n  floating_point_result_1 = calculate_floating_point_08000cec(variable_3,function_params[0xf]);\n  floating_point_result_1 = calculate_float_result_08000adc(floating_point_result_1,variable_2);\n  floating_point_result_2 = calculate_floating_point_08000cec(variable_1,function_params[0x10]);\n  variable_2 = calculate_floating_point_08000ad8(floating_point_result_1,floating_point_result_2);\n  function_params[0x12] = variable_2;\n  floating_point_result_1 = calculate_value_08000c44(function_params[0x13]);\n  variable_2 = check_if_concatenation_successful_08001028(function_params[0x12],0xc3fa0000);\n  if (variable_2 == 0) {\n    variable_2 = check_null_termination_08001064(function_params[0x12],0x43fa0000);\n    if (variable_2 == 0) {\n      variable_2 = function_params[0x12];\n    }\n    else {\n      variable_2 = 0x43fa0000;\n    }\n  }\n  else {\n    variable_2 = -0x3c060000;\n  }\n  variable_2 = calculate_floating_point_08000cec(variable_2,floating_point_result_1);\n  function_params[0x12] = variable_2;\n  function_params[0xd] = function_params[0xc];\n  function_params[0xb] = function_params[10];\n  function_params[0x15] = function_params[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_result_0800483c",
                "param_1": "function_params",
                "uVar1": "floating_point_result_1",
                "uVar2": "floating_point_result_2",
                "iVar3": "variable_1",
                "iVar4": "variable_2",
                "iVar5": "variable_3"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_floating_point_data_08004a30",
            "code": "\nvoid initializeFloatingPointData_08004a30(void)\n\n{\n  undefined4 data;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      data = get_data_08003068();\n      DAT_20000068 = calculate_floating_point_08000cec(data,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      data = get_data_08003068();\n      DAT_2000007c = calculate_floating_point_08000cec(data,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_floating_point_data_08004a30",
                "uVar1": "data"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_and_calculate_results_08004a84",
            "code": "\nvoid initialize_and_calculate_results_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculate_and_set_float_result_08002ec0();\n  DAT_20000134 = calculate_and_store_result_08002ed4();\n  DAT_20000190 = check_and_calculate_result_08002ee8();\n  initialize_floating_point_data();\n  iVar1 = check_null_termination(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = check_concatenation_success(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = check_null_termination(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = check_null_termination(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = check_concatenation_success(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = check_null_termination(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      set_parameter_values(1,1);\n      calculate_result(&DAT_200000a8);\n      calculate_result(&DAT_20000104);\n      calculate_result(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculate_result(&DAT_2000004c);\n        calculate_float_result(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initialize_data_structure();\n      }\n      else {\n        update_parameter_value(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculate_floating_point(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = calculate_result_080010c4();\n      calculate_floating_point(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = calculate_result_080010c4();\n      return;\n    }\n  }\n  initialize_data_structure();\n  set_parameter_values(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_and_calculate_results_08004a84",
                "initialize_floating_point_data_08004a30": "initialize_floating_point_data",
                "check_null_termination_08001064": "check_null_termination",
                "check_if_concatenation_successful_08001028": "check_concatenation_success",
                "set_param_values_08003f3c": "set_parameter_values",
                "calculate_result_0800483c": "calculate_result",
                "calculate_float_result_08000adc": "calculate_float_result",
                "initialize_data_structure_080041c4": "initialize_data_structure",
                "update_parameter_value_0800426c": "update_parameter_value",
                "calculate_floating_point_08000cec": "calculate_floating_point"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "decode_and_process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 decode_and_process_data_08004c18(undefined input_data)\n\n{\n  int *pointer_var1;\n  int int_var2;\n  int int_var3;\n  ushort *pointer_var4;\n  \n  DAT_20001636._0_1_ = input_data;\n  pointer_var4 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      int_var2 = get_dat_value_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        int_var3 = get_dat_value_0800115c();\n      } while ((uint)(int_var3 - int_var2) < 6);\nLAB_0800281c:\n      pointer_var1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      pointer_var1[3] = pointer_var1[3] & 0xffffffdf;\n      pointer_var1[3] = pointer_var1[3] & 0xfffffeff;\n      pointer_var1[5] = pointer_var1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      int_var2 = get_dat_value_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        int_var3 = get_dat_value_0800115c();\n        if (5 < (uint)(int_var3 - int_var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *pointer_var4 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        pointer_var4 = pointer_var4 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      int_var2 = get_dat_value_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        int_var3 = get_dat_value_0800115c();\n        if (5 < (uint)(int_var3 - int_var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)pointer_var4;\n    }\n    pointer_var4 = (ushort *)((int)pointer_var4 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "decode_and_process_data_08004c18",
                "param_1": "input_data",
                "piVar1": "pointer_var1",
                "iVar2": "int_var2",
                "iVar3": "int_var3",
                "puVar4": "pointer_var4"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_update_value_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndUpdateValue_08004c30(int *inputPtr)\n\n{\n  int tempVar1;\n  \n  if (*inputPtr != 0x40013800) {\n    return inputPtr;\n  }\n  increment_and_store_value_08003ec8(&DAT_20000364,DAT_20001634);\n  tempVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar1 + 0x14) = *(uint *)(tempVar1 + 0x14) | 1;\n    *(uint *)(tempVar1 + 0xc) = *(uint *)(tempVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_update_value_08004c30",
                "param_1": "inputPtr",
                "iVar1": "tempVar1"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_check_status_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_check_status_08004c70(void)\n\n{\n  int status_temp;\n  \n  initialize_data();\n  status_temp = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(status_temp + 0x14) = *(uint *)(status_temp + 0x14) | 1;\n    *(uint *)(status_temp + 0xc) = *(uint *)(status_temp + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_check_status_08004c70",
                "initialize_data_08004c64": "initialize_data",
                "iVar1": "status_temp"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_string_data_08004c8c",
            "code": "\nvoid processStringData_08004c8c(undefined *data)\n\n{\n  uint endPosition;\n  undefined *currentPosition;\n  \n  currentPosition = data;\n  while( true ) {\n    endPosition = find_end_of_string_08000150(data);\n    if (endPosition <= (uint)((int)currentPosition - (int)data)) break;\n    decode_and_process_data_08004c18(*currentPosition);\n    currentPosition = currentPosition + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_string_data_08004c8c",
                "param_1": "data",
                "uVar1": "endPosition",
                "puVar2": "currentPosition"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_and_process_data_08004cac",
            "code": "\nvoid initializeAndProcessData_08004cac(undefined4 initializationParam)\n\n{\n  initializeData(&DAT_20001636,&DAT_0800735e,initializationParam);\n  processStringData(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_and_process_data_08004cac",
                "param_1": "initializationParam",
                "initialize_data_08004ffc": "initializeData",
                "process_string_data_08004c8c": "processStringData"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_memory_protection_08004ccc",
            "code": "\n\n\nvoid initializeMemoryProtection_08004ccc(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configureMemoryProtection(3,arg2,_DAT_40021018,1,arg1,1,arg3);\n  setBitsWithConditions(0xfffffff4,0);\n  setBitsWithConditions(0xfffffff5,0);\n  setBitsWithConditions(0xfffffff6,0);\n  setBitsWithConditions(0xfffffffb,0);\n  setBitsWithConditions(0xfffffffc,0);\n  setBitsWithConditions(0xfffffffe,0);\n  setBitsWithConditions(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_memory_protection_08004ccc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "configure_memory_protection_08001170": "configureMemoryProtection",
                "set_bits_with_conditions_08001194": "setBitsWithConditions"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_bits_if_condition_met_08004d48",
            "code": "\n\n\nvoid update_bits_if_condition_met_08004d48(int *data_ptr,undefined4 flag)\n\n{\n  undefined4 bitmask;\n  undefined4 update_value;\n  \n  if (*data_ptr == 0x40005400) {\n    bitmask = 0xc0;\n    update_value = 0x12;\n    update_bits_08001264(0x40010c00,&bitmask,0x40005400,3,data_ptr,flag);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_bits_if_condition_met_08004d48",
                "param_1": "data_ptr",
                "param_2": "flag",
                "local_18": "bitmask",
                "local_14": "update_value"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_depending_on_value_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataDependingOnValue_08004d8c(int *dataPtr)\n\n{\n  int iVar1;\n  \n  iVar1 = *dataPtr;\n  if (iVar1 == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (iVar1 == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (iVar1 == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (iVar1 == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_depending_on_value_08004d8c",
                "param_1": "dataPtr"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_bits_08004e14",
            "code": "\nvoid updateBits_08004e14(int *param_1,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 constant;\n  int dataValue;\n  undefined4 newValue;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  dataValue = *param_1;\n  if (dataValue == 0x40012c00) {\n    newValue = 0x800;\n  }\n  else {\n    if (dataValue != 0x40000000) {\n      if (dataValue == 0x40000400) {\n        newValue = 3;\n      }\n      else {\n        if (dataValue != 0x40000800) {\n          return;\n        }\n        newValue = 0x300;\n      }\n      constant = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    newValue = 2;\n  }\n  constant = 0x40010800;\nLAB_08004e2e:\n  constant4 = 2;\n  constant2 = 2;\n  constant3 = value2;\n  update_bits_08001264(constant,&newValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_bits_08004e14",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "constant",
                "iVar2": "dataValue",
                "local_18": "newValue",
                "local_14": "constant2",
                "uStack_10": "constant3",
                "local_c": "constant4"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_system_08004e7c",
            "code": "\n\n\nvoid initializeSystem_08004e7c(int *systemPointer)\n\n{\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  \n  if (*systemPointer == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    flag1 = 0x200;\n    flag2 = 2;\n    flag4 = 3;\n    update_bits_08001264(0x40010800,&flag1);\n    flag1 = 0x400;\n    flag2 = 0;\n    flag3 = 0;\n    update_bits_08001264(0x40010800,&flag1);\n    set_bits_with_conditions_08001194(0x25,0,0);\n    set_bit_in_array_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_system_08004e7c",
                "param_1": "systemPointer",
                "local_18": "flag1",
                "local_14": "flag2",
                "local_10": "flag3",
                "local_c": "flag4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_peripheral_08004f10",
            "code": "\n\n\nvoid initializePeripheral_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_peripheral_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_dat_value_thunk_0800115c",
            "code": "\nundefined4 get_dat_value_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_dat_value_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_peripheral_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  continuous_data_processing_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_data_08004ffc",
            "code": "\nvoid initialize_data_08004ffc(undefined *data_ptr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *array [2];\n  undefined4 max_value;\n  undefined2 buffer_size;\n  undefined2 max_short_value;\n  undefined *current_data;\n  undefined4 max_data_value;\n  undefined4 stack_value1;\n  undefined4 stack_value2;\n  undefined4 stack_value3;\n  \n  buffer_size = 0x208;\n  max_value = 0x7fffffff;\n  max_data_value = 0x7fffffff;\n  max_short_value = 0xffff;\n  array[0] = data_ptr;\n  current_data = data_ptr;\n  stack_value1 = value1;\n  stack_value2 = value2;\n  stack_value3 = value3;\n  process_data_080050fc(DAT_200001c0,array,value1);\n  *array[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_data_08004ffc",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "array",
                "local_70": "max_value",
                "local_6c": "buffer_size",
                "local_6a": "max_short_value",
                "local_68": "current_data",
                "local_64": "max_data_value",
                "uStack_c": "stack_value1",
                "uStack_8": "stack_value2",
                "uStack_4": "stack_value3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "initialize_and_copy_data_08005044",
            "code": "\nundefined4 initializeAndCopyData_08005044(undefined4 *outputPtr,int *inputPtr,undefined4 data,uint length)\n\n{\n  int result;\n  uint maxLength;\n  uint inputLength;\n  int offset;\n  \n  inputLength = inputPtr[2];\n  if ((inputLength <= length) && ((*(ushort *)(inputPtr + 3) & 0x480) != 0)) {\n    offset = *inputPtr - inputPtr[4];\n    inputLength = (uint)(inputPtr[5] * 3) / 2;\n    maxLength = length + 1 + offset;\n    if (inputLength < maxLength) {\n      inputLength = maxLength;\n    }\n    if ((int)((uint)*(ushort *)(inputPtr + 3) << 0x15) < 0) {\n      result = allocateMemory(outputPtr,inputLength);\n      if (result == 0) {\nLAB_0800508a:\n        *outputPtr = 0xc;\n        *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copyData(result,inputPtr[4],offset);\n      *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = allocateAndUpdateLinkedList(outputPtr,inputPtr[4],inputLength);\n      if (result == 0) {\n        updateLinkedList(outputPtr,inputPtr[4]);\n        goto LAB_0800508a;\n      }\n    }\n    inputPtr[4] = result;\n    *inputPtr = result + offset;\n    inputPtr[5] = inputLength;\n    inputPtr[2] = inputLength - offset;\n    inputLength = length;\n  }\n  if (length <= inputLength) {\n    inputLength = length;\n  }\n  copyAndReverse(*inputPtr,data,inputLength);\n  inputPtr[2] = inputPtr[2] - inputLength;\n  *inputPtr = inputLength + *inputPtr;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "initialize_and_copy_data_08005044",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "uVar2": "maxLength",
                "uVar3": "inputLength",
                "iVar4": "offset",
                "allocate_memory_08005714": "allocateMemory",
                "copy_data_08005630": "copyData",
                "allocate_and_update_linked_list_080057d0": "allocateAndUpdateLinkedList",
                "update_linked_list_0800567c": "updateLinkedList",
                "copy_and_reverse_08005646": "copyAndReverse"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processData_080050fc(undefined4 *output_error,int *buffer,byte *data,int *memory)\n\n{\n  int result;\n  int copy_result;\n  int *temp_ptr;\n  bool has_digits;\n  byte *current_byte;\n  byte *next_byte;\n  int conversion_result;\n  int *temp_ptr;\n  uint character_flags;\n  int fraction_length;\n  undefined4 conversion_flags;\n  int integer_length;\n  int total_length;\n  byte current_character;\n  undefined char1;\n  undefined char2;\n  undefined flag;\n  undefined4 temp_flag;\n  \n  temp_ptr = memory;\n  if (((int)((uint)*(ushort *)(buffer + 3) << 0x18) < 0) && (buffer[4] == 0)) {\n    result = allocate_memory_08005714(output_error,0x40);\n    *buffer = result;\n    buffer[4] = result;\n    if (result == 0) {\n      *output_error = 0xc;\n      return -1;\n    }\n    buffer[5] = 0x40;\n  }\n  total_length = 0;\n  char1 = 0x20;\n  char2 = 0x30;\n  current_byte = data;\nLAB_08005146:\n  next_byte = current_byte;\n  if (*next_byte != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_byte = next_byte + 1;\n  if (*next_byte != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)next_byte - (int)data;\n  if (result != 0) {\n    copy_result = initialize_and_copy_data_08005044(output_error,buffer,data,result);\n    if (copy_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(buffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + result;\n  }\n  if (*next_byte == 0) goto LAB_080052ac;\n  character_flags = 0;\n  integer_length = 0;\n  fraction_length = -1;\n  conversion_flags = 0;\n  flag = 0;\n  temp_flag = 0;\n  current_byte = next_byte + 1;\n  while( true ) {\n    result = find_character_08005614(&DAT_08007379,*current_byte);\n    data = current_byte + 1;\n    if (result == 0) break;\n    character_flags = 1 << (result + 0xf7ff8c87U & 0xff) | character_flags;\n    current_byte = data;\n  }\n  if ((int)(character_flags << 0x1b) < 0) {\n    flag = 0x20;\n  }\n  if ((int)(character_flags << 0x1c) < 0) {\n    flag = 0x2b;\n  }\n  if (*current_byte == 0x2a) {\n    temp_ptr = temp_ptr + 1;\n    result = *temp_ptr;\n    temp_ptr = temp_ptr;\n    if (result < 0) {\n      integer_length = -result;\n      character_flags = character_flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    has_digits = false;\n    result = integer_length;\n    data = current_byte;\n    while( true ) {\n      if (9 < *data - 0x30) break;\n      result = result * 10 + (*data - 0x30);\n      has_digits = true;\n      data = data + 1;\n    }\n    if (!has_digits) goto LAB_080051fc;\n  }\n  integer_length = result;\nLAB_080051fc:\n  if (*data == 0x2e) {\n    if (data[1] == 0x2a) {\n      data = data + 2;\n      temp_ptr = temp_ptr + 1;\n      fraction_length = *temp_ptr;\n      temp_ptr = temp_ptr;\n      if (fraction_length < 0) {\n        fraction_length = -1;\n      }\n    }\n    else {\n      has_digits = false;\n      result = 0;\n      fraction_length = 0;\n      while( true ) {\n        data = data + 1;\n        if (9 < *data - 0x30) break;\n        result = result * 10 + (*data - 0x30);\n        has_digits = true;\n      }\n      if (has_digits) {\n        fraction_length = result;\n      }\n    }\n  }\n  result = find_character_08005614(&DAT_0800737f,*data,3);\n  if (result != 0) {\n    data = data + 1;\n    character_flags = character_flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  current_character = *data;\n  data = data + 1;\n  result = find_character_08005614(\"efgEFG\",current_character,6);\n  if (result == 0) {\n    conversion_result = process_and_convert_data_080053d4(output_error,&character_flags,buffer,0x8005045,&temp_ptr);\n    if (conversion_result == -1) goto LAB_080052ac;\n  }\n  else {\n    temp_ptr = (int *)(((int)temp_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + conversion_result;\n  current_byte = data;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "output_error",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "memory",
                "iVar1": "result",
                "iVar2": "copy_result",
                "piVar3": "temp_ptr",
                "bVar4": "has_digits",
                "pbVar5": "current_byte",
                "pbVar6": "next_byte",
                "unaff_r9": "conversion_result",
                "local_8c": "temp_ptr",
                "local_88": "character_flags",
                "local_84": "fraction_length",
                "local_80": "conversion_flags",
                "local_7c": "integer_length",
                "local_74": "total_length",
                "local_70": "current_character",
                "local_6f": "char1",
                "local_6e": "char2",
                "local_45": "flag",
                "local_30": "temp_flag"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 input,uint *dataPointer,uint *outputSize,undefined4 param_4,code *callback)\n\n{\n  int counter1;\n  int result;\n  uint maxSize;\n  uint offset;\n  bool flag;\n  \n  maxSize = dataPointer[4];\n  if ((int)dataPointer[4] < (int)dataPointer[2]) {\n    maxSize = dataPointer[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)dataPointer + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*dataPointer << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*dataPointer & 6) == 0) {\n    for (counter1 = 0; counter1 < (int)(dataPointer[3] - *outputSize); counter1 = counter1 + 1) {\n      result = (*callback)(input,param_4,(int)dataPointer + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)dataPointer + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  offset = maxSize;\n  if ((int)(*dataPointer << 0x1a) < 0) {\n    *(undefined *)((int)dataPointer + maxSize + 0x43) = 0x30;\n    offset = maxSize + 2;\n    *(undefined *)((int)dataPointer + maxSize + 0x44) = *(undefined *)((int)dataPointer + 0x45);\n  }\n  counter1 = (*callback)(input,param_4,(int)dataPointer + 0x43,offset);\n  if (counter1 != -1) {\n    maxSize = dataPointer[3];\n    flag = (*dataPointer & 6) != 4;\n    if (flag) {\n      maxSize = 0;\n    }\n    offset = 0;\n    if (!flag) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (!flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    if ((int)dataPointer[4] < (int)dataPointer[2]) {\n      maxSize = maxSize + (dataPointer[2] - dataPointer[4]);\n    }\n    while( true ) {\n      if (maxSize == offset) {\n        return 0;\n      }\n      counter1 = (*callback)(input,param_4,(int)dataPointer + 0x1a,1);\n      if (counter1 == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "dataPointer",
                "param_3": "outputSize",
                "param_5": "callback",
                "iVar1": "counter1",
                "iVar2": "result",
                "uVar3": "maxSize",
                "uVar4": "offset",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_and_convert_data_080053d4",
            "code": "\nuint process_and_convert_data_080053d4(undefined4 arg_1,uint *arg_2,undefined4 arg_3,code *arg_4,uint **arg_5)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr_3;\n  int index_2;\n  char *hex_digits;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result;\n  uint value;\n  char *converted_string;\n  char *string_ptr;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(arg_2 + 6);\n  string_ptr = (char *)((int)arg_2 + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800558e;\n          if (byte_value != 0x58) goto LAB_08005404;\n          *(undefined *)((int)arg_2 + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *arg_2;\n          ptr_3 = *arg_5;\n          *arg_5 = ptr_3 + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            result = (uint)*(ushort *)ptr_3;\n          }\n          else {\n            result = *ptr_3;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *arg_2 = base | 0x20;\n          }\n          if (result == 0) {\n            *arg_2 = *arg_2 & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)arg_2 + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08005404;\n          result = *arg_2;\n          ptr_3 = *arg_5;\n          if ((result & 0x80) == 0) {\n            *arg_5 = ptr_3 + 1;\n            if ((result & 0x40) == 0) goto LAB_08005424;\n            result = (uint)(short)*(ushort *)ptr_3;\n          }\n          else {\n            *arg_5 = ptr_3 + 1;\nLAB_08005424:\n            result = *ptr_3;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)arg_2 + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        value = arg_2[1];\n        arg_2[2] = value;\n        converted_string = string_ptr;\n        if ((int)value < 0) {\n          if (result != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)arg_2 + 0x42) = *hex_digits;\n          converted_string = (char *)((int)arg_2 + 0x42);\n        }\n        else {\n          *arg_2 = *arg_2 & 0xfffffffb;\n          if (result == 0) {\n            if (value != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              value = result / base;\n              converted_string = converted_string + -1;\n              *converted_string = hex_digits[result - base * value];\n              result = value;\n            } while (value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*arg_2 << 0x1f) < 0)) && ((int)arg_2[1] <= (int)arg_2[4]))\n        {\n          converted_string[-1] = '0';\n          converted_string = converted_string + -1;\n        }\n        arg_2[4] = (int)string_ptr - (int)converted_string;\n        string_ptr = converted_string;\n        goto LAB_080054fa;\n      }\n      ptr_3 = *arg_5;\n      *arg_5 = ptr_3 + 1;\n      *(char *)((int)arg_2 + 0x42) = (char)*ptr_3;\nLAB_08005464:\n      string_ptr = (char *)((int)arg_2 + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800548a:\n            result = *arg_2;\n            ptr_3 = *arg_5;\n            if ((result & 0x80) == 0) {\n              *arg_5 = ptr_3 + 1;\n              if ((result & 0x40) == 0) goto LAB_08005498;\n              result = (uint)*(ushort *)ptr_3;\n            }\n            else {\n              *arg_5 = ptr_3 + 1;\nLAB_08005498:\n              result = *ptr_3;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byte_value == 0x70) {\n            *arg_2 = *arg_2 | 0x20;\nLAB_0800544a:\n            hex_digits = \"0123456789abcdef\";\n            *(undefined *)((int)arg_2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800548a;\n          if (byte_value == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)arg_2 + 0x42) = byte_value;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*arg_5;\n      *arg_5 = (uint *)(ppcVar8 + 1);\n      string_ptr = *ppcVar8;\n      index = find_character_08005614(string_ptr,0,arg_2[1]);\n      if (index != 0) {\n        arg_2[1] = index - (int)string_ptr;\n      }\n      result = arg_2[1];\n    }\n    arg_2[4] = result;\n    *(undefined *)((int)arg_2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  result = *arg_2;\n  ppuVar7 = (uint **)*arg_5;\n  base = arg_2[5];\n  if ((result & 0x80) == 0) {\n    *arg_5 = (uint *)(ppuVar7 + 1);\n    ptr_3 = *ppuVar7;\n    if ((result & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr_3 = (short)base;\n  }\n  else {\n    *arg_5 = (uint *)(ppuVar7 + 1);\n    ptr_3 = *ppuVar7;\nLAB_0800557a:\n    *ptr_3 = base;\n  }\nLAB_0800558e:\n  arg_2[4] = 0;\nLAB_080054fa:\n  index = process_data_080052e4(arg_1,arg_2,local_array,arg_3,arg_4);\n  if ((index == -1) || (index = (*arg_4)(arg_1,arg_3,string_ptr,arg_2[4]), index == -1)) {\nLAB_0800550e:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*arg_2 << 0x1e) < 0) {\n      for (index = 0; index < (int)(arg_2[3] - local_array[0]); index = index + 1) {\n        index_2 = (*arg_4)(arg_1,arg_3,(int)arg_2 + 0x19,1);\n        if (index_2 == -1) goto LAB_0800550e;\n      }\n    }\n    result = arg_2[3];\n    if ((int)arg_2[3] < (int)local_array[0]) {\n      result = local_array[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_and_convert_data_080053d4",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "param_5": "arg_5",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "ptr_3",
                "iVar4": "index_2",
                "pcVar5": "hex_digits",
                "uVar6": "base",
                "uVar9": "result",
                "uVar10": "value",
                "pcVar11": "converted_string",
                "pcVar12": "string_ptr",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *input_string,char target_character,int length)\n\n{\n  char *current_character;\n  char *next_character;\n  \n  current_character = input_string;\n  do {\n    next_character = current_character;\n    if (next_character == input_string + length) {\n      return (char *)0x0;\n    }\n    current_character = next_character + 1;\n  } while (*next_character != target_character);\n  return next_character;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "input_string",
                "param_2": "target_character",
                "param_3": "length",
                "pcVar1": "current_character",
                "pcVar2": "next_character"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int destOffset,undefined *sourceData,int dataSize)\n\n{\n  undefined *destPtr;\n  undefined *sourcePtr;\n  \n  sourcePtr = (undefined *)(destOffset + -1);\n  destPtr = sourceData + dataSize;\n  for (; sourceData != destPtr; sourceData = sourceData + 1) {\n    sourcePtr = sourcePtr + 1;\n    *sourcePtr = *sourceData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "destOffset",
                "param_2": "sourceData",
                "param_3": "dataSize",
                "puVar1": "destPtr",
                "puVar2": "sourcePtr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_08005646",
            "code": "\nvoid copyAndReverse_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *end;\n  \n  end = source + length;\n  if ((source < destination) && (destination < end)) {\n    destination = destination + length;\n    length = length - (int)end;\n    while (end + length != (undefined *)0x0) {\n      end = end + -1;\n      destination = destination + -1;\n      *destination = *end;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != end; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "end"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "update_linked_list_0800567c",
            "code": "\nvoid updateLinkedList_0800567c(undefined4 *result,int numElements,undefined4 param3,undefined4 param4)\n\n{\n  int **tempVar1;\n  int **prev;\n  int **current;\n  int *tempVar2;\n  int **tempVar3;\n  int **newElement;\n  \n  if (numElements == 0) {\n    return;\n  }\n  newElement = (int **)(numElements + -4);\n  if (*(int *)(numElements + -4) < 0) {\n    newElement = (int **)((int)newElement + *(int *)(numElements + -4));\n  }\n  FUNC_0800583c();\n  current = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    newElement[1] = (int *)0x0;\n    prev = tempVar1;\n    DAT_200002ac = newElement;\n  }\n  else {\n    current = DAT_200002ac;\n    if (newElement < DAT_200002ac) {\n      prev = (int **)*newElement;\n      current = (int **)((int)newElement + (int)prev);\n      if (DAT_200002ac == current) {\n        tempVar2 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        current = (int **)((int)tempVar2 + (int)prev);\n        *newElement = (int *)current;\n      }\n      newElement[1] = (int *)DAT_200002ac;\n      DAT_200002ac = newElement;\n    }\n    else {\n      do {\n        tempVar3 = current;\n        current = (int **)tempVar3[1];\n        if (current == (int **)0x0) break;\n      } while (current <= newElement);\n      prev = (int **)*tempVar3;\n      if ((int **)((int)tempVar3 + (int)prev) == newElement) {\n        prev = (int **)((int)prev + (int)*newElement);\n        *tempVar3 = (int *)prev;\n        if (current == (int **)((int)tempVar3 + (int)prev)) {\n          tempVar2 = *current;\n          current = (int **)current[1];\n          prev = (int **)((int)prev + (int)tempVar2);\n          *tempVar3 = (int *)prev;\n          tempVar3[1] = (int *)current;\n        }\n      }\n      else if (newElement < (int **)((int)tempVar3 + (int)prev)) {\n        *result = 0xc;\n      }\n      else {\n        prev = (int **)((int)newElement + (int)*newElement);\n        if (current == prev) {\n          tempVar2 = *current;\n          current = (int **)current[1];\n          prev = (int **)((int)tempVar2 + (int)*newElement);\n          *newElement = (int *)prev;\n        }\n        newElement[1] = (int *)current;\n        tempVar3[1] = (int *)newElement;\n      }\n    }\n  }\n  FUNC_0800583e(result,prev,current,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "update_linked_list_0800567c",
                "param_1": "result",
                "param_2": "numElements",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "tempVar1",
                "ppiVar1": "prev",
                "ppiVar2": "current",
                "piVar3": "tempVar2",
                "ppiVar4": "tempVar3",
                "ppiVar5": "newElement"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *dest,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *current_pointer;\n  uint block_difference;\n  uint *previous_pointer;\n  uint new_block_size;\n  \n  new_block_size = (size + 3 & 0xfffffffc) + 8;\n  if (new_block_size < 0xc) {\n    new_block_size = 0xc;\n  }\n  if (((int)new_block_size < 0) || (new_block_size < size)) {\n    *dest = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    previous_pointer = DAT_200002ac;\n    while (current_pointer = current_block, current_pointer != (uint *)0x0) {\n      block_difference = *current_pointer - new_block_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (previous_pointer == current_pointer) {\n            current_block = (uint *)previous_pointer[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)current_pointer[1];\n          }\n          if (previous_pointer != current_pointer) {\n            previous_pointer[1] = (uint)current_block;\n            previous_pointer = current_pointer;\n          }\n        }\n        else {\n          *current_pointer = block_difference;\n          *(uint *)((int)current_pointer + block_difference) = new_block_size;\n          previous_pointer = (uint *)((int)current_pointer + block_difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_pointer = current_pointer;\n      current_block = (uint *)current_pointer[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_and_check_data_pointer(dest);\n    }\n    current_block = (uint *)update_and_check_data_pointer(dest,new_block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_pointer = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_pointer ||\n        (remaining_space = update_and_check_data_pointer(dest,(int)previous_pointer - (int)current_block), remaining_space != -1)))) {\n      *previous_pointer = new_block_size;\nLAB_08005778:\n      FUNC_0800583e(dest);\n      new_block_size = (int)previous_pointer + 0xbU & 0xfffffff8;\n      remaining_space = new_block_size - (int)(previous_pointer + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_pointer + remaining_space) = -remaining_space;\n        return new_block_size;\n      }\n      return new_block_size;\n    }\n    *dest = 0xc;\n    FUNC_0800583e(dest);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "dest",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "current_pointer",
                "uVar4": "block_difference",
                "puVar5": "previous_pointer",
                "uVar6": "new_block_size",
                "update_and_check_data_pointer_0800581c": "update_and_check_data_pointer"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_update_linked_list_080057d0",
            "code": "\nint allocateAndUpdateLinkedList_080057d0(undefined4 param1,int param2,uint param3,undefined4 param4)\n\n{\n  int result;\n  uint calculationResult;\n  \n  if (param2 != 0) {\n    if (param3 == 0) {\n      update_linked_list_0800567c();\n      result = 0;\n    }\n    else {\n      calculationResult = calculate_result_08005840();\n      result = param2;\n      if ((calculationResult < param3) && (result = allocate_memory_08005714(param1,param3), result != 0)) {\n        copy_data_08005630(result,param2,param3);\n        update_linked_list_0800567c(param1,param2);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_08005714(param1,param3,param3,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_update_linked_list_080057d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "calculationResult"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_and_check_data_pointer_0800581c",
            "code": "\nvoid updateAndCheckDataPointer_0800581c(int *result,undefined4 data)\n\n{\n  int updateResult;\n  \n  DAT_2000169c = 0;\n  updateResult = update_data_pointer_080072b8(data);\n  if ((updateResult == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_and_check_data_pointer_0800581c",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "updateResult"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_result_08005840",
            "code": "\nint calculateResult_08005840(undefined4 input1,int input2)\n\n{\n  int result;\n  \n  result = *(int *)(input2 + -4) + -4;\n  if (*(int *)(input2 + -4) < 0) {\n    result = result + *(int *)(input2 + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "perform_operation_08005854",
            "code": "\nundefined8 performOperation_08005854(undefined4 input1,undefined4 input2)\n\n{\n  int result;\n  undefined4 *dataValue;\n  int *dataValue2;\n  undefined8 calcResult;\n  undefined8 funcResult;\n  undefined4 flag;\n  undefined *dataValue3;\n  undefined4 input3;\n  undefined4 input4;\n  undefined4 input3;\n  undefined4 input4;\n  undefined8 result2;\n  int checkResult;\n  \n  calcResult = calculate_result_08005c70();\n  if (DAT_20000224 == -1) {\n    return calcResult;\n  }\n  checkResult = check_params_08000a04(input1,input2,input1,input2);\n  if (checkResult != 0) {\n    return calcResult;\n  }\n  funcResult = FUNC_0800708c(input1,input2);\n  result = check_null_termination_080009f0((int)funcResult,(int)((ulonglong)funcResult >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return calcResult;\n  }\n  flag = 1;\n  dataValue3 = &DAT_080073ac;\n  input3 = input1;\n  input4 = input2;\n  input3 = input1;\n  input4 = input2;\n  result2 = get_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = initialize_program_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  dataValue = (undefined4 *)get_data_value_080072ac();\n  *dataValue = 0x21;\nLAB_080058d0:\n  if (checkResult != 0) {\n    dataValue2 = (int *)get_data_value_080072ac();\n    *dataValue2 = checkResult;\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08005854": "perform_operation_08005854",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "puVar2": "dataValue",
                "piVar3": "dataValue2",
                "uVar4": "calcResult",
                "uVar5": "funcResult",
                "local_48": "flag",
                "local_44": "dataValue3",
                "local_40": "input3",
                "uStack_3c": "input4",
                "local_38": "input3",
                "uStack_34": "input4",
                "local_30": "result2",
                "local_28": "checkResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_floating_point_result_thunk_08006070",
            "code": "\nundefined8 calculate_floating_point_result_thunk_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_part_1;\n  uint result_part_2;\n  uint result_part_3;\n  int result_part_4;\n  uint normalized_input_4;\n  undefined8 final_result_part_1;\n  undefined8 final_result_part_2;\n  \n  normalized_input_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (normalized_input_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (result_part_3 = input_2 & 0x7fffffff, 0x7ff00000 < (result_part_3 | (-input_1 | input_1) >> 0x1f))) {\n    final_result_part_1 = calculate_result_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return final_result_part_1;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result_part_1 = calculate_result_08006d68();\n    return final_result_part_1;\n  }\n  result_part_2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result_part_3) == 0) {\n    if (result_part_2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result_part_2 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result_part_1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | normalized_input_4) != 0) {\n      if (normalized_input_4 == 0x7ff00000) {\n        if (result_part_3 == 0x7ff00000) {\n          if (result_part_2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result_part_2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result_part_2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result_part_2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result_part_2 != 3) {\n          if (result_part_2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_part_3 != 0x7ff00000) {\n        result_part_4 = (int)(result_part_3 - normalized_input_4) >> 0x14;\n        if (result_part_4 < 0x3d) {\n          if (((int)input_4 < 0) && (result_part_4 + 0x3c < 0 != SCARRY4(result_part_4,0x3c))) {\n            final_result_part_1 = 0;\n          }\n          else {\n            convert_floating_point_08000724(input_1,input_2);\n            FUNC_0800708c();\n            final_result_part_1 = calculate_result_08006d68();\n          }\n        }\n        else {\n          final_result_part_1 = 0x3ff921fb54442d18;\n        }\n        result_part_4 = (int)((ulonglong)final_result_part_1 >> 0x20);\n        result_part_1 = (undefined4)final_result_part_1;\n        if (result_part_2 == 1) {\n          return CONCAT44(result_part_4 + -0x80000000,result_part_1);\n        }\n        if (result_part_2 == 2) {\n          final_result_part_2 = calculate_inverse_08000168(result_part_1,result_part_4,0x33145c07,0x3ca1a626);\n          final_result_part_1 = 0x400921fb54442d18;\n        }\n        else {\n          if (result_part_2 == 0) {\n            return final_result_part_1;\n          }\n          final_result_part_1 = calculate_inverse_08000168(result_part_1,result_part_4,0x33145c07,0x3ca1a626);\n          final_result_part_2 = 0x400921fb54442d18;\n        }\n        final_result_part_1 = calculate_inverse_08000168((int)final_result_part_1,(int)((ulonglong)final_result_part_1 >> 0x20),(int)final_result_part_2,\n                             (int)((ulonglong)final_result_part_2 >> 0x20));\n        return final_result_part_1;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result_part_1 = 0xbff921fb54442d18;\n    }\n    else {\n      final_result_part_1 = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result_part_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_floating_point_result_thunk_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_part_1",
                "uVar2": "result_part_2",
                "uVar3": "result_part_3",
                "iVar4": "result_part_4",
                "uVar5": "normalized_input_4",
                "uVar6": "final_result_part_1",
                "uVar7": "final_result_part_2"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "perform_calculation_08005900",
            "code": "\nundefined8 performCalculation_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *ptrResult;\n  undefined4 *ptrData;\n  int bitwiseResult;\n  undefined4 upperPart;\n  undefined4 lowerPart;\n  undefined8 floatingPointValue;\n  undefined8 resultValue;\n  undefined4 dataFlag;\n  undefined *dataPtr;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined8 returnValue;\n  int value;\n  \n  floatingPointValue = calculate_floating_point_08006228();\n  flag = DAT_20000224;\n  upperPart = (undefined4)((ulonglong)floatingPointValue >> 0x20);\n  lowerPart = (undefined4)floatingPointValue;\n  if (DAT_20000224 == -1) {\n    return floatingPointValue;\n  }\n  result = check_params_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return floatingPointValue;\n  }\n  result = check_params_08000a04(input1,input2,input1,input2);\n  input1Copy = input1;\n  input2Copy = input2;\n  input3Copy = input3;\n  input4Copy = input4;\n  if (result == 0) {\n    result = check_if_param_not_null_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = check_if_param_not_null_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        dataFlag = 1;\n        dataPtr = &DAT_080073b1;\n        returnValue = 0;\n        value = 0;\n        if (flag != '\\0') {\n          returnValue = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = get_bitwise_result_08007092(input3,input4);\n      if (result == 0) {\n        return floatingPointValue;\n      }\n      result = check_if_empty_string_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return floatingPointValue;\n      }\n      dataFlag = 1;\n      dataPtr = &DAT_080073b1;\n      value = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      returnValue = 0xfff0000000000000;\n      value = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = get_bitwise_result_08007092(lowerPart,upperPart);\n    if (((result != 0) || (bitwiseResult = get_bitwise_result_08007092(input1,input2), bitwiseResult == 0)) ||\n       (bitwiseResult = get_bitwise_result_08007092(input3,input4), bitwiseResult == 0)) {\n      result = check_if_param_not_null_080009a0(lowerPart,upperPart,0,0);\n      if (result == 0) {\n        return floatingPointValue;\n      }\n      result = get_bitwise_result_08007092(input1,input2);\n      if (result == 0) {\n        return floatingPointValue;\n      }\n      result = get_bitwise_result_08007092(input3,input4);\n      if (result == 0) {\n        return floatingPointValue;\n      }\n      dataFlag = 4;\n      dataPtr = &DAT_080073b1;\n      value = 0;\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    value = check_params_08000a04(lowerPart,upperPart);\n    flag = DAT_20000224;\n    if (value != 0) {\n      dataPtr = &DAT_080073b1;\n      dataFlag = 1;\n      value = result;\n      if (DAT_20000224 != '\\0') {\n        returnValue = convert_floating_point_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      dataPtr = &DAT_080073b1;\n      dataFlag = 1;\n      returnValue = 0;\n      goto LAB_08005978;\n    }\n    dataPtr = &DAT_080073b1;\n    dataFlag = 3;\n    if (DAT_20000224 == '\\0') {\n      returnValue._0_4_ = 0xe0000000;\n      returnValue._4_4_ = 0x47efffff;\n      result = check_if_empty_string_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        floatingPointValue = calculate_shifted_xor_080004d0(input3,input4,0,0x3fe00000);\n        resultValue = calculate_080070b0();\n        result = check_if_param_not_null_080009a0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20),(int)resultValue,\n                             (int)((ulonglong)resultValue >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0xe0000000;\n          returnValue._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_program_0800709e(&dataFlag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0x7ff00000;\n      result = check_if_empty_string_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        floatingPointValue = calculate_shifted_xor_080004d0(input3,input4,0,0x3fe00000);\n        resultValue = calculate_080070b0();\n        result = check_if_param_not_null_080009a0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20),(int)resultValue,\n                             (int)((ulonglong)resultValue >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0;\n          returnValue._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    ptrData = (undefined4 *)get_data_value_080072ac();\n    lowerPart = 0x22;\n  }\n  else {\n    result = check_if_param_not_null_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return floatingPointValue;\n    }\n    dataFlag = 1;\n    dataPtr = &DAT_080073b1;\n    returnValue = 0x3ff0000000000000;\n    value = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_program_0800709e(&dataFlag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    ptrData = (undefined4 *)get_data_value_080072ac();\n    lowerPart = 0x21;\n  }\n  *ptrData = lowerPart;\nLAB_080059d0:\n  if (value != 0) {\n    ptrResult = (int *)get_data_value_080072ac();\n    *ptrResult = value;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005900": "perform_calculation_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "ptrResult",
                "puVar4": "ptrData",
                "iVar5": "bitwiseResult",
                "uVar6": "upperPart",
                "uVar7": "lowerPart",
                "uVar8": "floatingPointValue",
                "uVar9": "resultValue",
                "local_50": "dataFlag",
                "local_4c": "dataPtr",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input3Copy",
                "uStack_3c": "input4Copy",
                "local_38": "returnValue",
                "local_30": "value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "validate_and_initialize_program_08005bc8",
            "code": "\nundefined8 validate_and_initialize_program_08005bc8(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  char character_variable;\n  int integer_variable;\n  int *pointer_to_integer;\n  undefined4 *pointer_to_unsigned;\n  undefined8 result;\n  undefined4 flag;\n  undefined *string_pointer;\n  undefined4 local_input_param_1;\n  undefined4 local_input_param_2;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined8 floating_point_value;\n  int check_result;\n  \n  result = calculate_floating_point_08006c0c();\n  character_variable = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  check_result = check_params_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (check_result != 0) {\n    return result;\n  }\n  integer_variable = check_if_empty_string_080009b4(input_param_1,input_param_2,0,0);\n  if (integer_variable == 0) {\n    return result;\n  }\n  flag = 1;\n  string_pointer = &DAT_080073b5;\n  local_input_param_1 = input_param_1;\n  local_input_param_2 = input_param_2;\n  local_param_1 = input_param_1;\n  local_param_2 = input_param_2;\n  if (character_variable == '\\0') {\n    floating_point_value = 0;\nLAB_08005c26:\n    integer_variable = initialize_program_0800709e(&flag);\n    if (integer_variable != 0) goto LAB_08005c2e;\n  }\n  else {\n    floating_point_value = convert_floating_point_08000724(0,0,0,0);\n    if (character_variable != '\\x02') goto LAB_08005c26;\n  }\n  pointer_to_unsigned = (undefined4 *)get_data_value_080072ac();\n  *pointer_to_unsigned = 0x21;\nLAB_08005c2e:\n  if (check_result != 0) {\n    pointer_to_integer = (int *)get_data_value_080072ac();\n    *pointer_to_integer = check_result;\n  }\n  return floating_point_value;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "validate_and_initialize_program_08005bc8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "cVar1": "character_variable",
                "iVar2": "integer_variable",
                "piVar3": "pointer_to_integer",
                "puVar4": "pointer_to_unsigned",
                "uVar5": "result",
                "local_50": "flag",
                "local_4c": "string_pointer",
                "local_48": "local_input_param_1",
                "uStack_44": "local_input_param_2",
                "local_40": "local_param_1",
                "uStack_3c": "local_param_2",
                "local_38": "floating_point_value",
                "local_30": "check_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculate_result_08005c70(uint input1,uint input2)\n\n{\n  int result1;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint abs_input2;\n  undefined8 final_result;\n  undefined8 temp7;\n  undefined8 temp8;\n  \n  final_result = CONCAT44(input2,input1);\n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x3ff00000) {\n    if (abs_input2 < 0x3fe00000) {\n      if (0x3e3fffff < abs_input2) {\n        temp7 = calculate_shifted_xor_080004d0(input1,input2,input1,input2);\n        temp6 = (undefined4)((ulonglong)temp7 >> 0x20);\n        temp5 = (undefined4)temp7;\n        temp7 = calculate_shifted_xor_080004d0(temp5,temp6,0xdfdf709,0x3f023de1);\n        temp7 = calculate_result_08005c70_0800016c((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x7501b288,0x3f49efe0);\n        temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp6);\n        temp7 = calculate_inverse_08000168((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp6);\n        temp7 = calculate_result_08005c70_0800016c((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xe884455,0x3fc9c155);\n        temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp6);\n        temp7 = calculate_inverse_08000168((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp6);\n        temp7 = calculate_result_08005c70_0800016c((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x55555555,0x3fc55555);\n        temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp6);\n        temp8 = calculate_shifted_xor_080004d0(temp5,temp6,0xb12e9282,0x3fb3b8c5);\n        temp8 = calculate_inverse_08000168((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp8 = calculate_shifted_xor_080004d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp5,temp6);\n        temp8 = calculate_result_08005c70_0800016c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp8 = calculate_shifted_xor_080004d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp5,temp6);\n        temp8 = calculate_inverse_08000168((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp8 = calculate_shifted_xor_080004d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp5,temp6);\n        temp8 = calculate_result_08005c70_0800016c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        temp7 = convert_floating_point_08000724((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n                              (int)((ulonglong)temp8 >> 0x20));\n        temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      temp7 = calculate_result_08005c70_0800016c(input1,input2,0x8800759c,0x7e37e43c);\n      result1 = check_null_termination_080009f0((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3ff00000);\n      if (result1 != 0) {\n        return final_result;\n      }\n    }\n    final_result = FUNC_0800708c(input1,input2);\n    final_result = calculate_inverse_08000168(0,0x3ff00000,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp5 = (undefined4)final_result;\n    final_result = calculate_shifted_xor_080004d0(temp5,temp1,0xdfdf709,0x3f023de1);\n    final_result = calculate_result_08005c70_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x7501b288,0x3f49efe0);\n    final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp1);\n    final_result = calculate_inverse_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),0xb5688f3b,0x3fa48228);\n    final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp1);\n    final_result = calculate_result_08005c70_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0xe884455,0x3fc9c155);\n    final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp1);\n    final_result = calculate_inverse_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp1);\n    final_result = calculate_result_08005c70_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x55555555,0x3fc55555);\n    final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp1);\n    temp2 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp7 = calculate_shifted_xor_080004d0(temp5,temp1,0xb12e9282,0x3fb3b8c5);\n    temp7 = calculate_inverse_08000168((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp1);\n    temp7 = calculate_result_08005c70_0800016c((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp1);\n    temp7 = calculate_inverse_08000168((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp7 = calculate_shifted_xor_080004d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp1);\n    temp7 = calculate_result_08005c70_0800016c((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp8 = calculate_floating_point_08006c0c(temp5,temp1);\n    temp4 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp6 = (undefined4)temp8;\n    if (abs_input2 < 0x3fef3333) {\n      final_result = convert_floating_point_08000724((int)final_result,temp2,(int)temp7,temp3);\n      temp7 = calculate_result_08005c70_0800016c(temp6,temp4,temp6,temp4);\n      final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp7,\n                           (int)((ulonglong)temp7 >> 0x20));\n      temp7 = calculate_shifted_xor_080004d0(0,temp4,0,temp4);\n      temp7 = calculate_inverse_08000168(temp5,temp1,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n      temp8 = calculate_result_08005c70_0800016c(temp6,temp4,0,temp4);\n      temp7 = convert_floating_point_08000724((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n                            (int)((ulonglong)temp8 >> 0x20));\n      temp5 = (undefined4)((ulonglong)temp7 >> 0x20);\n      temp7 = calculate_result_08005c70_0800016c((int)temp7,temp5,(int)temp7,temp5);\n      temp7 = calculate_inverse_08000168(0x33145c07,0x3c91a626,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n      final_result = calculate_inverse_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp7,\n                           (int)((ulonglong)temp7 >> 0x20));\n      temp7 = calculate_result_08005c70_0800016c(0,temp4,0,temp4);\n      temp7 = calculate_inverse_08000168(0x54442d18,0x3fe921fb,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n      final_result = calculate_inverse_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp7,\n                           (int)((ulonglong)temp7 >> 0x20));\n      temp5 = 0x3fe921fb;\n    }\n    else {\n      final_result = convert_floating_point_08000724((int)final_result,temp2,(int)temp7,temp3);\n      final_result = calculate_shifted_xor_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp6,temp4);\n      final_result = calculate_result_08005c70_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),temp6,temp4);\n      temp5 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = calculate_result_08005c70_0800016c((int)final_result,temp5,(int)final_result,temp5);\n      final_result = calculate_inverse_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),0x33145c07,0x3c91a626);\n      temp5 = 0x3ff921fb;\n    }\n    final_result = calculate_inverse_08000168(0x54442d18,temp5,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    if ((int)input2 < 1) {\n      final_result = CONCAT44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n    }\n  }\n  else {\n    if ((abs_input2 + 0xc0100000 | input1) != 0) {\n      final_result = calculate_inverse_08000168(input1,input2,input1,input2);\n      temp5 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = convert_floating_point_08000724((int)final_result,temp5,(int)final_result,temp5);\n      return final_result;\n    }\n    final_result = calculate_shifted_xor_080004d0(input1,input2,0x54442d18,0x3ff921fb);\n    temp7 = calculate_shifted_xor_080004d0(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    final_result = calculate_result_08005c70_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp7,\n                         (int)((ulonglong)temp7 >> 0x20));\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "abs_input2",
                "uVar9": "final_result",
                "uVar10": "temp7",
                "uVar11": "temp8"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculate_result_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 final_result;\n  undefined8 inverse_result;\n  \n  result5 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input_3 | input_3) >> 0x1f)) ||\n     (result3 = input_2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input_1 | input_1) >> 0x1f))) {\n    final_result = calculate_result_08006070_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return final_result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result = calculate_result_08006070_08006d68();\n    return final_result;\n  }\n  result2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)input_4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            final_result = 0;\n          }\n          else {\n            convert_floating_point_08000724(input_1,input_2);\n            FUNC_0800708c();\n            final_result = calculate_result_08006070_08006d68();\n          }\n        }\n        else {\n          final_result = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)final_result >> 0x20);\n        result1 = (undefined4)final_result;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          inverse_result = calculate_inverse_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          final_result = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return final_result;\n          }\n          final_result = calculate_inverse_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          inverse_result = 0x400921fb54442d18;\n        }\n        final_result = calculate_inverse_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)inverse_result,\n                             (int)((ulonglong)inverse_result >> 0x20));\n        return final_result;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "uVar6": "final_result",
                "uVar7": "inverse_result"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculate_floating_point_08006228(uint exponent,uint combined,uint mantissa,uint sign)\n\n{\n  undefined4 exp_1;\n  uint comp_exp;\n  uint shift;\n  undefined4 exp_2;\n  undefined4 comp_exp_2;\n  undefined4 shift_2;\n  undefined4 shift_3;\n  uint shift_4;\n  undefined4 shift_5;\n  int pow_exp;\n  int pow_exp_2;\n  undefined4 add_val;\n  uint abs_combined;\n  undefined4 add_val_2;\n  int pow_exp_3;\n  uint result;\n  undefined4 result_exp;\n  undefined4 res_exp;\n  undefined8 res_val;\n  undefined8 val_1;\n  undefined8 val_2;\n  undefined8 temp_val;\n  longlong temp_long;\n  ulonglong temp_ullong;\n  undefined8 inversed;\n  uint local_70;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  val_1 = CONCAT44(combined,exponent);\n  result = sign & 0x7fffffff;\n  if ((result | mantissa) == 0) {\n    return 0;\n  }\n  abs_combined = combined & 0x7fffffff;\n  if (abs_combined < 0x7ff00001) {\n    if (abs_combined == 0x7ff00000) {\n      if (exponent == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (mantissa == 0)) {\n          if (-1 < (int)combined) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              local_70 = 0;\n              goto LAB_080062ba;\n            }\n            pow_exp = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < pow_exp) {\n              comp_exp = mantissa >> (0x34U - pow_exp & 0xff);\n              if (mantissa == comp_exp << (0x34U - pow_exp & 0xff)) {\n                local_70 = 2 - (comp_exp & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (mantissa == 0) {\n              comp_exp = (int)result >> (0x14U - pow_exp & 0xff);\n              if (result == comp_exp << (0x14U - pow_exp & 0xff)) {\n                local_70 = 2 - (comp_exp & 1);\n              }\n              else {\n                local_70 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            local_70 = 0;\n          }\n          else {\n            local_70 = 2;\nLAB_080062ba:\n            if (mantissa == 0) {\n              if (result == 0x7ff00000) {\n                if ((abs_combined + 0xc0100000 | exponent) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < abs_combined) {\n                  if ((int)sign < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)sign) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)sign) {\n                  return exponent;\n                }\n                res_val = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (sign == 0x40000000) goto LAB_0800634a;\n              if ((sign == 0x3fe00000) && (-1 < (int)combined)) {\n                result = calculate_floating_point_08006228_08006c0c(exponent,combined);\n                return result;\n              }\n            }\n          }\n          res_val = FUNC_0800708c(exponent,combined);\n          result_exp = (undefined4)((ulonglong)res_val >> 0x20);\n          exp_1 = (undefined4)res_val;\n          temp_ullong = CONCAT44(combined,exp_1) & 0x7fffffffffffffff;\n          if ((exponent == 0) && ((abs_combined == 0 || ((combined & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)sign < 0) {\n              res_val = convert_floating_point_08000724(0,0x3ff00000,exp_1,result_exp);\n            }\n            if (-1 < (int)combined) {\n              return (uint)res_val;\n            }\n            if ((local_70 | abs_combined + 0xc0100000) != 0) {\n              return (uint)res_val;\n            }\n          }\n          else {\n            comp_exp = 0xffffffff - ((int)combined >> 0x1f);\n            res_val = val_1;\n            if ((local_70 | comp_exp) != 0) {\n              if (result < 0x41e00001) {\n                local_54 = 0;\n                if (abs_combined < 0x100000) {\n                  temp_ullong = calculate_shifted_xor_080004d0();\n                  local_54 = -0x35;\n                }\n                result = (uint)(temp_ullong >> 0x20);\n                exp_1 = (undefined4)temp_ullong;\n                local_54 = ((int)result >> 0x14) + -0x3ff + local_54;\n                result = result & 0xfffff;\n                abs_combined = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  pow_exp = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    abs_combined = abs_combined - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  pow_exp = 1;\n                }\n                pow_exp_2 = pow_exp * 8;\n                add_val = (&DAT_080073c0)[pow_exp * 2];\n                add_val_2 = (&DAT_080073c4)[pow_exp * 2];\n                val_1 = calculate_inverse_08000168(exp_1,abs_combined,add_val,add_val_2);\n                res_exp = (undefined4)((ulonglong)val_1 >> 0x20);\n                res_val = calculate_result_0800016c(exp_1,abs_combined,add_val,add_val_2);\n                res_val = convert_floating_point_08000724(0,0x3ff00000,(int)res_val,(int)((ulonglong)res_val >> 0x20));\n                exp_2 = (undefined4)((ulonglong)res_val >> 0x20);\n                val_2 = calculate_shifted_xor_080004d0((int)val_1,res_exp,(int)res_val,exp_2);\n                comp_exp_2 = (undefined4)((ulonglong)val_2 >> 0x20);\n                result_exp = (undefined4)val_2;\n                val_2 = calculate_shifted_xor_080004d0(0,comp_exp_2);\n                val_1 = calculate_inverse_08000168((int)val_1,res_exp,(int)val_2,\n                                      (int)((ulonglong)val_2 >> 0x20));\n                val_2 = calculate_inverse_08000168(0,((int)abs_combined >> 1 | 0x20000000U) + 0x80000 + pow_exp * 0x40000,\n                                      add_val,add_val_2);\n                val_2 = calculate_inverse_08000168(exp_1,abs_combined,(int)val_2,(int)((ulonglong)val_2 >> 0x20));\n                val_2 = calculate_shifted_xor_080004d0((int)val_2,(int)((ulonglong)val_2 >> 0x20),0,comp_exp_2);\n                val_1 = calculate_inverse_08000168((int)val_1,(int)((ulonglong)val_1 >> 0x20),(int)val_2,\n                                      (int)((ulonglong)val_2 >> 0x20));\n                val_1 = calculate_shifted_xor_080004d0((int)val_1,(int)((ulonglong)val_1 >> 0x20),(int)res_val,exp_2\n                                     );\n                res_exp = (undefined4)((ulonglong)val_1 >> 0x20);\n                res_val = calculate_shifted_xor_080004d0(result_exp,comp_exp_2);\n                exp_2 = (undefined4)((ulonglong)res_val >> 0x20);\n                exp_1 = (undefined4)res_val;\n                res_val = calculate_shifted_xor_080004d0(exp_1,exp_2,0x4a454eef,0x3fca7e28);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),exp_1,exp_2);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),exp_1,exp_2);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),exp_1,exp_2);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),exp_1,exp_2);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),0x33333303,\n                                      0x3fe33333);\n                val_2 = calculate_shifted_xor_080004d0(exp_1,exp_2,exp_1,exp_2);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_2,\n                                      (int)((ulonglong)val_2 >> 0x20));\n                val_2 = calculate_result_0800016c(result_exp,comp_exp_2,0,comp_exp_2);\n                val_2 = calculate_shifted_xor_080004d0((int)val_2,(int)((ulonglong)val_2 >> 0x20),(int)val_1,\n                                      res_exp);\n                res_val = calculate_result_0800016c((int)val_2,(int)((ulonglong)val_2 >> 0x20),(int)res_val,\n                                      (int)((ulonglong)res_val >> 0x20));\n                exp_1 = (undefined4)((ulonglong)res_val >> 0x20);\n                val_2 = calculate_shifted_xor_080004d0(0,comp_exp_2,0,comp_exp_2);\n                exp_2 = (undefined4)((ulonglong)val_2 >> 0x20);\n                temp_val = calculate_result_0800016c((int)val_2,exp_2,0,0x40080000);\n                calculate_result_0800016c((int)temp_val,(int)((ulonglong)temp_val >> 0x20),(int)res_val,exp_1);\n                temp_val = calculate_shifted_xor_080004d0(0,comp_exp_2,0,shift_2);\n                add_val = (undefined4)((ulonglong)temp_val >> 0x20);\n                inversed = calculate_inverse_08000168(0,shift_2,0,0x40080000);\n                val_2 = calculate_inverse_08000168((int)inversed,(int)((ulonglong)inversed >> 0x20),(int)val_2,exp_2\n                                     );\n                res_val = calculate_inverse_08000168((int)res_val,exp_1,(int)val_2,(int)((ulonglong)val_2 >> 0x20)\n                                     );\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),result_exp,comp_exp_2);\n                val_1 = calculate_shifted_xor_080004d0((int)val_1,res_exp,0,shift_2);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_1,\n                                      (int)((ulonglong)val_1 >> 0x20));\n                exp_1 = (undefined4)((ulonglong)res_val >> 0x20);\n                calculate_result_0800016c((int)temp_val,add_val,(int)res_val,exp_1);\n                val_1 = calculate_shifted_xor_080004d0(0,shift_3,0xe0000000,0x3feec709);\n                val_2 = calculate_inverse_08000168(0,shift_3,(int)temp_val,add_val);\n                res_val = calculate_inverse_08000168((int)res_val,exp_1,(int)val_2,(int)((ulonglong)val_2 >> 0x20)\n                                     );\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                val_2 = calculate_shifted_xor_080004d0(0,shift_3,0x145b01f5,0xbe3e2fe0);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_2,\n                                      (int)((ulonglong)val_2 >> 0x20));\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + pow_exp_2),\n                                      *(undefined4 *)(&DAT_080073e4 + pow_exp_2));\n                val_2 = calculate_shifted_value_08000404(local_54);\n                exp_1 = (undefined4)((ulonglong)val_2 >> 0x20);\n                result_exp = *(undefined4 *)(&DAT_080073d0 + pow_exp_2);\n                res_exp = *(undefined4 *)(&DAT_080073d4 + pow_exp_2);\n                temp_val = calculate_result_0800016c((int)val_1,(int)((ulonglong)val_1 >> 0x20),(int)res_val,\n                                      (int)((ulonglong)res_val >> 0x20));\n                temp_val = calculate_result_0800016c((int)temp_val,(int)((ulonglong)temp_val >> 0x20),result_exp,res_exp);\n                calculate_result_0800016c((int)temp_val,(int)((ulonglong)temp_val >> 0x20),(int)val_2,exp_1);\n                val_2 = calculate_inverse_08000168(0,shift_4,(int)val_2,exp_1);\n                temp_long = calculate_inverse_08000168((int)val_2,(int)((ulonglong)val_2 >> 0x20),result_exp,res_exp);\n                result = shift_4;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (abs_combined < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)sign < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  exponent = 0x8800759c;\n                  combined = 0x7e37e43c;\n                  val_1 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (abs_combined < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)sign) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < abs_combined) goto LAB_08006418;\n                val_1 = calculate_inverse_08000168(exp_1,result_exp,0,0x3ff00000);\n                result_exp = (undefined4)((ulonglong)val_1 >> 0x20);\n                exp_1 = (undefined4)val_1;\n                val_1 = calculate_shifted_xor_080004d0(exp_1,result_exp,0x60000000,0x3ff71547);\n                res_val = calculate_shifted_xor_080004d0(exp_1,result_exp,0xf85ddf44,0x3e54ae0b);\n                val_2 = calculate_shifted_xor_080004d0(exp_1,result_exp,0,0x3fd00000);\n                val_2 = calculate_inverse_08000168(0x55555555,0x3fd55555,(int)val_2,\n                                      (int)((ulonglong)val_2 >> 0x20));\n                val_2 = calculate_shifted_xor_080004d0((int)val_2,(int)((ulonglong)val_2 >> 0x20),exp_1,result_exp);\n                val_2 = calculate_inverse_08000168(0,0x3fe00000,(int)val_2,(int)((ulonglong)val_2 >> 0x20));\n                temp_val = calculate_shifted_xor_080004d0(exp_1,result_exp,exp_1,result_exp);\n                val_2 = calculate_shifted_xor_080004d0((int)val_2,(int)((ulonglong)val_2 >> 0x20),(int)temp_val,\n                                      (int)((ulonglong)temp_val >> 0x20));\n                val_2 = calculate_shifted_xor_080004d0((int)val_2,(int)((ulonglong)val_2 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                res_val = calculate_inverse_08000168((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_2,\n                                      (int)((ulonglong)val_2 >> 0x20));\n                calculate_result_0800016c((int)val_1,(int)((ulonglong)val_1 >> 0x20),(int)res_val,\n                             (int)((ulonglong)res_val >> 0x20));\n                temp_long = (ulonglong)shift << 0x20;\n                result = shift;\n              }\n              val_1 = calculate_inverse_08000168((int)temp_long,(int)((ulonglong)temp_long >> 0x20),(int)val_1,\n                                    (int)((ulonglong)val_1 >> 0x20));\n              val_1 = calculate_inverse_08000168((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_1,\n                                    (int)((ulonglong)val_1 >> 0x20));\n              if ((local_70 - 1 | comp_exp) == 0) {\n                combined = 0xbff00000;\n              }\n              else {\n                combined = 0x3ff00000;\n              }\n              local_70 = 0;\n              res_val = calculate_inverse_08000168(mantissa,sign,0,sign);\n              res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),0,result);\n              val_1 = calculate_shifted_xor_080004d0((int)val_1,(int)((ulonglong)val_1 >> 0x20),mantissa,sign);\n              val_1 = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_1,\n                                    (int)((ulonglong)val_1 >> 0x20));\n              res_exp = (undefined4)((ulonglong)val_1 >> 0x20);\n              exp_1 = (undefined4)val_1;\n              val_1 = calculate_shifted_xor_080004d0(0,result,0,sign);\n              exp_2 = (undefined4)((ulonglong)val_1 >> 0x20);\n              result_exp = (undefined4)val_1;\n              temp_long = calculate_result_0800016c(exp_1,res_exp,result_exp,exp_2);\n              abs_combined = (uint)((ulonglong)temp_long >> 0x20);\n              result = (uint)temp_long;\n              if (0x408fffffffffffff < temp_long) {\n                if ((abs_combined + 0xbf700000 | result) == 0) {\n                  res_val = calculate_result_0800016c(exp_1,res_exp,0x652b82fe,0x3c971547);\n                  val_2 = calculate_inverse_08000168(result,abs_combined,result_exp,exp_2);\n                  pow_exp = check_null_termination_080009f0((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_2,\n                                       (int)((ulonglong)val_2 >> 0x20));\n                  if (pow_exp == 0) goto LAB_08006968;\n                }\n                val_1 = calculate_shifted_xor_080004d0(0,combined,0x8800759c,0x7e37e43c);\n                exponent = 0x8800759c;\n                combined = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((abs_combined & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((abs_combined & 0x7fffffff) < 0x3fe00001) {\n                  pow_exp = 0;\n                }\n                else {\n                  abs_combined = (0x100000 >> (((int)(abs_combined & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          abs_combined;\n                  result = (abs_combined * 2 >> 0x15) - 0x3ff;\n                  pow_exp = (int)(abs_combined & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (temp_long < 0) {\n                    pow_exp = -pow_exp;\n                  }\n                  val_1 = calculate_inverse_08000168(result_exp,exp_2,0,abs_combined & ~(0xfffff >> (result & 0xff)));\n                }\n                local_64 = (undefined4)((ulonglong)val_1 >> 0x20);\n                local_68 = (undefined4)val_1;\n                calculate_result_0800016c(local_68,local_64,exp_1,res_exp);\n                val_1 = calculate_shifted_xor_080004d0(0,shift_5,0,0x3fe62e43);\n                result_exp = (undefined4)((ulonglong)val_1 >> 0x20);\n                res_val = calculate_inverse_08000168(0,shift_5,local_68,local_64);\n                res_val = calculate_inverse_08000168(exp_1,res_exp,(int)res_val,(int)((ulonglong)res_val >> 0x20));\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                val_2 = calculate_shifted_xor_080004d0(0,shift_5,0xca86c39,0xbe205c61);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_2,\n                                      (int)((ulonglong)val_2 >> 0x20));\n                res_exp = (undefined4)((ulonglong)res_val >> 0x20);\n                val_2 = calculate_result_0800016c((int)val_1,result_exp,(int)res_val,res_exp);\n                exp_2 = (undefined4)((ulonglong)val_2 >> 0x20);\n                exp_1 = (undefined4)val_2;\n                val_1 = calculate_inverse_08000168(exp_1,exp_2,(int)val_1,result_exp);\n                val_1 = calculate_inverse_08000168((int)res_val,res_exp,(int)val_1,\n                                      (int)((ulonglong)val_1 >> 0x20));\n                res_exp = (undefined4)((ulonglong)val_1 >> 0x20);\n                res_val = calculate_shifted_xor_080004d0(exp_1,exp_2,exp_1,exp_2);\n                comp_exp_2 = (undefined4)((ulonglong)res_val >> 0x20);\n                result_exp = (undefined4)res_val;\n                res_val = calculate_shifted_xor_080004d0(result_exp,comp_exp_2,0x72bea4d0,0x3e663769);\n                res_val = calculate_inverse_08000168((int)res_val,(int)((ulonglong)res_val >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),result_exp,comp_exp_2);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),result_exp,comp_exp_2);\n                res_val = calculate_inverse_08000168((int)res_val,(int)((ulonglong)res_val >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),result_exp,comp_exp_2);\n                res_val = calculate_result_0800016c((int)res_val,(int)((ulonglong)res_val >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                res_val = calculate_shifted_xor_080004d0((int)res_val,(int)((ulonglong)res_val >> 0x20),result_exp,comp_exp_2);\n                res_val = calculate_inverse_08000168(exp_1,exp_2,(int)res_val,(int)((ulonglong)res_val >> 0x20));\n                result_exp = (undefined4)((ulonglong)res_val >> 0x20);\n                val_2 = calculate_shifted_xor_080004d0(exp_1,exp_2,(int)res_val,result_exp);\n                res_val = calculate_inverse_08000168((int)res_val,result_exp,0,0x40000000);\n                res_val = convert_floating_point_08000724((int)val_2,(int)((ulonglong)val_2 >> 0x20),(int)res_val,\n                                      (int)((ulonglong)res_val >> 0x20));\n                val_2 = calculate_shifted_xor_080004d0(exp_1,exp_2,(int)val_1,res_exp);\n                val_1 = calculate_result_0800016c((int)val_2,(int)((ulonglong)val_2 >> 0x20),(int)val_1,\n                                      res_exp);\n                val_1 = calculate_inverse_08000168((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_1,\n                                      (int)((ulonglong)val_1 >> 0x20));\n                val_1 = calculate_inverse_08000168((int)val_1,(int)((ulonglong)val_1 >> 0x20),exp_1,exp_2);\n                res_val = calculate_inverse_08000168(0,0x3ff00000,(int)val_1,(int)((ulonglong)val_1 >> 0x20));\n                pow_exp_2 = (int)((ulonglong)res_val >> 0x20);\n                pow_exp_3 = pow_exp_2 + pow_exp * 0x100000;\n                val_1 = CONCAT44(pow_exp_3,(int)res_val);\n                exponent = local_70;\n                if (pow_exp_3 < 0x100000) {\n                  val_1 = calculate_shifted_xor_080071c0((int)res_val,pow_exp_2,pow_exp);\n                }\n              }\n              else {\n                if ((abs_combined + 0x3f6f3400 | result) == 0) {\n                  res_val = calculate_inverse_08000168(result,abs_combined,result_exp,exp_2);\n                  pow_exp = check_and_return_zero_080009c8(exp_1,res_exp,(int)res_val,(int)((ulonglong)res_val >> 0x20));\n                  if (pow_exp == 0) goto LAB_08006968;\n                }\n                val_1 = calculate_shifted_xor_080004d0(0,combined,0xc2f8f359,0x1a56e1f);\n                exponent = 0xc2f8f359;\n                combined = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = calculate_shifted_xor_080004d0((int)val_1,(int)((ulonglong)val_1 >> 0x20),exponent,combined);\n              return result;\n            }\n          }\n          exp_1 = (undefined4)((ulonglong)res_val >> 0x20);\n          res_val = calculate_inverse_08000168((int)res_val,exp_1,(int)res_val,exp_1);\n          val_1 = res_val;\nLAB_08006320:\n          result = convert_floating_point_08000724((int)res_val,(int)((ulonglong)res_val >> 0x20),(int)val_1,\n                                (int)((ulonglong)val_1 >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((abs_combined + 0xc0100000 | exponent) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = get_infinity_080070a4(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "exponent",
                "param_2": "combined",
                "param_3": "mantissa",
                "param_4": "sign",
                "uVar1": "exp_1",
                "uVar2": "comp_exp",
                "extraout_r1": "shift",
                "uVar3": "exp_2",
                "uVar4": "comp_exp_2",
                "extraout_r1_00": "shift_2",
                "extraout_r1_01": "shift_3",
                "extraout_r1_02": "shift_4",
                "extraout_r1_03": "shift_5",
                "iVar5": "pow_exp",
                "iVar6": "pow_exp_2",
                "uVar7": "add_val",
                "uVar8": "abs_combined",
                "uVar9": "add_val_2",
                "iVar10": "pow_exp_3",
                "uVar11": "result",
                "uVar12": "result_exp",
                "uVar13": "res_exp",
                "uVar14": "res_val",
                "uVar15": "val_1",
                "uVar16": "val_2",
                "uVar17": "temp_val",
                "lVar18": "temp_long",
                "uVar19": "temp_ullong",
                "uVar20": "inversed"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_08006c0c",
            "code": "\nundefined8 calculate_floating_point_08006c0c(uint input_value_1,uint input_value_2)\n\n{\n  undefined4 temp_var1;\n  uint temp_var2;\n  int loop_count1;\n  int loop_count2;\n  uint shift_count;\n  uint shifted_value;\n  int result1;\n  uint result2;\n  uint temp_var3;\n  int loop_count3;\n  uint temp_var4;\n  undefined8 final_result;\n  \n  if ((~input_value_2 & 0x7ff00000) == 0) {\n    final_result = calculate_shifted_xor_080004d0(input_value_1,input_value_2,input_value_1,input_value_2);\n    final_result = calculate_result_0800016c(input_value_1,input_value_2,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    return final_result;\n  }\n  if ((int)input_value_2 < 1) {\n    if ((input_value_2 & 0x7fffffff | input_value_1) == 0) {\n      return CONCAT44(input_value_2,input_value_1);\n    }\n    if (input_value_2 != 0) {\n      final_result = calculate_inverse_08000168(input_value_1,input_value_2,input_value_1,input_value_2);\n      temp_var1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = convert_floating_point_08000724((int)final_result,temp_var1,(int)final_result,temp_var1);\n      return final_result;\n    }\n  }\n  loop_count1 = (int)input_value_2 >> 0x14;\n  if (loop_count1 == 0) {\n    while (input_value_2 == 0) {\n      loop_count1 = loop_count1 + -0x15;\n      input_value_2 = input_value_1 >> 0xb;\n      input_value_1 = input_value_1 << 0x15;\n    }\n    temp_var2 = 0;\n    for (; -1 < (int)(input_value_2 << 0xb); input_value_2 = input_value_2 << 1) {\n      temp_var2 = temp_var2 + 1;\n    }\n    loop_count1 = loop_count1 - (temp_var2 - 1);\n    input_value_2 = input_value_2 | input_value_1 >> (0x20 - temp_var2 & 0xff);\n    input_value_1 = input_value_1 << (temp_var2 & 0xff);\n  }\n  result1 = 0;\n  temp_var2 = input_value_2 & 0xfffff | 0x100000;\n  if ((loop_count1 + -0x3ff) * -0x80000000 < 0) {\n    temp_var2 = temp_var2 * 2 - ((int)input_value_1 >> 0x1f);\n    input_value_1 = input_value_1 << 1;\n  }\n  temp_var2 = temp_var2 * 2 - ((int)input_value_1 >> 0x1f);\n  loop_count2 = 0x16;\n  shift_count = 0;\n  result2 = 0x200000;\n  input_value_1 = input_value_1 << 1;\n  do {\n    loop_count3 = shift_count + result2;\n    if (loop_count3 <= (int)temp_var2) {\n      temp_var2 = temp_var2 - loop_count3;\n      shift_count = loop_count3 + result2;\n      result1 = result1 + result2;\n    }\n    loop_count2 = loop_count2 + -1;\n    temp_var2 = temp_var2 * 2 - ((int)input_value_1 >> 0x1f);\n    result2 = result2 >> 1;\n    input_value_1 = input_value_1 << 1;\n  } while (loop_count2 != 0);\n  loop_count3 = 0x20;\n  temp_var3 = 0x80000000;\n  result2 = 0;\n  loop_count2 = 0;\n  do {\n    temp_var4 = temp_var3 + loop_count2;\n    shifted_value = shift_count;\n    if (((int)shift_count < (int)temp_var2) || ((temp_var2 == shift_count && (temp_var4 <= input_value_1)))) {\n      loop_count2 = temp_var4 + temp_var3;\n      if (((int)temp_var4 < 0) && (-1 < loop_count2)) {\n        shifted_value = shift_count + 1;\n      }\n      temp_var2 = temp_var2 - shift_count;\n      if (input_value_1 < temp_var4) {\n        temp_var2 = temp_var2 - 1;\n      }\n      input_value_1 = input_value_1 - temp_var4;\n      result2 = result2 + temp_var3;\n    }\n    temp_var2 = temp_var2 * 2 - ((int)input_value_1 >> 0x1f);\n    loop_count3 = loop_count3 + -1;\n    input_value_1 = input_value_1 << 1;\n    temp_var3 = temp_var3 >> 1;\n    shift_count = shifted_value;\n  } while (loop_count3 != 0);\n  if ((input_value_1 | temp_var2) != 0) {\n    if (result2 == 0xffffffff) {\n      result1 = result1 + 1;\n      result2 = 0;\n    }\n    else {\n      result2 = result2 + 1 & 0xfffffffe;\n    }\n  }\n  result2 = result2 >> 1;\n  if (result1 << 0x1f < 0) {\n    result2 = result2 | 0x80000000;\n  }\n  return CONCAT44((result1 >> 1) + 0x3fe00000 + (loop_count1 + -0x3ff >> 1) * 0x100000,result2);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_08006c0c",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "iVar3": "loop_count1",
                "iVar4": "loop_count2",
                "uVar5": "shift_count",
                "uVar6": "shifted_value",
                "iVar7": "result1",
                "uVar8": "result2",
                "uVar9": "temp_var3",
                "iVar10": "loop_count3",
                "uVar11": "temp_var4",
                "uVar12": "final_result"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint unsignedInput2;\n  undefined8 output;\n  undefined8 tempOutput;\n  \n  output = CONCAT44(input2,input1);\n  unsignedInput2 = input2 & 0x7fffffff;\n  if (unsignedInput2 < 0x44100000) {\n    if (unsignedInput2 < 0x3fdc0000) {\n      if (unsignedInput2 < 0x3e200000) {\n        tempOutput = calculate_result_08006d68_0800016c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = check_null_termination_080009f0((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return output;\n        }\n      }\n      result = -1;\n    }\n    else {\n      output = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)output >> 0x20);\n      temp1 = (undefined4)output;\n      if (unsignedInput2 < 0x3ff30000) {\n        if (unsignedInput2 < 0x3fe60000) {\n          output = calculate_result_08006d68_0800016c(temp1,temp2,temp1,temp2);\n          output = calculate_inverse_08000168((int)output,(int)((ulonglong)output >> 0x20),0,0x3ff00000);\n          tempOutput = calculate_result_08006d68_0800016c(temp1,temp2,0,0x40000000);\n          output = convert_floating_point_08000724((int)output,(int)((ulonglong)output >> 0x20),(int)tempOutput,\n                               (int)((ulonglong)tempOutput >> 0x20));\n          result = 0;\n        }\n        else {\n          output = calculate_inverse_08000168(temp1,temp2,0,0x3ff00000);\n          tempOutput = calculate_result_08006d68_0800016c(temp1,temp2,0,0x3ff00000);\n          output = convert_floating_point_08000724((int)output,(int)((ulonglong)output >> 0x20),(int)tempOutput,\n                               (int)((ulonglong)tempOutput >> 0x20));\n          result = 1;\n        }\n      }\n      else if (unsignedInput2 < 0x40038000) {\n        output = calculate_inverse_08000168(temp1,temp2,0,0x3ff80000);\n        tempOutput = calculate_shifted_xor_080004d0(temp1,temp2,0,0x3ff80000);\n        tempOutput = calculate_result_08006d68_0800016c((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),0,0x3ff00000);\n        output = convert_floating_point_08000724((int)output,(int)((ulonglong)output >> 0x20),(int)tempOutput,\n                             (int)((ulonglong)tempOutput >> 0x20));\n        result = 2;\n      }\n      else {\n        output = convert_floating_point_08000724(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)output >> 0x20);\n    temp5 = (undefined4)output;\n    output = calculate_shifted_xor_080004d0(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)output >> 0x20);\n    temp1 = (undefined4)output;\n    output = calculate_shifted_xor_080004d0(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)output >> 0x20);\n    temp2 = (undefined4)output;\n    output = calculate_shifted_xor_080004d0(temp2,temp4,0xe322da11,0x3f90ad3a);\n    output = calculate_result_08006d68_0800016c((int)output,(int)((ulonglong)output >> 0x20),0x24760deb,0x3fa97b4b);\n    output = calculate_shifted_xor_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp2,temp4);\n    output = calculate_result_08006d68_0800016c((int)output,(int)((ulonglong)output >> 0x20),0xa0d03d51,0x3fb10d66);\n    output = calculate_shifted_xor_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp2,temp4);\n    output = calculate_result_08006d68_0800016c((int)output,(int)((ulonglong)output >> 0x20),0xc54c206e,0x3fb745cd);\n    output = calculate_shifted_xor_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp2,temp4);\n    output = calculate_result_08006d68_0800016c((int)output,(int)((ulonglong)output >> 0x20),0x920083ff,0x3fc24924);\n    output = calculate_shifted_xor_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp2,temp4);\n    output = calculate_result_08006d68_0800016c((int)output,(int)((ulonglong)output >> 0x20),0x5555550d,0x3fd55555);\n    output = calculate_shifted_xor_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)output >> 0x20);\n    tempOutput = calculate_shifted_xor_080004d0(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    tempOutput = calculate_inverse_08000168((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),0x52defd9a,0x3fadde2d);\n    tempOutput = calculate_shifted_xor_080004d0((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),temp2,temp4);\n    tempOutput = calculate_inverse_08000168((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempOutput = calculate_shifted_xor_080004d0((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),temp2,temp4);\n    tempOutput = calculate_inverse_08000168((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),0xfe231671,0x3fbc71c6);\n    tempOutput = calculate_shifted_xor_080004d0((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),temp2,temp4);\n    tempOutput = calculate_inverse_08000168((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),0x9998ebc4,0x3fc99999);\n    tempOutput = calculate_shifted_xor_080004d0((int)tempOutput,(int)((ulonglong)tempOutput >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)tempOutput >> 0x20);\n    if (result == -1) {\n      output = calculate_result_08006d68_0800016c((int)output,temp1,(int)tempOutput,temp2);\n      output = calculate_shifted_xor_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp5,temp6);\n      output = calculate_inverse_08000168(temp5,temp6,(int)output,(int)((ulonglong)output >> 0x20));\n    }\n    else {\n      output = calculate_result_08006d68_0800016c((int)output,temp1,(int)tempOutput,temp2);\n      output = calculate_shifted_xor_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp5,temp6);\n      result = result * 8;\n      output = calculate_inverse_08000168((int)output,(int)((ulonglong)output >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      output = calculate_inverse_08000168((int)output,(int)((ulonglong)output >> 0x20),temp5,temp6);\n      output = calculate_inverse_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)output,\n                           (int)((ulonglong)output >> 0x20));\n      if ((int)input2 < 0) {\n        output = CONCAT44((int)((ulonglong)output >> 0x20) + -0x80000000,(int)output);\n      }\n    }\n  }\n  else if ((unsignedInput2 < 0x7ff00001) && ((unsignedInput2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      output = 0xbff921fb54442d18;\n    }\n    else {\n      output = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    output = calculate_result_08006d68_0800016c(input1,input2,input1,input2,input4);\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "unsignedInput2",
                "uVar9": "output",
                "uVar10": "tempOutput"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "get_bitwise_result_08007092",
            "code": "\nuint getBitwiseResult_08007092(undefined4 inputFlag,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "get_bitwise_result_08007092",
                "param_1": "inputFlag",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_program_0800709e",
            "code": "\nundefined4 initializeProgram_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_program_0800709e"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_080070b0",
            "code": "\nundefined8 calculate_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 var1;\n  uint var2;\n  undefined4 var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  undefined8 result;\n  \n  var6 = (input2 << 1) >> 0x15;\n  var5 = var6 - 0x3ff;\n  var2 = input2;\n  if ((int)var5 < 0x14) {\n    if ((int)var5 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      var2 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      var1 = *(undefined4 *)(&DAT_08007430 + index);\n      var3 = *(undefined4 *)(&DAT_08007434 + index);\n      result = calculate_080070b0_result_0800016c(input1,(-var2 | var2) >> 0xc & 0x80000 | input2 & 0xfffe0000,var1,\n                           var3,input1,input2,input3);\n      result = calculate_080070b0_inverse_08000168((int)result,(int)((ulonglong)result >> 0x20),var1,var3);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    var6 = 0xfffff >> (var5 & 0xff);\n    if ((input2 & var6 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    var6 = var6 >> 1;\n    var4 = input2 & var6 | input1;\n    if (var4 != 0) {\n      if (var5 == 0x13) {\n        var4 = 0x80000000;\n      }\n      else {\n        var4 = 0;\n      }\n      var2 = 0x40000 >> (var5 & 0xff) | input2 & ~var6;\n    }\n  }\n  else {\n    if (0x33 < (int)var5) {\n      if (var5 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = calculate_080070b0_result_0800016c();\n      return result;\n    }\n    var6 = var6 - 0x413;\n    var5 = 0xffffffff >> (var6 & 0xff);\n    if ((input1 & var5) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    var5 = var5 >> 1;\n    var4 = input1;\n    if ((input1 & var5) != 0) {\n      var4 = 0x40000000 >> (var6 & 0xff) | input1 & ~var5;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  var1 = *(undefined4 *)(&DAT_08007430 + index);\n  var3 = *(undefined4 *)(&DAT_08007434 + index);\n  result = calculate_080070b0_result_0800016c(var4,var2,var1,var3,input1,input2,input3);\n  result = calculate_080070b0_inverse_08000168((int)result,(int)((ulonglong)result >> 0x20),var1,var3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "index",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_shifted_xor_080071c0",
            "code": "\nundefined8 calculate_shifted_xor_080071c0(uint input1,uint input2,int shift_amount,undefined4 additional_value)\n\n{\n  uint shifted_bits;\n  undefined4 constant1;\n  int result_shifted_bits;\n  undefined4 constant2;\n  uint uVar5;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  shifted_bits = (input2 << 1) >> 0x15;\n  if (shifted_bits == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return result;\n    }\n    result = calculate_shifted_xor_080071c0_080004d0(input1,input2,0,0x43500000);\n    if (-0xc351 < shift_amount) {\n      shifted_bits = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    constant1 = 0xc2f8f359;\n    constant2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_bits == 0x7ff) {\n      result = calculate_result_0800016c(input1,input2,input1,input2,additional_value);\n      return result;\n    }\nLAB_08007210:\n    uVar5 = (uint)((ulonglong)result >> 0x20);\n    constant1 = (undefined4)result;\n    result_shifted_bits = shifted_bits + shift_amount;\n    if (result_shifted_bits < 0x7ff) {\n      if (0 < result_shifted_bits) {\n        return CONCAT44(uVar5 & 0x800fffff | result_shifted_bits * 0x100000,constant1);\n      }\n      if (result_shifted_bits + 0x35 < 0 == SCARRY4(result_shifted_bits,0x35)) {\n        result = CONCAT44(uVar5 & 0x800fffff | (result_shifted_bits + 0x36) * 0x100000,constant1);\n        constant1 = 0;\n        constant2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (shift_amount < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,constant1,uVar5);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,constant1,uVar5);\n    constant1 = 0x8800759c;\n    constant2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = calculate_shifted_xor_080071c0_080004d0((int)result,(int)((ulonglong)result >> 0x20),constant1,constant2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_shifted_xor_080071c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "shift_amount",
                "param_4": "additional_value",
                "uVar1": "shifted_bits",
                "uVar2": "constant1",
                "iVar3": "result_shifted_bits",
                "uVar4": "constant2",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_pointer_080072b8",
            "code": "\nvoid updateDataPointer_080072b8(int amount)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + amount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_pointer_080072b8",
                "param_1": "amount"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 160892,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}