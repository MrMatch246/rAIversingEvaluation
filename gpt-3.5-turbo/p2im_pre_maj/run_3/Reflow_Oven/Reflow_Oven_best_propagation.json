{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_string_length_08000178",
            "code": "\nchar * find_string_length_08000178(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_string_length_08000178",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "printNumber",
                "FUN_08005c96"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_08000190",
            "code": "\nulonglong calculate_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftedInput1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shiftedInput2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint carryShifted1;\n  bool isEqual;\n  bool check;\n  bool carryShifted2;\n  \n  temp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  isEqual = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  check = isEqual && input1 == input3;\n  if (!isEqual || input1 != input3) {\n    check = (result1 | input1) == 0;\n  }\n  if (!check) {\n    check = (input4 | input3) == 0;\n  }\n  shiftedInput2 = (int)result1 >> 0x15;\n  if (!check) {\n    check = shiftedInput2 == -1;\n  }\n  shiftedInput1 = (int)input4 >> 0x15;\n  if (!check) {\n    check = shiftedInput1 == -1;\n  }\n  if (check) {\n    if (shiftedInput2 == -1 || shiftedInput1 == -1) {\n      result1 = temp4;\n      result3 = input3;\n      if (shiftedInput2 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (shiftedInput2 != -1 || shiftedInput1 != -1) {\n        input3 = result3;\n        temp4 = result1;\n      }\n      check = (result3 | result1 << 0xc) == 0;\n      if (check) {\n        check = (input3 | temp4 << 0xc) == 0;\n      }\n      if (check) {\n        check = result1 == temp4;\n      }\n      if (!check) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      check = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)check;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)check)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  check = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (check && result1 <= input4) {\n    result1 = result1 + result3;\n    result2 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    check = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)check;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    check = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)check;\n  }\n  if (result1 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    carryShifted1 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    carryShifted1 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      carryShifted1 = carryShifted1 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    check = carryShifted1 == 0;\n    carryShifted1 = -carryShifted1;\n    result3 = -temp4;\n    temp4 = -(uint)!check - temp4;\n    result3 = -(uint)(check <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      carryShifted1 = (uint)(carry & 1) << 0x1f | carryShifted1 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    check = 0x7fffffff < carryShifted1;\n    if (carryShifted1 == 0x80000000) {\n      check = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)check) | input2,\n                    temp4 + check);\n  }\n  isEqual = (carryShifted1 & 0x80000000) != 0;\n  carryShifted1 = carryShifted1 << 1;\n  result2 = temp4 * 2;\n  check = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)isEqual;\n  result3 = result3 * 2 + (uint)(check || CARRY4(result2,(uint)isEqual));\n  result2 = result1 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_080002a0;\n  temp5 = temp4;\n  result1 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  shiftedInput2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    shiftedInput2 = shiftedInput2 + 0x20;\n  }\n  result3 = shiftedInput2 - 0xb;\n  carryShifted2 = SBORROW4(result3,0x20);\n  temp4 = shiftedInput2 - 0x2b;\n  check = (int)temp4 < 0;\n  isEqual = temp4 == 0;\n  if ((int)result3 < 0x20) {\n    carryShifted2 = SCARRY4(temp4,0xc);\n    shiftedInput2 = shiftedInput2 + -0x1f;\n    check = shiftedInput2 < 0;\n    isEqual = shiftedInput2 == 0;\n    temp4 = result3;\n    if (!isEqual && check == carryShifted2) {\n      temp5 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - shiftedInput2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isEqual || check != carryShifted2) {\n    carryShifted1 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (isEqual || check != carryShifted2) {\n    result1 = result1 | temp5 >> (carryShifted1 & 0xff);\n  }\n  if (isEqual || check != carryShifted2) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result2 - result3);\n  if ((int)temp4 < 0x1f) {\n    shiftedInput2 = temp4 - 0x13;\n    if (shiftedInput2 != 0 && shiftedInput2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shiftedInput2) & 0xff) | result1 << (0xcU - shiftedInput2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_08000190",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shiftedInput2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "carryShifted1",
                "bVar13": "isEqual",
                "bVar14": "check",
                "bVar15": "carryShifted2"
            },
            "calling": [
                "Compute",
                "printFloat",
                "SetControllerDirection",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_unsigned_addition_08000194",
            "code": "\nulonglong calculate_unsigned_addition_08000194(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift_amount1;\n  byte carry1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift_amount2;\n  uint num2_shifted;\n  uint num1_shifted;\n  uint num4_shifted;\n  uint num3_shifted;\n  uint result_high;\n  uint result_low;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  num2_shifted = num2 << 1;\n  num4_shifted = num4 << 1;\n  condition1 = ((num2 ^ num4) & 0x7fffffff) == 0;\n  condition2 = condition1 && num1 == num3;\n  if (!condition1 || num1 != num3) {\n    condition2 = (num2_shifted | num1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (num4_shifted | num3) == 0;\n  }\n  shift_amount2 = (int)num2_shifted >> 0x15;\n  if (!condition2) {\n    condition2 = shift_amount2 == -1;\n  }\n  shift_amount1 = (int)num4_shifted >> 0x15;\n  if (!condition2) {\n    condition2 = shift_amount1 == -1;\n  }\n  if (condition2) {\n    if (shift_amount2 == -1 || shift_amount1 == -1) {\n      num4_shifted = num4;\n      num2_shifted = num3;\n      if (shift_amount2 == -1) {\n        num4_shifted = num2;\n        num2_shifted = num1;\n      }\n      if (shift_amount2 != -1 || shift_amount1 != -1) {\n        num3 = num2_shifted;\n        num4 = num4_shifted;\n      }\n      condition2 = (num2_shifted | num4_shifted << 0xc) == 0;\n      if (condition2) {\n        condition2 = (num3 | num4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = num4_shifted == num4;\n      }\n      if (!condition2) {\n        num4_shifted = num4_shifted | 0x80000;\n      }\n      return CONCAT44(num4_shifted,num2_shifted);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((num2_shifted | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (num2_shifted >> 0x15 == 0) {\n      condition2 = (num1 & 0x80000000) != 0;\n      num4_shifted = num2 * 2 + (uint)condition2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition2)) {\n        num4_shifted = num4_shifted | 0x80000000;\n      }\n      return CONCAT44(num4_shifted,num1 << 1);\n    }\n    if (num2_shifted < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  num2_shifted = num2_shifted >> 0x15;\n  num4_shifted = num4_shifted >> 0x15;\n  num3_shifted = num4_shifted - num2_shifted;\n  condition2 = num3_shifted != 0;\n  if (num4_shifted < num2_shifted) {\n    num3_shifted = -num3_shifted;\n  }\n  num1_shifted = num1;\n  temp3 = num2;\n  if (condition2 && num2_shifted <= num4_shifted) {\n    num2_shifted = num2_shifted + num3_shifted;\n    num1_shifted = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < num3_shifted) {\n    return CONCAT44(temp3,num1_shifted);\n  }\n  num4_shifted = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    condition2 = num1_shifted != 0;\n    num1_shifted = -num1_shifted;\n    num4_shifted = -num4_shifted - (uint)condition2;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    condition2 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)condition2;\n  }\n  if (num2_shifted == num3_shifted) {\n    temp3 = temp3 ^ 0x100000;\n    if (num2_shifted == 0) {\n      num4_shifted = num4_shifted ^ 0x100000;\n      num2_shifted = 1;\n    }\n    else {\n      num3_shifted = num3_shifted - 1;\n    }\n  }\n  result_low = -num3_shifted + 0x20;\n  if ((int)num3_shifted < 0x21) {\n    result_high = num3 << (result_low & 0xff);\n    num3 = num3 >> (num3_shifted & 0xff);\n    temp1 = num1_shifted + num3;\n    temp2 = temp3 << (result_low & 0xff);\n    result_low = temp1 + temp2;\n    num4_shifted = num4_shifted + CARRY4(num1_shifted,num3) + ((int)temp3 >> (num3_shifted & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    result_high = temp3 << (-num3_shifted + 0x40 & 0xff);\n    if (num3 != 0) {\n      result_high = result_high | 2;\n    }\n    temp3 = (int)temp3 >> (num3_shifted - 0x20 & 0xff);\n    result_low = num1_shifted + temp3;\n    num4_shifted = num4_shifted + ((int)temp3 >> 0x1f) + (uint)CARRY4(num1_shifted,temp3);\n  }\n  num2 = num4_shifted & 0x80000000;\n  num3_shifted = num4_shifted;\n  if ((int)num4_shifted < 0) {\n    condition2 = result_high == 0;\n    result_high = -result_high;\n    num3_shifted = -result_low;\n    result_low = -(uint)!condition2 - result_low;\n    num3_shifted = -(uint)(condition2 <= num3_shifted) - num4_shifted;\n  }\n  if (0xfffff < num3_shifted) {\n    num1_shifted = num2_shifted - 1;\n    if (0x1fffff < num3_shifted) {\n      num4_shifted = num3_shifted & 1;\n      num3_shifted = num3_shifted >> 1;\n      carry1 = (byte)result_low;\n      result_low = (uint)(num4_shifted != 0) << 0x1f | result_low >> 1;\n      result_high = (uint)(carry1 & 1) << 0x1f | result_high >> 1;\n      num1_shifted = num2_shifted;\n      if (0xffbfffff < num2_shifted * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition2 = 0x7fffffff < result_high;\n    if (result_high == 0x80000000) {\n      condition2 = (result_low & 1) != 0;\n    }\n    return CONCAT44(num3_shifted + num1_shifted * 0x100000 + (uint)CARRY4(result_low,(uint)condition2) | num2,\n                    result_low + condition2);\n  }\n  condition1 = (result_high & 0x80000000) != 0;\n  result_high = result_high << 1;\n  num1_shifted = result_low * 2;\n  condition2 = CARRY4(result_low,result_low);\n  result_low = result_low * 2 + (uint)condition1;\n  num3_shifted = num3_shifted * 2 + (uint)(condition2 || CARRY4(num1_shifted,(uint)condition1));\n  num1_shifted = num2_shifted - 2;\n  if ((num3_shifted & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = result_low;\n  num2_shifted = num3_shifted;\n  if (num3_shifted == 0) {\n    temp3 = 0;\n    num2_shifted = result_low;\n  }\n  shift_amount2 = LZCOUNT(num2_shifted);\n  if (num3_shifted == 0) {\n    shift_amount2 = shift_amount2 + 0x20;\n  }\n  result_low = shift_amount2 - 0xb;\n  condition3 = SBORROW4(result_low,0x20);\n  num3_shifted = shift_amount2 - 0x2b;\n  condition2 = (int)num3_shifted < 0;\n  condition1 = num3_shifted == 0;\n  if ((int)result_low < 0x20) {\n    condition3 = SCARRY4(num3_shifted,0xc);\n    shift_amount2 = shift_amount2 + -0x1f;\n    condition2 = shift_amount2 < 0;\n    condition1 = shift_amount2 == 0;\n    num3_shifted = result_low;\n    if (!condition1 && condition2 == condition3) {\n      temp3 = num2_shifted << (result_low & 0xff);\n      num2_shifted = num2_shifted >> (0xcU - shift_amount2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    result_high = 0x20 - num3_shifted;\n  }\n  num2_shifted = num2_shifted << (num3_shifted & 0xff);\n  if (condition1 || condition2 != condition3) {\n    num2_shifted = num2_shifted | temp3 >> (result_high & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp3 = temp3 << (num3_shifted & 0xff);\n  }\nLAB_08000318:\n  if ((int)result_low <= (int)num1_shifted) {\n    return CONCAT44(num2_shifted + (num1_shifted - result_low) * 0x100000 | num2,temp3);\n  }\n  num3_shifted = ~(num1_shifted - result_low);\n  if ((int)num3_shifted < 0x1f) {\n    shift_amount2 = num3_shifted - 0x13;\n    if (shift_amount2 != 0 && shift_amount2 < 0 == SCARRY4(num3_shifted - 0x1f,0xc)) {\n      return CONCAT44(num4_shifted,temp3 >> (0x20 - (0xcU - shift_amount2) & 0xff) | num2_shifted << (0xcU - shift_amount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    num3_shifted = num3_shifted + 1;\n    return CONCAT44(num2 | num2_shifted >> (num3_shifted & 0xff),\n                    temp3 >> (num3_shifted & 0xff) | num2_shifted << (0x20 - num3_shifted & 0xff));\n  }\n  return CONCAT44(num4_shifted,num2_shifted >> (num3_shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "calculate_unsigned_addition_08000194",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift_amount1",
                "bVar2": "carry1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift_amount2",
                "uVar7": "num2_shifted",
                "uVar8": "num1_shifted",
                "uVar9": "num4_shifted",
                "uVar10": "num3_shifted",
                "uVar11": "result_high",
                "uVar12": "result_low",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "readThermocouple",
                "Compute",
                "printFloat",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "process_parameter_0800040c",
            "code": "\nulonglong processParameter_0800040c(uint input)\n\n{\n  uint result1;\n  uint result2;\n  int count;\n  uint modifiedCount;\n  uint temp;\n  bool isNegative;\n  bool isZero;\n  bool isLessThan32;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  count = LZCOUNT(input);\n  modifiedCount = count + 0x15;\n  isLessThan32 = SBORROW4(modifiedCount,0x20);\n  result2 = count - 0xb;\n  isNegative = (int)result2 < 0;\n  isZero = result2 == 0;\n  if (modifiedCount < 0x20) {\n    isLessThan32 = SCARRY4(result2,0xc);\n    isNegative = false;\n    isZero = count + 1 == 0;\n    result2 = modifiedCount;\n    if (!isZero && isLessThan32 == false) {\n      result1 = input << modifiedCount;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero || isNegative != isLessThan32) {\n    temp = 0x20 - result2;\n  }\n  input = input << (result2 & 0xff);\n  if (isZero || isNegative != isLessThan32) {\n    input = input | 0U >> (temp & 0xff);\n  }\n  if (isZero || isNegative != isLessThan32) {\n    result1 = 0 << (result2 & 0xff);\n  }\nLAB_08000318:\n  if (modifiedCount < 0x433) {\n    return CONCAT44(input + (0x432 - modifiedCount) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - modifiedCount);\n  if (0x1e < (int)result2) {\n    return (ulonglong)(input >> (result2 - 0x1f & 0xff));\n  }\n  count = result2 - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return CONCAT44(input >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | input << (0x20 - result2 & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "process_parameter_0800040c",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "count",
                "uVar4": "modifiedCount",
                "in_r12": "temp",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isLessThan32"
            },
            "calling": [
                "readThermocouple",
                "printFloat",
                "loop",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "extract_bits_0800042c",
            "code": "\nulonglong extract_bits_0800042c(uint input)\n\n{\n  uint shift_amount;\n  uint abs_input;\n  uint shift;\n  int leading_zeros;\n  uint final_shift;\n  uint input_sign;\n  uint remaining_bits;\n  bool negative_shift;\n  bool zero_shift;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  input_sign = input & 0x80000000;\n  abs_input = input;\n  if ((int)input_sign < 0) {\n    abs_input = -input;\n  }\n  shift_amount = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  final_shift = leading_zeros + 0x15;\n  overflow = SBORROW4(final_shift,0x20);\n  shift = leading_zeros - 0xb;\n  negative_shift = (int)shift < 0;\n  zero_shift = shift == 0;\n  if (final_shift < 0x20) {\n    overflow = SCARRY4(shift,0xc);\n    negative_shift = false;\n    zero_shift = leading_zeros + 1 == 0;\n    shift = final_shift;\n    if (!zero_shift && overflow == false) {\n      shift_amount = abs_input << final_shift;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (zero_shift || negative_shift != overflow) {\n    remaining_bits = 0x20 - shift;\n  }\n  abs_input = abs_input << (shift & 0xff);\n  if (zero_shift || negative_shift != overflow) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (zero_shift || negative_shift != overflow) {\n    shift_amount = 0 << (shift & 0xff);\n  }\nLAB_08000318:\n  if (final_shift < 0x433) {\n    return CONCAT44(abs_input + (0x432 - final_shift) * 0x100000 | input_sign,shift_amount);\n  }\n  shift = ~(0x432 - final_shift);\n  if (0x1e < (int)shift) {\n    return CONCAT44(input,abs_input >> (shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(input_sign | abs_input >> (shift & 0xff),\n                    shift_amount >> (shift & 0xff) | abs_input << (0x20 - shift & 0xff));\n  }\n  return CONCAT44(input,shift_amount >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "extract_bits_0800042c",
                "param_1": "input",
                "uVar1": "shift_amount",
                "uVar2": "abs_input",
                "uVar3": "shift",
                "iVar4": "leading_zeros",
                "uVar5": "final_shift",
                "uVar6": "input_sign",
                "in_r12": "remaining_bits",
                "bVar7": "negative_shift",
                "bVar8": "zero_shift",
                "bVar9": "overflow"
            },
            "calling": [
                "printFloat",
                "loop",
                "SetSampleTime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_updated_result_080004f8",
            "code": "\nulonglong calculate_updated_result_080004f8(undefined4 input_value1,uint input_value2,uint input_value3,uint input_value4)\n\n{\n  ulonglong product_32bit1;\n  longlong product_64bit;\n  uint uVar3;\n  uint partial_result1;\n  int sum_of_parts;\n  uint partial_result2;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool is_zero;\n  bool is_negative;\n  bool is_borrow;\n  ulonglong combined_values;\n  \n  combined_values = CONCAT44(input_value2,input_value1);\n  uVar7 = 0x7ff;\n  partial_result1 = input_value2 >> 0x14 & 0x7ff;\n  is_zero = partial_result1 == 0;\n  if (!is_zero) {\n    unaff_r5 = input_value4 >> 0x14 & 0x7ff;\n    is_zero = unaff_r5 == 0;\n  }\n  if (!is_zero) {\n    is_zero = partial_result1 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = unaff_r5 == 0x7ff;\n  }\n  if (is_zero) {\n    combined_values = calculate_bitwise_result_080006d4();\n  }\n  uVar3 = (uint)(combined_values >> 0x20);\n  sum_of_parts = partial_result1 + unaff_r5;\n  partial_result1 = uVar3 ^ input_value4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  input_value4 = input_value4 & ~(uVar7 << 0x15);\n  is_zero = ((uint)combined_values | uVar3 << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (input_value3 | input_value4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  input_value4 = input_value4 | 0x100000;\n  if (is_zero) {\n    input_value3 = (uint)combined_values | input_value3;\n    input_value4 = (partial_result1 & 0x80000000 | uVar3) ^ input_value4;\n    partial_result1 = uVar7 >> 1;\n    is_borrow = SBORROW4(sum_of_parts,partial_result1);\n    partial_result2 = sum_of_parts - partial_result1;\n    is_zero = partial_result2 == 0;\n    uVar3 = partial_result2;\n    if (!is_zero && (int)partial_result1 <= sum_of_parts) {\n      is_borrow = SBORROW4(uVar7,partial_result2);\n      uVar3 = uVar7 - partial_result2;\n      is_zero = uVar7 == partial_result2;\n    }\n    if (!is_zero && (int)uVar3 < 0 == is_borrow) {\n      input_value4 = input_value4 | partial_result2 * 0x100000;\n    }\n    if (!is_zero && (int)uVar3 < 0 == is_borrow) {\n      return CONCAT44(input_value4,input_value3);\n    }\n    input_value4 = input_value4 | 0x100000;\n    uVar7 = 0;\n    is_borrow = SBORROW4(partial_result2,1);\n    partial_result2 = partial_result2 - 1;\n    is_zero = partial_result2 == 0;\n    partial_result1 = partial_result2;\n  }\n  else {\n    product_32bit1 = (combined_values & 0xffffffff) * (ulonglong)input_value3;\n    combined_values = (combined_values & 0xffffffff) * (ulonglong)input_value4 +\n             (ulonglong)uVar3 * (ulonglong)input_value3 + (product_32bit1 >> 0x20);\n    uVar8 = (uint)combined_values;\n    product_64bit = (ulonglong)uVar3 * (ulonglong)input_value4 + (combined_values >> 0x20);\n    uVar7 = (uint)product_64bit;\n    uVar3 = (uint)((ulonglong)product_64bit >> 0x20);\n    if ((int)product_32bit1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    partial_result2 = (sum_of_parts + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      is_zero = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      product_64bit = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)is_zero)),\n                       uVar7 * 2 + (uint)is_zero);\n    }\n    input_value4 = partial_result1 & 0x80000000 | (int)((ulonglong)product_64bit >> 0x20) << 0xb | (uint)product_64bit >> 0x15;\n    input_value3 = (uint)product_64bit << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    is_negative = 0xfc < partial_result2;\n    is_borrow = SBORROW4(partial_result2,0xfd);\n    uVar3 = partial_result2 - 0xfd;\n    is_zero = uVar3 == 0;\n    partial_result1 = uVar3;\n    if (is_negative && !is_zero) {\n      is_negative = 0x6ff < uVar3;\n      is_borrow = SBORROW4(uVar3,0x700);\n      partial_result1 = partial_result2 - 0x7fd;\n      is_zero = uVar3 == 0x700;\n    }\n    if (!is_negative || is_zero) {\n      is_zero = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        is_zero = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_value4 + partial_result2 * 0x100000 + (uint)CARRY4(input_value3,(uint)is_zero),input_value3 + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)partial_result1 < 0 == is_borrow) {\n    return (ulonglong)(input_value4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_negative = SCARRY4(partial_result2,0x36);\n  is_zero = (int)(partial_result2 + 0x36) < 0;\n  is_borrow = partial_result2 == 0xffffffca;\n  if (is_borrow || is_zero != is_negative) {\n    input_value3 = 0;\n  }\n  if (is_borrow || is_zero != is_negative) {\n    input_value4 = input_value4 & 0x80000000;\n  }\n  if (is_borrow || is_zero != is_negative) {\n    return CONCAT44(input_value4,input_value3);\n  }\n  partial_result1 = -partial_result2;\n  uVar3 = partial_result1 - 0x20;\n  if (0x1f < (int)partial_result1) {\n    partial_result2 = input_value3 >> (uVar3 & 0xff) | input_value4 << (0x20 - uVar3 & 0xff);\n    partial_result1 = (input_value4 >> (uVar3 & 0xff) & ~((input_value4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)partial_result2 >> 0x1f);\n    if ((uVar7 | input_value3 << (0x20 - uVar3 & 0xff) | partial_result2 << 1) == 0) {\n      partial_result1 = partial_result1 & ~(partial_result2 >> 0x1f);\n    }\n    return CONCAT44(input_value4,partial_result1) & 0x80000000ffffffff;\n  }\n  sum_of_parts = partial_result1 - 0x14;\n  if (sum_of_parts == 0 || sum_of_parts < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = input_value3 << (partial_result2 + 0x20 & 0xff);\n    uVar3 = input_value3 >> (partial_result1 & 0xff) | input_value4 << (partial_result2 + 0x20 & 0xff);\n    partial_result2 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      partial_result2 = partial_result2 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((input_value4 & 0x80000000) +\n                    ((input_value4 & 0x7fffffff) >> (partial_result1 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),partial_result2);\n  }\n  partial_result1 = 0xc - sum_of_parts;\n  partial_result2 = input_value3 << (partial_result1 & 0xff);\n  partial_result1 = input_value3 >> (0x20 - partial_result1 & 0xff) | input_value4 << (partial_result1 & 0xff);\n  uVar3 = partial_result1 + -((int)partial_result2 >> 0x1f);\n  if ((uVar7 | partial_result2 << 1) == 0) {\n    uVar3 = uVar3 & ~(partial_result2 >> 0x1f);\n  }\n  return CONCAT44((input_value4 & 0x80000000) + (uint)CARRY4(partial_result1,-((int)partial_result2 >> 0x1f)),uVar3);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_updated_result_080004f8",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "input_value3",
                "param_4": "input_value4",
                "uVar1": "product_32bit1",
                "lVar2": "product_64bit",
                "uVar4": "partial_result1",
                "iVar5": "sum_of_parts",
                "uVar6": "partial_result2",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "bVar11": "is_borrow",
                "uVar12": "combined_values"
            },
            "calling": [
                "readThermocouple",
                "Compute",
                "printFloat",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "calculate_bitwise_result_080006d4",
            "code": "\nulonglong calculate_bitwise_result_080006d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_6;\n  uint temp_7;\n  uint temp_5;\n  bool is_zero;\n  \n  temp_6 = temp_5 & input_4 >> 0x14;\n  if (temp_2 != temp_5 && temp_6 != temp_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_2 == 0) {\n      temp_7 = input_2 & 0x80000000;\n      do {\n        temp_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_7;\n      if (temp_6 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_6 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_6 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_7 = input_2;\n  if (((!is_zero) && ((temp_2 != temp_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_6 != temp_5 || (input_1 = input_3, temp_7 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_7,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "calculate_bitwise_result_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_6",
                "uVar3": "temp_7",
                "in_r12": "temp_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_double_from_uints_0800074c",
            "code": "\nulonglong calculate_double_from_uints_0800074c(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  int temp_var_8;\n  uint temp_var_9;\n  uint unaff_r5;\n  uint temp_var_10;\n  uint temp_var_11;\n  uint temp_var_12;\n  uint temp_var_13;\n  bool temp_bool_var_1;\n  bool temp_bool_var_2;\n  bool temp_bool_var_3;\n  undefined8 temp_var_14;\n  \n  temp_var_14 = CONCAT44(input_param_2,input_param_1);\n  temp_var_13 = 0x7ff;\n  temp_var_7 = input_param_2 >> 0x14 & 0x7ff;\n  temp_bool_var_1 = temp_var_7 == 0;\n  if (!temp_bool_var_1) {\n    unaff_r5 = input_param_4 >> 0x14 & 0x7ff;\n    temp_bool_var_1 = unaff_r5 == 0;\n  }\n  if (!temp_bool_var_1) {\n    temp_bool_var_1 = temp_var_7 == 0x7ff;\n  }\n  if (!temp_bool_var_1) {\n    temp_bool_var_1 = unaff_r5 == 0x7ff;\n  }\n  if (temp_bool_var_1) {\n    temp_var_14 = calculate_double_from_uints_0800074c_080008ba();\n  }\n  temp_var_9 = (uint)((ulonglong)temp_var_14 >> 0x20);\n  temp_var_11 = (uint)temp_var_14;\n  temp_var_8 = temp_var_7 - unaff_r5;\n  if ((input_param_3 | input_param_4 << 0xc) == 0) {\n    temp_var_7 = (temp_var_9 ^ input_param_4) & 0x80000000 | temp_var_9 & 0xfffff;\n    temp_bool_var_3 = SCARRY4(temp_var_8,temp_var_13 >> 1);\n    temp_var_9 = temp_var_8 + (temp_var_13 >> 1);\n    temp_bool_var_1 = (int)temp_var_9 < 0;\n    temp_bool_var_2 = temp_var_9 == 0;\n    if (!temp_bool_var_2 && temp_bool_var_1 == temp_bool_var_3) {\n      temp_bool_var_3 = SBORROW4(temp_var_13,temp_var_9);\n      temp_bool_var_1 = (int)(temp_var_13 - temp_var_9) < 0;\n      temp_bool_var_2 = temp_var_13 == temp_var_9;\n    }\n    if (!temp_bool_var_2 && temp_bool_var_1 == temp_bool_var_3) {\n      temp_var_7 = temp_var_7 | temp_var_9 * 0x100000;\n    }\n    if (!temp_bool_var_2 && temp_bool_var_1 == temp_bool_var_3) {\n      return CONCAT44(temp_var_7,temp_var_11);\n    }\n    temp_var_7 = temp_var_7 | 0x100000;\n    temp_var_13 = 0;\n    temp_bool_var_2 = SBORROW4(temp_var_9,1);\n    temp_var_9 = temp_var_9 - 1;\n    temp_bool_var_1 = temp_var_9 == 0;\n    temp_var_3 = temp_var_9;\n  }\n  else {\n    temp_var_3 = (input_param_4 << 0xc) >> 4 | 0x10000000 | input_param_3 >> 0x18;\n    temp_var_13 = input_param_3 << 8;\n    temp_var_10 = (temp_var_9 << 0xc) >> 4 | 0x10000000 | temp_var_11 >> 0x18;\n    temp_var_11 = temp_var_11 * 0x100;\n    temp_var_7 = (temp_var_9 ^ input_param_4) & 0x80000000;\n    temp_bool_var_1 = temp_var_3 <= temp_var_10;\n    if (temp_var_10 == temp_var_3) {\n      temp_bool_var_1 = temp_var_13 <= temp_var_11;\n    }\n    temp_var_8 = temp_var_8 + (uint)temp_bool_var_1;\n    temp_var_9 = temp_var_8 + 0x3fd;\n    if (temp_bool_var_1 == false) {\n      temp_var_3 = temp_var_3 >> 1;\n      temp_var_13 = (uint)((input_param_3 >> 0x18 & 1) != 0) << 0x1f | temp_var_13 >> 1;\n    }\n    temp_var_12 = temp_var_11 - temp_var_13;\n    temp_var_10 = (temp_var_10 - temp_var_3) - (uint)(temp_var_11 < temp_var_13);\n    temp_var_4 = temp_var_3 >> 1;\n    temp_var_1 = (uint)((temp_var_3 & 1) != 0) << 0x1f | temp_var_13 >> 1;\n    temp_var_11 = 0x100000;\n    temp_var_3 = 0x80000;\n    while( true ) {\n      temp_bool_var_1 = temp_var_1 <= temp_var_12;\n      if (temp_var_4 < temp_var_10 || temp_var_10 - temp_var_4 < (uint)temp_bool_var_1) {\n        temp_var_12 = temp_var_12 - temp_var_1;\n        temp_var_11 = temp_var_11 | temp_var_3;\n        temp_var_10 = (temp_var_10 - temp_var_4) - (uint)!temp_bool_var_1;\n      }\n      temp_var_5 = temp_var_4 >> 1;\n      temp_var_1 = (uint)((temp_var_4 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_bool_var_2 = temp_var_1 <= temp_var_12;\n      temp_bool_var_1 = temp_var_10 - temp_var_5 < (uint)temp_bool_var_2;\n      temp_var_13 = temp_var_10;\n      if (temp_var_5 < temp_var_10 || temp_bool_var_1) {\n        temp_var_12 = temp_var_12 - temp_var_1;\n        temp_var_13 = (temp_var_10 - temp_var_5) - (uint)!temp_bool_var_2;\n      }\n      if (temp_var_5 < temp_var_10 || temp_bool_var_1) {\n        temp_var_11 = temp_var_11 | temp_var_3 >> 1;\n      }\n      temp_var_10 = temp_var_4 >> 2;\n      temp_var_2 = (uint)((temp_var_5 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_bool_var_2 = temp_var_2 <= temp_var_12;\n      temp_bool_var_1 = temp_var_13 - temp_var_10 < (uint)temp_bool_var_2;\n      temp_var_5 = temp_var_13;\n      if (temp_var_10 < temp_var_13 || temp_bool_var_1) {\n        temp_var_12 = temp_var_12 - temp_var_2;\n        temp_var_5 = (temp_var_13 - temp_var_10) - (uint)!temp_bool_var_2;\n      }\n      if (temp_var_10 < temp_var_13 || temp_bool_var_1) {\n        temp_var_11 = temp_var_11 | temp_var_3 >> 2;\n      }\n      temp_var_6 = temp_var_4 >> 3;\n      temp_var_1 = (uint)((temp_var_10 & 1) != 0) << 0x1f | temp_var_2 >> 1;\n      temp_bool_var_2 = temp_var_1 <= temp_var_12;\n      temp_bool_var_1 = temp_var_5 - temp_var_6 < (uint)temp_bool_var_2;\n      temp_var_10 = temp_var_5;\n      if (temp_var_6 < temp_var_5 || temp_bool_var_1) {\n        temp_var_12 = temp_var_12 - temp_var_1;\n        temp_var_10 = (temp_var_5 - temp_var_6) - (uint)!temp_bool_var_2;\n      }\n      if (temp_var_6 < temp_var_5 || temp_bool_var_1) {\n        temp_var_11 = temp_var_11 | temp_var_3 >> 3;\n      }\n      temp_var_13 = temp_var_10 | temp_var_12;\n      if (temp_var_13 == 0) break;\n      temp_var_10 = temp_var_10 << 4 | temp_var_12 >> 0x1c;\n      temp_var_12 = temp_var_12 << 4;\n      temp_var_4 = temp_var_4 & 0xfffffff8 | temp_var_1 >> 0x1d;\n      temp_var_1 = (temp_var_2 >> 1) << 3;\n      temp_var_3 = temp_var_3 >> 4;\n      if (temp_var_3 == 0) {\n        temp_var_6 = temp_var_4;\n        if ((temp_var_7 & 0x100000) != 0) goto LAB_0800086a;\n        temp_var_7 = temp_var_7 | temp_var_11;\n        temp_var_11 = 0;\n        temp_var_3 = 0x80000000;\n      }\n    }\n    if ((temp_var_7 & 0x100000) == 0) {\n      temp_var_7 = temp_var_7 | temp_var_11;\n      temp_var_11 = 0;\n    }\nLAB_0800086a:\n    temp_bool_var_3 = 0xfc < temp_var_9;\n    temp_bool_var_2 = SBORROW4(temp_var_9,0xfd);\n    temp_var_4 = temp_var_8 + 0x300;\n    temp_bool_var_1 = temp_var_4 == 0;\n    temp_var_3 = temp_var_4;\n    if (temp_bool_var_3 && !temp_bool_var_1) {\n      temp_bool_var_3 = 0x6ff < temp_var_4;\n      temp_bool_var_2 = SBORROW4(temp_var_4,0x700);\n      temp_var_3 = temp_var_8 - 0x400;\n      temp_bool_var_1 = temp_var_4 == 0x700;\n    }\n    if (!temp_bool_var_3 || temp_bool_var_1) {\n      temp_bool_var_1 = temp_var_6 <= temp_var_10;\n      if (temp_var_10 == temp_var_6) {\n        temp_bool_var_1 = temp_var_1 <= temp_var_12;\n      }\n      if (temp_var_10 == temp_var_6 && temp_var_12 == temp_var_1) {\n        temp_bool_var_1 = (temp_var_11 & 1) != 0;\n      }\n      return CONCAT44(temp_var_7 + temp_var_9 * 0x100000 + (uint)CARRY4(temp_var_11,(uint)temp_bool_var_1),temp_var_11 + temp_bool_var_1);\n    }\n  }\n  if (!temp_bool_var_1 && (int)temp_var_3 < 0 == temp_bool_var_2) {\n    return (ulonglong)(temp_var_7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_bool_var_3 = SCARRY4(temp_var_9,0x36);\n  temp_bool_var_1 = (int)(temp_var_9 + 0x36) < 0;\n  temp_bool_var_2 = temp_var_9 == 0xffffffca;\n  if (temp_bool_var_2 || temp_bool_var_1 != temp_bool_var_3) {\n    temp_var_11 = 0;\n  }\n  if (temp_bool_var_2 || temp_bool_var_1 != temp_bool_var_3) {\n    temp_var_7 = temp_var_7 & 0x80000000;\n  }\n  if (temp_bool_var_2 || temp_bool_var_1 != temp_bool_var_3) {\n    return CONCAT44(temp_var_7,temp_var_11);\n  }\n  temp_var_3 = -temp_var_9;\n  temp_var_10 = temp_var_3 - 0x20;\n  if (0x1f < (int)temp_var_3) {\n    temp_var_3 = temp_var_11 >> (temp_var_10 & 0xff) | temp_var_7 << (0x20 - temp_var_10 & 0xff);\n    temp_var_9 = (temp_var_7 >> (temp_var_10 & 0xff) & ~((temp_var_7 & 0x80000000) >> (temp_var_10 & 0xff))) -\n            ((int)temp_var_3 >> 0x1f);\n    if ((temp_var_13 | temp_var_11 << (0x20 - temp_var_10 & 0xff) | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44(temp_var_7,temp_var_9) & 0x80000000ffffffff;\n  }\n  temp_var_8 = temp_var_3 - 0x14;\n  if (temp_var_8 != 0 && temp_var_8 < 0 == SCARRY4(temp_var_10,0xc)) {\n    temp_var_9 = 0xc - temp_var_8;\n    temp_var_3 = temp_var_11 << (temp_var_9 & 0xff);\n    temp_var_11 = temp_var_11 >> (0x20 - temp_var_9 & 0xff) | temp_var_7 << (temp_var_9 & 0xff);\n    temp_var_9 = temp_var_11 + -((int)temp_var_3 >> 0x1f);\n    if ((temp_var_13 | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44((temp_var_7 & 0x80000000) + (uint)CARRY4(temp_var_11,-((int)temp_var_3 >> 0x1f)),temp_var_9);\n  }\n  temp_var_10 = temp_var_11 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_11 = temp_var_11 >> (temp_var_3 & 0xff) | temp_var_7 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_9 = temp_var_11 + -((int)temp_var_10 >> 0x1f);\n  if ((temp_var_13 | temp_var_10 << 1) == 0) {\n    temp_var_9 = temp_var_9 & ~(temp_var_10 >> 0x1f);\n  }\n  return CONCAT44((temp_var_7 & 0x80000000) +\n                  ((temp_var_7 & 0x7fffffff) >> (temp_var_3 & 0xff)) +\n                  (uint)CARRY4(temp_var_11,-((int)temp_var_10 >> 0x1f)),temp_var_9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_double_from_uints_0800074c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "uVar7": "temp_var_7",
                "iVar8": "temp_var_8",
                "uVar9": "temp_var_9",
                "uVar10": "temp_var_10",
                "uVar11": "temp_var_11",
                "uVar12": "temp_var_12",
                "uVar13": "temp_var_13",
                "bVar14": "temp_bool_var_1",
                "bVar15": "temp_bool_var_2",
                "bVar16": "temp_bool_var_3",
                "uVar17": "temp_var_14"
            },
            "calling": [
                "readThermocouple",
                "printFloat",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "calculate_double_from_uints_080008ba",
            "code": "\nulonglong calculate_double_from_uints_080008ba(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & value4 >> 0x14;\n  bit4 = value2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((value1 | value2 << 0xc) == 0) && (value1 = value3, bit4 = value4, bit3 != bit5)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((value2 ^ value4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      value1 = value3;\n      bit4 = value4;\n      if ((value3 | value4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((value2 ^ value4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (value1 | value2 << 1) == 0;\n      if (!isZero) {\n        isZero = (value3 | value4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = value2 & 0x80000000;\n          do {\n            bit1 = value1 & 0x80000000;\n            value1 = value1 << 1;\n            value2 = value2 * 2 + (uint)(bit1 != 0);\n          } while ((value2 & 0x100000) == 0);\n          value2 = value2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(value2,value1);\n          }\n        }\n        do {\n          bit4 = value3 & 0x80000000;\n          value3 = value3 << 1;\n          value4 = value4 * 2 + (uint)(bit4 != 0);\n        } while ((value4 & 0x100000) == 0);\n        return CONCAT44(value2,value1);\n      }\n      if ((value1 | value2 << 1) != 0) goto LAB_0800072c;\n      if ((value3 | value4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(bit4,value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "calculate_double_from_uints_080008ba",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_parameters_0800092c",
            "code": "\nuint check_parameters_0800092c(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint xor_result;\n  bool check_result;\n  bool comparison_result;\n  \n  if (((int)(value_2 << 1) >> 0x15 == -1 || (int)(value_4 << 1) >> 0x15 == -1) &&\n     ((((int)(value_2 << 1) >> 0x15 == -1 && ((value_1 | value_2 << 0xc) != 0)) ||\n      (((int)(value_4 << 1) >> 0x15 == -1 && ((value_3 | value_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  check_result = (value_1 | value_2 << 1) == 0;\n  if (check_result) {\n    check_result = (value_3 | value_4 << 1) == 0;\n  }\n  if (!check_result) {\n    check_result = value_2 == value_4;\n  }\n  if (check_result) {\n    check_result = value_1 == value_3;\n  }\n  if (!check_result) {\n    xor_result = value_2 ^ value_4;\n    check_result = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      check_result = value_2 == value_4;\n    }\n    comparison_result = -1 < (int)xor_result && value_4 <= value_2;\n    if (check_result) {\n      comparison_result = value_3 <= value_1;\n    }\n    value_4 = (int)value_4 >> 0x1f;\n    if (!comparison_result) {\n      value_4 = ~value_4;\n    }\n    return value_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "xor_result",
                "bVar2": "check_result",
                "bVar3": "comparison_result"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "compare_floats_080009a8",
            "code": "\nvoid compareFloats_080009a8(undefined4 result,undefined4 status,undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cdcmpeq(float1,float2,result,status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "compare_floats_080009a8",
                "param_1": "result",
                "param_2": "status",
                "param_3": "float1",
                "param_4": "float2"
            },
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "convert_to_float_080009b8",
            "code": "\nundefined4 convertToFloat_080009b8(undefined4 value)\n\n{\n  __convertToFloat_080009b8Helper();\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "convert_to_float_080009b8",
                "param_1": "value",
                "__eqdf2": "__convertToFloatHelper"
            },
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "called": [
                "__eqdf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_if_zero_080009c8",
            "code": "\nbool check_if_zero_080009c8(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_if_zero_080009c8",
                "in_ZR": "input_char"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_null_string_080009dc",
            "code": "\nbool is_null_string_080009dc(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_null_string_080009dc",
                "in_CY": "input_character"
            },
            "calling": [
                "Compute",
                "Initialize",
                "printFloat",
                "SetOutputLimits",
                "loop",
                "FUN_08001814"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_equal_or_zero_080009f0",
            "code": "\nbool check_equal_or_zero_080009f0(void)\n\n{\n  undefined is_zero;\n  undefined is_equal;\n  \n  compare_doubles();\n  return !(bool)is_equal || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_equal_or_zero_080009f0",
                "in_ZR": "is_zero",
                "in_CY": "is_equal",
                "__aeabi_cdcmpeq": "compare_doubles"
            },
            "calling": [
                "printFloat",
                "loop"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_comparison_08000a04",
            "code": "\nbool checkComparison_08000a04(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  __aeabi_cdrcmple();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_comparison_08000a04",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "is_null_terminated_08000a18",
            "code": "\nbool is_null_terminated_08000a18(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "is_null_terminated_08000a18",
                "in_CY": "input_char"
            },
            "calling": [
                "Compute",
                "Initialize",
                "printFloat",
                "SetOutputLimits",
                "loop"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "is_invalid_combination_08000a2c",
            "code": "\nundefined4 is_invalid_combination_08000a2c(uint first_input,int second_input,uint third_input,int fourth_input)\n\n{\n  if ((((second_input << 1) >> 0x15 != -1) || ((first_input | second_input << 0xc) == 0)) &&\n     (((fourth_input << 1) >> 0x15 != -1 || ((third_input | fourth_input << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "is_invalid_combination_08000a2c",
                "param_1": "first_input",
                "param_2": "second_input",
                "param_3": "third_input",
                "param_4": "fourth_input"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "integer_transformation_08000a58",
            "code": "\nuint integerTransformation_08000a58(uint inputValue1,uint inputValue2)\n\n{\n  uint shiftValue;\n  int result;\n  uint sumValue;\n  \n  result = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < result) {\n      return 0;\n    }\n    shiftValue = result >> 0x15;\n    sumValue = -shiftValue - 0x3e1;\n    if (shiftValue < 0xfffffc20 && sumValue != 0) {\n      shiftValue = (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (sumValue & 0xff);\n      if ((inputValue2 & 0x80000000) != 0) {\n        shiftValue = -shiftValue;\n      }\n      return shiftValue;\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  inputValue2 = inputValue2 & 0x80000000;\n  if (inputValue2 == 0) {\n    inputValue2 = 0x7fffffff;\n  }\n  return inputValue2;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "integer_transformation_08000a58",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "iVar2": "result",
                "uVar1": "shiftValue",
                "uVar3": "sumValue"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_shifted_value_08000aa8",
            "code": "\nuint calculateShiftedValue_08000aa8(uint input1,uint input2)\n\n{\n  int temp1;\n  uint temp2;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  temp1 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    temp2 = -(temp1 >> 0x15) - 0x3e1;\n    if (-1 < (int)temp2) {\n      return (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (temp2 & 0xff);\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_system_interrupt_08000ae8",
            "code": "\nvoid execute_system_interrupt_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_system_interrupt_08000ae8"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_afl_call_08000aec",
            "code": "\nundefined4 executeAflCall_08000aec(undefined4 inputParam,undefined4 unusedParam1,undefined4 unusedParam2,undefined4 outputParam)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = aflCall(1,inputParam,0,0,outputParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_afl_call_08000aec",
                "param_1": "inputParam",
                "param_2": "unusedParam1",
                "param_3": "unusedParam2",
                "param_4": "outputParam",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_components_08000b08",
            "code": "\nvoid initializeComponents_08000b08(int condition1,int condition2)\n\n{\n  if ((condition1 == 1) && (condition2 == 0xffff)) {\n    initializePID(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n        DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initializeLCD(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                  DAT_20000034);\n    initializeMAX31855(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_components_08000b08",
                "param_1": "condition1",
                "param_2": "condition2",
                "PID": "initializePID",
                "LiquidCrystal": "initializeLCD",
                "MAX31855": "initializeMAX31855"
            },
            "calling": [],
            "called": [
                "PID",
                "MAX31855",
                "LiquidCrystal"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_oven_08000bcc",
            "code": "\nvoid initializeOven_08000bcc(void)\n\n{\n  digitalWrite(DAT_20000064,0);\n  pinMode(DAT_20000064,1);\n  digitalWrite(DAT_20000004,0);\n  pinMode(DAT_20000004,1);\n  digitalWrite(DAT_20000060,0);\n  pinMode(DAT_20000060,1);\n  digitalWrite(DAT_20000004,1);\n  initialize_display_080013a4(&DAT_20000194,8,2,0);\n  createChar(&DAT_20000194,0,&DAT_20000008);\n  clear(&DAT_20000194);\n  perform_action_08005c96(&DAT_20000194,\"Reflow\");\n  setCursor(&DAT_20000194,0,1);\n  perform_action_08005c96(&DAT_20000194,\"Oven 1.2\");\n  digitalWrite(DAT_20000004,0);\n  delay(0x9c4);\n  clear(&DAT_20000194);\n  begin(&DAT_2000036c,0xe100,6);\n  digitalWrite(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = millis();\n  DAT_200001b4 = millis();\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_oven_08000bcc"
            },
            "calling": [
                "main"
            ],
            "called": [
                "begin",
                "setCursor",
                "createChar",
                "millis",
                "FUN_080013a4",
                "clear",
                "delay",
                "digitalWrite",
                "startForkserver",
                "FUN_08005c96",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "temperature_control_08000cd0",
            "code": "\nvoid temperatureControl_08000cd0(void)\n\n{\n  uint currentTime;\n  undefined4 outputPin;\n  int tempValue;\n  undefined4 tempValue_high;\n  undefined4 printFlag;\n  undefined4 printFlag_1;\n  undefined4 printFlag_2;\n  undefined8 thermoValue;\n  \n  currentTime = millis();\n  if (DAT_200001b4 < currentTime) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    thermoValue = readThermocouple(&DAT_2000024c,0);\n    tempValue_high = (undefined4)((ulonglong)thermoValue >> 0x20);\n    outputPin = (undefined4)thermoValue;\n    DAT_20000188 = outputPin;\n    DAT_2000018c = tempValue_high;\n    tempValue = __aeabi_dcmpeq(outputPin,tempValue_high,0,0x40c38800);\n    if (((tempValue != 0) || (tempValue = __aeabi_dcmpeq(outputPin,tempValue_high,0,0x40c38880), tempValue != 0)) ||\n       (tempValue = __aeabi_dcmpeq(outputPin,tempValue_high,0,0x40c38900), tempValue != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  currentTime = millis();\n  outputPin = DAT_20000060;\n  if (DAT_200001b0 < currentTime) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      tempValue = digitalRead(DAT_20000060);\n      digitalWrite(outputPin,tempValue == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      execute_print_or_function_08005d82(&DAT_2000036c,DAT_20000250,10);\n      perform_action_08005c96(&DAT_2000036c,&DAT_08007368);\n      print(&DAT_2000036c,printFlag,DAT_20000240,DAT_20000244,2);\n      perform_action_08005c96(&DAT_2000036c,&DAT_08007368);\n      print(&DAT_2000036c,printFlag_1,DAT_20000188,DAT_2000018c,2);\n      perform_action_08005c96(&DAT_2000036c,&DAT_08007368);\n      println(&DAT_2000036c,printFlag_2,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      digitalWrite(DAT_20000060,1);\n    }\n    clear(&DAT_20000194);\n    perform_action_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    setCursor(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      perform_action_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      print(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      send_data_0800134e(&DAT_20000194,0);\n      perform_action_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  tempValue_high = DAT_2000018c;\n  outputPin = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    tempValue = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (tempValue == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_sum_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = millis();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        thermoValue = __floatsidf(DAT_20000258);\n        SetOutputLimits(&DAT_200001c0,(int)((ulonglong)thermoValue >> 0x20),0,0,thermoValue);\n        SetSampleTime(&DAT_200001c0,1000);\n        SetMode(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    tempValue = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (tempValue != 0) {\n      thermoValue = millis();\n      DAT_20000254 = (int)thermoValue + 9000;\n      SetTunings(&DAT_200001c0,(int)((ulonglong)thermoValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    currentTime = millis();\n    if (DAT_20000254 < currentTime) {\n      tempValue = millis();\n      DAT_20000254 = tempValue + 9000;\n      thermoValue = __aeabi_dadd(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)thermoValue >> 0x20);\n      DAT_20000240 = (undefined4)thermoValue;\n      thermoValue = __aeabi_dcmpgt(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)thermoValue != 0) {\n        SetTunings(&DAT_200001c0,(int)((ulonglong)thermoValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    thermoValue = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)thermoValue != 0) {\n      SetTunings(&DAT_200001c0,(int)((ulonglong)thermoValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    tempValue = __aeabi_dcmple(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (tempValue != 0) {\n      tempValue = millis();\n      DAT_20000180 = tempValue + 1000;\n      digitalWrite(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    currentTime = millis();\n    if (DAT_20000180 < currentTime) {\n      digitalWrite(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    tempValue = __aeabi_dcmplt(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (tempValue != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    tempValue = __aeabi_dcmpeq(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((tempValue == 0) && (tempValue = __aeabi_dcmpeq(outputPin,tempValue_high,0,0x40c38880), tempValue == 0)) &&\n       (tempValue = __aeabi_dcmpeq(outputPin,tempValue_high,0,0x40c38900), tempValue == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    tempValue = analogRead(DAT_20000068);\n    if (tempValue == 0) {\n      tempValue = millis();\n      if (0x32 < (uint)(tempValue - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    tempValue = analogRead(DAT_20000068);\n    if (tempValue == 0) {\n      DAT_20000190 = millis();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (tempValue = analogRead(DAT_20000068), tempValue != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    tempValue = millis();\n    Compute(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(tempValue - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    thermoValue = __floatunsidf(tempValue - DAT_2000025c);\n    tempValue = __aeabi_dcmplt((int)thermoValue,(int)((ulonglong)thermoValue >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (tempValue == 0) {\n      digitalWrite(DAT_20000064,0);\n    }\n    else {\n      digitalWrite(DAT_20000064,1);\n    }\n  }\n  else {\n    digitalWrite(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "temperature_control_08000cd0",
                "uVar1": "currentTime",
                "uVar2": "outputPin",
                "iVar3": "tempValue",
                "uVar4": "tempValue_high",
                "extraout_r1": "printFlag",
                "extraout_r1_00": "printFlag_1",
                "extraout_r1_01": "printFlag_2",
                "uVar5": "thermoValue"
            },
            "calling": [
                "main"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__floatsidf",
                "digitalRead",
                "SetMode",
                "__aeabi_dcmpgt",
                "print",
                "FUN_08005d82",
                "Compute",
                "millis",
                "setCursor",
                "digitalWrite",
                "FUN_08005c96",
                "__aeabi_dcmpeq",
                "FUN_0800134e",
                "SetTunings",
                "println",
                "__aeabi_dcmpge",
                "analogRead",
                "readThermocouple",
                "__aeabi_dadd",
                "__aeabi_dcmple",
                "clear",
                "FUN_08005cd4",
                "SetOutputLimits",
                "SetSampleTime",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_params_08001294",
            "code": "\nvoid setParams_08001294(int baseAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(baseAddress + 0x18) = value1;\n  *(undefined *)(baseAddress + 0x19) = value2;\n  *(undefined *)(baseAddress + 0x1a) = value3;\n  *(undefined *)(baseAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_params_08001294",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "toggle_pin_state_080012a2",
            "code": "\nvoid togglePinState_080012a2(int pinNumber)\n\n{\n  digitalWrite(*(undefined *)(pinNumber + 10),0);\n  digitalWrite(*(undefined *)(pinNumber + 10),1);\n  digitalWrite(*(undefined *)(pinNumber + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "toggle_pin_state_080012a2",
                "param_1": "pinNumber"
            },
            "calling": [
                "write8bits",
                "write4bits"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "update_digital_outputs_080012c0",
            "code": "\nvoid updateDigitalOutputs_080012c0(int deviceAddress,int outputValue)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 4; index = index + 1) {\n    setOutputPin(*(undefined *)(deviceAddress + index + 0xb),outputValue >> (index & 0xff) & 1);\n  }\n  triggerPinPulse(deviceAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "update_digital_outputs_080012c0",
                "param_1": "deviceAddress",
                "param_2": "outputValue",
                "uVar1": "index",
                "digitalWrite": "setOutputPin",
                "pulseEnable": "triggerPinPulse"
            },
            "calling": [
                "FUN_080013a4",
                "send"
            ],
            "called": [
                "pulseEnable",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "write_data_bits_080012e8",
            "code": "\nvoid writeDataBits_080012e8(int baseAddress,int data)\n\n{\n  uint bitIndex;\n  \n  for (bitIndex = 0; (int)bitIndex < 8; bitIndex = bitIndex + 1) {\n    digitalWrite(*(undefined *)(baseAddress + bitIndex + 0xb),data >> (bitIndex & 0xff) & 1);\n  }\n  pulseEnable(baseAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "write_data_bits_080012e8",
                "param_1": "baseAddress",
                "param_2": "data",
                "uVar1": "bitIndex"
            },
            "calling": [
                "send"
            ],
            "called": [
                "pulseEnable",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "write_output_08001310",
            "code": "\nvoid write_output_08001310(int output_pin,uint data,undefined4 value_low,undefined4 value_high)\n\n{\n  digitalWrite(*(undefined *)(output_pin + 8),value_low,value_low,value_high,value_high);\n  if (*(char *)(output_pin + 9) != -1) {\n    digitalWrite(*(char *)(output_pin + 9),0);\n  }\n  if ((*(byte *)(output_pin + 0x13) & 0x10) == 0) {\n    write4bits(output_pin,data >> 4);\n    write4bits(output_pin,data);\n    return;\n  }\n  write8bits(output_pin,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "write_output_08001310",
                "param_1": "output_pin",
                "param_2": "data",
                "param_3": "value_low",
                "param_4": "value_high"
            },
            "calling": [
                "FUN_0800134e",
                "display",
                "setCursor",
                "createChar",
                "FUN_080013a4",
                "clear"
            ],
            "called": [
                "write8bits",
                "write4bits",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "send_data_0800134e",
            "code": "\nundefined4 send_data_0800134e(undefined4 data_socket,undefined4 data_buffer,undefined4 buffer_size,undefined4 flags)\n\n{\n  send(data_socket,data_buffer,1,flags,flags);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "send_data_0800134e",
                "param_1": "data_socket",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "param_4": "flags"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "send_data_0800135a",
            "code": "\nvoid send_data_0800135a(undefined4 socket,undefined4 param_2,undefined4 param_3,undefined4 buffer)\n\n{\n  send(socket,1,0,buffer,buffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "send_data_0800135a",
                "param_1": "socket",
                "param_4": "buffer"
            },
            "calling": [
                "setup",
                "FUN_080013a4",
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "send_with_offset_08001366",
            "code": "\nvoid send_with_offset_08001366(int socket,char buffer,uint offset,undefined4 param_4)\n\n{\n  char character;\n  \n  if (3 < offset) {\n    offset = 3;\n  }\n  if ((int)(uint)*(byte *)(socket + 0x17) <= (int)offset) {\n    offset = *(byte *)(socket + 0x17) - 1 & 0xff;\n  }\n  character = *(char *)(offset + socket + 0x18);\n  send(socket,buffer + character | 0x80,0,character,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "send_with_offset_08001366",
                "param_1": "socket",
                "param_2": "buffer",
                "param_3": "offset",
                "cVar1": "character"
            },
            "calling": [
                "setup",
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "set_flag_and_send_0800138e",
            "code": "\nvoid setFlagAndSend_0800138e(int dataPointer,undefined4 unusedParameter1,undefined4 unusedParameter2,undefined4 unusedParameter3)\n\n{\n  byte flagValue;\n  \n  flagValue = *(byte *)(dataPointer + 0x14);\n  *(byte *)(dataPointer + 0x14) = flagValue | 4;\n  send(dataPointer,flagValue | 0xc,0,unusedParameter3,unusedParameter3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "set_flag_and_send_0800138e",
                "param_1": "dataPointer",
                "param_2": "unusedParameter1",
                "param_3": "unusedParameter2",
                "param_4": "unusedParameter3",
                "bVar1": "flagValue"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "initialize_display_080013a4",
            "code": "\nvoid initializeDisplay_080013a4(int displayAddress,int offset1,int rowNumber,int flag)\n\n{\n  int offsetFlag;\n  int counter;\n  \n  if (1 < rowNumber) {\n    *(byte *)(displayAddress + 0x13) = *(byte *)(displayAddress + 0x13) | 8;\n  }\n  *(char *)(displayAddress + 0x17) = (char)rowNumber;\n  setRowOffsets(displayAddress,0,0x40,offset1,offset1 + 0x40);\n  if ((flag != 0) && (rowNumber == 1)) {\n    *(byte *)(displayAddress + 0x13) = *(byte *)(displayAddress + 0x13) | 4;\n  }\n  pinMode(*(undefined *)(displayAddress + 8),1);\n  if (*(char *)(displayAddress + 9) != -1) {\n    pinMode(*(char *)(displayAddress + 9),1);\n  }\n  pinMode(*(undefined *)(displayAddress + 10),1);\n  counter = 0;\n  while( true ) {\n    if ((*(byte *)(displayAddress + 0x13) & 0x10) == 0) {\n      offsetFlag = 4;\n    }\n    else {\n      offsetFlag = 8;\n    }\n    if (offsetFlag <= counter) break;\n    pinMode(*(undefined *)(displayAddress + counter + 0xb),1);\n    counter = counter + 1;\n  }\n  digitalWrite(*(undefined *)(displayAddress + 8),0);\n  digitalWrite(*(undefined *)(displayAddress + 10),0);\n  if (*(char *)(displayAddress + 9) != -1) {\n    digitalWrite(*(char *)(displayAddress + 9),0);\n  }\n  if ((*(byte *)(displayAddress + 0x13) & 0x10) == 0) {\n    write4bits(displayAddress,3);\n    write4bits(displayAddress,3);\n    write4bits(displayAddress,3);\n    write4bits(displayAddress,2);\n  }\n  else {\n    send(displayAddress,*(byte *)(displayAddress + 0x13) | 0x20,0);\n    send(displayAddress,*(byte *)(displayAddress + 0x13) | 0x20,0);\n    send(displayAddress,*(byte *)(displayAddress + 0x13) | 0x20,0);\n  }\n  send(displayAddress,*(byte *)(displayAddress + 0x13) | 0x20,0);\n  *(undefined *)(displayAddress + 0x14) = 4;\n  display(displayAddress);\n  clear(displayAddress);\n  *(undefined *)(displayAddress + 0x15) = 2;\n  send(displayAddress,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "initialize_display_080013a4",
                "param_1": "displayAddress",
                "param_2": "offset1",
                "param_3": "rowNumber",
                "param_4": "flag",
                "iVar1": "offsetFlag",
                "iVar2": "counter"
            },
            "calling": [
                "setup",
                "FUN_080014ba"
            ],
            "called": [
                "display",
                "clear",
                "write4bits",
                "setRowOffsets",
                "digitalWrite",
                "send",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "initialize_display_080014ba",
            "code": "\nvoid initialize_display_080014ba(int display_address,int condition,undefined address,undefined4 value1,undefined undefined_value1,\n                 undefined undefined_value2,undefined undefined_value3,undefined undefined_value4,undefined undefined_value5,\n                 undefined undefined_value6,undefined undefined_value7,undefined undefined_value8,undefined undefined_value9)\n\n{\n  *(undefined *)(display_address + 8) = address;\n  *(char *)(display_address + 9) = (char)value1;\n  *(undefined *)(display_address + 10) = undefined_value1;\n  *(undefined *)(display_address + 0xb) = undefined_value2;\n  *(undefined *)(display_address + 0xc) = undefined_value3;\n  *(undefined *)(display_address + 0xd) = undefined_value4;\n  *(undefined *)(display_address + 0xe) = undefined_value5;\n  *(undefined *)(display_address + 0xf) = undefined_value6;\n  *(undefined *)(display_address + 0x10) = undefined_value7;\n  *(undefined *)(display_address + 0x11) = undefined_value8;\n  *(undefined *)(display_address + 0x12) = undefined_value9;\n  if (condition == 0) {\n    *(undefined *)(display_address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(display_address + 0x13) = 0;\n  }\n  initialize_display_080014ba_080013a4(display_address,0x10,1,0,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "initialize_display_080014ba",
                "param_1": "display_address",
                "param_2": "condition",
                "param_3": "address",
                "param_4": "value1",
                "param_5": "undefined_value1",
                "param_6": "undefined_value2",
                "param_7": "undefined_value3",
                "param_8": "undefined_value4",
                "param_9": "undefined_value5",
                "param_10": "undefined_value6",
                "param_11": "undefined_value7",
                "param_12": "undefined_value8",
                "param_13": "undefined_value9"
            },
            "calling": [
                "LiquidCrystal"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_and_setup_display_08001510",
            "code": "\nundefined4 *\ninitialize_and_setup_display_08001510(undefined4 *display_array,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined param5,undefined param6,undefined param7)\n\n{\n  display_array[1] = 0;\n  *display_array = &PTR_send_data_0800134e_1_080073f8;\n  initialize_display_080014ba(display_array,1,param2,0xff,param3,param4,param5,param6,param7,0,0,0,0);\n  return display_array;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_and_setup_display_08001510",
                "param_1": "display_array",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "send_data_08001550",
            "code": "\nvoid send_data_08001550(undefined4 *data_buffer,uint data_length,int source_address)\n\n{\n  int index;\n  \n  send(data_buffer,(data_length & 7) << 3 | 0x40,0);\n  for (index = 0; index < 8; index = index + 1) {\n    (**(code **)*data_buffer)(data_buffer,*(undefined *)(source_address + index));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "send_data_08001550",
                "param_1": "data_buffer",
                "param_2": "data_length",
                "param_3": "source_address",
                "iVar1": "index"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_io_0800157c",
            "code": "\nundefined * initializeIO_0800157c(undefined *io_pins,undefined4 input_pin,undefined output_pin1,undefined output_pin2)\n\n{\n  *io_pins = (char)input_pin;\n  io_pins[1] = output_pin1;\n  io_pins[2] = output_pin2;\n  setMode(input_pin,0);\n  setMode(io_pins[1],1);\n  setMode(io_pins[2],1);\n  writeValue(io_pins[1],1);\n  writeValue(io_pins[2],0);\n  return io_pins;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_io_0800157c",
                "param_1": "io_pins",
                "param_2": "input_pin",
                "param_3": "output_pin1",
                "param_4": "output_pin2",
                "pinMode": "setMode",
                "digitalWrite": "writeValue"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "read_bit_sequence_080015b2",
            "code": "\nuint read_bit_sequence_080015b2(undefined *pin_array)\n\n{\n  int read_value;\n  uint bit_position;\n  uint result;\n  \n  digitalWrite(pin_array[1],0);\n  result = 0;\n  for (bit_position = 0x1f; -1 < (int)bit_position; bit_position = bit_position - 1) {\n    digitalWrite(pin_array[2],1);\n    read_value = digitalRead(*pin_array);\n    if (read_value != 0) {\n      result = result | 1 << (bit_position & 0xff);\n    }\n    digitalWrite(pin_array[2],0);\n  }\n  digitalWrite(pin_array[1],1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "read_bit_sequence_080015b2",
                "param_1": "pin_array",
                "iVar1": "read_value",
                "uVar2": "bit_position",
                "uVar3": "result"
            },
            "calling": [
                "readThermocouple"
            ],
            "called": [
                "digitalRead",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_result_080015f8",
            "code": "\nundefined8 calculateResult_080015f8(undefined4 input_flag,int calc_mode,undefined4 param_3,undefined4 param_4)\n\n{\n  uint data;\n  undefined8 result;\n  \n  data = readData();\n  if ((data & 0x10000) == 0) {\n    data = data >> 0x12;\n    result = __floatunsidf(data & 0x1fff);\n    if ((data & 0x2000) != 0) {\n      result = __floatunsidf(~data & 0x1fff);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,param_4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (calc_mode == 1) {\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    data = data & 7;\n    if (data == 2) {\n      return 0x40c3888000000000;\n    }\n    if (data == 4) {\n      return 0x40c3890000000000;\n    }\n    if (data != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_result_080015f8",
                "param_1": "input_flag",
                "param_2": "calc_mode",
                "uVar1": "data",
                "uVar2": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "readData",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "calculate_c_var_080016b4",
            "code": "\nchar calculateCVar_080016b4(int input)\n\n{\n  char result;\n  int currentTime;\n  int comparisonResult;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  undefined4 tempVar7;\n  undefined4 tempVar8;\n  undefined4 tempVar9;\n  undefined4 tempVar10;\n  char result1;\n  undefined4 tempVar12;\n  undefined4 tempVar13;\n  undefined4 tempVar14;\n  undefined8 tempVar15;\n  undefined8 tempVar16;\n  undefined8 tempVar17;\n  undefined8 tempVar18;\n  undefined4 tempLocalVar1;\n  undefined4 tempLocalVar2;\n  \n  result1 = *(char *)(input + 0x70);\n  if (result1 != '\\0') {\n    currentTime = millis();\n    if ((uint)(currentTime - *(int *)(input + 0x44)) < *(uint *)(input + 0x58)) {\n      result1 = '\\0';\n    }\n    else {\n      tempVar5 = **(undefined4 **)(input + 0x38);\n      tempVar8 = (*(undefined4 **)(input + 0x38))[1];\n      tempVar15 = __subdf3(**(undefined4 **)(input + 0x40),(*(undefined4 **)(input + 0x40))[1]);\n      tempVar14 = (undefined4)((ulonglong)tempVar15 >> 0x20);\n      tempVar16 = __subdf3(tempVar5,tempVar8,*(undefined4 *)(input + 0x50),*(undefined4 *)(input + 0x54))\n      ;\n      tempVar4 = (undefined4)((ulonglong)tempVar16 >> 0x20);\n      tempVar17 = __muldf3((int)tempVar15,tempVar14,*(undefined4 *)(input + 0x20),\n                        *(undefined4 *)(input + 0x24));\n      tempVar17 = __aeabi_dadd((int)tempVar17,(int)((ulonglong)tempVar17 >> 0x20),\n                            *(undefined4 *)(input + 0x48),*(undefined4 *)(input + 0x4c));\n      *(undefined8 *)(input + 0x48) = tempVar17;\n      result = *(char *)(input + 0x71);\n      if (result == '\\0') {\n        tempVar18 = __muldf3((int)tempVar16,tempVar4,*(undefined4 *)(input + 0x18),\n                          *(undefined4 *)(input + 0x1c));\n        tempVar17 = __subdf3((int)tempVar17,(int)((ulonglong)tempVar17 >> 0x20),(int)tempVar18,\n                          (int)((ulonglong)tempVar18 >> 0x20));\n        *(undefined8 *)(input + 0x48) = tempVar17;\n      }\n      tempVar6 = *(undefined4 *)(input + 0x48);\n      tempVar9 = *(undefined4 *)(input + 0x4c);\n      tempVar12 = *(undefined4 *)(undefined8 *)(input + 0x68);\n      tempVar13 = *(undefined4 *)(input + 0x6c);\n      tempVar17 = *(undefined8 *)(input + 0x68);\n      comparisonResult = __aeabi_dcmpgt(tempVar6,tempVar9,tempVar12,tempVar13);\n      if (comparisonResult == 0) {\n        tempVar7 = *(undefined4 *)(input + 0x60);\n        tempVar10 = *(undefined4 *)(input + 100);\n        comparisonResult = __aeabi_dcmplt(tempVar6,tempVar9);\n        if (comparisonResult != 0) {\n          *(undefined4 *)(input + 0x48) = tempVar7;\n          *(undefined4 *)(input + 0x4c) = tempVar10;\n        }\n      }\n      else {\n        *(undefined4 *)(input + 0x48) = tempVar12;\n        *(undefined4 *)(input + 0x4c) = tempVar13;\n      }\n      if (result == '\\0') {\n        tempVar15 = 0;\n      }\n      else {\n        tempVar15 = __muldf3((int)tempVar15,tempVar14,*(undefined4 *)(input + 0x18),\n                          *(undefined4 *)(input + 0x1c));\n      }\n      tempLocalVar2 = (undefined4)((ulonglong)tempVar15 >> 0x20);\n      tempLocalVar1 = (undefined4)tempVar15;\n      tempVar14 = *(undefined4 *)(input + 0x48);\n      tempVar6 = *(undefined4 *)(input + 0x4c);\n      tempVar15 = __muldf3((int)tempVar16,tempVar4,*(undefined4 *)(input + 0x28),\n                        *(undefined4 *)(input + 0x2c));\n      tempVar15 = __subdf3(tempVar14,tempVar6,(int)tempVar15,(int)((ulonglong)tempVar15 >> 0x20));\n      tempVar15 = __aeabi_dadd(tempLocalVar1,tempLocalVar2,(int)tempVar15,(int)((ulonglong)tempVar15 >> 0x20));\n      tempVar14 = (undefined4)((ulonglong)tempVar15 >> 0x20);\n      comparisonResult = __aeabi_dcmplt(tempVar12,tempVar13,(int)tempVar15,tempVar14);\n      if (comparisonResult == 0) {\n        tempVar17 = *(undefined8 *)(input + 0x60);\n        comparisonResult = __aeabi_dcmplt((int)tempVar15,tempVar14,*(undefined4 *)(undefined8 *)(input + 0x60),\n                               *(undefined4 *)(input + 100));\n        if (comparisonResult == 0) {\n          tempVar17 = tempVar15;\n        }\n      }\n      **(undefined8 **)(input + 0x3c) = tempVar17;\n      *(undefined4 *)(input + 0x50) = tempVar5;\n      *(undefined4 *)(input + 0x54) = tempVar8;\n      *(int *)(input + 0x44) = currentTime;\n    }\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "calculate_c_var_080016b4",
                "param_1": "input",
                "cVar1": "result",
                "iVar2": "currentTime",
                "iVar3": "comparisonResult",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar12": "tempVar12",
                "uVar13": "tempVar13",
                "uVar14": "tempVar14",
                "uVar15": "tempVar15",
                "uVar16": "tempVar16",
                "uVar17": "tempVar17",
                "uVar18": "tempVar18",
                "local_38": "tempLocalVar1",
                "uStack_34": "tempLocalVar2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3",
                "millis",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "process_data_08001814",
            "code": "\nvoid processData_08001814(undefined4 *output,undefined4 input1,undefined4 value1,undefined4 value2,\n                 undefined4 value3,undefined4 value4,undefined4 value5,undefined4 value6,\n                 int flag)\n\n{\n  int comparisonResult;\n  undefined4 quotientHigh;\n  undefined flagValue;\n  bool isNotFlag;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  \n  comparisonResult = __aeabi_dcmplt(value1,value2,0,0);\n  if (((comparisonResult == 0) && (comparisonResult = __aeabi_dcmplt(value3,value4,0,0), comparisonResult == 0)) &&\n     (comparisonResult = __aeabi_dcmplt(value5,value6,0,0), comparisonResult == 0)) {\n    output[0xd] = flag;\n    isNotFlag = flag != 1;\n    if (isNotFlag) {\n      flag = 0;\n    }\n    flagValue = (undefined)flag;\n    if (!isNotFlag) {\n      flagValue = 1;\n    }\n    *(undefined *)((int)output + 0x71) = flagValue;\n    *output = value1;\n    output[1] = value2;\n    output[2] = value3;\n    output[3] = value4;\n    output[4] = value5;\n    output[5] = value6;\n    temp1 = __floatunsidf(output[0x16]);\n    temp1 = __divdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x408f4000);\n    quotientHigh = (undefined4)((ulonglong)temp1 >> 0x20);\n    output[6] = value1;\n    output[7] = value2;\n    temp2 = __muldf3(value3,value4,(int)temp1,quotientHigh);\n    *(undefined8 *)(output + 8) = temp2;\n    temp1 = __divdf3(value5,value6,(int)temp1,quotientHigh);\n    *(undefined8 *)(output + 10) = temp1;\n    if (output[0xc] == 1) {\n      temp3 = __subdf3(0,0,value1,value2);\n      *(undefined8 *)(output + 6) = temp3;\n      temp2 = __subdf3(0,0,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n      *(undefined8 *)(output + 8) = temp2;\n      temp1 = __subdf3(0,0,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      *(undefined8 *)(output + 10) = temp1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "process_data_08001814",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "flag",
                "iVar1": "comparisonResult",
                "uVar2": "quotientHigh",
                "uVar3": "flagValue",
                "bVar4": "isNotFlag",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3"
            },
            "calling": [
                "SetTunings",
                "FUN_08001ab0"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__muldf3",
                "__subdf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "process_data_080018f8",
            "code": "\nvoid process_data_080018f8(void)\n\n{\n  process_data_080018f8_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "process_data_080018f8",
                "process_data_08001814": "process_data_helper"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "update_parameter_08001918",
            "code": "\nvoid updateParameter_08001918(int param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 divParam2;\n  undefined8 floatParam2;\n  undefined8 floatParam1;\n  \n  if (0 < param2) {\n    floatParam2 = __floatsidf(param2);\n    floatParam1 = __floatunsidf(*(undefined4 *)(param1 + 0x58));\n    floatParam2 = __divdf3(divParam1,(int)((ulonglong)floatParam2 >> 0x20),integerPart4,\n                     (int)((ulonglong)floatParam1 >> 0x20),param4);\n    divParam2 = (undefined4)((ulonglong)floatParam2 >> 0x20);\n    floatParam1 = __muldf3(divParam1,divParam2,*(undefined4 *)(param1 + 0x20),\n                     *(undefined4 *)(param1 + 0x24));\n    *(undefined8 *)(param1 + 0x20) = floatParam1;\n    floatParam2 = __divdf3(*(undefined4 *)(param1 + 0x28),*(undefined4 *)(param1 + 0x2c),divParam1,\n                     divParam2);\n    *(undefined8 *)(param1 + 0x28) = floatParam2;\n    *(int *)(param1 + 0x58) = param2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "update_parameter_08001918",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "divParam2",
                "uVar2": "floatParam2",
                "uVar3": "floatParam1",
                "(int)uVar2": "divParam1",
                "(int)uVar3": "integerPart4"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__muldf3",
                "__floatsidf",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_min_max_values_08001960",
            "code": "\nvoid updateMinMaxValues_08001960(int object,undefined4 unused,undefined4 newValue1,undefined4 newValue2,\n                 undefined4 currentMinValue,undefined4 currentMaxValue)\n\n{\n  int comparisonResult;\n  undefined4 *pointerToMinMaxValues;\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  undefined4 tempValue3;\n  undefined4 tempValue4;\n  \n  comparisonResult = __aeabi_dcmpge(newValue1,newValue2,currentMinValue,currentMaxValue,newValue2);\n  if (comparisonResult == 0) {\n    *(undefined4 *)(object + 0x60) = newValue1;\n    *(undefined4 *)(object + 100) = newValue2;\n    *(undefined4 *)(object + 0x68) = currentMinValue;\n    *(undefined4 *)(object + 0x6c) = currentMaxValue;\n    if (*(char *)(object + 0x70) != '\\0') {\n      pointerToMinMaxValues = *(undefined4 **)(object + 0x3c);\n      tempValue1 = *pointerToMinMaxValues;\n      tempValue3 = pointerToMinMaxValues[1];\n      comparisonResult = __aeabi_dcmplt(currentMinValue,currentMaxValue,tempValue1,tempValue3);\n      if (comparisonResult == 0) {\n        comparisonResult = __aeabi_dcmpgt(newValue1,newValue2,tempValue1,tempValue3);\n        if (comparisonResult != 0) {\n          *pointerToMinMaxValues = newValue1;\n          pointerToMinMaxValues[1] = newValue2;\n        }\n      }\n      else {\n        *pointerToMinMaxValues = currentMinValue;\n        pointerToMinMaxValues[1] = currentMaxValue;\n      }\n      tempValue1 = *(undefined4 *)(object + 0x48);\n      tempValue3 = *(undefined4 *)(object + 0x4c);\n      tempValue2 = *(undefined4 *)(object + 0x68);\n      tempValue4 = *(undefined4 *)(object + 0x6c);\n      comparisonResult = __aeabi_dcmpgt(tempValue1,tempValue3,tempValue2,tempValue4);\n      if (comparisonResult != 0) {\n        *(undefined4 *)(object + 0x48) = tempValue2;\n        *(undefined4 *)(object + 0x4c) = tempValue4;\n        return;\n      }\n      tempValue2 = *(undefined4 *)(object + 0x60);\n      tempValue4 = *(undefined4 *)(object + 100);\n      comparisonResult = __aeabi_dcmplt(tempValue1,tempValue3,tempValue2,tempValue4);\n      if (comparisonResult != 0) {\n        *(undefined4 *)(object + 0x48) = tempValue2;\n        *(undefined4 *)(object + 0x4c) = tempValue4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_min_max_values_08001960",
                "param_1": "object",
                "param_2": "unused",
                "param_3": "newValue1",
                "param_4": "newValue2",
                "param_5": "currentMinValue",
                "param_6": "currentMaxValue",
                "iVar1": "comparisonResult",
                "puVar2": "pointerToMinMaxValues",
                "uVar3": "tempValue1",
                "uVar4": "tempValue2",
                "uVar5": "tempValue3",
                "uVar6": "tempValue4"
            },
            "calling": [
                "FUN_08001ab0",
                "loop"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "update_min_max_values_080019f6",
            "code": "\nvoid updateMinMaxValues_080019f6(int functionParam)\n\n{\n  int comparisonResult;\n  undefined4 tempValue1;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 tempValue2;\n  \n  value1 = **(undefined4 **)(functionParam + 0x3c);\n  value2 = (*(undefined4 **)(functionParam + 0x3c))[1];\n  *(undefined4 *)(functionParam + 0x48) = value1;\n  *(undefined4 *)(functionParam + 0x4c) = value2;\n  tempValue1 = (*(undefined4 **)(functionParam + 0x38))[1];\n  *(undefined4 *)(functionParam + 0x50) = **(undefined4 **)(functionParam + 0x38);\n  *(undefined4 *)(functionParam + 0x54) = tempValue1;\n  tempValue1 = *(undefined4 *)(functionParam + 0x68);\n  tempValue2 = *(undefined4 *)(functionParam + 0x6c);\n  comparisonResult = __aeabi_dcmpgt(value1,value2,tempValue1,tempValue2);\n  if (comparisonResult == 0) {\n    tempValue1 = *(undefined4 *)(functionParam + 0x60);\n    tempValue2 = *(undefined4 *)(functionParam + 100);\n    comparisonResult = __aeabi_dcmplt(value1,value2,tempValue1,tempValue2);\n    if (comparisonResult != 0) {\n      *(undefined4 *)(functionParam + 0x48) = tempValue1;\n      *(undefined4 *)(functionParam + 0x4c) = tempValue2;\n    }\n    return;\n  }\n  *(undefined4 *)(functionParam + 0x48) = tempValue1;\n  *(undefined4 *)(functionParam + 0x4c) = tempValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "update_min_max_values_080019f6",
                "param_1": "functionParam",
                "iVar1": "comparisonResult",
                "uVar2": "tempValue1",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "tempValue2"
            },
            "calling": [
                "SetMode"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_param_08001a44",
            "code": "\nvoid updateParam_08001a44(int ptr,int value)\n\n{\n  undefined newValue;\n  \n  if (value == 1) {\n    newValue = 1;\n    if (*(char *)(ptr + 0x70) == '\\0') {\n      Initialize();\n    }\n  }\n  else {\n    newValue = 0;\n  }\n  *(undefined *)(ptr + 0x70) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_param_08001a44",
                "param_1": "ptr",
                "param_2": "value",
                "uVar1": "newValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "Initialize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_params_08001a66",
            "code": "\nvoid updateParams_08001a66(int structPtr,int newParam,undefined4 param3,undefined4 param4)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(structPtr + 0x70) != '\\0') && (*(int *)(structPtr + 0x30) != newParam)) {\n    result = __subdf3(0,0,*(undefined4 *)(structPtr + 0x18),*(undefined4 *)(structPtr + 0x1c),param4);\n    *(undefined8 *)(structPtr + 0x18) = result;\n    result = __subdf3(0,0,*(undefined4 *)(structPtr + 0x20),*(undefined4 *)(structPtr + 0x24));\n    *(undefined8 *)(structPtr + 0x20) = result;\n    result = __subdf3(0,0,*(undefined4 *)(structPtr + 0x28),*(undefined4 *)(structPtr + 0x2c));\n    *(undefined8 *)(structPtr + 0x28) = result;\n  }\n  *(int *)(structPtr + 0x30) = newParam;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_params_08001a66",
                "param_1": "structPtr",
                "param_2": "newParam",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_controller_08001ab0",
            "code": "\nint initializeController_08001ab0(int controller,undefined4 param1,undefined4 param2,undefined4 param3,\n                undefined4 param4,undefined4 param5,undefined4 param6,undefined4 param7,\n                undefined4 param8,undefined4 param9,undefined4 param10,undefined4 param11)\n\n{\n  int currentTime;\n  undefined4 extraOutput;\n  \n  *(undefined4 *)(controller + 0x3c) = param2;\n  *(undefined4 *)(controller + 0x38) = param1;\n  *(undefined4 *)(controller + 0x40) = param3;\n  *(undefined *)(controller + 0x70) = 0;\n  setOutputLimits(controller,param1,0,0,0,0x406fe000);\n  *(undefined4 *)(controller + 0x58) = 100;\n  setControllerDirection(controller,param11);\n  processData(controller,extraOutput,param4,param5,param6,param7,param8,param9,param10);\n  currentTime = getCurrentTime();\n  *(int *)(controller + 0x44) = currentTime - *(int *)(controller + 0x58);\n  return controller;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_controller_08001ab0",
                "param_1": "controller",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "param8",
                "param_10": "param9",
                "param_11": "param10",
                "param_12": "param11",
                "iVar1": "currentTime",
                "extraout_r1": "extraOutput",
                "SetOutputLimits": "setOutputLimits",
                "SetControllerDirection": "setControllerDirection",
                "process_data_08001814": "processData",
                "millis": "getCurrentTime"
            },
            "calling": [
                "PID"
            ],
            "called": [
                "millis",
                "SetOutputLimits",
                "SetControllerDirection",
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_param_08001b18",
            "code": "\nundefined4 initialize_and_return_param_08001b18(undefined4 input_value)\n\n{\n  initialize_controller_08001ab0();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_param_08001b18",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_system_08001b48",
            "code": "\nvoid initializeSystem_08001b48(void)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined4 oscillatorConfig [2];\n  undefined4 clockConfig;\n  undefined4 clockConfigStruct;\n  undefined4 clockSource;\n  undefined4 swpllConfig;\n  undefined4 ahbConfig;\n  undefined4 apb1Config;\n  undefined4 hseConfig [4];\n  undefined4 sysTickReload;\n  undefined4 sysTickPriority;\n  undefined4 mpllConfig;\n  undefined4 flashConfig;\n  undefined4 sysTickClockSource;\n  \n  hseConfig[0] = 2;\n  sysTickReload = 1;\n  sysTickPriority = 0x10;\n  mpllConfig = 2;\n  flashConfig = 0;\n  sysTickClockSource = 0x380000;\n  iVar1 = HAL_RCC_OscConfig(hseConfig);\n  if (iVar1 != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  clockConfigStruct = 0xf;\n  clockSource = 2;\n  swpllConfig = 0;\n  ahbConfig = 0x400;\n  apb1Config = 0;\n  iVar1 = HAL_RCC_ClockConfig(&clockConfigStruct);\n  if (iVar1 != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  oscillatorConfig[0] = 2;\n  clockConfig = 0x8000;\n  iVar1 = HAL_RCCEx_PeriphCLKConfig(oscillatorConfig);\n  if (iVar1 != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  uVar2 = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(uVar2 / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_system_08001b48",
                "local_54": "oscillatorConfig",
                "local_4c": "clockConfig",
                "local_44": "clockConfigStruct",
                "local_40": "clockSource",
                "local_3c": "swpllConfig",
                "local_38": "ahbConfig",
                "local_34": "apb1Config",
                "local_30": "hseConfig",
                "local_20": "sysTickReload",
                "local_1c": "sysTickPriority",
                "local_14": "mpllConfig",
                "local_10": "flashConfig",
                "local_c": "sysTickClockSource"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_Config",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCCEx_PeriphCLKConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001be8": {
            "entrypoint": "0x08001be8",
            "current_name": "initialize_system_08001be8",
            "code": "\nvoid initializeSystem_08001be8(void)\n\n{\n  int counter;\n  undefined4 *pointer;\n  code *jumpTable;\n  \n  for (counter = 0; (undefined *)(counter + 0x20000000) < &DAT_2000015c; counter = counter + 4) {\n    *(undefined4 *)(counter + 0x20000000) = *(undefined4 *)(counter + 0x8007970);\n  }\n  for (pointer = &DAT_20000160; pointer < &DAT_200006a8; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x8001c1a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "counter",
                "puVar2": "pointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_hardware_configuration_08001c32",
            "code": "\nvoid initializeHardwareConfiguration_08001c32(void)\n\n{\n  hw_config_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_hardware_configuration_08001c32"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "configure_sys_tick_08001c3c",
            "code": "\nundefined4 configureSysTick_08001c3c(uint priorityLevel)\n\n{\n  int configResult;\n  \n  configResult = HAL_SYSTICK_Config(DAT_20000084 / (1000 / DAT_20000078));\n  if (configResult != 0) {\n    return 1;\n  }\n  if (0xf < priorityLevel) {\n    return 1;\n  }\n  HAL_NVIC_SetPriority(0xffffffff,priorityLevel,0);\n  DAT_2000007c = priorityLevel;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "configure_sys_tick_08001c3c",
                "param_1": "priorityLevel",
                "iVar1": "configResult"
            },
            "calling": [
                "HAL_Init",
                "FUN_08003afa"
            ],
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_system_08001c88",
            "code": "\n\n\nundefined4 initializeSystem_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setInterruptPriorityGrouping(3);\n  initializeTick(0xf);\n  initializePeripheral();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_system_08001c88",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializePeripheral"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_MspInit",
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "addition_and_update_08001cac",
            "code": "\nvoid additionAndUpdate_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "addition_and_update_08001cac"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_global_value_08001cc4",
            "code": "\nundefined4 get_global_value_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_global_value_08001cc4"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "ADC_Enable",
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start",
                "GetCurrentMilli",
                "FUN_08003afa",
                "UART_WaitOnFlagUntilTimeout",
                "ADC_ConversionStop_Disable",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_RCCEx_PeriphCLKConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "calculate_timeout_08001cd0",
            "code": "\nundefined4 calculateTimeout_08001cd0(uint **parameters,uint timeout)\n\n{\n  int startTime;\n  uint periphFreq;\n  int comparisonValue;\n  undefined4 result;\n  uint *data;\n  uint calculatedTimeout;\n  uint increment;\n  \n  increment = 0;\n  startTime = HAL_GetTick();\n  calculatedTimeout = DAT_20000084;\n  data = *parameters;\n  if ((data[2] & 0x100) == 0) {\n    if (((data[1] & 0x100) == 0) && ((data[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**parameters & 2) != 0) goto LAB_08001de2;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (comparisonValue = HAL_GetTick(), (uint)(comparisonValue - startTime) <= timeout))));\n      parameters[10] = (uint *)((uint)parameters[10] | 4);\n      *(undefined *)(parameters + 9) = 0;\n      result = 3;\n    }\n    else {\n      periphFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n      data = *parameters;\n      if (((data[4] & 0x24924924) == 0) && ((data[3] & 0x924924) == 0)) {\n        if ((data[4] & 0x12492492) == 0) {\n          if ((data[3] & 0x492492) == 0) {\n            comparisonValue = 0x14;\n          }\n          else {\n            comparisonValue = 0x29;\n          }\n        }\n        else {\n          comparisonValue = 0x29;\n        }\n      }\n      else if (((data[4] & 0x12492492) == 0) && ((data[3] & 0x492492) == 0)) {\n        comparisonValue = 0x54;\n      }\n      else if ((data[4] & 0x249249) == 0) {\n        if ((data[3] & 0x249249) == 0) {\n          comparisonValue = 0x54;\n        }\n        else {\n          comparisonValue = 0xfc;\n        }\n      }\n      else {\n        comparisonValue = 0xfc;\n      }\n      calculatedTimeout = (calculatedTimeout / periphFreq) * comparisonValue;\n      for (; increment <= calculatedTimeout && calculatedTimeout - increment != 0; increment = increment + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (comparisonValue = HAL_GetTick(), timeout < (uint)(comparisonValue - startTime))))) {\n          parameters[10] = (uint *)((uint)parameters[10] | 4);\n          *(undefined *)(parameters + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **parameters = 0xffffffed;\n      parameters[10] = (uint *)((uint)parameters[10] | 0x200);\n      if (((*parameters)[2] & 0xe0000) == 0xe0000) {\n        if (parameters[3] == (uint *)0x0) {\n          parameters[10] = (uint *)((uint)parameters[10] & 0xfffffeff);\n          if (((uint)parameters[10] & 0x1000) == 0) {\n            parameters[10] = (uint *)((uint)parameters[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    parameters[10] = (uint *)((uint)parameters[10] | 0x20);\n    *(undefined *)(parameters + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "calculate_timeout_08001cd0",
                "param_1": "parameters",
                "param_2": "timeout",
                "iVar1": "startTime",
                "uVar2": "periphFreq",
                "iVar3": "comparisonValue",
                "uVar4": "result",
                "puVar5": "data",
                "uVar6": "calculatedTimeout",
                "local_1c": "increment"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_value_08001e40",
            "code": "\nundefined4 getOffsetValue_08001e40(int *ptr)\n\n{\n  return *(undefined4 *)(*ptr + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "ptr"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_configuration_08001e48",
            "code": "\nundefined4 updateConfiguration_08001e48(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 result;\n  uint index;\n  int counter;\n  \n  if (*(char *)(configPtr + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 9) = 1;\n    index = dataPtr[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*configPtr + 0x34) =\n           *dataPtr << (index & 0xff) | *(uint *)(*configPtr + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*configPtr + 0x30) =\n           *dataPtr << (index & 0xff) | *(uint *)(*configPtr + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*configPtr + 0x2c) =\n           *dataPtr << (index & 0xff) | *(uint *)(*configPtr + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *dataPtr;\n    if (index < 10) {\n      *(uint *)(*configPtr + 0x10) =\n           dataPtr[2] << (index * 3 & 0xff) |\n           *(uint *)(*configPtr + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*configPtr + 0xc) =\n           dataPtr[2] << (index & 0xff) | *(uint *)(*configPtr + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*dataPtr - 0x10 < 2) {\n      if (*configPtr == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*dataPtr == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        configPtr[10] = configPtr[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(configPtr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_configuration_08001e48",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "result",
                "uVar2": "index",
                "local_c": "counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_pointer_value_08001f80",
            "code": "\nundefined4 getPointerValue_08001f80(int ptr)\n\n{\n  return *(undefined4 *)(ptr + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_pointer_value_08001f80",
                "param_1": "ptr"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "initialize_device_08001f84",
            "code": "\nundefined4 initializeDevice_08001f84(int *deviceState,undefined4 param)\n\n{\n  int currentTime;\n  undefined4 result;\n  int deviceAddress;\n  uint counter;\n  \n  deviceAddress = *deviceState;\n  if ((*(uint *)(deviceAddress + 8) & 1) == 0) {\n    *(uint *)(deviceAddress + 8) = *(uint *)(deviceAddress + 8) | 1;\n    for (counter = DAT_20000084 / 1000000; counter != 0; counter = counter - 1) {\n    }\n    deviceAddress = HAL_GetTick(deviceState,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*deviceState + 8) & 1) != 0) {\n        return 0;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - deviceAddress) < 3);\n    deviceState[10] = deviceState[10] | 0x10;\n    deviceState[0xb] = deviceState[0xb] | 1;\n    *(undefined *)(deviceState + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "initialize_device_08001f84",
                "param_1": "deviceState",
                "param_2": "param",
                "iVar1": "currentTime",
                "iVar3": "deviceAddress",
                "uVar2": "result",
                "local_14": "counter"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "enable_adc_08002004",
            "code": "\n\n\nint enable_adc_08002004(int *parameters)\n\n{\n  int adc_result;\n  undefined4 *data_ptr;\n  int value;\n  \n  if (*(char *)(parameters + 9) != '\\x01') {\n    *(undefined *)(parameters + 9) = 1;\n    adc_result = enable_adc_08002004_function;\n    if (adc_result == 0) {\n      settings = settings & 0xfffffcfeU | 0x100;\n      data_ptr = (undefined4 *)*parameters;\n      if ((data_ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        settings = settings | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          settings = settings & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        settings = settings & 0xffefffff;\n        if ((data_ptr[1] & 0x400) != 0) {\n          settings = settings & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((settings & 0x1000U) == 0) {\n        flag_value = 0;\n      }\n      else {\n        flag_value = flag_value & 0xfffffff9;\n      }\n      *(undefined *)(parameters + 9) = 0;\n      *data_ptr = 0xfffffffd;\n      value = *parameters;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(parameters + 9) = 0;\n    }\n    return adc_result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "enable_adc_08002004",
                "param_1": "parameters",
                "iVar1": "adc_result",
                "puVar2": "data_ptr",
                "iVar3": "value",
                "ADC_Enable()": "enable_adc_function",
                "param_1[10]": "settings",
                "param_1[0xb]": "flag_value"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "check_and_set_flags_080020f0",
            "code": "\nundefined4 checkAndSetFlags_080020f0(int *param_1)\n\n{\n  int currentTime;\n  int initialTime;\n  \n  initialTime = *param_1;\n  if ((*(uint *)(initialTime + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(initialTime + 8) = *(uint *)(initialTime + 8) & 0xfffffffe;\n  initialTime = HAL_GetTick();\n  do {\n    if ((*(uint *)(*param_1 + 8) & 1) == 0) {\n      return 0;\n    }\n    currentTime = HAL_GetTick();\n  } while ((uint)(currentTime - initialTime) < 3);\n  param_1[10] = param_1[10] | 0x10;\n  param_1[0xb] = param_1[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "check_and_set_flags_080020f0",
                "iVar1": "currentTime",
                "iVar2": "initialTime"
            },
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "initialize_adc_0800213c",
            "code": "\nundefined4 initializeADC_0800213c(int *adcConfig)\n\n{\n  int conversionResult;\n  uint combinedParams;\n  uint additionalParams;\n  \n  if (adcConfig == (int *)0x0) {\n    return 1;\n  }\n  if (adcConfig[10] == 0) {\n    adcConfig[0xb] = 0;\n    *(undefined *)(adcConfig + 9) = 0;\n    HAL_ADC_MspInit();\n  }\n  conversionResult = ADC_ConversionStop_Disable(adcConfig);\n  if (((adcConfig[10] & 0x10U) == 0) && (conversionResult == 0)) {\n    adcConfig[10] = adcConfig[10] & 0xffffeefdU | 2;\n    combinedParams = adcConfig[1] | adcConfig[7] | adcConfig[3] << 1;\n    if (adcConfig[2] == 0x100) {\n      additionalParams = 0x100;\n    }\n    else {\n      additionalParams = 0;\n      if (adcConfig[2] == 1) {\n        additionalParams = 0x100;\n      }\n    }\n    if (adcConfig[5] == 1) {\n      if (adcConfig[3] == 0) {\n        additionalParams = additionalParams | (adcConfig[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        adcConfig[10] = adcConfig[10] | 0x20;\n        adcConfig[0xb] = adcConfig[0xb] | 1;\n      }\n    }\n    *(uint *)(*adcConfig + 4) = additionalParams | *(uint *)(*adcConfig + 4) & 0xffff16ff;\n    *(uint *)(*adcConfig + 8) = *(uint *)(*adcConfig + 8) & 0xffe1f7fd | combinedParams;\n    if ((adcConfig[2] == 0x100) || (adcConfig[2] == 1)) {\n      additionalParams = (adcConfig[4] + -1) * 0x100000;\n    }\n    else {\n      additionalParams = 0;\n    }\n    *(uint *)(*adcConfig + 0x2c) = additionalParams | *(uint *)(*adcConfig + 0x2c) & 0xff0fffff;\n    if (combinedParams != (*(uint *)(*adcConfig + 8) & 0xff1f0efe)) {\n      adcConfig[10] = adcConfig[10] & 0xffffffedU | 0x10;\n      adcConfig[0xb] = adcConfig[0xb] | 1;\n      return 1;\n    }\n    adcConfig[0xb] = 0;\n    adcConfig[10] = adcConfig[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  adcConfig[10] = adcConfig[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "initialize_adc_0800213c",
                "param_1": "adcConfig",
                "iVar1": "conversionResult",
                "uVar2": "combinedParams",
                "uVar3": "additionalParams"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "disable_adc_conversion_0800224c",
            "code": "\nint disableADCConversion_0800224c(int *adcParams)\n\n{\n  int returnValue;\n  \n  if (adcParams == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    adcParams[10] = adcParams[10] | 2;\n    returnValue = ADC_ConversionStop_Disable();\n    if (returnValue == 0) {\n      *(undefined4 *)*adcParams = 0xffffffe0;\n      *(uint *)(*adcParams + 4) = *(uint *)(*adcParams + 4) & 0xff3f0000;\n      *(uint *)(*adcParams + 8) = *(uint *)(*adcParams + 8) & 0xff0106f0;\n      *(uint *)(*adcParams + 0xc) = *(uint *)(*adcParams + 0xc) & 0xff000000;\n      *(uint *)(*adcParams + 0x10) = *(uint *)(*adcParams + 0x10) & 0xc0000000;\n      *(uint *)(*adcParams + 0x14) = *(uint *)(*adcParams + 0x14) & 0xfffff000;\n      *(uint *)(*adcParams + 0x18) = *(uint *)(*adcParams + 0x18) & 0xfffff000;\n      *(uint *)(*adcParams + 0x1c) = *(uint *)(*adcParams + 0x1c) & 0xfffff000;\n      *(uint *)(*adcParams + 0x20) = *(uint *)(*adcParams + 0x20) & 0xfffff000;\n      *(uint *)(*adcParams + 0x24) = *(uint *)(*adcParams + 0x24) & 0xfffff000;\n      *(uint *)(*adcParams + 0x28) = *(uint *)(*adcParams + 0x28) & 0xfffff000;\n      *(uint *)(*adcParams + 0x2c) = *(uint *)(*adcParams + 0x2c) & 0xff000000;\n      *(uint *)(*adcParams + 0x2c) = *(uint *)(*adcParams + 0x2c) & 0xff000000;\n      *(uint *)(*adcParams + 0x30) = *(uint *)(*adcParams + 0x30) & 0xc0000000;\n      *(uint *)(*adcParams + 0x34) = *(uint *)(*adcParams + 0x34) & 0xc0000000;\n      *(uint *)(*adcParams + 0x38) = *(uint *)(*adcParams + 0x38) & 0xffc00000;\n      *(uint *)(*adcParams + 0x38) = *(uint *)(*adcParams + 0x38) & 0xffc00000;\n      HAL_ADC_MspDeInit(adcParams);\n      adcParams[0xb] = 0;\n      adcParams[10] = 0;\n    }\n    *(undefined *)(adcParams + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "disable_adc_conversion_0800224c",
                "param_1": "adcParams",
                "iVar1": "returnValue"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspDeInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "update_flag_and_return_08002348",
            "code": "\nint updateFlagAndReturn_08002348(int data)\n\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = disableADCConversionStop;\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "update_flag_and_return_08002348",
                "param_1": "data",
                "iVar1": "result",
                "ADC_ConversionStop_Disable()": "disableADCConversionStop"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "initialize_adc_08002384",
            "code": "\nint initializeADC_08002384(int *adcParams)\n\n{\n  uint periphClockFreq;\n  int stopResult;\n  uint rccPeriphCLKFreq;\n  int startTime;\n  int currentTime;\n  int loopCounter;\n  \n  if (*(char *)(adcParams + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adcParams + 9) = 1;\n  stopResult = ADC_ConversionStop_Disable();\n  if (stopResult == 0) {\n    adcParams[10] = adcParams[10] & 0xffffeefdU | 2;\n    periphClockFreq = DAT_20000084;\n    rccPeriphCLKFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loopCounter = periphClockFreq / rccPeriphCLKFreq << 1; loopCounter != 0; loopCounter = loopCounter + -1) {\n    }\n    ADC_Enable(adcParams);\n    *(uint *)(*adcParams + 8) = *(uint *)(*adcParams + 8) | 8;\n    startTime = HAL_GetTick();\n    while (currentTime = *adcParams, (*(uint *)(currentTime + 8) & 8) != 0) {\n      currentTime = HAL_GetTick();\n      if (10 < (uint)(currentTime - startTime)) {\n        adcParams[10] = adcParams[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adcParams + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentTime + 8) = *(uint *)(currentTime + 8) | 4;\n    startTime = HAL_GetTick();\n    while ((*(uint *)(*adcParams + 8) & 4) != 0) {\n      currentTime = HAL_GetTick();\n      if (10 < (uint)(currentTime - startTime)) {\n        adcParams[10] = adcParams[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adcParams + 9) = 0;\n        return 1;\n      }\n    }\n    adcParams[10] = adcParams[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adcParams + 9) = 0;\n  return stopResult;\n}\n\n",
            "renaming": {
                "FUN_08002384": "initialize_adc_08002384",
                "param_1": "adcParams",
                "uVar1": "periphClockFreq",
                "iVar2": "stopResult",
                "uVar3": "rccPeriphCLKFreq",
                "iVar4": "startTime",
                "iVar5": "currentTime",
                "local_14": "loopCounter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "ADC_Enable",
                "HAL_RCCEx_GetPeriphCLKFreq",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_data_mask_08002470",
            "code": "\n\n\nvoid updateDataMask_08002470(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_data_mask_08002470",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_register_value_08002494",
            "code": "\n\n\nvoid updateRegisterValue_08002494(uint registerIndex,uint inputValue1,uint inputValue2)\n\n{\n  uint shiftCount;\n  uint remainingBits;\n  \n  shiftCount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftCount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftCount + 4 < 7) {\n    shiftCount = 0;\n  }\n  else {\n    shiftCount = shiftCount - 3;\n  }\n  shiftCount = (inputValue1 & (1 << (remainingBits & 0xff)) - 1U) << (shiftCount & 0xff) |\n          (1 << (shiftCount & 0xff)) - 1U & inputValue2;\n  if ((int)registerIndex < 0) {\n    *(char *)((registerIndex & 0xf) + 0xe000ed14) = (char)(shiftCount << 4);\n  }\n  else {\n    *(char *)(registerIndex + 0xe000e400) = (char)(shiftCount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_register_value_08002494",
                "param_1": "registerIndex",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "uVar1": "shiftCount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_in_array_080024f8",
            "code": "\nvoid setBitInArray_080024f8(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_in_array_080024f8",
                "param_1": "index"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "initialize_data_08002514",
            "code": "\n\n\nundefined4 initializeData_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "initialize_data_08002514",
                "param_1": "value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_08002540",
            "code": "\nvoid setBit_08002540(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_08002540",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_permission_flag_08002560",
            "code": "\n\n\nvoid updatePermissionFlag_08002560(int permission)\n\n{\n  if (permission != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_permission_flag_08002560",
                "param_1": "permission"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "run_system_tick_callback_08002582",
            "code": "\nvoid runSystemTickCallback_08002582(void)\n\n{\n  systemTickHandler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "run_system_tick_callback_08002582",
                "HAL_SYSTICK_Callback": "systemTickHandler"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "set_configuration_0800258c",
            "code": "\n\n\nundefined4 set_configuration_0800258c(uint **config)\n\n{\n  uint *config_addr;\n  \n  if (*(char *)((int)config + 0x21) != '\\x02') {\n    config[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **config = **config & 0xfffffff1;\n  **config = **config & 0xfffffffe;\n  config_addr = *config;\n  if (config_addr == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (config_addr == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (config_addr == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (config_addr == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (config_addr == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (config_addr == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)config + 0x21) = 1;\n  *(undefined *)(config + 8) = 0;\n  if (config[0xd] != (uint *)0x0) {\n    (*(code *)config[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "set_configuration_0800258c",
                "param_1": "config",
                "puVar1": "config_addr"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_bits_08002624",
            "code": "\n\n\nvoid updateBits_08002624(uint *target,uint *source)\n\n{\n  uint *targetPtr;\n  uint bitMask;\n  uint sourceBit;\n  uint bitIndex;\n  uint opcode;\n  uint updatedBits;\n  int index;\n  int value;\n  \n  updatedBits = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    sourceBit = *source & bitMask;\n    if (bitMask == sourceBit) {\n      opcode = source[1];\n      if (opcode == 0x12) {\n        updatedBits = source[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          updatedBits = source[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08002776;\n          if (opcode == 1) {\n            updatedBits = source[3];\n          }\n        }\n        else if (opcode == 3) {\n          updatedBits = 0;\n        }\n        else if (opcode == 0x11) {\n          updatedBits = source[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08002776:\n        if (source[2] == 0) {\n          updatedBits = 4;\n        }\n        else if (source[2] == 1) {\n          target[4] = bitMask;\n          updatedBits = 8;\n        }\n        else {\n          target[5] = bitMask;\n          updatedBits = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = bitIndex;\n      targetPtr = target;\n      if (0xff < sourceBit) {\n        bitMask = bitIndex - 8;\n        targetPtr = target + 1;\n      }\n      *targetPtr = *targetPtr & ~(0xf << (bitMask << 2 & 0xff)) | updatedBits << (bitMask << 2 & 0xff);\n      if ((source[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        index = (bitIndex & 3) << 2;\n        if (target == (uint *)0x40010800) {\n          value = 0;\n        }\n        else if (target == (uint *)0x40010c00) {\n          value = 1;\n        }\n        else if (target == (uint *)0x40011000) {\n          value = 2;\n        }\n        else if (target == (uint *)0x40011400) {\n          value = 3;\n        }\n        else {\n          value = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << index) | value << index;\n        if ((source[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~sourceBit;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | sourceBit;\n        }\n        if ((source[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~sourceBit;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | sourceBit;\n        }\n        if ((source[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~sourceBit;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | sourceBit;\n        }\n        if ((source[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~sourceBit;\n        }\n        else {\n          _DAT_4001040c = sourceBit | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "target",
                "param_2": "source",
                "puVar1": "targetPtr",
                "uVar2": "bitMask",
                "uVar3": "sourceBit",
                "uVar4": "bitIndex",
                "uVar5": "opcode",
                "uVar6": "updatedBits",
                "iVar7": "index",
                "iVar8": "value"
            },
            "calling": [
                "uart_init",
                "digital_io_init",
                "HAL_ADC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_08002810",
            "code": "\nundefined4 check_bit_08002810(int data_ptr,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(data_ptr + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "data_ptr",
                "param_2": "bit_mask"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_param_value_0800281e",
            "code": "\nvoid setParamValue_0800281e(int objectPtr,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectPtr + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(objectPtr + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "objectPtr",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "trigger_gpio_interrupt_0800282c",
            "code": "\n\n\nvoid triggerGPIOInterrupt_0800282c(uint interruptMask)\n\n{\n  if ((_DAT_40010414 & interruptMask) != 0) {\n    _DAT_40010414 = interruptMask;\n    handleGPIOInterrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "trigger_gpio_interrupt_0800282c",
                "param_1": "interruptMask",
                "HAL_GPIO_EXTI_Callback": "handleGPIOInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_flag_value_08002848",
            "code": "\nundefined4 updateFlagValue_08002848(int *flagData)\n\n{\n  if (*(char *)((int)flagData + 0x3e) == '@') {\n    if (flagType == 0) {\n      *(uint *)(*flagData + 0x10) = flagValue & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagValue & 0xffU | 1;\n    }\n  }\n  else if (flagData[4] == 0x4000) {\n    if (*(char *)((int)flagData + 0x3d) == '!') {\n      *(uint *)(*flagData + 0x10) = flagValue & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagValue & 0xffU | 1;\n    }\n  }\n  else if (flagType == 0) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagValue << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flagType == 1) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagValue << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_flag_value_08002848",
                "param_1": "flagData",
                "param_1[0x14]": "flagType",
                "param_1[0x11]": "flagValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "set_uint_from_param_080028d2",
            "code": "\nundefined4 set_uint_from_param_080028d2(int *ptr_to_int)\n\n{\n  *(uint *)(*ptr_to_int + 0x10) = ptr_to_int[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "set_uint_from_param_080028d2",
                "param_1": "ptr_to_int"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "update_permissions_080028de",
            "code": "\nundefined4 updatePermissions_080028de(uint **permissions)\n\n{\n  uint *ptrPermissionFlag;\n  \n  ptrPermissionFlag = permissions[0xb];\n  if ((*(char *)(permissionsAddress + 0x3d) == '\\\"') &&\n     ((ptrCondition != (uint *)0x0 || (*(char *)(permissionsAddress + 0x3e) != '@')))) {\n    if ((ptrCondition == (uint *)0x0) && (ptrValue == (uint *)0xc000)) {\n      **permissions = **permissions | 0x100;\n      ptrCondition = (uint *)((int)ptrCondition + 1);\n    }\n    else {\n      if (*(short *)(permissionsAddress + 0x2a) == 0) {\n        **permissions = **permissions | 0x200;\n      }\n      else if (*(short *)(permissionsAddress + 0x2a) == 1) {\n        if (ptrPermissionFlag == (uint *)0xffff0000) {\n          **permissions = **permissions & 0xfffffbff;\n          ptrPermissionFlag = *permissions;\n          if ((ptrPermissionFlag[1] & 0x800) == 0) {\n            *ptrPermissionFlag = *ptrPermissionFlag | 0x200;\n          }\n          else {\n            *ptrPermissionFlag = *ptrPermissionFlag & 0xfffffbff;\n          }\n        }\n        else if (((ptrPermissionFlag == (uint *)0x4) || (ptrPermissionFlag == (uint *)0x8)) ||\n                (ptrComparison4 == (uint *)0x12)) {\n          **permissions = **permissions & 0xfffffbff;\n          **permissions = **permissions | 0x200;\n        }\n        else if (permissions[0xb] == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions & 0xfffffbff;\n        }\n      }\n      else if (*(short *)(permissionsAddress + 0x2a) == 2) {\n        if (permissions[0xb] == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions | 0x800;\n          **permissions = **permissions & 0xfffffbff;\n        }\n        ptrPermissionFlag = *permissions;\n        if ((ptrPermissionFlag[1] & 0x800) != 0) {\n          ptrPermissionFlag[1] = ptrPermissionFlag[1] | 0x1000;\n        }\n      }\n      else {\n        **permissions = **permissions | 0x400;\n        ptrPermissionFlag = *permissions;\n        if ((ptrPermissionFlag[1] & 0x800) != 0) {\n          ptrPermissionFlag[1] = ptrPermissionFlag[1] | 0x1000;\n        }\n      }\n      ptrCondition = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "update_permissions_080028de",
                "param_1": "permissions",
                "puVar1": "ptrPermissionFlag",
                "param_1[0x14]": "ptrCondition",
                "param_1[4]": "ptrValue",
                "(int)param_1": "permissionsAddress",
                "param_1[0xc]": "ptrComparison4"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_data_08002ab8",
            "code": "\nundefined4 updateData_08002ab8(int *data)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)data[9];\n    data[9] = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_data_08002ab8",
                "param_1": "data",
                "pbVar1": "bytePtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_pointer_08002ad8",
            "code": "\nundefined4 updatePointer_08002ad8(int *pointer)\n\n{\n  undefined *nextAddress;\n  \n  if (*(short *)((int)pointer + 0x2a) != 0) {\n    nextAddress = (undefined *)pointerArray;\n    pointerArray = (int)(nextAddress + 1);\n    *nextAddress = (char)*(undefined4 *)(*pointer + 0x10);\n    *(short *)((int)pointer + 0x2a) = *(short *)((int)pointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_pointer_08002ad8",
                "param_1": "pointer",
                "puVar1": "nextAddress",
                "param_1[9]": "pointerArray"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "validate_parameters_08002af8",
            "code": "\nundefined4 validate_parameters_08002af8(uint **input_ptr,uint *output_ptr,int output_size,uint *additional_data)\n\n{\n  undefined4 result;\n  uint *flags_ptr;\n  \n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (output_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (output_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      flags_ptr = *input_ptr;\n      if ((*flags_ptr & 1) == 0) {\n        *flags_ptr = *flags_ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = (uint *)0x0;\n      input_ptr[9] = output_ptr;\n      *(short *)((int)input_ptr + 0x2a) = (short)output_size;\n      input_ptr[0xb] = additional_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "validate_parameters_08002af8",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "output_size",
                "param_4": "additional_data",
                "uVar1": "result",
                "puVar2": "flags_ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "validate_inputs_08002b84",
            "code": "\nundefined4 validate_inputs_08002b84(uint **input1,uint *input2,int input3,uint *input4)\n\n{\n  undefined4 returnValue;\n  uint *ptr;\n  \n  if (*(char *)((int)input1 + 0x3d) == '(') {\n    if (input2 == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (input3 == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(input1 + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(input1 + 0xf) = 1;\n      ptr = *input1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input1 = **input1 & 0xfffff7ff;\n      *(undefined *)((int)input1 + 0x3d) = 0x2a;\n      *(undefined *)((int)input1 + 0x3e) = 0x20;\n      returnValue = 0;\n      input1[0x10] = (uint *)0x0;\n      input1[9] = input2;\n      *(short *)((int)input1 + 0x2a) = (short)input3;\n      input1[0xb] = input4;\n      *(undefined2 *)(input1 + 10) = *(undefined2 *)((int)input1 + 0x2a);\n      *(undefined *)(input1 + 0xf) = 0;\n      (*input1)[1] = (*input1)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "validate_inputs_08002b84",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "returnValue",
                "puVar2": "ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initialize_params_08002c10",
            "code": "\nundefined4 initializeParams_08002c10(uint **params)\n\n{\n  uint *pointerVar;\n  \n  if (*(char *)((int)params + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)params + 0x3d) = 0x28;\n  pointerVar = *params;\n  if ((*pointerVar & 1) == 0) {\n    *pointerVar = *pointerVar | 1;\n  }\n  **params = **params | 0x400;\n  (*params)[1] = (*params)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initialize_params_08002c10",
                "param_1": "params",
                "puVar1": "pointerVar"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 processData_08002c54(int *data)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "I2C_Slave_STOPF",
                "I2C_SlaveReceive_RXNE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_parameter_08002ca6",
            "code": "\nundefined4 updateParameter_08002ca6(int *data)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)(paramInt + 0x3d);\n  if (*(short *)(paramInt + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)(paramInt + 0x2a) = *(short *)(paramInt + 0x2a) + -1;\n    if ((*(short *)(paramInt + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      twelfthElementInData = 0x22;\n      *(undefined *)(paramInt + 0x3d) = 0x28;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_parameter_08002ca6",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "(int)param_1": "paramInt",
                "param_1[0xc]": "twelfthElementInData"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "update_device_addr_08002cf2",
            "code": "\nundefined4 updateDeviceAddr_08002cf2(int *deviceParams,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 address;\n  uint flags;\n  \n  flags = *(uint *)(*deviceParams + 0x18);\n  if ((flags & 0x80) == 0) {\n    address = *(undefined2 *)(deviceParams + 3);\n  }\n  else {\n    address = *(undefined2 *)(deviceParams + 6);\n  }\n  HAL_I2C_AddrCallback(deviceParams,(*(uint *)(*deviceParams + 0x18) & 4) == 0,address,flags,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "update_device_addr_08002cf2",
                "param_1": "deviceParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "address",
                "uVar2": "flags"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "handle_i2_c_event_08002d1c",
            "code": "\nundefined4 handleI2CEvent_08002d1c(uint **eventData)\n\n{\n  if (((eventData[0xb] == (uint *)0x4) || (eventData[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)eventData + 0x3d) == '(')) {\n    eventData[0xb] = (uint *)0xffff0000;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback();\n  }\n  else if (*(char *)((int)eventData + 0x3d) == '!') {\n    eventData[0xb] = (uint *)0xffff0000;\n    eventData[0xc] = (uint *)0x21;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback();\n  }\n  else {\n    (*eventData)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "handle_i2_c_event_08002d1c",
                "param_1": "eventData"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_data_08002db2",
            "code": "\nundefined4 processData_08002db2(uint **input)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)input + 0x3d);\n  pointer = pointer1;\n  if ((*(short *)(input + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      pointer2 = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        callback1;\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        callback2;\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      pointer2 = (uint *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      callback2;\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)input + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint *)0x0) {\n        if (input[0x13] == (uint *)0x1) {\n          (*input)[4] = (uint)input[0x12] & 0xff;\n          input[0x14] = (uint *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint *)0x1) {\n        (*input)[4] = (uint)input[0x12] & 0xff;\n        input[0x14] = (uint *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\\\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          pointer = input[9];\n          input[9] = (uint *)((int)pointer + 1);\n          (*input)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = input[9];\n      input[9] = (uint *)((int)pointer + 1);\n      (*input)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "input",
                "cVar1": "character",
                "puVar2": "pointer",
                "param_1[0xb]": "pointer1",
                "param_1[0xc]": "pointer2",
                "HAL_I2C_MemTxCpltCallback()": "callback1",
                "HAL_I2C_MasterTxCpltCallback()": "callback2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_data_08002efc",
            "code": "\nundefined4 processData_08002efc(uint **inputData)\n\n{\n  uint *currentPtr;\n  \n  currentPtr = inputData[0xb];\n  if (*(char *)((int)inputData + 0x3d) == '!') {\n    if (*(short *)((int)inputData + 0x2a) == 0) {\n      if (((currentPtr == (uint *)0x4) || (currentPtr == (uint *)0x8)) || (currentPtr == (uint *)0xffff0000)) {\n        (*inputData)[1] = (*inputData)[1] & 0xfffff8ff;\n        **inputData = **inputData | 0x200;\n        statusCodePtr = (uint *)0x0;\n        *(undefined *)((int)inputData + 0x3d) = 0x20;\n        if (*(char *)((int)inputData + 0x3e) == '@') {\n          *(undefined *)((int)inputData + 0x3e) = 0;\n          HAL_I2C_MemTxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)inputData + 0x3e) = 0;\n          HAL_I2C_MasterTxCpltCallback();\n        }\n      }\n      else {\n        (*inputData)[1] = (*inputData)[1] & 0xfffff8ff;\n        statusCodePtr = (uint *)0x11;\n        *(undefined *)((int)inputData + 0x3e) = 0;\n        *(undefined *)((int)inputData + 0x3d) = 0x20;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      currentPtr = inputData[9];\n      inputData[9] = (uint *)((int)currentPtr + 1);\n      (*inputData)[4] = (uint)*(byte *)currentPtr;\n      *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_data_08002efc",
                "param_1": "inputData",
                "puVar1": "currentPtr",
                "param_1[0xc]": "statusCodePtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "update_param_08002f9c",
            "code": "\nundefined4 updateParam_08002f9c(uint **paramList)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)paramList + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)paramList + 0x2a) < 4) {\n      if (*(ushort *)((int)paramList + 0x2a) - 2 < 2) {\n        if (paramList[0xb] == (uint *)0x2) {\n          **paramList = **paramList | 0x400;\n        }\n        else {\n          **paramList = **paramList & 0xfffffbff;\n          **paramList = **paramList | 0x800;\n        }\n        (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n      }\n      else {\n        if (paramList[0xb] == (uint *)0x2) {\n          **paramList = **paramList | 0x400;\n        }\n        else {\n          **paramList = **paramList & 0xfffffbff;\n        }\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        tempPtr = paramList[9];\n        paramList[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*paramList)[4];\n        *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        paramList[0xc] = (uint *)0x0;\n        if (*(char *)((int)paramList + 0x3e) == '@') {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          HAL_I2C_MemRxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          HAL_I2C_MasterRxCpltCallback();\n        }\n      }\n    }\n    else {\n      tempPtr = paramList[9];\n      paramList[9] = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*paramList)[4];\n      *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "update_param_08002f9c",
                "param_1": "paramList",
                "puVar1": "tempPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_data_0800306c",
            "code": "\nundefined4 processData_0800306c(uint **parameters)\n\n{\n  uint *tempVar;\n  \n  tempVar = parameters[0xb];\n  if (*(short *)((int)parameters + 0x2a) == 3) {\n    if (((tempVar == (uint *)0x4) || (tempVar == (uint *)0x8)) || (tempVar == (uint *)0xffff0000)) {\n      **parameters = **parameters & 0xfffffbff;\n    }\n    tempVar = counter;\n    counter = (uint *)((int)tempVar + 1);\n    *(char *)tempVar = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n  }\n  else if (*(short *)((int)parameters + 0x2a) == 2) {\n    if (((tempVar == (uint *)0x4) || (tempVar == (uint *)0x8)) || (tempVar == (uint *)0xffff0000)) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffffcff;\n      **parameters = **parameters | 0x200;\n    }\n    else {\n      if (tempVar == (uint *)0x2) {\n        **parameters = **parameters | 0x400;\n      }\n      else {\n        **parameters = **parameters & 0xfffffbff;\n      }\n      (*parameters)[1] = (*parameters)[1] & 0xfffffcff;\n    }\n    tempVar = counter;\n    counter = (uint *)((int)tempVar + 1);\n    *(char *)tempVar = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    tempVar = counter;\n    counter = (uint *)((int)tempVar + 1);\n    *(char *)tempVar = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    parameters[0xc] = (uint *)0x0;\n    if (*(char *)((int)parameters + 0x3e) == '@') {\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      HAL_I2C_MemRxCpltCallback();\n    }\n    else {\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      HAL_I2C_MasterRxCpltCallback();\n    }\n  }\n  else {\n    tempVar = counter;\n    counter = (uint *)((int)tempVar + 1);\n    *(char *)tempVar = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "parameters",
                "puVar1": "tempVar",
                "param_1[9]": "counter"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "handle_i2_c_event_0800316c",
            "code": "\nvoid handleI2CEvent_0800316c(uint **eventData)\n\n{\n  int errorCode;\n  uint *pendingData;\n  uint *currentData;\n  \n  if (*(byte *)((int)eventData + 0x3d) - 0x29 < 2) {\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)eventData + 0x3d) != '`') && (((*eventData)[1] & 0x800) == 0)) {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n    }\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n  }\n  **eventData = **eventData & 0xfffff7ff;\n  currentData = *eventData;\n  if ((currentData[1] & 0x800) == 0) {\n    if (*(char *)((int)eventData + 0x3d) == '`') {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n      eventData[0x10] = (uint *)0x0;\n      if ((currentData[5] & 0x40) != 0) {\n        pendingData = eventData[9];\n        eventData[9] = (uint *)((int)pendingData + 1);\n        *(char *)pendingData = (char)currentData[4];\n      }\n      **eventData = **eventData & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(eventData);\n    }\n    else {\n      if ((currentData[5] & 0x40) != 0) {\n        pendingData = eventData[9];\n        eventData[9] = (uint *)((int)pendingData + 1);\n        *(char *)pendingData = (char)currentData[4];\n      }\n      HAL_I2C_ErrorCallback(eventData);\n    }\n  }\n  else {\n    currentData[1] = currentData[1] & 0xfffff7ff;\n    if (*(char *)((int)eventData[0xd] + 0x21) == '\\x01') {\n      eventData[0xe][0xd] = (uint)&DMAAbortLab;\n      errorCode = HAL_DMA_Abort_IT(eventData[0xe]);\n      if (errorCode != 0) {\n        if (((*eventData)[5] & 0x40) != 0) {\n          currentData = eventData[9];\n          eventData[9] = (uint *)((int)currentData + 1);\n          *(char *)currentData = (char)(*eventData)[4];\n        }\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xe][0xd])();\n      }\n    }\n    else {\n      eventData[0xd][0xd] = (uint)&DMAAbortLab;\n      errorCode = HAL_DMA_Abort_IT(eventData[0xd]);\n      if (errorCode != 0) {\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)eventData + 0x3d) == '(') && (((uint)eventData[0x10] & 4) != 0)) {\n    eventData[0xb] = (uint *)0xffff0000;\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback(eventData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "handle_i2_c_event_0800316c",
                "param_1": "eventData",
                "iVar1": "errorCode",
                "puVar2": "pendingData",
                "puVar3": "currentData",
                "LAB_080035fc_1": "DMAAbortLab"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_data_080032b4",
            "code": "\nundefined4 processData_080032b4(uint **data)\n\n{\n  char charValue;\n  uint *ptr1;\n  uint *ptr2;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_data_080032b4",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "handle_i2c_communication_080033b8",
            "code": "\nvoid handle_i2c_communication_080033b8(int *i2c_data)\n\n{\n  int data_address;\n  uint status_register;\n  uint control_register;\n  uint configuration_register;\n  \n  data_address = *i2c_data;\n  configuration_register = *(uint *)(data_address + 0x18);\n  status_register = *(uint *)(data_address + 0x14);\n  control_register = *(uint *)(data_address + 4);\n  if ((*(char *)((int)i2c_data + 0x3e) == '\\x10') || (*(char *)((int)i2c_data + 0x3e) == '@')) {\n    if (((status_register & 0x10001) == 0) || ((control_register & 0x200) == 0)) {\n      if (((status_register & 0x10008) == 0) || ((control_register & 0x200) == 0)) {\n        if (((status_register & 0x10002) != 0) && ((control_register & 0x200) != 0)) {\n          I2C_Master_ADDR(i2c_data);\n        }\n      }\n      else {\n        I2C_Master_ADD10(i2c_data);\n      }\n    }\n    else {\n      I2C_Master_SB(i2c_data);\n    }\n    if ((configuration_register & 0x100004) == 0) {\n      if ((((status_register & 0x10040) != 0) && ((control_register & 0x400) != 0)) && ((status_register & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(i2c_data);\n        return;\n      }\n      if (((status_register & 0x10004) != 0) && ((control_register & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(i2c_data);\n        return;\n      }\n    }\n    else {\n      if ((((status_register & 0x10080) != 0) && ((control_register & 0x400) != 0)) && ((status_register & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(i2c_data);\n        return;\n      }\n      if (((status_register & 0x10004) != 0) && ((control_register & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(i2c_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((status_register & 0x10002) != 0) && ((control_register & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((status_register & 0x10010) != 0) && ((control_register & 0x200) != 0)) {\n      I2C_Slave_STOPF(i2c_data);\n      return;\n    }\n    if ((configuration_register & 0x100004) == 0) {\n      if ((((status_register & 0x10040) != 0) && ((control_register & 0x400) != 0)) && ((status_register & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(i2c_data);\n        return;\n      }\n      if (((status_register & 0x10004) != 0) && ((control_register & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(i2c_data);\n      }\n    }\n    else {\n      if ((((status_register & 0x10080) != 0) && ((control_register & 0x400) != 0)) && ((status_register & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(i2c_data);\n        return;\n      }\n      if (((status_register & 0x10004) != 0) && ((control_register & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(i2c_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "handle_i2c_communication_080033b8",
                "param_1": "i2c_data",
                "iVar1": "data_address",
                "uVar2": "status_register",
                "uVar3": "control_register",
                "uVar4": "configuration_register"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_Master_SB",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_RXNE",
                "I2C_Master_ADDR",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_Slave_STOPF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "update_i2_c_status_08003520",
            "code": "\nvoid updateI2CStatus_08003520(uint **ptr_array)\n\n{\n  char char1;\n  uint *ptr_var2;\n  uint status1;\n  uint status2;\n  \n  ptr_var2 = *ptr_array;\n  status1 = ptr_var2[5];\n  status2 = ptr_var2[1];\n  if (((status1 & 0x10100) != 0) && ((status2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 1);\n    ptr_var2[5] = 0xfffffeff;\n    **ptr_array = **ptr_array | 0x8000;\n  }\n  if (((status1 & 0x10200) != 0) && ((status2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 2);\n    (*ptr_array)[5] = 0xfffffdff;\n  }\n  if (((status1 & 0x10400) != 0) && ((status2 & 0x100) != 0)) {\n    char1 = *(char *)((int)ptr_array + 0x3d);\n    if (((*(char *)((int)ptr_array + 0x3e) == ' ') && (*(short *)((int)ptr_array + 0x2a) == 0)) &&\n       (((char1 == '!' || (char1 == ')')) || ((char1 == '(' && (ptr_array[0xc] == (uint *)0x21)))))) {\n      I2C_Slave_AF(ptr_array);\n    }\n    else {\n      ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 4);\n      if (*(char *)((int)ptr_array + 0x3e) == '\\x10') {\n        **ptr_array = **ptr_array | 0x200;\n      }\n      (*ptr_array)[5] = 0xfffffbff;\n    }\n  }\n  if (((status1 & 0x10800) != 0) && ((status2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 8);\n    (*ptr_array)[5] = 0xfffff7ff;\n  }\n  if (ptr_array[0x10] != (uint *)0x0) {\n    I2C_ITError(ptr_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "update_i2_c_status_08003520",
                "param_1": "ptr_array",
                "cVar1": "char1",
                "puVar2": "ptr_var2",
                "uVar3": "status1",
                "uVar4": "status2"
            },
            "calling": [],
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "delay_function_0800365c",
            "code": "\nvoid delayFunction_0800365c(int input)\n\n{\n  bool isNonZero;\n  int counter;\n  \n  counter = input * (DAT_20000084 / 8000);\n  do {\n    isNonZero = counter != 0;\n    counter = counter + -1;\n  } while (isNonZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "delay_function_0800365c",
                "param_1": "input",
                "local_4": "counter",
                "bVar1": "isNonZero"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_and_control_hardware_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkAndControlHardware_08003688(uint *hardwareState)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint temp;\n  bool flag;\n  \n  if ((*hardwareState & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (hardwareState[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temp = hardwareState[1];\n      if (temp == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (temp == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (temp == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (hardwareState[1] == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*hardwareState & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (hardwareState[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | hardwareState[5] << 3;\n    }\n    else if (hardwareState[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | hardwareState[5] << 3;\n    }\n  }\n  if ((*hardwareState & 8) != 0) {\n    if (hardwareState[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((*hardwareState & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    temp = hardwareState[3];\n    if (temp == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (temp == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (temp == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (hardwareState[3] == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (hardwareState[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (hardwareState[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (hardwareState[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | hardwareState[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | hardwareState[8] | hardwareState[9];\n        _DAT_42420060 = 1;\n        startTime = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = HAL_GetTick();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_and_control_hardware_08003688",
                "param_1": "hardwareState",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "temp",
                "bVar5": "flag"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_delay_08003a68",
            "code": "\n\n\nuint calculateDelay_08003a68(void)\n\n{\n  uint delay;\n  undefined2 constant5;\n  undefined4 constant4;\n  undefined4 constant3;\n  undefined4 constant2;\n  undefined4 constant1;\n  \n  constant1 = 0x10100f0e;\n  constant2 = 0xd0c0b0a;\n  constant3 = 0x9080706;\n  constant4 = 0x5040302;\n  constant5 = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&constant4 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&constant5 - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "uStack_c": "constant1",
                "uStack_10": "constant2",
                "uStack_14": "constant3",
                "uStack_18": "constant4",
                "local_1c": "constant5",
                "uVar1": "delay"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_system_08003ad4",
            "code": "\n\n\nundefined4 initialize_system_08003ad4(uint *config,uint config_size)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  \n  if ((_DAT_40022000 & 7) < config_size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config[2];\n  }\n  if ((*config & 1) != 0) {\n    sys_clock_freq = config[1];\n    if (sys_clock_freq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sys_clock_freq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sys_clock_freq | _DAT_40021004 & 0xfffffffc;\n    start_time = HAL_GetTick();\n    if (config[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = HAL_GetTick();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (config[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = HAL_GetTick();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = HAL_GetTick();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (config_size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config[3];\n  }\n  if ((*config & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config[4] << 3;\n  }\n  sys_clock_freq = HAL_RCC_GetSysClockFreq();\n  DAT_20000084 = sys_clock_freq >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_system_08003ad4",
                "param_1": "config",
                "param_2": "config_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "sys_clock_freq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_and_configure_device_08003afa",
            "code": "\n\n\nundefined4 initializeAndConfigureDevice_08003afa(uint *deviceConfig,uint numOfConfigParams)\n\n{\n  int startTick;\n  int currentTick;\n  uint configParam;\n  \n  if ((*deviceConfig & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | deviceConfig[2];\n  }\n  if ((*deviceConfig & 1) != 0) {\n    configParam = deviceConfig[1];\n    if (configParam == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((configParam != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = configParam | _DAT_40021004 & 0xfffffffc;\n    startTick = getCurrentTick();\n    if (deviceConfig[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTick = getCurrentTick();\n        if (5000 < (uint)(currentTick - startTick)) {\n          return 3;\n        }\n      }\n    }\n    else if (deviceConfig[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTick = getCurrentTick();\n        if (5000 < (uint)(currentTick - startTick)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTick = getCurrentTick();\n        if (5000 < (uint)(currentTick - startTick)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (numOfConfigParams < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numOfConfigParams;\n    if (numOfConfigParams != (numOfConfigParams & 7)) {\n      return 1;\n    }\n  }\n  if ((*deviceConfig & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | deviceConfig[3];\n  }\n  if ((*deviceConfig & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | deviceConfig[4] << 3;\n  }\n  configParam = getSystemClockFrequency();\n  DAT_20000084 = configParam >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initializeTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_and_configure_device_08003afa",
                "param_1": "deviceConfig",
                "param_2": "numOfConfigParams",
                "uVar3": "configParam",
                "iVar1": "startTick",
                "iVar2": "currentTick",
                "HAL_GetTick": "getCurrentTick",
                "HAL_RCC_GetSysClockFreq": "getSystemClockFrequency",
                "HAL_InitTick": "initializeTick"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_08003c44",
            "code": "\nundefined4 get_data_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_08003c44"
            },
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "get_adjusted_hclk_frequency_08003c50",
            "code": "\n\n\nuint getAdjustedHCLKFrequency_08003c50(void)\n\n{\n  uint hclkFrequency;\n  \n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  return hclkFrequency >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "get_adjusted_hclk_frequency_08003c50",
                "uVar1": "hclkFrequency"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_adjusted_hclk_freq_08003c70",
            "code": "\n\n\nuint getAdjustedHCLKFreq_08003c70(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  return hclkFreq >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_adjusted_hclk_freq_08003c70",
                "uVar1": "hclkFreq"
            },
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "update_configuration_08003c90",
            "code": "\n\n\nundefined4 updateConfiguration_08003c90(uint *config)\n\n{\n  uint bitmask1;\n  uint bitmask2;\n  int startTime;\n  int currentTime;\n  bool isBitSet;\n  \n  if ((*config & 1) != 0) {\n    isBitSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (config[1] & 0x300))) {\n      bitmask2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      bitmask1 = _DAT_40021020 & 1;\n      _DAT_40021020 = bitmask2;\n      if (bitmask1 != 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentTime = HAL_GetTick();\n          if (5000 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | config[1];\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*config & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | config[2];\n  }\n  if ((*config & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | config[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "update_configuration_08003c90",
                "param_1": "config",
                "uVar1": "bitmask1",
                "uVar2": "bitmask2",
                "iVar3": "startTime",
                "iVar4": "currentTime",
                "bVar5": "isBitSet"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "get_clock_frequency_08003da4",
            "code": "\n\n\nuint getClockFrequency_08003da4(int mode)\n\n{\n  uint frequency;\n  undefined2 prescaler;\n  undefined4 multiplier;\n  undefined4 divider1;\n  undefined4 divider2;\n  undefined4 result;\n  \n  result = 0x10100f0e;\n  divider2 = 0xd0c0b0a;\n  divider1 = 0x9080706;\n  multiplier = 0x5040302;\n  prescaler = 0x201;\n  if (mode == 2) {\n    frequency = HAL_RCC_GetPCLK2Freq();\n    frequency = frequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (mode == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        frequency = 4000000;\n      }\n      else {\n        frequency = 8000000 / *(byte *)((int)&prescaler - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      frequency = frequency * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        frequency = (frequency * 2) / 3;\n      }\n    }\n  }\n  else if (mode == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      frequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        frequency = 0;\n      }\n      else {\n        frequency = 0xf424;\n      }\n    }\n    else {\n      frequency = 0;\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "get_clock_frequency_08003da4",
                "param_1": "mode",
                "uVar1": "frequency",
                "local_24": "prescaler",
                "uStack_20": "multiplier",
                "uStack_1c": "divider1",
                "uStack_18": "divider2",
                "uStack_14": "result"
            },
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "handle_alarm_event_08003ea0",
            "code": "\n\n\nvoid handleAlarmEvent_08003ea0(uint **pointerToParam)\n\n{\n  if (((**pointerToParam & 2) != 0) && (((*pointerToParam)[1] & 2) != 0)) {\n    HAL_RTC_AlarmAEventCallback();\n    (*pointerToParam)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)pointerToParam + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "handle_alarm_event_08003ea0",
                "param_1": "pointerToParam"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "deinit_pwm_timer_08003ed8",
            "code": "\nvoid deinit_PWM_timer_08003ed8(uint **input_params)\n\n{\n  uint *ptr_input_params;\n  \n  *(undefined *)((int)input_params + 0x3d) = 2;\n  ptr_input_params = *input_params;\n  if ((ptr_input_params[8] & 0x1111) == 0) {\n    if ((ptr_input_params[8] & 0x444) == 0) {\n      *ptr_input_params = *ptr_input_params & 0xfffffffe;\n    }\n  }\n  deinit_HAL_TIM_PWM(input_params);\n  *(undefined *)((int)input_params + 0x3d) = 0;\n  *(undefined *)(input_params + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "deinit_pwm_timer_08003ed8",
                "param_1": "input_params",
                "puVar1": "ptr_input_params",
                "HAL_TIM_PWM_MspDeInit": "deinit_HAL_TIM_PWM"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_callbacks_08003f18",
            "code": "\nvoid processCallbacks_08003f18(int *callbackList)\n\n{\n  int currentCallback;\n  \n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 2) != 0) && ((*(uint *)(currentCallback + 0xc) & 2) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xfffffffd;\n    *(undefined *)(callbackList + 7) = 1;\n    if ((*(uint *)(*callbackList + 0x18) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback();\n      HAL_TIM_PWM_PulseFinishedCallback(callbackList);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback();\n    }\n    *(undefined *)(callbackList + 7) = 0;\n  }\n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 4) != 0) && ((*(uint *)(currentCallback + 0xc) & 4) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xfffffffb;\n    *(undefined *)(callbackList + 7) = 2;\n    if ((*(uint *)(*callbackList + 0x18) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackList);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackList);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackList);\n    }\n    *(undefined *)(callbackList + 7) = 0;\n  }\n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 8) != 0) && ((*(uint *)(currentCallback + 0xc) & 8) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xfffffff7;\n    *(undefined *)(callbackList + 7) = 4;\n    if ((*(uint *)(*callbackList + 0x1c) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackList);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackList);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackList);\n    }\n    *(undefined *)(callbackList + 7) = 0;\n  }\n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 0x10) != 0) && ((*(uint *)(currentCallback + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xffffffef;\n    *(undefined *)(callbackList + 7) = 8;\n    if ((*(uint *)(*callbackList + 0x1c) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackList);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackList);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackList);\n    }\n    *(undefined *)(callbackList + 7) = 0;\n  }\n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 1) != 0) && ((*(uint *)(currentCallback + 0xc) & 1) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(callbackList);\n  }\n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 0x80) != 0) && ((*(uint *)(currentCallback + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(callbackList);\n  }\n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 0x40) != 0) && ((*(uint *)(currentCallback + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xffffffbf;\n    HAL_TIM_TriggerCallback(callbackList);\n  }\n  currentCallback = *callbackList;\n  if (((*(uint *)(currentCallback + 0x10) & 0x20) != 0) && ((*(uint *)(currentCallback + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(currentCallback + 0x10) = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(callbackList);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_callbacks_08003f18",
                "param_1": "callbackList",
                "iVar1": "currentCallback"
            },
            "calling": [
                "TIM1_UP_IRQHandler"
            ],
            "called": [
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bitwise_flags_08004092",
            "code": "\nvoid updateBitwiseFlags_08004092(int dataPtr,uint bitIndex,int bitValue)\n\n{\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) | bitValue << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bitwise_flags_08004092",
                "param_1": "dataPtr",
                "param_2": "bitIndex",
                "param_3": "bitValue"
            },
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "initialize_timer_channel_080040b0",
            "code": "\nundefined4 initializeTimerChannel_080040b0(uint **timerChannel,undefined4 channelCommand)\n\n{\n  uint *timerChannelPtr;\n  \n  TIM_CCxChannelCmd(*timerChannel,channelCommand,0);\n  if (((*timerChannel == (uint *)0x40012c00) && ((timerConfig1 & 0x1111) == 0)) &&\n     ((timerConfig1 & 0x444) == 0)) {\n    timerConfig2 = timerConfig2 & 0xffff7fff;\n  }\n  timerChannelPtr = *timerChannel;\n  if (((timerChannelPtr[8] & 0x1111) == 0) && ((timerChannelPtr[8] & 0x444) == 0)) {\n    *timerChannelPtr = *timerChannelPtr & 0xfffffffe;\n  }\n  *(undefined *)((int)timerChannel + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "initialize_timer_channel_080040b0",
                "param_1": "timerChannel",
                "param_2": "channelCommand",
                "puVar1": "timerChannelPtr",
                "uRam40012c20": "timerConfig1",
                "uRam40012c44": "timerConfig2"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_value_08004110",
            "code": "\nvoid updateValue_08004110(int ptr,uint index,int value)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & ~(4 << (index & 0xff));\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) | value << (index & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_value_08004110",
                "param_1": "ptr",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "disable_timer_channel_0800412c",
            "code": "\nundefined4 disableTimerChannel_0800412c(uint **timerChannel,undefined4 channelState)\n\n{\n  uint *timerConfig;\n  \n  TIM_CCxNChannelCmd(*timerChannel,channelState,0);\n  timerConfig = *timerChannel;\n  if (((timerConfig[8] & 0x1111) == 0) && ((timerConfig[8] & 0x444) == 0)) {\n    timerConfig[0x11] = timerConfig[0x11] & 0xffff7fff;\n  }\n  timerConfig = *timerChannel;\n  if (((timerConfig[8] & 0x1111) == 0) && ((timerConfig[8] & 0x444) == 0)) {\n    *timerConfig = *timerConfig & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "disable_timer_channel_0800412c",
                "param_1": "timerChannel",
                "param_2": "channelState",
                "puVar1": "timerConfig"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "update_memory_0800417c",
            "code": "\nvoid updateMemory_0800417c(int *memoryPtr)\n\n{\n  *(uint *)(*memoryPtr + 0xc) = *(uint *)(*memoryPtr + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryPtr + 0x14) = *(uint *)(*memoryPtr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)memoryPtr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "update_memory_0800417c",
                "param_1": "memoryPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "process_data_08004198",
            "code": "\nundefined4 processData_08004198(int *data)\n\n{\n  short counter;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  counter = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data",
                "sVar1": "counter",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_and_set_clocks_08004204",
            "code": "\nvoid calculateAndSetClocks_08004204(int *baseAddress)\n\n{\n  int pclk1;\n  int pclk1_2;\n  int pclk1_3;\n  int pclk1_4;\n  int pclk1_5;\n  int pclk1_6;\n  int pclk1_7;\n  int pclk1_8;\n  int pclk1_9;\n  int baseAddressVar;\n  \n  *(uint *)(*baseAddress + 0x10) = *(uint *)(*baseAddress + 0x10) & 0xffffcfff | baseAddress[3];\n  *(uint *)(*baseAddress + 0xc) =\n       baseAddress[2] | baseAddress[4] | baseAddress[5] | *(uint *)(*baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(*baseAddress + 0x14) = *(uint *)(*baseAddress + 0x14) & 0xfffffcff | baseAddress[6];\n  baseAddressVar = *baseAddress;\n  if (baseAddressVar != 0x40013800) {\n    pclk1 = HAL_RCC_GetPCLK1Freq();\n    pclk1_6 = baseAddress[1];\n    pclk1_2 = HAL_RCC_GetPCLK1Freq();\n    pclk1_7 = baseAddress[1];\n    pclk1_3 = HAL_RCC_GetPCLK1Freq();\n    pclk1_8 = baseAddress[1];\n    pclk1_4 = HAL_RCC_GetPCLK1Freq();\n    pclk1_9 = baseAddress[1];\n    pclk1_5 = HAL_RCC_GetPCLK1Freq();\n    *(uint *)(baseAddressVar + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1_4 * 0x19) / (uint)(pclk1_9 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1_5 * 0x19) / (ulonglong)(uint)(baseAddress[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1_2 * 0x19) / (uint)(pclk1_7 << 2) +\n           (int)(((ulonglong)(uint)(pclk1_3 * 0x19) / (ulonglong)(uint)(pclk1_8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1 * 0x19) / (ulonglong)(uint)(pclk1_6 << 2)) / 100) * 0x10;\n    return;\n  }\n  baseAddressVar = HAL_RCC_GetPCLK2Freq();\n  pclk1_5 = baseAddress[1];\n  pclk1 = HAL_RCC_GetPCLK2Freq();\n  pclk1_6 = baseAddress[1];\n  pclk1_2 = HAL_RCC_GetPCLK2Freq();\n  pclk1_7 = baseAddress[1];\n  pclk1_3 = HAL_RCC_GetPCLK2Freq();\n  pclk1_8 = baseAddress[1];\n  pclk1_4 = HAL_RCC_GetPCLK2Freq();\n  pclk2_result = ((uint)((int)((ulonglong)\n                               (((uint)(pclk1_3 * 0x19) / (uint)(pclk1_8 << 2) +\n                                (int)(((ulonglong)(uint)(pclk1_4 * 0x19) /\n                                      (ulonglong)(uint)(baseAddress[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(pclk1 * 0x19) / (uint)(pclk1_6 << 2) +\n                   (int)(((ulonglong)(uint)(pclk1_2 * 0x19) / (ulonglong)(uint)(pclk1_7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(baseAddressVar * 0x19) / (ulonglong)(uint)(pclk1_5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_and_set_clocks_08004204",
                "param_1": "baseAddress",
                "iVar1": "pclk1",
                "iVar2": "pclk1_2",
                "iVar3": "pclk1_3",
                "iVar4": "pclk1_4",
                "iVar5": "pclk1_5",
                "iVar6": "pclk1_6",
                "iVar7": "pclk1_7",
                "iVar8": "pclk1_8",
                "iVar9": "pclk1_9",
                "iVar10": "baseAddressVar",
                "iRam40013808": "pclk2_result"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_compatibility_080043b4",
            "code": "\nundefined4 checkCompatibility_080043b4(uint **inputData,uint allowedFlags,uint expectedResult,int startTime,uint timeout)\n\n{\n  int currentTime;\n  \n  do {\n    if (((allowedFlags & ~**inputData) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout))));\n  (*inputData)[3] = (*inputData)[3] & 0xfffffe5f;\n  (*inputData)[5] = (*inputData)[5] & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x39) = 0x20;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  *(undefined *)(inputData + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_compatibility_080043b4",
                "param_1": "inputData",
                "param_2": "allowedFlags",
                "param_3": "expectedResult",
                "param_4": "startTime",
                "param_5": "timeout",
                "iVar1": "currentTime"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "initialize_uart_0800441a",
            "code": "\nundefined4 initialize_uart_0800441a(int *uart_handle)\n\n{\n  if (uart_handle != (int *)0x0) {\n    if (*(char *)((int)uart_handle + 0x39) == '\\0') {\n      *(undefined *)(uart_handle + 0xe) = 0;\n      initialize_uart_0800441a_peripherals();\n    }\n    *(undefined *)((int)uart_handle + 0x39) = 0x24;\n    *(uint *)(*uart_handle + 0xc) = *(uint *)(*uart_handle + 0xc) & 0xffffdfff;\n    set_uart_configuration(uart_handle);\n    *(uint *)(*uart_handle + 0x10) = *(uint *)(*uart_handle + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_handle + 0x14) = *(uint *)(*uart_handle + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_handle + 0xc) = *(uint *)(*uart_handle + 0xc) | 0x2000;\n    var1 = 0;\n    *(undefined *)((int)uart_handle + 0x39) = 0x20;\n    *(undefined *)((int)uart_handle + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "param_1": "uart_handle",
                "HAL_UART_MspInit": "initialize_uart_peripherals",
                "UART_SetConfig": "set_uart_configuration",
                "param_1[0xf]": "var1"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 processData_08004478(int *dataBuffer,ushort *inputBuffer,int inputSize,undefined4 timeout)\n\n{\n  int error;\n  undefined4 result;\n  \n  if (*(char *)((int)dataBuffer + 0x39) == ' ') {\n    if (inputBuffer == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (inputSize == 0) {\n      result = 1;\n    }\n    else if (*(char *)(dataBuffer + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(dataBuffer + 0xe) = 1;\n      dataBuffer[0xf] = 0;\n      *(undefined *)((int)dataBuffer + 0x39) = 0x21;\n      result = HAL_GetTick();\n      *(short *)(dataBuffer + 9) = (short)inputSize;\n      *(short *)((int)dataBuffer + 0x26) = (short)inputSize;\n      while (*(short *)((int)dataBuffer + 0x26) != 0) {\n        *(short *)((int)dataBuffer + 0x26) = *(short *)((int)dataBuffer + 0x26) + -1;\n        if (dataBuffer[2] == 0x1000) {\n          error = UART_WaitOnFlagUntilTimeout(dataBuffer,0x80,0,result,timeout);\n          if (error != 0) {\n            return 3;\n          }\n          *(uint *)(*dataBuffer + 4) = *inputBuffer & 0x1ff;\n          if (dataBuffer[4] == 0) {\n            inputBuffer = inputBuffer + 1;\n          }\n          else {\n            inputBuffer = (ushort *)((int)inputBuffer + 1);\n          }\n        }\n        else {\n          error = UART_WaitOnFlagUntilTimeout(dataBuffer,0x80,0,result,timeout);\n          if (error != 0) {\n            return 3;\n          }\n          *(uint *)(*dataBuffer + 4) = (uint)*(byte *)inputBuffer;\n          inputBuffer = (ushort *)((int)inputBuffer + 1);\n        }\n      }\n      error = UART_WaitOnFlagUntilTimeout(dataBuffer,0x40,0,result,timeout);\n      if (error == 0) {\n        *(undefined *)((int)dataBuffer + 0x39) = 0x20;\n        *(undefined *)(dataBuffer + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "dataBuffer",
                "param_2": "inputBuffer",
                "param_3": "inputSize",
                "param_4": "timeout",
                "iVar1": "error",
                "uVar2": "result"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "process_data_0800455a",
            "code": "\nundefined4 processData_0800455a(int *data,int value_1,int value_2)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    data_element_1 = value_1;\n    *(short *)(data + 9) = (short)value_2;\n    *(short *)((int)data + 0x26) = (short)value_2;\n    data_element_4 = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "process_data_0800455a",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "data_element_1",
                "param_1[0xf]": "data_element_4"
            },
            "calling": [
                "uart_attach_tx_callback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "check_param_validity_080045a2",
            "code": "\nundefined4 check_param_validity_080045a2(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "check_param_validity_080045a2",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[0xf]"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "set_flag_and_trigger_callback_080045fe",
            "code": "\nundefined4 setFlagAndTriggerCallback_080045fe(int *flagPtr)\n\n{\n  *(uint *)(*flagPtr + 0xc) = *(uint *)(*flagPtr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)flagPtr + 0x39) = 0x20;\n  transmissionCompleteCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "set_flag_and_trigger_callback_080045fe",
                "param_1": "flagPtr",
                "HAL_UART_TxCpltCallback()": "transmissionCompleteCallback()"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "process_data_08004618",
            "code": "\nundefined4 processData_08004618(int *data)\n\n{\n  byte *bytePtr;\n  short count;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPtr = (undefined *)data[10];\n    data[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePtr = (byte *)data[10];\n    data[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "count",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "handle_uart_event_080046b8",
            "code": "\nvoid handleUARTEvent_080046b8(uint **eventData)\n\n{\n  int errorCode;\n  uint eventFlags;\n  uint *eventDataPtr;\n  uint flag;\n  uint eventMask;\n  \n  eventDataPtr = *eventData;\n  eventMask = *eventDataPtr;\n  eventFlags = eventDataPtr[3];\n  if ((((eventMask & 0xf) == 0) && ((eventMask & 0x20) != 0)) && ((eventFlags & 0x20) != 0)) {\n    UART_Receive_IT(eventData);\n    return;\n  }\n  if (((eventMask & 0xf) == 0) || ((flag = eventDataPtr[5] & 1, flag == 0 && ((eventFlags & 0x120) == 0)))) {\n    if (((eventMask & 0x80) != 0) && ((eventFlags & 0x80) != 0)) {\n      UART_Transmit_IT(eventData);\n      return;\n    }\n    if (((eventMask & 0x40) != 0) && ((eventFlags & 0x40) != 0)) {\n      UART_EndTransmit_IT(eventData);\n    }\n  }\n  else {\n    if (((eventMask & 1) != 0) && ((eventFlags & 0x100) != 0)) {\n      eventData[0xf] = (uint *)((uint)eventData[0xf] | 1);\n    }\n    if (((eventMask & 4) != 0) && (flag != 0)) {\n      eventData[0xf] = (uint *)((uint)eventData[0xf] | 2);\n    }\n    if (((eventMask & 2) != 0) && (flag != 0)) {\n      eventData[0xf] = (uint *)((uint)eventData[0xf] | 4);\n    }\n    if (((eventMask & 8) != 0) && (flag != 0)) {\n      eventData[0xf] = (uint *)((uint)eventData[0xf] | 8);\n    }\n    if (eventData[0xf] != (uint *)0x0) {\n      if (((eventMask & 0x20) != 0) && ((eventFlags & 0x20) != 0)) {\n        UART_Receive_IT(eventData);\n      }\n      if ((((uint)eventData[0xf] & 8) == 0) && (((*eventData)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(eventData);\n        eventData[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(eventData);\n      eventDataPtr = *eventData;\n      if ((eventDataPtr[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(eventData);\n        return;\n      }\n      eventDataPtr[5] = eventDataPtr[5] & 0xffffffbf;\n      if (eventData[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(eventData);\n        return;\n      }\n      eventData[0xd][0xd] = (uint)&LAB_080047d8_1;\n      errorCode = HAL_DMA_Abort_IT(eventData[0xd]);\n      if (errorCode != 0) {\n        (*(code *)eventData[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "handle_uart_event_080046b8",
                "param_1": "eventData",
                "iVar1": "errorCode",
                "uVar2": "eventFlags",
                "puVar3": "eventDataPtr",
                "uVar4": "flag",
                "uVar5": "eventMask"
            },
            "calling": [],
            "called": [
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_EndRxTransfer",
                "UART_Transmit_IT",
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "input"
            },
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "get_bit_080047f4",
            "code": "\nuint get_bit_080047f4(uint value,int base_address)\n\n{\n  return *(uint *)(base_address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "get_bit_080047f4",
                "param_1": "value",
                "param_2": "base_address"
            },
            "calling": [
                "digitalRead",
                "digitalWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "update_bit_0800480a",
            "code": "\nvoid updateBit_0800480a(uint bitIndex,int dataAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(dataAddress + shiftedIndex * 4) = *(uint *)(dataAddress + shiftedIndex * 4) | 1 << (bitIndex & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "update_bit_0800480a",
                "param_1": "bitIndex",
                "param_2": "dataAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "clear_bit_in_array_08004828",
            "code": "\nvoid clearBitInArray_08004828(uint value,int array)\n\n{\n  uint shiftAmount;\n  \n  shiftAmount = (value << 0x18) >> 0x1c;\n  *(uint *)(array + shiftAmount * 4) = *(uint *)(array + shiftAmount * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "clear_bit_in_array_08004828",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_memory_address_08004848",
            "code": "\nundefined4 getMemoryAddress_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "input"
            },
            "calling": [
                "digitalRead",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_device_flag_08004884",
            "code": "\n\n\nundefined4 setDeviceFlag_08004884(undefined4 deviceType)\n\n{\n  undefined4 returnValue;\n  \n  switch(deviceType) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnValue = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnValue = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnValue = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnValue = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnValue = 0x40011800;\n    break;\n  default:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_device_flag_08004884",
                "param_1": "deviceType",
                "uVar1": "returnValue"
            },
            "calling": [
                "uart_init",
                "digital_io_init",
                "HAL_ADC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "pinmap_result_0800492c",
            "code": "\nuint pinmap_result_0800492c(undefined4 pinmap_param1,undefined4 pinmap_param2,undefined4 pinmap_param3,undefined4 pinmap_param4)\n\n{\n  int pinmap_result_0800492c_code;\n  uint shifted_result;\n  \n  pinmap_result_0800492c_code = pinmap_function(pinmap_param1,&DAT_08007400,pinmap_param3,pinmap_param4,pinmap_param4);\n  shifted_result = (uint)(pinmap_result_0800492c_code << 0xc) >> 0x1b;\n  if (0x10 < shifted_result - 1) {\n    shifted_result = 0;\n  }\n  return shifted_result;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "pinmap_result_0800492c",
                "param_1": "pinmap_param1",
                "param_2": "pinmap_param2",
                "param_3": "pinmap_param3",
                "param_4": "pinmap_param4",
                "iVar1": "pinmap_result_code",
                "uVar2": "shifted_result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "map_pin_to_value_08004948",
            "code": "\nundefined4 map_pin_to_value_08004948(undefined4 pin,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(pin,&DAT_080074b4,param3,param4,param4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "map_pin_to_value_08004948",
                "param_1": "pin",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "initialize_gpio_port_08004974",
            "code": "\n\n\nvoid initialize_GPIO_Port_08004974(int *input_parameters,undefined4 clock_setting)\n\n{\n  undefined4 GPIO_Port_Clock_Result;\n  uint GPIO_Init_Value;\n  int input_value;\n  uint pin_mask;\n  undefined4 GPIO_Init_Mode_Value;\n  undefined4 GPIO_Init_Pull_Value;\n  \n  input_value = *input_parameters;\n  if (input_value == 0x40012400) {\n    GPIO_Init_Value = _DAT_40021018 | 0x200;\n    input_value = 0x200;\n    _DAT_40021018 = GPIO_Init_Value;\n  }\n  else {\n    GPIO_Init_Value = 0x40012800;\n    if (input_value == 0x40012800) {\n      GPIO_Init_Value = _DAT_40021018 | 0x400;\n      input_value = 0x400;\n      _DAT_40021018 = GPIO_Init_Value;\n    }\n  }\n  GPIO_Port_Clock_Result = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,clock_setting,GPIO_Init_Value,input_value);\n  pin_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  GPIO_Init_Mode_Value = 3;\n  GPIO_Init_Pull_Value = 0;\n  HAL_GPIO_Init(GPIO_Port_Clock_Result,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "initialize_gpio_port_08004974",
                "param_1": "input_parameters",
                "param_2": "clock_setting",
                "uVar1": "GPIO_Port_Clock_Result",
                "uVar2": "GPIO_Init_Value",
                "iVar3": "input_value",
                "local_18": "pin_mask",
                "local_14": "GPIO_Init_Mode_Value",
                "local_10": "GPIO_Init_Pull_Value"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_settings_080049f0",
            "code": "\n\n\nvoid updateSettings_080049f0(int *settings)\n\n{\n  if (*settings != 0x40012400) {\n    if (*settings == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_settings_080049f0",
                "param_1": "settings"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "initialize_adc_and_peripheral_08004a4c",
            "code": "\nundefined2 initialize_ADC_and_peripheral_08004a4c(undefined4 peripheral_id)\n\n{\n  int error_code;\n  uint adc_state;\n  undefined2 adc_value;\n  uint adc_channel;\n  undefined4 adc_config1;\n  undefined4 adc_config2;\n  int peripheral_instance;\n  undefined4 adc_config3;\n  undefined4 adc_config4;\n  undefined4 adc_config5;\n  undefined4 adc_config6;\n  undefined4 adc_config7;\n  undefined4 adc_config8;\n  undefined4 adc_config9;\n  undefined4 adc_config10;\n  \n  memset(&peripheral_instance,0,0x30);\n  adc_channel = 0;\n  adc_config1 = 0;\n  adc_config2 = 0;\n  adc_value = 0;\n  peripheral_instance = pinmap_peripheral(peripheral_id,&DAT_08007400);\n  if (peripheral_instance == 0) {\n    adc_value = 0;\n  }\n  else {\n    adc_config3 = 0;\n    adc_config4 = 0;\n    adc_config5 = 0;\n    adc_config7 = 0;\n    adc_config9 = 0xe0000;\n    adc_config10 = 0;\n    adc_config6 = 1;\n    adc_config8 = 0;\n    DAT_20000080 = (undefined)peripheral_id;\n    error_code = HAL_ADC_Init(&peripheral_instance);\n    if (error_code == 0) {\n      adc_channel = get_adc_channel(peripheral_id);\n      if (adc_channel < 0x12) {\n        adc_config1 = 1;\n        adc_config2 = 2;\n        error_code = HAL_ADC_ConfigChannel(&peripheral_instance,&adc_channel);\n        if (error_code == 0) {\n          error_code = HAL_ADCEx_Calibration_Start(&peripheral_instance);\n          if (error_code == 0) {\n            error_code = HAL_ADC_Start(&peripheral_instance);\n            if (error_code == 0) {\n              error_code = HAL_ADC_PollForConversion(&peripheral_instance,10);\n              if (error_code == 0) {\n                adc_state = HAL_ADC_GetState(&peripheral_instance);\n                if ((adc_state & 0x200) != 0) {\n                  adc_value = HAL_ADC_GetValue(&peripheral_instance);\n                }\n                error_code = HAL_ADC_Stop(&peripheral_instance);\n                if (error_code == 0) {\n                  error_code = HAL_ADC_DeInit(&peripheral_instance);\n                  if (error_code != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "initialize_adc_and_peripheral_08004a4c",
                "param_1": "peripheral_id",
                "local_46": "adc_value",
                "local_44": "adc_channel",
                "local_40": "adc_config1",
                "local_3c": "adc_config2",
                "local_38": "peripheral_instance",
                "local_34": "adc_config3",
                "local_30": "adc_config4",
                "local_2c": "adc_config5",
                "local_28": "adc_config6",
                "local_24": "adc_config7",
                "local_20": "adc_config8",
                "local_1c": "adc_config9",
                "local_10": "adc_config10",
                "iVar1": "error_code",
                "uVar2": "adc_state"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "HAL_ADC_Init",
                "memset",
                "HAL_ADC_GetValue",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_Stop",
                "HAL_ADC_Start",
                "HAL_ADC_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "disable_timer_clock_08004b34",
            "code": "\nvoid disable_timer_clock_08004b34(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "stop_pwm_if_valid_channel_08004b3c",
            "code": "\nvoid stopPWMIfValidChannel_08004b3c(undefined4 peripheral)\n\n{\n  int pwmChannel;\n  uint pinFunction;\n  int pwmHandles [17];\n  \n  pwmHandles[0] = pinmap_peripheral(peripheral,&DAT_080074b4);\n  if ((pwmHandles[0] != 0) &&\n     ((((pwmChannel = get_pwm_channel(peripheral), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    pinFunction = pinmap_function(peripheral,&DAT_080074b4);\n    if ((pinFunction & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(pwmHandles,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(pwmHandles,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(pwmHandles);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "stop_pwm_if_valid_channel_08004b3c",
                "param_1": "peripheral",
                "iVar1": "pwmChannel",
                "uVar2": "pinFunction",
                "local_50": "pwmHandles"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIM_PWM_DeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "get_system_time_08004b94",
            "code": "\nvoid get_system_time_08004b94(void)\n\n{\n  current_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "get_system_time_08004b94",
                "HAL_GetTick": "current_tick"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "handle_tick_interrupt_08004b9e",
            "code": "\nvoid handleTickInterrupt_08004b9e(void)\n\n{\n  incrementTickCounter();\n  handleSysTickInterrupt();\n  executeNoOsSysTickHandler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "handle_tick_interrupt_08004b9e",
                "HAL_IncTick": "incrementTickCounter",
                "HAL_SYSTICK_IRQHandler": "handleSysTickInterrupt",
                "noOsSystickHandler": "executeNoOsSysTickHandler"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "noOsSystickHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_gpio_08004bb0",
            "code": "\n\n\nvoid initialize_GPIO_08004bb0(uint pin_number,undefined4 pin_mode,undefined4 pin_pull)\n\n{\n  undefined4 gpio_port;\n  uint pin_mask;\n  undefined4 new_param_2;\n  undefined4 new_param_3;\n  undefined4 constant;\n  \n  gpio_port = set_GPIO_Port_Clock((pin_number << 0x18) >> 0x1c);\n  pin_mask = 1 << (pin_number & 0xf) & 0xffff;\n  constant = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pin_number - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pin_number == 0xf) || (pin_number == 0x13)) || (pin_number == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  new_param_2 = pin_mode;\n  new_param_3 = pin_pull;\n  HAL_GPIO_Init(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_gpio_08004bb0",
                "param_1": "pin_number",
                "param_2": "pin_mode",
                "param_3": "pin_pull",
                "uVar1": "gpio_port",
                "local_20": "pin_mask",
                "local_1c": "new_param_2",
                "local_18": "new_param_3",
                "local_14": "constant"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_pin_state_08004c30",
            "code": "\nvoid setPinState_08004c30(undefined4 GPIO_port,undefined2 GPIO_pin,int state,undefined4 param_multiplier)\n\n{\n  if (state == 0) {\n    HAL_GPIO_WritePin(GPIO_port,GPIO_pin,0,param_multiplier,param_multiplier);\n    return;\n  }\n  HAL_GPIO_WritePin(GPIO_port,GPIO_pin,1,param_multiplier,param_multiplier);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_pin_state_08004c30",
                "param_1": "GPIO_port",
                "param_2": "GPIO_pin",
                "param_3": "state",
                "param_4": "param_multiplier"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "read_pin_from_gpio_08004c48",
            "code": "\nvoid readPinFromGPIO_08004c48(undefined4 gpioPin,undefined2 gpioMode,undefined4 param3,undefined4 param4)\n\n{\n  HAL_GPIO_ReadPin(gpioPin,gpioMode,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "read_pin_from_gpio_08004c48",
                "param_1": "gpioPin",
                "param_2": "gpioMode",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_system_08004c52",
            "code": "\nvoid initializeSystem_08004c52(void)\n\n{\n  initializeHardwareAbstractionLayer();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "HAL_Init": "initializeHardwareAbstractionLayer",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_in_array_08004c5e",
            "code": "\nundefined4 find_value_in_array_08004c5e(int target_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (*array_ptr == target_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return *(undefined4 *)(array_ptr + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "pinmap_find_peripheral",
                "pinmap_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "find_peripheral_08004c78",
            "code": "\nundefined4 find_peripheral_08004c78(int input)\n\n{\n  undefined4 peripheral;\n  \n  if (input != -1) {\n    peripheral = pinmap_find_peripheral_08004c78();\n    return peripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "find_peripheral_08004c78",
                "param_1": "input",
                "uVar1": "peripheral"
            },
            "calling": [
                "uart_init",
                "adc_read_value",
                "pwm_stop",
                "uart_debug_write",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_index_08004c8a",
            "code": "\nint find_value_index_08004c8a(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_index_08004c8a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_find_pin",
                "pinmap_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_pin_08004ca2",
            "code": "\nundefined4 findPin_08004ca2(int pin)\n\n{\n  undefined4 foundPin;\n  \n  if (pin != 0) {\n    foundPin = pinmap_find_pin();\n    return foundPin;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_pin_08004ca2",
                "param_1": "pin",
                "uVar1": "foundPin"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_parameter_value_08004cb2",
            "code": "\nundefined4 find_parameter_value_08004cb2(int value_to_find,char *data_array)\n\n{\n  while( true ) {\n    if (*data_array == -1) {\n      return 0xffffffff;\n    }\n    if (*data_array == value_to_find) break;\n    data_array = data_array + 0xc;\n  }\n  return *(undefined4 *)(data_array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_parameter_value_08004cb2",
                "param_1": "value_to_find",
                "param_2": "data_array"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_function_or_default_08004cce",
            "code": "\nundefined4 find_function_or_default_08004cce(int input)\n\n{\n  undefined4 result;\n  \n  if (input == -1) {\n    return 0xffffffff;\n  }\n  result = pinmap_find_function();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_function_or_default_08004cce",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "uart_init",
                "get_adc_channel",
                "get_pwm_channel",
                "pwm_stop"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "find_value_in_array_08004ce2",
            "code": "\nundefined4 find_value_in_array_08004ce2(int search_value,char *array_ptr)\n\n{\n  if (search_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (search_value == *array_ptr) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "find_value_in_array_08004ce2",
                "param_1": "search_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_smaller_value_08004d06",
            "code": "\nint compare_and_return_smaller_value_08004d06(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    if (value_1 == 0) {\n      return value_2;\n    }\n    if (value_2 == 0) {\n      return value_1;\n    }\n    value_1 = 0;\n  }\n  return value_1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_smaller_value_08004d06",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "calling": [
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_function_08004d18",
            "code": "\nvoid executeCallbackFunction_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_function_08004d18"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "run_infinite_loop_08004d40",
            "code": "\nvoid runInfiniteLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "run_infinite_loop_08004d40"
            },
            "calling": [
                "_Error_Handler",
                "SystemClock_Config"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_system_08004d44",
            "code": "\n\n\nvoid initializeSystem_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_system_08004d44"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "clear_flags_08004d90",
            "code": "\n\n\nvoid clearFlags_08004d90(int *flags)\n\n{\n  if (*flags == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*flags == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*flags == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*flags == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "clear_flags_08004d90",
                "param_1": "flags"
            },
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "decrement_by_four_08004df4",
            "code": "\nint decrementByFour_08004df4(int inputValue)\n\n{\n  return inputValue + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "decrement_by_four_08004df4",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_timer_function_08004df8",
            "code": "\nvoid executeTimerFunction_08004df8(int timerParam)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if ((*(code **)(timerObject + 0x4c) != (code *)0x0) && (*(char *)(timerParam + 0x1c) == '\\x01')) {\n    (**(code **)(timerObject + 0x4c))(timerObject,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_timer_function_08004df8",
                "param_1": "timerParam",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_timer_action_08004e12",
            "code": "\nvoid executeTimerAction_08004e12(void)\n\n{\n  int timerObj;\n  \n  timerObj = getTimerObject();\n  if (*(ActionFunction **)(timerObj + 0x48) != (ActionFunction *)0x0) {\n    (**(ActionFunction **)(timerObj + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_timer_action_08004e12",
                "iVar1": "timerObj",
                "get_timer_obj": "getTimerObject",
                "code": "ActionFunction"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "handle_tim_interrupt_08004e20",
            "code": "\nvoid handleTimInterrupt_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    HAL_TIM_IRQHandler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "handle_tim_interrupt_08004e20"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtractFour_08004e70(int inputValue)\n\n{\n  return inputValue + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "transmit_or_receive_data_08004e74",
            "code": "\nvoid transmitOrReceiveData_08004e74(int i2cObjAddress,int isTransmit,int expectedData,undefined4 callback)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2cObjAddress();\n  if (expectedData == *(int *)(i2cObjAddress + 0xc)) {\n    if (isTransmit == 0) {\n      *(undefined *)(i2cObj + 0x88) = 0;\n      *(undefined *)(i2cObj + 0x5c) = 0;\n      if (*(code **)(i2cObj + 100) != (code *)0x0) {\n        (**(code **)(i2cObj + 100))();\n      }\n      transmitDataWithInterrupt(i2cObjAddress,i2cObj + 0x68,*(undefined *)(i2cObj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2cObj + 0x5c) = 1;\n    receiveDataWithInterrupt(i2cObjAddress,i2cObj + 0x68,0x20,8,callback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "transmit_or_receive_data_08004e74",
                "param_1": "i2cObjAddress",
                "param_2": "isTransmit",
                "param_3": "expectedData",
                "param_4": "callback",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2cObjAddress",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmitDataWithInterrupt",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receiveDataWithInterrupt"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "enable_i2_c_listen_mode_08004ec4",
            "code": "\nvoid enableI2CListenMode_08004ec4(undefined4 param)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (((*(code **)(i2cObj + 0x60) != (code *)0x0) && (*(char *)(i2cObj + 0x5c) == '\\x01')) &&\n     (*(char *)(i2cObj + 0x2c) != ' ')) {\n    (**(code **)(i2cObj + 0x60))(i2cObj + 0x68);\n  }\n  enableI2CListenInterrupt(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "enable_i2_c_listen_mode_08004ec4",
                "param_1": "param",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "enable_i2_c_listen_interrupts_08004ef4",
            "code": "\nvoid enableI2CListenInterrupts_08004ef4(undefined4 i2cObject)\n\n{\n  int i2cObjectPtr;\n  \n  i2cObjectPtr = get_i2c_obj();\n  if (*(char *)(i2cObjectPtr + 0x5d) == '\\0') {\n    HAL_I2C_EnableListen_IT(i2cObject);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "enable_i2_c_listen_interrupts_08004ef4",
                "param_1": "i2cObject",
                "iVar1": "i2cObjectPtr"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "configure_uart_pins_08004f4c",
            "code": "\n\n\nvoid configureUartPins_08004f4c(int *uart_pins)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpioPortC;\n  uint pinFunction;\n  uint pinMask;\n  uint pinConfig1;\n  uint pinConfig2;\n  undefined4 gpioInitStruct;\n  \n  if (uart_pins != (int *)0x0) {\n    peripheral1 = pinmap_peripheral((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n    peripheral2 = pinmap_peripheral((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n    if ((peripheral2 == 0) || (peripheral1 == 0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\",peripheral2);\n    }\n    else {\n      peripheral1 = pinmap_merge_peripheral(peripheral1);\n      *uart_pins = peripheral1;\n      if (peripheral1 == 0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (peripheral1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (peripheral1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        gpioPortC = set_GPIO_Port_Clock((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        pinFunction = pinmap_function((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n        pinMask = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        pinConfig1 = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        pinConfig2 = (pinFunction << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinFunction << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpioInitStruct = 3;\n        initializeGpio(gpioPortC,&pinMask);\n        gpioPortC = set_GPIO_Port_Clock((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        pinFunction = pinmap_function((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n        pinMask = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        pinConfig1 = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        pinConfig2 = (pinFunction << 0x1a) >> 0x1e;\n        initializeGpio(gpioPortC,&pinMask);\n        (&DAT_2000032c)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        HAL_UART_Init(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "param_1": "uart_pins",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpioPortC",
                "uVar4": "pinFunction",
                "local_20": "pinMask",
                "local_1c": "pinConfig1",
                "local_18": "pinConfig2",
                "local_14": "gpioInitStruct",
                "HAL_GPIO_Init": "initializeGpio"
            },
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_UART_Init",
                "iprintf",
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "pinmap_function",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_peripheral_08005384",
            "code": "\nvoid initializePeripheral_08005384(void)\n\n{\n  int result;\n  undefined4 peripheral;\n  \n  result = pinmap_peripheral(2,&DAT_0800764c);\n  if (result != 0) {\n    peripheral = pinmap_peripheral(2,&DAT_0800764c);\n    DAT_200000e1 = pinmap_pin(peripheral,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    uart_init(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_peripheral_08005384",
                "iVar1": "result",
                "uVar2": "peripheral"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_peripheral",
                "pinmap_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "transmit_data_080053d4",
            "code": "\nuint transmitData_080053d4(undefined4 data,uint length)\n\n{\n  int startTick;\n  int peripheralId;\n  uint index;\n  \n  startTick = HAL_GetTick();\n  peripheralId = pinmap_peripheral(2,&DAT_0800764c);\n  if (peripheralId == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_2000032c)[index] == 0 ||\n       (peripheralId = pinmap_peripheral(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[index] != peripheralId))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_200000cc) && (uart_debug_init(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    index = (uint)DAT_200000cc;\n  }\n  do {\n    peripheralId = HAL_UART_Transmit((&DAT_2000032c)[index],data,length & 0xffff,1000);\n    if (peripheralId == 0) {\n      return length;\n    }\n    peripheralId = HAL_GetTick();\n  } while ((uint)(peripheralId - startTick) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "transmit_data_080053d4",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "startTick",
                "iVar2": "peripheralId",
                "uVar3": "index"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "HAL_GetTick",
                "pinmap_peripheral",
                "uart_debug_init",
                "HAL_UART_Transmit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "check_uart_state_0800548c",
            "code": "\nbool check_UART_state_0800548c(int input)\n\n{\n  uint state;\n  \n  state = HAL_UART_GetState((&DAT_2000032c)[*(byte *)(input + 0x44)]);\n  return (state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "check_uart_state_0800548c",
                "param_1": "input",
                "uVar1": "state"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "is_uart_transmitting_080054b0",
            "code": "\nbool is_UART_Transmitting_080054b0(int device_index)\n\n{\n  uint uart_state;\n  \n  uart_state = get_UART_State((&DAT_2000032c)[*(byte *)(device_index + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "is_uart_transmitting_080054b0",
                "param_1": "device_index",
                "uVar1": "uart_state",
                "HAL_UART_GetState": "get_UART_State"
            },
            "calling": [],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "receive_data_080054d4",
            "code": "\nundefined4 receiveData_080054d4(int dataSize,undefined *receivedData,undefined4 param,undefined4 flag)\n\n{\n  int isSerialRxActive;\n  \n  if (dataSize == 0) {\n    return 0xffffffff;\n  }\n  isSerialRxActive = serial_rx_active();\n  if (isSerialRxActive == 0) {\n    *receivedData = *(undefined *)(dataSize + 0x45);\n    HAL_UART_Receive_IT((&DAT_2000032c)[*(byte *)(dataSize + 0x44)],dataSize + 0x45,1,&DAT_2000032c,\n                        flag);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "receive_data_080054d4",
                "param_1": "dataSize",
                "param_2": "receivedData",
                "param_3": "param",
                "param_4": "flag",
                "iVar1": "isSerialRxActive"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "initialize_serial_rx_08005510",
            "code": "\nvoid initialize_serial_rx_08005510(int serial_rx_ptr,undefined4 data_ptr,undefined4 unused_param,undefined4 priority)\n\n{\n  int is_active;\n  uint index;\n  \n  if (serial_rx_ptr != 0) {\n    is_active = serial_rx_active();\n    if (is_active == 0) {\n      index = (uint)*(byte *)(serial_rx_ptr + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = data_ptr;\n      *(int *)(&DAT_200002f0 + index * 4) = serial_rx_ptr;\n      HAL_NVIC_SetPriority((int)*(char *)(serial_rx_ptr + 0x5a),0,1,index,priority);\n      HAL_NVIC_EnableIRQ((int)*(char *)(serial_rx_ptr + 0x5a));\n      HAL_UART_Receive_IT((&DAT_2000032c)[*(byte *)(serial_rx_ptr + 0x44)],serial_rx_ptr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "initialize_serial_rx_08005510",
                "param_1": "serial_rx_ptr",
                "param_2": "data_ptr",
                "param_3": "unused_param",
                "param_4": "priority",
                "iVar1": "is_active",
                "uVar2": "index"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Receive_IT",
                "serial_rx_active",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "set_interrupt_priority_08005568",
            "code": "\nvoid set_interrupt_priority_08005568(int input_param,undefined4 priority)\n\n{\n  byte byte_val;\n  \n  if (input_param != 0) {\n    byte_val = *(byte *)(input_param + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byte_val * 4) = priority;\n    *(int *)(&DAT_20000318 + (uint)byte_val * 4) = input_param;\n    HAL_NVIC_SetPriority((int)*(char *)(input_param + 0x5a),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(input_param + 0x5a));\n    HAL_UART_Transmit_IT\n              ((&DAT_2000032c)[*(byte *)(input_param + 0x44)],\n               *(int *)(input_param + 100) + (uint)*(ushort *)(input_param + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "set_interrupt_priority_08005568",
                "param_1": "input_param",
                "param_2": "priority",
                "bVar1": "byte_val"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_index_by_value_080055bc",
            "code": "\nuint find_index_by_value_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_index_by_value_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_uart_command_080055e0",
            "code": "\nvoid executeUartCommand_080055e0(void)\n\n{\n  uint uartIndex;\n  \n  uartIndex = uart_index();\n  if (uartIndex < 5) {\n    (**(code **)(&DAT_200002dc + uartIndex * 4))(*(undefined4 *)(&DAT_200002f0 + uartIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_uart_command_080055e0",
                "uVar1": "uartIndex"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "transmit_data_08005604",
            "code": "\nvoid transmitData_08005604(void)\n\n{\n  uint uartIndex;\n  int result;\n  int uartAddress;\n  \n  uartIndex = uart_index();\n  uartAddress = *(int *)(&DAT_20000318 + uartIndex * 4);\n  if ((uartIndex < 5) && (result = (**(code **)(&DAT_20000304 + uartIndex * 4))(uartAddress), result != -1)) {\n    HAL_UART_Transmit_IT\n              ((&DAT_2000032c)[*(byte *)(uartAddress + 0x44)],\n               *(int *)(uartAddress + 100) + (uint)*(ushort *)(uartAddress + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "uVar1": "uartIndex",
                "iVar2": "result",
                "iVar3": "uartAddress"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "uart_index",
                "HAL_UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocate_memory_080056d8(int size)\n\n{\n  undefined *memory_block;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  memory_block = DAT_20000340;\n  if (DAT_20000340 + size <= stack_bottom) {\n    DAT_20000340 = DAT_20000340 + size;\n    return memory_block;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "memory_block",
                "&stack0x00000000": "stack_bottom"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "get_return_value_08005714",
            "code": "\nuint32_t get_return_value_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "get_return_value_08005714",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "initialize_memory_0800571a",
            "code": "\nundefined4 initializeMemory_0800571a(undefined4 param_1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_2": "memoryAddress"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "initialize_application_08005724",
            "code": "\nundefined4 initializeApplication_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "initialize_application_08005724"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_08005728",
            "code": "\nundefined4 initialize_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_08005728"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_application_0800572c",
            "code": "\nvoid initializeApplication_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_application_0800572c",
                "undefined4": "void"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "debug_write_uart_08005730",
            "code": "\nvoid debug_write_uart_08005730(undefined4 param_1,undefined4 data_1,undefined4 data_2,undefined4 data_3)\n\n{\n  uart_debug_write(data_1,data_2,data_2,data_3,data_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "debug_write_uart_08005730",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "loop_forever_0800573c",
            "code": "\nvoid loopForever_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "loop_forever_0800573c"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_data_08005740",
            "code": "\nundefined4 initializeData_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_data_08005740"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "check_return_value_08005750",
            "code": "\nint check_return_value_08005750(void)\n\n{\n  return_value 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "check_return_value_08005750",
                "undefined4": "int",
                "return": "return_value"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "get_updated_value_08005754",
            "code": "\nuint get_updated_value_08005754(uint input_value)\n\n{\n  bool is_valid_input;\n  char selected_char;\n  uint updated_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_valid_input = true;\n    }\n    else {\n      is_valid_input = false;\n    }\n  }\n  else {\n    is_valid_input = input_value < 0x3c;\n  }\n  if (is_valid_input) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    selected_char = (&DAT_080076f0)[input_value];\n  }\n  else {\n    selected_char = -1;\n  }\n  if (selected_char == -1) {\n    updated_value = 0;\n  }\n  else {\n    updated_value = adc_read_value();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return updated_value >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return updated_value << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return updated_value;\n}\n\n",
            "renaming": {
                "FUN_08005754": "get_updated_value_08005754",
                "param_1": "input_value",
                "bVar1": "is_valid_input",
                "cVar2": "selected_char",
                "uVar3": "updated_value"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "configure_and_initialize_digital_io_080057b4",
            "code": "\nvoid configureAndInitializeDigitalIO_080057b4(uint pinNumber,undefined4 configOption,undefined4 param3,undefined *pinConfigPtr)\n\n{\n  int isConfigured;\n  undefined *pinDataPtr;\n  int pinData;\n  \n  if (pinNumber < 0x3c) {\n    pinData = (int)(char)(&DAT_080076f0)[pinNumber];\n    pinDataPtr = &DAT_080076f0;\n  }\n  else {\n    pinData = -1;\n    pinDataPtr = pinConfigPtr;\n  }\n  if (pinData != -1) {\n    isConfigured = is_pin_configured(pinData,&DAT_20000344,param3,pinDataPtr,pinConfigPtr);\n    if (isConfigured != 0) {\n      isConfigured = pin_in_pinmap(pinData,&DAT_080074b4);\n      if (isConfigured != 0) {\n        pwm_stop(pinData);\n      }\n      reset_pin_configured(pinData,&DAT_20000344);\n    }\n    switch(configOption) {\n    case 0:\n      digital_io_init(pinData,0);\n      break;\n    case 1:\n      digital_io_init(pinData,1,0);\n      break;\n    case 2:\n      digital_io_init(pinData,0,1);\n      break;\n    case 3:\n      digital_io_init(pinData,0,2);\n    }\n    set_pin_configured(pinData,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "configure_and_initialize_digital_io_080057b4",
                "param_1": "pinNumber",
                "param_2": "configOption",
                "param_3": "param3",
                "param_4": "pinConfigPtr",
                "iVar1": "isConfigured",
                "puVar2": "pinDataPtr",
                "iVar3": "pinData"
            },
            "calling": [
                "setup",
                "MAX31855",
                "FUN_080013a4"
            ],
            "called": [
                "reset_pin_configured",
                "pin_in_pinmap",
                "digital_io_init",
                "pwm_stop",
                "set_pin_configured",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "configure_pin_and_write_08005848",
            "code": "\nvoid configure_pin_and_write_08005848(uint pin_index,undefined4 data,undefined4 config,undefined *pin_data_ptr)\n\n{\n  int is_configured;\n  undefined4 port;\n  undefined *pin_data;\n  uint pin_value;\n  \n  if (pin_index < 0x3c) {\n    pin_value = (uint)(char)(&DAT_080076f0)[pin_index];\n    pin_data = &DAT_080076f0;\n  }\n  else {\n    pin_value = 0xffffffff;\n    pin_data = pin_data_ptr;\n  }\n  if ((pin_value != 0xffffffff) &&\n     (is_configured = is_pin_configured(pin_value,&DAT_20000358,config,pin_data,pin_data_ptr), is_configured != 0)) {\n    port = get_GPIO_Port((pin_value << 0x18) >> 0x1c);\n    digital_io_write(port,1 << (pin_value & 0xf) & 0xffff,data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "configure_pin_and_write_08005848",
                "param_1": "pin_index",
                "param_2": "data",
                "param_3": "config",
                "param_4": "pin_data_ptr",
                "iVar1": "is_configured",
                "uVar2": "port",
                "puVar3": "pin_data",
                "uVar4": "pin_value"
            },
            "calling": [
                "setup",
                "readData",
                "MAX31855",
                "pulseEnable",
                "FUN_080013a4",
                "write8bits",
                "write4bits",
                "loop",
                "send"
            ],
            "called": [
                "get_GPIO_Port",
                "digital_io_write",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_pin_status_08005890",
            "code": "\nchar check_pin_status_08005890(uint pin_number)\n\n{\n  char pin_status;\n  int is_configured;\n  undefined4 gpio_port;\n  uint pin_value;\n  \n  if (pin_number < 0x3c) {\n    pin_value = (uint)(char)(&DAT_080076f0)[pin_number];\n  }\n  else {\n    pin_value = 0xffffffff;\n  }\n  if (pin_value == 0xffffffff) {\n    pin_status = '\\0';\n  }\n  else {\n    is_configured = is_pin_configured(pin_value,&DAT_20000358);\n    if (is_configured == 0) {\n      pin_status = '\\0';\n    }\n    else {\n      gpio_port = get_GPIO_Port((pin_value << 0x18) >> 0x1c);\n      pin_status = digital_io_read(gpio_port,1 << (pin_value & 0xf) & 0xffff);\n    }\n  }\n  if (pin_status != '\\0') {\n    pin_status = '\\x01';\n  }\n  return pin_status;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_pin_status_08005890",
                "param_1": "pin_number",
                "cVar1": "pin_status",
                "iVar2": "is_configured",
                "uVar3": "gpio_port",
                "uVar4": "pin_value"
            },
            "calling": [
                "readData",
                "loop"
            ],
            "called": [
                "digital_io_read",
                "get_GPIO_Port",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "get_current_millisecond_080058e0",
            "code": "\nvoid get_current_millisecond_080058e0(void)\n\n{\n  current_millisecond();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "get_current_millisecond_080058e0",
                "GetCurrentMilli": "current_millisecond"
            },
            "calling": [
                "setup",
                "Compute",
                "FUN_08001ab0",
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_value_0800591e",
            "code": "\nushort calculateValue_0800591e(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x134) + 0x40) - *(short *)(inputValue + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_value_0800591e",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "update_buffer_0800598a",
            "code": "\nvoid updateBuffer_0800598a(int UART_handle)\n\n{\n  int readResult;\n  ushort newIndex;\n  undefined receivedData;\n  \n  readResult = uart_getc(UART_handle,&receivedData);\n  if ((readResult == 0) &&\n     (newIndex = *(short *)(UART_handle + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(UART_handle + 0x62))) {\n    *(undefined *)(*(int *)(UART_handle + 0x5c) + (uint)*(ushort *)(UART_handle + 0x60)) = receivedData;\n    *(ushort *)(UART_handle + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "update_buffer_0800598a",
                "param_1": "UART_handle",
                "iVar1": "readResult",
                "uVar2": "newIndex",
                "local_9": "receivedData"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_parameters_08005a44",
            "code": "\nvoid initializeParameters_08005a44(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_parameters_08005a44",
                "param_1": "baseAddress"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_hardware_serial_08005a68",
            "code": "\nvoid initializeHardwareSerial_08005a68(int serialPort,undefined4 baudRate,byte settings)\n\n{\n  uint returnStatus;\n  char *errorMessage;\n  byte settingsBits;\n  int settingsCount;\n  byte *bytePointer;\n  char unaff_var4;\n  int unaff_var6;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x140) = settings;\n  settingsBits = settings & 7;\n  if (settingsBits == 4) {\n    settingsCount = 7;\n  }\n  else if (settingsBits == 6) {\n    settingsCount = 8;\n  }\n  else if (settingsBits == 2) {\n    settingsCount = 6;\n  }\n  else {\n    settingsCount = 0;\n  }\n  if ((settings & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    settingsCount = settingsCount + 1;\n  }\n  else if ((settings & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    settingsCount = settingsCount + 1;\n  }\n  if ((settings & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (settingsCount == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (settingsCount == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    settingsCount = 0;\n  }\n  if (settingsCount != 0) {\n    uart_init(serialPort + 0xd4);\n    uart_attach_rx_callback(serialPort + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTable = (code *)0x8005b12;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  bytePointer = *(byte **)(returnStatus + unaff_var6);\n  errorMessage[0x1e] = unaff_var4;\n  *(undefined *)(*bytePointer + 0x1e) = 0;\n  if (returnStatus < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[returnStatus];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_hardware_serial_08005a68",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "settings",
                "extraout_r1": "returnStatus",
                "pcVar1": "errorMessage",
                "bVar2": "settingsBits",
                "iVar3": "settingsCount",
                "pbVar4": "bytePointer",
                "unaff_r4": "unaff_var4",
                "unaff_r6": "unaff_var6",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "uart_attach_rx_callback",
                "uart_init",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_default_value_08005b24",
            "code": "\nvoid setDefaultValue_08005b24(int targetAddress,uint threshold)\n\n{\n  undefined defaultValue;\n  code *jumpTable;\n  \n  if (threshold < 0x3c) {\n    defaultValue = (&DAT_080076f0)[threshold];\n  }\n  else {\n    defaultValue = 0xff;\n  }\n  *(undefined *)(targetAddress + 0x12d) = defaultValue;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_default_value_08005b24",
                "param_1": "targetAddress",
                "param_2": "threshold",
                "uVar1": "defaultValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_byte_based_on_index_08005b3c",
            "code": "\nvoid setByteBasedOnIndex_08005b3c(int memoryAddress,uint index)\n\n{\n  undefined byteValue;\n  \n  if (index < 0x3c) {\n    byteValue = (&DAT_080076f0)[index];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(memoryAddress + 300) = byteValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_byte_based_on_index_08005b3c",
                "param_1": "memoryAddress",
                "param_2": "index",
                "uVar1": "byteValue"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_communication_08005b54",
            "code": "\nundefined4 *\ninitializeCommunication_08005b54(undefined4 *config,undefined4 pin,undefined4 rxConfig,undefined4 txConfig)\n\n{\n  undefined pinValue;\n  \n  config[1] = 0;\n  config[2] = 1000;\n  *config = &PTR_LAB_080059c8_1_08007804;\n  if (config == (undefined4 *)&DAT_2000036c) {\n    setRx(&DAT_2000036c,0,rxConfig,&DAT_2000036c,txConfig);\n    setTx(&DAT_2000036c,1);\n  }\n  else {\n    pinValue = pinmap_pin(pin,&DAT_08007604);\n    *(undefined *)((int)config + 0x12d) = pinValue;\n    pinValue = pinmap_pin(pin,&DAT_0800764c);\n    *(undefined *)(config + 0x4b) = pinValue;\n  }\n  init(config);\n  return config;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_communication_08005b54",
                "param_1": "config",
                "param_2": "pin",
                "param_3": "rxConfig",
                "param_4": "txConfig",
                "uVar1": "pinValue"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "init",
                "pinmap_pin",
                "setRx",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_serial_connection_08005bb0",
            "code": "\nvoid initializeSerialConnection_08005bb0(int status,int code,undefined4 data,undefined4 flag)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (code == 0xffff) {\n    configureSerialPort(&DAT_2000036c,0x40004400,data,0xffff,flag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_serial_connection_08005bb0",
                "param_1": "status",
                "param_2": "code",
                "param_3": "data",
                "param_4": "flag",
                "HardwareSerial": "configureSerialPort"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initializeData_08005c1c(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08007858;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_ip_address_08005c38",
            "code": "\nvoid initializeIPAddress_08005c38(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    IPAddress(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_ip_address_08005c38",
                "param_1": "flag",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "perform_action_08005c96",
            "code": "\nundefined4 performAction_08005c96(int *array,int size,undefined4 input,undefined4 output)\n\n{\n  undefined4 length;\n  \n  if (size != 0) {\n    length = strlen(size);\n    length = (**(code **)(*array + 4))(array,size,length,*(code **)(*array + 4),output);\n    return length;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "perform_action_08005c96",
                "param_1": "array",
                "param_2": "size",
                "param_3": "input",
                "param_4": "output",
                "uVar1": "length"
            },
            "calling": [
                "setup",
                "printFloat",
                "FUN_08005cd4",
                "loop"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid executeFunction_08005cb6(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "functionPointer"
            },
            "calling": [
                "printFloat",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_08005cc0",
            "code": "\nvoid executeFunction_08005cc0(int *functionPointer,undefined4 arg1,undefined4 arg2,undefined4 argument)\n\n{\n  (**(code **)(*functionPointer + 4))(functionPointer,&DAT_0800786c,2,*(code **)(*functionPointer + 4),argument);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "functionPointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "argument"
            },
            "calling": [
                "println",
                "FUN_08005cd4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_sum_08005cd4",
            "code": "\nint calculate_sum_08005cd4(undefined4 input_param)\n\n{\n  int action_result;\n  int function_result;\n  \n  action_result = perform_action_08005c96();\n  function_result = execute_function_08005cc0(input_param);\n  return function_result + action_result;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_sum_08005cd4",
                "param_1": "input_param",
                "iVar1": "action_result",
                "iVar2": "function_result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_to_base_08005ce8",
            "code": "\nundefined4 convertToBase_08005ce8(int *result,uint number,uint base)\n\n{\n  char convertedDigit;\n  undefined4 resultLength;\n  uint remainder;\n  uint quotient;\n  char *convertedNumber;\n  char buffer [9];\n  \n  buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  convertedNumber = buffer + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    convertedNumber = convertedNumber + -1;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *convertedNumber = convertedDigit;\n    number = quotient;\n  } while (quotient != 0);\n  if (convertedNumber == (char *)0x0) {\n    resultLength = 0;\n  }\n  else {\n    resultLength = strlen(convertedNumber);\n    resultLength = (**(code **)(*result + 4))(result,convertedNumber,resultLength);\n  }\n  return resultLength;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_to_base_08005ce8",
                "param_1": "result",
                "param_2": "number",
                "param_3": "base",
                "cVar1": "convertedDigit",
                "uVar2": "resultLength",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "convertedNumber",
                "local_15": "buffer"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "print_number_or_execute_08005d42",
            "code": "\nint print_number_or_execute_08005d42(undefined4 *function_ptr,uint number,uint base)\n\n{\n  int result;\n  int result2;\n  \n  if (base == 0) {\n    result = (**(code **)*function_ptr)(function_ptr,number & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = printNumber(function_ptr,number,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)number) {\n    result = printNumber(function_ptr,number,10);\n    return result;\n  }\n  result = execute_function_08005cb6(function_ptr,0x2d);\n  result2 = printNumber(function_ptr,-number,10);\n  return result2 + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "print_number_or_execute_08005d42",
                "param_1": "function_ptr",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "execute_print_or_function_08005d82",
            "code": "\nvoid execute_print_or_function_08005d82(void)\n\n{\n  execute_print_or_function_08005d82_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "execute_print_or_function_08005d82",
                "print_number_or_execute_08005d42": "execute_print_or_function_2"
            },
            "calling": [
                "printFloat",
                "loop"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "print_number_or_call_function_08005d8a",
            "code": "\nvoid printNumberOrCallFunction_08005d8a(undefined4 *functionPtr,uint value1,uint value2,undefined4 value3)\n\n{\n  if (value2 != 0) {\n    printNumber(functionPtr,value1,value2 & 0xff);\n    return;\n  }\n  (**(code **)*functionPtr)(functionPtr,value1 & 0xff,0,*(code **)*functionPtr,value3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "print_number_or_call_function_08005d8a",
                "param_1": "functionPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "printFloat"
            ],
            "called": [
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "perform_number_operation_08005da8",
            "code": "\nint perform_number_operation_08005da8(undefined4 action_param,undefined4 unknown_param,undefined4 num_param_1,uint num_param_2,byte byte_param)\n\n{\n  int result;\n  undefined4 temp_var_1;\n  int temp_var_2;\n  byte loop_counter;\n  undefined8 div_result;\n  undefined8 temp_var_3;\n  \n  result = __unorddf2(num_param_1,num_param_2,num_param_1,num_param_2);\n  if (result == 0) {\n    result = __unorddf2(num_param_1,num_param_2 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = __aeabi_dcmple(num_param_1,num_param_2 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = perform_action_08005c96(action_param,&DAT_08007860);\n    }\n    else {\n      result = __aeabi_dcmpgt(num_param_1,num_param_2,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = __aeabi_dcmplt(num_param_1,num_param_2,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = __aeabi_dcmplt(num_param_1,num_param_2,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function_08005cb6(action_param,0x2d);\n            num_param_2 = num_param_2 + 0x80000000;\n          }\n          div_result = 0x3fe0000000000000;\n          for (loop_counter = 0; temp_var_1 = (undefined4)((ulonglong)div_result >> 0x20), loop_counter < byte_param;\n              loop_counter = loop_counter + 1) {\n            div_result = __divdf3((int)div_result,temp_var_1,0,0x40240000);\n          }\n          div_result = __aeabi_dadd(num_param_1,num_param_2,(int)div_result,temp_var_1);\n          temp_var_1 = __fixunsdfsi();\n          temp_var_3 = __floatunsidf();\n          div_result = __subdf3((int)div_result,(int)((ulonglong)div_result >> 0x20),(int)temp_var_3,\n                           (int)((ulonglong)temp_var_3 >> 0x20));\n          temp_var_2 = print_number_or_call_function_08005d8a(action_param,temp_var_1,10);\n          result = result + temp_var_2;\n          if (byte_param != 0) {\n            temp_var_2 = perform_action_08005c96(action_param,&DAT_08007868);\n            result = result + temp_var_2;\n          }\n          while (byte_param != 0) {\n            div_result = __muldf3((int)div_result,(int)((ulonglong)div_result >> 0x20),0,0x40240000);\n            temp_var_1 = __fixdfsi();\n            temp_var_2 = execute_print_or_function_08005d82(action_param,temp_var_1,10);\n            result = result + temp_var_2;\n            temp_var_3 = __floatsidf(temp_var_1);\n            div_result = __subdf3((int)div_result,(int)((ulonglong)div_result >> 0x20),(int)temp_var_3,\n                             (int)((ulonglong)temp_var_3 >> 0x20));\n            byte_param = byte_param - 1;\n          }\n        }\n        else {\n          result = perform_action_08005c96(action_param,&DAT_08007864);\n        }\n      }\n      else {\n        result = perform_action_08005c96(action_param,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = perform_action_08005c96(action_param,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "perform_number_operation_08005da8",
                "param_1": "action_param",
                "param_2": "unknown_param",
                "param_3": "num_param_1",
                "param_4": "num_param_2",
                "param_5": "byte_param",
                "iVar1": "result",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_2",
                "bVar4": "loop_counter",
                "uVar5": "div_result",
                "uVar6": "temp_var_3"
            },
            "calling": [
                "print"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__fixdfsi",
                "__floatsidf",
                "FUN_08005d8a",
                "__aeabi_dcmpgt",
                "FUN_08005d82",
                "__muldf3",
                "__aeabi_dadd",
                "FUN_08005cb6",
                "__subdf3",
                "__aeabi_dcmple",
                "__divdf3",
                "__fixunsdfsi",
                "__unorddf2",
                "FUN_08005c96",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "print_float_wrapper_08005f2c",
            "code": "\nvoid printFloatWrapper_08005f2c(void)\n\n{\n  printFloat();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "print_float_wrapper_08005f2c"
            },
            "calling": [
                "println",
                "loop"
            ],
            "called": [
                "printFloat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_sum_08005f40",
            "code": "\nint calculateSum_08005f40(undefined4 inputParam)\n\n{\n  int printResult;\n  int functionResult;\n  \n  printResult = print();\n  functionResult = execute_function_08005cc0(inputParam);\n  return functionResult + printResult;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_sum_08005f40",
                "param_1": "inputParam",
                "iVar1": "printResult",
                "iVar2": "functionResult"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08005cc0",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "configure_hardware_08005f5e",
            "code": "\nvoid configureHardware_08005f5e(void)\n\n{\n  HAL_NVIC_SetPriorityGrouping(3);\n  initializeHardwareConfiguration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "configure_hardware_08005f5e",
                "initialize_hardware_configuration_08001c32": "initializeHardwareConfiguration"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "FUN_08001c32",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "initialize_and_run_serial_event_08005f6c",
            "code": "\nvoid initializeAndRunSerialEvent_08005f6c(void)\n\n{\n  initializeVariant();\n  setupEnvironment();\n  do {\n    executeLoop();\n    executeSerialEventRun();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "initialize_and_run_serial_event_08005f6c",
                "initVariant": "initializeVariant",
                "setup": "setupEnvironment",
                "loop": "executeLoop",
                "serialEventRun": "executeSerialEventRun"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "setup",
                "serialEventRun",
                "loop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar count_set_bits_08005f8c(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_data_08005fc8",
            "code": "\nvoid initializeData_08005fc8(int flag,int value,undefined4 param3,undefined4 callbackParam)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    registerExitCallback(0,exitCallback,&DAT_20000000,&DAT_200004b8,callbackParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "callbackParam",
                "__aeabi_atexit": "registerExitCallback",
                "&LAB_08005fa0_1": "exitCallback"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "check_and_execute_080060d4",
            "code": "\nvoid checkAndExecute_080060d4(int parameter)\n\n{\n  int index;\n  \n  if (*(int *)(parameter + 8) != 0) {\n    (**(code **)(parameter + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  index = get_pin_id();\n  if ((&DAT_200004c4)[index * 5] != 0) {\n    checkAndExecute_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "check_and_execute_080060d4",
                "param_1": "parameter",
                "iVar1": "index"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_and_call_operator_080060e4",
            "code": "\nvoid checkAndCallOperator_080060e4(void)\n\n{\n  int pinId;\n  \n  pinId = getPinId();\n  if ((&DAT_200004c4)[pinId * 5] != 0) {\n    callOperator();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_and_call_operator_080060e4",
                "iVar1": "pinId",
                "get_pin_id": "getPinId",
                "operator()": "callOperator"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "register_destructor_08006112",
            "code": "\nvoid registerDestructor_08006112(undefined4 cleanupFunction,undefined4 cleanupObject)\n\n{\n  __cxa_atexit(cleanupObject,cleanupFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "register_destructor_08006112",
                "param_1": "cleanupFunction",
                "param_2": "cleanupObject"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "write_assertion_fail_message_0800611c",
            "code": "\nvoid writeAssertionFailMessage_0800611c(undefined4 fileName,undefined4 lineNumber,char *condition,undefined4 functionName)\n\n{\n  undefined4 outputStream;\n  char *additionalMessage;\n  undefined8 abortResult;\n  undefined4 formattedParam4;\n  \n  outputStream = *(undefined4 *)(DAT_200000f8 + 0xc);\n  formattedParam4 = functionName;\n  if (condition == (char *)0x0) goto LAB_08006140;\n  additionalMessage = \", function: \";\n  do {\n    fiprintf(outputStream,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,fileName,lineNumber,\n             additionalMessage,condition,formattedParam4);\n    abortResult = abort();\n    lineNumber = (undefined4)((ulonglong)abortResult >> 0x20);\n    outputStream = (undefined4)abortResult;\nLAB_08006140:\n    condition = \"\";\n    additionalMessage = condition;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "write_assertion_fail_message_0800611c",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "condition",
                "param_4": "functionName",
                "uVar1": "outputStream",
                "pcVar2": "additionalMessage",
                "uVar3": "abortResult",
                "uVar4": "formattedParam4"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_unsigned_long_long_left_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shiftUnsignedLongLongLeft_08006158(undefined4 parameter1,uint parameter2)\n\n{\n  return (ulonglong)parameter2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_unsigned_long_long_left_08006158",
                "param_1": "parameter1",
                "param_2": "parameter2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "print_formatted_data_08006174",
            "code": "\nvoid printFormattedData_08006174(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  _vfiprintf_r(DAT_200000f8,formatString,arg1,&arg2Copy,formatString,&arg2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "print_formatted_data_08006174",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_functions_08006198",
            "code": "\nvoid executeFunctions_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  _init();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "premain",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fillMemory_080061e0(undefined *destination,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + size;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "std.isra.0",
                "adc_read_value",
                "__sfp",
                "__sfmoreglue"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "allocate_memory_080061f0",
            "code": "\nvoid allocate_memory_080061f0(undefined4 *result_ptr,int size,undefined4 var_3,undefined4 var_4)\n\n{\n  int **extra_out_ptr;\n  int **temp_ptr_1;\n  int **temp_ptr_2;\n  int *temp_val_1;\n  int **temp_ptr_3;\n  int **temp_ptr_4;\n  \n  if (size == 0) {\n    return;\n  }\n  temp_ptr_4 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp_ptr_4 = (int **)((int)temp_ptr_4 + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  temp_ptr_2 = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    temp_ptr_4[1] = (int *)0x0;\n    temp_ptr_1 = extra_out_ptr;\n    DAT_200005f8 = temp_ptr_4;\n  }\n  else {\n    temp_ptr_2 = DAT_200005f8;\n    if (temp_ptr_4 < DAT_200005f8) {\n      temp_ptr_1 = (int **)*temp_ptr_4;\n      temp_ptr_2 = (int **)((int)temp_ptr_4 + (int)temp_ptr_1);\n      if (DAT_200005f8 == temp_ptr_2) {\n        temp_val_1 = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        temp_ptr_2 = (int **)((int)temp_val_1 + (int)temp_ptr_1);\n        *temp_ptr_4 = (int *)temp_ptr_2;\n      }\n      temp_ptr_4[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = temp_ptr_4;\n    }\n    else {\n      do {\n        temp_ptr_3 = temp_ptr_2;\n        temp_ptr_2 = (int **)temp_ptr_3[1];\n        if (temp_ptr_2 == (int **)0x0) break;\n      } while (temp_ptr_2 <= temp_ptr_4);\n      temp_ptr_1 = (int **)*temp_ptr_3;\n      if ((int **)((int)temp_ptr_3 + (int)temp_ptr_1) == temp_ptr_4) {\n        temp_ptr_1 = (int **)((int)temp_ptr_1 + (int)*temp_ptr_4);\n        *temp_ptr_3 = (int *)temp_ptr_1;\n        if (temp_ptr_2 == (int **)((int)temp_ptr_3 + (int)temp_ptr_1)) {\n          temp_val_1 = *temp_ptr_2;\n          temp_ptr_2 = (int **)temp_ptr_2[1];\n          temp_ptr_1 = (int **)((int)temp_ptr_1 + (int)temp_val_1);\n          *temp_ptr_3 = (int *)temp_ptr_1;\n          temp_ptr_3[1] = (int *)temp_ptr_2;\n        }\n      }\n      else if (temp_ptr_4 < (int **)((int)temp_ptr_3 + (int)temp_ptr_1)) {\n        *result_ptr = 0xc;\n      }\n      else {\n        temp_ptr_1 = (int **)((int)temp_ptr_4 + (int)*temp_ptr_4);\n        if (temp_ptr_2 == temp_ptr_1) {\n          temp_val_1 = *temp_ptr_2;\n          temp_ptr_2 = (int **)temp_ptr_2[1];\n          temp_ptr_1 = (int **)((int)temp_val_1 + (int)*temp_ptr_4);\n          *temp_ptr_4 = (int *)temp_ptr_1;\n        }\n        temp_ptr_4[1] = (int *)temp_ptr_2;\n        temp_ptr_3[1] = (int *)temp_ptr_4;\n      }\n    }\n  }\n  __malloc_unlock(result_ptr,temp_ptr_1,temp_ptr_2,var_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "result_ptr",
                "param_2": "size",
                "param_3": "var_3",
                "param_4": "var_4",
                "extraout_r1": "extra_out_ptr",
                "ppiVar1": "temp_ptr_1",
                "ppiVar2": "temp_ptr_2",
                "piVar3": "temp_val_1",
                "ppiVar4": "temp_ptr_3",
                "ppiVar5": "temp_ptr_4"
            },
            "calling": [
                "__swsetup_r",
                "abort"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_memory_08006288",
            "code": "\nuint allocate_memory_08006288(undefined4 *size_ptr,uint requested_size)\n\n{\n  uint *curr_chunk;\n  int remaining_space;\n  uint *prev_chunk;\n  uint diff;\n  uint *last_chunk;\n  uint aligned_size;\n  \n  aligned_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *size_ptr = 0xc;\n  }\n  else {\n    __malloc_lock();\n    curr_chunk = DAT_200005f8;\n    last_chunk = DAT_200005f8;\n    while (prev_chunk = curr_chunk, prev_chunk != (uint *)0x0) {\n      diff = *prev_chunk - aligned_size;\n      if (-1 < (int)diff) {\n        if (diff < 0xc) {\n          if (last_chunk == prev_chunk) {\n            curr_chunk = (uint *)last_chunk[1];\n            DAT_200005f8 = curr_chunk;\n          }\n          else {\n            curr_chunk = (uint *)prev_chunk[1];\n          }\n          if (last_chunk != prev_chunk) {\n            last_chunk[1] = (uint)curr_chunk;\n            last_chunk = prev_chunk;\n          }\n        }\n        else {\n          *prev_chunk = diff;\n          *(uint *)((int)prev_chunk + diff) = aligned_size;\n          last_chunk = (uint *)((int)prev_chunk + diff);\n        }\n        goto LAB_080062ec;\n      }\n      last_chunk = prev_chunk;\n      curr_chunk = (uint *)prev_chunk[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = _sbrk_r(size_ptr);\n    }\n    curr_chunk = (uint *)_sbrk_r(size_ptr,aligned_size);\n    if ((curr_chunk != (uint *)0xffffffff) &&\n       ((last_chunk = (uint *)((int)curr_chunk + 3U & 0xfffffffc), curr_chunk == last_chunk ||\n        (remaining_space = _sbrk_r(size_ptr,(int)last_chunk - (int)curr_chunk), remaining_space != -1)))) {\n      *last_chunk = aligned_size;\nLAB_080062ec:\n      __malloc_unlock(size_ptr);\n      aligned_size = (int)last_chunk + 0xbU & 0xfffffff8;\n      remaining_space = aligned_size - (int)(last_chunk + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)last_chunk + remaining_space) = -remaining_space;\n        return aligned_size;\n      }\n      return aligned_size;\n    }\n    *size_ptr = 0xc;\n    __malloc_unlock(size_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "size_ptr",
                "param_2": "requested_size",
                "puVar1": "curr_chunk",
                "iVar2": "remaining_space",
                "puVar3": "prev_chunk",
                "uVar4": "diff",
                "puVar5": "last_chunk",
                "uVar6": "aligned_size"
            },
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "write_byte_to_buffer_08006344",
            "code": "\nuint write_byte_to_buffer_08006344(int buffer_ptr,byte byte_to_write,byte **buffer)\n\n{\n  int index;\n  byte *buffer_end;\n  byte *ushort_ptr;\n  uint result;\n  \n  buffer_end = buffer[2] + -1;\n  buffer[2] = buffer_end;\n  if ((-1 < (int)buffer_end) ||\n     (((int)buffer[6] <= (int)buffer_end && (buffer_end = (byte *)(uint)byte_to_write, buffer_end != (byte *)0xa))))\n  {\n    buffer_end = *buffer;\n    *buffer = buffer_end + 1;\n    *buffer_end = byte_to_write;\n    return (uint)byte_to_write;\n  }\n  if ((buffer_ptr != 0) && (*(int *)(buffer_ptr + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == (byte **)&DAT_08007904) {\n    buffer = *(byte ***)(buffer_ptr + 4);\n  }\n  else if (buffer == (byte **)&DAT_08007924) {\n    buffer = *(byte ***)(buffer_ptr + 8);\n  }\n  else if (buffer == (byte **)&DAT_080078e4) {\n    buffer = *(byte ***)(buffer_ptr + 0xc);\n  }\n  buffer[2] = buffer[6];\n  ushort_ptr = (byte *)(uint)*(ushort *)(buffer + 3);\n  index = (int)ushort_ptr << 0x1c;\n  if (((index < 0) && (ushort_ptr = buffer[4], ushort_ptr != (byte *)0x0)) ||\n     (index = __swsetup_r(buffer_ptr,buffer,index,ushort_ptr,buffer_end), index == 0)) {\n    result = (uint)byte_to_write;\n    index = (int)*buffer - (int)buffer[4];\n    if ((index < (int)buffer[5]) || (index = _fflush_r(buffer_ptr,buffer), index == 0)) {\n      buffer[2] = buffer[2] + -1;\n      buffer_end = *buffer;\n      *buffer = buffer_end + 1;\n      *buffer_end = byte_to_write;\n      if ((byte *)(index + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      index = _fflush_r(buffer_ptr,buffer);\n      if (index == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "write_byte_to_buffer_08006344",
                "param_1": "buffer_ptr",
                "param_2": "byte_to_write",
                "param_3": "buffer",
                "iVar1": "index",
                "pbVar2": "buffer_end",
                "pbVar3": "ushort_ptr",
                "uVar4": "result"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "write_to_file_08006370",
            "code": "\nint writeToFile_08006370(undefined4 file,undefined4 mode,undefined *buffer,int length)\n\n{\n  int result;\n  undefined *endPointer;\n  int currentIndex;\n  \n  endPointer = buffer + length;\n  currentIndex = length;\n  do {\n    if (buffer == endPointer) {\n      return 0;\n    }\n    result = __sfputc_r(file,*buffer,mode,length,currentIndex);\n    length = result + 1;\n    buffer = buffer + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "write_to_file_08006370",
                "param_1": "file",
                "param_2": "mode",
                "param_3": "buffer",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPointer",
                "iVar3": "currentIndex"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "print_formatted_string_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint printFormattedString_08006394(int stream,undefined4 *formatSpecifiers,byte *string,int *charsPrinted)\n\n{\n  int result;\n  int *intPtr;\n  bool foundNumber;\n  byte *ptr1;\n  byte *ptr2;\n  int magicNumber;\n  int tempVar;\n  int *charsPrintedPtr;\n  uint flags;\n  int precision;\n  undefined4 padding;\n  int width;\n  int totalCharsPrinted;\n  byte currentChar;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined prefix;\n  undefined4 lengthModifier;\n  \n  charsPrintedPtr = charsPrinted;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (formatSpecifiers == &DAT_08007904) {\n    formatSpecifiers = *(undefined4 **)(stream + 4);\n  }\n  else if (formatSpecifiers == (undefined4 *)&DAT_08007924) {\n    formatSpecifiers = *(undefined4 **)(stream + 8);\n  }\n  else if (formatSpecifiers == (undefined4 *)&DAT_080078e4) {\n    formatSpecifiers = *(undefined4 **)(stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(formatSpecifiers + 3) << 0x1c)) || (formatSpecifiers[4] == 0)) &&\n     (tempVar = __swsetup_r(stream,formatSpecifiers), tempVar != 0)) {\n    return -1;\n  }\n  totalCharsPrinted = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  ptr1 = string;\nLAB_080063d6:\n  ptr2 = ptr1;\n  if (*ptr2 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  ptr1 = ptr2 + 1;\n  if (*ptr2 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  tempVar = (int)ptr2 - (int)string;\n  if (tempVar != 0) {\n    result = __sfputs_r(stream,formatSpecifiers,string,tempVar);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(formatSpecifiers + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalCharsPrinted;\n    }\n    totalCharsPrinted = totalCharsPrinted + tempVar;\n  }\n  if (*ptr2 == 0) goto LAB_08006580;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  padding = 0;\n  prefix = 0;\n  lengthModifier = 0;\n  ptr1 = ptr2 + 1;\n  while( true ) {\n    tempVar = memchr(\"#-0+ \",*ptr1);\n    string = ptr1 + 1;\n    if (tempVar == 0) break;\n    flags = 1 << (tempVar + 0xf7ff8750U & 0xff) | flags;\n    ptr1 = string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    prefix = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    prefix = 0x2b;\n  }\n  if (*ptr1 == 0x2a) {\n    intPtr = charsPrintedPtr + 1;\n    tempVar = *charsPrintedPtr;\n    charsPrintedPtr = intPtr;\n    if (tempVar < 0) {\n      width = -tempVar;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    foundNumber = false;\n    tempVar = width;\n    string = ptr1;\n    while( true ) {\n      if (9 < *string - 0x30) break;\n      tempVar = tempVar * 10 + (*string - 0x30);\n      foundNumber = true;\n      string = string + 1;\n    }\n    if (!foundNumber) goto LAB_080064be;\n  }\n  width = tempVar;\nLAB_080064be:\n  if (*string == 0x2e) {\n    if (string[1] == 0x2a) {\n      string = string + 2;\n      intPtr = charsPrintedPtr + 1;\n      precision = *charsPrintedPtr;\n      charsPrintedPtr = intPtr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      foundNumber = false;\n      tempVar = 0;\n      precision = 0;\n      while( true ) {\n        string = string + 1;\n        if (9 < *string - 0x30) break;\n        tempVar = tempVar * 10 + (*string - 0x30);\n        foundNumber = true;\n      }\n      if (foundNumber) {\n        precision = tempVar;\n      }\n    }\n  }\n  tempVar = memchr(&DAT_080078b6,*string,3);\n  if (tempVar != 0) {\n    string = string + 1;\n    flags = flags | 0x40 << (tempVar + 0xf7ff874aU & 0xff);\n  }\n  currentChar = *string;\n  string = string + 1;\n  tempVar = memchr(\"efgEFG\",currentChar,6);\n  if (tempVar == 0) {\n    magicNumber = _printf_i(stream,&flags,formatSpecifiers,0x8006371,&charsPrintedPtr);\n    if (magicNumber == -1) goto LAB_08006580;\n  }\n  else {\n    charsPrintedPtr = (int *)(((int)charsPrintedPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalCharsPrinted = totalCharsPrinted + magicNumber;\n  ptr1 = string;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "print_formatted_string_08006394",
                "param_1": "stream",
                "param_2": "formatSpecifiers",
                "param_3": "string",
                "param_4": "charsPrinted",
                "iVar1": "result",
                "piVar2": "intPtr",
                "bVar3": "foundNumber",
                "pbVar4": "ptr1",
                "pbVar5": "ptr2",
                "unaff_r9": "magicNumber",
                "iVar6": "tempVar",
                "local_8c": "charsPrintedPtr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "padding",
                "local_7c": "width",
                "local_74": "totalCharsPrinted",
                "local_70": "currentChar",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "prefix",
                "local_30": "lengthModifier"
            },
            "calling": [
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "memchr",
                "_printf_i",
                "__swsetup_r",
                "__sfputs_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "process_data_080065c0",
            "code": "\nundefined4\nprocessData_080065c0(undefined4 arg1,uint *inputArray,uint *outputArray,undefined4 arg2,code *callbackFunction)\n\n{\n  int loopVariable1;\n  int loopVariable2;\n  uint maxValue;\n  uint newValue;\n  bool condition;\n  \n  maxValue = inputArray[4];\n  if ((int)inputArray[4] < (int)inputArray[2]) {\n    maxValue = inputArray[2];\n  }\n  *outputArray = maxValue;\n  if (*(char *)((int)inputArray + 0x43) != '\\0') {\n    *outputArray = maxValue + 1;\n  }\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *outputArray = *outputArray + 2;\n  }\n  if ((*inputArray & 6) == 0) {\n    for (loopVariable1 = 0; loopVariable1 < (int)(inputArray[3] - *outputArray); loopVariable1 = loopVariable1 + 1) {\n      loopVariable2 = (*callbackFunction)(arg1,arg2,(int)inputArray + 0x19,1);\n      if (loopVariable2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)inputArray + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  newValue = maxValue;\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *(undefined *)((int)inputArray + maxValue + 0x43) = 0x30;\n    newValue = maxValue + 2;\n    *(undefined *)((int)inputArray + maxValue + 0x44) = *(undefined *)((int)inputArray + 0x45);\n  }\n  loopVariable1 = (*callbackFunction)(arg1,arg2,(int)inputArray + 0x43,newValue);\n  if (loopVariable1 != -1) {\n    maxValue = inputArray[3];\n    condition = (*inputArray & 6) != 4;\n    if (condition) {\n      maxValue = 0;\n    }\n    newValue = 0;\n    if (!condition) {\n      maxValue = maxValue - *outputArray;\n    }\n    if (!condition) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)inputArray[4] < (int)inputArray[2]) {\n      maxValue = maxValue + (inputArray[2] - inputArray[4]);\n    }\n    while( true ) {\n      if (maxValue == newValue) {\n        return 0;\n      }\n      loopVariable1 = (*callbackFunction)(arg1,arg2,(int)inputArray + 0x1a,1);\n      if (loopVariable1 == -1) break;\n      newValue = newValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "arg1",
                "param_2": "inputArray",
                "param_3": "outputArray",
                "param_4": "arg2",
                "param_5": "callbackFunction",
                "iVar1": "loopVariable1",
                "iVar2": "loopVariable2",
                "uVar3": "maxValue",
                "uVar4": "newValue",
                "bVar5": "condition"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "print_formatted_output_080066b0",
            "code": "\nuint print_formatted_output_080066b0(undefined4 format_str,uint *flags,undefined4 width,code *output_func,uint **next_arg)\n\n{\n  byte flag_byte;\n  int result;\n  uint *next_arg;\n  int res;\n  char *digit_str;\n  uint flag;\n  uint **next_arg_ptr_ptr;\n  char **arg_ptr_ptr;\n  uint value;\n  uint width_orig;\n  char *ptr;\n  char *ptr_next;\n  uint width_arr [2];\n  \n  flag_byte = *(byte *)(flags + 6);\n  ptr_next = (char *)((int)flags + 0x43);\n  if (flag_byte != 0x6e) {\n    if (flag_byte < 0x6f) {\n      if (flag_byte != 99) {\n        if (flag_byte < 100) {\n          if (flag_byte == 0) goto LAB_0800686a;\n          if (flag_byte != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)flags + 0x45) = 0x58;\n          digit_str = \"0123456789ABCDEF\";\nLAB_080067fa:\n          flag = *flags;\n          next_arg = *next_arg;\n          *next_arg = next_arg + 1;\n          if (((flag & 0x80) == 0) && ((int)(flag << 0x19) < 0)) {\n            value = (uint)*(ushort *)next_arg;\n          }\n          else {\n            value = *next_arg;\n          }\n          if ((int)(flag << 0x1f) < 0) {\n            *flags = flag | 0x20;\n          }\n          if (value == 0) {\n            *flags = *flags & 0xffffffdf;\n          }\n          flag = 0x10;\nLAB_08006790:\n          *(undefined *)((int)flags + 0x43) = 0;\n        }\n        else {\n          if ((flag_byte != 100) && (flag_byte != 0x69)) goto LAB_080066e0;\n          value = *flags;\n          next_arg = *next_arg;\n          if ((value & 0x80) == 0) {\n            *next_arg = next_arg + 1;\n            if ((value & 0x40) == 0) goto LAB_08006700;\n            value = (uint)(short)*(ushort *)next_arg;\n          }\n          else {\n            *next_arg = next_arg + 1;\nLAB_08006700:\n            value = *next_arg;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)flags + 0x43) = 0x2d;\n          }\n          digit_str = \"0123456789ABCDEF\";\n          flag = 10;\n        }\n        width_orig = flags[1];\n        flags[2] = width_orig;\n        ptr = ptr_next;\n        if ((int)width_orig < 0) {\n          if (value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)flags + 0x42) = *digit_str;\n          ptr = (char *)((int)flags + 0x42);\n        }\n        else {\n          *flags = *flags & 0xfffffffb;\n          if (value == 0) {\n            if (width_orig != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              width_orig = value / flag;\n              ptr = ptr + -1;\n              *ptr = digit_str[value - flag * width_orig];\n              value = width_orig;\n            } while (width_orig != 0);\n          }\n        }\n        if (((flag == 8) && ((int)(*flags << 0x1f) < 0)) && ((int)flags[1] <= (int)flags[4]))\n        {\n          ptr[-1] = '0';\n          ptr = ptr + -1;\n        }\n        flags[4] = (int)ptr_next - (int)ptr;\n        ptr_next = ptr;\n        goto LAB_080067d6;\n      }\n      next_arg = *next_arg;\n      *next_arg = next_arg + 1;\n      *(char *)((int)flags + 0x42) = (char)*next_arg;\nLAB_08006740:\n      ptr_next = (char *)((int)flags + 0x42);\n      value = 1;\n    }\n    else {\n      if (flag_byte != 0x73) {\n        if (flag_byte < 0x74) {\n          if (flag_byte == 0x6f) {\nLAB_08006766:\n            value = *flags;\n            next_arg = *next_arg;\n            if ((value & 0x80) == 0) {\n              *next_arg = next_arg + 1;\n              if ((value & 0x40) == 0) goto LAB_08006774;\n              value = (uint)*(ushort *)next_arg;\n            }\n            else {\n              *next_arg = next_arg + 1;\nLAB_08006774:\n              value = *next_arg;\n            }\n            if (flag_byte == 0x6f) {\n              flag = 8;\n            }\n            else {\n              flag = 10;\n            }\n            digit_str = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (flag_byte == 0x70) {\n            *flags = *flags | 0x20;\nLAB_08006726:\n            digit_str = \"0123456789abcdef\";\n            *(undefined *)((int)flags + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (flag_byte == 0x75) goto LAB_08006766;\n          if (flag_byte == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)flags + 0x42) = flag_byte;\n        goto LAB_08006740;\n      }\n      arg_ptr_ptr = (char **)*next_arg;\n      *next_arg = (uint *)(arg_ptr_ptr + 1);\n      ptr_next = *arg_ptr_ptr;\n      result = memchr(ptr_next,0,flags[1]);\n      if (result != 0) {\n        flags[1] = result - (int)ptr_next;\n      }\n      value = flags[1];\n    }\n    flags[4] = value;\n    *(undefined *)((int)flags + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  value = *flags;\n  next_arg_ptr_ptr = (uint **)*next_arg;\n  flag = flags[5];\n  if ((value & 0x80) == 0) {\n    *next_arg = (uint *)(next_arg_ptr_ptr + 1);\n    next_arg = *next_arg_ptr_ptr;\n    if ((value & 0x40) == 0) goto LAB_08006856;\n    *(short *)next_arg = (short)flag;\n  }\n  else {\n    *next_arg = (uint *)(next_arg_ptr_ptr + 1);\n    next_arg = *next_arg_ptr_ptr;\nLAB_08006856:\n    *next_arg = flag;\n  }\nLAB_0800686a:\n  flags[4] = 0;\nLAB_080067d6:\n  result = _printf_common(format_str,flags,width_arr,width,output_func);\n  if ((result == -1) || (result = (*output_func)(format_str,width,ptr_next,flags[4]), result == -1)) {\nLAB_080067ea:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*flags << 0x1e) < 0) {\n      for (result = 0; result < (int)(flags[3] - width_arr[0]); result = result + 1) {\n        res = (*output_func)(format_str,width,(int)flags + 0x19,1);\n        if (res == -1) goto LAB_080067ea;\n      }\n    }\n    value = flags[3];\n    if ((int)flags[3] < (int)width_arr[0]) {\n      value = width_arr[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "print_formatted_output_080066b0",
                "param_1": "format_str",
                "param_2": "flags",
                "param_3": "width",
                "param_4": "output_func",
                "param_5": "next_arg",
                "bVar1": "flag_byte",
                "iVar2": "result",
                "puVar3": "next_arg",
                "iVar4": "res",
                "pcVar5": "digit_str",
                "uVar6": "flag",
                "uVar9": "value",
                "uVar10": "width_orig",
                "pcVar11": "ptr",
                "pcVar12": "ptr_next",
                "local_24": "width_arr",
                "ppuVar7": "next_arg_ptr_ptr",
                "ppcVar8": "arg_ptr_ptr"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "print_formatted_string_080068f0",
            "code": "\nvoid printFormattedString_080068f0(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int dataPointer;\n  undefined4 formatStringCopy;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  dataPointer = DAT_200000f8;\n  formatStringCopy = formatString;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    __sinit(DAT_200000f8);\n  }\n  _vfiprintf_r(dataPointer,*(undefined4 *)(dataPointer + 8),formatString,&arg1Copy,formatStringCopy,&arg1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "print_formatted_string_080068f0",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "dataPointer",
                "uVar2": "formatStringCopy",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "initialize_memory_allocation_08006920",
            "code": "\nvoid initializeMemoryAllocation_08006920(int *resultPtr,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_200006a4 = 0;\n  allocationResult = _sbrk(size);\n  if ((allocationResult == -1) && (DAT_200006a4 != 0)) {\n    *resultPtr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "initialize_memory_allocation_08006920",
                "param_1": "resultPtr",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint processData_080069e4(undefined4 *result,undefined4 *data)\n\n{\n  int baseAddress;\n  uint returnValue;\n  ushort flags;\n  \n  baseAddress = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    __sinit(DAT_200000f8);\n  }\n  if (data == &DAT_08007904) {\n    data = *(undefined4 **)(baseAddress + 4);\n  }\n  else if (data == (undefined4 *)&DAT_08007924) {\n    data = *(undefined4 **)(baseAddress + 8);\n  }\n  else if (data == (undefined4 *)&DAT_080078e4) {\n    data = *(undefined4 **)(baseAddress + 0xc);\n  }\n  flags = *(ushort *)(data + 3);\n  returnValue = (uint)flags;\n  if (-1 < (int)(returnValue << 0x1c)) {\n    if (-1 < (int)(returnValue << 0x1b)) {\n      *result = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(returnValue << 0x1d) < 0) {\n      if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)data[0xd] != data + 0x11) {\n          _free_r(result);\n        }\n        data[0xd] = 0;\n      }\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xffdb;\n      data[1] = 0;\n      *data = data[4];\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 8;\n  }\n  if ((data[4] == 0) && ((*(ushort *)(data + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(result,data);\n  }\n  flags = *(ushort *)(data + 3);\n  returnValue = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      returnValue = data[5];\n    }\n    data[2] = returnValue;\n  }\n  else {\n    data[2] = 0;\n    data[6] = -data[5];\n  }\n  if (data[4] == 0) {\n    flags = *(ushort *)(data + 3);\n    returnValue = (int)(short)flags & 0x80;\n    if (returnValue != 0) {\nLAB_08006a14:\n      *(ushort *)(data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "baseAddress",
                "uVar2": "returnValue",
                "uVar3": "flags"
            },
            "calling": [
                "__sfputc_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "handle_exception_08006ac0",
            "code": "\nvoid handle_exception_08006ac0(void)\n\n{\n  uint *pointer1;\n  int var2;\n  int *pointer2;\n  int *pointer3;\n  uint variable5;\n  ushort variable6;\n  int var7;\n  code *function_pointer;\n  int var9;\n  uint variable10;\n  code *unrecovered_jumptable_00;\n  bool flag11;\n  undefined8 variable12;\n  \n  raise(6);\n  unrecovered_jumptable_00 = (code *)0x8006acf;\n  variable12 = _exit(1);\n  pointer2 = (int *)((ulonglong)variable12 >> 0x20);\n  pointer1 = (uint *)variable12;\n  variable6 = *(ushort *)(pointer2 + 3);\n  variable5 = (uint)variable6;\n  if ((int)(variable5 << 0x1c) < 0) {\n    var2 = pointer2[4];\n    if (var2 != 0) {\n      var7 = variable5 << 0x1e;\n      flag11 = var7 != 0;\n      if (flag11) {\n        var7 = 0;\n      }\n      var9 = *pointer2;\n      if (!flag11) {\n        var7 = pointer2[5];\n      }\n      *pointer2 = var2;\n      pointer2[2] = var7;\n      for (var9 = var9 - var2; 0 < var9; var9 = var9 - var7) {\n        var7 = (*(code *)pointer2[10])(pointer1,pointer2[8],var2,var9);\n        if (var7 < 1) {\n          variable6 = *(ushort *)(pointer2 + 3);\n          goto LAB_08006bc6;\n        }\n        var2 = var2 + var7;\n      }\n    }\n  }\n  else if (((0 < pointer2[1]) || (0 < pointer2[0x10])) &&\n          (function_pointer = (code *)pointer2[0xb], function_pointer != (code *)0x0)) {\n    variable10 = *pointer1;\n    *pointer1 = 0;\n    if ((variable6 & 0x1000) == 0) {\n      var2 = (*function_pointer)(pointer1,pointer2[8],variable5 & 0x1000,1);\n      if ((var2 == -1) && (variable5 = *pointer1, variable5 != 0)) {\n        if ((variable5 != 0x1d) && (variable5 != 0x16)) {\n          *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecovered_jumptable_00)();\n          return;\n        }\n        *pointer1 = variable10;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      var2 = pointer2[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer2 + 3) << 0x1d) < 0) &&\n       (var2 = var2 - pointer2[1], pointer2[0xd] != 0)) {\n      var2 = var2 - pointer2[0x10];\n    }\n    var2 = (*(code *)pointer2[0xb])(pointer1,pointer2[8],var2,0);\n    variable6 = *(ushort *)(pointer2 + 3);\n    if ((var2 == -1) &&\n       ((0x1d < *pointer1 || (-1 < (int)((0x20400001U >> (*pointer1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(pointer2 + 3) = variable6 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jumptable_00)(0xffffffff);\n      return;\n    }\n    pointer2[1] = 0;\n    *pointer2 = pointer2[4];\n    if (((int)((uint)variable6 << 0x13) < 0) && ((var2 != -1 || (*pointer1 == 0)))) {\n      pointer2[0x15] = var2;\n    }\n    pointer3 = (int *)pointer2[0xd];\n    *pointer1 = variable10;\n    if (pointer3 != (int *)0x0) {\n      if (pointer3 != pointer2 + 0x11) {\n        _free_r(pointer1);\n      }\n      pointer2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jumptable_00)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jumptable_00)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "handle_exception_08006ac0",
                "puVar1": "pointer1",
                "iVar2": "var2",
                "piVar3": "pointer2",
                "piVar4": "pointer3",
                "uVar5": "variable5",
                "uVar6": "variable6",
                "iVar7": "var7",
                "pcVar8": "function_pointer",
                "iVar9": "var9",
                "uVar10": "variable10",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable_00",
                "bVar11": "flag11",
                "uVar12": "variable12"
            },
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "called": [
                "_free_r",
                "raise",
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *inputArray,int *outputArray)\n\n{\n  undefined4 returnValue;\n  int count;\n  int *tempPointer;\n  uint tempValue;\n  ushort tempFlag;\n  int tempCount;\n  undefined4 unaff_tempVar1;\n  undefined4 unaff_tempVar2;\n  code *functionPointer;\n  int tempVar1;\n  uint tempVar2;\n  code *jumpTable;\n  bool bVar10;\n  \n  if (outputArray[4] != 0) {\n    if ((inputArray != (uint *)0x0) && (inputArray[6] == 0)) {\n      __sinit();\n    }\n    if (outputArray == &DAT_08007904) {\n      outputArray = (int *)inputArray[1];\n    }\n    else if (outputArray == (int *)&DAT_08007924) {\n      outputArray = (int *)inputArray[2];\n    }\n    else if (outputArray == (int *)&DAT_080078e4) {\n      outputArray = (int *)inputArray[3];\n    }\n    if (*(short *)(outputArray + 3) != 0) {\n      tempFlag = *(ushort *)(outputArray + 3);\n      tempValue = (uint)tempFlag;\n      if ((int)(tempValue << 0x1c) < 0) {\n        count = outputArray[4];\n        if (count != 0) {\n          tempCount = tempValue << 0x1e;\n          bVar10 = tempCount != 0;\n          if (bVar10) {\n            tempCount = 0;\n          }\n          tempVar1 = *outputArray;\n          if (!bVar10) {\n            tempCount = outputArray[5];\n          }\n          *outputArray = count;\n          outputArray[2] = tempCount;\n          for (tempVar1 = tempVar1 - count; 0 < tempVar1; tempVar1 = tempVar1 - tempCount) {\n            tempCount = (*(code *)outputArray[10])(inputArray,outputArray[8],count,tempVar1,unaff_tempVar1,unaff_tempVar2);\n            if (tempCount < 1) {\n              tempFlag = *(ushort *)(outputArray + 3);\n              goto LAB_08006bc6;\n            }\n            count = count + tempCount;\n          }\n        }\n      }\n      else if (((0 < outputArray[1]) || (0 < outputArray[0x10])) &&\n              (functionPointer = (code *)outputArray[0xb], functionPointer != (code *)0x0)) {\n        tempVar2 = *inputArray;\n        *inputArray = 0;\n        if ((tempFlag & 0x1000) == 0) {\n          count = (*functionPointer)(inputArray,outputArray[8],tempValue & 0x1000,1);\n          if ((count == -1) && (tempValue = *inputArray, tempValue != 0)) {\n            if ((tempValue != 0x1d) && (tempValue != 0x16)) {\n              *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *inputArray = tempVar2;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          count = outputArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(outputArray + 3) << 0x1d) < 0) &&\n           (count = count - outputArray[1], outputArray[0xd] != 0)) {\n          count = count - outputArray[0x10];\n        }\n        count = (*(code *)outputArray[0xb])(inputArray,outputArray[8],count,0);\n        tempFlag = *(ushort *)(outputArray + 3);\n        if ((count == -1) &&\n           ((0x1d < *inputArray || (-1 < (int)((0x20400001U >> (*inputArray & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(outputArray + 3) = tempFlag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        outputArray[1] = 0;\n        *outputArray = outputArray[4];\n        if (((int)((uint)tempFlag << 0x13) < 0) && ((count != -1 || (*inputArray == 0)))) {\n          outputArray[0x15] = count;\n        }\n        tempPointer = (int *)outputArray[0xd];\n        *inputArray = tempVar2;\n        if (tempPointer != (int *)0x0) {\n          if (tempPointer != outputArray + 0x11) {\n            _free_r(inputArray);\n          }\n          outputArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "uVar1": "returnValue",
                "iVar2": "count",
                "piVar3": "tempPointer",
                "uVar4": "tempValue",
                "uVar5": "tempFlag",
                "iVar6": "tempCount",
                "unaff_r4": "unaff_tempVar1",
                "unaff_r5": "unaff_tempVar2",
                "pcVar7": "functionPointer",
                "iVar8": "tempVar1",
                "uVar9": "tempVar2",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_data_structure_08006c40",
            "code": "\nvoid initializeDataStructure_08006c40(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  memset(dataStructure + 0x17,0,8);\n  dataStructure[8] = dataStructure;\n  dataStructure[9] = 0x8006f39;\n  dataStructure[10] = 0x8006f5b;\n  dataStructure[0xb] = 0x8006f93;\n  dataStructure[0xc] = &label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_data_structure_08006c40",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_08006fb6_1": "label1"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_memory_08006c88",
            "code": "\nundefined4 * allocateMemory_08006c88(undefined4 size,int count)\n\n{\n  undefined4 *memoryBlock;\n  int totalSize;\n  \n  totalSize = (count + -1) * 0x68;\n  memoryBlock = (undefined4 *)_malloc_r(size,totalSize + 0x74);\n  if (memoryBlock != (undefined4 *)0x0) {\n    *memoryBlock = 0;\n    memoryBlock[1] = count;\n    memoryBlock[2] = memoryBlock + 3;\n    memset(memoryBlock + 3,0,totalSize + 0x68);\n  }\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_memory_08006c88",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "memoryBlock",
                "iVar2": "totalSize"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_08006cb4",
            "code": "\nvoid initializeData_08006cb4(undefined4 *data)\n\n{\n  undefined4 value;\n  undefined4 *pointer;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    pointer = &DAT_200000fc;\n    data[10] = &codeLabel;\n    if (data == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000fc) {\n      data[6] = pointer;\n    }\n    value = getFloatValue();\n    data[1] = value;\n    value = getFloatValue(data);\n    data[2] = value;\n    value = getFloatValue(data);\n    data[3] = value;\n    standardizeData(data[1],4,0);\n    standardizeData(data[2],9,1);\n    standardizeData(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data",
                "uVar1": "value",
                "puVar2": "pointer",
                "&LAB_08006c34_1": "&codeLabel",
                "__sfp": "getFloatValue",
                "std_isra_0": "standardizeData"
            },
            "calling": [
                "_fflush_r",
                "iprintf",
                "__sfputc_r",
                "__sfp",
                "_vfiprintf_r",
                "__swsetup_r"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_data_structures_08006d14",
            "code": "\nint * initializeDataStructures_08006d14(undefined4 *outputPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPointer;\n  int *innerPointer;\n  int **dataStructures;\n  \n  if (DAT_20000114 == 0) {\n    __sinit(&DAT_200000fc);\n  }\n  dataStructures = (int **)&DAT_20000144;\n  do {\n    innerPointer = dataStructures[2];\n    currentPointer = dataStructures[1];\n    while (currentPointer = (int *)((int)currentPointer + -1), -1 < (int)currentPointer) {\n      if (*(short *)(innerPointer + 3) == 0) {\n        *(undefined2 *)((int)innerPointer + 0xe) = 0xffff;\n        innerPointer[0x19] = 0;\n        *(undefined2 *)(innerPointer + 3) = 1;\n        *innerPointer = 0;\n        innerPointer[2] = 0;\n        innerPointer[1] = 0;\n        innerPointer[4] = 0;\n        innerPointer[5] = 0;\n        innerPointer[6] = 0;\n        memset(innerPointer + 0x17,0,8,1,param4);\n        innerPointer[0xd] = 0;\n        innerPointer[0xe] = 0;\n        innerPointer[0x12] = 0;\n        innerPointer[0x13] = 0;\n        return innerPointer;\n      }\n      innerPointer = innerPointer + 0x1a;\n    }\n    if (*dataStructures == (int *)0x0) {\n      currentPointer = (int *)__sfmoreglue(outputPointer,4);\n      *dataStructures = currentPointer;\n      if (currentPointer == (int *)0x0) {\n        *outputPointer = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataStructures = (int **)*dataStructures;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_data_structures_08006d14",
                "param_1": "outputPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPointer",
                "piVar2": "innerPointer",
                "ppiVar3": "dataStructures"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_file_permissions_08006dc8",
            "code": "\nundefined4 check_file_permissions_08006dc8(undefined4 file_descriptor,int file_info,undefined4 *output_flags,uint *is_executable)\n\n{\n  int result;\n  undefined4 uVar2;\n  undefined status_buffer [4];\n  uint file_permissions;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (result = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),status_buffer), result < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      uVar2 = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_permissions & 0xf000) == 0x2000);\n  }\n  uVar2 = 0x400;\nLAB_08006e08:\n  *output_flags = uVar2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "output_flags",
                "param_4": "is_executable",
                "auStack_4c": "status_buffer",
                "local_48": "file_permissions",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "initialize_device_08006e10",
            "code": "\nvoid initializeDevice_08006e10(int deviceHandle,int *deviceInfo)\n\n{\n  ushort bufferSize;\n  int allocatedMemory;\n  int paramSize;\n  int *paramOffset;\n  \n  if (-1 < (int)((uint)*(ushort *)(deviceInfo + 3) << 0x1e)) {\n    paramSize = deviceHandle;\n    paramOffset = deviceInfo;\n    bufferSize = __swhatbuf_r(deviceHandle,deviceInfo,&paramSize,&paramOffset);\n    allocatedMemory = _malloc_r(deviceHandle,paramSize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(deviceHandle + 0x28) = &LAB_08006c34_1;\n      *deviceInfo = allocatedMemory;\n      *(ushort *)(deviceInfo + 3) = *(ushort *)(deviceInfo + 3) | 0x80;\n      deviceInfo[4] = allocatedMemory;\n      deviceInfo[5] = paramSize;\n      if ((paramOffset != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(deviceHandle,(int)*(short *)((int)deviceInfo + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(deviceInfo + 3) = *(ushort *)(deviceInfo + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(deviceInfo + 3) = bufferSize | *(ushort *)(deviceInfo + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(deviceInfo + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(deviceInfo + 3) = *(ushort *)(deviceInfo + 3) & 0xfffc | 2;\n  }\n  *deviceInfo = (int)deviceInfo + 0x47;\n  deviceInfo[4] = (int)deviceInfo + 0x47;\n  deviceInfo[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "initialize_device_08006e10",
                "param_1": "deviceHandle",
                "param_2": "deviceInfo",
                "uVar1": "bufferSize",
                "iVar2": "allocatedMemory",
                "local_18": "paramSize",
                "local_14": "paramOffset"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_position_08006e90",
            "code": "\nchar * find_character_position_08006e90(char *string,char character,int length)\n\n{\n  char *current_pos;\n  char *next_pos;\n  \n  current_pos = string;\n  do {\n    next_pos = current_pos;\n    if (next_pos == string + length) {\n      return (char *)0x0;\n    }\n    current_pos = next_pos + 1;\n  } while (*next_pos != character);\n  return next_pos;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_position_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_pos",
                "pcVar2": "next_pos"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_signal_08006f00",
            "code": "\nint processSignal_08006f00(uint signal)\n\n{\n  int *signalCounter;\n  undefined4 pid;\n  int signalHandler;\n  code *handlerFunction;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 *unusedPointer;\n  \n  signalCounter = DAT_200000f8;\n  unusedPointer = &DAT_200000f8;\n  if (0x1f < signal) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  signalHandler = DAT_200000f8[0x11];\n  if ((signalHandler != 0) && (handlerFunction = *(code **)(signalHandler + signal * 4), handlerFunction != (code *)0x0)) {\n    if (handlerFunction != (code *)0x1) {\n      if (handlerFunction == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(signalHandler + signal * 4) = 0;\n      (*handlerFunction)(signal);\n    }\n    return 0;\n  }\n  pid = _getpid_r(DAT_200000f8);\n  DAT_200006a4 = 0;\n  signalHandler = _kill(pid,signal,signal,0,unusedPointer,unused1,unused2,unused3);\n  if ((signalHandler == -1) && (DAT_200006a4 != 0)) {\n    *signalCounter = DAT_200006a4;\n  }\n  return signalHandler;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "process_signal_08006f00",
                "param_1": "signal",
                "piVar1": "signalCounter",
                "uVar2": "pid",
                "iVar3": "signalHandler",
                "pcVar4": "handlerFunction",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3",
                "puVar5": "unusedPointer"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f34": {
            "entrypoint": "0x08006f34",
            "current_name": "FUN_08006f34",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_data_08006f38",
            "code": "\nvoid updateData_08006f38(undefined4 dataBuffer,int dataOffset)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isReadSuccessful;\n  \n  readResult = _read_r(dataBuffer,(int)*(short *)(dataOffset + 0xe));\n  isReadSuccessful = -1 < readResult;\n  if (isReadSuccessful) {\n    updatedValue = *(int *)(dataOffset + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataOffset + 0xc) & 0xffffefff;\n  }\n  if (isReadSuccessful) {\n    *(uint *)(dataOffset + 0x54) = updatedValue;\n  }\n  if (!isReadSuccessful) {\n    *(short *)(dataOffset + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_data_08006f38",
                "param_1": "dataBuffer",
                "param_2": "dataOffset",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isReadSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "write_to_file_08006f5a",
            "code": "\nvoid writeToFile_08006f5a(int *fileDescriptor,int bufferAddress,undefined4 dataAddress,undefined4 size)\n\n{\n  int writeResult;\n  undefined4 unused_4;\n  undefined4 unused_5;\n  undefined4 unused_lr;\n  \n  if ((int)((uint)*(ushort *)(bufferAddress + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe),0,2);\n  }\n  *(ushort *)(bufferAddress + 0xc) = *(ushort *)(bufferAddress + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  writeResult = _write((int)*(short *)(bufferAddress + 0xe),dataAddress,size,size,size,unused_4,unused_5,\n                 unused_lr);\n  if ((writeResult == -1) && (DAT_200006a4 != 0)) {\n    *fileDescriptor = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "write_to_file_08006f5a",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "param_3": "dataAddress",
                "param_4": "size",
                "iVar1": "writeResult",
                "unaff_r4": "unused_4",
                "unaff_r5": "unused_5",
                "in_lr": "unused_lr"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "update_file_offset_08006f92",
            "code": "\nvoid updateFileOffset_08006f92(undefined4 fileDescriptor,int context)\n\n{\n  int seekResult;\n  ushort updatedFlags;\n  bool seekFailed;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(context + 0xe));\n  seekFailed = seekResult == -1;\n  if (seekFailed) {\n    updatedFlags = *(ushort *)(context + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(context + 0x54) = seekResult;\n    updatedFlags = *(ushort *)(context + 0xc) | 0x1000;\n  }\n  if (seekFailed) {\n    *(ushort *)(context + 0xc) = updatedFlags;\n  }\n  if (!seekFailed) {\n    *(ushort *)(context + 0xc) = updatedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "update_file_offset_08006f92",
                "param_1": "fileDescriptor",
                "param_2": "context",
                "iVar1": "seekResult",
                "uVar2": "updatedFlags",
                "bVar3": "seekFailed"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "check_and_assign_error_08007004",
            "code": "\nvoid checkAndAssignError_08007004(int *result,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 fileLength)\n\n{\n  int status;\n  \n  DAT_200006a4 = 0;\n  status = _fstat(fileDescriptor,statBuffer,statBuffer,0,fileLength);\n  if ((status == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "check_and_assign_error_08007004",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "fileLength",
                "iVar1": "status"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "check_and_assign_value_08007028",
            "code": "\nvoid checkAndAssignValue_08007028(int *result,undefined4 fileDescriptor)\n\n{\n  int returnStatus;\n  \n  DAT_200006a4 = 0;\n  returnStatus = _isatty(fileDescriptor);\n  if ((returnStatus == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "check_and_assign_value_08007028",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "iVar1": "returnStatus"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "improve_lseek_08007048",
            "code": "\nvoid improve_lseek_08007048(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int lseek_result;\n  \n  DAT_200006a4 = 0;\n  lseek_result = _lseek(file_descriptor,offset,whence,whence,whence);\n  if ((lseek_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "improve_lseek_08007048",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "lseek_result"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "read_and_store_value_0800706c",
            "code": "\nvoid readAndStoreValue_0800706c(int *output,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_200006a4 = 0;\n  readResult = _read(fileDescriptor,buffer,count,count,count);\n  if ((readResult == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "read_and_store_value_0800706c",
                "param_1": "output",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "initialize_data_08007090",
            "code": "\nvoid initializeData_08007090(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = initializeData_08007090;\n  abort();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "initialize_data_08007090",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 178668,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_080009a8",
            "FUN_080009b8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08000aec",
            "FUN_08000b08",
            "FUN_08001294",
            "FUN_080012a2",
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_08001310",
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_080013a4",
            "FUN_08001550",
            "FUN_0800157c",
            "FUN_080015b2",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_08001814",
            "FUN_08001918",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_08001a44",
            "FUN_08001a66",
            "FUN_08001b48",
            "FUN_08001be8",
            "FUN_08001c32",
            "FUN_08001c3c",
            "FUN_08001c88",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001cd0",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08002004",
            "FUN_080020f0",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002384",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_0800282c",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800316c",
            "FUN_080032b4",
            "FUN_080033b8",
            "FUN_08003520",
            "FUN_0800365c",
            "FUN_08003688",
            "FUN_08003a68",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003c44",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003da4",
            "FUN_08003ea0",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004092",
            "FUN_080040b0",
            "FUN_08004110",
            "FUN_0800412c",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_08004204",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004478",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_080046b8",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_08004974",
            "FUN_080049f0",
            "FUN_08004a4c",
            "FUN_08004b34",
            "FUN_08004b3c",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c52",
            "FUN_08004c5e",
            "FUN_08004c78",
            "FUN_08004c8a",
            "FUN_08004ca2",
            "FUN_08004cb2",
            "FUN_08004cce",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e20",
            "FUN_08004e70",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_08004f4c",
            "FUN_08005384",
            "FUN_080053d4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005568",
            "FUN_080055bc",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_08005730",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_08005754",
            "FUN_080057b4",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_0800591e",
            "FUN_0800598a",
            "FUN_08005a44",
            "FUN_08005a68",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005b54",
            "FUN_08005bb0",
            "FUN_08005c1c",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005ce8",
            "FUN_08005d8a",
            "FUN_08005f2c",
            "FUN_08005f6c",
            "FUN_08005f8c",
            "FUN_08005fc8",
            "FUN_080060e4",
            "FUN_08006112",
            "FUN_0800611c",
            "FUN_08006158",
            "FUN_08006174",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_08006288",
            "FUN_08006344",
            "FUN_08006370",
            "FUN_08006394",
            "FUN_080065c0",
            "FUN_080066b0",
            "FUN_080068f0",
            "FUN_08006920",
            "FUN_080069e4",
            "FUN_08006ac0",
            "FUN_08006be0",
            "FUN_08006c40",
            "FUN_08006c88",
            "FUN_08006cb4",
            "FUN_08006d14",
            "FUN_08006dc8",
            "FUN_08006e10",
            "FUN_08006e90",
            "FUN_08006f00",
            "FUN_08006f38",
            "FUN_08006f5a",
            "FUN_08006f92",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_08000bcc",
            "FUN_080014ba",
            "FUN_080018f8",
            "FUN_08001ab0",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08001510",
            "FUN_08001b18",
            "FUN_08005d82"
        ],
        [
            "FUN_08000cd0",
            "FUN_08005da8"
        ],
        [
            "FUN_080060d4",
            "FUN_08007090"
        ]
    ],
    "locked_functions": []
}