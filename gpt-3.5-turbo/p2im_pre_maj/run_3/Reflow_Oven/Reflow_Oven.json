{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "calculate_string_end_index_08000178",
            "code": "\nchar * calculateStringEndIndex_08000178(char *inputString)\n\n{\n  char currentChar;\n  char *nextCharPointer;\n  char *currentCharPointer;\n  \n  currentCharPointer = inputString;\n  do {\n    nextCharPointer = currentCharPointer + 1;\n    currentChar = *currentCharPointer;\n    currentCharPointer = nextCharPointer;\n  } while (currentChar != '\\0');\n  return nextCharPointer + (-1 - (int)inputString);\n}\n\n",
            "renaming": {
                "FUN_08000178": "calculate_string_end_index_08000178",
                "param_1": "inputString",
                "cVar1": "currentChar",
                "pcVar2": "nextCharPointer",
                "pcVar3": "currentCharPointer"
            },
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_value_08000190",
            "code": "\nulonglong calculateValue_08000190(uint firstParam,uint secondParam,uint thirdParam,uint fourthParam)\n\n{\n  int tempVar1;\n  byte tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  bool tempVar13;\n  bool tempVar14;\n  bool tempVar15;\n  \n  tempVar6 = fourthParam ^ 0x80000000;\n  tempVar9 = secondParam << 1;\n  fourthParam = fourthParam << 1;\n  tempVar13 = ((secondParam ^ tempVar6) & 0x7fffffff) == 0;\n  tempVar14 = tempVar13 && firstParam == thirdParam;\n  if (!tempVar13 || firstParam != thirdParam) {\n    tempVar14 = (tempVar9 | firstParam) == 0;\n  }\n  if (!tempVar14) {\n    tempVar14 = (fourthParam | thirdParam) == 0;\n  }\n  tempVar8 = (int)tempVar9 >> 0x15;\n  if (!tempVar14) {\n    tempVar14 = tempVar8 == -1;\n  }\n  tempVar1 = (int)fourthParam >> 0x15;\n  if (!tempVar14) {\n    tempVar14 = tempVar1 == -1;\n  }\n  if (tempVar14) {\n    if (tempVar8 == -1 || tempVar1 == -1) {\n      tempVar9 = tempVar6;\n      tempVar11 = thirdParam;\n      if (tempVar8 == -1) {\n        tempVar9 = secondParam;\n        tempVar11 = firstParam;\n      }\n      if (tempVar8 != -1 || tempVar1 != -1) {\n        thirdParam = tempVar11;\n        tempVar6 = tempVar9;\n      }\n      tempVar14 = (tempVar11 | tempVar9 << 0xc) == 0;\n      if (tempVar14) {\n        tempVar14 = (thirdParam | tempVar6 << 0xc) == 0;\n      }\n      if (tempVar14) {\n        tempVar14 = tempVar9 == tempVar6;\n      }\n      if (!tempVar14) {\n        tempVar9 = tempVar9 | 0x80000;\n      }\n      return CONCAT44(tempVar9,tempVar11);\n    }\n    if (((secondParam ^ tempVar6) & 0x7fffffff) != 0 || firstParam != thirdParam) {\n      if ((tempVar9 | firstParam) == 0) {\n        firstParam = thirdParam;\n        secondParam = tempVar6;\n      }\n      return CONCAT44(secondParam,firstParam);\n    }\n    if (secondParam != tempVar6) {\n      return 0;\n    }\n    if (tempVar9 >> 0x15 == 0) {\n      tempVar14 = (firstParam & 0x80000000) != 0;\n      tempVar6 = secondParam * 2 + (uint)tempVar14;\n      if (CARRY4(secondParam,secondParam) || CARRY4(secondParam * 2,(uint)tempVar14)) {\n        tempVar6 = tempVar6 | 0x80000000;\n      }\n      return CONCAT44(tempVar6,firstParam << 1);\n    }\n    if (tempVar9 < 0xffc00000) {\n      return CONCAT44(secondParam + 0x100000,firstParam);\n    }\n    secondParam = secondParam & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(secondParam | 0x7ff00000) << 0x20;\n  }\n  tempVar9 = tempVar9 >> 0x15;\n  fourthParam = fourthParam >> 0x15;\n  tempVar11 = fourthParam - tempVar9;\n  tempVar14 = tempVar11 != 0;\n  if (fourthParam < tempVar9) {\n    tempVar11 = -tempVar11;\n  }\n  tempVar10 = firstParam;\n  tempVar7 = secondParam;\n  if (tempVar14 && tempVar9 <= fourthParam) {\n    tempVar9 = tempVar9 + tempVar11;\n    tempVar10 = thirdParam;\n    tempVar7 = tempVar6;\n    thirdParam = firstParam;\n    tempVar6 = secondParam;\n  }\n  if (0x36 < tempVar11) {\n    return CONCAT44(tempVar7,tempVar10);\n  }\n  tempVar4 = tempVar7 & 0xfffff | 0x100000;\n  if ((tempVar7 & 0x80000000) != 0) {\n    tempVar14 = tempVar10 != 0;\n    tempVar10 = -tempVar10;\n    tempVar4 = -tempVar4 - (uint)tempVar14;\n  }\n  tempVar7 = tempVar6 & 0xfffff | 0x100000;\n  if ((tempVar6 & 0x80000000) != 0) {\n    tempVar14 = thirdParam != 0;\n    thirdParam = -thirdParam;\n    tempVar7 = -tempVar7 - (uint)tempVar14;\n  }\n  if (tempVar9 == tempVar11) {\n    tempVar7 = tempVar7 ^ 0x100000;\n    if (tempVar9 == 0) {\n      tempVar4 = tempVar4 ^ 0x100000;\n      tempVar9 = 1;\n    }\n    else {\n      tempVar11 = tempVar11 - 1;\n    }\n  }\n  tempVar6 = -tempVar11 + 0x20;\n  if ((int)tempVar11 < 0x21) {\n    tempVar12 = thirdParam << (tempVar6 & 0xff);\n    thirdParam = thirdParam >> (tempVar11 & 0xff);\n    tempVar3 = tempVar10 + thirdParam;\n    tempVar5 = tempVar7 << (tempVar6 & 0xff);\n    tempVar6 = tempVar3 + tempVar5;\n    tempVar4 = tempVar4 + CARRY4(tempVar10,thirdParam) + ((int)tempVar7 >> (tempVar11 & 0xff)) +\n            (uint)CARRY4(tempVar3,tempVar5);\n  }\n  else {\n    tempVar12 = tempVar7 << (-tempVar11 + 0x40 & 0xff);\n    if (thirdParam != 0) {\n      tempVar12 = tempVar12 | 2;\n    }\n    tempVar7 = (int)tempVar7 >> (tempVar11 - 0x20 & 0xff);\n    tempVar6 = tempVar10 + tempVar7;\n    tempVar4 = tempVar4 + ((int)tempVar7 >> 0x1f) + (uint)CARRY4(tempVar10,tempVar7);\n  }\n  secondParam = tempVar4 & 0x80000000;\n  tempVar11 = tempVar4;\n  if ((int)tempVar4 < 0) {\n    tempVar14 = tempVar12 == 0;\n    tempVar12 = -tempVar12;\n    tempVar11 = -tempVar6;\n    tempVar6 = -(uint)!tempVar14 - tempVar6;\n    tempVar11 = -(uint)(tempVar14 <= tempVar11) - tempVar4;\n  }\n  if (0xfffff < tempVar11) {\n    tempVar10 = tempVar9 - 1;\n    if (0x1fffff < tempVar11) {\n      tempVar10 = tempVar11 & 1;\n      tempVar11 = tempVar11 >> 1;\n      tempVar2 = (byte)tempVar6;\n      tempVar6 = (uint)(tempVar10 != 0) << 0x1f | tempVar6 >> 1;\n      tempVar12 = (uint)(tempVar2 & 1) << 0x1f | tempVar12 >> 1;\n      tempVar10 = tempVar9;\n      if (0xffbfffff < tempVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    tempVar14 = 0x7fffffff < tempVar12;\n    if (tempVar12 == 0x80000000) {\n      tempVar14 = (tempVar6 & 1) != 0;\n    }\n    return CONCAT44(tempVar11 + tempVar10 * 0x100000 + (uint)CARRY4(tempVar6,(uint)tempVar14) | secondParam,\n                    tempVar6 + tempVar14);\n  }\n  tempVar13 = (tempVar12 & 0x80000000) != 0;\n  tempVar12 = tempVar12 << 1;\n  tempVar10 = tempVar6 * 2;\n  tempVar14 = CARRY4(tempVar6,tempVar6);\n  tempVar6 = tempVar6 * 2 + (uint)tempVar13;\n  tempVar11 = tempVar11 * 2 + (uint)(tempVar14 || CARRY4(tempVar10,(uint)tempVar13));\n  tempVar10 = tempVar9 - 2;\n  if ((tempVar11 & 0x100000) != 0) goto LAB_080002a0;\n  tempVar7 = tempVar6;\n  tempVar9 = tempVar11;\n  if (tempVar11 == 0) {\n    tempVar7 = 0;\n    tempVar9 = tempVar6;\n  }\n  tempVar8 = LZCOUNT(tempVar9);\n  if (tempVar11 == 0) {\n    tempVar8 = tempVar8 + 0x20;\n  }\n  tempVar11 = tempVar8 - 0xb;\n  tempVar15 = SBORROW4(tempVar11,0x20);\n  tempVar6 = tempVar8 - 0x2b;\n  tempVar14 = (int)tempVar6 < 0;\n  tempVar13 = tempVar6 == 0;\n  if ((int)tempVar11 < 0x20) {\n    tempVar15 = SCARRY4(tempVar6,0xc);\n    tempVar8 = tempVar8 + -0x1f;\n    tempVar14 = tempVar8 < 0;\n    tempVar13 = tempVar8 == 0;\n    tempVar6 = tempVar11;\n    if (!tempVar13 && tempVar14 == tempVar15) {\n      tempVar7 = tempVar9 << (tempVar11 & 0xff);\n      tempVar9 = tempVar9 >> (0xcU - tempVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (tempVar13 || tempVar14 != tempVar15) {\n    tempVar12 = 0x20 - tempVar6;\n  }\n  tempVar9 = tempVar9 << (tempVar6 & 0xff);\n  if (tempVar13 || tempVar14 != tempVar15) {\n    tempVar9 = tempVar9 | tempVar7 >> (tempVar12 & 0xff);\n  }\n  if (tempVar13 || tempVar14 != tempVar15) {\n    tempVar7 = tempVar7 << (tempVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)tempVar11 <= (int)tempVar10) {\n    return CONCAT44(tempVar9 + (tempVar10 - tempVar11) * 0x100000 | secondParam,tempVar7);\n  }\n  tempVar6 = ~(tempVar10 - tempVar11);\n  if ((int)tempVar6 < 0x1f) {\n    tempVar8 = tempVar6 - 0x13;\n    if (tempVar8 != 0 && tempVar8 < 0 == SCARRY4(tempVar6 - 0x1f,0xc)) {\n      return CONCAT44(tempVar4,tempVar7 >> (0x20 - (0xcU - tempVar8) & 0xff) | tempVar9 << (0xcU - tempVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tempVar6 = tempVar6 + 1;\n    return CONCAT44(secondParam | tempVar9 >> (tempVar6 & 0xff),\n                    tempVar7 >> (tempVar6 & 0xff) | tempVar9 << (0x20 - tempVar6 & 0xff));\n  }\n  return CONCAT44(tempVar4,tempVar9 >> (tempVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_value_08000190",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "param_3": "thirdParam",
                "param_4": "fourthParam",
                "iVar1": "tempVar1",
                "bVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "bVar13": "tempVar13",
                "bVar14": "tempVar14",
                "bVar15": "tempVar15"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_multipliers_08000194",
            "code": "\nulonglong calculate_multipliers_08000194(uint x,uint y,uint param_3,uint param_4)\n\n{\n  int shift1;\n  byte bVar2;\n  uint temp1;\n  uint temp2;\n  uint multiplier1;\n  int shift2;\n  uint multiplier2;\n  uint temp3;\n  uint multiplier3;\n  uint multiplier4;\n  uint temp4;\n  uint temp5;\n  bool equal1;\n  bool equal2;\n  bool equal3;\n  \n  multiplier2 = y << 1;\n  multiplier3 = param_4 << 1;\n  equal1 = ((y ^ param_4) & 0x7fffffff) == 0;\n  equal2 = equal1 && x == param_3;\n  if (!equal1 || x != param_3) {\n    equal2 = (multiplier2 | x) == 0;\n  }\n  if (!equal2) {\n    equal2 = (multiplier3 | param_3) == 0;\n  }\n  shift2 = (int)multiplier2 >> 0x15;\n  if (!equal2) {\n    equal2 = shift2 == -1;\n  }\n  shift1 = (int)multiplier3 >> 0x15;\n  if (!equal2) {\n    equal2 = shift1 == -1;\n  }\n  if (equal2) {\n    if (shift2 == -1 || shift1 == -1) {\n      multiplier3 = param_4;\n      multiplier2 = param_3;\n      if (shift2 == -1) {\n        multiplier3 = y;\n        multiplier2 = x;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        param_3 = multiplier2;\n        param_4 = multiplier3;\n      }\n      equal2 = (multiplier2 | multiplier3 << 0xc) == 0;\n      if (equal2) {\n        equal2 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (equal2) {\n        equal2 = multiplier3 == param_4;\n      }\n      if (!equal2) {\n        multiplier3 = multiplier3 | 0x80000;\n      }\n      return CONCAT44(multiplier3,multiplier2);\n    }\n    if (((y ^ param_4) & 0x7fffffff) != 0 || x != param_3) {\n      if ((multiplier2 | x) == 0) {\n        x = param_3;\n        y = param_4;\n      }\n      return CONCAT44(y,x);\n    }\n    if (y != param_4) {\n      return 0;\n    }\n    if (multiplier2 >> 0x15 == 0) {\n      equal2 = (x & 0x80000000) != 0;\n      multiplier3 = y * 2 + (uint)equal2;\n      if (CARRY4(y,y) || CARRY4(y * 2,(uint)equal2)) {\n        multiplier3 = multiplier3 | 0x80000000;\n      }\n      return CONCAT44(multiplier3,x << 1);\n    }\n    if (multiplier2 < 0xffc00000) {\n      return CONCAT44(y + 0x100000,x);\n    }\n    y = y & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(y | 0x7ff00000) << 0x20;\n  }\n  multiplier2 = multiplier2 >> 0x15;\n  multiplier3 = multiplier3 >> 0x15;\n  multiplier4 = multiplier3 - multiplier2;\n  equal2 = multiplier4 != 0;\n  if (multiplier3 < multiplier2) {\n    multiplier4 = -multiplier4;\n  }\n  temp3 = x;\n  multiplier1 = y;\n  if (equal2 && multiplier2 <= multiplier3) {\n    multiplier2 = multiplier2 + multiplier4;\n    temp3 = param_3;\n    multiplier1 = param_4;\n    param_3 = x;\n    param_4 = y;\n  }\n  if (0x36 < multiplier4) {\n    return CONCAT44(multiplier1,temp3);\n  }\n  multiplier3 = multiplier1 & 0xfffff | 0x100000;\n  if ((multiplier1 & 0x80000000) != 0) {\n    equal2 = temp3 != 0;\n    temp3 = -temp3;\n    multiplier3 = -multiplier3 - (uint)equal2;\n  }\n  multiplier1 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    equal2 = param_3 != 0;\n    param_3 = -param_3;\n    multiplier1 = -multiplier1 - (uint)equal2;\n  }\n  if (multiplier2 == multiplier4) {\n    multiplier1 = multiplier1 ^ 0x100000;\n    if (multiplier2 == 0) {\n      multiplier3 = multiplier3 ^ 0x100000;\n      multiplier2 = 1;\n    }\n    else {\n      multiplier4 = multiplier4 - 1;\n    }\n  }\n  temp5 = -multiplier4 + 0x20;\n  if ((int)multiplier4 < 0x21) {\n    temp4 = param_3 << (temp5 & 0xff);\n    param_3 = param_3 >> (multiplier4 & 0xff);\n    temp1 = temp3 + param_3;\n    temp2 = multiplier1 << (temp5 & 0xff);\n    temp5 = temp1 + temp2;\n    multiplier3 = multiplier3 + CARRY4(temp3,param_3) + ((int)multiplier1 >> (multiplier4 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp4 = multiplier1 << (-multiplier4 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    multiplier1 = (int)multiplier1 >> (multiplier4 - 0x20 & 0xff);\n    temp5 = temp3 + multiplier1;\n    multiplier3 = multiplier3 + ((int)multiplier1 >> 0x1f) + (uint)CARRY4(temp3,multiplier1);\n  }\n  y = multiplier3 & 0x80000000;\n  multiplier4 = multiplier3;\n  if ((int)multiplier3 < 0) {\n    equal2 = temp4 == 0;\n    temp4 = -temp4;\n    multiplier4 = -temp5;\n    temp5 = -(uint)!equal2 - temp5;\n    multiplier4 = -(uint)(equal2 <= multiplier4) - multiplier3;\n  }\n  if (0xfffff < multiplier4) {\n    temp3 = multiplier2 - 1;\n    if (0x1fffff < multiplier4) {\n      multiplier3 = multiplier4 & 1;\n      multiplier4 = multiplier4 >> 1;\n      bVar2 = (byte)temp5;\n      temp5 = (uint)(multiplier3 != 0) << 0x1f | temp5 >> 1;\n      temp4 = (uint)(bVar2 & 1) << 0x1f | temp4 >> 1;\n      temp3 = multiplier2;\n      if (0xffbfffff < multiplier2 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    equal2 = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      equal2 = (temp5 & 1) != 0;\n    }\n    return CONCAT44(multiplier4 + temp3 * 0x100000 + (uint)CARRY4(temp5,(uint)equal2) | y,\n                    temp5 + equal2);\n  }\n  equal1 = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  temp3 = temp5 * 2;\n  equal2 = CARRY4(temp5,temp5);\n  temp5 = temp5 * 2 + (uint)equal1;\n  multiplier4 = multiplier4 * 2 + (uint)(equal2 || CARRY4(temp3,(uint)equal1));\n  temp3 = multiplier2 - 2;\n  if ((multiplier4 & 0x100000) != 0) goto LAB_080002a0;\n  multiplier1 = temp5;\n  multiplier2 = multiplier4;\n  if (multiplier4 == 0) {\n    multiplier1 = 0;\n    multiplier2 = temp5;\n  }\n  shift2 = LZCOUNT(multiplier2);\n  if (multiplier4 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp5 = shift2 - 0xb;\n  equal3 = SBORROW4(temp5,0x20);\n  multiplier4 = shift2 - 0x2b;\n  equal2 = (int)multiplier4 < 0;\n  equal1 = multiplier4 == 0;\n  if ((int)temp5 < 0x20) {\n    equal3 = SCARRY4(multiplier4,0xc);\n    shift2 = shift2 + -0x1f;\n    equal2 = shift2 < 0;\n    equal1 = shift2 == 0;\n    multiplier4 = temp5;\n    if (!equal1 && equal2 == equal3) {\n      multiplier1 = multiplier2 << (temp5 & 0xff);\n      multiplier2 = multiplier2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (equal1 || equal2 != equal3) {\n    temp4 = 0x20 - multiplier4;\n  }\n  multiplier2 = multiplier2 << (multiplier4 & 0xff);\n  if (equal1 || equal2 != equal3) {\n    multiplier2 = multiplier2 | multiplier1 >> (temp4 & 0xff);\n  }\n  if (equal1 || equal2 != equal3) {\n    multiplier1 = multiplier1 << (multiplier4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp5 <= (int)temp3) {\n    return CONCAT44(multiplier2 + (temp3 - temp5) * 0x100000 | y,multiplier1);\n  }\n  multiplier4 = ~(temp3 - temp5);\n  if ((int)multiplier4 < 0x1f) {\n    shift2 = multiplier4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(multiplier4 - 0x1f,0xc)) {\n      return CONCAT44(multiplier3,multiplier1 >> (0x20 - (0xcU - shift2) & 0xff) | multiplier2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    multiplier4 = multiplier4 + 1;\n    return CONCAT44(y | multiplier2 >> (multiplier4 & 0xff),\n                    multiplier1 >> (multiplier4 & 0xff) | multiplier2 << (0x20 - multiplier4 & 0xff));\n  }\n  return CONCAT44(multiplier3,multiplier2 >> (multiplier4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "calculate_multipliers_08000194",
                "param_1": "x",
                "param_2": "y",
                "iVar1": "shift1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "multiplier1",
                "iVar6": "shift2",
                "uVar7": "multiplier2",
                "uVar8": "temp3",
                "uVar9": "multiplier3",
                "uVar10": "multiplier4",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "equal1",
                "bVar14": "equal2",
                "bVar15": "equal3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "bit_shift_and_concat_0800040c",
            "code": "\nulonglong bitShiftAndConcat_0800040c(uint input)\n\n{\n  uint upperBits;\n  uint shiftAmount;\n  int lzCount;\n  uint tempVar;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isBorrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  upperBits = 0;\n  lzCount = LZCOUNT(input);\n  tempVar = lzCount + 0x15;\n  isBorrow = SBORROW4(tempVar,0x20);\n  shiftAmount = lzCount - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (tempVar < 0x20) {\n    isBorrow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = lzCount + 1 == 0;\n    shiftAmount = tempVar;\n    if (!isZero && isBorrow == false) {\n      upperBits = input << tempVar;\n      input = input >> (0xcU - (lzCount + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero || isNegative != isBorrow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isZero || isNegative != isBorrow) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isBorrow) {\n    upperBits = 0 << (shiftAmount & 0xff);\n  }\nLAB_08000318:\n  if (tempVar < 0x433) {\n    return CONCAT44(input + (0x432 - tempVar) * 0x100000,upperBits);\n  }\n  shiftAmount = ~(0x432 - tempVar);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  lzCount = shiftAmount - 0x13;\n  if (lzCount == 0 || lzCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(input >> (shiftAmount & 0xff),\n                    upperBits >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(upperBits >> (0x20 - (0xcU - lzCount) & 0xff) | input << (0xcU - lzCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "bit_shift_and_concat_0800040c",
                "param_1": "input",
                "uVar1": "upperBits",
                "uVar2": "shiftAmount",
                "iVar3": "lzCount",
                "uVar4": "tempVar",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isBorrow"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "bitwise_shift_and_concat_0800042c",
            "code": "\nulonglong bitwise_shift_and_concat_0800042c(uint input_value)\n\n{\n  uint shifted_value;\n  uint abs_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint shifted_amount_minus_b;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_bit;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_value = -input_value;\n  }\n  shifted_value = 0;\n  leading_zeros = LZCOUNT(abs_value);\n  shifted_amount_minus_b = leading_zeros + 0x15;\n  carry_bit = SBORROW4(shifted_amount_minus_b,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shifted_amount_minus_b < 0x20) {\n    carry_bit = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shifted_amount_minus_b;\n    if (!is_zero && carry_bit == false) {\n      shifted_value = abs_value << shifted_amount_minus_b;\n      abs_value = abs_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero || is_negative != carry_bit) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_value = abs_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_bit) {\n    abs_value = abs_value | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_bit) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nLAB_08000318:\n  if (shifted_amount_minus_b < 0x433) {\n    return CONCAT44(abs_value + (0x432 - shifted_amount_minus_b) * 0x100000 | sign_bit,shifted_value);\n  }\n  shift_amount = ~(0x432 - shifted_amount_minus_b);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_value >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "bitwise_shift_and_concat_0800042c",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "abs_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "shifted_amount_minus_b",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_bit"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_sign_and_exponent_080004f8",
            "code": "\nulonglong calculate_sign_and_exponent_080004f8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong var1;\n  \n  var1 = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    var1 = calculate_sign_and_exponent_080004f8_080006d4();\n  }\n  temp1 = (uint)(var1 >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)var1 | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)var1 | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (var1 & 0xffffffff) * (ulonglong)input3;\n    var1 = (var1 & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)var1;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (var1 >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_sign_and_exponent_080004f8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "var1"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "calculate_sign_and_exponent_080006d4",
            "code": "\nulonglong calculate_sign_and_exponent_080006d4(uint number_1,uint number_2,uint number_3,uint number_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & number_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (number_1 | number_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (number_3 | number_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((number_2 ^ number_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = number_2 & 0x80000000;\n      do {\n        bit_1 = number_1 & 0x80000000;\n        number_1 = number_1 << 1;\n        number_2 = number_2 * 2 + (uint)(bit_1 != 0);\n      } while ((number_2 & 0x100000) == 0);\n      number_2 = number_2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(number_2,number_1);\n      }\n    }\n    do {\n      bit_3 = number_3 & 0x80000000;\n      number_3 = number_3 << 1;\n      number_4 = number_4 * 2 + (uint)(bit_3 != 0);\n    } while ((number_4 & 0x100000) == 0);\n    return CONCAT44(number_2,number_1);\n  }\n  is_zero = (number_1 | number_2 << 1) == 0;\n  if (is_zero) {\n    number_2 = number_4;\n    number_1 = number_3;\n  }\n  if (!is_zero) {\n    is_zero = (number_3 | number_4 << 1) == 0;\n  }\n  bit_4 = number_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((number_1 | number_2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (number_1 = number_3, bit_4 = number_4, (number_3 | number_4 << 0xc) == 0)))) {\n    return (ulonglong)((number_2 ^ number_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,number_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "calculate_sign_and_exponent_080006d4",
                "param_1": "number_1",
                "param_2": "number_2",
                "param_3": "number_3",
                "param_4": "number_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_floating_point_0800074c",
            "code": "\nulonglong calculateFloatingPoint_0800074c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool tempBool1;\n  bool tempBool2;\n  bool tempBool3;\n  undefined8 temp17;\n  \n  temp17 = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  tempBool1 = temp7 == 0;\n  if (!tempBool1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    tempBool1 = temp10 == 0;\n  }\n  if (!tempBool1) {\n    tempBool1 = temp7 == 0x7ff;\n  }\n  if (!tempBool1) {\n    tempBool1 = temp10 == 0x7ff;\n  }\n  if (tempBool1) {\n    temp17 = calculate_floating_point_value_080008ba();\n  }\n  temp9 = (uint)((ulonglong)temp17 >> 0x20);\n  temp12 = (uint)temp17;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    tempBool3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    tempBool1 = (int)temp9 < 0;\n    tempBool2 = temp9 == 0;\n    if (!tempBool2 && tempBool1 == tempBool3) {\n      tempBool3 = SBORROW4(temp14,temp9);\n      tempBool1 = (int)(temp14 - temp9) < 0;\n      tempBool2 = temp14 == temp9;\n    }\n    if (!tempBool2 && tempBool1 == tempBool3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!tempBool2 && tempBool1 == tempBool3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    tempBool2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    tempBool1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    tempBool1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      tempBool1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)tempBool1;\n    temp9 = temp8 + 0x3fd;\n    if (tempBool1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      tempBool1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)tempBool1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!tempBool1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      tempBool2 = temp1 <= temp13;\n      tempBool1 = temp11 - temp5 < (uint)tempBool2;\n      temp14 = temp11;\n      if (temp5 < temp11 || tempBool1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!tempBool2;\n      }\n      if (temp5 < temp11 || tempBool1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      tempBool2 = temp2 <= temp13;\n      tempBool1 = temp14 - temp11 < (uint)tempBool2;\n      temp5 = temp14;\n      if (temp11 < temp14 || tempBool1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!tempBool2;\n      }\n      if (temp11 < temp14 || tempBool1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      tempBool2 = temp1 <= temp13;\n      tempBool1 = temp5 - temp6 < (uint)tempBool2;\n      temp11 = temp5;\n      if (temp6 < temp5 || tempBool1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!tempBool2;\n      }\n      if (temp6 < temp5 || tempBool1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800086a:\n    tempBool3 = 0xfc < temp9;\n    tempBool2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    tempBool1 = temp4 == 0;\n    temp3 = temp4;\n    if (tempBool3 && !tempBool1) {\n      tempBool3 = 0x6ff < temp4;\n      tempBool2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      tempBool1 = temp4 == 0x700;\n    }\n    if (!tempBool3 || tempBool1) {\n      tempBool1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        tempBool1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        tempBool1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)tempBool1),temp12 + tempBool1);\n    }\n  }\n  if (!tempBool1 && (int)temp3 < 0 == tempBool2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  tempBool3 = SCARRY4(temp9,0x36);\n  tempBool1 = (int)(temp9 + 0x36) < 0;\n  tempBool2 = temp9 == 0xffffffca;\n  if (tempBool2 || tempBool1 != tempBool3) {\n    temp12 = 0;\n  }\n  if (tempBool2 || tempBool1 != tempBool3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (tempBool2 || tempBool1 != tempBool3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "tempBool1",
                "bVar15": "tempBool2",
                "bVar16": "tempBool3"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "calculate_floating_point_value_080008ba",
            "code": "\nulonglong calculateFloatingPointValue_080008ba(uint exponentPart1,uint exponentPart2,uint mantissaPart1,uint mantissaPart2)\n\n{\n  uint bit1;\n  uint in_r4;\n  uint in_r12_part1;\n  uint in_r12_part2;\n  uint in_r12;\n  bool isZero;\n  \n  in_r12_part1 = in_r12 & mantissaPart2 >> 0x14;\n  in_r12_part2 = exponentPart2;\n  if (in_r4 != in_r12 || in_r12_part1 != in_r12) {\n    if (in_r4 == in_r12) {\n      if (((exponentPart1 | exponentPart2 << 0xc) == 0) && (exponentPart1 = mantissaPart1, in_r12_part2 = mantissaPart2, in_r12_part1 != in_r12)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((exponentPart2 ^ mantissaPart2) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (in_r12_part1 == in_r12) {\n      exponentPart1 = mantissaPart1;\n      in_r12_part2 = mantissaPart2;\n      if ((mantissaPart1 | mantissaPart2 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((exponentPart2 ^ mantissaPart2) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (exponentPart1 | exponentPart2 << 1) == 0;\n      if (!isZero) {\n        isZero = (mantissaPart1 | mantissaPart2 << 1) == 0;\n      }\n      if (!isZero) {\n        if (in_r4 == 0) {\n          in_r12_part2 = exponentPart2 & 0x80000000;\n          do {\n            bit1 = exponentPart1 & 0x80000000;\n            exponentPart1 = exponentPart1 << 1;\n            exponentPart2 = exponentPart2 * 2 + (uint)(bit1 != 0);\n          } while ((exponentPart2 & 0x100000) == 0);\n          exponentPart2 = exponentPart2 | in_r12_part2;\n          if (in_r12_part1 != 0) {\n            return CONCAT44(exponentPart2,exponentPart1);\n          }\n        }\n        do {\n          in_r12_part2 = mantissaPart1 & 0x80000000;\n          mantissaPart1 = mantissaPart1 << 1;\n          mantissaPart2 = mantissaPart2 * 2 + (uint)(in_r12_part2 != 0);\n        } while ((mantissaPart2 & 0x100000) == 0);\n        return CONCAT44(exponentPart2,exponentPart1);\n      }\n      if ((exponentPart1 | exponentPart2 << 1) != 0) goto LAB_0800072c;\n      if ((mantissaPart1 | mantissaPart2 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(in_r12_part2,exponentPart1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "calculate_floating_point_value_080008ba",
                "param_1": "exponentPart1",
                "param_2": "exponentPart2",
                "param_3": "mantissaPart1",
                "param_4": "mantissaPart2",
                "uVar1": "bit1",
                "unaff_r4": "in_r4",
                "uVar2": "in_r12_part1",
                "uVar3": "in_r12_part2",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "compare_parameters_0800092c",
            "code": "\nuint compareParameters_0800092c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result1;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result1 = value2 ^ value4;\n    isZero = result1 == 0;\n    if (-1 < (int)result1) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result1 && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "compare_parameters_0800092c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "validate_parameters_080009a8",
            "code": "\nvoid validate_parameters_080009a8(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  check_parameters_080009b8(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "validate_parameters_080009a8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "check_parameters_080009b8",
            "code": "\nundefined4 check_parameters_080009b8(undefined4 input_value)\n\n{\n  compare_parameters_0800092c();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "check_parameters_080009b8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_parameters_080009c8",
            "code": "\nbool check_parameters_080009c8(void)\n\n{\n  char is_valid;\n  \n  check_parameters_080009c8_080009b8();\n  return is_valid != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_parameters_080009c8",
                "in_ZR": "is_valid"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_null_terminator_080009dc",
            "code": "\nbool is_null_terminator_080009dc(void)\n\n{\n  char input_character;\n  \n  check_parameters_080009b8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_null_terminator_080009dc",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_parameter_conditions_080009f0",
            "code": "\nbool check_parameter_conditions_080009f0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  check_parameters_080009b8();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_parameter_conditions_080009f0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_validity_08000a04",
            "code": "\nbool checkParametersValidity_08000a04(void)\n\n{\n  undefined isParameterZero;\n  undefined isParameterNegative;\n  \n  validate_parameters_080009a8();\n  return !(bool)isParameterNegative || (bool)isParameterZero;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_validity_08000a04",
                "in_ZR": "isParameterZero",
                "in_CY": "isParameterNegative"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "check_if_parameter_contains_null_byte_08000a18",
            "code": "\nbool check_if_parameter_contains_null_byte_08000a18(void)\n\n{\n  char input_character;\n  \n  validate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "check_if_parameter_contains_null_byte_08000a18",
                "in_CY": "input_character",
                "validate_parameters_080009a8": "validate_parameters"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_parameters_08000a2c",
            "code": "\nundefined4 check_parameters_08000a2c(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "convert_signed_unsigned_08000a58",
            "code": "\nuint convertSignedUnsigned_08000a58(uint inputValue,uint shiftAmount)\n\n{\n  uint shiftedValue;\n  int adjustedValue;\n  uint shiftedCount;\n  \n  adjustedValue = shiftAmount * 2 + 0x200000;\n  if (shiftAmount * 2 < 0xffe00000) {\n    if (-1 < adjustedValue) {\n      return 0;\n    }\n    shiftedValue = adjustedValue >> 0x15;\n    shiftedCount = -shiftedValue - 0x3e1;\n    if (shiftedValue < 0xfffffc20 && shiftedCount != 0) {\n      shiftedValue = (shiftAmount << 0xb | 0x80000000 | inputValue >> 0x15) >> (shiftedCount & 0xff);\n      if ((shiftAmount & 0x80000000) != 0) {\n        shiftedValue = -shiftedValue;\n      }\n      return shiftedValue;\n    }\n  }\n  else if ((inputValue | shiftAmount << 0xc) != 0) {\n    return 0;\n  }\n  shiftAmount = shiftAmount & 0x80000000;\n  if (shiftAmount == 0) {\n    shiftAmount = 0x7fffffff;\n  }\n  return shiftAmount;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "convert_signed_unsigned_08000a58",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "uVar1": "shiftedValue",
                "iVar2": "adjustedValue",
                "uVar3": "shiftedCount"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_shifted_value_08000aa8",
            "code": "\nuint calculate_shifted_value_08000aa8(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint result;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    result = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)result) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (result & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_software_interrupt_08000ae8",
            "code": "\nvoid executeSoftwareInterrupt_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_software_interrupt_08000ae8"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_interrupt_handler_08000aec",
            "code": "\nundefined4 execute_interrupt_handler_08000aec(undefined4 handler_param,undefined4 unused_param_1,undefined4 unused_param_2,undefined4 interrupt_id)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_08000ae8(1,handler_param,0,0,interrupt_id);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_interrupt_handler_08000aec",
                "param_1": "handler_param",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "interrupt_id",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_if_condition_met_08000b08",
            "code": "\nvoid initialize_if_condition_met_08000b08(int input_param,int flag_param)\n\n{\n  if ((input_param == 1) && (flag_param == 0xffff)) {\n    initialize_and_return_param_08001b18(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initialize_and_return_status_08001510(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    initialize_and_process_parameters_0800157c(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_if_condition_met_08000b08",
                "param_1": "input_param",
                "param_2": "flag_param"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_oven_08000bcc",
            "code": "\nvoid initializeOven_08000bcc(void)\n\n{\n  processParameter(DAT_20000064,0);\n  initializeMemoryAccess(DAT_20000064,1);\n  processParameter(DAT_20000004,0);\n  initializeMemoryAccess(DAT_20000004,1);\n  processParameter(DAT_20000060,0);\n  initializeMemoryAccess(DAT_20000060,1);\n  processParameter(DAT_20000004,1);\n  processParamsAndInitialize(&DAT_20000194,8,2,0);\n  processAndInvoke(&DAT_20000194,0,&DAT_20000008);\n  initializeParameters(&DAT_20000194);\n  processString(&DAT_20000194,\"Reflow\");\n  processParam(&DAT_20000194,0,1);\n  processString(&DAT_20000194,\"Oven 1.2\");\n  processParameter(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  initializeParameters(&DAT_20000194);\n  configureSerial(&DAT_2000036c,0xe100,6);\n  processParameter(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initializeData();\n  DAT_200001b4 = initializeData();\n  executeInterruptHandler(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_oven_08000bcc",
                "process_parameter_08005848": "processParameter",
                "initialize_memory_access_080057b4": "initializeMemoryAccess",
                "process_params_and_initialize_080013a4": "processParamsAndInitialize",
                "process_and_invoke_08001550": "processAndInvoke",
                "initialize_parameters_0800135a": "initializeParameters",
                "process_string_08005c96": "processString",
                "process_param_08001366": "processParam",
                "configure_serial_08005a68": "configureSerial",
                "initialize_data_080058e0": "initializeData",
                "execute_interrupt_handler_08000aec": "executeInterruptHandler"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "process_data_08000cd0",
            "code": "\nvoid processData_08000cd0(void)\n\n{\n  uint dataSize;\n  undefined4 data1;\n  int status;\n  undefined4 data2;\n  undefined4 extraData1;\n  undefined4 extraData2;\n  undefined4 extraData3;\n  undefined8 result;\n  \n  dataSize = initialize_data_080058e0();\n  if (DAT_200001b4 < dataSize) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    result = decode_and_convert_float_080015f8(&DAT_2000024c,0);\n    data2 = (undefined4)((ulonglong)result >> 0x20);\n    data1 = (undefined4)result;\n    DAT_20000188 = data1;\n    DAT_2000018c = data2;\n    status = check_parameters_080009c8(data1,data2,0,0x40c38800);\n    if (((status != 0) || (status = check_parameters_080009c8(data1,data2,0,0x40c38880), status != 0)) ||\n       (status = check_parameters_080009c8(data1,data2,0,0x40c38900), status != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  dataSize = initialize_data_080058e0();\n  data1 = DAT_20000060;\n  if (DAT_200001b0 < dataSize) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      status = check_bit_and_return_result_08005890(DAT_20000060);\n      process_parameter_08005848(data1,status == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      execute_convert_base_08005d82(&DAT_2000036c,DAT_20000250,10);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      initialize_parameters_08005f2c(&DAT_2000036c,extraData1,DAT_20000240,DAT_20000244,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      initialize_parameters_08005f2c(&DAT_2000036c,extraData2,DAT_20000188,DAT_2000018c,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      calculate_sum_08005f40(&DAT_2000036c,extraData3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      process_parameter_08005848(DAT_20000060,1);\n    }\n    initialize_parameters_0800135a(&DAT_20000194);\n    process_string_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    process_param_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      process_string_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      initialize_parameters_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      process_and_return_status_0800134e(&DAT_20000194,0);\n      process_string_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  data2 = DAT_2000018c;\n  data1 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    status = check_parameters_validity_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (status == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_total_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_data_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        result = bitwise_shift_and_concat_0800042c(DAT_20000258);\n        update_parameters_08001960(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0,result);\n        update_floating_point_values_08001918(&DAT_200001c0,1000);\n        update_parameter_status_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    status = check_parameters_validity_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (status != 0) {\n      result = initialize_data_080058e0();\n      DAT_20000254 = (int)result + 9000;\n      initialize_data_processing_080018f8(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    dataSize = initialize_data_080058e0();\n    if (DAT_20000254 < dataSize) {\n      status = initialize_data_080058e0();\n      DAT_20000254 = status + 9000;\n      result = calculate_multipliers_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)result >> 0x20);\n      DAT_20000240 = (undefined4)result;\n      result = check_if_parameter_contains_null_byte_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)result != 0) {\n        initialize_data_processing_080018f8(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    result = check_parameters_validity_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)result != 0) {\n      initialize_data_processing_080018f8(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    status = check_parameter_conditions_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (status != 0) {\n      status = initialize_data_080058e0();\n      DAT_20000180 = status + 1000;\n      process_parameter_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    dataSize = initialize_data_080058e0();\n    if (DAT_20000180 < dataSize) {\n      process_parameter_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    status = is_null_terminator_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (status != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    status = check_parameters_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((status == 0) && (status = check_parameters_080009c8(data1,data2,0,0x40c38880), status == 0)) &&\n       (status = check_parameters_080009c8(data1,data2,0,0x40c38900), status == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    status = process_value_08005754(DAT_20000068);\n    if (status == 0) {\n      status = initialize_data_080058e0();\n      if (0x32 < (uint)(status - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    status = process_value_08005754(DAT_20000068);\n    if (status == 0) {\n      DAT_20000190 = initialize_data_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (status = process_value_08005754(DAT_20000068), status != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    status = initialize_data_080058e0();\n    process_data_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(status - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    result = bit_shift_and_concat_0800040c(status - DAT_2000025c);\n    status = is_null_terminator_080009dc((int)result,(int)((ulonglong)result >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (status == 0) {\n      process_parameter_08005848(DAT_20000064,0);\n    }\n    else {\n      process_parameter_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    process_parameter_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "uVar1": "dataSize",
                "uVar2": "data1",
                "uVar4": "data2",
                "extraout_r1": "extraData1",
                "extraout_r1_00": "extraData2",
                "extraout_r1_01": "extraData3",
                "uVar5": "result",
                "iVar3": "status"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "store_params_08001294",
            "code": "\nvoid storeParams_08001294(int baseAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(baseAddress + 0x18) = value1;\n  *(undefined *)(baseAddress + 0x19) = value2;\n  *(undefined *)(baseAddress + 0x1a) = value3;\n  *(undefined *)(baseAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "store_params_08001294",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "process_parameter_080012a2",
            "code": "\nvoid process_parameter_080012a2(int param)\n\n{\n  process_param(*(undefined *)(param + 10),0);\n  process_param(*(undefined *)(param + 10),1);\n  process_param(*(undefined *)(param + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "process_parameter_080012a2",
                "param_1": "param",
                "process_parameter_08005848": "process_param"
            },
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "process_parameters_080012c0",
            "code": "\nvoid process_parameters_080012c0(int input_array,int flag)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 4; index = index + 1) {\n    process_parameter_08005848(*(undefined *)(input_array + index + 0xb),flag >> (index & 0xff) & 1);\n  }\n  process_parameter_080012a2(input_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "process_parameters_080012c0",
                "param_1": "input_array",
                "param_2": "flag",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "process_parameters_080012e8",
            "code": "\nvoid process_parameters_080012e8(int data_ptr,int bitmask)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 8; index = index + 1) {\n    process_parameter_08005848(*(undefined *)(data_ptr + index + 0xb),bitmask >> (index & 0xff) & 1);\n  }\n  process_parameter_080012a2(data_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "process_parameters_080012e8",
                "param_1": "data_ptr",
                "param_2": "bitmask",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "process_parameters_08001310",
            "code": "\nvoid processParameters_08001310(int param1,uint param2,undefined4 param3,undefined4 param4)\n\n{\n  processParameter(*(undefined *)(param1 + 8),param3,param3,param4,param4);\n  if (*(char *)(param1 + 9) != -1) {\n    processParameter(*(char *)(param1 + 9),0);\n  }\n  if ((*(byte *)(param1 + 0x13) & 0x10) == 0) {\n    processParameters_08001310C0(param1,param2 >> 4);\n    processParameters_08001310C0(param1,param2);\n    return;\n  }\n  processParameters_08001310E8(param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "process_parameters_08001310",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_parameter_08005848": "processParameter",
                "process_parameters_080012c0": "processParametersC0",
                "process_parameters_080012e8": "processParametersE8"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "process_and_return_status_0800134e",
            "code": "\nundefined4 process_and_return_status_0800134e(undefined4 input_param,undefined4 output_param,undefined4 constant_param,undefined4 temp_param)\n\n{\n  process_params(input_param,output_param,1,temp_param,temp_param);\n  status 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "process_and_return_status_0800134e",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "constant_param",
                "param_4": "temp_param",
                "process_parameters_08001310": "process_params",
                "return": "status"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "initialize_parameters_0800135a",
            "code": "\nvoid initializeParameters_0800135a(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  process_parameters_08001310(param1,1,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "initialize_parameters_0800135a",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "process_param_08001366",
            "code": "\nvoid process_param_08001366(int ptr,char ch,uint count,undefined4 param)\n\n{\n  char byte_val;\n  \n  if (3 < count) {\n    count = 3;\n  }\n  if ((int)(uint)*(byte *)(ptr + 0x17) <= (int)count) {\n    count = *(byte *)(ptr + 0x17) - 1 & 0xff;\n  }\n  byte_val = *(char *)(count + ptr + 0x18);\n  process_param_08001366eters_08001310(ptr,ch + byte_val | 0x80,0,byte_val,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "process_param_08001366",
                "param_1": "ptr",
                "param_2": "ch",
                "param_3": "count",
                "param_4": "param",
                "cVar1": "byte_val"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "update_parameter_and_process_0800138e",
            "code": "\nvoid updateParameterAndProcess_0800138e(int param_ptr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteValue;\n  \n  byteValue = *(byte *)(param_ptr + 0x14);\n  *(byte *)(param_ptr + 0x14) = byteValue | 4;\n  process_parameters_08001310(param_ptr,byteValue | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "update_parameter_and_process_0800138e",
                "param_1": "param_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "process_params_and_initialize_080013a4",
            "code": "\nvoid processParamsAndInitialize_080013a4(int ptrParam1,int ptrParam2,int param3,int param4)\n\n{\n  int iterationCount;\n  int counter;\n  \n  if (1 < param3) {\n    *(byte *)(ptrParam1 + 0x13) = *(byte *)(ptrParam1 + 0x13) | 8;\n  }\n  *(char *)(ptrParam1 + 0x17) = (char)param3;\n  store_params_08001294(ptrParam1,0,0x40,ptrParam2,ptrParam2 + 0x40);\n  if ((param4 != 0) && (param3 == 1)) {\n    *(byte *)(ptrParam1 + 0x13) = *(byte *)(ptrParam1 + 0x13) | 4;\n  }\n  initialize_memory_access_080057b4(*(undefined *)(ptrParam1 + 8),1);\n  if (*(char *)(ptrParam1 + 9) != -1) {\n    initialize_memory_access_080057b4(*(char *)(ptrParam1 + 9),1);\n  }\n  initialize_memory_access_080057b4(*(undefined *)(ptrParam1 + 10),1);\n  counter = 0;\n  while( true ) {\n    if ((*(byte *)(ptrParam1 + 0x13) & 0x10) == 0) {\n      iterationCount = 4;\n    }\n    else {\n      iterationCount = 8;\n    }\n    if (iterationCount <= counter) break;\n    initialize_memory_access_080057b4(*(undefined *)(ptrParam1 + counter + 0xb),1);\n    counter = counter + 1;\n  }\n  process_parameter_08005848(*(undefined *)(ptrParam1 + 8),0);\n  process_parameter_08005848(*(undefined *)(ptrParam1 + 10),0);\n  if (*(char *)(ptrParam1 + 9) != -1) {\n    process_parameter_08005848(*(char *)(ptrParam1 + 9),0);\n  }\n  if ((*(byte *)(ptrParam1 + 0x13) & 0x10) == 0) {\n    process_parameters_080012c0(ptrParam1,3);\n    process_parameters_080012c0(ptrParam1,3);\n    process_parameters_080012c0(ptrParam1,3);\n    process_parameters_080012c0(ptrParam1,2);\n  }\n  else {\n    process_parameters_08001310(ptrParam1,*(byte *)(ptrParam1 + 0x13) | 0x20,0);\n    process_parameters_08001310(ptrParam1,*(byte *)(ptrParam1 + 0x13) | 0x20,0);\n    process_parameters_08001310(ptrParam1,*(byte *)(ptrParam1 + 0x13) | 0x20,0);\n  }\n  process_parameters_08001310(ptrParam1,*(byte *)(ptrParam1 + 0x13) | 0x20,0);\n  *(undefined *)(ptrParam1 + 0x14) = 4;\n  update_parameter_and_process_0800138e(ptrParam1);\n  initialize_parameters_0800135a(ptrParam1);\n  *(undefined *)(ptrParam1 + 0x15) = 2;\n  process_parameters_08001310(ptrParam1,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "process_params_and_initialize_080013a4",
                "param_1": "ptrParam1",
                "param_2": "ptrParam2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "iterationCount",
                "iVar2": "counter"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "initialize_params_080014ba",
            "code": "\nvoid initializeParams_080014ba(int paramAddress,int flag,undefined value1,undefined4 value2,undefined value3,\n                 undefined value4,undefined value5,undefined value6,undefined value7,\n                 undefined value8,undefined value9,undefined value10,undefined value11)\n\n{\n  *(undefined *)(paramAddress + 8) = value1;\n  *(char *)(paramAddress + 9) = (char)value2;\n  *(undefined *)(paramAddress + 10) = value3;\n  *(undefined *)(paramAddress + 0xb) = value4;\n  *(undefined *)(paramAddress + 0xc) = value5;\n  *(undefined *)(paramAddress + 0xd) = value6;\n  *(undefined *)(paramAddress + 0xe) = value7;\n  *(undefined *)(paramAddress + 0xf) = value8;\n  *(undefined *)(paramAddress + 0x10) = value9;\n  *(undefined *)(paramAddress + 0x11) = value10;\n  *(undefined *)(paramAddress + 0x12) = value11;\n  if (flag == 0) {\n    *(undefined *)(paramAddress + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(paramAddress + 0x13) = 0;\n  }\n  process_params_and_initialize_080013a4(paramAddress,0x10,1,0,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "initialize_params_080014ba",
                "param_1": "paramAddress",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "value7",
                "param_10": "value8",
                "param_11": "value9",
                "param_12": "value10",
                "param_13": "value11"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_and_return_status_08001510",
            "code": "\nundefined4 *\ninitializeAndReturnStatus_08001510(undefined4 *status,undefined4 value1,undefined4 value2,undefined4 value3,\n            undefined value4,undefined value5,undefined value6)\n\n{\n  status[1] = 0;\n  *status = &PTR_process_and_return_status_0800134e_1_080073f8;\n  initialize_params_080014ba(status,1,value1,0xff,value2,value3,value4,value5,value6,0,0,0,0);\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_and_return_status_08001510",
                "param_1": "status",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "param_7": "value6"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "process_and_invoke_08001550",
            "code": "\nvoid process_and_invoke_08001550(undefined4 *function_ptr,uint param_flags,int param_addr)\n\n{\n  int loop_counter;\n  \n  process_parameters_08001310(function_ptr,(param_flags & 7) << 3 | 0x40,0);\n  for (loop_counter = 0; loop_counter < 8; loop_counter = loop_counter + 1) {\n    (**(code **)*function_ptr)(function_ptr,*(undefined *)(param_addr + loop_counter));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "process_and_invoke_08001550",
                "param_1": "function_ptr",
                "param_2": "param_flags",
                "param_3": "param_addr",
                "iVar1": "loop_counter"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_and_process_parameters_0800157c",
            "code": "\nundefined * initializeAndProcessParameters_0800157c(undefined *buffer,undefined4 value1,undefined value2,undefined value3)\n\n{\n  *buffer = (char)value1;\n  buffer[1] = value2;\n  buffer[2] = value3;\n  initializeMemoryAccess(value1,0);\n  initializeMemoryAccess(buffer[1],1);\n  initializeMemoryAccess(buffer[2],1);\n  processParameter(buffer[1],1);\n  processParameter(buffer[2],0);\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_and_process_parameters_0800157c",
                "param_1": "buffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "initialize_memory_access_080057b4": "initializeMemoryAccess",
                "process_parameter_08005848": "processParameter"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "decode_bits_080015b2",
            "code": "\nuint decode_bits_080015b2(undefined *input_data)\n\n{\n  int bit_result;\n  uint bit_position;\n  uint decoded_value;\n  \n  process_parameter_08005848(input_data[1],0);\n  decoded_value = 0;\n  for (bit_position = 0x1f; -1 < (int)bit_position; bit_position = bit_position - 1) {\n    process_parameter_08005848(input_data[2],1);\n    bit_result = check_bit_and_return_result_08005890(*input_data);\n    if (bit_result != 0) {\n      decoded_value = decoded_value | 1 << (bit_position & 0xff);\n    }\n    process_parameter_08005848(input_data[2],0);\n  }\n  process_parameter_08005848(input_data[1],1);\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "decode_bits_080015b2",
                "param_1": "input_data",
                "iVar1": "bit_result",
                "uVar2": "bit_position",
                "uVar3": "decoded_value"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "decode_and_convert_float_080015f8",
            "code": "\nundefined8 decode_and_convert_float_080015f8(undefined4 arg1,int arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  uint decoded_value;\n  undefined8 converted_value;\n  \n  decoded_value = decode_bits_080015b2();\n  if ((decoded_value & 0x10000) == 0) {\n    decoded_value = decoded_value >> 0x12;\n    converted_value = bit_shift_and_concat_0800040c(decoded_value & 0x1fff);\n    if ((decoded_value & 0x2000) != 0) {\n      converted_value = bit_shift_and_concat_0800040c(~decoded_value & 0x1fff);\n      converted_value = calculate_multipliers_08000194((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0,0x3ff00000,arg4);\n      converted_value = CONCAT44((int)((ulonglong)converted_value >> 0x20) + -0x80000000,(int)converted_value);\n    }\n    converted_value = calculate_sign_and_exponent_080004f8((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0,0x3fd00000);\n    if (arg2 == 1) {\n      converted_value = calculate_sign_and_exponent_080004f8((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0,0x40220000);\n      converted_value = calculate_floating_point_0800074c((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0,0x40140000);\n      converted_value = calculate_multipliers_08000194((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0,0x40400000);\n      return converted_value;\n    }\n  }\n  else {\n    decoded_value = decoded_value & 7;\n    if (decoded_value == 2) {\n      return 0x40c3888000000000;\n    }\n    if (decoded_value == 4) {\n      return 0x40c3890000000000;\n    }\n    if (decoded_value != 1) {\n      return 0;\n    }\n    converted_value = 0x40c3880000000000;\n  }\n  return converted_value;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "decode_and_convert_float_080015f8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "decoded_value",
                "uVar2": "converted_value"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "process_data_080016b4",
            "code": "\nchar processData_080016b4(int inputData)\n\n{\n  char result;\n  int dataLength;\n  int isDataValid;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  char result1;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  undefined8 finalResult;\n  undefined8 temp14;\n  undefined4 temp15;\n  undefined4 temp16;\n  \n  result1 = *(char *)(inputData + 0x70);\n  if (result1 != '\\0') {\n    dataLength = initialize_data_080058e0();\n    if ((uint)(dataLength - *(int *)(inputData + 0x44)) < *(uint *)(inputData + 0x58)) {\n      result1 = '\\0';\n    }\n    else {\n      temp2 = **(undefined4 **)(inputData + 0x38);\n      temp5 = (*(undefined4 **)(inputData + 0x38))[1];\n      temp12 = calculate_value_08000190(**(undefined4 **)(inputData + 0x40),(*(undefined4 **)(inputData + 0x40))[1])\n      ;\n      temp11 = (undefined4)((ulonglong)temp12 >> 0x20);\n      temp13 = calculate_value_08000190(temp2,temp5,*(undefined4 *)(inputData + 0x50),\n                            *(undefined4 *)(inputData + 0x54));\n      temp1 = (undefined4)((ulonglong)temp13 >> 0x20);\n      finalResult = calculate_sign_and_exponent_080004f8((int)temp12,temp11,*(undefined4 *)(inputData + 0x20),\n                            *(undefined4 *)(inputData + 0x24));\n      finalResult = calculate_multipliers_08000194((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                            *(undefined4 *)(inputData + 0x48),*(undefined4 *)(inputData + 0x4c));\n      *(undefined8 *)(inputData + 0x48) = finalResult;\n      result = *(char *)(inputData + 0x71);\n      if (result == '\\0') {\n        temp14 = calculate_sign_and_exponent_080004f8((int)temp13,temp1,*(undefined4 *)(inputData + 0x18),\n                              *(undefined4 *)(inputData + 0x1c));\n        finalResult = calculate_value_08000190((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)temp14,\n                              (int)((ulonglong)temp14 >> 0x20));\n        *(undefined8 *)(inputData + 0x48) = finalResult;\n      }\n      temp3 = *(undefined4 *)(inputData + 0x48);\n      temp6 = *(undefined4 *)(inputData + 0x4c);\n      temp9 = *(undefined4 *)(undefined8 *)(inputData + 0x68);\n      temp10 = *(undefined4 *)(inputData + 0x6c);\n      finalResult = *(undefined8 *)(inputData + 0x68);\n      isDataValid = check_if_parameter_contains_null_byte_08000a18(temp3,temp6,temp9,temp10);\n      if (isDataValid == 0) {\n        temp4 = *(undefined4 *)(inputData + 0x60);\n        temp7 = *(undefined4 *)(inputData + 100);\n        isDataValid = is_null_terminator_080009dc(temp3,temp6);\n        if (isDataValid != 0) {\n          *(undefined4 *)(inputData + 0x48) = temp4;\n          *(undefined4 *)(inputData + 0x4c) = temp7;\n        }\n      }\n      else {\n        *(undefined4 *)(inputData + 0x48) = temp9;\n        *(undefined4 *)(inputData + 0x4c) = temp10;\n      }\n      if (result == '\\0') {\n        temp12 = 0;\n      }\n      else {\n        temp12 = calculate_sign_and_exponent_080004f8((int)temp12,temp11,*(undefined4 *)(inputData + 0x18),\n                              *(undefined4 *)(inputData + 0x1c));\n      }\n      temp16 = (undefined4)((ulonglong)temp12 >> 0x20);\n      temp15 = (undefined4)temp12;\n      temp11 = *(undefined4 *)(inputData + 0x48);\n      temp3 = *(undefined4 *)(inputData + 0x4c);\n      temp12 = calculate_sign_and_exponent_080004f8((int)temp13,temp1,*(undefined4 *)(inputData + 0x28),\n                            *(undefined4 *)(inputData + 0x2c));\n      temp12 = calculate_value_08000190(temp11,temp3,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n      temp12 = calculate_multipliers_08000194(temp15,temp16,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n      temp11 = (undefined4)((ulonglong)temp12 >> 0x20);\n      isDataValid = is_null_terminator_080009dc(temp9,temp10,(int)temp12,temp11);\n      if (isDataValid == 0) {\n        finalResult = *(undefined8 *)(inputData + 0x60);\n        isDataValid = is_null_terminator_080009dc((int)temp12,temp11,*(undefined4 *)(undefined8 *)(inputData + 0x60),\n                             *(undefined4 *)(inputData + 100));\n        if (isDataValid == 0) {\n          finalResult = temp12;\n        }\n      }\n      **(undefined8 **)(inputData + 0x3c) = finalResult;\n      *(undefined4 *)(inputData + 0x50) = temp2;\n      *(undefined4 *)(inputData + 0x54) = temp5;\n      *(int *)(inputData + 0x44) = dataLength;\n    }\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "process_data_080016b4",
                "param_1": "inputData",
                "cVar1": "result",
                "iVar2": "dataLength",
                "iVar3": "isDataValid",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar12": "temp9",
                "uVar13": "temp10",
                "uVar14": "temp11",
                "uVar15": "temp12",
                "uVar16": "temp13",
                "uVar17": "finalResult",
                "uVar18": "temp14",
                "local_38": "temp15",
                "uStack_34": "temp16"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "process_data_08001814",
            "code": "\nvoid processData_08001814(undefined4 *resultArray,undefined4 unusedParam,undefined4 input1,undefined4 input2,\n                 undefined4 input3,undefined4 input4,undefined4 input5,undefined4 input6,\n                 int flag)\n\n{\n  int isNullTerminator;\n  undefined4 shiftedValue;\n  undefined tempFlag;\n  bool isFlagOne;\n  undefined8 fpuValue1;\n  undefined8 fpuValue2;\n  undefined8 computedValue;\n  \n  isNullTerminator = isNullTerminatorCheck(input1,input2,0,0);\n  if (((isNullTerminator == 0) && (isNullTerminator = isNullTerminatorCheck(input3,input4,0,0), isNullTerminator == 0)) &&\n     (isNullTerminator = isNullTerminatorCheck(input5,input6,0,0), isNullTerminator == 0)) {\n    resultArray[0xd] = flag;\n    isFlagOne = flag != 1;\n    if (isFlagOne) {\n      flag = 0;\n    }\n    tempFlag = (undefined)flag;\n    if (!isFlagOne) {\n      tempFlag = 1;\n    }\n    *(undefined *)((int)resultArray + 0x71) = tempFlag;\n    *resultArray = input1;\n    resultArray[1] = input2;\n    resultArray[2] = input3;\n    resultArray[3] = input4;\n    resultArray[4] = input5;\n    resultArray[5] = input6;\n    fpuValue1 = bitShiftAndConcat(resultArray[0x16]);\n    fpuValue1 = calculateFloatingPoint((int)fpuValue1,(int)((ulonglong)fpuValue1 >> 0x20),0,0x408f4000);\n    shiftedValue = (undefined4)((ulonglong)fpuValue1 >> 0x20);\n    resultArray[6] = input1;\n    resultArray[7] = input2;\n    fpuValue2 = calculateSignAndExponent(input3,input4,(int)fpuValue1,shiftedValue);\n    *(undefined8 *)(resultArray + 8) = fpuValue2;\n    fpuValue1 = calculateFloatingPoint(input5,input6,(int)fpuValue1,shiftedValue);\n    *(undefined8 *)(resultArray + 10) = fpuValue1;\n    if (resultArray[0xc] == 1) {\n      computedValue = calculateValue(0,0,input1,input2);\n      *(undefined8 *)(resultArray + 6) = computedValue;\n      fpuValue2 = calculateValue(0,0,(int)fpuValue2,(int)((ulonglong)fpuValue2 >> 0x20));\n      *(undefined8 *)(resultArray + 8) = fpuValue2;\n      fpuValue1 = calculateValue(0,0,(int)fpuValue1,(int)((ulonglong)fpuValue1 >> 0x20));\n      *(undefined8 *)(resultArray + 10) = fpuValue1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "process_data_08001814",
                "param_1": "resultArray",
                "param_2": "unusedParam",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "input3",
                "param_6": "input4",
                "param_7": "input5",
                "param_8": "input6",
                "param_9": "flag",
                "iVar1": "isNullTerminator",
                "uVar2": "shiftedValue",
                "uVar3": "tempFlag",
                "bVar4": "isFlagOne",
                "uVar5": "fpuValue1",
                "uVar6": "fpuValue2",
                "uVar7": "computedValue",
                "is_null_terminator_080009dc": "isNullTerminatorCheck",
                "bit_shift_and_concat_0800040c": "bitShiftAndConcat",
                "calculate_floating_point_0800074c": "calculateFloatingPoint",
                "calculate_sign_and_exponent_080004f8": "calculateSignAndExponent",
                "calculate_value_08000190": "calculateValue"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_data_processing_080018f8",
            "code": "\nvoid initialize_data_processing_080018f8(void)\n\n{\n  process_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_data_processing_080018f8",
                "process_data_08001814": "process_data"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "update_floating_point_values_08001918",
            "code": "\nvoid updateFloatingPointValues_08001918(int ptr1,int ptr2,undefined4 var3,undefined4 var4)\n\n{\n  undefined4 result1;\n  undefined8 shiftedValue;\n  undefined8 bitShiftedValue;\n  \n  if (0 < ptr2) {\n    shiftedValue = bitwise_shift_and_concat_0800042c(ptr2);\n    bitShiftedValue = bit_shift_and_concat_0800040c(*(undefined4 *)(ptr1 + 0x58));\n    shiftedValue = calculate_floating_point_0800074c((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)bitShiftedValue,\n                         (int)((ulonglong)bitShiftedValue >> 0x20),var4);\n    result1 = (undefined4)((ulonglong)shiftedValue >> 0x20);\n    bitShiftedValue = calculate_sign_and_exponent_080004f8((int)shiftedValue,result1,*(undefined4 *)(ptr1 + 0x20),\n                         *(undefined4 *)(ptr1 + 0x24));\n    *(undefined8 *)(ptr1 + 0x20) = bitShiftedValue;\n    shiftedValue = calculate_floating_point_0800074c(*(undefined4 *)(ptr1 + 0x28),*(undefined4 *)(ptr1 + 0x2c),(int)shiftedValue,\n                         result1);\n    *(undefined8 *)(ptr1 + 0x28) = shiftedValue;\n    *(int *)(ptr1 + 0x58) = ptr2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "update_floating_point_values_08001918",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "var3",
                "param_4": "var4",
                "uVar1": "result1",
                "uVar2": "shiftedValue",
                "uVar3": "bitShiftedValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_parameters_08001960",
            "code": "\nvoid updateParameters_08001960(int functionAddress,undefined4 param2,undefined4 newParam1,undefined4 newParam2,\n                 undefined4 newParam3,undefined4 newParam4)\n\n{\n  int isValid;\n  undefined4 *paramAddress;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  isValid = check_parameters_validity_08000a04(newParam1,newParam2,newParam3,newParam4,newParam2);\n  if (isValid == 0) {\n    *(undefined4 *)(functionAddress + 0x60) = newParam1;\n    *(undefined4 *)(functionAddress + 100) = newParam2;\n    *(undefined4 *)(functionAddress + 0x68) = newParam3;\n    *(undefined4 *)(functionAddress + 0x6c) = newParam4;\n    if (*(char *)(functionAddress + 0x70) != '\\0') {\n      paramAddress = *(undefined4 **)(functionAddress + 0x3c);\n      value1 = *paramAddress;\n      value3 = paramAddress[1];\n      isValid = is_null_terminator_080009dc(newParam3,newParam4,value1,value3);\n      if (isValid == 0) {\n        isValid = check_if_parameter_contains_null_byte_08000a18(newParam1,newParam2,value1,value3);\n        if (isValid != 0) {\n          *paramAddress = newParam1;\n          paramAddress[1] = newParam2;\n        }\n      }\n      else {\n        *paramAddress = newParam3;\n        paramAddress[1] = newParam4;\n      }\n      value1 = *(undefined4 *)(functionAddress + 0x48);\n      value3 = *(undefined4 *)(functionAddress + 0x4c);\n      value2 = *(undefined4 *)(functionAddress + 0x68);\n      value4 = *(undefined4 *)(functionAddress + 0x6c);\n      isValid = check_if_parameter_contains_null_byte_08000a18(value1,value3,value2,value4);\n      if (isValid != 0) {\n        *(undefined4 *)(functionAddress + 0x48) = value2;\n        *(undefined4 *)(functionAddress + 0x4c) = value4;\n        return;\n      }\n      value2 = *(undefined4 *)(functionAddress + 0x60);\n      value4 = *(undefined4 *)(functionAddress + 100);\n      isValid = is_null_terminator_080009dc(value1,value3,value2,value4);\n      if (isValid != 0) {\n        *(undefined4 *)(functionAddress + 0x48) = value2;\n        *(undefined4 *)(functionAddress + 0x4c) = value4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_parameters_08001960",
                "param_1": "functionAddress",
                "param_2": "param2",
                "param_3": "newParam1",
                "param_4": "newParam2",
                "param_5": "newParam3",
                "param_6": "newParam4",
                "iVar1": "isValid",
                "puVar2": "paramAddress",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "value4"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "update_parameters_080019f6",
            "code": "\nvoid updateParameters_080019f6(int param)\n\n{\n  int result;\n  undefined4 value1;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 ptr3;\n  \n  ptr1 = **(undefined4 **)(param + 0x3c);\n  ptr2 = (*(undefined4 **)(param + 0x3c))[1];\n  *(undefined4 *)(param + 0x48) = ptr1;\n  *(undefined4 *)(param + 0x4c) = ptr2;\n  value1 = (*(undefined4 **)(param + 0x38))[1];\n  *(undefined4 *)(param + 0x50) = **(undefined4 **)(param + 0x38);\n  *(undefined4 *)(param + 0x54) = value1;\n  value1 = *(undefined4 *)(param + 0x68);\n  ptr3 = *(undefined4 *)(param + 0x6c);\n  result = check_if_parameter_contains_null_byte_08000a18(ptr1,ptr2,value1,ptr3);\n  if (result == 0) {\n    value1 = *(undefined4 *)(param + 0x60);\n    ptr3 = *(undefined4 *)(param + 100);\n    result = is_null_terminator_080009dc(ptr1,ptr2,value1,ptr3);\n    if (result != 0) {\n      *(undefined4 *)(param + 0x48) = value1;\n      *(undefined4 *)(param + 0x4c) = ptr3;\n    }\n    return;\n  }\n  *(undefined4 *)(param + 0x48) = value1;\n  *(undefined4 *)(param + 0x4c) = ptr3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "update_parameters_080019f6",
                "param_1": "param",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "ptr1",
                "uVar4": "ptr2",
                "uVar5": "ptr3"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_parameter_status_08001a44",
            "code": "\nvoid updateParameterStatus_08001a44(int dataAddress,int status)\n\n{\n  undefined newStatus;\n  \n  if (status == 1) {\n    newStatus = 1;\n    if (*(char *)(dataAddress + 0x70) == '\\0') {\n      updateParameters();\n    }\n  }\n  else {\n    newStatus = 0;\n  }\n  *(undefined *)(dataAddress + 0x70) = newStatus;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_parameter_status_08001a44",
                "param_1": "dataAddress",
                "param_2": "status",
                "uVar1": "newStatus",
                "update_parameters_080019f6": "updateParameters"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_values_08001a66",
            "code": "\nvoid updateValues_08001a66(int data,int value,undefined4 param3,undefined4 param4)\n\n{\n  undefined8 newValue;\n  \n  if ((*(char *)(data + 0x70) != '\\0') && (*(int *)(data + 0x30) != value)) {\n    newValue = calculate_value_08000190(0,0,*(undefined4 *)(data + 0x18),*(undefined4 *)(data + 0x1c),param4\n                        );\n    *(undefined8 *)(data + 0x18) = newValue;\n    newValue = calculate_value_08000190(0,0,*(undefined4 *)(data + 0x20),*(undefined4 *)(data + 0x24));\n    *(undefined8 *)(data + 0x20) = newValue;\n    newValue = calculate_value_08000190(0,0,*(undefined4 *)(data + 0x28),*(undefined4 *)(data + 0x2c));\n    *(undefined8 *)(data + 0x28) = newValue;\n  }\n  *(int *)(data + 0x30) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_values_08001a66",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_and_process_data_08001ab0",
            "code": "\nint initialize_and_process_data_08001ab0(int data_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                undefined4 param_9,undefined4 data_ptr0,undefined4 data_ptr1,undefined4 data_ptr2)\n\n{\n  int data_init_value;\n  undefined4 extra_return_val;\n  \n  *(undefined4 *)(data_ptr + 0x3c) = param_3;\n  *(undefined4 *)(data_ptr + 0x38) = param_2;\n  *(undefined4 *)(data_ptr + 0x40) = param_4;\n  *(undefined *)(data_ptr + 0x70) = 0;\n  update_parameters_08001960(data_ptr,param_2,0,0,0,0x406fe000);\n  *(undefined4 *)(data_ptr + 0x58) = 100;\n  update_values_08001a66(data_ptr,data_ptr2);\n  process_data_08001814(data_ptr,extra_return_val,param_5,param_6,param_7,param_8,param_9,data_ptr0,data_ptr1);\n  data_init_value = initialize_data_080058e0();\n  *(int *)(data_ptr + 0x44) = data_init_value - *(int *)(data_ptr + 0x58);\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_and_process_data_08001ab0",
                "param_1": "data_ptr",
                "iVar1": "data_init_value",
                "extraout_r1": "extra_return_val"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_param_08001b18",
            "code": "\nundefined4 initialize_and_return_param_08001b18(undefined4 input_param)\n\n{\n  initialize_data_processing();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_param_08001b18",
                "param_1": "input_param",
                "initialize_and_process_data_08001ab0": "initialize_data_processing"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_system_08001b48",
            "code": "\nvoid initializeSystem_08001b48(void)\n\n{\n  int result;\n  uint globalValue;\n  undefined4 flagsArray [2];\n  undefined4 var1;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 inputValues [4];\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  \n  inputValues[0] = 2;\n  flag1 = 1;\n  flag2 = 0x10;\n  flag3 = 2;\n  flag4 = 0;\n  flag5 = 0x380000;\n  result = check_and_control_settings_08003688(inputValues);\n  if (result != 0) {\n    infinite_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  param1 = 0xf;\n  param2 = 2;\n  param3 = 0;\n  param4 = 0x400;\n  param5 = 0;\n  result = initialize_system_08003ad4(&param1);\n  if (result != 0) {\n    infinite_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  flagsArray[0] = 2;\n  var1 = 0x8000;\n  result = initialize_flags_08003c90(flagsArray);\n  if (result != 0) {\n    infinite_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  globalValue = get_global_value_08003c44();\n  set_param_values_08002514(globalValue / 1000);\n  set_register_bit_08002560(4);\n  convert_and_store_bits_08002494(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_system_08001b48",
                "local_30": "inputValues",
                "local_20": "flag1",
                "local_1c": "flag2",
                "local_14": "flag3",
                "local_10": "flag4",
                "local_c": "flag5",
                "iVar1": "result",
                "local_44": "param1",
                "local_40": "param2",
                "local_3c": "param3",
                "local_38": "param4",
                "local_34": "param5",
                "local_54": "flagsArray",
                "local_4c": "var1",
                "uVar2": "globalValue"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08001be8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_peripheral_registers_08004d44();\n  execute_callbacks_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  continuous_data_processing_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_device_and_system_08001c32",
            "code": "\nvoid initialize_device_and_system_08001c32(void)\n\n{\n  initialize_device_and_system_08001c32_08004c52();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_device_and_system_08001c32"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "set_and_update_param_values_08001c3c",
            "code": "\nundefined4 setAndUpdateParamValues_08001c3c(uint inputValue)\n\n{\n  int result;\n  \n  result = set_param_values_08002514(DAT_20000084 / (1000 / DAT_20000078));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  convert_and_store_bits_08002494(0xffffffff,inputValue,0);\n  DAT_2000007c = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "set_and_update_param_values_08001c3c",
                "param_1": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_device_08001c88",
            "code": "\n\n\nundefined4 initialize_device_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_data_register(3);\n  set_and_update_parameters(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_device_08001c88",
                "update_data_register_08002470": "update_data_register",
                "set_and_update_param_values_08001c3c": "set_and_update_parameters"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "add_binary_numbers_08001cac",
            "code": "\nvoid addBinaryNumbers_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "add_binary_numbers_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_08001cc4",
            "code": "\nundefined4 get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4"
            },
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "validate_data_08001cd0",
            "code": "\nundefined4 validateData_08001cd0(uint **dataPointer,uint timeout)\n\n{\n  int initialValue;\n  uint calculatedValue;\n  int iterator;\n  undefined4 result;\n  uint *dataPtr;\n  uint multiplier;\n  uint counter;\n  \n  counter = 0;\n  initialValue = get_data_08001cc4();\n  multiplier = DAT_20000084;\n  dataPtr = *dataPointer;\n  if ((dataPtr[2] & 0x100) == 0) {\n    if (((dataPtr[1] & 0x100) == 0) && ((dataPtr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**dataPointer & 2) != 0) goto LAB_08001de2;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (iterator = get_data_08001cc4(), (uint)(iterator - initialValue) <= timeout))));\n      dataPointer[10] = (uint *)((uint)dataPointer[10] | 4);\n      *(undefined *)(dataPointer + 9) = 0;\n      result = 3;\n    }\n    else {\n      calculatedValue = calculate_value_08003da4(2);\n      dataPtr = *dataPointer;\n      if (((dataPtr[4] & 0x24924924) == 0) && ((dataPtr[3] & 0x924924) == 0)) {\n        if ((dataPtr[4] & 0x12492492) == 0) {\n          if ((dataPtr[3] & 0x492492) == 0) {\n            iterator = 0x14;\n          }\n          else {\n            iterator = 0x29;\n          }\n        }\n        else {\n          iterator = 0x29;\n        }\n      }\n      else if (((dataPtr[4] & 0x12492492) == 0) && ((dataPtr[3] & 0x492492) == 0)) {\n        iterator = 0x54;\n      }\n      else if ((dataPtr[4] & 0x249249) == 0) {\n        if ((dataPtr[3] & 0x249249) == 0) {\n          iterator = 0x54;\n        }\n        else {\n          iterator = 0xfc;\n        }\n      }\n      else {\n        iterator = 0xfc;\n      }\n      multiplier = (multiplier / calculatedValue) * iterator;\n      for (; counter <= multiplier && multiplier - counter != 0; counter = counter + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (iterator = get_data_08001cc4(), timeout < (uint)(iterator - initialValue))))) {\n          dataPointer[10] = (uint *)((uint)dataPointer[10] | 4);\n          *(undefined *)(dataPointer + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **dataPointer = 0xffffffed;\n      dataPointer[10] = (uint *)((uint)dataPointer[10] | 0x200);\n      if (((*dataPointer)[2] & 0xe0000) == 0xe0000) {\n        if (dataPointer[3] == (uint *)0x0) {\n          dataPointer[10] = (uint *)((uint)dataPointer[10] & 0xfffffeff);\n          if (((uint)dataPointer[10] & 0x1000) == 0) {\n            dataPointer[10] = (uint *)((uint)dataPointer[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    dataPointer[10] = (uint *)((uint)dataPointer[10] | 0x20);\n    *(undefined *)(dataPointer + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "validate_data_08001cd0",
                "param_1": "dataPointer",
                "param_2": "timeout",
                "iVar1": "initialValue",
                "uVar2": "calculatedValue",
                "iVar3": "iterator",
                "uVar4": "result",
                "puVar5": "dataPtr",
                "uVar6": "multiplier",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_memory_value_08001e40",
            "code": "\nmemoryValue getMemoryValue_08001e40(int *ptrMemory)\n\n{\n  return *(memoryValue *)(*ptrMemory + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_memory_value_08001e40",
                "param_1": "ptrMemory",
                "undefined4": "memoryValue"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_configuration_08001e48",
            "code": "\nundefined4 updateConfiguration_08001e48(int *configPointer,uint *configData)\n\n{\n  undefined4 returnValue;\n  uint tempValue;\n  int loopCounter;\n  \n  if (*(char *)(configPointer + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(configPointer + 9) = 1;\n    tempValue = configData[1];\n    if (tempValue < 7) {\n      tempValue = tempValue * 5 - 5;\n      *(uint *)(*configPointer + 0x34) =\n           *configData << (tempValue & 0xff) | *(uint *)(*configPointer + 0x34) & ~(0x1f << (tempValue & 0xff));\n    }\n    else if (tempValue < 0xd) {\n      tempValue = tempValue * 5 - 0x23;\n      *(uint *)(*configPointer + 0x30) =\n           *configData << (tempValue & 0xff) | *(uint *)(*configPointer + 0x30) & ~(0x1f << (tempValue & 0xff));\n    }\n    else {\n      tempValue = tempValue * 5 - 0x41;\n      *(uint *)(*configPointer + 0x2c) =\n           *configData << (tempValue & 0xff) | *(uint *)(*configPointer + 0x2c) & ~(0x1f << (tempValue & 0xff));\n    }\n    tempValue = *configData;\n    if (tempValue < 10) {\n      *(uint *)(*configPointer + 0x10) =\n           configData[2] << (tempValue * 3 & 0xff) |\n           *(uint *)(*configPointer + 0x10) & ~(7 << (tempValue * 3 & 0xff));\n    }\n    else {\n      tempValue = tempValue * 3 - 0x1e;\n      *(uint *)(*configPointer + 0xc) =\n           configData[2] << (tempValue & 0xff) | *(uint *)(*configPointer + 0xc) & ~(7 << (tempValue & 0xff));\n    }\n    if (*configData - 0x10 < 2) {\n      if (*configPointer == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*configData == 0x10) {\n            for (loopCounter = (DAT_20000084 / 1000000) * 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        configPointer[10] = configPointer[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(configPointer + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_configuration_08001e48",
                "param_1": "configPointer",
                "param_2": "configData",
                "uVar1": "returnValue",
                "uVar2": "tempValue",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_offset_value_08001f80",
            "code": "\nundefined4 getOffsetValue_08001f80(int offset)\n\n{\n  return *(undefined4 *)(offset + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_offset_value_08001f80",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "initialize_data_08001f84",
            "code": "\nundefined4 initializeData_08001f84(int *data,undefined4 value)\n\n{\n  int result;\n  undefined4 returnValue;\n  int dataPointer;\n  uint loopCounter;\n  \n  dataPointer = *data;\n  if ((*(uint *)(dataPointer + 8) & 1) == 0) {\n    *(uint *)(dataPointer + 8) = *(uint *)(dataPointer + 8) | 1;\n    for (loopCounter = DAT_20000084 / 1000000; loopCounter != 0; loopCounter = loopCounter - 1) {\n    }\n    dataPointer = get_data_08001cc4(data,value,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      result = get_data_08001cc4();\n    } while ((uint)(result - dataPointer) < 3);\n    data[10] = data[10] | 0x10;\n    data[0xb] = data[0xb] | 1;\n    *(undefined *)(data + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "initialize_data_08001f84",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "result",
                "iVar3": "dataPointer",
                "uVar2": "returnValue",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "initialize_and_configure_08002004",
            "code": "\n\n\nint initialize_and_configure_08002004(int *data_array)\n\n{\n  int result;\n  undefined4 *pointer;\n  int value;\n  \n  if (*(char *)(data_array + 9) != '\\x01') {\n    *(undefined *)(data_array + 9) = 1;\n    result = initialize_data();\n    if (result == 0) {\n      data_array[10] = data_array[10] & 0xfffffcfeU | 0x100;\n      pointer = (undefined4 *)*data_array;\n      if ((pointer == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data_array[10] = data_array[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data_array[10] = data_array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data_array[10] = data_array[10] & 0xffefffff;\n        if ((pointer[1] & 0x400) != 0) {\n          data_array[10] = data_array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data_array[10] & 0x1000U) == 0) {\n        data_array[0xb] = 0;\n      }\n      else {\n        data_array[0xb] = data_array[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data_array + 9) = 0;\n      *pointer = 0xfffffffd;\n      value = *data_array;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data_array + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "initialize_and_configure_08002004",
                "param_1": "data_array",
                "iVar1": "result",
                "puVar2": "pointer",
                "iVar3": "value",
                "initialize_data_08001f84": "initialize_data"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_flags_080020f0",
            "code": "\nundefined4 updateFlags_080020f0(int *data)\n\n{\n  int previousData;\n  int currentData;\n  \n  currentData = *data;\n  if ((*(uint *)(currentData + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(currentData + 8) = *(uint *)(currentData + 8) & 0xfffffffe;\n  currentData = get_data_08001cc4();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    previousData = get_data_08001cc4();\n  } while ((uint)(previousData - currentData) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_flags_080020f0",
                "param_1": "data",
                "iVar1": "previousData",
                "iVar2": "currentData"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "update_memory_permissions_0800213c",
            "code": "\nundefined4 update_memory_permissions_0800213c(int *memory_permissions)\n\n{\n  int update_flags_result;\n  uint flags_combined;\n  uint multiplier;\n  \n  if (memory_permissions == (int *)0x0) {\n    return 1;\n  }\n  if (memory_permissions[10] == 0) {\n    memory_permissions[0xb] = 0;\n    *(undefined *)(memory_permissions + 9) = 0;\n    update_permissions();\n  }\n  update_flags_result = update_flags(memory_permissions);\n  if (((memory_permissions[10] & 0x10U) == 0) && (update_flags_result == 0)) {\n    memory_permissions[10] = memory_permissions[10] & 0xffffeefdU | 2;\n    flags_combined = memory_permissions[1] | memory_permissions[7] | memory_permissions[3] << 1;\n    if (memory_permissions[2] == 0x100) {\n      multiplier = 0x100;\n    }\n    else {\n      multiplier = 0;\n      if (memory_permissions[2] == 1) {\n        multiplier = 0x100;\n      }\n    }\n    if (memory_permissions[5] == 1) {\n      if (memory_permissions[3] == 0) {\n        multiplier = multiplier | (memory_permissions[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        memory_permissions[10] = memory_permissions[10] | 0x20;\n        memory_permissions[0xb] = memory_permissions[0xb] | 1;\n      }\n    }\n    *(uint *)(*memory_permissions + 4) = multiplier | *(uint *)(*memory_permissions + 4) & 0xffff16ff;\n    *(uint *)(*memory_permissions + 8) = *(uint *)(*memory_permissions + 8) & 0xffe1f7fd | flags_combined;\n    if ((memory_permissions[2] == 0x100) || (memory_permissions[2] == 1)) {\n      multiplier = (memory_permissions[4] + -1) * 0x100000;\n    }\n    else {\n      multiplier = 0;\n    }\n    *(uint *)(*memory_permissions + 0x2c) = multiplier | *(uint *)(*memory_permissions + 0x2c) & 0xff0fffff;\n    if (flags_combined != (*(uint *)(*memory_permissions + 8) & 0xff1f0efe)) {\n      memory_permissions[10] = memory_permissions[10] & 0xffffffedU | 0x10;\n      memory_permissions[0xb] = memory_permissions[0xb] | 1;\n      return 1;\n    }\n    memory_permissions[0xb] = 0;\n    memory_permissions[10] = memory_permissions[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  memory_permissions[10] = memory_permissions[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "update_memory_permissions_0800213c",
                "param_1": "memory_permissions",
                "iVar1": "update_flags_result",
                "uVar2": "flags_combined",
                "uVar3": "multiplier",
                "update_memory_access_permissions_08004974": "update_permissions",
                "update_flags_080020f0": "update_flags"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "update_memory_protection_0800224c",
            "code": "\nint updateMemoryProtection_0800224c(int *param)\n\n{\n  int result;\n  \n  if (param == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    param[10] = param[10] | 2;\n    result = update_flags_080020f0();\n    if (result == 0) {\n      *(undefined4 *)*param = 0xffffffe0;\n      *(uint *)(*param + 4) = *(uint *)(*param + 4) & 0xff3f0000;\n      *(uint *)(*param + 8) = *(uint *)(*param + 8) & 0xff0106f0;\n      *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xff000000;\n      *(uint *)(*param + 0x10) = *(uint *)(*param + 0x10) & 0xc0000000;\n      *(uint *)(*param + 0x14) = *(uint *)(*param + 0x14) & 0xfffff000;\n      *(uint *)(*param + 0x18) = *(uint *)(*param + 0x18) & 0xfffff000;\n      *(uint *)(*param + 0x1c) = *(uint *)(*param + 0x1c) & 0xfffff000;\n      *(uint *)(*param + 0x20) = *(uint *)(*param + 0x20) & 0xfffff000;\n      *(uint *)(*param + 0x24) = *(uint *)(*param + 0x24) & 0xfffff000;\n      *(uint *)(*param + 0x28) = *(uint *)(*param + 0x28) & 0xfffff000;\n      *(uint *)(*param + 0x2c) = *(uint *)(*param + 0x2c) & 0xff000000;\n      *(uint *)(*param + 0x2c) = *(uint *)(*param + 0x2c) & 0xff000000;\n      *(uint *)(*param + 0x30) = *(uint *)(*param + 0x30) & 0xc0000000;\n      *(uint *)(*param + 0x34) = *(uint *)(*param + 0x34) & 0xc0000000;\n      *(uint *)(*param + 0x38) = *(uint *)(*param + 0x38) & 0xffc00000;\n      *(uint *)(*param + 0x38) = *(uint *)(*param + 0x38) & 0xffc00000;\n      update_memory_protection_080049f0(param);\n      param[0xb] = 0;\n      param[10] = 0;\n    }\n    *(undefined *)(param + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "update_memory_protection_0800224c",
                "param_1": "param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "update_flags_08002348",
            "code": "\nint update_flags_08002348(int data)\n\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = update_flags_08002348_080020f0();\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "update_flags_08002348",
                "param_1": "data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "perform_data_processing_08002384",
            "code": "\nint performDataProcessing_08002384(int *data)\n\n{\n  uint variable1;\n  int result;\n  uint variable2;\n  int loopIndex1;\n  int loopIndex2;\n  int loopCounter;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_flags_080020f0();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    variable1 = DAT_20000084;\n    variable2 = calculate_value_08003da4(2);\n    for (loopCounter = variable1 / variable2 << 1; loopCounter != 0; loopCounter = loopCounter + -1) {\n    }\n    initialize_data_08001f84(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    loopIndex1 = get_data_08001cc4();\n    while (loopIndex2 = *data, (*(uint *)(loopIndex2 + 8) & 8) != 0) {\n      loopIndex2 = get_data_08001cc4();\n      if (10 < (uint)(loopIndex2 - loopIndex1)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(loopIndex2 + 8) = *(uint *)(loopIndex2 + 8) | 4;\n    loopIndex1 = get_data_08001cc4();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      loopIndex2 = get_data_08001cc4();\n      if (10 < (uint)(loopIndex2 - loopIndex1)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002384": "perform_data_processing_08002384",
                "param_1": "data",
                "uVar1": "variable1",
                "iVar2": "result",
                "uVar3": "variable2",
                "iVar4": "loopIndex1",
                "iVar5": "loopIndex2",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_data_register_08002470",
            "code": "\n\n\nvoid updateDataRegister_08002470(uint newValue)\n\n{\n  _DAT_e000ed0c = (newValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_data_register_08002470",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "convert_and_store_bits_08002494",
            "code": "\n\n\nvoid convertAndStoreBits_08002494(uint inputValue,uint bitMask,uint dataValue)\n\n{\n  uint shiftAmount;\n  uint shiftedMask;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftedMask = 7 - shiftAmount;\n  if (3 < shiftedMask) {\n    shiftedMask = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitMask & (1 << (shiftedMask & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & dataValue;\n  if ((int)inputValue < 0) {\n    *(char *)((inputValue & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(inputValue + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "convert_and_store_bits_08002494",
                "param_1": "inputValue",
                "param_2": "bitMask",
                "param_3": "dataValue",
                "uVar1": "shiftAmount",
                "uVar2": "shiftedMask"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_at_index_080024f8",
            "code": "\nvoid setBitAtIndex_080024f8(uint index)\n\n{\n  if (-1 < castedIndex) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_at_index_080024f8",
                "param_1": "index",
                "(int)param_1": "castedIndex"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "set_param_values_08002514",
            "code": "\n\n\nundefined4 set_param_values_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "set_param_values_08002514",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_at_position_08002540",
            "code": "\nvoid setBitAtPosition_08002540(uint position)\n\n{\n  if (-1 < (int)position) {\n    *(int *)(((position >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (position & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_at_position_08002540",
                "param_1": "position"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "set_register_bit_08002560",
            "code": "\n\n\nvoid setRegisterBit_08002560(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "set_register_bit_08002560",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "execute_setup_function_08002582",
            "code": "\nvoid executeSetupFunction_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "execute_setup_function_08002582"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "initialize_flags_0800258c",
            "code": "\n\n\nundefined4 initializeFlags_0800258c(uint **flags)\n\n{\n  uint *currentFlag;\n  \n  if (*(char *)((int)flags + 0x21) != '\\x02') {\n    flags[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **flags = **flags & 0xfffffff1;\n  **flags = **flags & 0xfffffffe;\n  currentFlag = *flags;\n  if (currentFlag == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentFlag == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentFlag == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentFlag == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentFlag == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentFlag == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)flags + 0x21) = 1;\n  *(undefined *)(flags + 8) = 0;\n  if (callbackFunction != (uint *)0x0) {\n    (*(code *)callbackFunction)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "initialize_flags_0800258c",
                "param_1": "flags",
                "puVar1": "currentFlag",
                "param_1[0xd]": "callbackFunction"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_register_flags_08002624",
            "code": "\n\n\nvoid update_register_flags_08002624(uint *output_register,uint *input_register)\n\n{\n  uint *updated_register;\n  uint bit_mask;\n  uint bit_value;\n  uint bit_position;\n  uint condition_value;\n  uint updated_value;\n  int bit_shift;\n  int register_index;\n  \n  updated_value = 0;\n  bit_position = 0;\n  do {\n    if (0xf < bit_position) {\n      return;\n    }\n    bit_mask = 1 << (bit_position & 0xff);\n    bit_value = *input_register & bit_mask;\n    if (bit_mask == bit_value) {\n      condition_value = input_register[1];\n      if (condition_value == 0x12) {\n        updated_value = input_register[3] + 0xc;\n      }\n      else if (condition_value < 0x13) {\n        if (condition_value == 2) {\n          updated_value = input_register[3] + 8;\n        }\n        else if (condition_value < 3) {\n          if (condition_value == 0) goto LAB_08002776;\n          if (condition_value == 1) {\n            updated_value = input_register[3];\n          }\n        }\n        else if (condition_value == 3) {\n          updated_value = 0;\n        }\n        else if (condition_value == 0x11) {\n          updated_value = input_register[3] + 4;\n        }\n      }\n      else if (condition_value == 0x10210000) {\nLAB_08002776:\n        if (input_register[2] == 0) {\n          updated_value = 4;\n        }\n        else if (input_register[2] == 1) {\n          output_register[4] = bit_mask;\n          updated_value = 8;\n        }\n        else {\n          output_register[5] = bit_mask;\n          updated_value = 8;\n        }\n      }\n      else if (condition_value < 0x10210001) {\n        if ((condition_value == 0x10110000) || (condition_value == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((condition_value == 0x10310000) || ((condition_value == 0x10320000 || (condition_value == 0x10220000))))\n      goto LAB_08002776;\n      bit_mask = bit_position;\n      updated_register = output_register;\n      if (0xff < bit_value) {\n        bit_mask = bit_position - 8;\n        updated_register = output_register + 1;\n      }\n      *updated_register = *updated_register & ~(0xf << (bit_mask << 2 & 0xff)) | updated_value << (bit_mask << 2 & 0xff);\n      if ((input_register[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bit_shift = (bit_position & 3) << 2;\n        if (output_register == (uint *)0x40010800) {\n          register_index = 0;\n        }\n        else if (output_register == (uint *)0x40010c00) {\n          register_index = 1;\n        }\n        else if (output_register == (uint *)0x40011000) {\n          register_index = 2;\n        }\n        else if (output_register == (uint *)0x40011400) {\n          register_index = 3;\n        }\n        else {\n          register_index = 4;\n        }\n        *(uint *)(((bit_position >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bit_position >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bit_shift) | register_index << bit_shift;\n        if ((input_register[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_value;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_value;\n        }\n        if ((input_register[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_value;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_value;\n        }\n        if ((input_register[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_value;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_value;\n        }\n        if ((input_register[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_value;\n        }\n        else {\n          _DAT_4001040c = bit_value | _DAT_4001040c;\n        }\n      }\n    }\n    bit_position = bit_position + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_register_flags_08002624",
                "param_1": "output_register",
                "param_2": "input_register",
                "puVar1": "updated_register",
                "uVar2": "bit_mask",
                "uVar3": "bit_value",
                "uVar4": "bit_position",
                "uVar5": "condition_value",
                "uVar6": "updated_value",
                "iVar7": "bit_shift",
                "iVar8": "register_index"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_08002810",
            "code": "\nundefined4 check_bit_08002810(int address,uint value)\n\n{\n  if ((value & *(uint *)(address + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_param_value_0800281e",
            "code": "\nvoid setParamValue_0800281e(int objectAddress,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectAddress + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_data_and_initialize_0800282c",
            "code": "\n\n\nvoid updateDataAndInitialize_0800282c(uint dataMask)\n\n{\n  if ((_DAT_40010414 & dataMask) != 0) {\n    _DAT_40010414 = dataMask;\n    initializeIfBitsAreSet();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_data_and_initialize_0800282c",
                "param_1": "dataMask",
                "initialize_if_bits_are_set_080060e4": "initializeIfBitsAreSet"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_parameter_08002848",
            "code": "\nundefined4 updateParameter_08002848(int *parameterList)\n\n{\n  if (*(char *)((int)parameterList + 0x3e) == '@') {\n    if (indexValue == 0) {\n      *(uint *)(*parameterList + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*parameterList + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (parameterList[4] == 0x4000) {\n    if (*(char *)((int)parameterList + 0x3d) == '!') {\n      *(uint *)(*parameterList + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*parameterList + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (indexValue == 0) {\n    *(uint *)(*parameterList + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (indexValue == 1) {\n    *(uint *)(*parameterList + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_parameter_08002848",
                "param_1": "parameterList",
                "param_1[0x14]": "indexValue",
                "param_1[0x11]": "value"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "write_byte_to_address_080028d2",
            "code": "\nundefined4 writeByteToAddress_080028d2(int *address)\n\n{\n  *(uint *)(*address + 0x10) = address[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "write_byte_to_address_080028d2",
                "param_1": "address"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "apply_flags_080028de",
            "code": "\nundefined4 applyFlags_080028de(uint **parameters)\n\n{\n  uint *tempVar1;\n  \n  tempVar1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (tempVar1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          tempVar1 = *parameters;\n          if ((tempVar1[1] & 0x800) == 0) {\n            *tempVar1 = *tempVar1 | 0x200;\n          }\n          else {\n            *tempVar1 = *tempVar1 & 0xfffffbff;\n          }\n        }\n        else if (((tempVar1 == (uint *)0x4) || (tempVar1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        tempVar1 = *parameters;\n        if ((tempVar1[1] & 0x800) != 0) {\n          tempVar1[1] = tempVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        tempVar1 = *parameters;\n        if ((tempVar1[1] & 0x800) != 0) {\n          tempVar1[1] = tempVar1[1] | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "apply_flags_080028de",
                "param_1": "parameters",
                "puVar1": "tempVar1"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_parameter_value_08002ab8",
            "code": "\nundefined4 updateParameterValue_08002ab8(int *parameter)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)parameter + 0x2a) != 0) {\n    bytePointer = (byte *)pointerToByte;\n    pointerToByte = (int)(bytePointer + 1);\n    *(uint *)(*parameter + 0x10) = (uint)*bytePointer;\n    *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_parameter_value_08002ab8",
                "param_1": "parameter",
                "pbVar1": "bytePointer",
                "param_1[9]": "pointerToByte"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_pointer_and_value_08002ad8",
            "code": "\nundefined4 updatePointerAndValue_08002ad8(int *pointerArray)\n\n{\n  undefined *currentPointer;\n  \n  if (*(short *)((int)pointerArray + 0x2a) != 0) {\n    currentPointer = (undefined *)destinationPointer;\n    destinationPointer = (int)(currentPointer + 1);\n    *currentPointer = (char)*(undefined4 *)(*pointerArray + 0x10);\n    *(short *)((int)pointerArray + 0x2a) = *(short *)((int)pointerArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_pointer_and_value_08002ad8",
                "param_1": "pointerArray",
                "puVar1": "currentPointer",
                "param_1[9]": "destinationPointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "validate_and_configure_08002af8",
            "code": "\nundefined4 validate_and_configure_08002af8(uint **config_ptr,uint *data_ptr,int data_size,uint *config_data_ptr)\n\n{\n  undefined4 result;\n  uint *config_ptr_value;\n  \n  if (*(char *)((int)config_ptr + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (data_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(config_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(config_ptr + 0xf) = 1;\n      config_ptr_value = *config_ptr;\n      if ((*config_ptr_value & 1) == 0) {\n        *config_ptr_value = *config_ptr_value | 1;\n      }\n      **config_ptr = **config_ptr & 0xfffff7ff;\n      *(undefined *)((int)config_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)config_ptr + 0x3e) = 0x20;\n      result = 0;\n      config_ptr[0x10] = (uint *)0x0;\n      config_ptr[9] = data_ptr;\n      *(short *)((int)config_ptr + 0x2a) = (short)data_size;\n      config_ptr[0xb] = config_data_ptr;\n      *(undefined2 *)(config_ptr + 10) = *(undefined2 *)((int)config_ptr + 0x2a);\n      *(undefined *)(config_ptr + 0xf) = 0;\n      (*config_ptr)[1] = (*config_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "validate_and_configure_08002af8",
                "param_1": "config_ptr",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "param_4": "config_data_ptr",
                "uVar1": "result",
                "puVar2": "config_ptr_value"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "validate_and_initialize_08002b84",
            "code": "\nundefined4 validate_and_initialize_08002b84(uint **arg_list,uint *data_ptr,int size,uint *result)\n\n{\n  undefined4 status;\n  uint *deref_value;\n  \n  if (*(char *)((int)arg_list + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      status = 1;\n    }\n    else if (size == 0) {\n      status = 1;\n    }\n    else if (*(char *)(arg_list + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(arg_list + 0xf) = 1;\n      deref_value = *arg_list;\n      if ((*deref_value & 1) == 0) {\n        *deref_value = *deref_value | 1;\n      }\n      **arg_list = **arg_list & 0xfffff7ff;\n      *(undefined *)((int)arg_list + 0x3d) = 0x2a;\n      *(undefined *)((int)arg_list + 0x3e) = 0x20;\n      status = 0;\n      arg_list[0x10] = (uint *)0x0;\n      arg_list[9] = data_ptr;\n      *(short *)((int)arg_list + 0x2a) = (short)size;\n      arg_list[0xb] = result;\n      *(undefined2 *)(arg_list + 10) = *(undefined2 *)((int)arg_list + 0x2a);\n      *(undefined *)(arg_list + 0xf) = 0;\n      (*arg_list)[1] = (*arg_list)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "validate_and_initialize_08002b84",
                "param_1": "arg_list",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "result",
                "uVar1": "status",
                "puVar2": "deref_value"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "set_flags_and_values_08002c10",
            "code": "\nundefined4 setFlagsAndValues_08002c10(uint **ptr)\n\n{\n  uint *ptr1;\n  \n  if (*(char *)((int)ptr + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)ptr + 0x3d) = 0x28;\n  ptr1 = *ptr;\n  if ((*ptr1 & 1) == 0) {\n    *ptr1 = *ptr1 | 1;\n  }\n  **ptr = **ptr | 0x400;\n  (*ptr)[1] = (*ptr)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "set_flags_and_values_08002c10",
                "param_1": "ptr",
                "puVar1": "ptr1"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 processData_08002c54(int *data)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)byteArray;\n    byteArray = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      constantValue = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "charValue",
                "pbVar2": "bytePointer",
                "param_1[9]": "byteArray",
                "param_1[0xc]": "constantValue"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_buffer_08002ca6",
            "code": "\nundefined4 updateBuffer_08002ca6(int *buffer)\n\n{\n  char lastChar;\n  undefined *currentPos;\n  \n  lastChar = *(char *)((int)buffer + 0x3d);\n  if (*(short *)((int)buffer + 0x2a) != 0) {\n    currentPos = (undefined *)buffer[9];\n    buffer[9] = (int)(currentPos + 1);\n    *currentPos = (char)*(undefined4 *)(*buffer + 0x10);\n    *(short *)((int)buffer + 0x2a) = *(short *)((int)buffer + 0x2a) + -1;\n    if ((*(short *)((int)buffer + 0x2a) == 0) && (lastChar == '*')) {\n      *(uint *)(*buffer + 4) = *(uint *)(*buffer + 4) & 0xfffffbff;\n      value = 0x22;\n      *(undefined *)((int)buffer + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_buffer_08002ca6",
                "param_1": "buffer",
                "cVar1": "lastChar",
                "puVar2": "currentPos",
                "param_1[0xc]": "value"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "configure_and_validate_08002cf2",
            "code": "\nundefined4 configureAndValidate_08002cf2(int *data,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined2 value1;\n  uint value2;\n  \n  value2 = *(uint *)(*data + 0x18);\n  if ((value2 & 0x80) == 0) {\n    value1 = *(undefined2 *)(data + 3);\n  }\n  else {\n    value1 = *(undefined2 *)(data + 6);\n  }\n  validate_and_configure_08004e74(data,(*(uint *)(*data + 0x18) & 4) == 0,value1,value2,arg3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "configure_and_validate_08002cf2",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "improve_code_08002d1c",
            "code": "\nundefined4 improve_code_08002d1c(uint **input_params)\n\n{\n  if (((input_params[0xb] == (uint *)0x4) || (input_params[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)input_params + 0x3d) == '(')) {\n    input_params[0xb] = (uint *)0xffff0000;\n    (*input_params)[1] = (*input_params)[1] & 0xfffff8ff;\n    (*input_params)[5] = 0xfffffbff;\n    **input_params = **input_params & 0xfffffbff;\n    input_params[0xc] = (uint *)0x0;\n    *(undefined *)((int)input_params + 0x3d) = 0x20;\n    *(undefined *)((int)input_params + 0x3e) = 0;\n    execute_with_conditions();\n  }\n  else if (*(char *)((int)input_params + 0x3d) == '!') {\n    input_params[0xb] = (uint *)0xffff0000;\n    input_params[0xc] = (uint *)0x21;\n    *(undefined *)((int)input_params + 0x3d) = 0x20;\n    *(undefined *)((int)input_params + 0x3e) = 0;\n    (*input_params)[1] = (*input_params)[1] & 0xfffff8ff;\n    (*input_params)[5] = 0xfffffbff;\n    **input_params = **input_params & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*input_params)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "improve_code_08002d1c",
                "param_1": "input_params",
                "execute_function_with_conditions_08004ec4": "execute_with_conditions"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_data_08002db2",
            "code": "\nundefined4 processData_08002db2(uint **data)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  pointer = pointerValue;\n  if ((*(short *)(data + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      pointerValueInData = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      pointerValueInData = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)data + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          pointer = data[9];\n          data[9] = (uint *)((int)pointer + 1);\n          (*data)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = data[9];\n      data[9] = (uint *)((int)pointer + 1);\n      (*data)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer",
                "param_1[0xb]": "pointerValue",
                "param_1[0xc]": "pointerValueInData"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "update_parameters_08002efc",
            "code": "\nundefined4 updateParameters_08002efc(uint **parameters)\n\n{\n  uint *pointer;\n  \n  pointer = parameters[0xb];\n  if (*(char *)((int)parameters + 0x3d) == '!') {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      if (((pointer == (uint *)0x4) || (pointer == (uint *)0x8)) || (pointer == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        pointerArray = (uint *)0x0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        pointerArray = (uint *)0x11;\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      pointer = parameters[9];\n      parameters[9] = (uint *)((int)pointer + 1);\n      (*parameters)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "update_parameters_08002efc",
                "param_1": "parameters",
                "puVar1": "pointer",
                "param_1[0xc]": "pointerArray"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "update_flags_and_values_08002f9c",
            "code": "\nundefined4 updateFlagsAndValues_08002f9c(uint **ptrArray)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)ptrArray + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)ptrArray + 0x2a) < 4) {\n      if (*(ushort *)((int)ptrArray + 0x2a) - 2 < 2) {\n        if (ptrArray[0xb] == (uint *)0x2) {\n          **ptrArray = **ptrArray | 0x400;\n        }\n        else {\n          **ptrArray = **ptrArray & 0xfffffbff;\n          **ptrArray = **ptrArray | 0x800;\n        }\n        (*ptrArray)[1] = (*ptrArray)[1] & 0xfffffbff;\n      }\n      else {\n        if (ptrArray[0xb] == (uint *)0x2) {\n          **ptrArray = **ptrArray | 0x400;\n        }\n        else {\n          **ptrArray = **ptrArray & 0xfffffbff;\n        }\n        (*ptrArray)[1] = (*ptrArray)[1] & 0xfffff8ff;\n        tempPtr = ptrArray[9];\n        ptrArray[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*ptrArray)[4];\n        *(short *)((int)ptrArray + 0x2a) = *(short *)((int)ptrArray + 0x2a) + -1;\n        *(undefined *)((int)ptrArray + 0x3d) = 0x20;\n        ptrArray[0xc] = (uint *)0x0;\n        if (*(char *)((int)ptrArray + 0x3e) == '@') {\n          *(undefined *)((int)ptrArray + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)ptrArray + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      tempPtr = ptrArray[9];\n      ptrArray[9] = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*ptrArray)[4];\n      *(short *)((int)ptrArray + 0x2a) = *(short *)((int)ptrArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "update_flags_and_values_08002f9c",
                "param_1": "ptrArray",
                "puVar1": "tempPtr",
                "param_1[0xb]": "ptrArray[0xb]",
                "param_1[9]": "ptrArray[9]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "handle_action_0800306c",
            "code": "\nundefined4 handleAction_0800306c(uint **params)\n\n{\n  uint *selectedValue;\n  \n  selectedValue = params[0xb];\n  if (*(short *)((int)params + 0x2a) == 3) {\n    if (((selectedValue == (uint *)0x4) || (selectedValue == (uint *)0x8)) || (selectedValue == (uint *)0xffff0000)) {\n      **params = **params & 0xfffffbff;\n    }\n    selectedValue = params[9];\n    params[9] = (uint *)((int)selectedValue + 1);\n    *(char *)selectedValue = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n  }\n  else if (*(short *)((int)params + 0x2a) == 2) {\n    if (((selectedValue == (uint *)0x4) || (selectedValue == (uint *)0x8)) || (selectedValue == (uint *)0xffff0000)) {\n      (*params)[1] = (*params)[1] & 0xfffffcff;\n      **params = **params | 0x200;\n    }\n    else {\n      if (selectedValue == (uint *)0x2) {\n        **params = **params | 0x400;\n      }\n      else {\n        **params = **params & 0xfffffbff;\n      }\n      (*params)[1] = (*params)[1] & 0xfffffcff;\n    }\n    selectedValue = params[9];\n    params[9] = (uint *)((int)selectedValue + 1);\n    *(char *)selectedValue = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    selectedValue = params[9];\n    params[9] = (uint *)((int)selectedValue + 1);\n    *(char *)selectedValue = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    params[0xc] = (uint *)0x0;\n    if (*(char *)((int)params + 0x3e) == '@') {\n      *(undefined *)((int)params + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)((int)params + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    selectedValue = params[9];\n    params[9] = (uint *)((int)selectedValue + 1);\n    *(char *)selectedValue = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "handle_action_0800306c",
                "param_1": "params",
                "puVar1": "selectedValue"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "process_input_0800316c",
            "code": "\nvoid processInput_0800316c(uint **input)\n\n{\n  int returnValue;\n  uint *ptrVar2;\n  uint *ptrVar3;\n  \n  if (*(byte *)((int)input + 0x3d) - 0x29 < 2) {\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)input + 0x3d) != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input = **input & 0xfffff7ff;\n  ptrVar3 = *input;\n  if ((ptrVar3[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = (uint *)0x0;\n      if ((ptrVar3[5] & 0x40) != 0) {\n        ptrVar2 = input[9];\n        input[9] = (uint *)((int)ptrVar2 + 1);\n        *(char *)ptrVar2 = (char)ptrVar3[4];\n      }\n      **input = **input & 0xfffffffe;\n      FUNC_0800316a(input);\n    }\n    else {\n      if ((ptrVar3[5] & 0x40) != 0) {\n        ptrVar2 = input[9];\n        input[9] = (uint *)((int)ptrVar2 + 1);\n        *(char *)ptrVar2 = (char)ptrVar3[4];\n      }\n      check_and_set_flags_08004ef4(input);\n    }\n  }\n  else {\n    ptrVar3[1] = ptrVar3[1] & 0xfffff7ff;\n    if (*(char *)((int)input[0xd] + 0x21) == '\\x01') {\n      input[0xe][0xd] = (uint)&LAB_080035fc_1;\n      returnValue = initialize_flags_0800258c(input[0xe]);\n      if (returnValue != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          ptrVar3 = input[9];\n          input[9] = (uint *)((int)ptrVar3 + 1);\n          *(char *)ptrVar3 = (char)(*input)[4];\n        }\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xe][0xd])();\n      }\n    }\n    else {\n      input[0xd][0xd] = (uint)&LAB_080035fc_1;\n      returnValue = initialize_flags_0800258c(input[0xd]);\n      if (returnValue != 0) {\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)input + 0x3d) == '(') && (((uint)input[0x10] & 4) != 0)) {\n    input[0xb] = (uint *)0xffff0000;\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    execute_function_with_conditions_08004ec4(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "process_input_0800316c",
                "param_1": "input",
                "iVar1": "returnValue",
                "puVar2": "ptrVar2",
                "puVar3": "ptrVar3"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_param_array_080032b4",
            "code": "\nundefined4 process_param_array_080032b4(uint **param_array)\n\n{\n  char char1;\n  uint *ptr1;\n  uint *ptr2;\n  \n  char1 = *(char *)((int)param_array + 0x3d);\n  (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n  **param_array = **param_array | 1;\n  **param_array = **param_array & 0xfffffbff;\n  ptr1 = *param_array;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param_array + 0x3d) == '\\\"') || (*(char *)((int)param_array + 0x3d) == '*')) {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param_array + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = param_array[9];\n      param_array[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    if (((*param_array)[5] & 0x40) != 0) {\n      ptr1 = param_array[9];\n      param_array[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*param_array)[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    param_array[0x10] = (uint *)((uint)param_array[0x10] | 4);\n  }\n  if (param_array[0x10] == (uint *)0x0) {\n    if (((char1 == '(') || (char1 == '*')) || (char1 == ')')) {\n      param_array[0xb] = (uint *)0xffff0000;\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      execute_function_with_conditions_08004ec4();\n    }\n    else if ((param_array[0xc] == (uint *)0x22) || (char1 == '\\\"')) {\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    process_input_0800316c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_param_array_080032b4",
                "param_1": "param_array",
                "cVar1": "char1",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_data_080033b8",
            "code": "\nvoid process_data_080033b8(int *data_pointer)\n\n{\n  int data_value;\n  uint flag_value_1;\n  uint flag_value_2;\n  uint flag_value_3;\n  \n  data_value = *data_pointer;\n  flag_value_3 = *(uint *)(data_value + 0x18);\n  flag_value_1 = *(uint *)(data_value + 0x14);\n  flag_value_2 = *(uint *)(data_value + 4);\n  if ((*(char *)((int)data_pointer + 0x3e) == '\\x10') || (*(char *)((int)data_pointer + 0x3e) == '@')) {\n    if (((flag_value_1 & 0x10001) == 0) || ((flag_value_2 & 0x200) == 0)) {\n      if (((flag_value_1 & 0x10008) == 0) || ((flag_value_2 & 0x200) == 0)) {\n        if (((flag_value_1 & 0x10002) != 0) && ((flag_value_2 & 0x200) != 0)) {\n          apply_flags_080028de(data_pointer);\n        }\n      }\n      else {\n        write_byte_to_address_080028d2(data_pointer);\n      }\n    }\n    else {\n      update_parameter_08002848(data_pointer);\n    }\n    if ((flag_value_3 & 0x100004) == 0) {\n      if ((((flag_value_1 & 0x10040) != 0) && ((flag_value_2 & 0x400) != 0)) && ((flag_value_1 & 0x10004) == 0)) {\n        update_flags_and_values_08002f9c(data_pointer);\n        return;\n      }\n      if (((flag_value_1 & 0x10004) != 0) && ((flag_value_2 & 0x200) != 0)) {\n        handle_action_0800306c(data_pointer);\n        return;\n      }\n    }\n    else {\n      if ((((flag_value_1 & 0x10080) != 0) && ((flag_value_2 & 0x400) != 0)) && ((flag_value_1 & 0x10004) == 0)) {\n        process_data_080033b8_08002db2(data_pointer);\n        return;\n      }\n      if (((flag_value_1 & 0x10004) != 0) && ((flag_value_2 & 0x200) != 0)) {\n        update_parameters_08002efc(data_pointer);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag_value_1 & 0x10002) != 0) && ((flag_value_2 & 0x200) != 0)) {\n      configure_and_validate_08002cf2();\n      return;\n    }\n    if (((flag_value_1 & 0x10010) != 0) && ((flag_value_2 & 0x200) != 0)) {\n      process_param_array_080032b4(data_pointer);\n      return;\n    }\n    if ((flag_value_3 & 0x100004) == 0) {\n      if ((((flag_value_1 & 0x10040) != 0) && ((flag_value_2 & 0x400) != 0)) && ((flag_value_1 & 0x10004) == 0)) {\n        update_buffer_08002ca6(data_pointer);\n        return;\n      }\n      if (((flag_value_1 & 0x10004) != 0) && ((flag_value_2 & 0x200) != 0)) {\n        update_pointer_and_value_08002ad8(data_pointer);\n      }\n    }\n    else {\n      if ((((flag_value_1 & 0x10080) != 0) && ((flag_value_2 & 0x400) != 0)) && ((flag_value_1 & 0x10004) == 0)) {\n        process_data_080033b8_08002c54(data_pointer);\n        return;\n      }\n      if (((flag_value_1 & 0x10004) != 0) && ((flag_value_2 & 0x200) != 0)) {\n        update_parameter_value_08002ab8(data_pointer);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_data_080033b8",
                "param_1": "data_pointer",
                "iVar1": "data_value",
                "uVar2": "flag_value_1",
                "uVar3": "flag_value_2",
                "uVar4": "flag_value_3"
            },
            "calling": [],
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "process_flags_08003520",
            "code": "\nvoid process_flags_08003520(uint **flags)\n\n{\n  char character;\n  uint *ptr;\n  uint flag3;\n  uint flag4;\n  \n  ptr = *flags;\n  flag3 = ptr[5];\n  flag4 = ptr[1];\n  if (((flag3 & 0x10100) != 0) && ((flag4 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n    **flags = **flags | 0x8000;\n  }\n  if (((flag3 & 0x10200) != 0) && ((flag4 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 2);\n    (*flags)[5] = 0xfffffdff;\n  }\n  if (((flag3 & 0x10400) != 0) && ((flag4 & 0x100) != 0)) {\n    character = *(char *)((int)flags + 0x3d);\n    if (((*(char *)((int)flags + 0x3e) == ' ') && (*(short *)((int)flags + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (flags[0xc] == (uint *)0x21)))))) {\n      improve_code_08002d1c(flags);\n    }\n    else {\n      flags[0x10] = (uint *)((uint)flags[0x10] | 4);\n      if (*(char *)((int)flags + 0x3e) == '\\x10') {\n        **flags = **flags | 0x200;\n      }\n      (*flags)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag3 & 0x10800) != 0) && ((flag4 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 8);\n    (*flags)[5] = 0xfffff7ff;\n  }\n  if (flags[0x10] != (uint *)0x0) {\n    process_input_0800316c(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "process_flags_08003520",
                "param_1": "flags",
                "cVar1": "character",
                "puVar2": "ptr",
                "uVar3": "flag3",
                "uVar4": "flag4"
            },
            "calling": [],
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "calculate_delay_0800365c",
            "code": "\nvoid calculateDelay_0800365c(int input)\n\n{\n  bool isDelayOver;\n  int delayCount;\n  \n  delayCount = input * (DAT_20000084 / 8000);\n  do {\n    isDelayOver = delayCount != 0;\n    delayCount = delayCount + -1;\n  } while (isDelayOver);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "calculate_delay_0800365c",
                "param_1": "input",
                "local_4": "delayCount",
                "bVar1": "isDelayOver"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_and_control_settings_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkAndControlSettings_08003688(uint *param_1)\n\n{\n  int startValue;\n  int currentValue;\n  undefined4 result;\n  uint param1Value;\n  bool isConditionTrue;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      param1Value = param_1[1];\n      if (param1Value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (param1Value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (param1Value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (param_1[1] == 0) {\n        startValue = get_data_08001cc4();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = get_data_08001cc4();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startValue = get_data_08001cc4();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = get_data_08001cc4();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      _DAT_42420000 = 0;\n      startValue = get_data_08001cc4();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = get_data_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startValue = get_data_08001cc4();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = get_data_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      _DAT_42420480 = 0;\n      startValue = get_data_08001cc4();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = get_data_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startValue = get_data_08001cc4();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = get_data_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      calculate_delay_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    isConditionTrue = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionTrue) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startValue = get_data_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_08001cc4();\n        if (100 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    param1Value = param_1[3];\n    if (param1Value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (param1Value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (param1Value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (param_1[3] == 0) {\n      startValue = get_data_08001cc4();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = get_data_08001cc4();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startValue = get_data_08001cc4();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = get_data_08001cc4();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionTrue) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (param_1[7] == 2) {\n    _DAT_42420060 = 0;\n    startValue = get_data_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | param_1[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | param_1[8] | param_1[9];\n        _DAT_42420060 = 1;\n        startValue = get_data_08001cc4();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_data_08001cc4();\n        } while ((uint)(currentValue - startValue) < 3);\n        return 3;\n      }\n      currentValue = get_data_08001cc4();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startValue = get_data_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_data_08001cc4();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_and_control_settings_08003688",
                "iVar1": "startValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "param1Value",
                "bVar5": "isConditionTrue"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_time_delay_08003a68",
            "code": "\n\n\nuint calculateTimeDelay_08003a68(void)\n\n{\n  uint uVar1;\n  undefined2 delayFactor;\n  undefined4 multiplier1;\n  undefined4 multiplier2;\n  undefined4 multiplier3;\n  undefined4 multiplier4;\n  \n  multiplier4 = 0x10100f0e;\n  multiplier3 = 0xd0c0b0a;\n  multiplier2 = 0x9080706;\n  multiplier1 = 0x5040302;\n  delayFactor = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&multiplier1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&delayFactor - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_time_delay_08003a68",
                "local_1c": "delayFactor",
                "uStack_18": "multiplier1",
                "uStack_14": "multiplier2",
                "uStack_10": "multiplier3",
                "uStack_c": "multiplier4"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_system_08003ad4",
            "code": "\n\n\nundefined4 initialize_system_08003ad4(uint *system_config,uint max_size)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  if ((_DAT_40022000 & 7) < max_size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | max_size;\n    if (max_size != (max_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*system_config & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | system_config[2];\n  }\n  if ((*system_config & 1) != 0) {\n    uVar3 = system_config[1];\n    if (uVar3 == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((uVar3 != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = uVar3 | _DAT_40021004 & 0xfffffffc;\n    iVar1 = get_current_time();\n    if (system_config[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = get_current_time();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (system_config[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = get_current_time();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = get_current_time();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (max_size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | max_size;\n    if (max_size != (max_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*system_config & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | system_config[3];\n  }\n  if ((*system_config & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | system_config[4] << 3;\n  }\n  uVar3 = calculate_time_delay();\n  DAT_20000084 = uVar3 >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  set_and_update_params(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_system_08003ad4",
                "param_1": "system_config",
                "param_2": "max_size",
                "get_data_08001cc4": "get_current_time",
                "calculate_time_delay_08003a68": "calculate_time_delay",
                "set_and_update_param_values_08001c3c": "set_and_update_params"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_system_08003afa",
            "code": "\n\n\nundefined4 initializeSystem_08003afa(uint *systemConfig,uint maxConfig)\n\n{\n  int initialTime;\n  int currentTime;\n  uint configValue;\n  \n  if ((*systemConfig & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | systemConfig[2];\n  }\n  if ((*systemConfig & 1) != 0) {\n    configValue = systemConfig[1];\n    if (configValue == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((configValue != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = configValue | _DAT_40021004 & 0xfffffffc;\n    initialTime = getCurrentTime();\n    if (systemConfig[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (systemConfig[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (maxConfig < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | maxConfig;\n    if (maxConfig != (maxConfig & 7)) {\n      return 1;\n    }\n  }\n  if ((*systemConfig & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | systemConfig[3];\n  }\n  if ((*systemConfig & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | systemConfig[4] << 3;\n  }\n  configValue = calculateTimeDelay();\n  DAT_20000084 = configValue >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  setAndUpdateParamValues(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_system_08003afa",
                "param_1": "systemConfig",
                "param_2": "maxConfig",
                "uVar3": "configValue",
                "get_data_08001cc4": "getCurrentTime",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "calculate_time_delay_08003a68": "calculateTimeDelay",
                "set_and_update_param_values_08001c3c": "setAndUpdateParamValues"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_global_value_08003c44",
            "code": "\nundefined4 getGlobalValue_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_global_value_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "shifted_global_value_08003c50",
            "code": "\n\n\nuint shiftedGlobalValue_08003c50(void)\n\n{\n  uint globalValue;\n  \n  globalValue = getGlobalValue();\n  return globalValue >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "shifted_global_value_08003c50",
                "uVar1": "globalValue",
                "get_global_value_08003c44": "getGlobalValue"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "extracted_value_shifted_by_offset_08003c70",
            "code": "\n\n\nuint extracted_value_shifted_by_offset_08003c70(void)\n\n{\n  uint global_value;\n  \n  global_value = get_global_value();\n  return global_value >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "extracted_value_shifted_by_offset_08003c70",
                "uVar1": "global_value",
                "get_global_value_08003c44": "get_global_value"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "initialize_flags_08003c90",
            "code": "\n\n\nundefined4 initializeFlags_08003c90(uint *flags)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int initialValue;\n  int currentValue;\n  bool isFlagSet;\n  \n  if ((*flags & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_data_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_08001cc4();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (flags[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        initialValue = get_data_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_data_08001cc4();\n          if (5000 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | flags[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | flags[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "initialize_flags_08003c90",
                "param_1": "flags",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "initialValue",
                "iVar4": "currentValue",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_value_08003da4",
            "code": "\n\n\nuint calculateValue_08003da4(int inputValue)\n\n{\n  uint result;\n  undefined2 extractedValue;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackValue3;\n  undefined4 stackValue4;\n  \n  stackValue4 = 0x10100f0e;\n  stackValue3 = 0xd0c0b0a;\n  stackValue2 = 0x9080706;\n  stackValue1 = 0x5040302;\n  extractedValue = 0x201;\n  if (inputValue == 2) {\n    result = extracted_value_shifted_by_offset_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (inputValue == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&extractedValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&stackValue1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (inputValue == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "inputValue",
                "uVar1": "result",
                "local_24": "extractedValue",
                "uStack_20": "stackValue1",
                "uStack_1c": "stackValue2",
                "uStack_18": "stackValue3",
                "uStack_14": "stackValue4"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "check_and_update_flags_08003ea0",
            "code": "\n\n\nvoid checkAndUpdateFlags_08003ea0(uint **flags)\n\n{\n  if (((**flags & 2) != 0) && (((*flags)[1] & 2) != 0)) {\n    executeCallback();\n    (*flags)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)flags + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "check_and_update_flags_08003ea0",
                "param_1": "flags",
                "execute_call_back_function_08004d18": "executeCallback"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "update_and_reset_memory_permissions_08003ed8",
            "code": "\nvoid updateAndResetMemoryPermissions_08003ed8(uint **memoryPermissions)\n\n{\n  uint *ptrMemory;\n  \n  *(undefined *)((int)memoryPermissions + 0x3d) = 2;\n  ptrMemory = *memoryPermissions;\n  if ((ptrMemory[8] & 0x1111) == 0) {\n    if ((ptrMemory[8] & 0x444) == 0) {\n      *ptrMemory = *ptrMemory & 0xfffffffe;\n    }\n  }\n  updateMemoryPermissions(memoryPermissions);\n  *(undefined *)((int)memoryPermissions + 0x3d) = 0;\n  *(undefined *)(memoryPermissions + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "update_and_reset_memory_permissions_08003ed8",
                "param_1": "memoryPermissions",
                "puVar1": "ptrMemory",
                "update_memory_permissions_08004b34": "updateMemoryPermissions"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_conditions_08003f18",
            "code": "\nvoid processConditions_08003f18(int *input)\n\n{\n  int value;\n  \n  value = *input;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(input + 7) = 1;\n    if ((*(uint *)(*input + 0x18) & 3) == 0) {\n      executeCallbackIfConditionMet();\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(input + 7) = 2;\n    if ((*(uint *)(*input + 0x18) & 0x300) == 0) {\n      executeCallbackIfConditionMet(input);\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(input + 7) = 4;\n    if ((*(uint *)(*input + 0x1c) & 3) == 0) {\n      executeCallbackIfConditionMet(input);\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(input + 7) = 8;\n    if ((*(uint *)(*input + 0x1c) & 0x300) == 0) {\n      executeCallbackIfConditionMet(input);\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    executeCallback(input);\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800417a(input);\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08003f16(input);\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_08004178(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_conditions_08003f18",
                "param_1": "input",
                "iVar1": "value",
                "execute_callback_if_condition_met_08004df8": "executeCallbackIfConditionMet",
                "execute_callback_08004e12": "executeCallback"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bitwise_value_08004092",
            "code": "\nvoid updateBitwiseValue_08004092(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bitwise_value_08004092",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "update_bitwise_value_and_clear_flags_080040b0",
            "code": "\nundefined4 update_bitwise_value_and_clear_flags_080040b0(uint **bitwise_value,undefined4 flag_value)\n\n{\n  uint *bitwise_value_ptr;\n  \n  update_bitwise_value_08004092(*bitwise_value,flag_value,0);\n  if (((*bitwise_value == (uint *)0x40012c00) && ((constant_value_2 & 0x1111) == 0)) &&\n     ((constant_value_2 & 0x444) == 0)) {\n    flag_value_ptr = flag_value_ptr & 0xffff7fff;\n  }\n  bitwise_value_ptr = *bitwise_value;\n  if (((bitwise_value_ptr[8] & 0x1111) == 0) && ((bitwise_value_ptr[8] & 0x444) == 0)) {\n    *bitwise_value_ptr = *bitwise_value_ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)bitwise_value + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "update_bitwise_value_and_clear_flags_080040b0",
                "param_1": "bitwise_value",
                "param_2": "flag_value",
                "puVar1": "bitwise_value_ptr",
                "uRam40012c20": "constant_value_2",
                "uRam40012c44": "flag_value_ptr"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_bitwise_operation_08004110",
            "code": "\nvoid updateBitwiseOperation_08004110(int baseAddress,uint bitPosition,int value)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | value << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_bitwise_operation_08004110",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "clear_bits_if_conditions_met_0800412c",
            "code": "\nundefined4 clearBitsIfConditionsMet_0800412c(uint **inputArray,undefined4 value)\n\n{\n  uint *arrayPointer;\n  \n  update_bitwise_operation_08004110(*inputArray,value,0);\n  arrayPointer = *inputArray;\n  if (((arrayPointer[8] & 0x1111) == 0) && ((arrayPointer[8] & 0x444) == 0)) {\n    arrayPointer[0x11] = arrayPointer[0x11] & 0xffff7fff;\n  }\n  arrayPointer = *inputArray;\n  if (((arrayPointer[8] & 0x1111) == 0) && ((arrayPointer[8] & 0x444) == 0)) {\n    *arrayPointer = *arrayPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "clear_bits_if_conditions_met_0800412c",
                "param_1": "inputArray",
                "param_2": "value",
                "puVar1": "arrayPointer"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "update_flags_and_values_0800417c",
            "code": "\nvoid updateFlagsAndValues_0800417c(int *inputPointer)\n\n{\n  *(uint *)(*inputPointer + 0xc) = *(uint *)(*inputPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*inputPointer + 0x14) = *(uint *)(*inputPointer + 0x14) & 0xfffffffe;\n  *(undefined *)(tempValue + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "update_flags_and_values_0800417c",
                "param_1": "inputPointer",
                "(int)param_1": "tempValue"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "process_binary_data_08004198",
            "code": "\nundefined4 processBinaryData_08004198(int *data)\n\n{\n  short count;\n  byte *bytePtr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)data[8];\n    data[8] = (int)(bytePtr + 1);\n    *(uint *)(*data + 4) = (uint)*bytePtr;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "process_binary_data_08004198",
                "param_1": "data",
                "sVar1": "count",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_new_values_08004204",
            "code": "\nvoid calculateNewValues_08004204(int *parameters)\n\n{\n  int shiftedGlobalValue1;\n  int shiftedGlobalValue2;\n  int shiftedGlobalValue3;\n  int shiftedGlobalValue4;\n  int shiftedGlobalValue5;\n  int shiftedGlobalValue6;\n  int shiftedGlobalValue7;\n  int shiftedGlobalValue8;\n  int shiftedGlobalValue9;\n  int shiftedGlobalValue10;\n  \n  *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xffffcfff | parameters[3];\n  *(uint *)(*parameters + 0xc) =\n       parameters[2] | parameters[4] | parameters[5] | *(uint *)(*parameters + 0xc) & 0xffffe9f3;\n  *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xfffffcff | parameters[6];\n  shiftedGlobalValue10 = *parameters;\n  if (shiftedGlobalValue10 != 0x40013800) {\n    shiftedGlobalValue1 = shifted_global_value_08003c50();\n    shiftedGlobalValue6 = parameters[1];\n    shiftedGlobalValue2 = shifted_global_value_08003c50();\n    shiftedGlobalValue7 = parameters[1];\n    shiftedGlobalValue3 = shifted_global_value_08003c50();\n    shiftedGlobalValue8 = parameters[1];\n    shiftedGlobalValue4 = shifted_global_value_08003c50();\n    shiftedGlobalValue9 = parameters[1];\n    shiftedGlobalValue5 = shifted_global_value_08003c50();\n    *(uint *)(shiftedGlobalValue10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedGlobalValue4 * 0x19) / (uint)(shiftedGlobalValue9 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedGlobalValue5 * 0x19) / (ulonglong)(uint)(parameters[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedGlobalValue2 * 0x19) / (uint)(shiftedGlobalValue7 << 2) +\n           (int)(((ulonglong)(uint)(shiftedGlobalValue3 * 0x19) / (ulonglong)(uint)(shiftedGlobalValue8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedGlobalValue1 * 0x19) / (ulonglong)(uint)(shiftedGlobalValue6 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedGlobalValue10 = extracted_value_shifted_by_offset_08003c70();\n  shiftedGlobalValue5 = parameters[1];\n  shiftedGlobalValue1 = extracted_value_shifted_by_offset_08003c70();\n  shiftedGlobalValue6 = parameters[1];\n  shiftedGlobalValue2 = extracted_value_shifted_by_offset_08003c70();\n  shiftedGlobalValue7 = parameters[1];\n  shiftedGlobalValue3 = extracted_value_shifted_by_offset_08003c70();\n  shiftedGlobalValue8 = parameters[1];\n  shiftedGlobalValue4 = extracted_value_shifted_by_offset_08003c70();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedGlobalValue3 * 0x19) / (uint)(shiftedGlobalValue8 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedGlobalValue4 * 0x19) /\n                                      (ulonglong)(uint)(parameters[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedGlobalValue1 * 0x19) / (uint)(shiftedGlobalValue6 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedGlobalValue2 * 0x19) / (ulonglong)(uint)(shiftedGlobalValue7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(shiftedGlobalValue10 * 0x19) / (ulonglong)(uint)(shiftedGlobalValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_new_values_08004204",
                "param_1": "parameters",
                "iVar1": "shiftedGlobalValue1",
                "iVar2": "shiftedGlobalValue2",
                "iVar3": "shiftedGlobalValue3",
                "iVar4": "shiftedGlobalValue4",
                "iVar5": "shiftedGlobalValue5",
                "iVar6": "shiftedGlobalValue6",
                "iVar7": "shiftedGlobalValue7",
                "iVar8": "shiftedGlobalValue8",
                "iVar9": "shiftedGlobalValue9",
                "iVar10": "shiftedGlobalValue10"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_conditions_080043b4",
            "code": "\nundefined4 checkConditions_080043b4(uint **pointerArray,uint flag,uint expectedResult,int value1,uint value2)\n\n{\n  int data;\n  \n  do {\n    if (((flag & ~**pointerArray) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((value2 == 0xffffffff) ||\n          ((value2 != 0 && (data = get_data_08001cc4(), (uint)(data - value1) <= value2))));\n  (*pointerArray)[3] = (*pointerArray)[3] & 0xfffffe5f;\n  (*pointerArray)[5] = (*pointerArray)[5] & 0xfffffffe;\n  *(undefined *)((int)pointerArray + 0x39) = 0x20;\n  *(undefined *)((int)pointerArray + 0x3a) = 0x20;\n  *(undefined *)(pointerArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_conditions_080043b4",
                "param_1": "pointerArray",
                "param_2": "flag",
                "param_3": "expectedResult",
                "param_4": "value1",
                "param_5": "value2",
                "iVar1": "data"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "update_values_0800441a",
            "code": "\nundefined4 updateValues_0800441a(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    calculateNewValues(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    value4 = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "update_values_0800441a",
                "param_1": "data",
                "calculate_new_values_08004204": "calculateNewValues",
                "param_1[0xf]": "value4"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 process_data_08004478(int *data_array,ushort *data_buffer,int buffer_size,undefined4 param_value)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_array + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (buffer_size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_array + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_array + 0xe) = 1;\n      data_array[0xf] = 0;\n      *(undefined *)((int)data_array + 0x39) = 0x21;\n      return_value = get_data_08001cc4();\n      *(short *)(data_array + 9) = (short)buffer_size;\n      *(short *)((int)data_array + 0x26) = (short)buffer_size;\n      while (*(short *)((int)data_array + 0x26) != 0) {\n        *(short *)((int)data_array + 0x26) = *(short *)((int)data_array + 0x26) + -1;\n        if (data_array[2] == 0x1000) {\n          result = check_conditions_080043b4(data_array,0x80,0,return_value,param_value);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = *data_buffer & 0x1ff;\n          if (data_array[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = check_conditions_080043b4(data_array,0x80,0,return_value,param_value);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = check_conditions_080043b4(data_array,0x40,0,return_value,param_value);\n      if (result == 0) {\n        *(undefined *)((int)data_array + 0x39) = 0x20;\n        *(undefined *)(data_array + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_array",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "param_4": "param_value",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "update_data_0800455a",
            "code": "\nundefined4 updateData_0800455a(int *dataPointer,int value1,int value2)\n\n{\n  if (*(char *)((int)dataPointer + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(dataPointer + 0xe) != '\\x01') {\n    dataPointer[8] = value1;\n    *(short *)(dataPointer + 9) = (short)value2;\n    *(short *)((int)dataPointer + 0x26) = (short)value2;\n    dataPointer[0xf] = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x21;\n    *(undefined *)(dataPointer + 0xe) = 0;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "update_data_0800455a",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "dataPointer[8]",
                "param_1[0xf]": "dataPointer[0xf]"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "check_inputs_080045a2",
            "code": "\nundefined4 check_inputs_080045a2(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    array_elem2 = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "check_inputs_080045a2",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[0xf]": "array_elem2"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "set_flag_and_process_data_080045fe",
            "code": "\nundefined4 setFlagAndProcessData_080045fe(int *data)\n\n{\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffbf;\n  *(undefined *)((int)data + 0x39) = 0x20;\n  processData;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "set_flag_and_process_data_080045fe",
                "param_1": "data",
                "process_data_08005604()": "processData"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "process_data_08004618",
            "code": "\nundefined4 processData_08004618(int *inputData)\n\n{\n  byte *bytePtr;\n  short remainingCount;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)inputData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      *(ushort *)inputData[10] = (ushort)((uint)(*(int *)(*inputData + 4) << 0x17) >> 0x17);\n      inputData[10] = inputData[10] + 2;\n    }\n    else {\n      *(ushort *)inputData[10] = (ushort)*(undefined4 *)(*inputData + 4) & 0xff;\n      inputData[10] = inputData[10] + 1;\n    }\n  }\n  else if (inputData[4] == 0) {\n    undefinedPtr = (undefined *)inputData[10];\n    inputData[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*inputData + 4);\n  }\n  else {\n    bytePtr = (byte *)inputData[10];\n    inputData[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*inputData + 4) & 0x7f;\n  }\n  remainingCount = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = remainingCount;\n  if (remainingCount != 0) {\n    return 0;\n  }\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xffffffdf;\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xfffffeff;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  execute_function_080055e0();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "inputData",
                "pbVar1": "bytePtr",
                "sVar2": "remainingCount",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_flag_data_080046b8",
            "code": "\nvoid process_flag_data_080046b8(uint **data)\n\n{\n  int returnValue;\n  uint value2;\n  uint *ptr;\n  uint flag1;\n  uint flag2;\n  \n  ptr = *data;\n  flag2 = *ptr;\n  value2 = ptr[3];\n  if ((((flag2 & 0xf) == 0) && ((flag2 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    process_data_08004618(data);\n    return;\n  }\n  if (((flag2 & 0xf) == 0) || ((flag1 = ptr[5] & 1, flag1 == 0 && ((value2 & 0x120) == 0)))) {\n    if (((flag2 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      process_binary_data_08004198(data);\n      return;\n    }\n    if (((flag2 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      set_flag_and_process_data_080045fe(data);\n    }\n  }\n  else {\n    if (((flag2 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((flag2 & 4) != 0) && (flag1 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((flag2 & 2) != 0) && (flag1 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((flag2 & 8) != 0) && (flag1 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((flag2 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        process_data_08004618(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08005650(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      update_flags_and_values_0800417c(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08005650(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_08005650(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_080047d8_1;\n      returnValue = initialize_flags_0800258c(data[0xd]);\n      if (returnValue != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_flag_data_080046b8",
                "param_1": "data",
                "iVar1": "returnValue",
                "uVar2": "value2",
                "puVar3": "ptr",
                "uVar4": "flag1",
                "uVar5": "flag2"
            },
            "calling": [],
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "input"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "get_bit_value_080047f4",
            "code": "\nuint get_bit_value_080047f4(uint data,int base_address)\n\n{\n  return *(uint *)(base_address + ((data << 0x18) >> 0x1c) * 4) >> (data & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "get_bit_value_080047f4",
                "param_1": "data",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_0800480a",
            "code": "\nvoid setBit_0800480a(uint bitPosition,int arrayAddress)\n\n{\n  uint shiftedBitPosition;\n  \n  shiftedBitPosition = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedBitPosition * 4) = *(uint *)(arrayAddress + shiftedBitPosition * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_0800480a",
                "param_1": "bitPosition",
                "param_2": "arrayAddress",
                "uVar1": "shiftedBitPosition"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_bit_08004828",
            "code": "\nvoid updateBit_08004828(uint bit,int array)\n\n{\n  uint index;\n  \n  index = (bit << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (bit & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "bit",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_memory_address_08004848",
            "code": "\nundefined4 getMemoryAddress_08004848(undefined4 switchCase)\n\n{\n  switch(switchCase) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "switchCase"
            },
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_memory_access_permissions_08004884",
            "code": "\n\n\nundefined4 setMemoryAccessPermissions_08004884(undefined4 accessLevel)\n\n{\n  undefined4 address;\n  \n  switch(accessLevel) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    address = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    address = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    address = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    address = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    address = 0x40011800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_memory_access_permissions_08004884",
                "param_1": "accessLevel",
                "uVar1": "address"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "find_value_index_0800492c",
            "code": "\nuint findValueIndex_0800492c(undefined4 value,undefined4 notUsed,undefined4 start,undefined4 end)\n\n{\n  int index;\n  uint shiftedIndex;\n  \n  index = find_value_index_or_return_minus_one_08004cce(value,&DAT_08007400,start,end,end);\n  shiftedIndex = (uint)(index << 0xc) >> 0x1b;\n  if (0x10 < shiftedIndex - 1) {\n    shiftedIndex = 0;\n  }\n  return shiftedIndex;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "find_value_index_0800492c",
                "param_1": "value",
                "param_2": "notUsed",
                "param_3": "start",
                "param_4": "end",
                "iVar1": "index",
                "uVar2": "shiftedIndex"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "find_value_index_or_return_08004948",
            "code": "\nundefined4 find_value_index_or_return_08004948(undefined4 input_value,undefined4 param_2,undefined4 array_data,undefined4 param_4)\n\n{\n  int index_value;\n  uint shifted_value;\n  \n  index_value = find_value_index_or_return_08004948_minus_one_08004cce(input_value,&DAT_080074b4,array_data,param_4,param_4);\n  shifted_value = (uint)(index_value << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "find_value_index_or_return_08004948",
                "param_1": "input_value",
                "param_3": "array_data",
                "iVar1": "index_value",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "update_memory_access_permissions_08004974",
            "code": "\n\n\nvoid update_memory_access_permissions_08004974(int *input_data,undefined4 permission)\n\n{\n  undefined4 result;\n  uint updated_permission;\n  int input_value;\n  uint bitmask;\n  undefined4 num_iterations;\n  undefined4 counter;\n  \n  input_value = *input_data;\n  if (input_value == 0x40012400) {\n    updated_permission = _DAT_40021018 | 0x200;\n    input_value = 0x200;\n    _DAT_40021018 = updated_permission;\n  }\n  else {\n    updated_permission = 0x40012800;\n    if (input_value == 0x40012800) {\n      updated_permission = _DAT_40021018 | 0x400;\n      input_value = 0x400;\n      _DAT_40021018 = updated_permission;\n    }\n  }\n  result = set_memory_access_permissions_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,permission,updated_permission,input_value);\n  bitmask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  num_iterations = 3;\n  counter = 0;\n  update_register_flags_08002624(result,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "update_memory_access_permissions_08004974",
                "param_1": "input_data",
                "param_2": "permission",
                "uVar1": "result",
                "uVar2": "updated_permission",
                "iVar3": "input_value",
                "local_18": "bitmask",
                "local_14": "num_iterations",
                "local_10": "counter"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_memory_protection_080049f0",
            "code": "\n\n\nvoid updateMemoryProtection_080049f0(int *memoryAddress)\n\n{\n  if (*memoryAddress != 0x40012400) {\n    if (*memoryAddress == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_memory_protection_080049f0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "process_data_08004a4c",
            "code": "\nundefined2 process_data_08004a4c(undefined4 input_data)\n\n{\n  int result_1;\n  uint offset_value;\n  undefined2 output_result;\n  uint value_index;\n  undefined4 config_flag;\n  undefined4 config_value;\n  int memory_address;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  undefined4 temp_7;\n  undefined4 temp_8;\n  \n  fill_memory_080061e0(&memory_address,0,0x30);\n  value_index = 0;\n  config_flag = 0;\n  config_value = 0;\n  output_result = 0;\n  memory_address = check_and_find_value_08004c78(input_data,&DAT_08007400);\n  if (memory_address == 0) {\n    output_result = 0;\n  }\n  else {\n    temp_1 = 0;\n    temp_2 = 0;\n    temp_3 = 0;\n    temp_5 = 0;\n    temp_7 = 0xe0000;\n    temp_8 = 0;\n    temp_4 = 1;\n    temp_6 = 0;\n    DAT_20000080 = (undefined)input_data;\n    result_1 = update_memory_permissions_0800213c(&memory_address);\n    if (result_1 == 0) {\n      value_index = find_value_index_0800492c(input_data);\n      if (value_index < 0x12) {\n        config_flag = 1;\n        config_value = 2;\n        result_1 = update_configuration_08001e48(&memory_address,&value_index);\n        if (result_1 == 0) {\n          result_1 = perform_data_processing_08002384(&memory_address);\n          if (result_1 == 0) {\n            result_1 = initialize_and_configure_08002004(&memory_address);\n            if (result_1 == 0) {\n              result_1 = validate_data_08001cd0(&memory_address,10);\n              if (result_1 == 0) {\n                offset_value = get_offset_value_08001f80(&memory_address);\n                if ((offset_value & 0x200) != 0) {\n                  output_result = get_memory_value_08001e40(&memory_address);\n                }\n                result_1 = update_flags_08002348(&memory_address);\n                if (result_1 == 0) {\n                  result_1 = update_memory_protection_0800224c(&memory_address);\n                  if (result_1 != 0) {\n                    output_result = 0;\n                  }\n                }\n                else {\n                  output_result = 0;\n                }\n              }\n              else {\n                output_result = 0;\n              }\n            }\n            else {\n              output_result = 0;\n            }\n          }\n          else {\n            output_result = 0;\n          }\n        }\n        else {\n          output_result = 0;\n        }\n      }\n      else {\n        output_result = 0;\n      }\n    }\n    else {\n      output_result = 0;\n    }\n  }\n  return output_result;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "process_data_08004a4c",
                "param_1": "input_data",
                "local_46": "output_result",
                "local_44": "value_index",
                "local_40": "config_flag",
                "local_3c": "config_value",
                "local_38": "memory_address",
                "local_34": "temp_1",
                "local_30": "temp_2",
                "local_2c": "temp_3",
                "local_28": "temp_4",
                "local_24": "temp_5",
                "local_20": "temp_6",
                "local_1c": "temp_7",
                "local_10": "temp_8",
                "iVar1": "result_1",
                "uVar2": "offset_value"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "update_memory_permissions_08004b34",
            "code": "\nvoid update_memory_permissions_08004b34(void)\n\n{\n  update_memory_permissions_08004b34_08004d90();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "update_memory_permissions_08004b34"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "check_and_update_memory_08004b3c",
            "code": "\nvoid check_and_update_memory_08004b3c(undefined4 input_value)\n\n{\n  int value_index;\n  uint value_index_flags;\n  int value_array [17];\n  \n  value_array[0] = check_and_find_value_08004c78(input_value,&DAT_080074b4);\n  if ((value_array[0] != 0) &&\n     ((((value_index = find_value_index_or_return_08004948(input_value), value_index == 0 || (value_index == 4)) || (value_index == 8)) ||\n      ((value_index == 0xc || (value_index == 0x18)))))) {\n    value_index_flags = find_value_index_or_return_minus_one_08004cce(input_value,&DAT_080074b4);\n    if ((value_index_flags & 0x100000) == 0) {\n      update_bitwise_value_and_clear_flags_080040b0(value_array,value_index);\n    }\n    else {\n      clear_bits_if_conditions_met_0800412c(value_array,value_index);\n    }\n    update_and_reset_memory_permissions_08003ed8(value_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "check_and_update_memory_08004b3c",
                "param_1": "input_value",
                "iVar1": "value_index",
                "uVar2": "value_index_flags",
                "local_50": "value_array"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "initialize_data_08004b94",
            "code": "\nvoid initialize_data_08004b94(void)\n\n{\n  fetch_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "initialize_data_08004b94",
                "get_data_08001cc4": "fetch_data"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "execute_main_function_08004b9e",
            "code": "\nvoid execute_main_function_08004b9e(void)\n\n{\n  addBinaryNumbers();\n  executeSetup();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "execute_main_function_08004b9e",
                "add_binary_numbers_08001cac": "addBinaryNumbers",
                "execute_setup_function_08002582": "executeSetup"
            },
            "calling": [],
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_memory_access_08004bb0",
            "code": "\n\n\nvoid initializeMemoryAccess_08004bb0(uint inputParam,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 accessPermissions;\n  uint bitmask;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  accessPermissions = set_memory_access_permissions_08004884((inputParam << 0x18) >> 0x1c);\n  bitmask = 1 << (inputParam & 0xf) & 0xffff;\n  localVar3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((inputParam - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((inputParam == 0xf) || (inputParam == 0x13)) || (inputParam == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localVar1 = param2;\n  localVar2 = param3;\n  update_register_flags_08002624(accessPermissions,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_memory_access_08004bb0",
                "param_1": "inputParam",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "accessPermissions",
                "local_20": "bitmask",
                "local_1c": "localVar1",
                "local_18": "localVar2",
                "local_14": "localVar3"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_param_value_08004c30",
            "code": "\nvoid setParamValue_08004c30(undefined4 param1,undefined2 param2,int param3,undefined4 param4)\n\n{\n  if (param3 == 0) {\n    set_param_value_0800281e(param1,param2,0,param4,param4);\n    return;\n  }\n  set_param_value_0800281e(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_param_value_08004c30",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "check_bit_and_return_08004c48",
            "code": "\nvoid check_bit_and_return_08004c48(undefined4 input_data,undefined2 input_value,undefined4 memory_address_1,undefined4 memory_address_2)\n\n{\n  check_bit_08002810(input_data,input_value,memory_address_1,memory_address_2,memory_address_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "check_bit_and_return_08004c48",
                "param_1": "input_data",
                "param_2": "input_value",
                "param_3": "memory_address_1",
                "param_4": "memory_address_2"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_device_and_system_08004c52",
            "code": "\nvoid initialize_device_and_system_08004c52(void)\n\n{\n  initialize_device();\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_device_and_system_08004c52",
                "initialize_device_08001c88": "initialize_device",
                "initialize_system_08001b48": "initialize_system"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_in_sequence_08004c5e",
            "code": "\nundefined4 find_value_in_sequence_08004c5e(int value,char *sequence)\n\n{\n  while( true ) {\n    if (*sequence == -1) {\n      return 0;\n    }\n    if (*sequence == value) break;\n    sequence = sequence + 0xc;\n  }\n  return *(undefined4 *)(sequence + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_in_sequence_08004c5e",
                "param_1": "value",
                "param_2": "sequence"
            },
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "check_and_find_value_08004c78",
            "code": "\nundefined4 checkAndFindValue_08004c78(int inputValue)\n\n{\n  undefined4 foundValue;\n  \n  if (inputValue != -1) {\n    foundValue = find_value_in_sequence_08004c5e();\n    return foundValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "check_and_find_value_08004c78",
                "param_1": "inputValue",
                "uVar1": "foundValue"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_index_08004c8a",
            "code": "\nint find_value_index_08004c8a(int value,char *values_list)\n\n{\n  while( true ) {\n    if (*(int *)(values_list + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(values_list + 4) == value) break;\n    values_list = values_list + 0xc;\n  }\n  return (int)*values_list;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_index_08004c8a",
                "param_1": "value",
                "param_2": "values_list"
            },
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_value_index_08004ca2",
            "code": "\nundefined4 find_value_index_08004ca2(int input_parameter)\n\n{\n  undefined4 value_index;\n  \n  if (input_parameter != 0) {\n    value_index = find_value_index_08004ca2_08004c8a();\n    return value_index;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_value_index_08004ca2",
                "param_1": "input_parameter",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_index_08004cb2",
            "code": "\nundefined4 find_value_index_08004cb2(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_index_08004cb2",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_value_index_or_return_minus_one_08004cce",
            "code": "\nundefined4 find_value_index_or_return_minus_one_08004cce(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  value_index = find_value_index_08004cb2();\n  return value_index;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_value_index_or_return_minus_one_08004cce",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "find_integer_in_array_08004ce2",
            "code": "\nundefined4 find_integer_in_array_08004ce2(int integer,char *array)\n\n{\n  if (integer == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (integer == *array) break;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "find_integer_in_array_08004ce2",
                "param_1": "integer",
                "param_2": "array"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_if_equal_08004d06",
            "code": "\nint compare_and_return_if_equal_08004d06(int result,int value1_or_value2)\n\n{\n  if (result != value1_or_value2) {\n    if (result == 0) {\n      return value1_or_value2;\n    }\n    if (value1_or_value2 == 0) {\n      return result;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_if_equal_08004d06",
                "param_1": "result",
                "param_2": "value1_or_value2"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_call_back_function_08004d18",
            "code": "\nvoid executeCallBackFunction_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_call_back_function_08004d18"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "infinite_loop_08004d40",
            "code": "\nvoid infiniteLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_peripheral_registers_08004d44",
            "code": "\n\n\nvoid initializePeripheralRegisters_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_peripheral_registers_08004d44"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_memory_permissions_08004d90",
            "code": "\n\n\nvoid updateMemoryPermissions_08004d90(int *address)\n\n{\n  if (*address == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*address == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*address == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*address == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_memory_permissions_08004d90",
                "param_1": "address"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtractFour_08004df4(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_callback_if_condition_met_08004df8",
            "code": "\nvoid executeCallbackIfConditionMet_08004df8(int callbackData)\n\n{\n  int funcPointer;\n  \n  funcPointer = getFunctionPointer();\n  if ((*(code **)(funcPointer + 0x4c) != (code *)0x0) && (*(char *)(callbackData + 0x1c) == '\\x01')) {\n    (**(code **)(funcPointer + 0x4c))(funcPointer,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_callback_if_condition_met_08004df8",
                "param_1": "callbackData",
                "iVar1": "funcPointer",
                "subtract_four_08004df4": "getFunctionPointer"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_callback_08004e12",
            "code": "\nvoid executeCallback_08004e12(void)\n\n{\n  int result;\n  \n  result = getCallback();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_callback_08004e12",
                "iVar1": "result",
                "subtract_four_08004df4": "getCallback"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "check_and_process_conditions_08004e20",
            "code": "\nvoid check_and_process_conditions_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    process_conditions();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "check_and_process_conditions_08004e20",
                "process_conditions_08003f18": "process_conditions"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtractFour_08004e70(int num)\n\n{\n  return num + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "num"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "validate_and_configure_08004e74",
            "code": "\nvoid validate_and_configure_08004e74(int input_param,int flag_param,int comparison_param,undefined4 config_param)\n\n{\n  int temp_var1;\n  \n  temp_var1 = subtract_four_08004e70();\n  if (comparison_param == *(int *)(input_param + 0xc)) {\n    if (flag_param == 0) {\n      *(undefined *)(temp_var1 + 0x88) = 0;\n      *(undefined *)(temp_var1 + 0x5c) = 0;\n      if (*(code **)(temp_var1 + 100) != (code *)0x0) {\n        (**(code **)(temp_var1 + 100))();\n      }\n      validate_and_configure_08004e74_08002af8(input_param,temp_var1 + 0x68,*(undefined *)(temp_var1 + 0x88),8);\n      return;\n    }\n    *(undefined *)(temp_var1 + 0x5c) = 1;\n    validate_and_initialize_08002b84(input_param,temp_var1 + 0x68,0x20,8,config_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "validate_and_configure_08004e74",
                "param_1": "input_param",
                "param_2": "flag_param",
                "param_3": "comparison_param",
                "param_4": "config_param",
                "iVar1": "temp_var1"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "execute_function_with_conditions_08004ec4",
            "code": "\nvoid executeFunctionWithConditions_08004ec4(undefined4 inputParam)\n\n{\n  int subtractResult;\n  \n  subtractResult = subtractFour();\n  if (((*(code **)(subtractResult + 0x60) != (code *)0x0) && (*(char *)(subtractResult + 0x5c) == '\\x01')) &&\n     (*(char *)(subtractResult + 0x2c) != ' ')) {\n    (**(code **)(subtractResult + 0x60))(subtractResult + 0x68);\n  }\n  setFlagsAndValues(inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "execute_function_with_conditions_08004ec4",
                "param_1": "inputParam",
                "iVar1": "subtractResult",
                "subtract_four_08004e70": "subtractFour",
                "set_flags_and_values_08002c10": "setFlagsAndValues"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "check_and_set_flags_08004ef4",
            "code": "\nvoid checkAndSetFlags_08004ef4(undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four_08004e70();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    set_flags_and_values_08002c10(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "check_and_set_flags_08004ef4",
                "param_1": "param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "configure_uart_pins_08004f4c",
            "code": "\n\n\nvoid configure_uart_pins_08004f4c(int *uart_pins)\n\n{\n  int pin_value_1;\n  int pin_value_2;\n  undefined4 permissions_1;\n  uint index;\n  uint pin_mask;\n  uint config_value;\n  uint shifted_value;\n  undefined4 num_flags;\n  \n  if (uart_pins != (int *)0x0) {\n    pin_value_1 = check_and_find_value_08004c78((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n    pin_value_2 = check_and_find_value_08004c78((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n    if ((pin_value_2 == 0) || (pin_value_1 == 0)) {\n      handle_error(\"ERROR: at least one UART pin has no peripheral\\n\",pin_value_2);\n    }\n    else {\n      pin_value_1 = compare_uart_pins(pin_value_1);\n      *uart_pins = pin_value_1;\n      if (pin_value_1 == 0) {\n        handle_error(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (pin_value_1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (pin_value_1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (pin_value_1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        permissions_1 = set_memory_permissions((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        index = find_value_index((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n        pin_mask = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        config_value = (index >> 3 & 1) << 4 | index & 7;\n        shifted_value = (index << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((index << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        num_flags = 3;\n        update_flags(permissions_1,&pin_mask);\n        permissions_1 = set_memory_permissions((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        index = find_value_index((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n        pin_mask = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        config_value = (index >> 3 & 1) << 4 | index & 7;\n        shifted_value = (index << 0x1a) >> 0x1e;\n        update_flags(permissions_1,&pin_mask);\n        (&DAT_2000032c)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        update_values(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "param_1": "uart_pins",
                "iVar1": "pin_value_1",
                "iVar2": "pin_value_2",
                "uVar3": "permissions_1",
                "uVar4": "index",
                "local_20": "pin_mask",
                "local_1c": "config_value",
                "local_18": "shifted_value",
                "local_14": "num_flags",
                "initialize_and_process_data_080068f0": "handle_error",
                "compare_and_return_if_equal_08004d06": "compare_uart_pins",
                "set_memory_access_permissions_08004884": "set_memory_permissions",
                "find_value_index_or_return_minus_one_08004cce": "find_value_index",
                "update_register_flags_08002624": "update_flags",
                "update_values_0800441a": "update_values"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initializeUART_08005384(void)\n\n{\n  int checkResult;\n  undefined4 secondResult;\n  \n  checkResult = check_and_find_value_08004c78(2,&DAT_0800764c);\n  if (checkResult != 0) {\n    secondResult = check_and_find_value_08004c78(2,&DAT_0800764c);\n    DAT_200000e1 = find_value_index_08004ca2(secondResult,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    configure_uart_pins_08004f4c(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "checkResult",
                "uVar2": "secondResult"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_and_check_data_080053d4",
            "code": "\nuint process_and_check_data_080053d4(undefined4 param_ptr,uint data)\n\n{\n  int data_1;\n  int data_2;\n  uint counter;\n  \n  data_1 = get_data();\n  data_2 = check_and_find_value(2,&DAT_0800764c);\n  if (data_2 == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 5 &&\n      (((&DAT_2000032c)[counter] == 0 ||\n       (data_2 = check_and_find_value(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[counter] != data_2))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (4 < counter) {\n    if ((4 < DAT_200000cc) && (initialize_uart(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    counter = (uint)DAT_200000cc;\n  }\n  do {\n    data_2 = process_data((&DAT_2000032c)[counter],param_ptr,data & 0xffff,1000);\n    if (data_2 == 0) {\n      return data;\n    }\n    data_2 = get_data();\n  } while ((uint)(data_2 - data_1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_and_check_data_080053d4",
                "param_1": "param_ptr",
                "param_2": "data",
                "iVar1": "data_1",
                "iVar2": "data_2",
                "uVar3": "counter",
                "initialize_uart_08005384": "initialize_uart",
                "process_data_08004478": "process_data",
                "get_data_08001cc4": "get_data",
                "check_and_find_value_08004c78": "check_and_find_value"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "check_byte_combination_0800548c",
            "code": "\nbool checkByteCombination_0800548c(int inputValue)\n\n{\n  uint byteCombination;\n  \n  byteCombination = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(inputValue + 0x44)]);\n  return (byteCombination & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "check_byte_combination_0800548c",
                "param_1": "inputValue",
                "uVar1": "byteCombination"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "is_combination_valid_080054b0",
            "code": "\nbool isCombinationValid_080054b0(int input)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(input + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "is_combination_valid_080054b0",
                "param_1": "input",
                "uVar1": "combinedBytes"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "extract_byte_combination_080054d4",
            "code": "\nundefined4 extractByteCombination_080054d4(int inputPtr,undefined *outputPtr,undefined4 sizeOfOutput,undefined4 inputSize)\n\n{\n  int byteCombinationCheck;\n  \n  if (inputPtr == 0) {\n    return 0xffffffff;\n  }\n  byteCombinationCheck = checkByteCombination();\n  if (byteCombinationCheck == 0) {\n    *outputPtr = *(undefined *)(inputPtr + 0x45);\n    checkInputs((&DAT_2000032c)[*(byte *)(inputPtr + 0x44)],inputPtr + 0x45,1,&DAT_2000032c,inputSize);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "extract_byte_combination_080054d4",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "param_3": "sizeOfOutput",
                "param_4": "inputSize",
                "iVar1": "byteCombinationCheck",
                "check_byte_combination_0800548c": "checkByteCombination",
                "check_inputs_080045a2": "checkInputs"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "process_data_08005510",
            "code": "\nvoid processData_08005510(int dataPtr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  uint index;\n  \n  if (dataPtr != 0) {\n    result = checkByteCombination();\n    if (result == 0) {\n      index = (uint)*(byte *)(dataPtr + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = value1;\n      *(int *)(&DAT_200002f0 + index * 4) = dataPtr;\n      convertAndStoreBits((int)*(char *)(dataPtr + 0x5a),0,1,index,value3);\n      setBitAtIndex((int)*(char *)(dataPtr + 0x5a));\n      checkInputs((&DAT_2000032c)[*(byte *)(dataPtr + 0x44)],dataPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "process_data_08005510",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result",
                "uVar2": "index",
                "check_byte_combination_0800548c": "checkByteCombination",
                "convert_and_store_bits_08002494": "convertAndStoreBits",
                "set_bit_at_index_080024f8": "setBitAtIndex",
                "check_inputs_080045a2": "checkInputs"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "update_param_data_and_bits_08005568",
            "code": "\nvoid updateParamDataAndBits_08005568(int paramPtr,undefined4 paramValue)\n\n{\n  byte byteValue;\n  \n  if (paramPtr != 0) {\n    byteValue = *(byte *)(paramPtr + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byteValue * 4) = paramValue;\n    *(int *)(&DAT_20000318 + (uint)byteValue * 4) = paramPtr;\n    convertAndStoreBits((int)*(char *)(paramPtr + 0x5a),0,2);\n    setBitAtIndex((int)*(char *)(paramPtr + 0x5a));\n    updateData((&DAT_2000032c)[*(byte *)(paramPtr + 0x44)],\n                 *(int *)(paramPtr + 100) + (uint)*(ushort *)(paramPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "update_param_data_and_bits_08005568",
                "param_1": "paramPtr",
                "param_2": "paramValue",
                "bVar1": "byteValue",
                "convert_and_store_bits_08002494": "convertAndStoreBits",
                "set_bit_at_index_080024f8": "setBitAtIndex",
                "update_data_0800455a": "updateData"
            },
            "calling": [],
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_index_080055bc",
            "code": "\nuint find_index_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_function_080055e0",
            "code": "\nvoid execute_function_080055e0(void)\n\n{\n  uint index;\n  \n  index = find_index();\n  if (index < 5) {\n    (**(code **)(&DAT_200002dc + index * 4))(*(undefined4 *)(&DAT_200002f0 + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_function_080055e0",
                "uVar1": "index",
                "find_index_080055bc": "find_index"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "process_data_08005604",
            "code": "\nvoid processData_08005604(void)\n\n{\n  uint index;\n  int result;\n  int dataPtr;\n  \n  index = find_index_080055bc();\n  dataPtr = *(int *)(&DAT_20000318 + index * 4);\n  if ((index < 5) && (result = (**(code **)(&DAT_20000304 + index * 4))(dataPtr), result != -1)) {\n    update_data_0800455a((&DAT_2000032c)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 100) + (uint)*(ushort *)(dataPtr + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "process_data_08005604",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "dataPtr"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocateMemory_080056d8(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocatedMemory = DAT_20000340;\n  if (DAT_20000340 + size <= maximumMemory) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocatedMemory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "maximumMemory"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "get_return_value_08005714",
            "code": "\nuint32_t getReturnValue_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "get_return_value_08005714",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "initialize_memory_0800571a",
            "code": "\nundefined4 initializeMemory_0800571a(undefined4 value,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "initialize_application_08005724",
            "code": "\nundefined4 initializeApplication_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "initialize_application_08005724"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_08005728",
            "code": "\nundefined4 initialize_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_08005728"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_0800572c",
            "code": "\nundefined4 initialize_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_0800572c"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "process_and_check_data_08005730",
            "code": "\nvoid process_and_check_data_08005730(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_and_check_data_08005730_080053d4(input_param_2,input_param_3,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "process_and_check_data_08005730",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_data_08005740",
            "code": "\nundefined4 initializeData_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_data_08005740"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "initialize_program_08005750",
            "code": "\nundefined4 initializeProgram_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "initialize_program_08005750"
            },
            "calling": [
                "thunk_FUN_08005750"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "process_value_08005754",
            "code": "\nuint process_value_08005754(uint value)\n\n{\n  bool is_less_than_0x3c;\n  char result;\n  uint processed_data;\n  \n  if (value < 0xe) {\n    if (value + 0x2e < 0x3c) {\n      is_less_than_0x3c = true;\n    }\n    else {\n      is_less_than_0x3c = false;\n    }\n  }\n  else {\n    is_less_than_0x3c = value < 0x3c;\n  }\n  if (is_less_than_0x3c) {\n    if (value < 0xe) {\n      value = value + 0x2e;\n    }\n    result = (&DAT_080076f0)[value];\n  }\n  else {\n    result = -1;\n  }\n  if (result == -1) {\n    processed_data = 0;\n  }\n  else {\n    processed_data = process_data_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return processed_data >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return processed_data << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return processed_data;\n}\n\n",
            "renaming": {
                "FUN_08005754": "process_value_08005754",
                "param_1": "value",
                "bVar1": "is_less_than_0x3c",
                "cVar2": "result",
                "uVar3": "processed_data"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "initialize_memory_access_080057b4",
            "code": "\nvoid initializeMemoryAccess_080057b4(uint index,undefined4 mode,undefined4 param3,undefined *param4)\n\n{\n  int bitValue;\n  undefined *dataPtr;\n  int dataIndex;\n  \n  if (index < 0x3c) {\n    dataIndex = (int)(char)(&DAT_080076f0)[index];\n    dataPtr = &DAT_080076f0;\n  }\n  else {\n    dataIndex = -1;\n    dataPtr = param4;\n  }\n  if (dataIndex != -1) {\n    bitValue = get_bit_value_080047f4(dataIndex,&DAT_20000344,param3,dataPtr,param4);\n    if (bitValue != 0) {\n      bitValue = find_integer_in_array_08004ce2(dataIndex,&DAT_080074b4);\n      if (bitValue != 0) {\n        check_and_update_memory_08004b3c(dataIndex);\n      }\n      update_bit_08004828(dataIndex,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      initialize_memory_access_08004bb0(dataIndex,0);\n      break;\n    case 1:\n      initialize_memory_access_08004bb0(dataIndex,1,0);\n      break;\n    case 2:\n      initialize_memory_access_08004bb0(dataIndex,0,1);\n      break;\n    case 3:\n      initialize_memory_access_08004bb0(dataIndex,0,2);\n    }\n    set_bit_0800480a(dataIndex,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "initialize_memory_access_080057b4",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "bitValue",
                "puVar2": "dataPtr",
                "iVar3": "dataIndex"
            },
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "process_parameter_08005848",
            "code": "\nvoid processParameter_08005848(uint inputIndex,undefined4 value1,undefined4 value2,undefined *dataPointer)\n\n{\n  int bitValue;\n  undefined4 memoryAddress;\n  undefined *bytePointer;\n  uint byteValue;\n  \n  if (inputIndex < 0x3c) {\n    byteValue = (uint)(char)(&DAT_080076f0)[inputIndex];\n    bytePointer = &DAT_080076f0;\n  }\n  else {\n    byteValue = 0xffffffff;\n    bytePointer = dataPointer;\n  }\n  if ((byteValue != 0xffffffff) &&\n     (bitValue = get_bit_value_080047f4(byteValue,&DAT_20000358,value2,bytePointer,dataPointer), bitValue != 0)) {\n    memoryAddress = get_memory_address_08004848((byteValue << 0x18) >> 0x1c);\n    set_param_value_08004c30(memoryAddress,1 << (byteValue & 0xf) & 0xffff,value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "process_parameter_08005848",
                "param_1": "inputIndex",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "dataPointer",
                "iVar1": "bitValue",
                "uVar2": "memoryAddress",
                "puVar3": "bytePointer",
                "uVar4": "byteValue"
            },
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_bit_and_return_result_08005890",
            "code": "\nchar check_bit_and_return_result_08005890(uint input_value)\n\n{\n  char result;\n  int bit_value;\n  undefined4 memory_address;\n  uint array_index;\n  \n  if (input_value < 0x3c) {\n    array_index = (uint)(char)(&DAT_080076f0)[input_value];\n  }\n  else {\n    array_index = 0xffffffff;\n  }\n  if (array_index == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bit_value = get_bit_value_080047f4(array_index,&DAT_20000358);\n    if (bit_value == 0) {\n      result = '\\0';\n    }\n    else {\n      memory_address = get_memory_address_08004848((array_index << 0x18) >> 0x1c);\n      result = check_bit_and_return_08004c48(memory_address,1 << (array_index & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_bit_and_return_result_08005890",
                "param_1": "input_value",
                "cVar1": "result",
                "iVar2": "bit_value",
                "uVar3": "memory_address",
                "uVar4": "array_index"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "initialize_data_080058e0",
            "code": "\nvoid initializeData_080058e0(void)\n\n{\n  initialize_data_08004b94();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "initialize_data_080058e0"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_offset_0800591e",
            "code": "\nushort calculate_offset_0800591e(int offset)\n\n{\n  return (*(short *)(offset + 0x134) + 0x40) - *(short *)(offset + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_offset_0800591e",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "update_data_0800598a",
            "code": "\nvoid updateData_0800598a(int dataAddress)\n\n{\n  int result;\n  ushort newOffset;\n  undefined extractedByte;\n  \n  result = extract_byte_combination_080054d4(dataAddress,&extractedByte);\n  if ((result == 0) &&\n     (newOffset = *(short *)(dataAddress + 0x60) + 1U & 0x3f, newOffset != *(ushort *)(dataAddress + 0x62))) {\n    *(undefined *)(*(int *)(dataAddress + 0x5c) + (uint)*(ushort *)(dataAddress + 0x60)) = extractedByte;\n    *(ushort *)(dataAddress + 0x60) = newOffset;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "param_1": "dataAddress",
                "iVar1": "result",
                "uVar2": "newOffset",
                "local_9": "extractedByte"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_data_08005a44",
            "code": "\nvoid initializeData_08005a44(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_data_08005a44",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "configure_serial_08005a68",
            "code": "\nvoid configureSerial_08005a68(int serialPort,undefined4 baudRate,byte mode)\n\n{\n  uint extraOutput;\n  char *errorMessage;\n  byte modeFlag;\n  int configurationFlag;\n  byte *dataPointer;\n  char tempChar;\n  int unaffiliatedVariable;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x140) = mode;\n  modeFlag = mode & 7;\n  if (modeFlag == 4) {\n    configurationFlag = 7;\n  }\n  else if (modeFlag == 6) {\n    configurationFlag = 8;\n  }\n  else if (modeFlag == 2) {\n    configurationFlag = 6;\n  }\n  else {\n    configurationFlag = 0;\n  }\n  if ((mode & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    configurationFlag = configurationFlag + 1;\n  }\n  else if ((mode & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    configurationFlag = configurationFlag + 1;\n  }\n  if ((mode & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (configurationFlag == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (configurationFlag == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    configurationFlag = 0;\n  }\n  if (configurationFlag != 0) {\n    configure_uart_pins_08004f4c(serialPort + 0xd4);\n    process_data_08005510(serialPort + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTable = (code *)0x8005b12;\n  assertion_failed_handler_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  dataPointer = *(byte **)(extraOutput + unaffiliatedVariable);\n  errorMessage[0x1e] = tempChar;\n  *(undefined *)(*dataPointer + 0x1e) = 0;\n  if (extraOutput < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[extraOutput];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "configure_serial_08005a68",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "mode",
                "extraout_r1": "extraOutput",
                "pcVar1": "errorMessage",
                "bVar2": "modeFlag",
                "iVar3": "configurationFlag",
                "pbVar4": "dataPointer",
                "unaff_r4": "tempChar",
                "unaff_r6": "unaffiliatedVariable",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "extract_value_and_update_08005b24",
            "code": "\nvoid extractValueAndUpdate_08005b24(int address,uint index)\n\n{\n  undefined value;\n  code *jumpTable;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = value;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "extract_value_and_update_08005b24",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "extract_data_08005b3c",
            "code": "\nvoid extractData_08005b3c(int baseAddress,uint index)\n\n{\n  undefined extractedValue;\n  \n  if (index < 0x3c) {\n    extractedValue = (&DAT_080076f0)[index];\n  }\n  else {\n    extractedValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = extractedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "extract_data_08005b3c",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "extractedValue"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_params_08005b54",
            "code": "\nundefined4 *\ninitialize_params_08005b54(undefined4 *output_array,undefined4 input_value,undefined4 helper_value_1,undefined4 helper_value_2)\n\n{\n  undefined value_index;\n  \n  output_array[1] = 0;\n  output_array[2] = 1000;\n  *output_array = &PTR_LAB_080059c8_1_08007804;\n  if (output_array == (undefined4 *)&DAT_2000036c) {\n    extract_and_update_value(&DAT_2000036c,0,helper_value_1,&DAT_2000036c,helper_value_2);\n    extract_data(&DAT_2000036c,1);\n  }\n  else {\n    value_index = find_value_index(input_value,&DAT_08007604);\n    *(undefined *)((int)output_array + 0x12d) = value_index;\n    value_index = find_value_index(input_value,&DAT_0800764c);\n    *(undefined *)(output_array + 0x4b) = value_index;\n  }\n  initialize_data(output_array);\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_params_08005b54",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "helper_value_1",
                "param_4": "helper_value_2",
                "uVar1": "value_index",
                "extract_value_and_update_08005b24": "extract_and_update_value",
                "extract_data_08005b3c": "extract_data",
                "find_value_index_08004ca2": "find_value_index",
                "initialize_data_08005a44": "initialize_data"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_if_params_equal_one_08005bb0",
            "code": "\nvoid initialize_if_params_equal_one_08005bb0(int is_param_one,int is_param_two,undefined4 parameter_three,undefined4 parameter_four)\n\n{\n  if (is_param_one != 1) {\n    return;\n  }\n  if (is_param_two == 0xffff) {\n    initialize_parameters(&DAT_2000036c,0x40004400,parameter_three,0xffff,parameter_four);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_if_params_equal_one_08005bb0",
                "param_1": "is_param_one",
                "param_2": "is_param_two",
                "param_3": "parameter_three",
                "param_4": "parameter_four",
                "initialize_params_08005b54": "initialize_parameters"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initializeData_08005c1c(undefined4 *outputArray,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *outputArray = &DAT_08007858;\n  *(undefined *)(outputArray + 1) = value1;\n  *(undefined *)((int)outputArray + 5) = value2;\n  *(undefined *)((int)outputArray + 6) = value3;\n  *(undefined *)((int)outputArray + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "outputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_data_if_condition_08005c38",
            "code": "\nvoid initialize_data_if_condition_08005c38(int input_value,int special_value)\n\n{\n  if ((input_value == 1) && (special_value == 0xffff)) {\n    initialize_data_08005c1c(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_data_if_condition_08005c38",
                "param_1": "input_value",
                "param_2": "special_value"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "process_string_08005c96",
            "code": "\nundefined4 process_string_08005c96(int *string_array,int string_length,undefined4 calculation_result,undefined4 additional_param)\n\n{\n  undefined4 end_index;\n  \n  if (string_length != 0) {\n    end_index = calculate_string_end_index_08000178(string_length);\n    end_index = (**(code **)(*string_array + 4))(string_array,string_length,end_index,*(code **)(*string_array + 4),additional_param);\n    return end_index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "process_string_08005c96",
                "param_1": "string_array",
                "param_2": "string_length",
                "param_3": "calculation_result",
                "param_4": "additional_param",
                "uVar1": "end_index"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_ptr)\n\n{\n  (**(code **)*function_ptr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_ptr"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_08005cc0",
            "code": "\nvoid execute_function_08005cc0(int *function_ptr,undefined4 unused_param,undefined4 unused_param_2,undefined4 function_param)\n\n{\n  (**(code **)(*function_ptr + 4))(function_ptr,&DAT_0800786c,2,*(code **)(*function_ptr + 4),function_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "function_ptr",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "function_param"
            },
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_total_08005cd4",
            "code": "\nint calculateTotal_08005cd4(undefined4 inputValue)\n\n{\n  int stringResult;\n  int functionResult;\n  \n  stringResult = process_string_08005c96();\n  functionResult = execute_function_08005cc0(inputValue);\n  return functionResult + stringResult;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_total_08005cd4",
                "param_1": "inputValue",
                "iVar1": "stringResult",
                "iVar2": "functionResult"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_base_08005ce8",
            "code": "\nundefined4 convertBase_08005ce8(int *array,uint number,uint base)\n\n{\n  char convertedDigit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *currentDigit;\n  char convertedNumber [9];\n  \n  convertedNumber[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  currentDigit = convertedNumber + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    currentDigit = currentDigit + -1;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *currentDigit = convertedDigit;\n    number = quotient;\n  } while (quotient != 0);\n  if (currentDigit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = calculate_string_end_index_08000178(currentDigit);\n    result = (**(code **)(*array + 4))(array,currentDigit,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "array",
                "param_2": "number",
                "param_3": "base",
                "cVar1": "convertedDigit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "currentDigit",
                "local_15": "convertedNumber"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "convert_base_or_execute_08005d42",
            "code": "\nint convert_base_or_execute_08005d42(undefined4 *param_1,uint input_value,uint base)\n\n{\n  int result;\n  int negative_val;\n  \n  if (base == 0) {\n    result = (**(code **)*param_1)(param_1,input_value & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_base_08005ce8(param_1,input_value,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)input_value) {\n    result = convert_base_08005ce8(param_1,input_value,10);\n    return result;\n  }\n  result = execute_function_08005cb6(param_1,0x2d);\n  negative_val = convert_base_08005ce8(param_1,-input_value,10);\n  return negative_val + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "convert_base_or_execute_08005d42",
                "param_2": "input_value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_val"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "execute_convert_base_08005d82",
            "code": "\nvoid execute_convert_base_08005d82(void)\n\n{\n  convert_base_or_execute();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "execute_convert_base_08005d82",
                "convert_base_or_execute_08005d42": "convert_base_or_execute"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "convert_or_call_function_08005d8a",
            "code": "\nvoid convertOrCallFunction_08005d8a(undefined4 *data,uint size,uint flag,undefined4 extraData)\n\n{\n  if (flag != 0) {\n    convertToBase(data,size,flag & 0xff);\n    return;\n  }\n  (**(code **)*data)(data,size & 0xff,0,*(code **)*data,extraData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "convert_or_call_function_08005d8a",
                "param_1": "data",
                "param_2": "size",
                "param_3": "flag",
                "param_4": "extraData",
                "convert_base_08005ce8": "convertToBase"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "process_parameters_08005da8",
            "code": "\nint process_parameters_08005da8(undefined4 param1,undefined4 param2,undefined4 param3,uint param4,byte param5)\n\n{\n  int result;\n  undefined4 tempValue;\n  int tempResult;\n  byte index;\n  undefined8 floatValue;\n  undefined8 shiftedValue;\n  \n  result = check_parameters_08000a2c(param3,param4,param3,param4);\n  if (result == 0) {\n    result = check_parameters_08000a2c(param3,param4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = check_parameter_conditions_080009f0(param3,param4 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = process_string_08005c96(param1,&DAT_08007860);\n    }\n    else {\n      result = check_if_parameter_contains_null_byte_08000a18(param3,param4,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = is_null_terminator_080009dc(param3,param4,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = is_null_terminator_080009dc(param3,param4,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function_08005cb6(param1,0x2d);\n            param4 = param4 + 0x80000000;\n          }\n          floatValue = 0x3fe0000000000000;\n          for (index = 0; tempValue = (undefined4)((ulonglong)floatValue >> 0x20), index < param5;\n              index = index + 1) {\n            floatValue = calculate_floating_point_0800074c((int)floatValue,tempValue,0,0x40240000);\n          }\n          floatValue = calculate_multipliers_08000194(param3,param4,(int)floatValue,tempValue);\n          tempValue = calculate_shifted_value_08000aa8();\n          shiftedValue = bit_shift_and_concat_0800040c();\n          floatValue = calculate_value_08000190((int)floatValue,(int)((ulonglong)floatValue >> 0x20),(int)shiftedValue,\n                               (int)((ulonglong)shiftedValue >> 0x20));\n          tempResult = convert_or_call_function_08005d8a(param1,tempValue,10);\n          result = result + tempResult;\n          if (param5 != 0) {\n            tempResult = process_string_08005c96(param1,&DAT_08007868);\n            result = result + tempResult;\n          }\n          while (param5 != 0) {\n            floatValue = calculate_sign_and_exponent_080004f8((int)floatValue,(int)((ulonglong)floatValue >> 0x20),0,0x40240000);\n            tempValue = convert_signed_unsigned_08000a58();\n            tempResult = execute_convert_base_08005d82(param1,tempValue,10);\n            result = result + tempResult;\n            shiftedValue = bitwise_shift_and_concat_0800042c(tempValue);\n            floatValue = calculate_value_08000190((int)floatValue,(int)((ulonglong)floatValue >> 0x20),(int)shiftedValue,\n                                 (int)((ulonglong)shiftedValue >> 0x20));\n            param5 = param5 - 1;\n          }\n        }\n        else {\n          result = process_string_08005c96(param1,&DAT_08007864);\n        }\n      }\n      else {\n        result = process_string_08005c96(param1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = process_string_08005c96(param1,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "process_parameters_08005da8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "result",
                "uVar2": "tempValue",
                "iVar3": "tempResult",
                "bVar4": "index",
                "uVar5": "floatValue",
                "uVar6": "shiftedValue"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "initialize_parameters_08005f2c",
            "code": "\nvoid initialize_parameters_08005f2c(void)\n\n{\n  process_parameters();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "initialize_parameters_08005f2c",
                "process_parameters_08005da8": "process_parameters"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_sum_08005f40",
            "code": "\nint calculateSum_08005f40(undefined4 input)\n\n{\n  int param1Result;\n  int functionResult;\n  \n  param1Result = initialize_parameters_08005f2c();\n  functionResult = execute_function_08005cc0(input);\n  return functionResult + param1Result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_sum_08005f40",
                "param_1": "input",
                "iVar1": "param1Result",
                "iVar2": "functionResult"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_device_and_system_08005f5e",
            "code": "\nvoid initialize_device_and_system_08005f5e(void)\n\n{\n  update_data_register(3);\n  initialize_device_and_system_08005f5e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_device_and_system_08005f5e",
                "update_data_register_08002470": "update_data_register",
                "initialize_device_and_system_08001c32": "initialize_device_and_system"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "continuous_data_processing_08005f6c",
            "code": "\nvoid continuous_data_processing_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  initialize_oven();\n  do {\n    process_data();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "continuous_data_processing_08005f6c",
                "initialize_oven_08000bcc": "initialize_oven",
                "process_data_08000cd0": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar countSetBits_08005f8c(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_data_08005fc8",
            "code": "\nvoid initializeData_08005fc8(int condition,int value,undefined4 unrelated1,undefined4 unrelated2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    shiftLeftBy32(0,&LAB_08005fa0_1,&DAT_20000000,&DAT_200004b8,unrelated2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "unrelated1",
                "param_4": "unrelated2",
                "shift_left_by_32_08006112": "shiftLeftBy32"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "check_and_initialize_080060d4",
            "code": "\nvoid checkAndInitialize_080060d4(int input)\n\n{\n  int bitCount;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  initializeFlags();\n  bitCount = countSetBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    checkAndInitialize_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "check_and_initialize_080060d4",
                "param_1": "input",
                "iVar1": "bitCount",
                "initialize_flags_08007090": "initializeFlags",
                "count_set_bits_08005f8c": "countSetBits"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "initialize_if_bits_are_set_080060e4",
            "code": "\nvoid initializeIfBitsAreSet_080060e4(void)\n\n{\n  int bitCount;\n  \n  bitCount = countSetBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    checkAndInitialize();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "initialize_if_bits_are_set_080060e4",
                "iVar1": "bitCount",
                "count_set_bits_08005f8c": "countSetBits",
                "check_and_initialize_080060d4": "checkAndInitialize"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "shift_left_by_32_08006112",
            "code": "\nvoid shift_left_by_32_08006112(undefined4 input_value,undefined4 shift_amount)\n\n{\n  shift_left_by32_08006158(shift_amount,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "shift_left_by_32_08006112",
                "param_1": "input_value",
                "param_2": "shift_amount"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "assertion_failed_handler_0800611c",
            "code": "\nvoid assertionFailedHandler_0800611c(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 dataOffset;\n  char *messagePrefix;\n  undefined8 result;\n  undefined4 modifier;\n  \n  dataOffset = *(undefined4 *)(DAT_200000f8 + 0xc);\n  modifier = function;\n  if (assertion == (char *)0x0) goto LAB_08006140;\n  messagePrefix = \", function: \";\n  do {\n    process_and_send_data_08006174(dataOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,messagePrefix,assertion,modifier);\n    result = execute_function_08006ac0();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    dataOffset = (undefined4)result;\nLAB_08006140:\n    assertion = \"\";\n    messagePrefix = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "assertion_failed_handler_0800611c",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "dataOffset",
                "pcVar2": "messagePrefix",
                "uVar3": "result",
                "uVar4": "modifier"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_left_by32_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shiftLeftBy32_08006158(undefined4 ptr,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_left_by32_08006158",
                "param_1": "ptr",
                "param_2": "value"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "process_and_send_data_08006174",
            "code": "\nvoid process_and_send_data_08006174(undefined4 data_1,undefined4 data_2,undefined4 data_3,undefined4 data_4)\n\n{\n  undefined4 processed_data;\n  undefined4 output_buffer;\n  \n  processed_data = data_3;\n  output_buffer = data_4;\n  process_data_08006394(DAT_200000f8,data_1,data_2,&processed_data,data_1,&processed_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "process_and_send_data_08006174",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "uStack_8": "processed_data",
                "uStack_4": "output_buffer"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_callbacks_08006198",
            "code": "\nvoid executeCallbacks_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  FUNC_08007328();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_callbacks_08006198",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fillMemory_080061e0(undefined *memory,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + size;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "update_linked_list_080061f0",
            "code": "\nvoid updateLinkedList_080061f0(undefined4 *result,int length,undefined4 param_3,undefined4 param_4)\n\n{\n  int **newNode;\n  int **currentNode;\n  int **nextNode;\n  int *tempPtr;\n  int **prevNode;\n  int **newNodePtr;\n  \n  if (length == 0) {\n    return;\n  }\n  newNodePtr = (int **)(length + -4);\n  if (*(int *)(length + -4) < 0) {\n    newNodePtr = (int **)((int)newNodePtr + *(int *)(length + -4));\n  }\n  FUNC_08006eac();\n  nextNode = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    newNodePtr[1] = (int *)0x0;\n    currentNode = newNode;\n    DAT_200005f8 = newNodePtr;\n  }\n  else {\n    nextNode = DAT_200005f8;\n    if (newNodePtr < DAT_200005f8) {\n      currentNode = (int **)*newNodePtr;\n      nextNode = (int **)((int)newNodePtr + (int)currentNode);\n      if (DAT_200005f8 == nextNode) {\n        tempPtr = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        nextNode = (int **)((int)tempPtr + (int)currentNode);\n        *newNodePtr = (int *)nextNode;\n      }\n      newNodePtr[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = newNodePtr;\n    }\n    else {\n      do {\n        prevNode = nextNode;\n        nextNode = (int **)prevNode[1];\n        if (nextNode == (int **)0x0) break;\n      } while (nextNode <= newNodePtr);\n      currentNode = (int **)*prevNode;\n      if ((int **)((int)prevNode + (int)currentNode) == newNodePtr) {\n        currentNode = (int **)((int)currentNode + (int)*newNodePtr);\n        *prevNode = (int *)currentNode;\n        if (nextNode == (int **)((int)prevNode + (int)currentNode)) {\n          tempPtr = *nextNode;\n          nextNode = (int **)nextNode[1];\n          currentNode = (int **)((int)currentNode + (int)tempPtr);\n          *prevNode = (int *)currentNode;\n          prevNode[1] = (int *)nextNode;\n        }\n      }\n      else if (newNodePtr < (int **)((int)prevNode + (int)currentNode)) {\n        *result = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)newNodePtr + (int)*newNodePtr);\n        if (nextNode == currentNode) {\n          tempPtr = *nextNode;\n          nextNode = (int **)nextNode[1];\n          currentNode = (int **)((int)tempPtr + (int)*newNodePtr);\n          *newNodePtr = (int *)currentNode;\n        }\n        newNodePtr[1] = (int *)nextNode;\n        prevNode[1] = (int *)newNodePtr;\n      }\n    }\n  }\n  FUNC_08006eae(result,currentNode,nextNode,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "update_linked_list_080061f0",
                "param_1": "result",
                "param_2": "length",
                "extraout_r1": "newNode",
                "ppiVar1": "currentNode",
                "ppiVar2": "nextNode",
                "piVar3": "tempPtr",
                "ppiVar4": "prevNode",
                "ppiVar5": "newNodePtr"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_memory_08006288",
            "code": "\nuint allocate_memory_08006288(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *previous_block;\n  uint difference;\n  uint *last_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current_block = DAT_200005f8;\n    last_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          last_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080062ec;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = initialize_memory_08006920(result);\n    }\n    current_block = (uint *)initialize_memory_08006920(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (offset = initialize_memory_08006920(result,(int)last_block - (int)current_block), offset != -1)))) {\n      *last_block = allocated_size;\nLAB_080062ec:\n      FUNC_08006eae(result);\n      allocated_size = (int)last_block + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(last_block + 1);\n      if (offset != 0) {\n        *(int *)((int)last_block + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08006eae(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "last_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_data_08006344",
            "code": "\nuint process_data_08006344(int input_param,byte byte_value,byte **byte_ptr)\n\n{\n  int temp_var1;\n  byte *temp_ptr1;\n  byte *temp_ptr2;\n  uint result;\n  \n  temp_ptr1 = byte_ptr[2] + -1;\n  byte_ptr[2] = temp_ptr1;\n  if ((-1 < (int)temp_ptr1) ||\n     (((int)byte_ptr[6] <= (int)temp_ptr1 && (temp_ptr1 = (byte *)(uint)byte_value, temp_ptr1 != (byte *)0xa))))\n  {\n    temp_ptr1 = *byte_ptr;\n    *byte_ptr = temp_ptr1 + 1;\n    *temp_ptr1 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    initialize_data_structure();\n  }\n  if (byte_ptr == (byte **)&DAT_08007904) {\n    byte_ptr = *(byte ***)(input_param + 4);\n  }\n  else if (byte_ptr == (byte **)&DAT_08007924) {\n    byte_ptr = *(byte ***)(input_param + 8);\n  }\n  else if (byte_ptr == (byte **)&DAT_080078e4) {\n    byte_ptr = *(byte ***)(input_param + 0xc);\n  }\n  byte_ptr[2] = byte_ptr[6];\n  temp_ptr2 = (byte *)(uint)*(ushort *)(byte_ptr + 3);\n  temp_var1 = (int)temp_ptr2 << 0x1c;\n  if (((temp_var1 < 0) && (temp_ptr2 = byte_ptr[4], temp_ptr2 != (byte *)0x0)) ||\n     (temp_var1 = process_data_08006344_1(input_param,byte_ptr,temp_var1,temp_ptr2,temp_ptr1), temp_var1 == 0)) {\n    result = (uint)byte_value;\n    temp_var1 = (int)*byte_ptr - (int)byte_ptr[4];\n    if ((temp_var1 < (int)byte_ptr[5]) || (temp_var1 = process_data_08006344_2(input_param,byte_ptr), temp_var1 == 0)) {\n      byte_ptr[2] = byte_ptr[2] + -1;\n      temp_ptr1 = *byte_ptr;\n      *byte_ptr = temp_ptr1 + 1;\n      *temp_ptr1 = byte_value;\n      if ((byte *)(temp_var1 + 1) != byte_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(byte_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = process_data_08006344_2(input_param,byte_ptr);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_data_08006344",
                "param_1": "input_param",
                "param_2": "byte_value",
                "param_3": "byte_ptr",
                "iVar1": "temp_var1",
                "pbVar2": "temp_ptr1",
                "pbVar3": "temp_ptr2",
                "uVar4": "result",
                "initialize_data_structure_08006cb4": "initialize_data_structure",
                "process_data_080069e4": "process_data_1",
                "process_data_08006be0": "process_data_2"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "process_data_08006370",
            "code": "\nint process_data_08006370(undefined4 arg1,undefined4 arg2,undefined *data_ptr,int length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_length;\n  \n  end_ptr = data_ptr + length;\n  current_length = length;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    result = process_data_08006370_08006344(arg1,*data_ptr,arg2,length,current_length);\n    length = result + 1;\n    data_ptr = data_ptr + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data_ptr",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_length"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "process_data_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint processData_08006394(int data,undefined4 *header,byte *input,int *output)\n\n{\n  int result;\n  int *ptr;\n  bool flag;\n  byte *ptrByte1;\n  byte *ptrByte2;\n  int unaff_result;\n  int index;\n  int *localPtr;\n  uint flags;\n  int value;\n  undefined4 unknown;\n  int count;\n  int total;\n  byte character;\n  undefined value1;\n  undefined value2;\n  undefined flag2;\n  undefined4 unknown2;\n  \n  localPtr = output;\n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    initialize_data_structure_08006cb4();\n  }\n  if (header == &DAT_08007904) {\n    header = *(undefined4 **)(data + 4);\n  }\n  else if (header == (undefined4 *)&DAT_08007924) {\n    header = *(undefined4 **)(data + 8);\n  }\n  else if (header == (undefined4 *)&DAT_080078e4) {\n    header = *(undefined4 **)(data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(header + 3) << 0x1c)) || (header[4] == 0)) &&\n     (index = process_data_080069e4(data,header), index != 0)) {\n    return -1;\n  }\n  total = 0;\n  value1 = 0x20;\n  value2 = 0x30;\n  ptrByte1 = input;\nLAB_080063d6:\n  ptrByte2 = ptrByte1;\n  if (*ptrByte2 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  ptrByte1 = ptrByte2 + 1;\n  if (*ptrByte2 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  index = (int)ptrByte2 - (int)input;\n  if (index != 0) {\n    result = process_data_08006370(data,header,input,index);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(header + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total;\n    }\n    total = total + index;\n  }\n  if (*ptrByte2 == 0) goto LAB_08006580;\n  flags = 0;\n  count = 0;\n  value = -1;\n  unknown = 0;\n  flag2 = 0;\n  unknown2 = 0;\n  ptrByte1 = ptrByte2 + 1;\n  while( true ) {\n    index = find_character_08006e90(\"#-0+ \",*ptrByte1);\n    input = ptrByte1 + 1;\n    if (index == 0) break;\n    flags = 1 << (index + 0xf7ff8750U & 0xff) | flags;\n    ptrByte1 = input;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag2 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag2 = 0x2b;\n  }\n  if (*ptrByte1 == 0x2a) {\n    ptr = localPtr + 1;\n    index = *localPtr;\n    localPtr = ptr;\n    if (index < 0) {\n      count = -index;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    flag = false;\n    index = count;\n    input = ptrByte1;\n    while( true ) {\n      if (9 < *input - 0x30) break;\n      index = index * 10 + (*input - 0x30);\n      flag = true;\n      input = input + 1;\n    }\n    if (!flag) goto LAB_080064be;\n  }\n  count = index;\nLAB_080064be:\n  if (*input == 0x2e) {\n    if (input[1] == 0x2a) {\n      input = input + 2;\n      ptr = localPtr + 1;\n      value = *localPtr;\n      localPtr = ptr;\n      if (value < 0) {\n        value = -1;\n      }\n    }\n    else {\n      flag = false;\n      index = 0;\n      value = 0;\n      while( true ) {\n        input = input + 1;\n        if (9 < *input - 0x30) break;\n        index = index * 10 + (*input - 0x30);\n        flag = true;\n      }\n      if (flag) {\n        value = index;\n      }\n    }\n  }\n  index = find_character_08006e90(&DAT_080078b6,*input,3);\n  if (index != 0) {\n    input = input + 1;\n    flags = flags | 0x40 << (index + 0xf7ff874aU & 0xff);\n  }\n  character = *input;\n  input = input + 1;\n  index = find_character_08006e90(\"efgEFG\",character,6);\n  if (index == 0) {\n    unaff_result = decode_and_process_data_080066b0(data,&flags,header,0x8006371,&localPtr);\n    if (unaff_result == -1) goto LAB_08006580;\n  }\n  else {\n    localPtr = (int *)(((int)localPtr + 7U & 0xfffffff8) + 8);\n  }\n  total = total + unaff_result;\n  ptrByte1 = input;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "process_data_08006394",
                "param_1": "data",
                "param_2": "header",
                "param_3": "input",
                "param_4": "output",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "flag",
                "pbVar4": "ptrByte1",
                "pbVar5": "ptrByte2",
                "unaff_r9": "unaff_result",
                "iVar6": "index",
                "local_8c": "localPtr",
                "local_88": "flags",
                "local_84": "value",
                "local_80": "unknown",
                "local_7c": "count",
                "local_74": "total",
                "local_70": "character",
                "local_6f": "value1",
                "local_6e": "value2",
                "local_45": "flag2",
                "local_30": "unknown2"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "decode_and_process_data_080065c0",
            "code": "\nundefined4\ndecodeAndProcessData_080065c0(undefined4 inputData,uint *dataStruct,uint *outputSize,undefined4 param4,code *dataHandler)\n\n{\n  int iterator1;\n  int iterator2;\n  uint maxSize;\n  uint newValue;\n  bool condition;\n  \n  maxSize = dataStruct[4];\n  if ((int)dataStruct[4] < (int)dataStruct[2]) {\n    maxSize = dataStruct[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)dataStruct + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*dataStruct << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*dataStruct & 6) == 0) {\n    for (iterator1 = 0; iterator1 < (int)(dataStruct[3] - *outputSize); iterator1 = iterator1 + 1) {\n      iterator2 = (*dataHandler)(inputData,param4,(int)dataStruct + 0x19,1);\n      if (iterator2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)dataStruct + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  newValue = maxSize;\n  if ((int)(*dataStruct << 0x1a) < 0) {\n    *(undefined *)((int)dataStruct + maxSize + 0x43) = 0x30;\n    newValue = maxSize + 2;\n    *(undefined *)((int)dataStruct + maxSize + 0x44) = *(undefined *)((int)dataStruct + 0x45);\n  }\n  iterator1 = (*dataHandler)(inputData,param4,(int)dataStruct + 0x43,newValue);\n  if (iterator1 != -1) {\n    maxSize = dataStruct[3];\n    condition = (*dataStruct & 6) != 4;\n    if (condition) {\n      maxSize = 0;\n    }\n    newValue = 0;\n    if (!condition) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (!condition) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    if ((int)dataStruct[4] < (int)dataStruct[2]) {\n      maxSize = maxSize + (dataStruct[2] - dataStruct[4]);\n    }\n    while( true ) {\n      if (maxSize == newValue) {\n        return 0;\n      }\n      iterator1 = (*dataHandler)(inputData,param4,(int)dataStruct + 0x1a,1);\n      if (iterator1 == -1) break;\n      newValue = newValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "decode_and_process_data_080065c0",
                "param_1": "inputData",
                "param_2": "dataStruct",
                "param_3": "outputSize",
                "param_4": "param4",
                "param_5": "dataHandler",
                "iVar1": "iterator1",
                "iVar2": "iterator2",
                "uVar3": "maxSize",
                "uVar4": "newValue",
                "bVar5": "condition"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "decode_and_process_data_080066b0",
            "code": "\nuint decode_and_process_data_080066b0(undefined4 param_1,uint *input_buffer,undefined4 param_3,code *data_processing_function,uint **output_buffer)\n\n{\n  byte first_byte;\n  int result;\n  uint *ptr_value;\n  int inner_result;\n  char *hex_digits;\n  uint byte_value;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint numeric_value;\n  uint buffer_length;\n  char *output_buffer_index;\n  char *output_buffer_start;\n  uint local_buffer [2];\n  \n  first_byte = *(byte *)(input_buffer + 6);\n  output_buffer_start = (char *)((int)input_buffer + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_0800686a;\n          if (first_byte != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)input_buffer + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_080067fa:\n          byte_value = *input_buffer;\n          ptr_value = *output_buffer;\n          *output_buffer = ptr_value + 1;\n          if (((byte_value & 0x80) == 0) && ((int)(byte_value << 0x19) < 0)) {\n            numeric_value = (uint)*(ushort *)ptr_value;\n          }\n          else {\n            numeric_value = *ptr_value;\n          }\n          if ((int)(byte_value << 0x1f) < 0) {\n            *input_buffer = byte_value | 0x20;\n          }\n          if (numeric_value == 0) {\n            *input_buffer = *input_buffer & 0xffffffdf;\n          }\n          byte_value = 0x10;\nLAB_08006790:\n          *(undefined *)((int)input_buffer + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_080066e0;\n          numeric_value = *input_buffer;\n          ptr_value = *output_buffer;\n          if ((numeric_value & 0x80) == 0) {\n            *output_buffer = ptr_value + 1;\n            if ((numeric_value & 0x40) == 0) goto LAB_08006700;\n            numeric_value = (uint)(short)*(ushort *)ptr_value;\n          }\n          else {\n            *output_buffer = ptr_value + 1;\nLAB_08006700:\n            numeric_value = *ptr_value;\n          }\n          if ((int)numeric_value < 0) {\n            numeric_value = -numeric_value;\n            *(undefined *)((int)input_buffer + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          byte_value = 10;\n        }\n        buffer_length = input_buffer[1];\n        input_buffer[2] = buffer_length;\n        output_buffer_index = output_buffer_start;\n        if ((int)buffer_length < 0) {\n          if (numeric_value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)input_buffer + 0x42) = *hex_digits;\n          output_buffer_index = (char *)((int)input_buffer + 0x42);\n        }\n        else {\n          *input_buffer = *input_buffer & 0xfffffffb;\n          if (numeric_value == 0) {\n            if (buffer_length != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              buffer_length = numeric_value / byte_value;\n              output_buffer_index = output_buffer_index + -1;\n              *output_buffer_index = hex_digits[numeric_value - byte_value * buffer_length];\n              numeric_value = buffer_length;\n            } while (buffer_length != 0);\n          }\n        }\n        if (((byte_value == 8) && ((int)(*input_buffer << 0x1f) < 0)) && ((int)input_buffer[1] <= (int)input_buffer[4]))\n        {\n          output_buffer_index[-1] = '0';\n          output_buffer_index = output_buffer_index + -1;\n        }\n        input_buffer[4] = (int)output_buffer_start - (int)output_buffer_index;\n        output_buffer_start = output_buffer_index;\n        goto LAB_080067d6;\n      }\n      ptr_value = *output_buffer;\n      *output_buffer = ptr_value + 1;\n      *(char *)((int)input_buffer + 0x42) = (char)*ptr_value;\nLAB_08006740:\n      output_buffer_start = (char *)((int)input_buffer + 0x42);\n      numeric_value = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_08006766:\n            numeric_value = *input_buffer;\n            ptr_value = *output_buffer;\n            if ((numeric_value & 0x80) == 0) {\n              *output_buffer = ptr_value + 1;\n              if ((numeric_value & 0x40) == 0) goto LAB_08006774;\n              numeric_value = (uint)*(ushort *)ptr_value;\n            }\n            else {\n              *output_buffer = ptr_value + 1;\nLAB_08006774:\n              numeric_value = *ptr_value;\n            }\n            if (first_byte == 0x6f) {\n              byte_value = 8;\n            }\n            else {\n              byte_value = 10;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (first_byte == 0x70) {\n            *input_buffer = *input_buffer | 0x20;\nLAB_08006726:\n            hex_digits = \"0123456789abcdef\";\n            *(undefined *)((int)input_buffer + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_08006766;\n          if (first_byte == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)input_buffer + 0x42) = first_byte;\n        goto LAB_08006740;\n      }\n      ppcVar8 = (char **)*output_buffer;\n      *output_buffer = (uint *)(ppcVar8 + 1);\n      output_buffer_start = *ppcVar8;\n      result = find_character_08006e90(output_buffer_start,0,input_buffer[1]);\n      if (result != 0) {\n        input_buffer[1] = result - (int)output_buffer_start;\n      }\n      numeric_value = input_buffer[1];\n    }\n    input_buffer[4] = numeric_value;\n    *(undefined *)((int)input_buffer + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  numeric_value = *input_buffer;\n  ppuVar7 = (uint **)*output_buffer;\n  byte_value = input_buffer[5];\n  if ((numeric_value & 0x80) == 0) {\n    *output_buffer = (uint *)(ppuVar7 + 1);\n    ptr_value = *ppuVar7;\n    if ((numeric_value & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptr_value = (short)byte_value;\n  }\n  else {\n    *output_buffer = (uint *)(ppuVar7 + 1);\n    ptr_value = *ppuVar7;\nLAB_08006856:\n    *ptr_value = byte_value;\n  }\nLAB_0800686a:\n  input_buffer[4] = 0;\nLAB_080067d6:\n  result = decode_and_process_data_080066b0_080065c0(param_1,input_buffer,local_buffer,param_3,data_processing_function);\n  if ((result == -1) || (result = (*data_processing_function)(param_1,param_3,output_buffer_start,input_buffer[4]), result == -1)) {\nLAB_080067ea:\n    numeric_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_buffer << 0x1e) < 0) {\n      for (result = 0; result < (int)(input_buffer[3] - local_buffer[0]); result = result + 1) {\n        inner_result = (*data_processing_function)(param_1,param_3,(int)input_buffer + 0x19,1);\n        if (inner_result == -1) goto LAB_080067ea;\n      }\n    }\n    numeric_value = input_buffer[3];\n    if ((int)input_buffer[3] < (int)local_buffer[0]) {\n      numeric_value = local_buffer[0];\n    }\n  }\n  return numeric_value;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "decode_and_process_data_080066b0",
                "param_2": "input_buffer",
                "param_4": "data_processing_function",
                "param_5": "output_buffer",
                "bVar1": "first_byte",
                "iVar2": "result",
                "puVar3": "ptr_value",
                "iVar4": "inner_result",
                "pcVar5": "hex_digits",
                "uVar6": "byte_value",
                "uVar9": "numeric_value",
                "uVar10": "buffer_length",
                "pcVar11": "output_buffer_index",
                "pcVar12": "output_buffer_start",
                "local_24": "local_buffer"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "initialize_and_process_data_080068f0",
            "code": "\nvoid initialize_and_process_data_080068f0(undefined4 input_param,undefined4 second_param,undefined4 third_param,undefined4 fourth_param)\n\n{\n  int data_block;\n  undefined4 input_copy;\n  undefined4 second_param_copy;\n  undefined4 third_param_copy;\n  undefined4 fourth_param_copy;\n  \n  data_block = DAT_200000f8;\n  input_copy = input_param;\n  second_param_copy = second_param;\n  third_param_copy = third_param;\n  fourth_param_copy = fourth_param;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_structure_08006cb4(DAT_200000f8);\n  }\n  process_data_08006394(data_block,*(undefined4 *)(data_block + 8),input_param,&second_param_copy,input_copy,&second_param_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "initialize_and_process_data_080068f0",
                "param_1": "input_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "iVar1": "data_block",
                "uVar2": "input_copy",
                "uStack_c": "second_param_copy",
                "uStack_8": "third_param_copy",
                "uStack_4": "fourth_param_copy"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "initialize_memory_08006920",
            "code": "\nvoid initializeMemory_08006920(int *outputPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_200006a4 = 0;\n  allocationResult = allocate_memory_080056d8(size);\n  if ((allocationResult == -1) && (DAT_200006a4 != 0)) {\n    *outputPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "initialize_memory_08006920",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint process_data_080069e4(undefined4 *output_data,undefined4 *input_data)\n\n{\n  int base_addr;\n  uint result;\n  ushort flags;\n  \n  base_addr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_structure_08006cb4(DAT_200000f8);\n  }\n  if (input_data == &DAT_08007904) {\n    input_data = *(undefined4 **)(base_addr + 4);\n  }\n  else if (input_data == (undefined4 *)&DAT_08007924) {\n    input_data = *(undefined4 **)(base_addr + 8);\n  }\n  else if (input_data == (undefined4 *)&DAT_080078e4) {\n    input_data = *(undefined4 **)(base_addr + 0xc);\n  }\n  flags = *(ushort *)(input_data + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_data = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_data[0xd] != input_data + 0x11) {\n          update_linked_list_080061f0(output_data);\n        }\n        input_data[0xd] = 0;\n      }\n      *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xffdb;\n      input_data[1] = 0;\n      *input_data = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 8;\n  }\n  if ((input_data[4] == 0) && ((*(ushort *)(input_data + 3) & 0x280) != 0x200)) {\n    initialize_application_08006e10(output_data,input_data);\n  }\n  flags = *(ushort *)(input_data + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input_data[5];\n    }\n    input_data[2] = result;\n  }\n  else {\n    input_data[2] = 0;\n    input_data[6] = -input_data[5];\n  }\n  if (input_data[4] == 0) {\n    flags = *(ushort *)(input_data + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input_data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output_data",
                "param_2": "input_data",
                "iVar1": "base_addr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_application_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "execute_function_08006ac0",
            "code": "\nvoid executeFunction_08006ac0(void)\n\n{\n  uint *paramPointer;\n  int initialValue;\n  int *pointerArray;\n  int *pointerArray2;\n  uint ushortValue;\n  ushort ushortVariable;\n  int loopVariable;\n  code *functionPointer;\n  int counter;\n  uint tempValue;\n  code *unrecoveredJumpTable;\n  bool boolVariable;\n  undefined8 returnValue;\n  \n  handle_parameter_08006f00(6);\n  unrecoveredJumpTable = (code *)0x8006acf;\n  returnValue = infinite_loop_0800573c(1);\n  pointerArray = (int *)((ulonglong)returnValue >> 0x20);\n  paramPointer = (uint *)returnValue;\n  ushortVariable = *(ushort *)(pointerArray + 3);\n  ushortValue = (uint)ushortVariable;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    initialValue = pointerArray[4];\n    if (initialValue != 0) {\n      loopVariable = ushortValue << 0x1e;\n      boolVariable = loopVariable != 0;\n      if (boolVariable) {\n        loopVariable = 0;\n      }\n      counter = *pointerArray;\n      if (!boolVariable) {\n        loopVariable = pointerArray[5];\n      }\n      *pointerArray = initialValue;\n      pointerArray[2] = loopVariable;\n      for (counter = counter - initialValue; 0 < counter; counter = counter - loopVariable) {\n        loopVariable = (*(code *)pointerArray[10])(paramPointer,pointerArray[8],initialValue,counter);\n        if (loopVariable < 1) {\n          ushortVariable = *(ushort *)(pointerArray + 3);\n          goto LAB_08006bc6;\n        }\n        initialValue = initialValue + loopVariable;\n      }\n    }\n  }\n  else if (((0 < pointerArray[1]) || (0 < pointerArray[0x10])) &&\n          (functionPointer = (code *)pointerArray[0xb], functionPointer != (code *)0x0)) {\n    tempValue = *paramPointer;\n    *paramPointer = 0;\n    if ((ushortVariable & 0x1000) == 0) {\n      initialValue = (*functionPointer)(paramPointer,pointerArray[8],ushortValue & 0x1000,1);\n      if ((initialValue == -1) && (ushortValue = *paramPointer, ushortValue != 0)) {\n        if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n          *(ushort *)(pointerArray + 3) = *(ushort *)(pointerArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecoveredJumpTable)();\n          return;\n        }\n        *paramPointer = tempValue;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      initialValue = pointerArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointerArray + 3) << 0x1d) < 0) &&\n       (initialValue = initialValue - pointerArray[1], pointerArray[0xd] != 0)) {\n      initialValue = initialValue - pointerArray[0x10];\n    }\n    initialValue = (*(code *)pointerArray[0xb])(paramPointer,pointerArray[8],initialValue,0);\n    ushortVariable = *(ushort *)(pointerArray + 3);\n    if ((initialValue == -1) &&\n       ((0x1d < *paramPointer || (-1 < (int)((0x20400001U >> (*paramPointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(pointerArray + 3) = ushortVariable | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    pointerArray[1] = 0;\n    *pointerArray = pointerArray[4];\n    if (((int)((uint)ushortVariable << 0x13) < 0) && ((initialValue != -1 || (*paramPointer == 0)))) {\n      pointerArray[0x15] = initialValue;\n    }\n    pointerArray2 = (int *)pointerArray[0xd];\n    *paramPointer = tempValue;\n    if (pointerArray2 != (int *)0x0) {\n      if (pointerArray2 != pointerArray + 0x11) {\n        update_linked_list_080061f0(paramPointer);\n      }\n      pointerArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "execute_function_08006ac0",
                "puVar1": "paramPointer",
                "iVar2": "initialValue",
                "piVar3": "pointerArray",
                "piVar4": "pointerArray2",
                "uVar5": "ushortValue",
                "uVar6": "ushortVariable",
                "iVar7": "loopVariable",
                "pcVar8": "functionPointer",
                "iVar9": "counter",
                "uVar10": "tempValue",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable",
                "bVar11": "boolVariable",
                "uVar12": "returnValue"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *data,int *config)\n\n{\n  undefined4 result;\n  int offset;\n  int *ptr;\n  uint temp;\n  ushort flag;\n  int value;\n  undefined4 temp1;\n  undefined4 temp2;\n  code *funcPtr;\n  int length;\n  uint temp3;\n  code *jumpTable;\n  bool bVar10;\n  \n  if (config[4] != 0) {\n    if ((data != (uint *)0x0) && (data[6] == 0)) {\n      initialize_data_structure_08006cb4();\n    }\n    if (config == &DAT_08007904) {\n      config = (int *)data[1];\n    }\n    else if (config == (int *)&DAT_08007924) {\n      config = (int *)data[2];\n    }\n    else if (config == (int *)&DAT_080078e4) {\n      config = (int *)data[3];\n    }\n    if (*(short *)(config + 3) != 0) {\n      flag = *(ushort *)(config + 3);\n      temp = (uint)flag;\n      if ((int)(temp << 0x1c) < 0) {\n        offset = config[4];\n        if (offset != 0) {\n          value = temp << 0x1e;\n          bVar10 = value != 0;\n          if (bVar10) {\n            value = 0;\n          }\n          length = *config;\n          if (!bVar10) {\n            value = config[5];\n          }\n          *config = offset;\n          config[2] = value;\n          for (length = length - offset; 0 < length; length = length - value) {\n            value = (*(code *)config[10])(data,config[8],offset,length,temp1,temp2);\n            if (value < 1) {\n              flag = *(ushort *)(config + 3);\n              goto LAB_08006bc6;\n            }\n            offset = offset + value;\n          }\n        }\n      }\n      else if (((0 < config[1]) || (0 < config[0x10])) &&\n              (funcPtr = (code *)config[0xb], funcPtr != (code *)0x0)) {\n        temp3 = *data;\n        *data = 0;\n        if ((flag & 0x1000) == 0) {\n          offset = (*funcPtr)(data,config[8],temp & 0x1000,1);\n          if ((offset == -1) && (temp = *data, temp != 0)) {\n            if ((temp != 0x1d) && (temp != 0x16)) {\n              *(ushort *)(config + 3) = *(ushort *)(config + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jumpTable)();\n              return result;\n            }\n            *data = temp3;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          offset = config[0x15];\n        }\n        if (((int)((uint)*(ushort *)(config + 3) << 0x1d) < 0) &&\n           (offset = offset - config[1], config[0xd] != 0)) {\n          offset = offset - config[0x10];\n        }\n        offset = (*(code *)config[0xb])(data,config[8],offset,0);\n        flag = *(ushort *)(config + 3);\n        if ((offset == -1) &&\n           ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(config + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jumpTable)(0xffffffff);\n          return result;\n        }\n        config[1] = 0;\n        *config = config[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((offset != -1 || (*data == 0)))) {\n          config[0x15] = offset;\n        }\n        ptr = (int *)config[0xd];\n        *data = temp3;\n        if (ptr != (int *)0x0) {\n          if (ptr != config + 0x11) {\n            update_linked_list_080061f0(data);\n          }\n          config[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jumpTable)();\n          return result;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jumpTable)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "config",
                "uVar1": "result",
                "iVar2": "offset",
                "piVar3": "ptr",
                "uVar4": "temp",
                "uVar5": "flag",
                "iVar6": "value",
                "unaff_r4": "temp1",
                "unaff_r5": "temp2",
                "pcVar7": "funcPtr",
                "iVar8": "length",
                "uVar9": "temp3",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_data_struct_08006c40",
            "code": "\nvoid initializeDataStruct_08006c40(undefined4 *dataStruct,undefined2 value1,undefined2 value2)\n\n{\n  *dataStruct = 0;\n  dataStruct[1] = 0;\n  dataStruct[2] = 0;\n  *(undefined2 *)(dataStruct + 3) = value1;\n  dataStruct[0x19] = 0;\n  *(undefined2 *)((int)dataStruct + 0xe) = value2;\n  dataStruct[4] = 0;\n  dataStruct[5] = 0;\n  dataStruct[6] = 0;\n  fill_memory_080061e0(dataStruct + 0x17,0,8);\n  dataStruct[8] = dataStruct;\n  dataStruct[9] = 0x8006f39;\n  dataStruct[10] = 0x8006f5b;\n  dataStruct[0xb] = 0x8006f93;\n  dataStruct[0xc] = &LAB_08006fb6_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_data_struct_08006c40",
                "param_1": "dataStruct",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_and_fill_memory_08006c88",
            "code": "\nundefined4 * allocate_and_fill_memory_08006c88(undefined4 memory_size,int num_elements)\n\n{\n  undefined4 *memory_pointer;\n  int memory_offset;\n  \n  memory_offset = (num_elements + -1) * 0x68;\n  memory_pointer = (undefined4 *)allocate_memory_08006288(memory_size,memory_offset + 0x74);\n  if (memory_pointer != (undefined4 *)0x0) {\n    *memory_pointer = 0;\n    memory_pointer[1] = num_elements;\n    memory_pointer[2] = memory_pointer + 3;\n    fill_memory_080061e0(memory_pointer + 3,0,memory_offset + 0x68);\n  }\n  return memory_pointer;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_and_fill_memory_08006c88",
                "param_1": "memory_size",
                "param_2": "num_elements",
                "puVar1": "memory_pointer",
                "iVar2": "memory_offset"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_structure_08006cb4",
            "code": "\nvoid initializeDataStructure_08006cb4(undefined4 *dataArray)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (dataArray[6] == 0) {\n    dataArray[0x12] = 0;\n    dataArray[0x13] = 0;\n    dataArray[0x14] = 0;\n    pointer = &DAT_200000fc;\n    dataArray[10] = &LAB_08006c34_1;\n    if (dataArray == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (dataArray == &DAT_200000fc) {\n      dataArray[6] = pointer;\n    }\n    result = initializeData();\n    dataArray[1] = result;\n    result = initializeData(dataArray);\n    dataArray[2] = result;\n    result = initializeData(dataArray);\n    dataArray[3] = result;\n    initializeDataStruct(dataArray[1],4,0);\n    initializeDataStruct(dataArray[2],9,1);\n    initializeDataStruct(dataArray[3],0x12,2);\n    dataArray[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_structure_08006cb4",
                "param_1": "dataArray",
                "uVar1": "result",
                "puVar2": "pointer",
                "initialize_data_structure_08006d14": "initializeData",
                "initialize_data_struct_08006c40": "initializeDataStruct"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_data_structure_08006d14",
            "code": "\nint * initialize_data_structure_08006d14(undefined4 *output_param,undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  int *element_ptr_1;\n  int *element_ptr_2;\n  int **data_structure_ptr;\n  \n  if (DAT_20000114 == 0) {\n    initialize_data_structure_08006cb4(&DAT_200000fc);\n  }\n  data_structure_ptr = (int **)&DAT_20000144;\n  do {\n    element_ptr_2 = data_structure_ptr[2];\n    element_ptr_1 = data_structure_ptr[1];\n    while (element_ptr_1 = (int *)((int)element_ptr_1 + -1), -1 < (int)element_ptr_1) {\n      if (*(short *)(element_ptr_2 + 3) == 0) {\n        *(undefined2 *)((int)element_ptr_2 + 0xe) = 0xffff;\n        element_ptr_2[0x19] = 0;\n        *(undefined2 *)(element_ptr_2 + 3) = 1;\n        *element_ptr_2 = 0;\n        element_ptr_2[2] = 0;\n        element_ptr_2[1] = 0;\n        element_ptr_2[4] = 0;\n        element_ptr_2[5] = 0;\n        element_ptr_2[6] = 0;\n        fill_memory(element_ptr_2 + 0x17,0,8,1,input_param_3);\n        element_ptr_2[0xd] = 0;\n        element_ptr_2[0xe] = 0;\n        element_ptr_2[0x12] = 0;\n        element_ptr_2[0x13] = 0;\n        return element_ptr_2;\n      }\n      element_ptr_2 = element_ptr_2 + 0x1a;\n    }\n    if (*data_structure_ptr == (int *)0x0) {\n      element_ptr_1 = (int *)allocate_and_fill_memory(output_param,4);\n      *data_structure_ptr = element_ptr_1;\n      if (element_ptr_1 == (int *)0x0) {\n        *output_param = 0xc;\n        return (int *)0x0;\n      }\n    }\n    data_structure_ptr = (int **)*data_structure_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_data_structure_08006d14",
                "param_1": "output_param",
                "param_2": "input_param_1",
                "param_3": "input_param_2",
                "param_4": "input_param_3",
                "piVar1": "element_ptr_1",
                "piVar2": "element_ptr_2",
                "ppiVar3": "data_structure_ptr",
                "allocate_and_fill_memory_08006c88": "allocate_and_fill_memory",
                "fill_memory_080061e0": "fill_memory"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_fill_memory_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "initialize_and_check_memory_08006dc8",
            "code": "\nundefined4 initialize_and_check_memory_08006dc8(undefined4 param_1,int param_2,undefined4 *output_param,uint *result_param)\n\n{\n  int result;\n  undefined4 flag;\n  undefined temporary_storage [4];\n  uint local_variable;\n  \n  if ((*(short *)(param_2 + 0xe) < 0) ||\n     (result = initialize_memory_08007004(param_1,(int)*(short *)(param_2 + 0xe),temporary_storage), result < 0)) {\n    *result_param = 0;\n    if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x18) < 0) {\n      flag = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *result_param = (uint)((local_variable & 0xf000) == 0x2000);\n  }\n  flag = 0x400;\nLAB_08006e08:\n  *output_param = flag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "initialize_and_check_memory_08006dc8",
                "param_3": "output_param",
                "param_4": "result_param",
                "iVar1": "result",
                "uVar2": "flag",
                "auStack_4c": "temporary_storage",
                "local_48": "local_variable"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "initialize_application_08006e10",
            "code": "\nvoid initializeApplication_08006e10(int applicationPointer,int *paramsArray)\n\n{\n  ushort initializationResult;\n  int allocationResult;\n  int localVariable1;\n  int *localVariable2;\n  \n  if (-1 < (int)((uint)*(ushort *)(paramsArray + 3) << 0x1e)) {\n    localVariable1 = applicationPointer;\n    localVariable2 = paramsArray;\n    initializationResult = initialize_and_check_memory_08006dc8(applicationPointer,paramsArray,&localVariable1,&localVariable2);\n    allocationResult = allocate_memory_08006288(applicationPointer,localVariable1);\n    if (allocationResult != 0) {\n      *(undefined **)(applicationPointer + 0x28) = &LAB_08006c34_1;\n      *paramsArray = allocationResult;\n      *(ushort *)(paramsArray + 3) = *(ushort *)(paramsArray + 3) | 0x80;\n      paramsArray[4] = allocationResult;\n      paramsArray[5] = localVariable1;\n      if ((localVariable2 != (int *)0x0) &&\n         (allocationResult = initialize_and_check_application_08007028(applicationPointer,(int)*(short *)((int)paramsArray + 0xe)), allocationResult != 0)) {\n        *(ushort *)(paramsArray + 3) = *(ushort *)(paramsArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(paramsArray + 3) = initializationResult | *(ushort *)(paramsArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(paramsArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(paramsArray + 3) = *(ushort *)(paramsArray + 3) & 0xfffc | 2;\n  }\n  *paramsArray = (int)paramsArray + 0x47;\n  paramsArray[4] = (int)paramsArray + 0x47;\n  paramsArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "initialize_application_08006e10",
                "param_1": "applicationPointer",
                "param_2": "paramsArray",
                "uVar1": "initializationResult",
                "iVar2": "allocationResult",
                "local_18": "localVariable1",
                "local_14": "localVariable2"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_08006e90",
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *current_char_ptr;\n  char *result_ptr;\n  \n  current_char_ptr = string;\n  do {\n    result_ptr = current_char_ptr;\n    if (result_ptr == string + length) {\n      return (char *)0x0;\n    }\n    current_char_ptr = result_ptr + 1;\n  } while (*result_ptr != character);\n  return result_ptr;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char_ptr",
                "pcVar2": "result_ptr"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "handle_parameter_08006f00",
            "code": "\nint handle_parameter_08006f00(uint input_parameter)\n\n{\n  int *pointer_variable_1;\n  undefined4 unsigned_variable_2;\n  int integer_variable_3;\n  code *function_pointer_variable_4;\n  undefined4 register_variable_4;\n  undefined4 register_variable_5;\n  undefined4 register_variable_lr;\n  undefined4 *pointer_variable_5;\n  \n  pointer_variable_1 = DAT_200000f8;\n  pointer_variable_5 = &DAT_200000f8;\n  if (0x1f < input_parameter) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  integer_variable_3 = DAT_200000f8[0x11];\n  if ((integer_variable_3 != 0) && (function_pointer_variable_4 = *(code **)(integer_variable_3 + input_parameter * 4), function_pointer_variable_4 != (code *)0x0)) {\n    if (function_pointer_variable_4 != (code *)0x1) {\n      if (function_pointer_variable_4 == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(integer_variable_3 + input_parameter * 4) = 0;\n      (*function_pointer_variable_4)(input_parameter);\n    }\n    return 0;\n  }\n  unsigned_variable_2 = get_one_thunk_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  integer_variable_3 = initialize_data_08005740(unsigned_variable_2,input_parameter,input_parameter,0,pointer_variable_5,register_variable_4,register_variable_5,register_variable_lr);\n  if ((integer_variable_3 == -1) && (DAT_200006a4 != 0)) {\n    *pointer_variable_1 = DAT_200006a4;\n  }\n  return integer_variable_3;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "handle_parameter_08006f00",
                "param_1": "input_parameter",
                "piVar1": "pointer_variable_1",
                "uVar2": "unsigned_variable_2",
                "iVar3": "integer_variable_3",
                "pcVar4": "function_pointer_variable_4",
                "unaff_r4": "register_variable_4",
                "unaff_r5": "register_variable_5",
                "in_lr": "register_variable_lr",
                "puVar5": "pointer_variable_5"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "entrypoint": "0x08006f34",
            "current_name": "get_one_thunk_08005750",
            "code": "\nundefined4 get_one_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005750": "get_one_thunk_08005750"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_value_08006f38",
            "code": "\nvoid updateValue_08006f38(undefined4 arg1,int arg2)\n\n{\n  int result;\n  uint updatedValue;\n  bool isPositive;\n  \n  result = initialize_and_store_result_0800706c(arg1,(int)*(short *)(arg2 + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    updatedValue = *(int *)(arg2 + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(arg2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(arg2 + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(arg2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_value_08006f38",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "process_data_08006f5a",
            "code": "\nvoid processData_08006f5a(int *outputArray,int inputArray,undefined4 paramA,undefined4 paramB)\n\n{\n  int iVar1;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 linkRegister;\n  \n  if ((int)((uint)*(ushort *)(inputArray + 0xc) << 0x17) < 0) {\n    initializeCheckResult(outputArray,(int)*(short *)(inputArray + 0xe),0,2);\n  }\n  *(ushort *)(inputArray + 0xc) = *(ushort *)(inputArray + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  iVar1 = processCheckData((int)*(short *)(inputArray + 0xe),paramA,paramB,paramB,paramB,tempVar1,\n                       tempVar2,linkRegister);\n  if ((iVar1 == -1) && (DAT_200006a4 != 0)) {\n    *outputArray = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "paramA",
                "param_4": "paramB",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "in_lr": "linkRegister",
                "initialize_and_check_result_08007048": "initializeCheckResult",
                "process_and_check_data_08005730": "processCheckData"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "initialize_and_check_result_08006f92",
            "code": "\nvoid initializeAndCheckResult_08006f92(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isError;\n  \n  result = initialize_and_check_result_08007048(param1,(int)*(short *)(param2 + 0xe));\n  isError = result == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = result;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "initialize_and_check_result_08006f92",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "initialize_memory_08007004",
            "code": "\nvoid initializeMemory_08007004(int *result,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  int errorCode;\n  \n  DAT_200006a4 = 0;\n  errorCode = initialize_memory_0800571a(size,value1,value1,0,value2);\n  if ((errorCode == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "initialize_memory_08007004",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "initialize_and_check_application_08007028",
            "code": "\nvoid initialize_and_check_application_08007028(int *output_param,undefined4 input_param)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = initialize_application(input_param);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output_param = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "initialize_and_check_application_08007028",
                "param_1": "output_param",
                "param_2": "input_param",
                "initialize_application_08005724": "initialize_application",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "initialize_and_check_result_08007048",
            "code": "\nvoid initialize_and_check_result_08007048(int *result_ptr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_200006a4 = 0;\n  init_result = initialize_08005728(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_200006a4 != 0)) {\n    *result_ptr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "initialize_and_check_result_08007048",
                "param_1": "result_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "initialize_and_store_result_0800706c",
            "code": "\nvoid initializeAndStoreResult_0800706c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_200006a4 = 0;\n  returnValue = initialize_0800572c(arg1,arg2,arg3,arg3,arg3);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "initialize_and_store_result_0800706c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "initialize_flags_08007090",
            "code": "\nvoid initializeFlags_08007090(void)\n\n{\n  code *functionPointer;\n  \n  functionPointer = initializeFlags_08007090;\n  execute_function_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "initialize_flags_08007090",
                "UNRECOVERED_JUMPTABLE": "functionPointer"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 186039,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": []
}