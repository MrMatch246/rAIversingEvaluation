{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_64bit_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_64bit_08000134(undefined4 input_1,undefined4 input_2)\n\n{\n  return CONCAT44(input_2,input_1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_64bit_08000134",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_product_08000158",
            "code": "\nulonglong calculate_product_08000158(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool temp13;\n  bool temp14;\n  bool temp15;\n  \n  temp6 = num4 ^ 0x80000000;\n  temp9 = num2 << 1;\n  num4 = num4 << 1;\n  temp13 = ((num2 ^ temp6) & 0x7fffffff) == 0;\n  temp14 = temp13 && num1 == num3;\n  if (!temp13 || num1 != num3) {\n    temp14 = (temp9 | num1) == 0;\n  }\n  if (!temp14) {\n    temp14 = (num4 | num3) == 0;\n  }\n  temp8 = (int)temp9 >> 0x15;\n  if (!temp14) {\n    temp14 = temp8 == -1;\n  }\n  temp1 = (int)num4 >> 0x15;\n  if (!temp14) {\n    temp14 = temp1 == -1;\n  }\n  if (temp14) {\n    if (temp8 == -1 || temp1 == -1) {\n      temp9 = temp6;\n      temp11 = num3;\n      if (temp8 == -1) {\n        temp9 = num2;\n        temp11 = num1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        num3 = temp11;\n        temp6 = temp9;\n      }\n      temp14 = (temp11 | temp9 << 0xc) == 0;\n      if (temp14) {\n        temp14 = (num3 | temp6 << 0xc) == 0;\n      }\n      if (temp14) {\n        temp14 = temp9 == temp6;\n      }\n      if (!temp14) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp11);\n    }\n    if (((num2 ^ temp6) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((temp9 | num1) == 0) {\n        num1 = num3;\n        num2 = temp6;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != temp6) {\n      return 0;\n    }\n    if (temp9 >> 0x15 == 0) {\n      temp14 = (num1 & 0x80000000) != 0;\n      temp6 = num2 * 2 + (uint)temp14;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)temp14)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,num1 << 1);\n    }\n    if (temp9 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  temp9 = temp9 >> 0x15;\n  num4 = num4 >> 0x15;\n  temp11 = num4 - temp9;\n  temp14 = temp11 != 0;\n  if (num4 < temp9) {\n    temp11 = -temp11;\n  }\n  temp10 = num1;\n  temp7 = num2;\n  if (temp14 && temp9 <= num4) {\n    temp9 = temp9 + temp11;\n    temp10 = num3;\n    temp7 = temp6;\n    num3 = num1;\n    temp6 = num2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp7,temp10);\n  }\n  temp4 = temp7 & 0xfffff | 0x100000;\n  if ((temp7 & 0x80000000) != 0) {\n    temp14 = temp10 != 0;\n    temp10 = -temp10;\n    temp4 = -temp4 - (uint)temp14;\n  }\n  temp7 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    temp14 = num3 != 0;\n    num3 = -num3;\n    temp7 = -temp7 - (uint)temp14;\n  }\n  if (temp9 == temp11) {\n    temp7 = temp7 ^ 0x100000;\n    if (temp9 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp9 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp6 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = num3 << (temp6 & 0xff);\n    num3 = num3 >> (temp11 & 0xff);\n    temp3 = temp10 + num3;\n    temp5 = temp7 << (temp6 & 0xff);\n    temp6 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(temp10,num3) + ((int)temp7 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    temp12 = temp7 << (-temp11 + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp7 = (int)temp7 >> (temp11 - 0x20 & 0xff);\n    temp6 = temp10 + temp7;\n    temp4 = temp4 + ((int)temp7 >> 0x1f) + (uint)CARRY4(temp10,temp7);\n  }\n  num2 = temp4 & 0x80000000;\n  temp11 = temp4;\n  if ((int)temp4 < 0) {\n    temp14 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp6;\n    temp6 = -(uint)!temp14 - temp6;\n    temp11 = -(uint)(temp14 <= temp11) - temp4;\n  }\n  if (0xfffff < temp11) {\n    temp10 = temp9 - 1;\n    if (0x1fffff < temp11) {\n      temp10 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      temp2 = (byte)temp6;\n      temp6 = (uint)(temp10 != 0) << 0x1f | temp6 >> 1;\n      temp12 = (uint)(temp2 & 1) << 0x1f | temp12 >> 1;\n      temp10 = temp9;\n      if (0xffbfffff < temp9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    temp14 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      temp14 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(temp11 + temp10 * 0x100000 + (uint)CARRY4(temp6,(uint)temp14) | num2,\n                    temp6 + temp14);\n  }\n  temp13 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  temp10 = temp6 * 2;\n  temp14 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)temp13;\n  temp11 = temp11 * 2 + (uint)(temp14 || CARRY4(temp10,(uint)temp13));\n  temp10 = temp9 - 2;\n  if ((temp11 & 0x100000) != 0) goto LAB_08000268;\n  temp7 = temp6;\n  temp9 = temp11;\n  if (temp11 == 0) {\n    temp7 = 0;\n    temp9 = temp6;\n  }\n  temp8 = LZCOUNT(temp9);\n  if (temp11 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  temp11 = temp8 - 0xb;\n  temp15 = SBORROW4(temp11,0x20);\n  temp6 = temp8 - 0x2b;\n  temp14 = (int)temp6 < 0;\n  temp13 = temp6 == 0;\n  if ((int)temp11 < 0x20) {\n    temp15 = SCARRY4(temp6,0xc);\n    temp8 = temp8 + -0x1f;\n    temp14 = temp8 < 0;\n    temp13 = temp8 == 0;\n    temp6 = temp11;\n    if (!temp13 && temp14 == temp15) {\n      temp7 = temp9 << (temp11 & 0xff);\n      temp9 = temp9 >> (0xcU - temp8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (temp13 || temp14 != temp15) {\n    temp12 = 0x20 - temp6;\n  }\n  temp9 = temp9 << (temp6 & 0xff);\n  if (temp13 || temp14 != temp15) {\n    temp9 = temp9 | temp7 >> (temp12 & 0xff);\n  }\n  if (temp13 || temp14 != temp15) {\n    temp7 = temp7 << (temp6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp11 <= (int)temp10) {\n    return CONCAT44(temp9 + (temp10 - temp11) * 0x100000 | num2,temp7);\n  }\n  temp6 = ~(temp10 - temp11);\n  if ((int)temp6 < 0x1f) {\n    temp8 = temp6 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp6 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp7 >> (0x20 - (0xcU - temp8) & 0xff) | temp9 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp6 = temp6 + 1;\n    return CONCAT44(num2 | temp9 >> (temp6 & 0xff),\n                    temp7 >> (temp6 & 0xff) | temp9 << (0x20 - temp6 & 0xff));\n  }\n  return CONCAT44(temp4,temp9 >> (temp6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_product_08000158",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "temp13",
                "bVar14": "temp14",
                "bVar15": "temp15"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_result_0800015c",
            "code": "\nulonglong calculate_result_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift_amount1;\n  byte carry_bit1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift_amount2;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  \n  temp4 = input2 << 1;\n  temp6 = input4 << 1;\n  bool1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  bool2 = bool1 && input1 == input3;\n  if (!bool1 || input1 != input3) {\n    bool2 = (temp4 | input1) == 0;\n  }\n  if (!bool2) {\n    bool2 = (temp6 | input3) == 0;\n  }\n  shift_amount2 = (int)temp4 >> 0x15;\n  if (!bool2) {\n    bool2 = shift_amount2 == -1;\n  }\n  shift_amount1 = (int)temp6 >> 0x15;\n  if (!bool2) {\n    bool2 = shift_amount1 == -1;\n  }\n  if (bool2) {\n    if (shift_amount2 == -1 || shift_amount1 == -1) {\n      temp6 = input4;\n      temp4 = input3;\n      if (shift_amount2 == -1) {\n        temp6 = input2;\n        temp4 = input1;\n      }\n      if (shift_amount2 != -1 || shift_amount1 != -1) {\n        input3 = temp4;\n        input4 = temp6;\n      }\n      bool2 = (temp4 | temp6 << 0xc) == 0;\n      if (bool2) {\n        bool2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (bool2) {\n        bool2 = temp6 == input4;\n      }\n      if (!bool2) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp4);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp4 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      bool2 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)bool2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)bool2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  temp6 = temp6 >> 0x15;\n  temp7 = temp6 - temp4;\n  bool2 = temp7 != 0;\n  if (temp6 < temp4) {\n    temp7 = -temp7;\n  }\n  temp5 = input1;\n  temp3 = input2;\n  if (bool2 && temp4 <= temp6) {\n    temp4 = temp4 + temp7;\n    temp5 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp3,temp5);\n  }\n  temp6 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    bool2 = temp5 != 0;\n    temp5 = -temp5;\n    temp6 = -temp6 - (uint)bool2;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    bool2 = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)bool2;\n  }\n  if (temp4 == temp7) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      temp6 = temp6 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp9 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = input3 << (temp9 & 0xff);\n    input3 = input3 >> (temp7 & 0xff);\n    temp1 = temp5 + input3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    temp6 = temp6 + CARRY4(temp5,input3) + ((int)temp3 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-temp7 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (temp7 - 0x20 & 0xff);\n    temp9 = temp5 + temp3;\n    temp6 = temp6 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  input2 = temp6 & 0x80000000;\n  temp7 = temp6;\n  if ((int)temp6 < 0) {\n    bool2 = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp9;\n    temp9 = -(uint)!bool2 - temp9;\n    temp7 = -(uint)(bool2 <= temp7) - temp6;\n  }\n  if (0xfffff < temp7) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry_bit1 = (byte)temp9;\n      temp9 = (uint)(temp6 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry_bit1 & 1) << 0x1f | temp8 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bool2 = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      bool2 = (temp9 & 1) != 0;\n    }\n    return CONCAT44(temp7 + temp5 * 0x100000 + (uint)CARRY4(temp9,(uint)bool2) | input2,\n                    temp9 + bool2);\n  }\n  bool1 = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp5 = temp9 * 2;\n  bool2 = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)bool1;\n  temp7 = temp7 * 2 + (uint)(bool2 || CARRY4(temp5,(uint)bool1));\n  temp5 = temp4 - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp9;\n  temp4 = temp7;\n  if (temp7 == 0) {\n    temp3 = 0;\n    temp4 = temp9;\n  }\n  shift_amount2 = LZCOUNT(temp4);\n  if (temp7 == 0) {\n    shift_amount2 = shift_amount2 + 0x20;\n  }\n  temp9 = shift_amount2 - 0xb;\n  bool3 = SBORROW4(temp9,0x20);\n  temp7 = shift_amount2 - 0x2b;\n  bool2 = (int)temp7 < 0;\n  bool1 = temp7 == 0;\n  if ((int)temp9 < 0x20) {\n    bool3 = SCARRY4(temp7,0xc);\n    shift_amount2 = shift_amount2 + -0x1f;\n    bool2 = shift_amount2 < 0;\n    bool1 = shift_amount2 == 0;\n    temp7 = temp9;\n    if (!bool1 && bool2 == bool3) {\n      temp3 = temp4 << (temp9 & 0xff);\n      temp4 = temp4 >> (0xcU - shift_amount2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bool1 || bool2 != bool3) {\n    temp8 = 0x20 - temp7;\n  }\n  temp4 = temp4 << (temp7 & 0xff);\n  if (bool1 || bool2 != bool3) {\n    temp4 = temp4 | temp3 >> (temp8 & 0xff);\n  }\n  if (bool1 || bool2 != bool3) {\n    temp3 = temp3 << (temp7 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp9 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - temp9) * 0x100000 | input2,temp3);\n  }\n  temp7 = ~(temp5 - temp9);\n  if ((int)temp7 < 0x1f) {\n    shift_amount2 = temp7 - 0x13;\n    if (shift_amount2 != 0 && shift_amount2 < 0 == SCARRY4(temp7 - 0x1f,0xc)) {\n      return CONCAT44(temp6,temp3 >> (0x20 - (0xcU - shift_amount2) & 0xff) | temp4 << (0xcU - shift_amount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp7 = temp7 + 1;\n    return CONCAT44(input2 | temp4 >> (temp7 & 0xff),\n                    temp3 >> (temp7 & 0xff) | temp4 << (0x20 - temp7 & 0xff));\n  }\n  return CONCAT44(temp6,temp4 >> (temp7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_result_0800015c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift_amount1",
                "bVar2": "carry_bit1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift_amount2",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "bool1",
                "bVar14": "bool2",
                "bVar15": "bool3"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "bit_shift_operation_080003d4",
            "code": "\nulonglong bitShiftOperation_080003d4(uint input)\n\n{\n  uint result1;\n  uint result2;\n  int bitsToShift;\n  uint shiftAmt;\n  uint temp;\n  bool isNegative;\n  bool isZero;\n  bool carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  bitsToShift = LZCOUNT(input);\n  shiftAmt = bitsToShift + 0x15;\n  carry = SBORROW4(shiftAmt,0x20);\n  result2 = bitsToShift - 0xb;\n  isNegative = (int)result2 < 0;\n  isZero = result2 == 0;\n  if (shiftAmt < 0x20) {\n    carry = SCARRY4(result2,0xc);\n    isNegative = false;\n    isZero = bitsToShift + 1 == 0;\n    result2 = shiftAmt;\n    if (!isZero && carry == false) {\n      result1 = input << shiftAmt;\n      input = input >> (0xcU - (bitsToShift + 1) & 0xff);\n      goto endLabel;\n    }\n  }\n  if (isZero || isNegative != carry) {\n    temp = 0x20 - result2;\n  }\n  input = input << (result2 & 0xff);\n  if (isZero || isNegative != carry) {\n    input = input | 0U >> (temp & 0xff);\n  }\n  if (isZero || isNegative != carry) {\n    result1 = 0 << (result2 & 0xff);\n  }\nendLabel:\n  if (shiftAmt < 0x433) {\n    return CONCAT44(input + (0x432 - shiftAmt) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - shiftAmt);\n  if (0x1e < (int)result2) {\n    return (ulonglong)(input >> (result2 - 0x1f & 0xff));\n  }\n  bitsToShift = result2 - 0x13;\n  if (bitsToShift == 0 || bitsToShift < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return CONCAT44(input >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | input << (0x20 - result2 & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - bitsToShift) & 0xff) | input << (0xcU - bitsToShift & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "bit_shift_operation_080003d4",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "bitsToShift",
                "uVar4": "shiftAmt",
                "in_r12": "temp",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "carry",
                "LAB_080002e0": "endLabel"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "reverse_bits_080003f4",
            "code": "\nulonglong reverseBits_080003f4(uint input)\n\n{\n  uint outputUpper;\n  uint tempVar;\n  uint shiftCount;\n  int leadingZeros;\n  uint finalShiftCount;\n  uint signBit;\n  uint mask;\n  bool isNegative;\n  bool isZero;\n  bool borrowFlag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  tempVar = input;\n  if ((int)signBit < 0) {\n    tempVar = -input;\n  }\n  outputUpper = 0;\n  leadingZeros = LZCOUNT(tempVar);\n  finalShiftCount = leadingZeros + 0x15;\n  borrowFlag = SBORROW4(finalShiftCount,0x20);\n  shiftCount = leadingZeros - 0xb;\n  isNegative = (int)shiftCount < 0;\n  isZero = shiftCount == 0;\n  if (finalShiftCount < 0x20) {\n    borrowFlag = SCARRY4(shiftCount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftCount = finalShiftCount;\n    if (!isZero && borrowFlag == false) {\n      outputUpper = tempVar << finalShiftCount;\n      tempVar = tempVar >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isNegative != borrowFlag) {\n    mask = 0x20 - shiftCount;\n  }\n  tempVar = tempVar << (shiftCount & 0xff);\n  if (isZero || isNegative != borrowFlag) {\n    tempVar = tempVar | 0U >> (mask & 0xff);\n  }\n  if (isZero || isNegative != borrowFlag) {\n    outputUpper = 0 << (shiftCount & 0xff);\n  }\nLAB_080002e0:\n  if (finalShiftCount < 0x433) {\n    return CONCAT44(tempVar + (0x432 - finalShiftCount) * 0x100000 | signBit,outputUpper);\n  }\n  shiftCount = ~(0x432 - finalShiftCount);\n  if (0x1e < (int)shiftCount) {\n    return CONCAT44(input,tempVar >> (shiftCount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftCount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftCount - 0x1f,0xc)) {\n    shiftCount = shiftCount + 1;\n    return CONCAT44(signBit | tempVar >> (shiftCount & 0xff),\n                    outputUpper >> (shiftCount & 0xff) | tempVar << (0x20 - shiftCount & 0xff));\n  }\n  return CONCAT44(input,outputUpper >> (0x20 - (0xcU - leadingZeros) & 0xff) | tempVar << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "reverse_bits_080003f4",
                "param_1": "input",
                "uVar1": "outputUpper",
                "uVar2": "tempVar",
                "uVar3": "shiftCount",
                "iVar4": "leadingZeros",
                "uVar5": "finalShiftCount",
                "uVar6": "signBit",
                "in_r12": "mask",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "borrowFlag"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "convert_unsigned_to_long_long_08000418",
            "code": "\nulonglong convertUnsignedToLongLong_08000418(uint inputValue,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint firstBit;\n  uint tempVar;\n  uint outputHigh;\n  uint shiftedInput;\n  uint twiceInput;\n  int bitCount;\n  uint tempVar2;\n  uint mask;\n  bool isZero;\n  bool isFull;\n  bool negativeBit;\n  \n  twiceInput = inputValue << 1;\n  isFull = twiceInput == 0;\n  firstBit = (uint)((inputValue & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)twiceInput >> 3) >> 1;\n  outputHigh = firstBit | shiftedInput;\n  inputValue = inputValue << 0x1d;\n  if (!isFull) {\n    param4 = twiceInput & 0xff000000;\n    isFull = param4 == 0;\n  }\n  if (!isFull) {\n    isFull = param4 == 0xff000000;\n  }\n  if (!isFull) {\n    return CONCAT44(outputHigh,inputValue) ^ 0x3800000000000000;\n  }\n  if ((twiceInput & 0xffffff) == 0) {\n    return CONCAT44(outputHigh,inputValue);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(outputHigh,inputValue) | 0x8000000000000;\n  }\n  tempVar = inputValue;\n  twiceInput = shiftedInput;\n  if (shiftedInput == 0) {\n    tempVar = 0;\n    twiceInput = inputValue;\n  }\n  bitCount = LZCOUNT(twiceInput);\n  if (shiftedInput == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  tempVar2 = bitCount - 0xb;\n  negativeBit = SBORROW4(tempVar2,0x20);\n  shiftedInput = bitCount - 0x2b;\n  isFull = (int)shiftedInput < 0;\n  isZero = shiftedInput == 0;\n  if ((int)tempVar2 < 0x20) {\n    negativeBit = SCARRY4(shiftedInput,0xc);\n    bitCount = bitCount + -0x1f;\n    isFull = bitCount < 0;\n    isZero = bitCount == 0;\n    shiftedInput = tempVar2;\n    if (!isZero && isFull == negativeBit) {\n      tempVar = twiceInput << (tempVar2 & 0xff);\n      twiceInput = twiceInput >> (0xcU - bitCount & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isFull != negativeBit) {\n    mask = 0x20 - shiftedInput;\n  }\n  twiceInput = twiceInput << (shiftedInput & 0xff);\n  if (isZero || isFull != negativeBit) {\n    twiceInput = twiceInput | tempVar >> (mask & 0xff);\n  }\n  if (isZero || isFull != negativeBit) {\n    tempVar = tempVar << (shiftedInput & 0xff);\n  }\nLAB_080002e0:\n  if ((int)tempVar2 < 0x381) {\n    return CONCAT44(twiceInput + (0x380 - tempVar2) * 0x100000 | firstBit,tempVar);\n  }\n  shiftedInput = ~(0x380 - tempVar2);\n  if (0x1e < (int)shiftedInput) {\n    return CONCAT44(outputHigh,twiceInput >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftedInput - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftedInput - 0x1f,0xc)) {\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(firstBit | twiceInput >> (shiftedInput & 0xff),\n                    tempVar >> (shiftedInput & 0xff) | twiceInput << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(outputHigh,tempVar >> (0x20 - (0xcU - bitCount) & 0xff) | twiceInput << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "convert_unsigned_to_long_long_08000418",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "firstBit",
                "uVar2": "tempVar",
                "uVar3": "outputHigh",
                "uVar4": "shiftedInput",
                "uVar5": "twiceInput",
                "iVar6": "bitCount",
                "uVar7": "tempVar2",
                "in_r12": "mask",
                "bVar8": "isZero",
                "bVar9": "isFull",
                "bVar10": "negativeBit"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_result_080004c8",
            "code": "\nulonglong calculate_result_080004c8(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  ulonglong result;\n  longlong temp_var;\n  uint temp_var_1;\n  uint temp_var_2;\n  int temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong combined_input_params;\n  \n  combined_input_params = CONCAT44(input_param_2,input_param_1);\n  temp_var_6 = 0x7ff;\n  temp_var_2 = input_param_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_var_2 == 0;\n  if (!flag_1) {\n    temp_var_5 = input_param_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_var_5 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_var_2 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_var_5 == 0x7ff;\n  }\n  if (flag_1) {\n    combined_input_params = FUN_080006a4();\n  }\n  temp_var_1 = (uint)(combined_input_params >> 0x20);\n  temp_var_3 = temp_var_2 + temp_var_5;\n  temp_var_2 = temp_var_1 ^ input_param_4;\n  temp_var_1 = temp_var_1 & ~(temp_var_6 << 0x15);\n  input_param_4 = input_param_4 & ~(temp_var_6 << 0x15);\n  flag_1 = ((uint)combined_input_params | temp_var_1 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (input_param_3 | input_param_4 << 0xc) == 0;\n  }\n  temp_var_1 = temp_var_1 | 0x100000;\n  input_param_4 = input_param_4 | 0x100000;\n  if (flag_1) {\n    input_param_3 = (uint)combined_input_params | input_param_3;\n    input_param_4 = (temp_var_2 & 0x80000000 | temp_var_1) ^ input_param_4;\n    temp_var_2 = temp_var_6 >> 1;\n    flag_3 = SBORROW4(temp_var_3,temp_var_2);\n    temp_var_4 = temp_var_3 - temp_var_2;\n    flag_1 = temp_var_4 == 0;\n    temp_var_1 = temp_var_4;\n    if (!flag_1 && (int)temp_var_2 <= temp_var_3) {\n      flag_3 = SBORROW4(temp_var_6,temp_var_4);\n      temp_var_1 = temp_var_6 - temp_var_4;\n      flag_1 = temp_var_6 == temp_var_4;\n    }\n    if (!flag_1 && (int)temp_var_1 < 0 == flag_3) {\n      input_param_4 = input_param_4 | temp_var_4 * 0x100000;\n    }\n    if (!flag_1 && (int)temp_var_1 < 0 == flag_3) {\n      return CONCAT44(input_param_4,input_param_3);\n    }\n    input_param_4 = input_param_4 | 0x100000;\n    temp_var_6 = 0;\n    flag_3 = SBORROW4(temp_var_4,1);\n    temp_var_4 = temp_var_4 - 1;\n    flag_1 = temp_var_4 == 0;\n    temp_var_2 = temp_var_4;\n  }\n  else {\n    result = (combined_input_params & 0xffffffff) * (ulonglong)input_param_3;\n    combined_input_params = (combined_input_params & 0xffffffff) * (ulonglong)input_param_4 +\n             (ulonglong)temp_var_1 * (ulonglong)input_param_3 + (result >> 0x20);\n    temp_var_7 = (uint)combined_input_params;\n    temp_var = (ulonglong)temp_var_1 * (ulonglong)input_param_4 + (combined_input_params >> 0x20);\n    temp_var_6 = (uint)temp_var;\n    temp_var_1 = (uint)((ulonglong)temp_var >> 0x20);\n    if ((int)result != 0) {\n      temp_var_7 = temp_var_7 | 1;\n    }\n    temp_var_4 = (temp_var_3 + -0x3ff) - (uint)(temp_var_1 < 0x200);\n    if (temp_var_1 < 0x200) {\n      flag_1 = (temp_var_7 & 0x80000000) != 0;\n      temp_var_7 = temp_var_7 << 1;\n      temp_var = CONCAT44(temp_var_1 * 2 + (uint)(CARRY4(temp_var_6,temp_var_6) || CARRY4(temp_var_6 * 2,(uint)flag_1)),\n                       temp_var_6 * 2 + (uint)flag_1);\n    }\n    input_param_4 = temp_var_2 & 0x80000000 | (int)((ulonglong)temp_var >> 0x20) << 0xb | (uint)temp_var >> 0x15;\n    input_param_3 = (uint)temp_var << 0xb | temp_var_7 >> 0x15;\n    temp_var_6 = temp_var_7 * 0x800;\n    flag_2 = 0xfc < temp_var_4;\n    flag_3 = SBORROW4(temp_var_4,0xfd);\n    temp_var_1 = temp_var_4 - 0xfd;\n    flag_1 = temp_var_1 == 0;\n    temp_var_2 = temp_var_1;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < temp_var_1;\n      flag_3 = SBORROW4(temp_var_1,0x700);\n      temp_var_2 = temp_var_4 - 0x7fd;\n      flag_1 = temp_var_1 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < temp_var_6;\n      if (temp_var_6 == 0x80000000) {\n        flag_1 = (temp_var_7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param_4 + temp_var_4 * 0x100000 + (uint)CARRY4(input_param_3,(uint)flag_1),input_param_3 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)temp_var_2 < 0 == flag_3) {\n    return (ulonglong)(input_param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(temp_var_4,0x36);\n  flag_1 = (int)(temp_var_4 + 0x36) < 0;\n  flag_3 = temp_var_4 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    input_param_3 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    input_param_4 = input_param_4 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(input_param_4,input_param_3);\n  }\n  temp_var_2 = -temp_var_4;\n  temp_var_1 = temp_var_2 - 0x20;\n  if (0x1f < (int)temp_var_2) {\n    temp_var_4 = input_param_3 >> (temp_var_1 & 0xff) | input_param_4 << (0x20 - temp_var_1 & 0xff);\n    temp_var_2 = (input_param_4 >> (temp_var_1 & 0xff) & ~((input_param_4 & 0x80000000) >> (temp_var_1 & 0xff))) -\n            ((int)temp_var_4 >> 0x1f);\n    if ((temp_var_6 | input_param_3 << (0x20 - temp_var_1 & 0xff) | temp_var_4 << 1) == 0) {\n      temp_var_2 = temp_var_2 & ~(temp_var_4 >> 0x1f);\n    }\n    return CONCAT44(input_param_4,temp_var_2) & 0x80000000ffffffff;\n  }\n  temp_var_3 = temp_var_2 - 0x14;\n  if (temp_var_3 == 0 || temp_var_3 < 0 != SCARRY4(temp_var_1,0xc)) {\n    temp_var_7 = input_param_3 << (temp_var_4 + 0x20 & 0xff);\n    temp_var_1 = input_param_3 >> (temp_var_2 & 0xff) | input_param_4 << (temp_var_4 + 0x20 & 0xff);\n    temp_var_4 = temp_var_1 + -((int)temp_var_7 >> 0x1f);\n    if ((temp_var_6 | temp_var_7 << 1) == 0) {\n      temp_var_4 = temp_var_4 & ~(temp_var_7 >> 0x1f);\n    }\n    return CONCAT44((input_param_4 & 0x80000000) +\n                    ((input_param_4 & 0x7fffffff) >> (temp_var_2 & 0xff)) +\n                    (uint)CARRY4(temp_var_1,-((int)temp_var_7 >> 0x1f)),temp_var_4);\n  }\n  temp_var_2 = 0xc - temp_var_3;\n  temp_var_4 = input_param_3 << (temp_var_2 & 0xff);\n  temp_var_2 = input_param_3 >> (0x20 - temp_var_2 & 0xff) | input_param_4 << (temp_var_2 & 0xff);\n  temp_var_1 = temp_var_2 + -((int)temp_var_4 >> 0x1f);\n  if ((temp_var_6 | temp_var_4 << 1) == 0) {\n    temp_var_1 = temp_var_1 & ~(temp_var_4 >> 0x1f);\n  }\n  return CONCAT44((input_param_4 & 0x80000000) + (uint)CARRY4(temp_var_2,-((int)temp_var_4 >> 0x1f)),temp_var_1);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result",
                "lVar2": "temp_var",
                "uVar3": "temp_var_1",
                "uVar4": "temp_var_2",
                "iVar5": "temp_var_3",
                "uVar6": "temp_var_4",
                "unaff_r5": "temp_var_5",
                "uVar7": "temp_var_6",
                "uVar8": "temp_var_7",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "combined_input_params"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "reverse_bitwise_080006a4",
            "code": "\nulonglong reverse_bitwise_080006a4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  bool flag_1;\n  \n  temp_3 = temp_5 & input_4 >> 0x14;\n  if (temp_2 != temp_5 && temp_3 != temp_5) {\n    flag_1 = (input_1 | input_2 << 1) == 0;\n    if (!flag_1) {\n      flag_1 = (input_3 | input_4 << 1) == 0;\n    }\n    if (flag_1) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_2 == 0) {\n      temp_4 = input_2 & 0x80000000;\n      do {\n        temp_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_4;\n      if (temp_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  flag_1 = (input_1 | input_2 << 1) == 0;\n  if (flag_1) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!flag_1) {\n    flag_1 = (input_3 | input_4 << 1) == 0;\n  }\n  temp_4 = input_2;\n  if (((!flag_1) && ((temp_2 != temp_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_3 != temp_5 || (input_1 = input_3, temp_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "reverse_bitwise_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "temp_5",
                "bVar4": "flag_1"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculateFloatingPoint_0800071c(undefined4 signBit,uint exponent,uint mantissaHighBit,uint mantissaLowBits)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int difference;\n  uint resultExponent;\n  uint unaff_r5;\n  uint tempVar10;\n  uint resultSignificand;\n  uint tempVar12;\n  uint constant;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(exponent,signBit);\n  constant = 0x7ff;\n  tempVar7 = exponent >> 0x14 & 0x7ff;\n  flag1 = tempVar7 == 0;\n  if (!flag1) {\n    unaff_r5 = mantissaLowBits >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = tempVar7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_0800088a();\n  }\n  resultExponent = (uint)((ulonglong)result >> 0x20);\n  resultSignificand = (uint)result;\n  difference = tempVar7 - unaff_r5;\n  if ((mantissaHighBit | mantissaLowBits << 0xc) == 0) {\n    tempVar7 = (resultExponent ^ mantissaLowBits) & 0x80000000 | resultExponent & 0xfffff;\n    flag3 = SCARRY4(difference,constant >> 1);\n    resultExponent = difference + (constant >> 1);\n    flag1 = (int)resultExponent < 0;\n    flag2 = resultExponent == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(constant,resultExponent);\n      flag1 = (int)(constant - resultExponent) < 0;\n      flag2 = constant == resultExponent;\n    }\n    if (!flag2 && flag1 == flag3) {\n      tempVar7 = tempVar7 | resultExponent * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(tempVar7,resultSignificand);\n    }\n    tempVar7 = tempVar7 | 0x100000;\n    constant = 0;\n    flag2 = SBORROW4(resultExponent,1);\n    resultExponent = resultExponent - 1;\n    flag1 = resultExponent == 0;\n    tempVar3 = resultExponent;\n  }\n  else {\n    tempVar3 = (mantissaLowBits << 0xc) >> 4 | 0x10000000 | mantissaHighBit >> 0x18;\n    constant = mantissaHighBit << 8;\n    tempVar10 = (resultExponent << 0xc) >> 4 | 0x10000000 | resultSignificand >> 0x18;\n    resultSignificand = resultSignificand * 0x100;\n    tempVar7 = (resultExponent ^ mantissaLowBits) & 0x80000000;\n    flag1 = tempVar3 <= tempVar10;\n    if (tempVar10 == tempVar3) {\n      flag1 = constant <= resultSignificand;\n    }\n    difference = difference + (uint)flag1;\n    resultExponent = difference + 0x3fd;\n    if (flag1 == false) {\n      tempVar3 = tempVar3 >> 1;\n      constant = (uint)((mantissaHighBit >> 0x18 & 1) != 0) << 0x1f | constant >> 1;\n    }\n    tempVar12 = resultSignificand - constant;\n    tempVar10 = (tempVar10 - tempVar3) - (uint)(resultSignificand < constant);\n    tempVar4 = tempVar3 >> 1;\n    tempVar1 = (uint)((tempVar3 & 1) != 0) << 0x1f | constant >> 1;\n    resultSignificand = 0x100000;\n    tempVar3 = 0x80000;\n    while( true ) {\n      flag1 = tempVar1 <= tempVar12;\n      if (tempVar4 < tempVar10 || tempVar10 - tempVar4 < (uint)flag1) {\n        tempVar12 = tempVar12 - tempVar1;\n        resultSignificand = resultSignificand | tempVar3;\n        tempVar10 = (tempVar10 - tempVar4) - (uint)!flag1;\n      }\n      tempVar5 = tempVar4 >> 1;\n      tempVar1 = (uint)((tempVar4 & 1) != 0) << 0x1f | tempVar1 >> 1;\n      flag2 = tempVar1 <= tempVar12;\n      flag1 = tempVar10 - tempVar5 < (uint)flag2;\n      constant = tempVar10;\n      if (tempVar5 < tempVar10 || flag1) {\n        tempVar12 = tempVar12 - tempVar1;\n        constant = (tempVar10 - tempVar5) - (uint)!flag2;\n      }\n      if (tempVar5 < tempVar10 || flag1) {\n        resultSignificand = resultSignificand | tempVar3 >> 1;\n      }\n      tempVar10 = tempVar4 >> 2;\n      tempVar2 = (uint)((tempVar5 & 1) != 0) << 0x1f | tempVar1 >> 1;\n      flag2 = tempVar2 <= tempVar12;\n      flag1 = constant - tempVar10 < (uint)flag2;\n      tempVar5 = constant;\n      if (tempVar10 < constant || flag1) {\n        tempVar12 = tempVar12 - tempVar2;\n        tempVar5 = (constant - tempVar10) - (uint)!flag2;\n      }\n      if (tempVar10 < constant || flag1) {\n        resultSignificand = resultSignificand | tempVar3 >> 2;\n      }\n      tempVar6 = tempVar4 >> 3;\n      tempVar1 = (uint)((tempVar10 & 1) != 0) << 0x1f | tempVar2 >> 1;\n      flag2 = tempVar1 <= tempVar12;\n      flag1 = tempVar5 - tempVar6 < (uint)flag2;\n      tempVar10 = tempVar5;\n      if (tempVar6 < tempVar5 || flag1) {\n        tempVar12 = tempVar12 - tempVar1;\n        tempVar10 = (tempVar5 - tempVar6) - (uint)!flag2;\n      }\n      if (tempVar6 < tempVar5 || flag1) {\n        resultSignificand = resultSignificand | tempVar3 >> 3;\n      }\n      constant = tempVar10 | tempVar12;\n      if (constant == 0) break;\n      tempVar10 = tempVar10 << 4 | tempVar12 >> 0x1c;\n      tempVar12 = tempVar12 << 4;\n      tempVar4 = tempVar4 & 0xfffffff8 | tempVar1 >> 0x1d;\n      tempVar1 = (tempVar2 >> 1) << 3;\n      tempVar3 = tempVar3 >> 4;\n      if (tempVar3 == 0) {\n        tempVar6 = tempVar4;\n        if ((tempVar7 & 0x100000) != 0) goto LAB_0800083a;\n        tempVar7 = tempVar7 | resultSignificand;\n        resultSignificand = 0;\n        tempVar3 = 0x80000000;\n      }\n    }\n    if ((tempVar7 & 0x100000) == 0) {\n      tempVar7 = tempVar7 | resultSignificand;\n      resultSignificand = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < resultExponent;\n    flag2 = SBORROW4(resultExponent,0xfd);\n    tempVar4 = difference + 0x300;\n    flag1 = tempVar4 == 0;\n    tempVar3 = tempVar4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < tempVar4;\n      flag2 = SBORROW4(tempVar4,0x700);\n      tempVar3 = difference - 0x400;\n      flag1 = tempVar4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = tempVar6 <= tempVar10;\n      if (tempVar10 == tempVar6) {\n        flag1 = tempVar1 <= tempVar12;\n      }\n      if (tempVar10 == tempVar6 && tempVar12 == tempVar1) {\n        flag1 = (resultSignificand & 1) != 0;\n      }\n      return CONCAT44(tempVar7 + resultExponent * 0x100000 + (uint)CARRY4(resultSignificand,(uint)flag1),resultSignificand + flag1);\n    }\n  }\n  if (!flag1 && (int)tempVar3 < 0 == flag2) {\n    return (ulonglong)(tempVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(resultExponent,0x36);\n  flag1 = (int)(resultExponent + 0x36) < 0;\n  flag2 = resultExponent == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    resultSignificand = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    tempVar7 = tempVar7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(tempVar7,resultSignificand);\n  }\n  tempVar3 = -resultExponent;\n  tempVar10 = tempVar3 - 0x20;\n  if (0x1f < (int)tempVar3) {\n    tempVar3 = resultSignificand >> (tempVar10 & 0xff) | tempVar7 << (0x20 - tempVar10 & 0xff);\n    resultExponent = (tempVar7 >> (tempVar10 & 0xff) & ~((tempVar7 & 0x80000000) >> (tempVar10 & 0xff))) -\n            ((int)tempVar3 >> 0x1f);\n    if ((constant | resultSignificand << (0x20 - tempVar10 & 0xff) | tempVar3 << 1) == 0) {\n      resultExponent = resultExponent & ~(tempVar3 >> 0x1f);\n    }\n    return CONCAT44(tempVar7,resultExponent) & 0x80000000ffffffff;\n  }\n  difference = tempVar3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(tempVar10,0xc)) {\n    resultExponent = 0xc - difference;\n    tempVar3 = resultSignificand << (resultExponent & 0xff);\n    resultSignificand = resultSignificand >> (0x20 - resultExponent & 0xff) | tempVar7 << (resultExponent & 0xff);\n    resultExponent = resultSignificand + -((int)tempVar3 >> 0x1f);\n    if ((constant | tempVar3 << 1) == 0) {\n      resultExponent = resultExponent & ~(tempVar3 >> 0x1f);\n    }\n    return CONCAT44((tempVar7 & 0x80000000) + (uint)CARRY4(resultSignificand,-((int)tempVar3 >> 0x1f)),resultExponent);\n  }\n  tempVar10 = resultSignificand << (resultExponent + 0x20 & 0xff);\n  resultSignificand = resultSignificand >> (tempVar3 & 0xff) | tempVar7 << (resultExponent + 0x20 & 0xff);\n  resultExponent = resultSignificand + -((int)tempVar10 >> 0x1f);\n  if ((constant | tempVar10 << 1) == 0) {\n    resultExponent = resultExponent & ~(tempVar10 >> 0x1f);\n  }\n  return CONCAT44((tempVar7 & 0x80000000) +\n                  ((tempVar7 & 0x7fffffff) >> (tempVar3 & 0xff)) +\n                  (uint)CARRY4(resultSignificand,-((int)tempVar10 >> 0x1f)),resultExponent);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "signBit",
                "param_2": "exponent",
                "param_3": "mantissaHighBit",
                "param_4": "mantissaLowBits",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "iVar8": "difference",
                "uVar9": "resultExponent",
                "uVar10": "tempVar10",
                "uVar11": "resultSignificand",
                "uVar12": "tempVar12",
                "uVar13": "constant",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_floating_point_number_0800088a",
            "code": "\nulonglong calculateFloatingPointNumber_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint temp2;\n  uint constant;\n  bool isZero;\n  \n  bit2 = constant & input4 >> 0x14;\n  temp2 = input2;\n  if (temp1 != constant || bit2 != constant) {\n    if (temp1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp2 = input4, bit2 != constant)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      input1 = input3;\n      temp2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (temp1 == 0) {\n          temp2 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp2;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_floating_point_number_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "bit2",
                "uVar3": "temp2",
                "in_r12": "constant",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_equality_and_comparison_080008fc",
            "code": "\nuint checkEqualityAndComparison_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isGreater;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isGreater = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isGreater = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isGreater) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_equality_and_comparison_080008fc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isGreater"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_function_08000978",
            "code": "\nvoid executeFunction_08000978(undefined4 argument1,undefined4 argument2,undefined4 argument3,undefined4 argument4)\n\n{\n  FUN_08000988(argument3,argument4,argument1,argument2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_function_08000978",
                "param_1": "argument1",
                "param_2": "argument2",
                "param_3": "argument3",
                "param_4": "argument4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "initialize_08000988",
            "code": "\nundefined4 initialize_08000988(undefined4 input_value)\n\n{\n  FUN_080008fc();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000988": "initialize_08000988",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_if_initialized_08000998",
            "code": "\nbool checkIfInitialized_08000998(void)\n\n{\n  char isInitialized;\n  \n  FUN_08000988();\n  return isInitialized != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_if_initialized_08000998",
                "in_ZR": "isInitialized"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_end_of_input_080009ac",
            "code": "\nbool checkIfEndOfInput_080009ac(void)\n\n{\n  char inputCharacter;\n  \n  FUN_08000988();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_end_of_input_080009ac",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_cy_and_zr_080009c0",
            "code": "\nbool check_CY_and_ZR_080009c0(void)\n\n{\n  undefined is_zero_flag;\n  undefined is_carry_flag;\n  \n  FUN_08000988();\n  return !(bool)is_carry_flag || (bool)is_zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_cy_and_zr_080009c0",
                "in_ZR": "is_zero_flag",
                "in_CY": "is_carry_flag"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_zero_or_carry_flag_080009d4",
            "code": "\nbool checkZeroOrCarryFlag_080009d4(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  FUN_08000978();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_zero_or_carry_flag_080009d4",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "is_input_empty_080009e8",
            "code": "\nbool isInputEmpty_080009e8(void)\n\n{\n  char inputCharacter;\n  \n  FUN_08000978();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "is_input_empty_080009e8",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_float_080009fc",
            "code": "\nuint calculateFloat_080009fc(uint inputFloat,uint inputBits)\n\n{\n  uint result;\n  uint temp;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan70000000;\n  \n  temp = inputBits * 2;\n  isLessThan70000000 = temp < 0x70000000;\n  temp2 = temp + 0x90000000;\n  result = temp2;\n  if (!isLessThan70000000) {\n    temp3 = temp + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan70000000 && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan70000000 || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((inputBits & 0x40000000) != 0) {\n      if (((int)temp >> 0x15 == -1) && ((inputFloat | inputBits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputBits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return inputBits & 0x80000000;\n    }\n    temp = 0x18 - (temp + 0x92e00000 >> 0x15);\n    result = inputFloat >> (temp & 0xff);\n    if (inputFloat << (0x20 - temp & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = inputBits & 0x1fffff | 0x100000;\n    inputFloat = result | temp2 << (0x20 - temp & 0xff);\n    temp2 = (temp2 >> (temp & 0xff)) << 1;\n  }\n  result = (inputBits & 0x80000000 | inputFloat >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputFloat * 8);\n  if (inputFloat * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_float_080009fc",
                "param_1": "inputFloat",
                "param_2": "inputBits",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan70000000"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_floating_point_08000aa4",
            "code": "\nuint calculateFloatingPoint_08000aa4(uint inputA,uint inputB,undefined4 inputC,uint inputD)\n\n{\n  int shiftedA;\n  int shiftedB;\n  uint xoredA;\n  uint xoredB;\n  uint shiftedA;\n  uint result;\n  uint difference;\n  bool isEqual;\n  \n  xoredA = inputB ^ 0x80000000;\n  shiftedA = inputA << 1;\n  isEqual = shiftedA == 0;\n  if (!isEqual) {\n    inputD = inputB << 1;\n    isEqual = inputD == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedA == inputD;\n  }\n  shiftedA = (int)shiftedA >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedA == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)inputD >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedB = (int)(inputB << 1) >> 0x18;\n    if (shiftedA == -1 || shiftedB == -1) {\n      shiftedA = xoredA;\n      if (shiftedA == -1) {\n        shiftedA = inputA;\n      }\n      if (shiftedA != -1 || shiftedB != -1) {\n        xoredA = shiftedA;\n      }\n      isEqual = (shiftedA & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (xoredA & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedA == xoredA;\n      }\n      if (!isEqual) {\n        shiftedA = shiftedA | 0x400000;\n      }\n      return shiftedA;\n    }\n    if (((inputA ^ xoredA) & 0x7fffffff) != 0) {\n      if (shiftedA == 0) {\n        inputA = xoredA;\n      }\n      return inputA;\n    }\n    if (inputA != xoredA) {\n      return 0;\n    }\n    if ((shiftedA & 0xff000000) == 0) {\n      xoredA = inputA << 1;\n      if ((inputA & 0x80000000) != 0) {\n        xoredA = xoredA | 0x80000000;\n      }\n      return xoredA;\n    }\n    if (shiftedA < 0xfe000000) {\n      return inputA + 0x800000;\n    }\n    inputA = inputA & 0x80000000;\nLAB_08000bde:\n    return inputA | 0x7f800000;\n  }\n  shiftedA = shiftedA >> 0x18;\n  inputD = inputD >> 0x18;\n  difference = inputD - shiftedA;\n  isEqual = difference != 0;\n  result = shiftedA;\n  if (isEqual && shiftedA <= inputD) {\n    result = shiftedA + difference;\n  }\n  if (isEqual && shiftedA <= inputD) {\n    xoredA = xoredA ^ inputA;\n  }\n  if (isEqual && shiftedA <= inputD) {\n    inputA = inputA ^ xoredA;\n  }\n  if (isEqual && shiftedA <= inputD) {\n    xoredA = xoredA ^ inputA;\n  }\n  if (inputD < shiftedA) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputA;\n  }\n  shiftedA = inputA & 0xffffff | 0x800000;\n  if ((inputA & 0x80000000) != 0) {\n    shiftedA = -shiftedA;\n  }\n  xoredB = xoredA & 0xffffff | 0x800000;\n  if ((xoredA & 0x80000000) != 0) {\n    xoredB = -xoredB;\n  }\n  if (result == difference) {\n    xoredB = xoredB ^ 0x800000;\n    if (result == 0) {\n      shiftedA = shiftedA ^ 0x800000;\n      result = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedA = shiftedA + ((int)xoredB >> (difference & 0xff));\n  xoredB = xoredB << (0x20 - difference & 0xff);\n  inputA = shiftedA & 0x80000000;\n  if ((int)shiftedA < 0) {\n    isEqual = xoredB != 0;\n    xoredB = -xoredB;\n    shiftedA = -shiftedA - (uint)isEqual;\n  }\n  if (shiftedA < 0x800000) {\n    xoredA = xoredB & 0x80000000;\n    xoredB = xoredB << 1;\n    shiftedA = shiftedA * 2 + (uint)(xoredA != 0);\n    xoredA = result - 2;\n    if ((shiftedA & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedA) - 8;\n      shiftedA = shiftedA << (difference & 0xff);\n      if ((int)xoredA < (int)difference) {\n        shiftedA = shiftedA >> (-(xoredA - difference) & 0xff);\n      }\n      else {\n        shiftedA = shiftedA + (xoredA - difference) * 0x800000;\n      }\n      return shiftedA | inputA;\n    }\n  }\n  else {\n    xoredA = result - 1;\n    if (0xffffff < shiftedA) {\n      xoredA = shiftedA & 1;\n      shiftedA = shiftedA >> 1;\n      xoredB = (uint)(xoredA != 0) << 0x1f | xoredB >> 1;\n      xoredA = result;\n      if (0xfd < result) goto LAB_08000bde;\n    }\n  }\n  shiftedA = shiftedA + xoredA * 0x800000 + (uint)(0x7fffffff < xoredB);\n  if (xoredB == 0x80000000) {\n    shiftedA = shiftedA & 0xfffffffe;\n  }\n  return shiftedA | inputA;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_floating_point_08000aa4",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "param_4": "inputD",
                "iVar1": "shiftedA",
                "iVar2": "shiftedB",
                "uVar3": "xoredA",
                "uVar4": "xoredB",
                "uVar5": "shiftedA",
                "uVar6": "result",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_float_08000aa8",
            "code": "\nuint calculateFloat_08000aa8(uint inputValue1,uint inputValue2,undefined4 precision,uint roundingMode)\n\n{\n  int intValue1;\n  int intValue2;\n  uint mantissa1;\n  uint mantissa2;\n  uint exponent;\n  uint difference;\n  bool isZero;\n  \n  mantissa2 = inputValue1 << 1;\n  isZero = mantissa2 == 0;\n  if (!isZero) {\n    roundingMode = inputValue2 << 1;\n    isZero = roundingMode == 0;\n  }\n  if (!isZero) {\n    isZero = mantissa2 == roundingMode;\n  }\n  intValue1 = (int)mantissa2 >> 0x18;\n  if (!isZero) {\n    isZero = intValue1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)roundingMode >> 0x18 == -1;\n  }\n  if (isZero) {\n    intValue2 = (int)(inputValue2 << 1) >> 0x18;\n    if (intValue1 == -1 || intValue2 == -1) {\n      mantissa2 = inputValue2;\n      if (intValue1 == -1) {\n        mantissa2 = inputValue1;\n      }\n      if (intValue1 != -1 || intValue2 != -1) {\n        inputValue2 = mantissa2;\n      }\n      isZero = (mantissa2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (inputValue2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = mantissa2 == inputValue2;\n      }\n      if (!isZero) {\n        mantissa2 = mantissa2 | 0x400000;\n      }\n      return mantissa2;\n    }\n    if (((inputValue1 ^ inputValue2) & 0x7fffffff) != 0) {\n      if (mantissa2 == 0) {\n        inputValue1 = inputValue2;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != inputValue2) {\n      return 0;\n    }\n    if ((mantissa2 & 0xff000000) == 0) {\n      mantissa2 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        mantissa2 = mantissa2 | 0x80000000;\n      }\n      return mantissa2;\n    }\n    if (mantissa2 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_08000bde:\n    return inputValue1 | 0x7f800000;\n  }\n  mantissa2 = mantissa2 >> 0x18;\n  roundingMode = roundingMode >> 0x18;\n  difference = roundingMode - mantissa2;\n  isZero = difference != 0;\n  exponent = mantissa2;\n  if (isZero && mantissa2 <= roundingMode) {\n    exponent = mantissa2 + difference;\n  }\n  if (isZero && mantissa2 <= roundingMode) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (isZero && mantissa2 <= roundingMode) {\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  if (isZero && mantissa2 <= roundingMode) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (roundingMode < mantissa2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputValue1;\n  }\n  mantissa2 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    mantissa2 = -mantissa2;\n  }\n  mantissa1 = inputValue2 & 0xffffff | 0x800000;\n  if ((inputValue2 & 0x80000000) != 0) {\n    mantissa1 = -mantissa1;\n  }\n  if (exponent == difference) {\n    mantissa1 = mantissa1 ^ 0x800000;\n    if (exponent == 0) {\n      mantissa2 = mantissa2 ^ 0x800000;\n      exponent = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mantissa2 = mantissa2 + ((int)mantissa1 >> (difference & 0xff));\n  mantissa1 = mantissa1 << (0x20 - difference & 0xff);\n  inputValue1 = mantissa2 & 0x80000000;\n  if ((int)mantissa2 < 0) {\n    isZero = mantissa1 != 0;\n    mantissa1 = -mantissa1;\n    mantissa2 = -mantissa2 - (uint)isZero;\n  }\n  if (mantissa2 < 0x800000) {\n    difference = mantissa1 & 0x80000000;\n    mantissa1 = mantissa1 << 1;\n    mantissa2 = mantissa2 * 2 + (uint)(difference != 0);\n    difference = exponent - 2;\n    if ((mantissa2 & 0x800000) == 0) {\n      exponent = leadingZeroCount(mantissa2) - 8;\n      mantissa2 = mantissa2 << (exponent & 0xff);\n      if ((int)difference < (int)exponent) {\n        mantissa2 = mantissa2 >> (-(difference - exponent) & 0xff);\n      }\n      else {\n        mantissa2 = mantissa2 + (difference - exponent) * 0x800000;\n      }\n      return mantissa2 | inputValue1;\n    }\n  }\n  else {\n    difference = exponent - 1;\n    if (0xffffff < mantissa2) {\n      difference = mantissa2 & 1;\n      mantissa2 = mantissa2 >> 1;\n      mantissa1 = (uint)(difference != 0) << 0x1f | mantissa1 >> 1;\n      difference = exponent;\n      if (0xfd < exponent) goto LAB_08000bde;\n    }\n  }\n  mantissa2 = mantissa2 + difference * 0x800000 + (uint)(0x7fffffff < mantissa1);\n  if (mantissa1 == 0x80000000) {\n    mantissa2 = mantissa2 & 0xfffffffe;\n  }\n  return mantissa2 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "precision",
                "param_4": "roundingMode",
                "iVar1": "intValue1",
                "iVar2": "intValue2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "exponent",
                "uVar6": "difference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "count_and_calculate_08000c08",
            "code": "\nuint countAndCalculate_08000c08(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int tempValue;\n  uint bitCheck;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  tempValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    bitCheck = 0 << (shiftAmount & 0xff);\n    leadingZeros = tempValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < bitCheck);\n    if (bitCheck == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = tempValue + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "count_and_calculate_08000c08",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "tempValue",
                "uVar4": "bitCheck"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "decode_and_offset_08000c10",
            "code": "\nuint decode_and_offset_08000c10(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_flag;\n  int offset;\n  \n  sign_flag = input_value & 0x80000000;\n  if ((int)sign_flag < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shift_amount = leading_zeros - 8;\n  offset = ((sign_flag | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_flag = offset + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_flag = sign_flag & 0xfffffffe;\n    }\n    return sign_flag;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  sign_flag = offset + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_flag = sign_flag & ~(shift_amount >> 0x1f);\n  }\n  return sign_flag;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "decode_and_offset_08000c10",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_flag",
                "iVar4": "offset",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_08000cb8",
            "code": "\nuint calculateFloatingPoint_08000cb8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong lVar1;\n  uint result;\n  uint expInput1;\n  int temp1;\n  int temp2;\n  uint mantissa;\n  int temp3;\n  uint expResult;\n  bool isZero;\n  bool isNegative;\n  \n  expInput1 = input1 >> 0x17 & 0xff;\n  isZero = expInput1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = expInput1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (expInput1 == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      expResult = result;\n      if (((isZero) || ((expInput1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (expResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return expResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = expInput1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      expInput1 = expInput1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  temp1 = expInput1 + param4;\n  expResult = input1 ^ input2;\n  expInput1 = input1 << 9;\n  isZero = expInput1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (expInput1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = expResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(temp1,0x7f);\n    temp2 = temp1 + -0x7f;\n    isZero = temp2 == 0;\n    temp3 = temp2;\n    if (!isZero && 0x7e < temp1) {\n      isNegative = SBORROW4(0xff,temp2);\n      temp3 = 0xff - temp2;\n      isZero = temp2 == 0xff;\n    }\n    if (!isZero && temp3 < 0 == isNegative) {\n      result = result | temp2 * 0x800000;\n    }\n    if (!isZero && temp3 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    mantissa = 0;\n    isNegative = SBORROW4(temp2,1);\n    expResult = temp1 - 0x80;\n    isZero = expResult == 0;\n    expInput1 = expResult;\n  }\n  else {\n    lVar1 = (ulonglong)(expInput1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    mantissa = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | mantissa >> 0x1f;\n      mantissa = mantissa << 1;\n    }\n    result = expResult & 0x80000000 | result;\n    expResult = (temp1 + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(expResult,0xfd);\n    isZero = expResult == 0xfd;\n    expInput1 = expResult - 0xfd;\n    if (expResult < 0xfe) {\n      result = result + expResult * 0x800000 + (uint)(0x7fffffff < mantissa);\n      if (mantissa == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)expInput1 < 0 != isNegative) {\n    isZero = (int)(expResult + 0x19) < 0;\n    if (expResult == 0xffffffe7 || isZero != SCARRY4(expResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (expResult != 0xffffffe7 && isZero == SCARRY4(expResult,0x19)) {\n      expInput1 = (result << 1) >> (-expResult & 0xff);\n      expResult = result << (expResult + 0x20 & 0xff);\n      expInput1 = ((uint)((result & 0x80000000) != 0) << 0x1f | expInput1 >> 1) + (uint)((byte)expInput1 & 1);\n      if ((mantissa | expResult << 1) == 0) {\n        expInput1 = expInput1 & ~(expResult >> 0x1f);\n      }\n      return expInput1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_08000cb8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "expInput1",
                "uVar6": "mantissa",
                "uVar8": "expResult",
                "iVar4": "temp1",
                "iVar5": "temp2",
                "iVar7": "temp3",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_floating_point_08000e20",
            "code": "\nuint calculateFloatingPoint_08000e20(uint operand1,uint operand2,undefined4 param3,uint param4)\n\n{\n  uint result;\n  uint exponent1;\n  int exponentDiff;\n  uint exponent2;\n  int exponentSum;\n  uint result;\n  bool isZero;\n  bool isOverflow;\n  bool isUnderflow;\n  \n  exponent1 = operand1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    param4 = operand2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = operand2 >> 0x17 & 0xff;\n    result = operand1;\n    if (exponent1 == 0xff) {\n      if (((operand1 & 0x7fffff) != 0) || (result = operand2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = operand2;\n        if ((operand2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (operand1 ^ operand2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (operand1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (operand2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent1 == 0;\n        result = operand1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand1 = operand1 << 1;\n            isZero = (operand1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent1 = exponent1 - 1;\n        }\n        operand1 = operand1 | result;\n        isZero = param4 == 0;\n        result = operand2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand2 = operand2 << 1;\n            isZero = (operand2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        operand2 = operand2 | result;\n        goto LAB_08000e38;\n      }\n      if ((operand1 & 0x7fffffff) == 0) {\n        if ((operand2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    operand1 = operand1 ^ operand2;\n  }\n  else {\nLAB_08000e38:\n    exponentDiff = exponent1 - param4;\n    if (operand2 << 9 == 0) {\n      operand1 = (operand1 ^ operand2) & 0x80000000 | operand1 & 0x7fffff;\n      isUnderflow = SCARRY4(exponentDiff,0x7f);\n      exponentSum = exponentDiff + 0x7f;\n      isZero = exponentSum < 0;\n      isOverflow = exponentSum == 0;\n      if (!isOverflow && isZero == isUnderflow) {\n        isUnderflow = SBORROW4(0xff,exponentSum);\n        isZero = 0xff - exponentSum < 0;\n        isOverflow = exponentSum == 0xff;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        operand1 = operand1 | exponentSum * 0x800000;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        return operand1;\n      }\n      operand1 = operand1 | 0x800000;\n      exponent1 = 0;\n      isOverflow = SBORROW4(exponentSum,1);\n      exponent2 = exponentDiff + 0x7e;\n      isZero = exponent2 == 0;\n      result = exponent2;\n    }\n    else {\n      result = (operand2 << 9) >> 4 | 0x10000000;\n      exponent1 = (operand1 << 9) >> 4 | 0x10000000;\n      operand1 = (operand1 ^ operand2) & 0x80000000;\n      isZero = result <= exponent1;\n      if (!isZero) {\n        exponent1 = exponent1 << 1;\n      }\n      exponent2 = exponentDiff + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (result <= exponent1) {\n          exponent1 = exponent1 - result;\n          operand1 = operand1 | result;\n        }\n        isZero = result >> 1 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (result >> 1);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 1;\n        }\n        isZero = result >> 2 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (result >> 2);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 2;\n        }\n        isZero = result >> 3 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (result >> 3);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        isZero = exponent1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isOverflow = SBORROW4(exponent2,0xfd);\n      isZero = exponent2 == 0xfd;\n      result = exponent2 - 0xfd;\n      if (exponent2 < 0xfe) {\n        operand1 = operand1 + exponent2 * 0x800000 + (uint)(result <= exponent1);\n        if (exponent1 - result == 0) {\n          operand1 = operand1 & 0xfffffffe;\n        }\n        return operand1;\n      }\n    }\n    if (isZero || (int)result < 0 != isOverflow) {\n      isZero = (int)(exponent2 + 0x19) < 0;\n      if (exponent2 == 0xffffffe7 || isZero != SCARRY4(exponent2,0x19)) {\n        operand1 = operand1 & 0x80000000;\n      }\n      if (exponent2 == 0xffffffe7 || isZero != SCARRY4(exponent2,0x19)) {\n        return operand1;\n      }\n      result = (operand1 << 1) >> (-exponent2 & 0xff);\n      exponent2 = operand1 << (exponent2 + 0x20 & 0xff);\n      result = ((uint)((operand1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | exponent2 << 1) == 0) {\n        result = result & ~(exponent2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return operand1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_08000e20",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "exponent1",
                "iVar3": "exponentDiff",
                "uVar4": "exponent2",
                "iVar5": "exponentSum",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isOverflow",
                "bVar9": "isUnderflow"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_result_08000f68",
            "code": "\nuint calculate_result_08000f68(uint input_value_1,uint input_value_2)\n\n{\n  bool is_positive_result;\n  uint doubled_input_value_1;\n  uint doubled_input_value_2;\n  uint combined_result;\n  bool is_combined_result_zero;\n  \n  doubled_input_value_1 = input_value_1 * 2;\n  doubled_input_value_2 = input_value_2 * 2;\n  if (((int)doubled_input_value_1 >> 0x18 == -1 || (int)doubled_input_value_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_value_1 >> 0x18 == -1 && ((input_value_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_value_2 >> 0x18 == -1 && ((input_value_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_result = doubled_input_value_1 | input_value_2 & 0x7fffffff;\n  is_combined_result_zero = combined_result == 0;\n  if (!is_combined_result_zero) {\n    combined_result = input_value_1 ^ input_value_2;\n    is_combined_result_zero = combined_result == 0;\n  }\n  is_positive_result = -1 < (int)combined_result;\n  if (is_positive_result) {\n    input_value_1 = doubled_input_value_1 + input_value_2 * -2;\n    is_combined_result_zero = input_value_1 == 0;\n  }\n  if ((is_positive_result && doubled_input_value_2 <= doubled_input_value_1) && !is_combined_result_zero) {\n    input_value_1 = (int)input_value_2 >> 0x1f;\n  }\n  if (!is_positive_result || doubled_input_value_2 > doubled_input_value_1) {\n    input_value_1 = ~((int)input_value_2 >> 0x1f);\n  }\n  if (!is_combined_result_zero) {\n    input_value_1 = input_value_1 | 1;\n  }\n  return input_value_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "bVar1": "is_positive_result",
                "uVar2": "doubled_input_value_1",
                "uVar3": "doubled_input_value_2",
                "uVar4": "combined_result",
                "bVar5": "is_combined_result_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "copy_parameters_08000fc8",
            "code": "\nvoid copyParameters_08000fc8(undefined4 dest,undefined4 src)\n\n{\n  FUN_08000fd0(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "copy_parameters_08000fc8",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_and_return_values_08000fd0",
            "code": "\nundefined8 concatenate_and_return_values_08000fd0(undefined4 first_value,undefined4 second_value)\n\n{\n  FUN_08000f68();\n  return CONCAT44(second_value,first_value);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_and_return_values_08000fd0",
                "param_1": "first_value",
                "param_2": "second_value"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "check_if_input_is_empty_08000ff4",
            "code": "\nbool check_if_input_is_empty_08000ff4(void)\n\n{\n  char input_char;\n  \n  FUN_08000fd0();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "check_if_input_is_empty_08000ff4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "is_input_empty_08001030",
            "code": "\nbool isInputEmpty_08001030(void)\n\n{\n  char inputCharacter;\n  \n  FUN_08000fc8();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "is_input_empty_08001030",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "calculate_shift_amount_08001044",
            "code": "\nuint calculateShiftAmount_08001044(uint value)\n\n{\n  uint shiftAmount;\n  \n  if (((value & 0x80000000) != 0) || (value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((value << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (value << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "calculate_shift_amount_08001044",
                "param_1": "value",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPointer;\n  undefined4 *destIndex;\n  undefined4 *srcIndex;\n  uint remainingSize;\n  uint loopCount;\n  bool isLooping;\n  \n  destIndex = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      loopCount = size - 4;\n      if (3 < size) {\n        do {\n          destPointer = source;\n          srcIndex = destIndex;\n          isLooping = loopCount != 0;\n          loopCount = loopCount - 1;\n          *(undefined *)srcIndex = *(undefined *)destPointer;\n          destIndex = (undefined4 *)((int)srcIndex + 1);\n          source = (undefined4 *)((int)destPointer + 1);\n        } while (isLooping);\n        *(undefined *)(undefined4 *)((int)srcIndex + 1) =\n             *(undefined *)(undefined4 *)((int)destPointer + 1);\n        *(undefined *)((int)srcIndex + 2) = *(undefined *)((int)destPointer + 2);\n        *(undefined *)((int)srcIndex + 3) = *(undefined *)((int)destPointer + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      loopCount = 4 - ((uint)destination & 3);\n      size = size - loopCount;\n      destPointer = destination;\n      srcIndex = source;\n      if (((uint)destination & 1) != 0) {\n        srcIndex = (undefined4 *)((int)source + 1);\n        destPointer = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destIndex = destPointer;\n      source = srcIndex;\n      if ((loopCount & 2) != 0) {\n        source = (undefined4 *)((int)srcIndex + 2);\n        destIndex = (undefined4 *)((int)destPointer + 2);\n        *(undefined2 *)destPointer = *(undefined2 *)srcIndex;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destIndex = *source;\n    destIndex[1] = source[1];\n    destIndex[2] = source[2];\n    destIndex[3] = source[3];\n    destIndex[4] = source[4];\n    destIndex[5] = source[5];\n    destIndex[6] = source[6];\n    destIndex[7] = source[7];\n    destIndex[8] = source[8];\n    destIndex[9] = source[9];\n    destIndex[10] = source[10];\n    destIndex[0xb] = source[0xb];\n    destIndex[0xc] = source[0xc];\n    destIndex[0xd] = source[0xd];\n    destIndex[0xe] = source[0xe];\n    destIndex[0xf] = source[0xf];\n    destIndex = destIndex + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destIndex = *source;\n      destIndex[1] = source[1];\n      destIndex[2] = source[2];\n      destIndex[3] = source[3];\n      destIndex = destIndex + 4;\n      source = source + 4;\n      isLooping = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isLooping);\n  }\n  loopCount = remainingSize + 0xc;\n  srcIndex = destIndex;\n  destPointer = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPointer + 1;\n      *srcIndex = *destPointer;\n      isLooping = 3 < loopCount;\n      loopCount = loopCount - 4;\n      destIndex = srcIndex + 1;\n      srcIndex = srcIndex + 1;\n      destPointer = source;\n    } while (isLooping);\n  }\nLAB_08001108:\n  if (loopCount + 4 != 0) {\n    destPointer = destIndex;\n    srcIndex = source;\n    if ((loopCount & 1) != 0) {\n      srcIndex = (undefined4 *)((int)source + 1);\n      destPointer = (undefined4 *)((int)destIndex + 1);\n      *(undefined *)destIndex = *(undefined *)source;\n    }\n    if ((loopCount + 4 & 2) != 0) {\n      *(undefined2 *)destPointer = *(undefined2 *)srcIndex;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPointer",
                "puVar2": "destIndex",
                "puVar3": "srcIndex",
                "uVar4": "remainingSize",
                "uVar5": "loopCount",
                "bVar6": "isLooping"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_parameters_08001170",
            "code": "\nundefined4 check_parameters_08001170(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_parameters_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_signed_division_0800119c",
            "code": "\nuint calculateSignedDivision_0800119c(uint dividend,uint divisor)\n\n{\n  uint quotient;\n  int scaledDivisor;\n  uint shiftAmount;\n  \n  scaledDivisor = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < scaledDivisor) {\n      return 0;\n    }\n    quotient = scaledDivisor >> 0x15;\n    shiftAmount = -quotient - 0x3e1;\n    if (quotient < 0xfffffc20 && shiftAmount != 0) {\n      quotient = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shiftAmount & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_signed_division_0800119c",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "scaledDivisor",
                "uVar3": "shiftAmount"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "check_params_and_return_080011ec",
            "code": "\nundefined8 checkParamsAndReturn_080011ec(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = FUN_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "check_params_and_return_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "divide_with_remainder_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 divideWithRemainder_0800121c(uint dividend,uint divisor,uint quotient,uint remainder,uint *result)\n\n{\n  UNRECOVERED_JUMPTABLE *UNRECOVERED_JUMPTABLE;\n  ulonglong unsignedProduct;\n  uint q1;\n  uint r1;\n  uint q2;\n  int bitShift;\n  uint quotientAndRemainder;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint q3;\n  uint temp;\n  uint q4;\n  bool carry;\n  undefined8 result;\n  \n  if (remainder == 0) {\n    if (divisor < quotient) {\n      bitShift = LZCOUNT(quotient);\n      uVar7 = quotient;\n      if (bitShift != 0) {\n        uVar7 = quotient << bitShift;\n        divisor = dividend >> (0x20U - bitShift & 0xff) | divisor << bitShift;\n        dividend = dividend << bitShift;\n      }\n      temp = uVar7 >> 0x10;\n      uVar8 = divisor / temp;\n      q3 = uVar8 * (uVar7 & 0xffff);\n      quotientAndRemainder = dividend >> 0x10 | (divisor - temp * uVar8) * 0x10000;\n      r1 = uVar8;\n      if (quotientAndRemainder <= q3 && q3 - quotientAndRemainder != 0) {\n        carry = CARRY4(uVar7,quotientAndRemainder);\n        quotientAndRemainder = uVar7 + quotientAndRemainder;\n        r1 = uVar8 - 1;\n        if ((carry == false) && (quotientAndRemainder <= q3 && q3 - quotientAndRemainder != 0)) {\n          r1 = uVar8 - 2;\n          quotientAndRemainder = quotientAndRemainder + uVar7;\n        }\n      }\n      q1 = (quotientAndRemainder - q3) / temp;\n      q2 = q1 * (uVar7 & 0xffff);\n      uVar8 = dividend & 0xffff | ((quotientAndRemainder - q3) - temp * q1) * 0x10000;\n      quotientAndRemainder = q1;\n      if (uVar8 <= q2 && q2 - uVar8 != 0) {\n        carry = CARRY4(uVar7,uVar8);\n        uVar8 = uVar7 + uVar8;\n        quotientAndRemainder = q1 - 1;\n        if ((carry == false) && (uVar8 <= q2 && q2 - uVar8 != 0)) {\n          quotientAndRemainder = q1 - 2;\n          uVar8 = uVar8 + uVar7;\n        }\n      }\n      quotientAndRemainder = quotientAndRemainder | r1 << 0x10;\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - q2;\n    }\n    else {\n      if (quotient == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (UNRECOVERED_JUMPTABLE *)software_udf(0xff,0x8001302);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      bitShift = LZCOUNT(quotient);\n      if (bitShift == 0) {\n        puVar9 = (uint *)0x1;\n        divisor = divisor - quotient;\n        temp = quotient >> 0x10;\n        q1 = quotient & 0xffff;\n        uVar7 = quotient;\n      }\n      else {\n        uVar7 = quotient << bitShift;\n        quotientAndRemainder = divisor >> (0x20U - bitShift & 0xff);\n        temp = uVar7 >> 0x10;\n        q3 = quotientAndRemainder / temp;\n        q1 = uVar7 & 0xffff;\n        q2 = q3 * q1;\n        uVar8 = dividend >> (0x20U - bitShift & 0xff) | divisor << bitShift;\n        r1 = uVar8 >> 0x10 | (quotientAndRemainder - temp * q3) * 0x10000;\n        dividend = dividend << bitShift;\n        quotientAndRemainder = q3;\n        if (r1 <= q2 && q2 - r1 != 0) {\n          carry = CARRY4(uVar7,r1);\n          r1 = uVar7 + r1;\n          quotientAndRemainder = q3 - 1;\n          if ((carry == false) && (r1 <= q2 && q2 - r1 != 0)) {\n            quotientAndRemainder = q3 - 2;\n            r1 = r1 + uVar7;\n          }\n        }\n        q3 = (r1 - q2) / temp;\n        q4 = q3 * q1;\n        divisor = uVar8 & 0xffff | ((r1 - q2) - temp * q3) * 0x10000;\n        r1 = q3;\n        if (divisor <= q4 && q4 - divisor != 0) {\n          carry = CARRY4(uVar7,divisor);\n          divisor = uVar7 + divisor;\n          r1 = q3 - 1;\n          if ((carry == false) && (divisor <= q4 && q4 - divisor != 0)) {\n            r1 = q3 - 2;\n            divisor = divisor + uVar7;\n          }\n        }\n        divisor = divisor - q4;\n        puVar9 = (uint *)(r1 | quotientAndRemainder << 0x10);\n      }\n      q3 = divisor / temp;\n      quotientAndRemainder = q1 * q3;\n      uVar8 = dividend >> 0x10 | (divisor - temp * q3) * 0x10000;\n      r1 = q3;\n      if (uVar8 <= quotientAndRemainder && quotientAndRemainder - uVar8 != 0) {\n        carry = CARRY4(uVar7,uVar8);\n        uVar8 = uVar7 + uVar8;\n        r1 = q3 - 1;\n        if ((carry == false) && (uVar8 <= quotientAndRemainder && quotientAndRemainder - uVar8 != 0)) {\n          r1 = q3 - 2;\n          uVar8 = uVar8 + uVar7;\n        }\n      }\n      q3 = (uVar8 - quotientAndRemainder) / temp;\n      q1 = q1 * q3;\n      uVar8 = dividend & 0xffff | ((uVar8 - quotientAndRemainder) - temp * q3) * 0x10000;\n      quotientAndRemainder = q3;\n      if (uVar8 <= q1 && q1 - uVar8 != 0) {\n        carry = CARRY4(uVar7,uVar8);\n        uVar8 = uVar7 + uVar8;\n        quotientAndRemainder = q3 - 1;\n        if ((carry == false) && (uVar8 <= q1 && q1 - uVar8 != 0)) {\n          quotientAndRemainder = q3 - 2;\n          uVar8 = uVar8 + uVar7;\n        }\n      }\n      uVar8 = uVar8 - q1;\n      quotientAndRemainder = quotientAndRemainder | r1 << 0x10;\n    }\n    if (result != (uint *)0x0) {\n      *result = uVar8 >> LZCOUNT(quotient);\n      result[1] = 0;\n    }\n  }\n  else {\n    puVar9 = result;\n    if (divisor < remainder) {\n      if (result != (uint *)0x0) {\n        *result = dividend;\n        result[1] = divisor;\n        return 0;\n      }\n      quotientAndRemainder = 0;\n    }\n    else {\n      bitShift = LZCOUNT(remainder);\n      if (bitShift == 0) {\n        if ((remainder < divisor) || (quotient <= dividend)) {\n          carry = dividend < quotient;\n          dividend = dividend - quotient;\n          divisor = (divisor - remainder) - (uint)carry;\n          quotientAndRemainder = 1;\n        }\n        else {\n          quotientAndRemainder = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (result != (uint *)0x0) {\n          *result = dividend;\n          result[1] = divisor;\n        }\n      }\n      else {\n        uVar8 = 0x20 - bitShift;\n        q1 = quotient >> (uVar8 & 0xff) | remainder << bitShift;\n        uVar7 = divisor >> (uVar8 & 0xff);\n        q2 = q1 >> 0x10;\n        q3 = uVar7 / q2;\n        temp = q3 * (q1 & 0xffff);\n        quotientAndRemainder = divisor << bitShift | dividend >> (uVar8 & 0xff);\n        r1 = quotientAndRemainder >> 0x10 | (uVar7 - q2 * q3) * 0x10000;\n        dividend = dividend << bitShift;\n        uVar7 = q3;\n        if (r1 <= temp && temp - r1 != 0) {\n          carry = CARRY4(q1,r1);\n          r1 = q1 + r1;\n          uVar7 = q3 - 1;\n          if ((carry == false) && (r1 <= temp && temp - r1 != 0)) {\n            uVar7 = q3 - 2;\n            r1 = r1 + q1;\n          }\n        }\n        q3 = (r1 - temp) / q2;\n        q4 = q3 * (q1 & 0xffff);\n        r1 = quotientAndRemainder & 0xffff | ((r1 - temp) - q2 * q3) * 0x10000;\n        quotientAndRemainder = q3;\n        if (r1 <= q4 && q4 - r1 != 0) {\n          carry = CARRY4(q1,r1);\n          r1 = q1 + r1;\n          quotientAndRemainder = q3 - 1;\n          if ((carry == false) && (r1 <= q4 && q4 - r1 != 0)) {\n            quotientAndRemainder = q3 - 2;\n            r1 = r1 + q1;\n          }\n        }\n        quotientAndRemainder = quotientAndRemainder | uVar7 << 0x10;\n        unsignedProduct = (ulonglong)quotientAndRemainder * (ulonglong)(quotient << bitShift);\n        if (CONCAT44(r1 - q4,dividend) < unsignedProduct) {\n          quotientAndRemainder = quotientAndRemainder - 1;\n          unsignedProduct = unsignedProduct - CONCAT44(q1,quotient << bitShift);\n        }\n        if (result != (uint *)0x0) {\n          uVar7 = ((r1 - q4) - (int)(unsignedProduct >> 0x20)) - (uint)(dividend < (uint)unsignedProduct);\n          *result = uVar7 << (uVar8 & 0xff) | dividend - (uint)unsignedProduct >> bitShift;\n          result[1] = uVar7 >> bitShift;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,quotientAndRemainder);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "divide_with_remainder_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "result",
                "code": "UNRECOVERED_JUMPTABLE",
                "uVar1": "unsignedProduct",
                "uVar2": "q1",
                "uVar3": "r1",
                "uVar4": "q2",
                "iVar5": "bitShift",
                "uVar6": "quotientAndRemainder",
                "uVar10": "q3",
                "uVar11": "temp",
                "uVar12": "q4",
                "bVar13": "carry",
                "uVar14": "result"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_peripheral_080014f0",
            "code": "\n\n\nundefined4 initializePeripheral_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_peripheral_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "check_and_set_threshold_0800151c",
            "code": "\nundefined4 checkAndSetThreshold_0800151c(uint threshold)\n\n{\n  int result;\n  undefined4 status;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (threshold < 0x10) {\n      FUN_0800172a(0xffffffff,threshold,0);\n      status = 0;\n      DAT_20000000 = threshold;\n    }\n    else {\n      status = 1;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "check_and_set_threshold_0800151c",
                "param_1": "threshold",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increment_global_variable_0800157c",
            "code": "\nvoid incrementGlobalVariable_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increment_global_variable_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_dat_value_080015a0",
            "code": "\nundefined4 getDatValue_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_dat_value_080015a0"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "initialize_register_080015b4",
            "code": "\n\n\nvoid initializeRegister_080015b4(uint input)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "initialize_register_080015b4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_high_bits_080015fc",
            "code": "\n\n\nuint getHighBits_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_high_bits_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "update_memory_08001618",
            "code": "\nvoid updateMemory_08001618(byte inputByte,uint inputNumber)\n\n{\n  if ((character)inputByte < '\\0') {\n    *(character *)((inputByte & 0xf) + 0xe000ed14) = (character)((inputNumber & 0xff) << 4);\n  }\n  else {\n    *(character *)((character)inputByte + -0x1fff1c00) = (character)((inputNumber & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "update_memory_08001618",
                "param_1": "inputByte",
                "param_2": "inputNumber",
                "char": "character"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "apply_bitwise_operations_0800166c",
            "code": "\nuint applyBitwiseOperations_0800166c(uint input_1,uint input_2,uint input_3)\n\n{\n  uint remainingBits;\n  \n  input_1 = input_1 & 7;\n  remainingBits = 7 - input_1;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (input_1 + 4 < 7) {\n    input_1 = 0;\n  }\n  else {\n    input_1 = input_1 - 3;\n  }\n  return input_3 & ~(-1 << (input_1 & 0xff)) |\n         (~(-1 << (remainingBits & 0xff)) & input_2) << (input_1 & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "apply_bitwise_operations_0800166c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "remainingBits"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "validate_param_080016d0",
            "code": "\n\n\nbool validate_param_080016d0(int value)\n\n{\n  bool is_valid;\n  \n  is_valid = value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = value + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "validate_param_080016d0",
                "param_1": "value",
                "bVar1": "is_valid"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "initialize_application_08001714",
            "code": "\nvoid initializeApplication_08001714(undefined4 data)\n\n{\n  FUN_080015b4(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "initialize_application_08001714",
                "param_1": "data"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "process_data_0800172a",
            "code": "\nvoid processData_0800172a(char input,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,value1,value2);\n  FUN_08001618((int)input,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "extract_function_result_08001762",
            "code": "\nundefined4 extract_function_result_08001762(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  result = FUN_080016d0(input_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "extract_function_result_08001762",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flag_0800177c",
            "code": "\n\n\nvoid setFlag_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flag_0800177c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_application_080017b4",
            "code": "\nvoid initializeApplication_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_application_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bits_080017c4",
            "code": "\n\n\nvoid updateBits_080017c4(uint *bitsToUpdate,uint *bitsData)\n\n{\n  uint bitMask;\n  uint bitResult;\n  uint dataValue;\n  uint *bitsPointer;\n  int index;\n  uint updatedBits;\n  uint bitPosition;\n  \n  updatedBits = 0;\n  bitPosition = 0;\n  do {\n    if (0xf < bitPosition) {\n      return;\n    }\n    bitMask = 1 << (bitPosition & 0xff);\n    bitResult = *bitsData & bitMask;\n    if (bitResult == bitMask) {\n      dataValue = bitsData[1];\n      if (dataValue == 0x12) {\n        updatedBits = bitsData[3] + 0xc;\n      }\n      else if (dataValue < 0x13) {\n        if (dataValue == 2) {\n          updatedBits = bitsData[3] + 8;\n        }\n        else if (dataValue < 3) {\n          if (dataValue == 0) goto LAB_08001882;\n          if (dataValue == 1) {\n            updatedBits = bitsData[3];\n          }\n        }\n        else if (dataValue == 3) {\n          updatedBits = 0;\n        }\n        else if (dataValue == 0x11) {\n          updatedBits = bitsData[3] + 4;\n        }\n      }\n      else if (dataValue == 0x10210000) {\nLAB_08001882:\n        if (bitsData[2] == 0) {\n          updatedBits = 4;\n        }\n        else if (bitsData[2] == 1) {\n          updatedBits = 8;\n          bitsToUpdate[4] = bitMask;\n        }\n        else {\n          updatedBits = 8;\n          bitsToUpdate[5] = bitMask;\n        }\n      }\n      else if (dataValue < 0x10210001) {\n        if ((dataValue == 0x10110000) || (dataValue == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((dataValue == 0x10310000) || (dataValue == 0x10320000)) || (dataValue == 0x10220000))\n      goto LAB_08001882;\n      if (bitResult < 0x100) {\n        bitMask = bitPosition << 2;\n        bitsPointer = bitsToUpdate;\n      }\n      else {\n        bitsPointer = bitsToUpdate + 1;\n        bitMask = (bitPosition - 8) * 4;\n      }\n      *bitsPointer = *bitsPointer & ~(0xf << (bitMask & 0xff)) | updatedBits << (bitMask & 0xff);\n      if ((bitsData[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (bitsToUpdate == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (bitsToUpdate == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (bitsToUpdate == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (bitsToUpdate == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bitPosition & 3) << 2) |\n             ~(0xf << ((bitPosition & 3) << 2)) & *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000);\n        if ((bitsData[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitResult & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitResult | _DAT_40010400;\n        }\n        if ((bitsData[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitResult & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitResult | _DAT_40010404;\n        }\n        if ((bitsData[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitResult & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitResult | _DAT_40010408;\n        }\n        if ((bitsData[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitResult & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitResult | _DAT_4001040c;\n        }\n      }\n    }\n    bitPosition = bitPosition + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bits_080017c4",
                "param_1": "bitsToUpdate",
                "param_2": "bitsData",
                "uVar1": "bitMask",
                "uVar2": "bitResult",
                "uVar3": "dataValue",
                "puVar4": "bitsPointer",
                "iVar5": "index",
                "local_10": "updatedBits",
                "local_c": "bitPosition"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "set_param_value_08001a80",
            "code": "\nvoid setParamValue_08001a80(int paramAddress,ushort value,char isShifted)\n\n{\n  if (isShifted == '\\0') {\n    *(unsignedInt *)(paramAddress + 0x10) = (unsignedInt)value << 0x10;\n  }\n  else {\n    *(unsignedInt *)(paramAddress + 0x10) = (unsignedInt)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "paramAddress",
                "param_2": "value",
                "param_3": "isShifted",
                "uint": "unsignedInt"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_resource_limits_08001ab0",
            "code": "\nundefined4 calculateResourceLimits_08001ab0(uint **resourceLimits)\n\n{\n  uint totalResources;\n  char isWithinLimit;\n  undefined4 result;\n  uint limitMultiplier;\n  bool isZero;\n  \n  if (resourceLimits == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)resourceLimits + 0x3d) == '\\0') {\n      *(undefined *)(resourceLimits + 0xf) = 0;\n      FUNC_08001cb8(resourceLimits);\n    }\n    *(undefined *)((int)resourceLimits + 0x3d) = 0x24;\n    **resourceLimits = **resourceLimits & 0xfffffffe;\n    totalResources = FUN_08003518();\n    if (resourceLimits[1] < (uint *)0x186a1) {\n      limitMultiplier = totalResources;\n      if (totalResources < 2000000) {\n        limitMultiplier = 1;\n      }\n      isWithinLimit = (char)limitMultiplier;\n      if (1999999 < totalResources) {\n        isWithinLimit = '\\0';\n      }\n    }\n    else {\n      limitMultiplier = totalResources;\n      if (totalResources < 4000000) {\n        limitMultiplier = 1;\n      }\n      isWithinLimit = (char)limitMultiplier;\n      if (3999999 < totalResources) {\n        isWithinLimit = '\\0';\n      }\n    }\n    if (isWithinLimit == '\\0') {\n      limitMultiplier = totalResources / 1000000;\n      (*resourceLimits)[1] = limitMultiplier;\n      if ((uint *)0x186a0 < resourceLimits[1]) {\n        limitMultiplier = (limitMultiplier * 300) / 1000;\n      }\n      (*resourceLimits)[8] = limitMultiplier + 1;\n      if (resourceLimits[1] < (uint *)0x186a1) {\n        totalResources = (totalResources - 1) / (uint)((int)resourceLimits[1] << 1) + 1 & 0xfff;\n        if (totalResources < 4) {\n          totalResources = 4;\n        }\n      }\n      else {\n        if (resourceLimits[2] == (uint *)0x0) {\n          limitMultiplier = (totalResources - 1) / (uint)((int)resourceLimits[1] * 3) + 1 & 0xfff;\n          isZero = limitMultiplier == 0;\n          if (isZero) {\n            limitMultiplier = 1;\n          }\n          isWithinLimit = (char)limitMultiplier;\n          if (!isZero) {\n            isWithinLimit = '\\0';\n          }\n        }\n        else {\n          limitMultiplier = (totalResources - 1) / (uint)((int)resourceLimits[1] * 0x19) + 1 & 0xfff;\n          isZero = limitMultiplier == 0;\n          if (isZero) {\n            limitMultiplier = 1;\n          }\n          isWithinLimit = (char)limitMultiplier;\n          if (!isZero) {\n            isWithinLimit = '\\0';\n          }\n        }\n        if (isWithinLimit == '\\0') {\n          if (resourceLimits[2] == (uint *)0x0) {\n            totalResources = (totalResources - 1) / (uint)((int)resourceLimits[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            totalResources = (totalResources - 1) / (uint)((int)resourceLimits[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          totalResources = 1;\n        }\n      }\n      (*resourceLimits)[7] = totalResources;\n      **resourceLimits = (uint)resourceLimits[8] | (uint)resourceLimits[7];\n      (*resourceLimits)[2] = (uint)resourceLimits[3] | (uint)resourceLimits[4];\n      (*resourceLimits)[3] = (uint)resourceLimits[6] | (uint)resourceLimits[5];\n      **resourceLimits = **resourceLimits | 1;\n      resourceLimits[0x10] = (uint *)0x0;\n      *(undefined *)((int)resourceLimits + 0x3d) = 0x20;\n      resourceLimits[0xc] = (uint *)0x0;\n      *(undefined *)((int)resourceLimits + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_resource_limits_08001ab0",
                "param_1": "resourceLimits",
                "uVar1": "totalResources",
                "cVar2": "isWithinLimit",
                "uVar3": "result",
                "uVar4": "limitMultiplier",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "parse_input_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nparse_input_08001ccc(uint **input_data,undefined2 param_a,undefined2 param_b,undefined2 param_c,uint *param_buffer,\n            undefined2 param_d,undefined4 param_e)\n\n{\n  int some_value;\n  int another_value;\n  undefined4 result;\n  uint *ptr_buffer;\n  \n  some_value = FUN_080015a0();\n  if (*(char *)((int)input_data + 0x3d) == ' ') {\n    do {\n      if ((~(*input_data)[6] & 2) != 0) {\n        another_value = 0;\n        goto LAB_08001d9c;\n      }\n      another_value = FUN_080015a0();\n    } while ((uint)(another_value - some_value) < 0x1a);\n    input_data[0xc] = (uint *)0x0;\n    *(undefined *)((int)input_data + 0x3d) = 0x20;\n    *(undefined *)((int)input_data + 0x3e) = 0;\n    *(undefined *)(input_data + 0xf) = 0;\n    another_value = 3;\nLAB_08001d9c:\n    if (another_value == 0) {\n      if (*(char *)(input_data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(input_data + 0xf) = 1;\n        if ((**input_data & 1) != 1) {\n          **input_data = **input_data | 1;\n        }\n        **input_data = **input_data & 0xfffff7ff;\n        *(undefined *)((int)input_data + 0x3d) = 0x21;\n        *(undefined *)((int)input_data + 0x3e) = 0x40;\n        input_data[0x10] = (uint *)0x0;\n        input_data[9] = param_buffer;\n        *(undefined2 *)((int)input_data + 0x2a) = param_d;\n        input_data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n        another_value = FUN_08002640(input_data,param_a,param_b,param_c,param_e,some_value);\n        if (another_value == 0) {\n          while (*(short *)(input_data + 10) != 0) {\n            another_value = FUN_08002bb4(input_data,param_e,some_value);\n            if (another_value != 0) {\n              if (input_data[0x10] == (uint *)0x4) {\n                **input_data = **input_data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            ptr_buffer = input_data[9];\n            input_data[9] = (uint *)((int)ptr_buffer + 1);\n            (*input_data)[4] = (uint)*(byte *)ptr_buffer;\n            *(short *)(input_data + 10) = *(short *)(input_data + 10) + -1;\n            *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n            if ((((*input_data)[5] & 4) == 4) && (*(short *)(input_data + 10) != 0)) {\n              ptr_buffer = input_data[9];\n              input_data[9] = (uint *)((int)ptr_buffer + 1);\n              (*input_data)[4] = (uint)*(byte *)ptr_buffer;\n              *(short *)(input_data + 10) = *(short *)(input_data + 10) + -1;\n              *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n            }\n          }\n          some_value = FUN_08002c2e(input_data,param_e,some_value);\n          if (some_value == 0) {\n            **input_data = **input_data | 0x200;\n            *(undefined *)((int)input_data + 0x3d) = 0x20;\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            *(undefined *)(input_data + 0xf) = 0;\n            result = 0;\n          }\n          else if (input_data[0x10] == (uint *)0x4) {\n            **input_data = **input_data | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (input_data[0x10] == (uint *)0x4) {\n          *(undefined *)(input_data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(input_data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "parse_input_08001ccc",
                "param_1": "input_data",
                "param_2": "param_a",
                "param_3": "param_b",
                "param_4": "param_c",
                "param_5": "param_buffer",
                "param_6": "param_d",
                "param_7": "param_e",
                "iVar1": "some_value",
                "iVar2": "another_value",
                "uVar3": "result",
                "puVar4": "ptr_buffer"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **data,undefined2 param1,undefined2 param2,undefined2 param3,uint *param4,\n            undefined2 param5,uint param6)\n\n{\n  int result;\n  uint temp1;\n  int temp2;\n  undefined4 returnValue;\n  uint *temp3;\n  \n  result = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        temp2 = 0;\n        goto LAB_08002040;\n      }\n      temp2 = FUN_080015a0();\n    } while ((uint)(temp2 - result) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    temp2 = 3;\nLAB_08002040:\n    if (temp2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param4;\n        *(undefined2 *)((int)data + 0x2a) = param5;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        temp2 = FUN_080027f4(data,param1,param2,param3,param6,result);\n        if (temp2 == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disableIRQinterrupts();\n            **data = **data | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disableIRQinterrupts();\n            **data = **data & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                temp2 = FUN_08002ca8(data,param6,result);\n                if (temp2 != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                temp1 = (*data)[4];\n                temp3 = data[9];\n                data[9] = (uint *)((int)temp3 + 1);\n                *(char *)temp3 = (char)temp1;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    temp2 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param6 == 0xffffffff) ||\n                        ((param6 != 0 && (temp2 = FUN_080015a0(), (uint)(temp2 - result) <= param6)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                temp2 = 3;\nLAB_080022fa:\n                if (temp2 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **data = **data | 0x200;\n                temp1 = (*data)[4];\n                temp3 = data[9];\n                data[9] = (uint *)((int)temp3 + 1);\n                *(char *)temp3 = (char)temp1;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableIRQinterrupts();\n                temp1 = (*data)[4];\n                temp3 = data[9];\n                data[9] = (uint *)((int)temp3 + 1);\n                *(char *)temp3 = (char)temp1;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    temp2 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param6 == 0xffffffff) ||\n                        ((param6 != 0 && (temp2 = FUN_080015a0(), (uint)(temp2 - result) <= param6)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                temp2 = 3;\nLAB_08002418:\n                if (temp2 != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disableIRQinterrupts();\n                temp1 = (*data)[4];\n                temp3 = data[9];\n                data[9] = (uint *)((int)temp3 + 1);\n                *(char *)temp3 = (char)temp1;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    temp2 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param6 == 0xffffffff) ||\n                        ((param6 != 0 && (temp2 = FUN_080015a0(), (uint)(temp2 - result) <= param6)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                temp2 = 3;\nLAB_0800250a:\n                if (temp2 != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                temp1 = (*data)[4];\n                temp3 = data[9];\n                data[9] = (uint *)((int)temp3 + 1);\n                *(char *)temp3 = (char)temp1;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableIRQinterrupts();\n                temp1 = (*data)[4];\n                temp3 = data[9];\n                data[9] = (uint *)((int)temp3 + 1);\n                *(char *)temp3 = (char)temp1;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              temp2 = FUN_08002ca8(data,param6,result);\n              if (temp2 != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              temp1 = (*data)[4];\n              temp3 = data[9];\n              data[9] = (uint *)((int)temp3 + 1);\n              *(char *)temp3 = (char)temp1;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                temp1 = (*data)[4];\n                temp3 = data[9];\n                data[9] = (uint *)((int)temp3 + 1);\n                *(char *)temp3 = (char)temp1;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "iVar1": "result",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "uVar4": "returnValue",
                "puVar5": "temp3"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_status_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateStatus_08002640(uint **status,byte mod_flag,undefined2 mode,short byte_flag,uint limit,int offset)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **status = **status | 0x100;\n  do {\n    if ((~(*status)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - offset) <= limit))));\n  status[0xc] = (uint *)0x0;\n  *(undefined *)((int)status + 0x3d) = 0x20;\n  *(undefined *)((int)status + 0x3e) = 0;\n  *(undefined *)(status + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*status)[4] = mod_flag & 0xfe;\n    result = FUN_08002ad8(status,0x10002,limit,offset);\n    if (result == 0) {\n      result = FUN_08002bb4(status,limit,offset,(*status)[6]);\n      if (result == 0) {\n        if (byte_flag == 1) {\n          (*status)[4] = (uint)(byte)mode;\n        }\n        else {\n          (*status)[4] = (uint)(byte)((ushort)mode >> 8);\n          result = FUN_08002bb4(status,limit,offset);\n          if (result != 0) {\n            if (status[0x10] == (uint *)0x4) {\n              **status = **status | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*status)[4] = (uint)(byte)mode;\n        }\n        returnValue = 0;\n      }\n      else if (status[0x10] == (uint *)0x4) {\n        **status = **status | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (status[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_status_08002640",
                "param_1": "status",
                "param_2": "mod_flag",
                "param_3": "mode",
                "param_4": "byte_flag",
                "param_5": "limit",
                "param_6": "offset",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "process_input_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nprocessInput_080027f4(uint **inputPtr,byte byteVal,undefined2 shortVal,short condition,uint limit,int comparisonVal)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **inputPtr = **inputPtr | 0x400;\n  **inputPtr = **inputPtr | 0x100;\n  do {\n    if ((~(*inputPtr)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - comparisonVal) <= limit))));\n  inputPtr[0xc] = (uint *)0x0;\n  *(undefined *)((int)inputPtr + 0x3d) = 0x20;\n  *(undefined *)((int)inputPtr + 0x3e) = 0;\n  *(undefined *)(inputPtr + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*inputPtr)[4] = byteVal & 0xfe;\n    result = FUN_08002ad8(inputPtr,0x10002,limit,comparisonVal);\n    if (result == 0) {\n      result = FUN_08002bb4(inputPtr,limit,comparisonVal,(*inputPtr)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*inputPtr)[4] = (uint)(byte)shortVal;\n        }\n        else {\n          (*inputPtr)[4] = (uint)(byte)((ushort)shortVal >> 8);\n          result = FUN_08002bb4(inputPtr,limit,comparisonVal);\n          if (result != 0) {\n            if (inputPtr[0x10] == (uint *)0x4) {\n              **inputPtr = **inputPtr | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*inputPtr)[4] = (uint)(byte)shortVal;\n        }\n        result = FUN_08002bb4(inputPtr,limit,comparisonVal);\n        if (result == 0) {\n          **inputPtr = **inputPtr | 0x100;\n          do {\n            if ((~(*inputPtr)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = FUN_080015a0(), (uint)(result - comparisonVal) <= limit))));\n          inputPtr[0xc] = (uint *)0x0;\n          *(undefined *)((int)inputPtr + 0x3d) = 0x20;\n          *(undefined *)((int)inputPtr + 0x3e) = 0;\n          *(undefined *)(inputPtr + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*inputPtr)[4] = (uint)(byteVal | 1);\n            result = FUN_08002ad8(inputPtr,0x10002,limit,comparisonVal);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (inputPtr[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (inputPtr[0x10] == (uint *)0x4) {\n          **inputPtr = **inputPtr | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (inputPtr[0x10] == (uint *)0x4) {\n        **inputPtr = **inputPtr | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (inputPtr[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "process_input_080027f4",
                "param_1": "inputPtr",
                "param_2": "byteVal",
                "param_3": "shortVal",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "comparisonVal",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_values_08002ad8",
            "code": "\nundefined4 checkAndUpdateValues_08002ad8(uint **parameters,uint value1,uint value2,int value3)\n\n{\n  int result;\n  char isNonzero;\n  uint updatedValue;\n  bool isUpdated;\n  \n  do {\n    if ((value1 >> 0x10 & 0xff) == 1) {\n      updatedValue = value1 & ~(*parameters)[5] & 0xffff;\n      isUpdated = updatedValue != 0;\n      if (isUpdated) {\n        updatedValue = 1;\n      }\n      isNonzero = (char)updatedValue;\n      if (!isUpdated) {\n        isNonzero = '\\0';\n      }\n    }\n    else {\n      updatedValue = value1 & ~(*parameters)[6] & 0xffff;\n      isUpdated = updatedValue != 0;\n      if (isUpdated) {\n        updatedValue = 1;\n      }\n      isNonzero = (char)updatedValue;\n      if (!isUpdated) {\n        isNonzero = '\\0';\n      }\n    }\n    if (isNonzero == '\\0') {\n      return 0;\n    }\n    if (((*parameters)[5] & 0x400) == 0x400) {\n      **parameters = **parameters | 0x200;\n      (*parameters)[5] = 0xfffffbff;\n      parameters[0x10] = (uint *)0x4;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)(parameters + 0xf) = 0;\n      return 1;\n    }\n  } while ((value2 == 0xffffffff) ||\n          ((value2 != 0 && (result = FUN_080015a0(), (uint)(result - value3) <= value2))));\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  *(undefined *)(parameters + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_values_08002ad8",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result",
                "cVar2": "isNonzero",
                "uVar3": "updatedValue",
                "bVar4": "isUpdated"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_conditions_08002bb4",
            "code": "\nundefined4 checkConditions_08002bb4(int *ptrArray,uint param2,int param3)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*ptrArray + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = FUN_08002d3c(ptrArray);\n    if (result != 0) break;\n    if ((param2 != 0xffffffff) &&\n       ((param2 == 0 || (result = FUN_080015a0(), param2 < (uint)(result - param3))))) {\n      ptrArray[0x10] = ptrArray[0x10] | 0x20;\n      ptrArray[0xc] = 0;\n      *(undefined *)((int)ptrArray + 0x3d) = 0x20;\n      *(undefined *)(ptrArray + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_conditions_08002bb4",
                "param_1": "ptrArray",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_status_08002c2e",
            "code": "\nundefined4 checkStatus_08002c2e(int *data,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*data + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(data);\n    if (result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (result = FUN_080015a0(), size < (uint)(result - offset))))) {\n      data[0x10] = data[0x10] | 0x20;\n      data[0xc] = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_status_08002c2e",
                "param_1": "data",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_permission_08002ca8",
            "code": "\nundefined4 checkPermission_08002ca8(int *ptr,uint size,int start)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*ptr + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*ptr + 0x14) & 0x10) == 0x10) break;\n    if ((size == 0) || (result = FUN_080015a0(), size < (uint)(result - start))) {\n      ptr[0x10] = ptr[0x10] | 0x20;\n      *(undefined *)((int)ptr + 0x3d) = 0x20;\n      *(undefined *)(ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*ptr + 0x14) = 0xffffffef;\n  ptr[0x10] = 0;\n  ptr[0xc] = 0;\n  *(undefined *)((int)ptr + 0x3d) = 0x20;\n  *(undefined *)(ptr + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_permission_08002ca8",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "start",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_and_initialize_data_08002d3c",
            "code": "\nbool checkAndInitializeData_08002d3c(int *dataPointer)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*dataPointer + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*dataPointer + 0x14) = 0xfffffbff;\n    dataPointer[0x10] = 4;\n    dataPointer[0xc] = 0;\n    *(undefined *)(dataPointerInt + 0x3d) = 0x20;\n    *(undefined *)(dataPointer + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_and_initialize_data_08002d3c",
                "param_1": "dataPointer",
                "bVar1": "isFlagSet",
                "(int)param_1": "dataPointerInt"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_and_control_function_08002d98",
            "code": "\n\n\nundefined4 checkAndControlFunction_08002d98(uint *paramArray)\n\n{\n  int initialValue;\n  int currentValue;\n  undefined4 returnValue;\n  bool flag;\n  \n  if ((*paramArray & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (paramArray[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (paramArray[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (paramArray[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (paramArray[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (paramArray[1] == 0) {\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = FUN_080015a0();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = FUN_080015a0();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*paramArray & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (paramArray[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = paramArray[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (paramArray[4] == 0) {\n      _DAT_42420000 = 0;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = paramArray[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*paramArray & 8) != 0) {\n    if (paramArray[6] == 0) {\n      _DAT_42420480 = 0;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*paramArray & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = FUN_080015a0();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (paramArray[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (paramArray[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (paramArray[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (paramArray[3] == 0) {\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = FUN_080015a0();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = FUN_080015a0();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (paramArray[7] == 0) {\nLAB_0800324a:\n    returnValue = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    returnValue = 1;\n  }\n  else if (paramArray[7] == 2) {\n    _DAT_42420060 = 0;\n    initialValue = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (paramArray[8] == 0x10000) {\n          _DAT_40021004 = paramArray[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = paramArray[9] | paramArray[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentValue = FUN_080015a0();\n          if (2 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentValue = FUN_080015a0();\n    } while ((uint)(currentValue - initialValue) < 3);\n    returnValue = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialValue = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentValue = FUN_080015a0();\n    } while ((uint)(currentValue - initialValue) < 3);\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_and_control_function_08002d98",
                "param_1": "paramArray",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "returnValue",
                "bVar4": "flag"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "parse_and_set_parameters_08003260",
            "code": "\n\n\nundefined4 parseAndSetParameters_08003260(uint *paramArray,uint paramCount)\n\n{\n  int var1;\n  int var2;\n  uint uVar3;\n  undefined4 returnVal;\n  \n  if (((_DAT_40022000 & 7) < paramCount) &&\n     (_DAT_40022000 = paramCount | _DAT_40022000 & 0xfffffff8, paramCount != (paramCount & 7))) {\n    returnVal = 1;\n  }\n  else {\n    if ((*paramArray & 2) != 0) {\n      _DAT_40021004 = paramArray[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*paramArray & 1) == 0) {\nLAB_08003394:\n      if ((paramCount < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = paramCount | _DAT_40022000 & 0xfffffff8, paramCount != (paramCount & 7))) {\n        returnVal = 1;\n      }\n      else {\n        if ((*paramArray & 4) != 0) {\n          _DAT_40021004 = paramArray[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*paramArray & 8) != 0) {\n          _DAT_40021004 = paramArray[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        uVar3 = FUN_08003440();\n        DAT_20000018 = uVar3 >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        returnVal = 0;\n      }\n    }\n    else {\n      if (paramArray[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((paramArray[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = paramArray[1] | _DAT_40021004 & 0xfffffffc;\n      var1 = FUN_080015a0();\n      if (paramArray[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          var2 = FUN_080015a0();\n        } while ((uint)(var2 - var1) < 0x1389);\n        returnVal = 3;\n      }\n      else if (paramArray[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          var2 = FUN_080015a0();\n        } while ((uint)(var2 - var1) < 0x1389);\n        returnVal = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          var2 = FUN_080015a0();\n        } while ((uint)(var2 - var1) < 0x1389);\n        returnVal = 3;\n      }\n    }\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_08003260": "parse_and_set_parameters_08003260",
                "param_1": "paramArray",
                "param_2": "paramCount",
                "uVar4": "returnVal",
                "param_1[2]": "paramArray[2]",
                "param_1[3]": "paramArray[3]",
                "param_1[4]": "paramArray[4]",
                "param_1[1]": "paramArray[1]",
                "iVar1": "var1",
                "iVar2": "var2"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_timing_08003440",
            "code": "\n\n\nuint calculateTiming_08003440(void)\n\n{\n  undefined2 configValue;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint outputValue;\n  undefined4 tempValue;\n  uint local_14;\n  uint result;\n  uint tempCalculation;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  configValue = 0x201;\n  tempValue = 0;\n  tempCalculation = 0;\n  outputValue = 0;\n  result = 0;\n  local_14 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    result = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    outputValue = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      tempCalculation = outputValue * 4000000;\n    }\n    else {\n      tempCalculation = (outputValue * 8000000) / (uint)*(byte *)((int)&configValue + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    result = tempCalculation;\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_timing_08003440",
                "local_30": "configValue",
                "local_2c": "constant1",
                "uStack_28": "constant2",
                "uStack_24": "constant3",
                "uStack_20": "constant4",
                "local_1c": "outputValue",
                "local_18": "tempValue",
                "local_10": "result",
                "local_c": "tempCalculation"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_08003504",
            "code": "\nundefined4 get_data_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_08003504"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shifted_value_08003518",
            "code": "\n\n\nuint shiftedValue_08003518(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(offset *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shifted_value_08003518",
                "uVar1": "result",
                "sbyte": "offset"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "shift_right_by_offset_08003540",
            "code": "\n\n\nuint shiftRightByOffset_08003540(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(shiftOffset *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "shift_right_by_offset_08003540",
                "uVar1": "result",
                "sbyte": "shiftOffset"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int inputValue)\n\n{\n  bool isCounterNonZero;\n  int delayCounter;\n  \n  delayCounter = inputValue * (DAT_20000018 / 8000);\n  do {\n    isCounterNonZero = delayCounter != 0;\n    delayCounter = delayCounter + -1;\n  } while (isCounterNonZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "inputValue",
                "local_c": "delayCounter",
                "bVar1": "isCounterNonZero"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "process_data_080035a4",
            "code": "\nundefined4 processData_080035a4(undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_080035fa(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 2;\n    FUN_08003c94(*data,data + 1);\n    *(undefined *)((int)data + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "process_data_080035a4",
                "param_1": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_flag_0800360c",
            "code": "\nundefined4 setFlag_0800360c(uint **ptr)\n\n{\n  (*ptr)[3] = (*ptr)[3] | 1;\n  **ptr = **ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_flag_0800360c",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "process_data_08003640",
            "code": "\nundefined4 processData_08003640(undefined4 *inputData)\n\n{\n  undefined4 returnValue;\n  \n  if (inputData == (undefined4 *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)inputData + 0x3d) == '\\0') {\n      *(undefined *)(inputData + 0xf) = 0;\n      FUNC_08003696(inputData);\n    }\n    *(undefined *)((int)inputData + 0x3d) = 2;\n    FUN_08003c94(*inputData,inputData + 1);\n    *(undefined *)((int)inputData + 0x3d) = 1;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003640": "process_data_08003640",
                "param_1": "inputData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_flags_080036a8",
            "code": "\nundefined4 updateFlags_080036a8(uint **pointer,undefined4 value)\n\n{\n  FUN_080041ea(*pointer,value,1);\n  if (*pointer == (uint *)0x40012c00) {\n    (*pointer)[0x11] = (*pointer)[0x11] | 0x8000;\n  }\n  **pointer = **pointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_flags_080036a8",
                "param_1": "pointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_data_080036f8",
            "code": "\nvoid processData_080036f8(int *data)\n\n{\n  if (((*(uint *)(*data + 0x10) & 2) == 2) && ((*(uint *)(*data + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 7) = 1;\n    if ((*(uint *)(*data + 0x18) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 4) == 4) && ((*(uint *)(*data + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 7) = 2;\n    if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 8) == 8) && ((*(uint *)(*data + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 7) = 4;\n    if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 0x10) == 0x10) && ((*(uint *)(*data + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffef;\n    *(undefined *)(data + 7) = 8;\n    if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 1) == 1) && ((*(uint *)(*data + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffe;\n    FUN_08004f78(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x80) == 0x80) && ((*(uint *)(*data + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffff7f;\n    FUNC_08004378(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x40) == 0x40) && ((*(uint *)(*data + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffbf;\n    FUNC_08003c80(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x20) == 0x20) && ((*(uint *)(*data + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffdf;\n    FUNC_08004366(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "param_1": "data"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "reverse_and_update_flags_08003908",
            "code": "\nundefined4 reverse_and_update_flags_08003908(int *array_ptr,int param_size,undefined4 case_value)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(array_ptr + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(array_ptr + 0xf) = 1;\n    *(undefined *)((int)array_ptr + 0x3d) = 2;\n    switch(case_value) {\n    case 0:\n      FUN_08003d60(*array_ptr,param_size);\n      *(uint *)(*array_ptr + 0x18) = *(uint *)(*array_ptr + 0x18) | 8;\n      *(uint *)(*array_ptr + 0x18) = *(uint *)(*array_ptr + 0x18) & 0xfffffffb;\n      *(uint *)(*array_ptr + 0x18) = *(uint *)(param_size + 0x10) | *(uint *)(*array_ptr + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*array_ptr,param_size);\n      *(uint *)(*array_ptr + 0x18) = *(uint *)(*array_ptr + 0x18) | 0x800;\n      *(uint *)(*array_ptr + 0x18) = *(uint *)(*array_ptr + 0x18) & 0xfffffbff;\n      *(uint *)(*array_ptr + 0x18) = *(int *)(param_size + 0x10) << 8 | *(uint *)(*array_ptr + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*array_ptr,param_size);\n      *(uint *)(*array_ptr + 0x1c) = *(uint *)(*array_ptr + 0x1c) | 8;\n      *(uint *)(*array_ptr + 0x1c) = *(uint *)(*array_ptr + 0x1c) & 0xfffffffb;\n      *(uint *)(*array_ptr + 0x1c) = *(uint *)(param_size + 0x10) | *(uint *)(*array_ptr + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*array_ptr,param_size);\n      *(uint *)(*array_ptr + 0x1c) = *(uint *)(*array_ptr + 0x1c) | 0x800;\n      *(uint *)(*array_ptr + 0x1c) = *(uint *)(*array_ptr + 0x1c) & 0xfffffbff;\n      *(uint *)(*array_ptr + 0x1c) = *(int *)(param_size + 0x10) << 8 | *(uint *)(*array_ptr + 0x1c);\n    }\n    *(undefined *)((int)array_ptr + 0x3d) = 1;\n    *(undefined *)(array_ptr + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08003908": "reverse_and_update_flags_08003908",
                "param_1": "array_ptr",
                "param_2": "param_size",
                "param_3": "case_value",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "process_parameter_08003a94",
            "code": "\nundefined4 process_parameter_08003a94(int *parameter_1,uint *parameter_2)\n\n{\n  undefined4 result;\n  uint value;\n  \n  if (*(char *)(parameter_1 + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(parameter_1 + 0xf) = 1;\n    *(undefined *)((int)parameter_1 + 0x3d) = 2;\n    *(uint *)(*parameter_1 + 8) = *(uint *)(*parameter_1 + 8) & 0xffff0088;\n    value = *parameter_2;\n    if (value == 0x40) {\n      FUN_080040a0(*parameter_1,parameter_2[1],parameter_2[3]);\n      FUN_0800416a(*parameter_1,0x40);\n    }\n    else if (value < 0x41) {\n      if (value == 0x10) {\n        FUN_0800416a(*parameter_1,0x10);\n      }\n      else if (value < 0x11) {\n        if (value == 0) {\n          FUN_0800416a(*parameter_1,0);\n        }\n      }\n      else if (value == 0x20) {\n        FUN_0800416a(*parameter_1,0x20);\n      }\n      else if (value == 0x30) {\n        FUN_0800416a(*parameter_1,0x30);\n      }\n    }\n    else if (value == 0x70) {\n      FUN_080041a8(*parameter_1,parameter_2[2],parameter_2[1],parameter_2[3]);\n      *(uint *)(*parameter_1 + 8) = *(uint *)(*parameter_1 + 8) & 0xffffff88 | 0x77;\n    }\n    else if (value < 0x71) {\n      if (value == 0x50) {\n        FUN_080040a0(*parameter_1,parameter_2[1],parameter_2[3]);\n        FUN_0800416a(*parameter_1,0x50);\n      }\n      else if (value == 0x60) {\n        FUN_08004104(*parameter_1,parameter_2[1],parameter_2[3]);\n        FUN_0800416a(*parameter_1,0x60);\n      }\n    }\n    else if (value == 0x1000) {\n      *(uint *)(*parameter_1 + 8) = *(uint *)(*parameter_1 + 8) & 0xfffffff8;\n    }\n    else if (value == 0x2000) {\n      FUN_080041a8(*parameter_1,parameter_2[2],parameter_2[1],parameter_2[3]);\n      *(uint *)(*parameter_1 + 8) = *(uint *)(*parameter_1 + 8) | 0x4000;\n    }\n    *(undefined *)((int)parameter_1 + 0x3d) = 1;\n    *(undefined *)(parameter_1 + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "process_parameter_08003a94",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "uVar1": "result",
                "uVar2": "value"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_addresses_08003c94",
            "code": "\nvoid updateMemoryAddresses_08003c94(uint *sourceAddresses,uint *destinationAddresses)\n\n{\n  uint tempValue;\n  \n  tempValue = *sourceAddresses;\n  if ((((sourceAddresses == (uint *)0x40012c00) || (sourceAddresses == (uint *)0x40000000)) ||\n      (sourceAddresses == (uint *)0x40000400)) || (sourceAddresses == (uint *)0x40000800)) {\n    tempValue = destinationAddresses[1] | tempValue & 0xffffff8f;\n  }\n  if (((sourceAddresses == (uint *)0x40012c00) || (sourceAddresses == (uint *)0x40000000)) ||\n     ((sourceAddresses == (uint *)0x40000400 || (sourceAddresses == (uint *)0x40000800)))) {\n    tempValue = destinationAddresses[3] | tempValue & 0xfffffcff;\n  }\n  *sourceAddresses = destinationAddresses[5] | tempValue & 0xffffff7f;\n  sourceAddresses[0xb] = destinationAddresses[2];\n  sourceAddresses[10] = *destinationAddresses;\n  if (sourceAddresses == (uint *)0x40012c00) {\n    uRam40012c30 = destinationAddresses[4];\n  }\n  sourceAddresses[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_addresses_08003c94",
                "param_1": "sourceAddresses",
                "param_2": "destinationAddresses",
                "local_c": "tempValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_parameters_08003d60",
            "code": "\nvoid updateParameters_08003d60(int parameterAddress,uint *parameterValues)\n\n{\n  uint param_2_0;\n  uint param_2_2_modified;\n  uint param_1_plus_4;\n  \n  *(uint *)(parameterAddress + 0x20) = *(uint *)(parameterAddress + 0x20) & 0xfffffffe;\n  param_1_plus_4 = *(uint *)(parameterAddress + 4);\n  param_2_0 = *parameterValues;\n  param_2_2_modified = param_2_2 | *(uint *)(parameterAddress + 0x20) & 0xfffffffd;\n  if (parameterAddress == 0x40012c00) {\n    param_2_2_modified = (param_2_3 | param_2_2_modified & 0xfffffff7) & 0xfffffffb;\n    param_1_plus_4 = param_2_6 | param_2_5 | param_1_plus_4 & 0xfffffcff;\n  }\n  *(uint *)(parameterAddress + 4) = param_1_plus_4;\n  *(uint *)(parameterAddress + 0x18) = param_2_0 | *(uint *)(parameterAddress + 0x18) & 0xffffff8c;\n  *(uint *)(parameterAddress + 0x34) = parameterValues[1];\n  *(uint *)(parameterAddress + 0x20) = param_2_2_modified;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_parameters_08003d60",
                "param_1": "parameterAddress",
                "param_2": "parameterValues",
                "uVar1": "param_2_0",
                "uVar2": "param_2_2_modified",
                "local_10": "param_1_plus_4",
                "param_2[2]": "param_2_2",
                "param_2[3]": "param_2_3",
                "param_2[6]": "param_2_6",
                "param_2[5]": "param_2_5"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_data_08003e38",
            "code": "\nvoid updateData_08003e38(int baseAddress,int *data)\n\n{\n  int value1;\n  uint value2;\n  uint value3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  value3 = *(uint *)(baseAddress + 4);\n  value1 = *data;\n  value2 = data[2] << 4 | *(uint *)(baseAddress + 0x20) & 0xffffffdf;\n  if (baseAddress == 0x40012c00) {\n    value2 = (data[3] << 4 | value2 & 0xffffff7f) & 0xffffffbf;\n    value3 = data[6] << 2 | data[5] << 2 | value3 & 0xfffff3ff;\n  }\n  *(uint *)(baseAddress + 4) = value3;\n  *(uint *)(baseAddress + 0x18) = value1 << 8 | *(uint *)(baseAddress + 0x18) & 0xffff8cff;\n  *(int *)(baseAddress + 0x38) = data[1];\n  *(uint *)(baseAddress + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "baseAddress",
                "param_2": "data",
                "iVar1": "value1",
                "uVar2": "value2",
                "local_10": "value3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_flags_and_values_08003f18",
            "code": "\nvoid updateFlagsAndValues_08003f18(int address,uint *values)\n\n{\n  uint newValue1;\n  uint newValue2;\n  uint localValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  localValue = *(uint *)(address + 4);\n  newValue1 = *values;\n  newValue2 = value2 << 8 | *(uint *)(address + 0x20) & 0xfffffdff;\n  if (address == 0x40012c00) {\n    newValue2 = (value3 << 8 | newValue2 & 0xfffff7ff) & 0xfffffbff;\n    localValue = value4 << 4 | value5 << 4 | localValue & 0xffffcfff;\n  }\n  *(uint *)(address + 4) = localValue;\n  *(uint *)(address + 0x1c) = newValue1 | *(uint *)(address + 0x1c) & 0xffffff8c;\n  *(uint *)(address + 0x3c) = values[1];\n  *(uint *)(address + 0x20) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_flags_and_values_08003f18",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "newValue1",
                "uVar2": "newValue2",
                "local_10": "localValue",
                "param_2[2]": "value2",
                "param_2[3]": "value3",
                "param_2[6]": "value4",
                "param_2[5]": "value5"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_settings_08003ff8",
            "code": "\nvoid updateSettings_08003ff8(int baseAddress,int *settings)\n\n{\n  int value1;\n  int value2;\n  uint currentValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  currentValue = *(uint *)(baseAddress + 4);\n  value1 = *settings;\n  value2 = settings[2];\n  if (baseAddress == 0x40012c00) {\n    currentValue = settings[5] << 6 | currentValue & 0xffffbfff;\n  }\n  *(uint *)(baseAddress + 4) = currentValue;\n  *(uint *)(baseAddress + 0x1c) = value1 << 8 | *(uint *)(baseAddress + 0x1c) & 0xffff8cff;\n  *(int *)(baseAddress + 0x40) = settings[1];\n  *(uint *)(baseAddress + 0x20) = value2 << 0xc | *(uint *)(baseAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_settings_08003ff8",
                "param_1": "baseAddress",
                "param_2": "settings",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "currentValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameters_080040a0",
            "code": "\nvoid updateParameters_080040a0(int dataPtr,uint value,int shiftAmount)\n\n{\n  uint oldValue;\n  \n  oldValue = *(uint *)(dataPtr + 0x20);\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) & 0xfffffffe;\n  *(uint *)(dataPtr + 0x18) = shiftAmount << 4 | *(uint *)(dataPtr + 0x18) & 0xffffff0f;\n  *(uint *)(dataPtr + 0x20) = value | oldValue & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "dataPtr",
                "param_2": "value",
                "param_3": "shiftAmount",
                "uVar1": "oldValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_params_08004104",
            "code": "\nvoid updateParams_08004104(int ptr,int value1,int value2)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xffffffef;\n  *(uint *)(ptr + 0x18) = value2 << 0xc | *(uint *)(ptr + 0x18) & 0xffff0fff;\n  *(uint *)(ptr + 0x20) = value1 << 4 | *(uint *)(ptr + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_params_08004104",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_flags_0800416a",
            "code": "\nvoid updateFlags_0800416a(int baseAddress,ushort newValue)\n\n{\n  *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) & 0xffffff8f | (uint)(newValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_flags_0800416a",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_param_value_080041a8",
            "code": "\nvoid updateParamValue_080041a8(int baseAddress,uint newBitValue,uint bitMask,int shiftAmount)\n\n{\n  *(uint *)(baseAddress + 8) = newBitValue | shiftAmount << 8 | bitMask | *(uint *)(baseAddress + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_param_value_080041a8",
                "param_1": "baseAddress",
                "param_2": "newBitValue",
                "param_3": "bitMask",
                "param_4": "shiftAmount"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bits_080041ea",
            "code": "\nvoid updateBits_080041ea(int baseAddress,uint bitPosition,int value)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | value << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bits_080041ea",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "set_flag_based_on_condition_0800422e",
            "code": "\nundefined4 setFlagBasedOnCondition_0800422e(int *array,uint *values)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(uint *)(*array + 0x44) =\n         values[6] |\n         (values[6] |\n         (values[5] |\n         (values[4] |\n         (*values | (values[1] | (values[2] | values[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "set_flag_based_on_condition_0800422e",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_080042de",
            "code": "\nundefined4 updateFlags_080042de(int *flags,uint *data)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(flags + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(flags + 0xf) = 1;\n    *(undefined *)((int)flags + 0x3d) = 2;\n    *(uint *)(*flags + 4) = *(uint *)(*flags + 4) & 0xffffff8f;\n    *(uint *)(*flags + 4) = *data | *(uint *)(*flags + 4);\n    *(uint *)(*flags + 8) = *(uint *)(*flags + 8) & 0xffffff7f;\n    *(uint *)(*flags + 8) = data[1] | *(uint *)(*flags + 8);\n    *(undefined *)((int)flags + 0x3d) = 1;\n    *(undefined *)(flags + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_080042de",
                "param_1": "flags",
                "param_2": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_0800438a",
            "code": "\nundefined4 initializeData_0800438a(int *dataPtr)\n\n{\n  undefined4 result;\n  \n  if (dataPtr == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)dataPtr + 0x39) == '\\0') {\n      *(undefined *)(dataPtr + 0xe) = 0;\n      FUNC_08004424(dataPtr);\n    }\n    *(undefined *)((int)dataPtr + 0x39) = 0x24;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) & 0xffffdfff;\n    FUN_080046ec(dataPtr);\n    *(uint *)(*dataPtr + 0x10) = *(uint *)(*dataPtr + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPtr + 0x14) = *(uint *)(*dataPtr + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) | 0x2000;\n    dataFlag2 = 0;\n    *(undefined *)((int)dataPtr + 0x39) = 0x20;\n    *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_0800438a",
                "param_1": "dataPtr",
                "uVar1": "result",
                "param_1[0xf]": "dataFlag2"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "check_and_process_data_08004436",
            "code": "\nundefined4 checkAndProcessData_08004436(uint **ptrData,ushort *ptrBuffer,short bufferSize,uint timeLimit)\n\n{\n  int tempVar1;\n  int tempVar2;\n  undefined4 result;\n  ushort *currentElement;\n  \n  if (*(char *)((int)ptrData + 0x39) == ' ') {\n    if ((ptrBuffer == (ushort *)0x0) || (bufferSize == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(ptrData + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(ptrData + 0xe) = 1;\n      ptrData[0xf] = (uint *)0x0;\n      *(undefined *)((int)ptrData + 0x39) = 0x21;\n      tempVar1 = FUN_080015a0();\n      *(short *)(ptrData + 9) = bufferSize;\n      *(short *)((int)ptrData + 0x26) = bufferSize;\n      currentElement = ptrBuffer;\n      while (*(short *)((int)ptrData + 0x26) != 0) {\n        *(short *)((int)ptrData + 0x26) = *(short *)((int)ptrData + 0x26) + -1;\n        if (ptrData[2] == (uint *)0x1000) {\n          do {\n            if ((**ptrData & 0x80) == 0x80) {\n              tempVar2 = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeLimit == 0xffffffff) ||\n                  ((timeLimit != 0 && (tempVar2 = FUN_080015a0(), (uint)(tempVar2 - tempVar1) <= timeLimit))));\n          (*ptrData)[3] = (*ptrData)[3] & 0xfffffe5f;\n          (*ptrData)[5] = (*ptrData)[5] & 0xfffffffe;\n          *(undefined *)((int)ptrData + 0x39) = 0x20;\n          *(undefined *)((int)ptrData + 0x3a) = 0x20;\n          *(undefined *)(ptrData + 0xe) = 0;\n          tempVar2 = 3;\nLAB_0800454c:\n          if (tempVar2 != 0) {\n            return 3;\n          }\n          (*ptrData)[1] = *currentElement & 0x1ff;\n          if (ptrData[4] == (uint *)0x0) {\n            currentElement = currentElement + 1;\n          }\n          else {\n            currentElement = (ushort *)((int)currentElement + 1);\n          }\n        }\n        else {\n          do {\n            if ((**ptrData & 0x80) == 0x80) {\n              tempVar2 = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeLimit == 0xffffffff) ||\n                  ((timeLimit != 0 && (tempVar2 = FUN_080015a0(), (uint)(tempVar2 - tempVar1) <= timeLimit))));\n          (*ptrData)[3] = (*ptrData)[3] & 0xfffffe5f;\n          (*ptrData)[5] = (*ptrData)[5] & 0xfffffffe;\n          *(undefined *)((int)ptrData + 0x39) = 0x20;\n          *(undefined *)((int)ptrData + 0x3a) = 0x20;\n          *(undefined *)(ptrData + 0xe) = 0;\n          tempVar2 = 3;\nLAB_08004614:\n          if (tempVar2 != 0) {\n            return 3;\n          }\n          (*ptrData)[1] = (uint)*(byte *)currentElement;\n          currentElement = (ushort *)((int)currentElement + 1);\n        }\n      }\n      do {\n        if ((**ptrData & 0x40) == 0x40) {\n          tempVar1 = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeLimit == 0xffffffff) ||\n              ((timeLimit != 0 && (tempVar2 = FUN_080015a0(), (uint)(tempVar2 - tempVar1) <= timeLimit))));\n      (*ptrData)[3] = (*ptrData)[3] & 0xfffffe5f;\n      (*ptrData)[5] = (*ptrData)[5] & 0xfffffffe;\n      *(undefined *)((int)ptrData + 0x39) = 0x20;\n      *(undefined *)((int)ptrData + 0x3a) = 0x20;\n      *(undefined *)(ptrData + 0xe) = 0;\n      tempVar1 = 3;\nLAB_080046c6:\n      if (tempVar1 == 0) {\n        *(undefined *)((int)ptrData + 0x39) = 0x20;\n        *(undefined *)(ptrData + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004436": "check_and_process_data_08004436",
                "param_1": "ptrData",
                "param_2": "ptrBuffer",
                "param_3": "bufferSize",
                "param_4": "timeLimit",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "result",
                "local_58": "currentElement"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_checksum_080046ec",
            "code": "\nvoid calculateChecksum_080046ec(int *inputParams)\n\n{\n  ulonglong quotient;\n  int tempVar1;\n  int tempVar2;\n  uint calculationResult;\n  int tempVar3;\n  undefined8 returnValue;\n  \n  *(uint *)(*inputParams + 0x10) = inputParams[3] | *(uint *)(*inputParams + 0x10) & 0xffffcfff;\n  *(uint *)(*inputParams + 0xc) =\n       *(uint *)(*inputParams + 0xc) & 0xffffe9f3 | inputParams[5] | inputParams[2] | inputParams[4];\n  *(uint *)(*inputParams + 0x14) = inputParams[6] | *(uint *)(*inputParams + 0x14) & 0xfffffcff;\n  if (*inputParams == 0x40013800) {\n    returnValue = FUN_08003540();\n    quotient = (ulonglong)(uint)((int)returnValue * 0x19) / (ulonglong)(uint)(inputParams[1] << 2);\n    tempVar1 = FUN_08003540((int)returnValue,(int)((ulonglong)returnValue >> 0x20),(int)(quotient * 0x51eb851f));\n    tempVar2 = inputParams[1];\n    returnValue = FUN_08003540();\n    calculationResult = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)((int)returnValue * 0x19) / (ulonglong)(uint)(inputParams[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003540((int)returnValue,(int)((ulonglong)returnValue >> 0x20),calculationResult * 0x51eb851f);\n    tempVar3 = inputParams[1];\n    tempVar2 = FUN_08003540();\n    *(uint *)(*inputParams + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar3 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (calculationResult / 100 & 0xf0);\n  }\n  else {\n    returnValue = FUN_08003518();\n    quotient = (ulonglong)(uint)((int)returnValue * 0x19) / (ulonglong)(uint)(inputParams[1] << 2);\n    tempVar1 = FUN_08003518((int)returnValue,(int)((ulonglong)returnValue >> 0x20),(int)(quotient * 0x51eb851f));\n    tempVar2 = inputParams[1];\n    returnValue = FUN_08003518();\n    calculationResult = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)((int)returnValue * 0x19) / (ulonglong)(uint)(inputParams[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003518((int)returnValue,(int)((ulonglong)returnValue >> 0x20),calculationResult * 0x51eb851f);\n    tempVar3 = inputParams[1];\n    tempVar2 = FUN_08003518();\n    *(uint *)(*inputParams + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar3 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (calculationResult / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "inputParams",
                "uVar1": "quotient",
                "iVar2": "tempVar1",
                "iVar3": "tempVar2",
                "uVar4": "calculationResult",
                "iVar5": "tempVar3",
                "uVar6": "returnValue"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_parameters_0800491c",
            "code": "\nvoid initializeParameters_0800491c(undefined4 *parameters)\n\n{\n  undefined buffer1;\n  undefined buffer2;\n  undefined buffer3 [5];\n  \n  buffer1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&buffer1,1);\n  buffer2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&buffer2,1);\n  buffer3[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,buffer3,1);\n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  parameters[3] = 0;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  parameters[7] = 0;\n  parameters[8] = 0;\n  parameters[9] = 0;\n  parameters[10] = 0;\n  FUN_080049cc(parameters);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_parameters_0800491c",
                "param_1": "parameters",
                "local_13": "buffer1",
                "local_12": "buffer2",
                "local_11": "buffer3"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_metrics_080049cc",
            "code": "\nvoid calculateMetrics_080049cc(int data)\n\n{\n  undefined4 result;\n  undefined4 sum1;\n  undefined4 sum2;\n  undefined4 sum3;\n  int count;\n  int i;\n  undefined4 max1;\n  undefined4 max2;\n  undefined4 max3;\n  undefined4 var1;\n  \n  count = 1;\n  var1 = 0;\n  max3 = 0;\n  max2 = 0;\n  max1 = 0;\n  sum3 = (*DAT_20000a50)();\n  i = 0;\n  while( true ) {\n    if (count <= i) break;\n    sum2 = 0;\n    sum1 = 0;\n    FUN_08004ae0(data);\n    FUN_08004d78(data,&sum2,&sum1);\n    max2 = FUN_08000aa8(max2,sum2);\n    max1 = FUN_08000aa8(max1,sum1);\n    var1 = FUN_08000aa8(var1,*(undefined4 *)(data + 0x10));\n    max3 = FUN_08000aa8(max3,*(undefined4 *)(data + 0x14));\n    sum3 = (*DAT_20000a50)();\n    i = i + 1;\n  }\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(var1,result);\n  *(undefined4 *)(data + 0x1c) = result;\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(max3,result);\n  *(undefined4 *)(data + 0x20) = result;\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(max2,result);\n  *(undefined4 *)(data + 0x24) = result;\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(max1,result);\n  *(undefined4 *)(data + 0x28) = result;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_metrics_080049cc",
                "param_1": "data",
                "local_2c": "sum1",
                "local_28": "sum2",
                "local_24": "sum3",
                "local_20": "count",
                "local_1c": "i",
                "local_18": "max1",
                "local_14": "max2",
                "local_10": "max3",
                "local_c": "var1",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_and_convert_data_08004ae0",
            "code": "\nvoid extract_and_convert_data_08004ae0(undefined4 *output_array)\n\n{\n  undefined4 uVar1;\n  undefined input_byte1;\n  undefined input_byte2;\n  undefined input_byte3;\n  undefined input_byte4;\n  undefined input_byte5;\n  undefined input_byte6;\n  undefined input_byte7;\n  undefined input_byte8;\n  undefined input_byte9;\n  undefined input_byte10;\n  undefined input_byte11;\n  undefined input_byte12;\n  undefined input_byte13;\n  undefined input_byte14;\n  short converted_data1;\n  short converted_data2;\n  short converted_data3;\n  short converted_data4;\n  short converted_data5;\n  short converted_data6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&input_byte1,0xe);\n  converted_data6 = CONCAT11(input_byte3,input_byte4);\n  converted_data5 = CONCAT11(input_byte5,input_byte6);\n  converted_data4 = CONCAT11(input_byte7,input_byte8);\n  converted_data3 = CONCAT11(input_byte9,input_byte10);\n  converted_data2 = CONCAT11(input_byte11,input_byte12);\n  converted_data1 = CONCAT11(input_byte13,input_byte14);\n  uVar1 = FUN_08000c10((int)CONCAT11(input_byte1,input_byte2));\n  *output_array = uVar1;\n  uVar1 = FUN_08000c10((int)converted_data6);\n  output_array[1] = uVar1;\n  uVar1 = FUN_08000c10((int)converted_data5);\n  output_array[2] = uVar1;\n  uVar1 = FUN_08000c10((int)converted_data4);\n  output_array[3] = uVar1;\n  uVar1 = FUN_08000c10((int)converted_data3);\n  output_array[4] = uVar1;\n  uVar1 = FUN_08000c10((int)converted_data2);\n  output_array[5] = uVar1;\n  uVar1 = FUN_08000c10((int)converted_data1);\n  output_array[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_and_convert_data_08004ae0",
                "param_1": "output_array",
                "local_2c": "input_byte1",
                "local_2b": "input_byte2",
                "local_2a": "input_byte3",
                "local_29": "input_byte4",
                "local_28": "input_byte5",
                "local_27": "input_byte6",
                "local_26": "input_byte7",
                "local_25": "input_byte8",
                "local_24": "input_byte9",
                "local_23": "input_byte10",
                "local_22": "input_byte11",
                "local_21": "input_byte12",
                "local_20": "input_byte13",
                "local_1f": "input_byte14",
                "local_1e": "converted_data1",
                "local_1c": "converted_data2",
                "local_1a": "converted_data3",
                "local_18": "converted_data4",
                "local_16": "converted_data5",
                "local_14": "converted_data6"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "process_data_08004bd8",
            "code": "\nvoid processData_08004bd8(int input,undefined4 *output)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(input + 0x10),*(undefined4 *)(input + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(input + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(input + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(input + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "process_data_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_params_08004d78",
            "code": "\nvoid calculateParams_08004d78(undefined4 *inputArray,undefined4 *outputParam1,undefined4 *outputParam2)\n\n{\n  undefined4 result1;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000e20(*inputArray,0x45800000);\n  temp1 = FUN_08000e20(inputArray[1],0x45800000);\n  temp2 = FUN_08000e20(inputArray[2],0x45800000);\n  result2 = FUN_08000418(temp1);\n  result3 = FUN_08000418(temp2);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  temp1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(result1);\n  result3 = FUN_08000418(temp2);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  *outputParam1 = temp1;\n  *outputParam2 = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_params_08004d78",
                "param_1": "inputArray",
                "param_2": "outputParam1",
                "param_3": "outputParam2",
                "uVar1": "result1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "result2",
                "uVar5": "result3"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "execute_system_call_08004e6c",
            "code": "\nvoid execute_system_call_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "execute_system_call_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_if_zero_08004e74",
            "code": "\nundefined4 initializeIfZero_08004e74(undefined4 inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_200009f0 == 0) {\n    returnValue = FUN_08004e6c(1,inputValue,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_if_zero_08004e74",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "initialize_data_08004ea4",
            "code": "\nvoid initializeData_08004ea4(undefined buffer,undefined length,undefined4 value,undefined2 flags)\n\n{\n  FUN_08001ccc(&DAT_20000a88,buffer,length,1,value,flags,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "initialize_data_08004ea4",
                "param_1": "buffer",
                "param_2": "length",
                "param_3": "value",
                "param_4": "flags"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "execute_function_08004ee8",
            "code": "\nvoid executeFunction_08004ee8(undefined data1,undefined data2,undefined4 value1,undefined2 value2)\n\n{\n  FUN_08001f6c(&DAT_20000a88,data1,data2,1,value1,value2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "execute_function_08004ee8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "initialize_program_08004f2c",
            "code": "\nundefined4 initializeProgram_08004f2c(void)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_080015a0();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "initialize_program_08004f2c",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initializeData_08004f3c(undefined4 dataPointer,undefined2 dataOffset)\n\n{\n  FUN_08004436(&DAT_20000adc,dataPointer,dataOffset,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "dataPointer",
                "param_2": "dataOffset"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_08004f60",
            "code": "\nvoid initializeMemory_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "initialize_audio_08004f78",
            "code": "\nvoid initializeAudio_08004f78(void)\n\n{\n  undefined4 result;\n  int returnValue;\n  undefined4 temp;\n  uint temp2;\n  undefined8 pitch;\n  byte tempByte;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitch = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitch,(int)((ulonglong)pitch >> 0x20));\n  result = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,result);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  result = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(result,DAT_20000b5c);\n  result = FUN_08000c10(DAT_20000010);\n  returnValue = FUN_08000ff4(result,DAT_20000b5c);\n  if (returnValue == 0) {\n    result = FUN_08000c10(DAT_200009f4);\n    returnValue = FUN_08001030(result,DAT_20000b5c);\n    if (returnValue != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  temp2 = DAT_20000a08 ^ 0x80000000;\n  result = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(temp2,result);\n  result = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  result = FUN_08000aa8(result,DAT_20000a58);\n  temp = FUN_08000c10(DAT_20000010);\n  returnValue = FUN_08001030(result,temp);\n  if (returnValue == 0) {\n    temp = FUN_08000c10(DAT_200009f4);\n    returnValue = FUN_08000ff4(result,temp);\n    if (returnValue == 0) {\n      tempByte = FUN_08001044(result);\n    }\n    else {\n      tempByte = DAT_200009f4;\n    }\n  }\n  else {\n    tempByte = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  returnValue = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,returnValue != 0);\n  returnValue = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,returnValue == 0);\n  returnValue = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,returnValue != 0);\n  returnValue = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,returnValue == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)tempByte;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)tempByte;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "initialize_audio_08004f78",
                "uVar1": "result",
                "iVar2": "returnValue",
                "uVar3": "temp",
                "uVar4": "temp2",
                "uVar5": "pitch",
                "local_11": "tempByte"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_program_08005224",
            "code": "\nvoid initializeProgram_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_program_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_application_080052a0",
            "code": "\nvoid initializeApplication_080052a0(void)\n\n{\n  int result;\n  undefined8 currentTime;\n  undefined4 CONFIG_FLAG;\n  undefined4 INTERRUPT_FLAG;\n  undefined4 BUFFER_SIZE;\n  undefined4 OFFSET;\n  undefined4 FLAG;\n  undefined4 INIT_VAL;\n  undefined4 MEMORY_SIZE;\n  undefined4 INDEX;\n  undefined4 VAL_1;\n  undefined4 VAL_2;\n  undefined4 VAL_3;\n  undefined4 VAL_4;\n  \n  INIT_VAL = 1;\n  MEMORY_SIZE = 0x10000;\n  INDEX = 0;\n  VAL_1 = 1;\n  VAL_2 = 2;\n  VAL_3 = 0x10000;\n  VAL_4 = 0x1c0000;\n  result = FUN_08002d98(&INIT_VAL);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  CONFIG_FLAG = 0xf;\n  INTERRUPT_FLAG = 2;\n  BUFFER_SIZE = 0x80;\n  OFFSET = 0;\n  FLAG = 0;\n  result = FUN_08003260(&CONFIG_FLAG,2);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  currentTime = FUN_08003504();\n  FUN_08001762((uint)currentTime / 1000,(int)((ulonglong)currentTime >> 0x20),(uint)currentTime * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_application_080052a0",
                "local_44": "CONFIG_FLAG",
                "local_40": "INTERRUPT_FLAG",
                "local_3c": "BUFFER_SIZE",
                "local_38": "OFFSET",
                "local_34": "FLAG",
                "local_30": "INIT_VAL",
                "local_2c": "MEMORY_SIZE",
                "local_28": "INDEX",
                "local_20": "VAL_1",
                "local_14": "VAL_2",
                "local_10": "VAL_3",
                "local_c": "VAL_4",
                "iVar1": "result",
                "uVar2": "currentTime"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int iVar1;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  iVar1 = FUN_08001ab0(&DAT_20000a88);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_application_080053b0",
            "code": "\nvoid initializeApplication_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 size1;\n  undefined4 size2;\n  undefined4 size3;\n  undefined4 size4;\n  undefined4 size5;\n  undefined4 size6;\n  undefined4 size7;\n  undefined4 size8;\n  undefined4 size9;\n  undefined4 size10;\n  undefined4 size11;\n  undefined4 size12;\n  undefined4 size13;\n  undefined4 size14;\n  undefined4 count1;\n  undefined4 count2;\n  undefined4 array [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  array[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b1c,array);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = FUN_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  count1 = 0;\n  count2 = 0;\n  iVar1 = FUN_080042de(&DAT_20000b1c,&count1);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  size8 = 0x60;\n  size9 = 0;\n  size10 = 0;\n  size11 = 0;\n  size12 = 0;\n  size13 = 0;\n  size14 = 0;\n  iVar1 = FUN_08003908(&DAT_20000b1c,&size8,0);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = FUN_08003908(&DAT_20000b1c,&size8,0xc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  size1 = 0;\n  size2 = 0;\n  size3 = 0;\n  size4 = 0;\n  size5 = 0;\n  size6 = 0x2000;\n  size7 = 0;\n  iVar1 = FUN_0800422e(&DAT_20000b1c,&size1);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_application_080053b0",
                "local_58": "size1",
                "local_54": "size2",
                "local_50": "size3",
                "local_4c": "size4",
                "local_48": "size5",
                "local_44": "size6",
                "local_40": "size7",
                "local_3c": "size8",
                "local_38": "size9",
                "local_34": "size10",
                "local_30": "size11",
                "local_2c": "size12",
                "local_28": "size13",
                "local_24": "size14",
                "local_20": "count1",
                "local_1c": "count2",
                "local_18": "array"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_data_08005500",
            "code": "\nvoid initializeData_08005500(void)\n\n{\n  int iVar1;\n  undefined4 bufferSize;\n  undefined4 bufferOffset;\n  undefined4 bufferSizes [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b60);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  bufferSizes[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b60,bufferSizes);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  bufferOffset = 0;\n  iVar1 = FUN_080042de(&DAT_20000b60,&bufferSize);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_data_08005500",
                "local_20": "bufferSize",
                "local_1c": "bufferOffset",
                "local_18": "bufferSizes"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_settings_08005598",
            "code": "\nvoid initializeSettings_08005598(void)\n\n{\n  int returnValue;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  returnValue = FUN_0800438a(&DAT_20000adc);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_settings_08005598",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_application_080055f4",
            "code": "\n\n\nvoid initializeApplication_080055f4(void)\n\n{\n  undefined4 configParam1;\n  undefined4 configParam2;\n  undefined4 configParam3;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  configParam1 = 0x1e;\n  configParam2 = 1;\n  configParam3 = 2;\n  FUN_080017c4(0x40010800,&configParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_application_080055f4",
                "local_18": "configParam1",
                "local_14": "configParam2",
                "local_c": "configParam3"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "run_infinite_loop_08005674",
            "code": "\nvoid runInfiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "run_infinite_loop_08005674"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_data_08005680",
            "code": "\nvoid initializeData_08005680(int *data)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  \n  if (*data == 0x40012c00) {\n    constant1 = 0x900;\n    constant2 = 2;\n    constant3 = 2;\n    FUN_080017c4(0x40010800,&constant1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_data_08005680",
                "param_1": "data",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_c": "constant3"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_system_08005704",
            "code": "\nvoid initializeSystem_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_system_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_08005714",
            "code": "\nvoid initializeData_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *newPointer;\n  undefined *resultPointer;\n  undefined buffer [4];\n  int remainingBytes;\n  undefined *currentPointer;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  currentPointer = DAT_20000a10;\n  if (buffer < DAT_20000a10 + size) {\n    remainingBytes = size;\n    newPointer = (undefined4 *)FUN_08005d14();\n    *newPointer = 0xc;\n    resultPointer = (undefined *)0xffffffff;\n  }\n  else {\n    resultPointer = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return resultPointer;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "newPointer",
                "puVar2": "resultPointer",
                "auStack_18": "buffer",
                "local_14": "remainingBytes",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_registers_08005780",
            "code": "\n\n\nvoid initializeRegisters_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_registers_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result;\n  uint condition;\n  uint normalized_input4;\n  uint normalized_input2;\n  undefined8 extended_result;\n  \n  normalized_input4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (normalized_input4 | (-input3 | input3) >> 0x1f)) ||\n     (normalized_input2 = input2 & 0x7fffffff, 0x7ff00000 < (normalized_input2 | (-input1 | input1) >> 0x1f))) {\n    normalized_input4 = FUN_0800015c(input3,input4,input1,input2);\n    return normalized_input4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    normalized_input4 = FUN_080059f0();\n    return normalized_input4;\n  }\n  condition = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((normalized_input2 | input1) == 0) {\n    if (condition == 2) {\n      return 0x54442d18;\n    }\n    if (condition != 3) {\n      return input1;\n    }\n  }\n  else if ((normalized_input4 | input3) != 0) {\n    if (normalized_input4 == 0x7ff00000) {\n      if (normalized_input2 == 0x7ff00000) {\n        if (condition == 2) {\n          return 0x7f3321d2;\n        }\n        if (condition == 3) {\n          return 0x7f3321d2;\n        }\n        if (condition == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (condition == 2) {\n        return 0x54442d18;\n      }\n      if (condition != 3) {\n        if (condition != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (normalized_input2 != 0x7ff00000) {\n      difference = (int)(normalized_input2 - normalized_input4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          extended_result = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          extended_result = FUN_080059f0();\n        }\n      }\n      else {\n        extended_result = 0x3ff921fb54442d18;\n      }\n      result = (undefined4)((ulonglong)extended_result >> 0x20);\n      normalized_input4 = (uint)extended_result;\n      if (condition == 1) {\n        return normalized_input4;\n      }\n      if (condition == 2) {\n        extended_result = FUN_08000158(normalized_input4,result,0x33145c07,0x3ca1a626);\n        normalized_input4 = FUN_08000158(0x54442d18,0x400921fb,(int)extended_result,(int)((ulonglong)extended_result >> 0x20));\n        return normalized_input4;\n      }\n      if (condition != 0) {\n        extended_result = FUN_08000158(normalized_input4,result,0x33145c07,0x3ca1a626);\n        normalized_input4 = FUN_08000158((int)extended_result,(int)((ulonglong)extended_result >> 0x20),0x54442d18,0x400921fb);\n        return normalized_input4;\n      }\n      return normalized_input4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "result",
                "uVar3": "condition",
                "uVar4": "normalized_input4",
                "uVar5": "normalized_input2",
                "uVar6": "extended_result"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculateResult_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp4 | (-input3 | input3) >> 0x1f)) ||\n     (temp5 = input2 & 0x7fffffff, 0x7ff00000 < (temp5 | (-input1 | input1) >> 0x1f))) {\n    temp4 = FUN_0800015c(input3,input4,input1,input2);\n    return temp4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp4 = FUN_080059f0();\n    return temp4;\n  }\n  temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp5 | input1) == 0) {\n    if (temp3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp3 != 3) {\n      return input1;\n    }\n  }\n  else if ((temp4 | input3) != 0) {\n    if (temp4 == 0x7ff00000) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp3 != 3) {\n        if (temp3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp5 != 0x7ff00000) {\n      temp1 = (int)(temp5 - temp4) >> 0x14;\n      if (temp1 < 0x3d) {\n        if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n          temp6 = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          temp6 = FUN_080059f0();\n        }\n      }\n      else {\n        temp6 = 0x3ff921fb54442d18;\n      }\n      temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp4 = (uint)temp6;\n      if (temp3 == 1) {\n        return temp4;\n      }\n      if (temp3 == 2) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        return temp4;\n      }\n      if (temp3 != 0) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n        return temp4;\n      }\n      return temp4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculate_result_080059f0(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  uint uVar7;\n  int condition;\n  undefined8 temp_1;\n  undefined8 temp_2;\n  \n  temp_2 = CONCAT44(input_2,input_1);\n  uVar7 = input_2 & 0x7fffffff;\n  if (uVar7 < 0x44100000) {\n    if (uVar7 < 0x3fdc0000) {\n      if (uVar7 < 0x3e200000) {\n        temp_1 = FUN_0800015c(input_1,input_2,0x8800759c,0x7e37e43c,input_4);\n        condition = FUN_080009e8((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),0,0x3ff00000);\n        if (condition != 0) {\n          return CONCAT44(input_2,input_1);\n        }\n      }\n      condition = -1;\n    }\n    else {\n      temp_2 = FUNC_08005d0c();\n      result_4 = (undefined4)((ulonglong)temp_2 >> 0x20);\n      result_1 = (undefined4)temp_2;\n      if (uVar7 < 0x3ff30000) {\n        if (uVar7 < 0x3fe60000) {\n          temp_2 = FUN_0800015c(result_1,result_4,result_1,result_4);\n          temp_2 = FUN_08000158((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),0,0x3ff00000);\n          temp_1 = FUN_0800015c(result_1,result_4,0,0x40000000);\n          temp_2 = FUN_0800071c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),(int)temp_1,\n                                (int)((ulonglong)temp_1 >> 0x20));\n          condition = 0;\n        }\n        else {\n          temp_2 = FUN_08000158(result_1,result_4,0,0x3ff00000);\n          temp_1 = FUN_0800015c(result_1,result_4,0,0x3ff00000);\n          temp_2 = FUN_0800071c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),(int)temp_1,\n                                (int)((ulonglong)temp_1 >> 0x20));\n          condition = 1;\n        }\n      }\n      else if (uVar7 < 0x40038000) {\n        temp_2 = FUN_08000158(result_1,result_4,0,0x3ff80000);\n        temp_1 = FUN_080004c8(result_1,result_4,0,0x3ff80000);\n        temp_1 = FUN_0800015c((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),0,0x3ff00000);\n        temp_2 = FUN_0800071c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),(int)temp_1,\n                              (int)((ulonglong)temp_1 >> 0x20));\n        condition = 2;\n      }\n      else {\n        temp_2 = FUN_0800071c(0,0xbff00000,result_1,result_4);\n        condition = 3;\n      }\n    }\n    result_6 = (undefined4)((ulonglong)temp_2 >> 0x20);\n    result_5 = (undefined4)temp_2;\n    temp_2 = FUN_080004c8(result_5,result_6,result_5,result_6);\n    result_2 = (undefined4)((ulonglong)temp_2 >> 0x20);\n    result_1 = (undefined4)temp_2;\n    temp_2 = FUN_080004c8(result_1,result_2,result_1,result_2);\n    result_3 = (undefined4)((ulonglong)temp_2 >> 0x20);\n    result_4 = (undefined4)temp_2;\n    temp_2 = FUN_080004c8(result_4,result_3,0xe322da11,0x3f90ad3a);\n    temp_2 = FUN_0800015c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_2 = FUN_080004c8((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),result_4,result_3);\n    temp_2 = FUN_0800015c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_2 = FUN_080004c8((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),result_4,result_3);\n    temp_2 = FUN_0800015c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_2 = FUN_080004c8((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),result_4,result_3);\n    temp_2 = FUN_0800015c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),0x920083ff,0x3fc24924);\n    temp_2 = FUN_080004c8((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),result_4,result_3);\n    temp_2 = FUN_0800015c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),0x5555550d,0x3fd55555);\n    temp_2 = FUN_080004c8((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),result_1,result_2);\n    temp_1 = FUN_080004c8(result_4,result_3,0x2c6a6c2f,0xbfa2b444);\n    temp_1 = FUN_08000158((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_1 = FUN_080004c8((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),result_4,result_3);\n    temp_1 = FUN_08000158((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_1 = FUN_080004c8((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),result_4,result_3);\n    temp_1 = FUN_08000158((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_1 = FUN_080004c8((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),result_4,result_3);\n    temp_1 = FUN_08000158((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_1 = FUN_080004c8((int)temp_1,(int)((ulonglong)temp_1 >> 0x20),result_4,result_3);\n    temp_2 = FUN_0800015c((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),(int)temp_1,\n                          (int)((ulonglong)temp_1 >> 0x20));\n    temp_2 = FUN_080004c8((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),result_5,result_6);\n    result_1 = (undefined4)((ulonglong)temp_2 >> 0x20);\n    if (condition == -1) {\n      temp_2 = FUN_08000158(result_5,result_6,(int)temp_2,result_1);\n      return temp_2;\n    }\n    condition = condition * 8;\n    temp_2 = FUN_08000158((int)temp_2,result_1,*(undefined4 *)(&UNK_08009ee8 + condition),\n                          *(undefined4 *)(&UNK_08009eec + condition));\n    temp_2 = FUN_08000158((int)temp_2,(int)((ulonglong)temp_2 >> 0x20),result_5,result_6);\n    temp_2 = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + condition),\n                          *(undefined4 *)(&UNK_08009ecc + condition),(int)temp_2,\n                          (int)((ulonglong)temp_2 >> 0x20));\n    if ((int)input_2 < 0) {\n      return CONCAT44((int)((ulonglong)temp_2 >> 0x20) + -0x80000000,(int)temp_2);\n    }\n  }\n  else {\n    if ((uVar7 < 0x7ff00001) && ((uVar7 != 0x7ff00000 || (input_1 == 0)))) {\n      result_1 = 0xbff921fb;\n      if (0 < (int)input_2) {\n        result_1 = 0x3ff921fb;\n      }\n      return CONCAT44(result_1,0x54442d18);\n    }\n    temp_2 = FUN_0800015c(input_1,input_2,input_1,input_2,input_4);\n  }\n  return temp_2;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "result_6",
                "iVar8": "condition",
                "uVar9": "temp_1",
                "uVar10": "temp_2"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_data_location_08005d14",
            "code": "\nundefined4 get_data_location_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_data_location_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionPointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "initialize_memory_08005d68",
            "code": "\nvoid initializeMemory_08005d68(undefined4 *ptr,undefined value,uint size)\n\n{\n  undefined4 *ptrTemp;\n  undefined4 *ptrTemp2;\n  uint remainingSize;\n  undefined4 maskedValue;\n  bool isZero;\n  \n  if (((uint)ptr & 3) != 0) {\n    remainingSize = size - 1;\n    ptrTemp = ptr;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      ptr = (undefined4 *)((int)ptrTemp + 1);\n      *(undefined *)ptrTemp = value;\n      size = remainingSize;\n      if (((uint)ptr & 3) == 0) break;\n      isZero = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      ptrTemp = ptr;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    maskedValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    ptrTemp = ptr;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      ptrTemp = ptr + 4;\n      do {\n        ptrTemp[-4] = maskedValue;\n        ptrTemp[-3] = maskedValue;\n        ptrTemp[-2] = maskedValue;\n        ptrTemp[-1] = maskedValue;\n        ptrTemp = ptrTemp + 4;\n      } while (ptrTemp != (undefined4 *)((int)ptr + (remainingSize & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      ptr = ptr + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      ptrTemp = ptr;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *ptr = maskedValue;\n      ptr = ptr + 1;\n    } while (3 < size);\n    ptr = (undefined4 *)((int)ptrTemp + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    ptrTemp = ptr;\n    do {\n      ptrTemp2 = (undefined4 *)((int)ptrTemp + 1);\n      *(undefined *)ptrTemp = value;\n      ptrTemp = ptrTemp2;\n    } while ((undefined4 *)(size + (int)ptr) != ptrTemp2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "initialize_memory_08005d68",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "ptrTemp",
                "puVar2": "ptrTemp2",
                "uVar3": "remainingSize",
                "uVar4": "maskedValue",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_memory_and_call_func_08005dfc",
            "code": "\nvoid initializeMemoryAndCallFunc_08005dfc(undefined *source,undefined4 length,undefined4 param3,undefined4 param4)\n\n{\n  undefined *local_80 [2];\n  undefined4 maxValue1;\n  undefined4 defaultValue;\n  undefined *currentSource;\n  undefined4 minValue1;\n  undefined4 tempParam3;\n  undefined4 tempParam4;\n  \n  minValue1 = 0x7fffffff;\n  maxValue1 = 0x7fffffff;\n  defaultValue = 0xffff0208;\n  destination = source;\n  currentSource = source;\n  tempParam3 = param3;\n  tempParam4 = param4;\n  FUNC_08005e9c(DAT_2000001c,local_80,length,&tempParam3);\n  *destination = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_memory_and_call_func_08005dfc",
                "param_1": "source",
                "param_2": "length",
                "param_3": "param3",
                "param_4": "param4",
                "local_80[0]": "destination",
                "local_78": "maxValue1",
                "uStack_74": "defaultValue",
                "local_70": "currentSource",
                "local_6c": "minValue1",
                "uStack_8": "tempParam3",
                "uStack_4": "tempParam4"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "calculate_offset_08005e40",
            "code": "\nint calculateOffset_08005e40(uint inputValue)\n\n{\n  int bitOffset;\n  uint *ptr;\n  uint mask;\n  \n  ptr = (uint *)(inputValue & 0xfffffffc);\n  bitOffset = -(inputValue & 3);\n  mask = *ptr;\n  if ((inputValue & 3) != 0) {\n    mask = mask | 0xffffffffU >> ((bitOffset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    mask = mask + 0xfefefeff & ~mask & 0x80808080;\n    if (mask != 0) break;\n    mask = *ptr;\n    bitOffset = bitOffset + 4;\n  }\n  return bitOffset + (0x1fU - LZCOUNT(mask & -mask) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "calculate_offset_08005e40",
                "param_1": "inputValue",
                "iVar1": "bitOffset",
                "puVar2": "ptr",
                "uVar3": "mask"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_quotient_080078c0",
            "code": "\nuint calculateQuotient_080078c0(int inputArray1,int inputArray2)\n\n{\n  uint sum;\n  uint *array1IndexPtr;\n  int carry;\n  int size1;\n  int size2;\n  uint quotient;\n  uint *array2Ptr;\n  uint *array1Ptr;\n  uint *array2EndPtr;\n  uint carrySum;\n  uint *array2IndexPtr;\n  uint *nextArray2IndexPtr;\n  \n  size1 = *(int *)(inputArray2 + 0x10);\n  if (*(int *)(inputArray1 + 0x10) < size1) {\n    return 0;\n  }\n  size2 = size1 + -1;\n  array2Ptr = (uint *)(inputArray2 + 0x14);\n  array1Ptr = (uint *)(inputArray1 + 0x14);\n  quotient = array1Ptr[size2] / (array2Ptr[size2] + 1);\n  array2EndPtr = array2Ptr + size2;\n  if (quotient != 0) {\n    sum = 0;\n    carry = 0;\n    array1IndexPtr = array1Ptr;\n    array2IndexPtr = array2Ptr;\n    do {\n      nextArray2IndexPtr = array2IndexPtr + 1;\n      sum = quotient * (*array2IndexPtr & 0xffff) + sum;\n      carrySum = quotient * (*array2IndexPtr >> 0x10) + (sum >> 0x10);\n      sum = (carry - (sum & 0xffff)) + (*array1IndexPtr & 0xffff);\n      carry = ((*array1IndexPtr >> 0x10) - (carrySum & 0xffff)) + ((int)sum >> 0x10);\n      *array1IndexPtr = sum & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      sum = carrySum >> 0x10;\n      array1IndexPtr = array1IndexPtr + 1;\n      array2IndexPtr = nextArray2IndexPtr;\n    } while (nextArray2IndexPtr <= array2EndPtr);\n    if (array1Ptr[size2] == 0) {\n      if ((array1Ptr < array1Ptr + size1 + -2) && (array1Ptr[size1 + -2] == 0)) {\n        array1IndexPtr = array1Ptr + size1 + -3;\n        do {\n          size2 = size2 + -1;\n          if (array1IndexPtr <= array1Ptr) break;\n          sum = *array1IndexPtr;\n          array1IndexPtr = array1IndexPtr + -1;\n        } while (sum == 0);\n      }\n      *(int *)(inputArray1 + 0x10) = size2;\n    }\n  }\n  size1 = FUN_080094f8();\n  if (-1 < size1) {\n    size1 = 0;\n    quotient = quotient + 1;\n    array1IndexPtr = array1Ptr;\n    do {\n      array2IndexPtr = array2Ptr + 1;\n      sum = (size1 - (*array2Ptr & 0xffff)) + (*array1IndexPtr & 0xffff);\n      size1 = ((*array1IndexPtr >> 0x10) - (*array2Ptr >> 0x10)) + ((int)sum >> 0x10);\n      *array1IndexPtr = sum & 0xffff | size1 * 0x10000;\n      size1 = size1 >> 0x10;\n      array1IndexPtr = array1IndexPtr + 1;\n      array2Ptr = array2IndexPtr;\n    } while (array2IndexPtr <= array2EndPtr);\n    if (array1Ptr[size2] == 0) {\n      if ((array1Ptr < array1Ptr + size2 + -1) && (array1Ptr[size2 + -1] == 0)) {\n        array2Ptr = array1Ptr + size2 + -2;\n        do {\n          size2 = size2 + -1;\n          if (array2Ptr <= array1Ptr) break;\n          sum = *array2Ptr;\n          array2Ptr = array2Ptr + -1;\n        } while (sum == 0);\n      }\n      *(int *)(inputArray1 + 0x10) = size2;\n    }\n  }\n  return quotient;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_quotient_080078c0",
                "param_1": "inputArray1",
                "param_2": "inputArray2",
                "iVar4": "size1",
                "iVar3": "carry",
                "iVar5": "size2",
                "uVar1": "sum",
                "uVar10": "carrySum",
                "uVar6": "quotient",
                "puVar7": "array2Ptr",
                "puVar8": "array1Ptr",
                "puVar9": "array2EndPtr",
                "puVar2": "array1IndexPtr",
                "puVar11": "array2IndexPtr",
                "puVar12": "nextArray2IndexPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_float_to_string_080079e8",
            "code": "\nchar * convertFloatToString_080079e8(int value,undefined4 param_2,uint param_3,uint param_4,uint enableExponentNotation,\n                   uint decimalPlaces,int *maxLength,uint *isNegative,char **stringValue)\n\n{\n  bool shouldSkipZero;\n  bool isZero;\n  bool isExponentNotation;\n  char digit;\n  byte isDigitLeadingZero;\n  undefined4 integerPart;\n  int digitCount;\n  int comparison;\n  int error;\n  char *pcVar10;\n  uint leadingDigit;\n  undefined4 temp1;\n  undefined4 temp2;\n  int digits;\n  int digitCount;\n  undefined4 temp3;\n  uint originalExponent;\n  uint absValue;\n  int exponentBits;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 roundResult;\n  int digitCode;\n  bool isZero5;\n  undefined8 convertResult;\n  undefined8 roundingCheckResult;\n  undefined8 temp4;\n  uint decimalNumber;\n  uint absValue;\n  uint digitCode;\n  int trailingZeroCount;\n  uint exponentDigits;\n  int leadingZeroCount;\n  int digitOffset;\n  uint leadingZeroDigits;\n  uint tempValue;\n  uint uStack_44;\n  uint roundMode;\n  uint remainingDigits;\n  int digitIndex;\n  int digitsBuffers [2];\n  \n  digits = *(int *)(value + 0x40);\n  if (digits != 0) {\n    absValue = *(uint *)(value + 0x44);\n    *(uint *)(digits + 4) = absValue;\n    *(int *)(digits + 8) = 1 << (absValue & 0xff);\n    FUN_0800910c(value,digits);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  isZero5 = (int)param_4 < 0;\n  absValue = param_4;\n  if (isZero5) {\n    absValue = param_4 & 0x7fffffff;\n  }\n  *isNegative = (uint)isZero5;\n  absValue = param_4;\n  if (isZero5) {\n    absValue = absValue;\n  }\n  originalExponent = absValue;\n  if ((~absValue & 0x7ff00000) == 0) {\n    *maxLength = 9999;\n    if ((param_3 == 0) && ((absValue & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (stringValue == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (stringValue == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *stringValue = pcVar21;\n    return pcVar10;\n  }\n  convertResult = FUN_08000998(param_3,absValue,0,0);\n  if ((int)convertResult != 0) {\n    *maxLength = 1;\n    if (stringValue != (char **)0x0) {\n      *stringValue = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  integerPart = FUN_08009630(value,(int)((ulonglong)convertResult >> 0x20),param_3,absValue,digitsBuffers,&digitIndex)\n  ;\n  digits = digitIndex;\n  if (absValue >> 0x14 == 0) {\n    exponentBits = digitsBuffers[0] + digitIndex;\n    digitCount = exponentBits + 0x432;\n    if (digitCount < 0x21) {\n      absValue = param_3 << (0x20U - digitCount & 0xff);\n    }\n    else {\n      absValue = param_3 >> (exponentBits + 0x412U & 0xff) | absValue << (0x40U - digitCount & 0xff);\n    }\n    convertResult = FUN_080003d4(absValue);\n    exponentBits = exponentBits + -1;\n    isZero5 = true;\n    leadingDigit = (int)((ulonglong)convertResult >> 0x20) + 0xfe100000;\n    absValue = (uint)convertResult;\n  }\n  else {\n    exponentBits = (absValue >> 0x14) - 0x3ff;\n    leadingDigit = absValue & 0xfffff | 0x3ff00000;\n    isZero5 = false;\n    absValue = param_3;\n  }\n  convertResult = FUN_08000158(absValue,leadingDigit,0,0x3ff80000);\n  convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0x636f4361,0x3fd287a7);\n  convertResult = FUN_0800015c((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0x8b60c8b3,0x3fc68a28);\n  roundingCheckResult = FUN_080003f4(exponentBits);\n  roundingCheckResult = FUN_080004c8((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),0x509f79fb,0x3fd34413);\n  convertResult = FUN_0800015c((int)convertResult,(int)((ulonglong)convertResult >> 0x20),(int)roundingCheckResult,\n                        (int)((ulonglong)roundingCheckResult >> 0x20));\n  temp2 = (undefined4)((ulonglong)convertResult >> 0x20);\n  digitCode = FUN_0800119c();\n  digitCount = FUN_080009ac((int)convertResult,temp2,0,0);\n  if (digitCount != 0) {\n    roundingCheckResult = FUN_080003f4(digitCode);\n    digitCount = FUN_08000998((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),(int)convertResult,temp2);\n    if (digitCount == 0) {\n      digitCode = digitCode - 1;\n    }\n  }\n  if (digitCode < 0x17) {\n    digitCount = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + digitCode * 8),\n                          *(undefined4 *)(&DAT_08009fac + digitCode * 8),param_3,absValue);\n    if (digitCount == 0) {\n      isZero = false;\n    }\n    else {\n      digitCode = digitCode - 1;\n      isZero = false;\n    }\n  }\n  else {\n    isZero = true;\n  }\n  digitCount = (digits - exponentBits) + -1;\n  if (digitCount < 0) {\n    trailingZeroCount = 1 - (digits - exponentBits);\n    digitCount = 0;\n  }\n  else {\n    trailingZeroCount = 0;\n  }\n  if ((int)digitCode < 0) {\n    leadingZeroDigits = 0;\n    trailingZeroCount = trailingZeroCount - digitCode;\n    digitOffset = -digitCode;\n  }\n  else {\n    digitCount = digitCount + digitCode;\n    leadingZeroDigits = digitCode;\n    digitOffset = 0;\n  }\n  if (9 < enableExponentNotation) {\n    roundMode = 0xffffffff;\n    shouldSkipZero = true;\n    exponentDigits = 0xffffffff;\n    isExponentNotation = true;\n    enableExponentNotation = 0;\n    decimalPlaces = 0;\n    goto LAB_08007c24;\n  }\n  shouldSkipZero = (int)enableExponentNotation < 6;\n  if (!shouldSkipZero) {\n    enableExponentNotation = enableExponentNotation - 4;\n  }\n  switch(enableExponentNotation) {\n  case 2:\n    isExponentNotation = false;\n    break;\n  case 3:\n    isExponentNotation = false;\n    goto LAB_08008300;\n  case 4:\n    isExponentNotation = true;\n    break;\n  case 5:\n    isExponentNotation = true;\nLAB_08008300:\n    roundMode = digitCode + decimalPlaces;\n    exponentDigits = roundMode + 1;\n    absValue = exponentDigits;\n    if ((int)exponentDigits < 1) {\n      absValue = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    pcVar10 = (char *)FUN_080090c0(value,0);\n    roundMode = 0xffffffff;\n    exponentDigits = 0xffffffff;\n    decimalPlaces = 0;\n    *(char **)(value + 0x40) = pcVar10;\n    isExponentNotation = true;\n    goto LAB_08007e36;\n  }\n  if ((int)decimalPlaces < 1) {\n    roundMode = 1;\n    decimalPlaces = 1;\n    exponentDigits = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    leadingDigit = roundMode;\n  }\n  else {\n    roundMode = decimalPlaces;\n    exponentDigits = decimalPlaces;\n    absValue = decimalPlaces;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    leadingDigit = exponentDigits;\n    if (0x17 < (int)absValue) {\n      exponentBits = 4;\n      digits = 1;\n      do {\n        digitCount = digits;\n        exponentBits = exponentBits * 2;\n        digits = digitCount + 1;\n      } while (exponentBits + 0x14U <= absValue);\n      *(int *)(value + 0x44) = digitCount;\n    }\n  }\n  pcVar10 = (char *)FUN_080090c0(value);\n  *(char **)(value + 0x40) = pcVar10;\n  if ((leadingDigit < 0xf) && (shouldSkipZero)) {\n    if ((int)digitCode < 1) {\n      if (digitCode == 0) {\n        digits = 2;\n        decimalNumber = param_3;\n      }\n      else {\n        digits = (-digitCode & 0xf) * 8;\n        convertResult = FUN_080004c8(param_3,absValue,*(undefined4 *)(&DAT_08009fa8 + digits),\n                              *(undefined4 *)(&DAT_08009fac + digits));\n        absValue = (uint)((ulonglong)convertResult >> 0x20);\n        decimalNumber = (uint)convertResult;\n        exponentBits = (int)-digitCode >> 4;\n        if (exponentBits == 0) {\n          digits = 2;\n        }\n        else {\n          shouldSkipZero = false;\n          digits = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (exponentBits << 0x1f < 0) {\n              convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),*puVar22,puVar22[1]\n                                   );\n              shouldSkipZero = true;\n              digits = digits + 1;\n            }\n            exponentBits = exponentBits >> 1;\n            puVar22 = puVar22 + 2;\n          } while (exponentBits != 0);\n          if (shouldSkipZero) {\n            decimalNumber = (uint)convertResult;\n            absValue = (uint)((ulonglong)convertResult >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      absValue = (int)digitCode >> 4;\n      roundingCheckResult = *(undefined8 *)(&DAT_08009fa8 + (digitCode & 0xf) * 8);\n      convertResult = *(undefined8 *)(&DAT_08009fa8 + (digitCode & 0xf) * 8);\n      if ((int)(absValue << 0x1b) < 0) {\n        temp4 = FUN_0800071c(param_3,absValue,0x7f73bf3c,0x75154fdd);\n        uStack_44 = (uint)((ulonglong)temp4 >> 0x20);\n        tempValue = (uint)temp4;\n        digits = 3;\n        absValue = absValue & 0xf;\n      }\n      else {\n        digits = 2;\n        uStack_44 = absValue;\n        tempValue = param_3;\n      }\n      if (absValue != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(absValue << 0x1f) < 0) {\n            convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),*puVar22,puVar22[1]);\n            digits = digits + 1;\n          }\n          absValue = (int)absValue >> 1;\n          puVar22 = puVar22 + 2;\n          roundingCheckResult = convertResult;\n        } while (absValue != 0);\n      }\n      absValue = (uint)((ulonglong)roundingCheckResult >> 0x20);\n      decimalNumber = (uint)roundingCheckResult;\n      convertResult = FUN_0800071c(tempValue,uStack_44,decimalNumber,absValue);\n      decimalNumber = (uint)convertResult;\n      absValue = (uint)((ulonglong)convertResult >> 0x20);\n    }\n    convertResult = CONCAT44(absValue,decimalNumber);\n    if ((isZero) && (exponentBits = FUN_080009ac(decimalNumber,absValue,0,0x3ff00000), exponentBits != 0)) {\n      if (exponentDigits == 0) {\n        convertResult = FUN_080003f4(digits);\n        convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),decimalNumber,absValue);\n        convertResult = FUN_0800015c((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)convertResult;\n        digits = (int)((ulonglong)convertResult >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)roundMode) {\n        convertResult = FUN_080004c8(decimalNumber,absValue,0,0x40240000);\n        roundingCheckResult = FUN_080003f4(digits + 1);\n        roundingCheckResult = FUN_080004c8((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),(int)convertResult,\n                              (int)((ulonglong)convertResult >> 0x20));\n        roundingCheckResult = FUN_0800015c((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)roundingCheckResult;\n        tempValue = roundMode;\n        remainingDigits = digitCode - 1;\n        digits = (int)((ulonglong)roundingCheckResult >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    roundingCheckResult = FUN_080003f4(digits);\n    roundingCheckResult = FUN_080004c8((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),decimalNumber,absValue);\n    roundingCheckResult = FUN_0800015c((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),0,0x401c0000);\n    temp2 = (undefined4)roundingCheckResult;\n    digits = (int)((ulonglong)roundingCheckResult >> 0x20) + -0x3400000;\n    if (exponentDigits != 0) {\n      remainingDigits = digitCode;\n      tempValue = exponentDigits;\nLAB_08007cfa:\n      absValue = (uint)((ulonglong)convertResult >> 0x20);\n      decimalNumber = (uint)convertResult;\n      digit = FUN_0800119c(decimalNumber,absValue);\n      digit = digit + '0';\n      temp3 = (&DAT_08009fa0)[tempValue * 2];\n      temp1 = (&DAT_08009fa4)[tempValue * 2];\n      convertResult = FUN_080003f4();\n      convertResult = FUN_08000158(decimalNumber,absValue,(int)convertResult,(int)((ulonglong)convertResult >> 0x20));\n      roundResult = (undefined4)((ulonglong)convertResult >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (isExponentNotation) {\n        roundingCheckResult = FUN_0800071c(0,0x3fe00000,temp3,temp1);\n        roundingCheckResult = FUN_08000158((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),temp2,digits);\n        temp2 = (undefined4)((ulonglong)roundingCheckResult >> 0x20);\n        *pcVar10 = digit;\n        digits = FUN_080009e8((int)roundingCheckResult,temp2,(int)convertResult,roundResult);\n        if (digits != 0) {\nLAB_08008784:\n          digitCode = remainingDigits;\n          goto LAB_08008294;\n        }\n        temp4 = FUN_08000158(0,0x3ff00000,(int)convertResult,roundResult);\n        digits = FUN_080009e8((int)roundingCheckResult,temp2,(int)temp4,(int)((ulonglong)temp4 >> 0x20));\n        if (digits == 0) {\n          if (tempValue != 1) {\n            pcVar20 = pcVar21;\n            do {\n              roundingCheckResult = FUN_080004c8((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),0,0x40240000);\n              temp2 = (undefined4)((ulonglong)roundingCheckResult >> 0x20);\n              convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0,0x40240000);\n              digit = FUN_0800119c();\n              temp4 = FUN_080003f4();\n              convertResult = FUN_08000158((int)convertResult,(int)((ulonglong)convertResult >> 0x20),(int)temp4,\n                                    (int)((ulonglong)temp4 >> 0x20));\n              temp3 = (undefined4)((ulonglong)convertResult >> 0x20);\n              digit = digit + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = digit;\n              digits = FUN_080009ac((int)convertResult,temp3,(int)roundingCheckResult,temp2);\n              if (digits != 0) {\n                digitCode = remainingDigits;\n                goto LAB_08008294;\n              }\n              temp4 = FUN_08000158(0,0x3ff00000,(int)convertResult,temp3);\n              digits = FUN_080009ac((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)roundingCheckResult,temp2)\n              ;\n              if (digits != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + tempValue);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        digitCode = remainingDigits;\n      }\n      else {\n        roundingCheckResult = FUN_080004c8(temp2,digits,temp3,temp1);\n        temp2 = (undefined4)((ulonglong)roundingCheckResult >> 0x20);\n        *pcVar10 = digit;\n        if (tempValue != 1) {\n          pcVar20 = pcVar21;\n          do {\n            convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0,0x40240000);\n            digit = FUN_0800119c();\n            temp4 = FUN_080003f4();\n            convertResult = FUN_08000158((int)convertResult,(int)((ulonglong)convertResult >> 0x20),(int)temp4,\n                                  (int)((ulonglong)temp4 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = digit + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + tempValue);\n        }\n        temp3 = (undefined4)((ulonglong)convertResult >> 0x20);\n        temp4 = FUN_0800015c((int)roundingCheckResult,temp2,0,0x3fe00000);\n        digits = FUN_080009ac((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)convertResult,temp3);\n        if (digits == 0) {\n          roundingCheckResult = FUN_08000158(0,0x3fe00000,(int)roundingCheckResult,temp2);\n          digits = FUN_080009e8((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),(int)convertResult,temp3);\n          pcVar20 = pcVar21;\n          if (digits == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        digitCode = remainingDigits;\n        digit = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    convertResult = FUN_08000158(decimalNumber,absValue,0,0x40140000);\n    temp3 = (undefined4)((ulonglong)convertResult >> 0x20);\n    exponentBits = FUN_080009e8((int)convertResult,temp3,temp2,digits);\n    if (exponentBits == 0) {\n      digits = FUN_080009ac((int)convertResult,temp3,temp2,digits + -0x80000000);\n      if (digits == 0) goto LAB_08007e36;\n      exponentBits = 0;\n      digits = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    digitCount = 0;\n    digitCount = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    digitCode = digitCode + 1;\n    pcVar21 = pcVar10 + 1;\n    exponentBits = digitCount;\n    digits = digitCount;\nLAB_08008416:\n    FUN_0800910c(value,digits);\n    if (exponentBits == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < digitsBuffers[0]) && ((int)digitCode < 0xf)) {\n      temp2 = *(undefined4 *)(&DAT_08009fa8 + digitCode * 8);\n      temp3 = *(undefined4 *)(&DAT_08009fac + digitCode * 8);\n      if ((-1 < (int)decimalPlaces) || (0 < (int)exponentDigits)) {\n        FUN_0800071c(param_3,originalExponent,temp2,temp3);\n        isDigitLeadingZero = FUN_0800119c();\n        convertResult = FUN_080003f4();\n        convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),temp2,temp3);\n        convertResult = FUN_08000158(param_3,originalExponent,(int)convertResult,(int)((ulonglong)convertResult >> 0x20));\n        *pcVar10 = isDigitLeadingZero + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (exponentDigits != 1) {\n          convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0,0x40240000);\n          digits = FUN_08000998((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0,0);\n          while (digits == 0) {\n            roundResult = (undefined4)((ulonglong)convertResult >> 0x20);\n            FUN_0800071c((int)convertResult,roundResult,temp2,temp3);\n            isDigitLeadingZero = FUN_0800119c();\n            roundingCheckResult = FUN_080003f4();\n            roundingCheckResult = FUN_080004c8((int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20),temp2,temp3);\n            convertResult = FUN_08000158((int)convertResult,roundResult,(int)roundingCheckResult,(int)((ulonglong)roundingCheckResult >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = isDigitLeadingZero + 0x30;\n            pcVar21 = pcVar20;\n            if (exponentDigits == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            convertResult = FUN_080004c8((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0,0x40240000);\n            digits = FUN_08000998((int)convertResult,(int)((ulonglong)convertResult >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        convertResult = FUN_0800015c((int)convertResult,(int)((ulonglong)convertResult >> 0x20));\n        roundResult = (undefined4)((ulonglong)convertResult >> 0x20);\n        digits = FUN_080009e8((int)convertResult,roundResult,temp2,temp3);\n        if ((digits == 0) &&\n           ((digits = FUN_08000998((int)convertResult,roundResult,temp2,temp3), digits == 0 ||\n            ((isDigitLeadingZero & 1) == 0)))) goto LAB_08008294;\n        digit = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, digit == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            digit = pcVar21[-1];\n            digitCode = digitCode + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          digit = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (exponentDigits == 0) {\n        convertResult = FUN_080004c8(temp2,temp3,0,0x40140000);\n        error = FUN_080009d4((int)convertResult,(int)((ulonglong)convertResult >> 0x20),param_3,originalExponent);\n        exponentBits = 0;\n        digitCount = 0;\n        digitCount = 0;\n        digits = 0;\n        if (error == 0) goto LAB_08008406;\n      }\n      else {\n        exponentBits = 0;\n        digits = 0;\n      }\nLAB_080084f0:\n      digitCode = ~decimalPlaces;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    digits = digitOffset;\n    if (isExponentNotation) {\n      if ((int)enableExponentNotation < 2) {\n        if (isZero5) {\n          leadingZeroCount = trailingZeroCount;\n          trailingZeroCount = trailingZeroCount + digitsBuffers[0] + 0x433;\n          digitCount = digitCount + digitsBuffers[0] + 0x433;\n        }\n        else {\n          leadingZeroCount = trailingZeroCount;\n          trailingZeroCount = trailingZeroCount + (0x36 - digitIndex);\n          digitCount = digitCount + (0x36 - digitIndex);\n        }\n      }\n      else {\n        exponentBits = exponentDigits - 1;\n        if (digitOffset < exponentBits) {\n          leadingZeroDigits = leadingZeroDigits + (exponentBits - digitOffset);\n          digits = 0;\n          digitOffset = exponentBits;\n        }\n        else {\n          digits = digitOffset - exponentBits;\n        }\n        if ((int)exponentDigits < 0) {\n          leadingZeroCount = trailingZeroCount - exponentDigits;\n        }\n        else {\n          digitCount = digitCount + exponentDigits;\n          leadingZeroCount = trailingZeroCount;\n          trailingZeroCount = trailingZeroCount + exponentDigits;\n        }\n      }\n      exponentBits = FUN_08009244(value,1);\n    }\n    else {\n      leadingZeroCount = trailingZeroCount;\n      exponentBits = 0;\n    }\n    if ((0 < leadingZeroCount) && (0 < digitCount)) {\n      digitCount = leadingZeroCount;\n      if (digitCount <= leadingZeroCount) {\n        digitCount = digitCount;\n      }\n      digitCount = digitCount - digitCount;\n      trailingZeroCount = trailingZeroCount - digitCount;\n      leadingZeroCount = leadingZeroCount - digitCount;\n    }\n    if (digitOffset != 0) {\n      if (isExponentNotation) {\n        temp2 = integerPart;\n        if (digits != 0) {\n          exponentBits = FUN_080093a4(value,exponentBits,digits);\n          temp2 = FUN_08009258(value,exponentBits,integerPart);\n          FUN_0800910c(value,integerPart);\n          integerPart = temp2;\n          if (digitOffset - digits == 0) goto LAB_08008062;\n        }\n        integerPart = FUN_080093a4(value,temp2,digitOffset - digits);\n      }\n      else {\n        integerPart = FUN_080093a4(value,integerPart,digitOffset);\n      }\n    }\nLAB_08008062:\n    digits = FUN_08009244(value,1);\n    if (leadingZeroDigits == 0) {\n      if (((int)enableExponentNotation < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((originalExponent & 0xfffff) == 0) {\n          originalExponent = originalExponent & 0x7ff00000;\n          if (originalExponent != 0) {\n            digitCount = digitCount + 1;\n            trailingZeroCount = trailingZeroCount + 1;\n            originalExponent = 1;\n          }\n        }\n        else {\n          originalExponent = 0;\n        }\n        isZero5 = leadingZeroDigits != 0;\n        absValue = param_3;\n        leadingZeroDigits = originalExponent;\n        if (isZero5) goto LAB_080082d4;\n      }\n      digitCount = 1;\n    }\n    else {\n      convertResult = FUN_080093a4(value,digits);\n      digits = (int)convertResult;\n      if (((int)enableExponentNotation < 2) && (param_3 == 0)) goto LAB_0800835a;\n      leadingZeroDigits = 0;\n      absValue = (uint)((ulonglong)convertResult >> 0x20);\nLAB_080082d4:\n      digitCount = FUN_080091a4(*(undefined4 *)(digits + *(int *)(digits + 0x10) * 4 + 0x10),absValue);\n      digitCount = 0x20 - digitCount;\n    }\n    absValue = digitCount + digitCount & 0x1f;\n    if (absValue == 0) {\n      digitCount = 0x1c;\nLAB_08008096:\n      digitCount = digitCount + digitCount;\n      trailingZeroCount = trailingZeroCount + digitCount;\n      leadingZeroCount = leadingZeroCount + digitCount;\n    }\n    else {\n      if (4 < (int)(0x20 - absValue)) {\n        digitCount = 0x1c - absValue;\n        goto LAB_08008096;\n      }\n      if (0x20 - absValue != 4) {\n        digitCount = 0x3c - absValue;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < trailingZeroCount) {\n      integerPart = FUN_08009444(value,integerPart,trailingZeroCount);\n    }\n    if (0 < digitCount) {\n      digits = FUN_08009444(value,digits,digitCount);\n    }\n    pcVar20 = pcVar10;\n    if ((isZero) && (digitCount = FUN_080094f8(integerPart,digits), digitCount < 0)) {\n      digitCode = digitCode - 1;\n      integerPart = FUN_08009120(value,integerPart,10,0);\n      if (isExponentNotation) {\n        exponentBits = FUN_08009120(value,exponentBits,10,0);\n        if ((0 < (int)roundMode) || ((int)enableExponentNotation < 3)) {\n          exponentDigits = roundMode;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)roundMode) || ((int)enableExponentNotation < 3)) {\n        exponentDigits = roundMode;\n        goto LAB_0800820a;\n      }\n      exponentDigits = roundMode;\nLAB_080084e8:\n      if (exponentDigits == 0) {\n        digitCount = FUN_08009120(value,digits,5);\n        error = FUN_080094f8(integerPart,digitCount);\n        digitCount = exponentBits;\n        digits = digitCount;\n        if (0 < error) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)exponentDigits < 1) && (2 < (int)enableExponentNotation)) goto LAB_080084e8;\n    if (isExponentNotation) {\nLAB_080080de:\n      decimalNumber = exponentBits;\n      if (0 < leadingZeroCount) {\n        decimalNumber = FUN_08009444(value,exponentBits,leadingZeroCount);\n      }\n      exponentBits = decimalNumber;\n      if (leadingZeroDigits != 0) {\n        exponentBits = FUN_080090c0(value,*(undefined4 *)(decimalNumber + 4));\n        FUN_08001084(exponentBits + 0xc,decimalNumber + 0xc,(*(int *)(decimalNumber + 0x10) + 2) * 4);\n        exponentBits = FUN_08009444(value,exponentBits,1);\n      }\nLAB_08008108:\n      digitCount = FUN_080078c0(integerPart,digits);\n      digitCount = FUN_080094f8(integerPart,decimalNumber);\n      error = FUN_08009530(value,digits,exponentBits);\n      digitCode = digitCount + 0x30;\n      if (*(int *)(error + 0xc) == 0) {\n        comparison = FUN_080094f8(integerPart);\n        FUN_0800910c(value,error);\n        if ((comparison != 0) || (enableExponentNotation != 0)) goto LAB_0800815a;\n        if ((param_3 & 1) != 0) {\n          comparison = 0;\n          goto LAB_0800815a;\n        }\n        if (digitCode != 0x39) {\n          if (0 < digitCount) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        digit = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(value,error);\n      comparison = 1;\nLAB_0800815a:\n      if ((digitCount < 0) || (((digitCount == 0 && (enableExponentNotation == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < comparison) {\n          integerPart = FUN_08009444(value,integerPart,1);\n          digitCount = FUN_080094f8(integerPart,digits);\n          if ((0 < digitCount) || ((digitCount == 0 && (digitCount << 0x1f < 0)))) {\n            if (digitCode == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            digitCode = digitCount + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)digitCode;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < comparison) {\n        if (digitCode == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)digitCount + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)digitCode;\n      if (pcVar10 + (exponentDigits - 1) != pcVar20) {\n        integerPart = FUN_08009120(value,integerPart,10,0);\n        pcVar20 = pcVar21;\n        if (decimalNumber == exponentBits) {\n          decimalNumber = FUN_08009120(value,decimalNumber,10,0);\n          exponentBits = decimalNumber;\n        }\n        else {\n          decimalNumber = FUN_08009120(value,decimalNumber,10,0);\n          exponentBits = FUN_08009120(value,exponentBits,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        digitCode = FUN_080078c0(integerPart,digits);\n        digitCode = digitCode + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)digitCode;\n        if ((int)exponentDigits <= (int)pcVar21 - (int)pcVar10) break;\n        integerPart = FUN_08009120(value,integerPart,10,0);\n        pcVar20 = pcVar21;\n      }\n      decimalNumber = 0;\n    }\n    integerPart = FUN_08009444(value,integerPart,1);\n    digitCount = FUN_080094f8(integerPart,digits);\n    digit = pcVar21[-1];\n    if ((0 < digitCount) || ((digitCount == 0 && (digitCode << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          digitCode = digitCode + 1;\n          goto LAB_08008274;\n        }\n        digit = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(value,digits);\n    if (exponentBits == 0) goto LAB_08008294;\n    if ((decimalNumber != 0) && (decimalNumber != exponentBits)) {\n      FUN_0800910c(value);\n    }\n  }\n  FUN_0800910c(value,exponentBits);\nLAB_08008294:\n  FUN_0800910c(value,integerPart);\n  *pcVar21 = '\\0';\n  *maxLength = digitCode + 1;\n  if (stringValue == (char **)0x0) {\n    return pcVar10;\n  }\n  *stringValue = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "param_1": "value",
                "param_5": "enableExponentNotation",
                "param_6": "decimalPlaces",
                "param_7": "maxLength",
                "param_8": "isNegative",
                "param_9": "stringValue",
                "bVar1": "shouldSkipZero",
                "bVar2": "isZero",
                "bVar3": "isExponentNotation",
                "cVar4": "digit",
                "bVar5": "isDigitLeadingZero",
                "uVar6": "integerPart",
                "iVar7": "digitCount",
                "iVar8": "comparison",
                "iVar9": "error",
                "iVar14": "digits",
                "iVar15": "digitCount",
                "iVar19": "exponentBits",
                "iVar24": "digitCode",
                "uVar11": "leadingDigit",
                "uVar12": "temp1",
                "uVar13": "temp2",
                "uVar16": "temp3",
                "uVar17": "originalExponent",
                "uVar18": "absValue",
                "uVar23": "roundResult",
                "uVar26": "convertResult",
                "uVar27": "roundingCheckResult",
                "uVar28": "temp4",
                "local_80": "decimalNumber",
                "local_7c": "absValue",
                "local_74": "digitCode",
                "local_70": "trailingZeroCount",
                "local_68": "exponentDigits",
                "local_60": "leadingZeroCount",
                "local_5c": "digitOffset",
                "local_58": "leadingZeroDigits",
                "local_48": "tempValue",
                "local_38": "roundMode",
                "local_34": "remainingDigits",
                "local_30": "digitIndex",
                "local_2c": "digitsBuffers"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "allocate_memory_0800884c",
            "code": "\nundefined4 allocate_memory_0800884c(undefined4 ptr_to_data,int offset)\n\n{\n  int result;\n  int new_address;\n  uint mask;\n  \n  FUN_080090a8();\n  mask = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  new_address = ((0xfef - offset) + mask & 0xfffff000) - 0x1000;\n  if (0xfff < new_address) {\n    result = FUN_08009744(ptr_to_data,0);\n    if (result == DAT_20000454 + mask) {\n      result = FUN_08009744(ptr_to_data,-new_address);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - new_address;\n        *(uint *)(DAT_20000454 + 4) = mask - new_address | 1;\n        FUN_080090b4(ptr_to_data);\n        return 1;\n      }\n      new_address = FUN_08009744(ptr_to_data,0);\n      if (0xf < new_address - DAT_20000454) {\n        DAT_20000a14 = new_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = new_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(ptr_to_data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "param_1": "ptr_to_data",
                "param_2": "offset",
                "iVar1": "result",
                "iVar2": "new_address",
                "uVar3": "mask"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "decompiled_function_080088ec",
            "code": "\nvoid decompiled_function_080088ec(undefined4 arg1,int arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int index;\n  uint *intPtr1;\n  uint *intPtr2;\n  undefined *bytePtr;\n  uint size;\n  uint length;\n  undefined *bytePtr1;\n  undefined *bytePtr2;\n  undefined4 *intPtr3;\n  int count;\n  uint flag1;\n  uint flag2;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  flag1 = *(uint *)(arg2 + -4);\n  intPtr1 = (uint *)(arg2 + -8);\n  size = flag1 & 0xfffffffe;\n  intPtr2 = (uint *)((int)intPtr1 + size);\n  length = intPtr2[1] & 0xfffffffc;\n  if (DAT_20000454 == intPtr2) {\n    size = size + length;\n    if ((flag1 & 1) == 0) {\n      intPtr1 = (uint *)((int)intPtr1 - *(int *)(arg2 + -8));\n      length = intPtr1[2];\n      flag1 = intPtr1[3];\n      size = size + *(int *)(arg2 + -8);\n      *(uint *)(length + 0xc) = flag1;\n      *(uint *)(flag1 + 8) = length;\n    }\n    length = DAT_20000858;\n    intPtr1[1] = size | 1;\n    DAT_20000454 = intPtr1;\n    if (length <= size) {\n      FUN_0800884c(arg1,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(arg1);\n    return;\n  }\n  intPtr2[1] = length;\n  if ((flag1 & 1) == 0) {\n    intPtr1 = (uint *)((int)intPtr1 - *(int *)(arg2 + -8));\n    intPtr3 = (undefined4 *)intPtr1[2];\n    size = size + *(int *)(arg2 + -8);\n    flag1 = *(uint *)((int)intPtr2 + length + 4) & 1;\n    if ((uint **)intPtr3 == &DAT_20000454) {\n      if (flag1 == 0) {\n        flag1 = intPtr2[2];\n        flag2 = intPtr2[3];\n        size = size + length;\n        *(uint *)(flag1 + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag1;\n        intPtr1[1] = size | 1;\n        *(uint *)((int)intPtr1 + size) = size;\n      }\n      else {\n        intPtr1[1] = size | 1;\n        *intPtr2 = size;\n      }\n      goto LAB_080089f0;\n    }\n    flag2 = intPtr1[3];\n    intPtr3[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = intPtr3;\n  }\n  else {\n    flag1 = *(uint *)((int)intPtr2 + length + 4) & 1;\n  }\n  if (flag1 == 0) {\n    intPtr3 = (undefined4 *)intPtr2[2];\n    size = size + length;\n    if ((uint **)intPtr3 == &DAT_20000454) {\n      DAT_2000045c = intPtr1;\n      DAT_20000460 = intPtr1;\n      intPtr1[2] = (uint)&DAT_20000454;\n      intPtr1[3] = (uint)&DAT_20000454;\n      intPtr1[1] = size | 1;\n      *(uint *)((int)intPtr1 + size) = size;\n      goto LAB_080089f0;\n    }\n    length = intPtr2[3];\n    intPtr3[3] = length;\n    *(undefined4 **)(length + 8) = intPtr3;\n    intPtr1[1] = size | 1;\n    *(uint *)((int)intPtr1 + size) = size;\n  }\n  else {\n    intPtr1[1] = size | 1;\n    *(uint *)((int)intPtr1 + size) = size;\n  }\n  if (size < 0x200) {\n    count = (size >> 3) + 1;\n    size = 1 << ((int)(size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    length = *(uint *)(&DAT_2000044c + count * 8);\n    intPtr1[2] = length;\n    intPtr1[3] = (uint)(&DAT_20000444 + count * 8);\n    DAT_20000450 = (undefined *)size;\n    *(uint **)(&DAT_2000044c + count * 8) = intPtr1;\n    *(uint **)(length + 0xc) = intPtr1;\n    FUN_080090b4(arg1,intPtr1,size,arg4);\n    return;\n  }\n  length = size >> 9;\n  if (length < 5) {\n    count = ((size >> 6) + 0x39) * 8;\n    index = (size >> 6) + 0x38;\n  }\n  else if (length < 0x15) {\n    count = (length + 0x5c) * 8;\n    index = length + 0x5b;\n  }\n  else if (length < 0x55) {\n    count = ((size >> 0xc) + 0x6f) * 8;\n    index = (size >> 0xc) + 0x6e;\n  }\n  else if (length < 0x155) {\n    count = ((size >> 0xf) + 0x78) * 8;\n    index = (size >> 0xf) + 0x77;\n  }\n  else if (length < 0x555) {\n    count = ((size >> 0x12) + 0x7d) * 8;\n    index = (size >> 0x12) + 0x7c;\n  }\n  else {\n    count = 0x3f8;\n    index = 0x7e;\n  }\n  bytePtr = *(undefined **)(&DAT_2000044c + count);\n  bytePtr1 = &DAT_20000444 + count;\n  if (bytePtr1 == bytePtr) {\n    bytePtr = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    bytePtr2 = bytePtr1;\n    DAT_20000450 = bytePtr;\n  }\n  else {\n    do {\n      bytePtr2 = bytePtr;\n      if ((*(uint *)(bytePtr + 4) & 0xfffffffc) <= size) break;\n      bytePtr = *(undefined **)(bytePtr + 8);\n      bytePtr2 = bytePtr1;\n    } while (bytePtr1 != bytePtr);\n    bytePtr1 = *(undefined **)(bytePtr2 + 0xc);\n  }\n  intPtr1[2] = (uint)bytePtr2;\n  intPtr1[3] = (uint)bytePtr1;\n  *(uint **)(bytePtr1 + 8) = intPtr1;\n  *(uint **)(bytePtr2 + 0xc) = intPtr1;\n  FUN_080090b4(arg1,intPtr1,bytePtr,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "decompiled_function_080088ec",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "index",
                "puVar2": "intPtr1",
                "puVar3": "intPtr2",
                "puVar4": "bytePtr",
                "uVar5": "size",
                "uVar6": "length",
                "puVar7": "bytePtr1",
                "puVar8": "bytePtr2",
                "puVar9": "intPtr3",
                "iVar10": "count",
                "uVar11": "flag1",
                "uVar12": "flag2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_processed_value_08008ad4",
            "code": "\nint get_processed_value_08008ad4(void)\n\n{\n  int value;\n  \n  value = *(int *)(DAT_2000001c + 0x34);\n  if (value == 0) {\n    value = 0x2000085c;\n  }\n  return value + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_processed_value_08008ad4",
                "iVar1": "value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_block_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_08008af8(undefined4 *block_pointer,uint block_size)\n\n{\n  undefined *temp_ptr_1;\n  uint temp_var_1;\n  uint temp_var_2;\n  int temp_var_3;\n  undefined *temp_ptr_2;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined4 *temp_ptr_3;\n  undefined *temp_ptr_4;\n  undefined *current_block_ptr;\n  int *return_value;\n  uint temp_var_6;\n  uint temp_var_7;\n  int temp_var_8;\n  undefined4 *temp_ptr_5;\n  undefined4 *temp_ptr_6;\n  \n  temp_var_6 = block_size + 0xb;\n  if (temp_var_6 < 0x17) {\n    if (0x10 < block_size) goto LAB_08008c7a;\n    FUN_080090a8();\n    temp_var_7 = 0x10;\n    temp_var_3 = 0x18;\n    temp_var_6 = 2;\nLAB_08008b18:\n    current_block_ptr = *(undefined **)((int)&DAT_20000450 + temp_var_3);\n    if ((current_block_ptr != &DAT_20000444 + temp_var_3) ||\n       (current_block_ptr = *(undefined **)((int)&DAT_20000458 + temp_var_3), &DAT_2000044c + temp_var_3 != current_block_ptr)) {\n      temp_var_3 = *(int *)(current_block_ptr + 0xc);\n      temp_ptr_2 = current_block_ptr + (*(uint *)(current_block_ptr + 4) & 0xfffffffc);\n      temp_var_6 = *(uint *)(temp_ptr_2 + 4);\nLAB_08008b34:\n      temp_var_8 = *(int *)(current_block_ptr + 8);\n      *(int *)(temp_var_8 + 0xc) = temp_var_3;\n      *(int *)(temp_var_3 + 8) = temp_var_8;\n      *(uint *)(temp_ptr_2 + 4) = temp_var_6 | 1;\n      FUN_080090b4(block_pointer);\n      return (int *)(current_block_ptr + 8);\n    }\n    temp_var_6 = temp_var_6 + 2;\n  }\n  else {\n    temp_var_7 = temp_var_6 & 0xfffffff8;\n    if (((int)temp_var_7 < 0) || (temp_var_7 < block_size)) {\nLAB_08008c7a:\n      *block_pointer = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (temp_var_7 < 0x1f8) {\n      temp_var_6 = temp_var_6 >> 3;\n      temp_var_3 = temp_var_7 + 8;\n      goto LAB_08008b18;\n    }\n    temp_var_1 = temp_var_6 >> 9;\n    if (temp_var_1 == 0) {\n      temp_var_3 = 0x200;\n      temp_var_4 = 0x40;\n      temp_var_1 = 0x3f;\n    }\n    else if (temp_var_1 < 5) {\n      temp_var_4 = (temp_var_6 >> 6) + 0x39;\n      temp_var_1 = (temp_var_6 >> 6) + 0x38;\n      temp_var_3 = temp_var_4 * 8;\n    }\n    else if (temp_var_1 < 0x15) {\n      temp_var_4 = temp_var_1 + 0x5c;\n      temp_var_1 = temp_var_1 + 0x5b;\n      temp_var_3 = temp_var_4 * 8;\n    }\n    else if (temp_var_1 < 0x55) {\n      temp_var_4 = (temp_var_6 >> 0xc) + 0x6f;\n      temp_var_1 = (temp_var_6 >> 0xc) + 0x6e;\n      temp_var_3 = temp_var_4 * 8;\n    }\n    else if (temp_var_1 < 0x155) {\n      temp_var_4 = (temp_var_6 >> 0xf) + 0x78;\n      temp_var_1 = (temp_var_6 >> 0xf) + 0x77;\n      temp_var_3 = temp_var_4 * 8;\n    }\n    else if (temp_var_1 < 0x555) {\n      temp_var_4 = (temp_var_6 >> 0x12) + 0x7d;\n      temp_var_1 = (temp_var_6 >> 0x12) + 0x7c;\n      temp_var_3 = temp_var_4 * 8;\n    }\n    else {\n      temp_var_3 = 0x3f8;\n      temp_var_4 = 0x7f;\n      temp_var_1 = 0x7e;\n    }\n    for (current_block_ptr = *(undefined **)((int)&DAT_20000450 + temp_var_3); temp_var_6 = temp_var_4,\n        &DAT_20000444 + temp_var_3 != current_block_ptr; current_block_ptr = *(undefined **)(current_block_ptr + 0xc)) {\n      temp_var_8 = (*(uint *)(current_block_ptr + 4) & 0xfffffffc) - temp_var_7;\n      temp_var_6 = temp_var_1;\n      if (0xf < temp_var_8) break;\n      if (-1 < temp_var_8) {\n        temp_ptr_2 = current_block_ptr + (*(uint *)(current_block_ptr + 4) & 0xfffffffc);\n        temp_var_6 = *(uint *)(temp_ptr_2 + 4);\n        temp_var_3 = *(int *)(current_block_ptr + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  temp_ptr_5 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    temp_var_4 = 1 << ((int)temp_var_6 >> 2 & 0xffU);\n    temp_var_1 = DAT_20000450;\n    if (temp_var_4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    temp_var_4 = DAT_2000045c[1];\n    temp_var_5 = temp_var_4 & 0xfffffffc;\n    temp_var_1 = temp_var_5 - temp_var_7;\n    if (0xf < (int)temp_var_1) {\n      temp_ptr_6 = (undefined4 *)(temp_var_7 + (int)DAT_2000045c);\n      DAT_2000045c[1] = temp_var_7 | 1;\n      DAT_2000045c = temp_ptr_6;\n      DAT_20000460 = temp_ptr_6;\n      temp_ptr_6[2] = &DAT_20000454;\n      temp_ptr_6[3] = &DAT_20000454;\n      temp_ptr_6[1] = temp_var_1 | 1;\n      *(uint *)((int)temp_ptr_5 + temp_var_5) = temp_var_1;\n      FUN_080090b4(block_pointer);\n      return temp_ptr_5 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp_var_1) {\n      *(uint *)((int)temp_ptr_5 + temp_var_5 + 4) = *(uint *)((int)temp_ptr_5 + temp_var_5 + 4) | 1;\n      FUN_080090b4(block_pointer);\n      return temp_ptr_5 + 2;\n    }\n    if (temp_var_5 < 0x200) {\n      temp_var_3 = (temp_var_4 >> 3) + 1;\n      temp_var_8 = *(int *)(&DAT_2000044c + temp_var_3 * 8);\n      temp_var_1 = 1 << ((int)(temp_var_4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      temp_ptr_5[2] = temp_var_8;\n      temp_ptr_5[3] = &DAT_20000444 + temp_var_3 * 8;\n      DAT_20000450 = temp_var_1;\n      *(undefined4 **)(&DAT_2000044c + temp_var_3 * 8) = temp_ptr_5;\n      *(undefined4 **)(temp_var_8 + 0xc) = temp_ptr_5;\n    }\n    else {\n      temp_var_1 = temp_var_4 >> 9;\n      if (temp_var_1 < 5) {\n        temp_var_3 = ((temp_var_4 >> 6) + 0x39) * 8;\n        temp_var_8 = (temp_var_4 >> 6) + 0x38;\n      }\n      else if (temp_var_1 < 0x15) {\n        temp_var_3 = (temp_var_1 + 0x5c) * 8;\n        temp_var_8 = temp_var_1 + 0x5b;\n      }\n      else if (temp_var_1 < 0x55) {\n        temp_var_3 = ((temp_var_4 >> 0xc) + 0x6f) * 8;\n        temp_var_8 = (temp_var_4 >> 0xc) + 0x6e;\n      }\n      else if (temp_var_1 < 0x155) {\n        temp_var_3 = ((temp_var_4 >> 0xf) + 0x78) * 8;\n        temp_var_8 = (temp_var_4 >> 0xf) + 0x77;\n      }\n      else if (temp_var_1 < 0x555) {\n        temp_var_3 = ((temp_var_4 >> 0x12) + 0x7d) * 8;\n        temp_var_8 = (temp_var_4 >> 0x12) + 0x7c;\n      }\n      else {\n        temp_var_3 = 0x3f8;\n        temp_var_8 = 0x7e;\n      }\n      current_block_ptr = *(undefined **)(&DAT_2000044c + temp_var_3);\n      temp_ptr_2 = &DAT_20000444 + temp_var_3;\n      if (temp_ptr_2 == current_block_ptr) {\n        DAT_20000450 = 1 << (temp_var_8 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(current_block_ptr + 4) & 0xfffffffc) <= temp_var_5) break;\n          current_block_ptr = *(undefined **)(current_block_ptr + 8);\n        } while (temp_ptr_2 != current_block_ptr);\n        temp_ptr_2 = *(undefined **)(current_block_ptr + 0xc);\n      }\n      temp_var_1 = DAT_20000450;\n      temp_ptr_5[2] = current_block_ptr;\n      temp_ptr_5[3] = temp_ptr_2;\n      *(undefined4 **)(temp_ptr_2 + 8) = temp_ptr_5;\n      *(undefined4 **)(current_block_ptr + 0xc) = temp_ptr_5;\n    }\n    temp_var_4 = 1 << ((int)temp_var_6 >> 2 & 0xffU);\n    if (temp_var_4 <= temp_var_1) {\nLAB_08008c06:\n      if ((temp_var_4 & temp_var_1) == 0) {\n        temp_var_6 = temp_var_6 & 0xfffffffc;\n        do {\n          temp_var_4 = temp_var_4 << 1;\n          temp_var_6 = temp_var_6 + 4;\n        } while ((temp_var_4 & temp_var_1) == 0);\n      }\n      do {\n        temp_ptr_6 = (undefined4 *)(&DAT_2000044c + temp_var_6 * 8);\n        temp_var_1 = temp_var_6;\n        temp_ptr_5 = temp_ptr_6;\n        do {\n          for (temp_ptr_3 = (undefined4 *)temp_ptr_5[3]; temp_ptr_5 != temp_ptr_3;\n              temp_ptr_3 = (undefined4 *)temp_ptr_3[3]) {\n            temp_var_5 = temp_ptr_3[1] & 0xfffffffc;\n            temp_var_2 = temp_var_5 - temp_var_7;\n            if (0xf < (int)temp_var_2) {\n              temp_var_8 = temp_ptr_3[2];\n              temp_var_3 = temp_ptr_3[3];\n              temp_ptr_5 = (undefined4 *)(temp_var_7 + (int)temp_ptr_3);\n              temp_ptr_3[1] = temp_var_7 | 1;\n              *(int *)(temp_var_8 + 0xc) = temp_var_3;\n              *(int *)(temp_var_3 + 8) = temp_var_8;\n              DAT_2000045c = temp_ptr_5;\n              DAT_20000460 = temp_ptr_5;\n              temp_ptr_5[2] = &DAT_20000454;\n              temp_ptr_5[3] = &DAT_20000454;\n              temp_ptr_5[1] = temp_var_2 | 1;\n              *(uint *)((int)temp_ptr_3 + temp_var_5) = temp_var_2;\n              FUN_080090b4(block_pointer);\n              return temp_ptr_3 + 2;\n            }\n            if (-1 < (int)temp_var_2) {\n              temp_var_3 = temp_ptr_3[3];\n              temp_var_8 = temp_ptr_3[2];\n              *(uint *)((int)temp_ptr_3 + temp_var_5 + 4) = *(uint *)((int)temp_ptr_3 + temp_var_5 + 4) | 1;\n              *(int *)(temp_var_8 + 0xc) = temp_var_3;\n              *(int *)(temp_var_3 + 8) = temp_var_8;\n              FUN_080090b4(block_pointer);\n              return temp_ptr_3 + 2;\n            }\n          }\n          temp_var_1 = temp_var_1 + 1;\n          temp_ptr_5 = temp_ptr_5 + 2;\n        } while ((temp_var_1 & 3) != 0);\n        do {\n          temp_var_5 = temp_var_6 & 3;\n          temp_ptr_5 = temp_ptr_6 + -2;\n          temp_var_6 = temp_var_6 - 1;\n          if (temp_var_5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~temp_var_4;\n            break;\n          }\n          temp_ptr_6 = (undefined4 *)*temp_ptr_6;\n        } while (temp_ptr_6 == temp_ptr_5);\n        temp_var_4 = temp_var_4 * 2;\n        if ((DAT_20000450 <= temp_var_4 && temp_var_4 - DAT_20000450 != 0) || (temp_var_6 = temp_var_1, temp_var_4 == 0))\n        break;\n        for (; (temp_var_4 & DAT_20000450) == 0; temp_var_4 = temp_var_4 << 1) {\n          temp_var_6 = temp_var_6 + 4;\n        }\n      } while( true );\n    }\n  }\n  current_block_ptr = DAT_20000454;\n  temp_var_6 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((temp_var_7 <= temp_var_6) && (temp_var_1 = temp_var_6 - temp_var_7, 0xf < (int)temp_var_1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp_var_1 = temp_var_7 + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp_var_1 = temp_var_7 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  temp_ptr_2 = (undefined *)FUN_08009744(block_pointer,temp_var_1);\n  if (temp_ptr_2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    temp_var_6 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    temp_ptr_1 = current_block_ptr + temp_var_6;\n    if (temp_ptr_1 < temp_ptr_2 || temp_ptr_1 == temp_ptr_2) {\n      temp_ptr_4 = DAT_20000a14 + temp_var_1;\n      if ((temp_ptr_1 != temp_ptr_2) || (((uint)temp_ptr_1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = temp_ptr_4;\n      *(uint *)(DAT_20000454 + 4) = temp_var_6 + temp_var_1 | 1;\n    }\n    else {\n      if (current_block_ptr != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp_var_1;\n      temp_ptr_4 = temp_ptr_2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)temp_ptr_2 - (int)temp_ptr_1);\n        temp_ptr_4 = DAT_20000854;\n      }\n      DAT_20000854 = temp_ptr_4;\n      temp_var_4 = (uint)temp_ptr_2 & 7;\n      if (temp_var_4 == 0) {\n        temp_var_3 = 0x1000;\n      }\n      else {\n        temp_ptr_2 = temp_ptr_2 + (8 - temp_var_4);\n        temp_var_3 = 0x1008 - temp_var_4;\n      }\n      temp_var_3 = temp_var_3 - ((uint)(temp_ptr_2 + temp_var_1) & 0xfff);\n      temp_var_8 = FUN_08009744(block_pointer,temp_var_3);\n      if (temp_var_8 == -1) {\n        temp_var_1 = 1;\n        temp_var_3 = 0;\n      }\n      else {\n        temp_var_1 = (temp_var_8 - (int)temp_ptr_2) + temp_var_3 | 1;\n      }\n      temp_ptr_4 = DAT_20000a14 + temp_var_3;\n      DAT_20000454 = temp_ptr_2;\n      DAT_20000a14 = temp_ptr_4;\n      *(uint *)(temp_ptr_2 + 4) = temp_var_1;\n      if (current_block_ptr != &DAT_2000044c) {\n        if (temp_var_6 < 0x10) {\n          *(undefined4 *)(temp_ptr_2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        temp_var_6 = temp_var_6 - 0xc & 0xfffffff8;\n        *(uint *)(current_block_ptr + 4) = *(uint *)(current_block_ptr + 4) & 1 | temp_var_6;\n        *(undefined4 *)(current_block_ptr + temp_var_6 + 4) = 5;\n        *(undefined4 *)(current_block_ptr + temp_var_6 + 8) = 5;\n        if (0xf < temp_var_6) {\n          FUN_080088ec(block_pointer,current_block_ptr + 8);\n          temp_ptr_4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < temp_ptr_4) {\n      DAT_20000a3c = temp_ptr_4;\n    }\n    temp_var_6 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < temp_ptr_4) {\n      DAT_20000a40 = temp_ptr_4;\n    }\n  }\n  temp_var_1 = (temp_var_6 & 0xfffffffc) - temp_var_7;\n  if ((temp_var_7 <= (temp_var_6 & 0xfffffffc)) && (0xf < (int)temp_var_1)) {\nLAB_08008dac:\n    current_block_ptr = DAT_20000454 + temp_var_7;\n    *(uint *)(DAT_20000454 + 4) = temp_var_7 | 1;\n    return_value = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = current_block_ptr;\n    *(uint *)(current_block_ptr + 4) = temp_var_1 | 1;\n    FUN_080090b4(block_pointer);\n    return return_value;\n  }\nLAB_08008eee:\n  FUN_080090b4(block_pointer);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_block_08008af8",
                "param_1": "block_pointer",
                "param_2": "block_size",
                "puVar1": "temp_ptr_1",
                "uVar2": "temp_var_1",
                "uVar3": "temp_var_2",
                "iVar4": "temp_var_3",
                "puVar5": "temp_ptr_2",
                "uVar6": "temp_var_4",
                "uVar7": "temp_var_5",
                "puVar8": "temp_ptr_3",
                "puVar9": "temp_ptr_4",
                "puVar10": "current_block_ptr",
                "piVar11": "return_value",
                "uVar12": "temp_var_6",
                "uVar13": "temp_var_7",
                "iVar14": "temp_var_8",
                "puVar15": "temp_ptr_5",
                "puVar16": "temp_ptr_6"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_byte_sequence_0800901c",
            "code": "\nuint * find_byte_sequence_0800901c(uint *arr_ptr,uint byte_val,uint arr_len)\n\n{\n  uint xor_result;\n  uint combined_byte;\n  uint *ptr;\n  uint mask;\n  bool is_zero;\n  \n  mask = byte_val & 0xff;\n  if (((uint)arr_ptr & 3) == 0) {\nLAB_0800904a:\n    if (3 < arr_len) {\n      combined_byte = (byte_val & 0xff) << 8 | mask;\n      ptr = arr_ptr;\n      do {\n        xor_result = *ptr ^ (combined_byte | combined_byte << 0x10);\n        arr_ptr = ptr + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto LAB_08009050;\n        arr_len = arr_len - 4;\n        ptr = arr_ptr;\n      } while (3 < arr_len);\n    }\n    ptr = arr_ptr;\n    if (arr_len == 0) {\n      arr_ptr = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      arr_ptr = ptr;\n      if (*(byte *)arr_ptr != mask) {\n        ptr = (uint *)(arr_len + (int)arr_ptr);\n        do {\n          arr_ptr = (uint *)((int)arr_ptr + 1);\n          if (ptr == arr_ptr) goto LAB_0800906c;\n        } while (*(byte *)arr_ptr != mask);\n      }\n    }\n  }\n  else {\n    combined_byte = arr_len - 1;\n    if (arr_len == 0) {\nLAB_0800906c:\n      arr_ptr = (uint *)0x0;\n    }\n    else if (*(byte *)arr_ptr != mask) {\n      ptr = (uint *)((int)arr_ptr + 1);\n      do {\n        arr_ptr = ptr;\n        arr_len = combined_byte;\n        if (((uint)arr_ptr & 3) == 0) goto LAB_0800904a;\n        is_zero = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_zero) goto LAB_0800906c;\n        ptr = (uint *)((int)arr_ptr + 1);\n      } while (*(byte *)arr_ptr != mask);\n    }\n  }\n  return arr_ptr;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "param_1": "arr_ptr",
                "param_2": "byte_val",
                "param_3": "arr_len",
                "uVar1": "xor_result",
                "uVar2": "combined_byte",
                "puVar3": "ptr",
                "uVar4": "mask",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initializeData_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "get_or_allocate_data_080090c0",
            "code": "\nundefined4 * getOrAllocateData_080090c0(int dataPointer,uint index)\n\n{\n  undefined4 *valuePtr;\n  int dataOffset;\n  \n  dataOffset = *(int *)(dataPointer + 0x4c);\n  if (dataOffset == 0) {\n    dataOffset = FUN_08009980(dataPointer,4,0x21);\n    *(int *)(dataPointer + 0x4c) = dataOffset;\n    if (dataOffset == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  valuePtr = *(undefined4 **)(dataOffset + index * 4);\n  if (valuePtr == (undefined4 *)0x0) {\n    dataOffset = 1 << (index & 0xff);\n    valuePtr = (undefined4 *)FUN_08009980(dataPointer,1,(dataOffset + 5) * 4);\n    if (valuePtr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    valuePtr[1] = index;\n    valuePtr[2] = dataOffset;\n  }\n  else {\n    *(undefined4 *)(dataOffset + index * 4) = *valuePtr;\n  }\n  valuePtr[3] = 0;\n  valuePtr[4] = 0;\n  return valuePtr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "get_or_allocate_data_080090c0",
                "param_1": "dataPointer",
                "param_2": "index",
                "puVar1": "valuePtr",
                "iVar2": "dataOffset"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_pointer_value_0800910c",
            "code": "\nvoid updatePointerValue_0800910c(int baseAddress,undefined4 *pointerToUpdate)\n\n{\n  int offset;\n  \n  if (pointerToUpdate != (undefined4 *)0x0) {\n    offset = *(int *)(baseAddress + 0x4c);\n    *pointerToUpdate = *(undefined4 *)(offset + pointerToUpdate[1] * 4);\n    *(undefined4 **)(offset + pointerToUpdate[1] * 4) = pointerToUpdate;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_pointer_value_0800910c",
                "param_1": "baseAddress",
                "param_2": "pointerToUpdate",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_checksum_08009120",
            "code": "\nundefined4 * calculateChecksum_08009120(int inputParam,undefined4 *resultArray,int multiplier,uint checksum)\n\n{\n  undefined4 *result;\n  uint tempVar;\n  int arraySize;\n  uint *currentElement;\n  int iterationCount;\n  \n  iterationCount = 0;\n  arraySize = resultArray[4];\n  currentElement = resultArray + 5;\n  do {\n    iterationCount = iterationCount + 1;\n    checksum = multiplier * (*currentElement & 0xffff) + checksum;\n    tempVar = multiplier * (*currentElement >> 0x10) + (checksum >> 0x10);\n    *currentElement = (checksum & 0xffff) + tempVar * 0x10000;\n    checksum = tempVar >> 0x10;\n    currentElement = currentElement + 1;\n  } while (iterationCount < arraySize);\n  result = resultArray;\n  if (checksum != 0) {\n    if ((int)resultArray[2] <= arraySize) {\n      result = (undefined4 *)FUN_080090c0(inputParam,resultArray[1] + 1);\n      FUN_08001084(result + 3,resultArray + 3,(resultArray[4] + 2) * 4);\n      iterationCount = *(int *)(inputParam + 0x4c);\n      *resultArray = *(undefined4 *)(iterationCount + resultArray[1] * 4);\n      *(undefined4 **)(iterationCount + resultArray[1] * 4) = resultArray;\n    }\n    result[arraySize + 5] = checksum;\n    result[4] = arraySize + 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "param_1": "inputParam",
                "param_2": "resultArray",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "result",
                "uVar2": "tempVar",
                "iVar3": "arraySize",
                "puVar4": "currentElement",
                "iVar5": "iterationCount"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "get_leading_zeros_count_080091a4",
            "code": "\nint getLeadingZerosCount_080091a4(uint input)\n\n{\n  int zerosCount;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    zerosCount = 0x10;\n  }\n  else {\n    zerosCount = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    zerosCount = zerosCount + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    zerosCount = zerosCount + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    zerosCount = zerosCount + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return zerosCount + 1;\n    }\n    zerosCount = 0x20;\n  }\n  return zerosCount;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "get_leading_zeros_count_080091a4",
                "param_1": "input",
                "iVar1": "zerosCount"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint countLeadingZeros_080091e4(uint *value)\n\n{\n  int leadingZeros;\n  uint tempValue;\n  \n  tempValue = *value;\n  if ((tempValue & 7) == 0) {\n    if ((tempValue & 0xffff) == 0) {\n      tempValue = tempValue >> 0x10;\n      leadingZeros = 0x10;\n    }\n    else {\n      leadingZeros = 0;\n    }\n    if ((tempValue & 0xff) == 0) {\n      tempValue = tempValue >> 8;\n      leadingZeros = leadingZeros + 8;\n    }\n    if ((tempValue & 0xf) == 0) {\n      tempValue = tempValue >> 4;\n      leadingZeros = leadingZeros + 4;\n    }\n    if ((tempValue & 3) == 0) {\n      tempValue = tempValue >> 2;\n      leadingZeros = leadingZeros + 2;\n    }\n    if (-1 < (int)(tempValue << 0x1f)) {\n      tempValue = tempValue >> 1;\n      if (tempValue == 0) {\n        return 0x20;\n      }\n      leadingZeros = leadingZeros + 1;\n    }\n    *value = tempValue;\n    return leadingZeros;\n  }\n  if ((int)(tempValue << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(tempValue << 0x1e)) {\n    *value = tempValue >> 2;\n    return 2;\n  }\n  *value = tempValue >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "value",
                "iVar1": "leadingZeros",
                "uVar2": "tempValue"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "set_flag_and_param_08009244",
            "code": "\nvoid setFlagAndParam_08009244(undefined4 flag,undefined4 param)\n\n{\n  int result;\n  \n  result = FUN_080090c0(flag,1);\n  *(undefined4 *)(result + 0x10) = 1;\n  *(undefined4 *)(result + 0x14) = param;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "set_flag_and_param_08009244",
                "param_1": "flag",
                "param_2": "param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_array_08009258",
            "code": "\nvoid initializeArray_08009258(undefined4 param_ptr,int array1,int array2)\n\n{\n  uint *array1_ptr;\n  uint *array2_ptr;\n  int array1_length;\n  uint temp_var;\n  uint *array2_ptr;\n  uint start_index;\n  uint *temp_ptr;\n  uint temp_var;\n  int array1_length;\n  int array2_length;\n  uint end_index;\n  int array1_start_index;\n  int array2_start_index;\n  uint *array1_ptr;\n  uint *array1_ptr;\n  uint *array1_ptr;\n  uint *array2_end_ptr;\n  uint *array1_ptr;\n  \n  array1_start_index = *(int *)(array1 + 0x10);\n  array1_length = *(int *)(array2 + 0x10);\n  array2_length = array1_length;\n  array2_start_index = array1;\n  if (array1_start_index < array1_length) {\n    array2_length = array1_start_index;\n    array1_start_index = array1_length;\n    array2_start_index = array2;\n    array2 = array1;\n  }\n  array1_length = array1_start_index + array2_length;\n  array1_length = *(int *)(array2_start_index + 4);\n  if (*(int *)(array2_start_index + 8) < array1_length) {\n    array1_length = array1_length + 1;\n  }\n  array1_length = FUN_080090c0(param_ptr,array1_length);\n  array1_ptr = (uint *)(array1_length + 0x14);\n  array2_end_ptr = array1_ptr + array1_length;\n  for (array2_ptr = array1_ptr; array2_ptr < array2_end_ptr; array2_ptr = array2_ptr + 1) {\n    *array2_ptr = 0;\n  }\n  start_index = array2 + 0x14;\n  end_index = start_index + array2_length * 4;\n  array2_ptr = (uint *)(array2_start_index + 0x14);\n  if (start_index < end_index) {\n    temp_ptr = (uint *)(start_index + ((end_index - array2) - 0x15 & 0xfffffffc));\n    array1_ptr = (uint *)(array2 + 0x10);\n    do {\n      while( true ) {\n        array1_ptr = array1_ptr + 1;\n        start_index = *array1_ptr & 0xffff;\n        if (start_index != 0) break;\n        start_index = *array1_ptr >> 0x10;\n        if (start_index == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp_var = *array1_ptr;\n        temp_var = 0;\n        array1_ptr = array2_ptr;\n        array1_ptr = array1_ptr;\n        end_index = temp_var;\n        do {\n          array1_ptr = array1_ptr;\n          temp_var = temp_var + start_index * *(ushort *)array1_ptr + (end_index >> 0x10);\n          *array1_ptr = temp_var & 0xffff | temp_var * 0x10000;\n          array2_ptr = array1_ptr + 1;\n          end_index = array1_ptr[1];\n          temp_var = start_index * (*array1_ptr >> 0x10) + (end_index & 0xffff) + (temp_var >> 0x10);\n          temp_var = temp_var >> 0x10;\n          array1_ptr = array2_ptr;\n          array1_ptr = array1_ptr + 1;\n        } while (array2_ptr < array2_ptr + array1_start_index);\n        array1_ptr[1] = temp_var;\n        array1_ptr = array1_ptr + 1;\n        if (temp_ptr == array1_ptr) goto LAB_0800937a;\n      }\n      end_index = 0;\n      array1_ptr = array1_ptr;\n      array1_ptr = array2_ptr;\n      do {\n        array2_ptr = array1_ptr;\n        array1_ptr = array1_ptr + 1;\n        temp_var = start_index * (*array1_ptr & 0xffff) + (*array2_ptr & 0xffff) + end_index;\n        temp_var = start_index * (*array1_ptr >> 0x10) + (*array2_ptr >> 0x10) + (temp_var >> 0x10);\n        end_index = temp_var >> 0x10;\n        *array2_ptr = temp_var & 0xffff | temp_var * 0x10000;\n        array1_ptr = array2_ptr + 1;\n        array1_ptr = array1_ptr;\n      } while (array1_ptr < array2_ptr + array1_start_index);\n      array2_ptr[1] = end_index;\n      start_index = *array1_ptr >> 0x10;\n      if (start_index != 0) goto LAB_0800932c;\nLAB_080092d2:\n      array1_ptr = array1_ptr + 1;\n    } while (temp_ptr != array1_ptr);\n  }\nLAB_0800937a:\n  if (0 < array1_length) {\n    start_index = array2_end_ptr[-1];\n    array2_end_ptr = array2_end_ptr + -1;\n    while ((start_index == 0 && (array1_length = array1_length + -1, array1_length != 0))) {\n      array2_end_ptr = array2_end_ptr + -1;\n      start_index = *array2_end_ptr;\n    }\n  }\n  *(int *)(array1_length + 0x10) = array1_length;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_array_08009258",
                "param_1": "param_ptr",
                "param_2": "array1",
                "param_3": "array2",
                "puVar1": "array1_ptr",
                "puVar2": "array2_ptr",
                "iVar3": "array1_length",
                "uVar4": "temp_var",
                "puVar5": "array2_ptr",
                "uVar6": "start_index",
                "puVar7": "temp_ptr",
                "uVar8": "temp_var",
                "iVar9": "array1_length",
                "iVar10": "array2_length",
                "uVar11": "end_index",
                "iVar12": "array1_start_index",
                "iVar13": "array2_start_index",
                "puVar14": "array1_ptr",
                "puVar15": "array1_ptr",
                "puVar16": "array1_ptr",
                "puVar17": "array2_end_ptr",
                "puVar18": "array1_ptr"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int input,undefined4 *output,uint size)\n\n{\n  int index;\n  int numIterations;\n  undefined4 *currentElement;\n  undefined4 *allocatedMemory;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              FUN_08009120(input,output,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),\n                           0);\n  }\n  numIterations = (int)size >> 2;\n  if (numIterations != 0) {\n    allocatedMemory = *(undefined4 **)(input + 0x48);\n    if (allocatedMemory == (undefined4 *)0x0) {\n      allocatedMemory = (undefined4 *)FUN_080090c0(input,1);\n      allocatedMemory[4] = 1;\n      allocatedMemory[5] = 0x271;\n      *(undefined4 **)(input + 0x48) = allocatedMemory;\n      *allocatedMemory = 0;\n    }\n    currentElement = output;\n    if (numIterations << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    numIterations = numIterations >> 1;\n    currentElement = allocatedMemory;\n    if (numIterations != 0) {\n      while( true ) {\n        allocatedMemory = (undefined4 *)*currentElement;\n        if (allocatedMemory == (undefined4 *)0x0) {\n          allocatedMemory = (undefined4 *)FUN_08009258(input,currentElement,currentElement);\n          *currentElement = allocatedMemory;\n          *allocatedMemory = 0;\n        }\n        currentElement = output;\n        if (-1 < numIterations << 0x1f) break;\nLAB_080093d2:\n        output = (undefined4 *)FUN_08009258(input,currentElement,allocatedMemory);\n        if (currentElement == (undefined4 *)0x0) break;\n        index = *(int *)(input + 0x4c);\n        numIterations = numIterations >> 1;\n        *currentElement = *(undefined4 *)(index + currentElement[1] * 4);\n        *(undefined4 **)(index + currentElement[1] * 4) = currentElement;\n        currentElement = allocatedMemory;\n        if (numIterations == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "iVar1": "index",
                "iVar2": "numIterations",
                "puVar3": "currentElement",
                "puVar4": "allocatedMemory"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "process_data_08009444",
            "code": "\nvoid processData_08009444(int dataSize,undefined4 *data,uint shiftAmount)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int tempVar3;\n  undefined4 tempVar4;\n  int dataSizeVar;\n  int tempVar6;\n  uint *dataPtr1;\n  uint *dataPtr2;\n  uint *tempPtr1;\n  uint *tempPtr2;\n  int shiftCount;\n  int tempVar7;\n  uint tempVar8;\n  uint *tempPtr3;\n  \n  dataSizeVar = data[4];\n  shiftCount = (int)shiftAmount >> 5;\n  tempVar7 = shiftCount + dataSizeVar + 1;\n  tempVar3 = data[1];\n  tempVar2 = data[2];\n  if ((int)data[2] < tempVar7) {\n    do {\n      tempVar6 = tempVar2 * 2;\n      tempVar1 = tempVar2 * -2;\n      tempVar3 = tempVar3 + 1;\n      tempVar2 = tempVar6;\n    } while (tempVar7 != tempVar6 && tempVar7 + tempVar1 < 0 == SBORROW4(tempVar7,tempVar6));\n  }\n  tempVar2 = FUN_080090c0(dataSize,tempVar3);\n  dataPtr1 = (uint *)(tempVar2 + 0x14);\n  if (0 < shiftCount) {\n    tempPtr2 = dataPtr1 + shiftCount;\n    dataPtr2 = dataPtr1;\n    do {\n      tempPtr3 = dataPtr2 + 1;\n      *dataPtr2 = 0;\n      dataPtr1 = tempPtr2;\n      dataPtr2 = tempPtr3;\n    } while (tempPtr3 != tempPtr2);\n  }\n  tempVar3 = data[4];\n  dataPtr2 = data + 5;\n  shiftAmount = shiftAmount & 0x1f;\n  if (shiftAmount == 0) {\n    dataPtr1 = dataPtr1 + -1;\n    tempPtr2 = dataPtr2;\n    do {\n      tempPtr3 = tempPtr2 + 1;\n      dataPtr1 = dataPtr1 + 1;\n      *dataPtr1 = *tempPtr2;\n      tempPtr2 = tempPtr3;\n    } while (tempPtr3 < dataPtr2 + tempVar3);\n  }\n  else {\n    tempVar8 = 0;\n    tempPtr2 = dataPtr2;\n    do {\n      tempPtr3 = dataPtr1;\n      *tempPtr3 = *tempPtr2 << shiftAmount | tempVar8;\n      tempPtr1 = tempPtr2 + 1;\n      tempVar8 = *tempPtr2 >> (0x20 - shiftAmount & 0xff);\n      dataPtr1 = tempPtr3 + 1;\n      tempPtr2 = tempPtr1;\n    } while (tempPtr1 < dataPtr2 + tempVar3);\n    tempPtr3[1] = tempVar8;\n    if (tempVar8 != 0) {\n      tempVar7 = shiftCount + dataSizeVar + 2;\n    }\n  }\n  dataSizeVar = *(int *)(dataSize + 0x4c);\n  tempVar3 = data[1];\n  tempVar4 = *(undefined4 *)(dataSizeVar + tempVar3 * 4);\n  *(int *)(tempVar2 + 0x10) = tempVar7 + -1;\n  *data = tempVar4;\n  *(undefined4 **)(dataSizeVar + tempVar3 * 4) = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "process_data_08009444",
                "param_1": "dataSize",
                "param_2": "data",
                "param_3": "shiftAmount",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "dataSizeVar",
                "iVar6": "tempVar6",
                "puVar7": "dataPtr1",
                "puVar8": "dataPtr2",
                "puVar10": "tempPtr1",
                "puVar11": "tempPtr2",
                "iVar12": "shiftCount",
                "iVar13": "tempVar7",
                "uVar14": "tempVar8",
                "puVar9": "tempPtr3"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1,int array2)\n\n{\n  int sizeDifference;\n  uint *ptr2;\n  int array2Offset;\n  uint *ptr1;\n  \n  array2Offset = *(int *)(array2 + 0x10);\n  sizeDifference = *(int *)(array1 + 0x10) - array2Offset;\n  if (sizeDifference == 0) {\n    ptr2 = (uint *)(array2 + 0x14 + array2Offset * 4);\n    ptr1 = (uint *)(array1 + 0x14) + array2Offset;\n    do {\n      ptr1 = ptr1 + -1;\n      ptr2 = ptr2 + -1;\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr1);\n  }\n  return sizeDifference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "sizeDifference",
                "iVar3": "array2Offset",
                "puVar2": "ptr2",
                "puVar4": "ptr1"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "check_arrays_equality_08009530",
            "code": "\nvoid checkArraysEquality_08009530(undefined4 arg1,uint *array1,uint *array2,undefined4 arg4)\n\n{\n  int result;\n  uint *ptr1;\n  uint var1;\n  uint var2;\n  undefined4 flag;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  int sum;\n  uint *ptr8;\n  uint var3;\n  uint *ptr4;\n  \n  ptr1 = (uint *)array2[4];\n  ptr7 = array1 + 5;\n  ptr8 = array2 + 5;\n  ptr3 = ptr7;\n  ptr5 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = ptr7 + (int)ptr1;\n    ptr1 = ptr8 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= ptr7) {\n        sum = FUN_080090c0(arg1,0,ptr2,ptr1,arg4);\n        *(undefined4 *)(sum + 0x10) = 1;\n        *(undefined4 *)(sum + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    flag = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  flag = 1;\n  ptr2 = ptr7;\n  ptr1 = array1;\n  ptr3 = ptr8;\n  ptr5 = array2;\n  array2 = array1;\n  ptr8 = ptr7;\nLAB_08009578:\n  result = FUN_080090c0(arg1,ptr5[1],ptr2,ptr1,arg4);\n  sum = 0;\n  var3 = ptr5[4];\n  var1 = array2[4];\n  *(undefined4 *)(result + 0xc) = flag;\n  ptr7 = ptr3 + var3;\n  ptr1 = (uint *)(result + 0x14);\n  ptr5 = ptr8;\n  do {\n    ptr4 = ptr3 + 1;\n    ptr6 = ptr5 + 1;\n    var2 = ((*ptr3 & 0xffff) + sum) - (*ptr5 & 0xffff);\n    sum = ((*ptr3 >> 0x10) - (*ptr5 >> 0x10)) + ((int)var2 >> 0x10);\n    var2 = var2 & 0xffff | sum * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = var2;\n    sum = sum >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = ptr4;\n    ptr5 = ptr6;\n  } while (ptr6 < ptr8 + var1);\n  ptr1 = ptr4;\n  ptr3 = ptr2;\n  if (ptr4 < ptr7) {\n    do {\n      ptr5 = ptr1 + 1;\n      var1 = (*ptr1 & 0xffff) + sum;\n      sum = ((int)var1 >> 0x10) + (*ptr1 >> 0x10);\n      var2 = var1 & 0xffff | sum * 0x10000;\n      *ptr3 = var2;\n      sum = sum >> 0x10;\n      ptr1 = ptr5;\n      ptr3 = ptr3 + 1;\n    } while (ptr5 < ptr7);\n    ptr2 = (uint *)((int)ptr2 + ((int)ptr7 + ~(uint)ptr4 & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (var2 == 0) {\n    ptr2 = ptr2 + -1;\n    var3 = var3 - 1;\n    var2 = *ptr2;\n  }\n  *(uint *)(result + 0x10) = var3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "check_arrays_equality_08009530",
                "param_1": "arg1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "arg4",
                "iVar1": "result",
                "puVar2": "ptr1",
                "uVar3": "var1",
                "uVar4": "var2",
                "uVar5": "flag",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar8": "ptr4",
                "puVar9": "ptr5",
                "puVar10": "ptr6",
                "puVar11": "ptr7",
                "iVar12": "sum",
                "puVar13": "ptr8",
                "uVar14": "var3"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "decode_data_08009630",
            "code": "\nint decodeData_08009630(undefined4 param1,undefined4 param2,uint input1,uint input2,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint temp1;\n  int temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  uint localVar1;\n  uint localVar2;\n  \n  result = FUN_080090c0(param1,1);\n  temp5 = (input2 << 1) >> 0x15;\n  localVar2 = input2 & 0xfffff;\n  if (temp5 != 0) {\n    localVar2 = localVar2 | 0x100000;\n  }\n  if (input1 == 0) {\n    temp2 = FUN_080091e4(&localVar2);\n    temp3 = 1;\n    temp1 = temp2 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = localVar2;\n  }\n  else {\n    localVar1 = input1;\n    temp1 = FUN_080091e4(&localVar1);\n    if (temp1 == 0) {\n      *(uint *)(result + 0x14) = localVar1;\n    }\n    else {\n      temp4 = localVar2 << (0x20 - temp1 & 0xff);\n      localVar2 = localVar2 >> (temp1 & 0xff);\n      *(uint *)(result + 0x14) = temp4 | localVar1;\n    }\n    if (localVar2 == 0) {\n      temp3 = 1;\n    }\n    else {\n      temp3 = 2;\n    }\n    *(uint *)(result + 0x18) = localVar2;\n    *(int *)(result + 0x10) = temp3;\n  }\n  if (temp5 == 0) {\n    *output1 = temp1 - 0x432;\n    temp6 = FUN_080091a4(*(undefined4 *)(result + temp3 * 4 + 0x10));\n    *output2 = (int)((ulonglong)temp6 >> 0x20) * 0x20 - (int)temp6;\n    return result;\n  }\n  *output1 = (temp5 - 0x433) + temp1;\n  *output2 = 0x35 - temp1;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009630": "decode_data_08009630",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "result",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "local_20": "localVar1",
                "local_1c": "localVar2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_floating_point_080096e0",
            "code": "\nundefined8 calculateFloatingPoint_080096e0(uint exponent,uint mantissa,int *result,undefined4 constant)\n\n{\n  int offset;\n  uint maskedMantissa;\n  undefined8 combinedValue;\n  \n  combinedValue = CONCAT44(mantissa,exponent);\n  offset = 0;\n  maskedMantissa = mantissa & 0x7fffffff;\n  *result = 0;\n  if ((maskedMantissa < 0x7ff00000) && ((maskedMantissa | exponent) != 0)) {\n    if (maskedMantissa < 0x100000) {\n      combinedValue = FUN_080004c8(exponent,mantissa,0,0x43500000,constant);\n      offset = -0x36;\n      maskedMantissa = (uint)((ulonglong)combinedValue >> 0x20) & 0x7fffffff;\n    }\n    exponent = (uint)combinedValue;\n    mantissa = (uint)((ulonglong)combinedValue >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)maskedMantissa >> 0x14) + -0x3fe + offset;\n  }\n  return CONCAT44(mantissa,exponent);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_floating_point_080096e0",
                "param_1": "exponent",
                "param_2": "mantissa",
                "param_3": "result",
                "param_4": "constant",
                "iVar1": "offset",
                "uVar2": "maskedMantissa",
                "uVar3": "combinedValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "extract_int_value_08009744",
            "code": "\nvoid extract_int_value_08009744(int *result_ptr,undefined4 input_value)\n\n{\n  int return_value;\n  \n  DAT_20000c10 = 0;\n  return_value = FUN_08005728(input_value);\n  if ((return_value == -1) && (DAT_20000c10 != 0)) {\n    *result_ptr = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "extract_int_value_08009744",
                "param_1": "result_ptr",
                "param_2": "input_value",
                "iVar1": "return_value"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_and_modify_data_08009768",
            "code": "\nvoid copyAndModifyData_08009768(uint *dest,uint *src,uint size)\n\n{\n  char currentChar;\n  uint *srcPointer;\n  uint *destPointer;\n  uint temp;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (destPointer = dest, srcPointer = src, 3 < size)) {\n    do {\n      src = srcPointer + 1;\n      temp = *srcPointer;\n      dest = destPointer;\n      if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      dest = destPointer + 1;\n      *destPointer = temp;\n      destPointer = dest;\n      srcPointer = src;\n    } while (3 < size);\n  }\n  srcPointer = src;\n  if (size != 0) {\nLAB_0800979c:\n    currentChar = *(char *)srcPointer;\n    *(char *)dest = currentChar;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      size = size - 1;\n      if (currentChar == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      srcPointer = (uint *)((int)srcPointer + 1);\n      currentChar = *(char *)srcPointer;\n      *(char *)dest = currentChar;\n    }\n    if (size != 0) {\n      srcPointer = dest;\n      do {\n        destPointer = (uint *)((int)srcPointer + 1);\n        *(char *)srcPointer = '\\0';\n        srcPointer = destPointer;\n      } while (destPointer != (uint *)(size + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_and_modify_data_08009768",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "srcPointer",
                "puVar3": "destPointer",
                "uVar4": "temp",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 process_data_080097cc(undefined4 *result_ptr,int *input_data_ptr,int *output_data_ptr)\n\n{\n  int input_data;\n  uint temp_var1;\n  int temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  undefined4 *temp_ptr1;\n  undefined4 *temp_ptr2;\n  undefined4 temp_val;\n  \n  if (output_data_ptr[2] != 0) {\n    input_data = *input_data_ptr;\n    temp_var4 = input_data_ptr[2];\n    temp_ptr2 = (undefined4 *)*output_data_ptr;\n    do {\n      do {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp_val = *temp_ptr2;\n        temp_var5 = temp_ptr2[1];\n        temp_ptr2 = temp_ptr1;\n      } while (temp_var5 == 0);\n      temp_var1 = temp_var5;\n      if ((temp_var4 <= temp_var5) && (temp_var1 = temp_var4, (*(ushort *)(input_data_ptr + 3) & 0x480) != 0)) {\n        temp_var3 = input_data - input_data_ptr[4];\n        temp_var4 = (input_data_ptr[5] * 3) / 2;\n        temp_var1 = temp_var5 + 1 + temp_var3;\n        if (temp_var4 < temp_var1) {\n          temp_var4 = temp_var1;\n        }\n        if ((int)((uint)*(ushort *)(input_data_ptr + 3) << 0x15) < 0) {\n          temp_var2 = FUN_08008af8(result_ptr,temp_var4);\n          if (temp_var2 == 0) {\nLAB_08009896:\n            *result_ptr = 0xc;\n            *(ushort *)(input_data_ptr + 3) = *(ushort *)(input_data_ptr + 3) | 0x40;\n            output_data_ptr[1] = 0;\n            output_data_ptr[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(temp_var2,input_data_ptr[4],temp_var3);\n          *(ushort *)(input_data_ptr + 3) = *(ushort *)(input_data_ptr + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          temp_var2 = FUN_08009adc(result_ptr);\n          if (temp_var2 == 0) {\n            FUN_080088ec(result_ptr,input_data_ptr[4]);\n            goto LAB_08009896;\n          }\n        }\n        input_data = temp_var2 + temp_var3;\n        input_data_ptr[5] = temp_var4;\n        input_data_ptr[4] = temp_var2;\n        *input_data_ptr = input_data;\n        input_data_ptr[2] = temp_var4 - temp_var3;\n        temp_var1 = temp_var5;\n      }\n      FUN_08009a18(input_data,temp_val,temp_var1);\n      temp_var3 = output_data_ptr[2];\n      temp_var4 = input_data_ptr[2] - temp_var1;\n      input_data = *input_data_ptr + temp_var1;\n      input_data_ptr[2] = temp_var4;\n      *input_data_ptr = input_data;\n      output_data_ptr[2] = temp_var3 - temp_var5;\n    } while (temp_var3 - temp_var5 != 0);\n  }\n  output_data_ptr[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "result_ptr",
                "param_2": "input_data_ptr",
                "param_3": "output_data_ptr",
                "iVar1": "input_data",
                "uVar2": "temp_var1",
                "iVar3": "temp_var2",
                "iVar4": "temp_var3",
                "uVar5": "temp_var4",
                "uVar6": "temp_var5",
                "puVar7": "temp_ptr1",
                "puVar8": "temp_ptr2",
                "uVar9": "temp_val"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_entry_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateDataEntry_080098c0(int type,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *dataEntry;\n  undefined4 returnValue;\n  uint bitMask;\n  uint entryIndex;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataEntry = DAT_20000168;\n  entryIndex = *(uint *)(DAT_20000168 + 4);\n  if ((int)entryIndex < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + entryIndex * 4 + 0x88) = data1;\n      bitMask = 1 << (entryIndex & 0xff);\n      *(uint *)(dataEntry + 0x188) = *(uint *)(dataEntry + 0x188) | bitMask;\n      *(undefined4 *)(dataEntry + entryIndex * 4 + 0x108) = data2;\n      if (type == 2) {\n        *(uint *)(dataEntry + 0x18c) = bitMask | *(uint *)(dataEntry + 0x18c);\n      }\n    }\n    *(uint *)(dataEntry + 4) = entryIndex + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(dataEntry + (entryIndex + 2) * 4) = value;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_entry_080098c0",
                "param_1": "type",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "dataEntry",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "entryIndex"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "init_memory_08009980",
            "code": "\nundefined4 * initMemory_08009980(undefined4 inputData,int numRows,int numCols)\n\n{\n  undefined4 *memoryStart;\n  uint memorySize;\n  undefined4 *memoryEnd;\n  \n  memoryStart = (undefined4 *)FUN_08008af8(inputData,numCols * numRows);\n  if (memoryStart == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  memorySize = (memoryStart[-1] & 0xfffffffc) - 4;\n  if (memorySize < 0x25) {\n    memoryEnd = memoryStart;\n    if (0x13 < memorySize) {\n      *memoryStart = 0;\n      memoryStart[1] = 0;\n      if (0x1b < memorySize) {\n        memoryStart[2] = 0;\n        memoryStart[3] = 0;\n        if (memorySize == 0x24) {\n          memoryStart[4] = 0;\n          memoryStart[5] = 0;\n          memoryEnd = memoryStart + 6;\n        }\n        else {\n          memoryEnd = memoryStart + 4;\n        }\n        *memoryEnd = 0;\n        memoryEnd[1] = 0;\n        memoryEnd[2] = 0;\n        return memoryStart;\n      }\n      memoryEnd = memoryStart + 2;\n    }\n    *memoryEnd = 0;\n    memoryEnd[1] = 0;\n    memoryEnd[2] = 0;\n    return memoryStart;\n  }\n  FUN_08005d68(memoryStart,0);\n  return memoryStart;\n}\n\n",
            "renaming": {
                "FUN_08009980": "init_memory_08009980",
                "param_1": "inputData",
                "param_2": "numRows",
                "param_3": "numCols",
                "puVar1": "memoryStart",
                "uVar2": "memorySize",
                "puVar3": "memoryEnd"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_reverse_08009a18",
            "code": "\nvoid copyMemoryReverse_08009a18(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  int loopCount;\n  undefined *destEndPtr;\n  undefined4 *srcEndPtr;\n  uint tempSize;\n  uint remainingSize;\n  \n  if ((src < dest) && (srcPtr = (undefined4 *)((int)src + size), dest < srcPtr)) {\n    destEndPtr = (undefined *)((int)dest + size);\n    if (size != 0) {\n      do {\n        srcPtr = (undefined4 *)((int)srcPtr + -1);\n        destEndPtr = destEndPtr + -1;\n        *destEndPtr = *(undefined *)srcPtr;\n      } while (src != srcPtr);\n    }\n  }\n  else {\n    remainingSize = size;\n    if (0xf < size) {\n      if ((((uint)dest | (uint)src) & 3) != 0) goto LAB_08009abc;\n      srcPtr = src + 4;\n      destPtr = dest + 4;\n      do {\n        srcEndPtr = srcPtr + 4;\n        destPtr[-4] = srcPtr[-4];\n        destPtr[-3] = srcPtr[-3];\n        destPtr[-2] = srcPtr[-2];\n        destPtr[-1] = srcPtr[-1];\n        srcPtr = srcEndPtr;\n        destPtr = destPtr + 4;\n      } while (srcEndPtr != (undefined4 *)((int)src + (size - 0x10 & 0xfffffff0) + 0x20));\n      loopCount = (size - 0x10 >> 4) + 1;\n      remainingSize = size & 0xf;\n      src = src + loopCount * 4;\n      dest = dest + loopCount * 4;\n      if (3 < remainingSize) {\n        srcPtr = dest + -1;\n        tempSize = remainingSize;\n        destPtr = src;\n        do {\n          tempSize = tempSize - 4;\n          srcPtr = srcPtr + 1;\n          *srcPtr = *destPtr;\n          destPtr = destPtr + 1;\n        } while (3 < tempSize);\n        loopCount = (remainingSize - 4 & 0xfffffffc) + 4;\n        dest = (undefined4 *)((int)dest + loopCount);\n        src = (undefined4 *)((int)src + loopCount);\n        remainingSize = size & 3;\n      }\n    }\n    size = remainingSize;\n    if (remainingSize != 0) {\nLAB_08009abc:\n      destEndPtr = (undefined *)((int)dest + -1);\n      srcPtr = src;\n      do {\n        destPtr = (undefined4 *)((int)srcPtr + 1);\n        destEndPtr = destEndPtr + 1;\n        *destEndPtr = *(undefined *)srcPtr;\n        srcPtr = destPtr;\n      } while (destPtr != (undefined4 *)(size + (int)src));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_reverse_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "puVar4": "destEndPtr",
                "puVar5": "srcEndPtr",
                "uVar6": "tempSize",
                "uVar7": "remainingSize",
                "iVar3": "loopCount"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_08009adc",
            "code": "\nint * allocate_memory_08009adc(undefined4 *param_1,int *param_2,uint size_of_allocated_memory)\n\n{\n  int *temp_ptr1;\n  int temp_var1;\n  int *temp_ptr2;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int *temp_ptr3;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  int temp_var8;\n  \n  if (param_2 == (int *)0x0) {\n    temp_ptr2 = (int *)FUN_08008af8(param_1,size_of_allocated_memory);\n    return temp_ptr2;\n  }\n  FUN_080090a8();\n  temp_var4 = param_2[-1];\n  temp_var6 = temp_var4 & 0xfffffffc;\n  temp_ptr2 = param_2 + -2;\n  if (size_of_allocated_memory + 0xb < 0x17) {\n    temp_var5 = 0x10;\n  }\n  else {\n    temp_var5 = size_of_allocated_memory + 0xb & 0xfffffff8;\n    if ((int)temp_var5 < 0) goto LAB_08009b8e;\n  }\n  if (temp_var5 < size_of_allocated_memory) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  temp_var8 = (int)temp_ptr2 + temp_var6;\n  temp_var7 = temp_var6;\n  if ((int)temp_var6 < (int)temp_var5) {\n    if (DAT_20000454 == temp_var8) {\n      temp_var8 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + temp_var6;\n      if ((int)(temp_var5 + 0x10) <= temp_var8) {\n        DAT_20000454 = (int)temp_ptr2 + temp_var5;\n        *(uint *)(DAT_20000454 + 4) = temp_var8 - temp_var5 | 1;\n        param_2[-1] = temp_var5 | param_2[-1] & 1U;\n        FUN_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        temp_ptr1 = (int *)((int)temp_ptr2 - param_2[-2]);\n        temp_var4 = temp_ptr1[1] & 0xfffffffc;\n        if ((int)(temp_var5 + 0x10) <= (int)(temp_var8 + temp_var4)) {\n          temp_var3 = temp_ptr1[3];\n          temp_ptr2 = temp_ptr1 + 2;\n          temp_var1 = *temp_ptr2;\n          temp_var6 = temp_var6 - 4;\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          *(int *)(temp_var3 + 8) = temp_var1;\n          if (temp_var6 < 0x25) {\n            temp_var1 = *param_2;\n            temp_ptr3 = temp_ptr2;\n            if (0x13 < temp_var6) {\n              temp_ptr1[2] = temp_var1;\n              temp_ptr1[3] = param_2[1];\n              temp_var1 = param_2[2];\n              if (temp_var6 < 0x1c) {\n                param_2 = param_2 + 2;\n                temp_ptr3 = temp_ptr1 + 4;\n              }\n              else {\n                temp_ptr1[4] = temp_var1;\n                temp_ptr1[5] = param_2[3];\n                temp_var1 = param_2[4];\n                if (temp_var6 == 0x24) {\n                  temp_ptr1[6] = temp_var1;\n                  temp_ptr1[7] = param_2[5];\n                  temp_var1 = param_2[6];\n                  param_2 = param_2 + 6;\n                  temp_ptr3 = temp_ptr1 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  temp_ptr3 = temp_ptr1 + 6;\n                }\n              }\n            }\n            *temp_ptr3 = temp_var1;\n            temp_ptr3[1] = param_2[1];\n            temp_ptr3[2] = param_2[2];\n          }\n          else {\n            FUN_08009a18(temp_ptr2,param_2);\n          }\n          DAT_20000454 = (int)temp_ptr1 + temp_var5;\n          *(uint *)(DAT_20000454 + 4) = (temp_var8 + temp_var4) - temp_var5 | 1;\n          temp_ptr1[1] = temp_var5 | temp_ptr1[1] & 1U;\n          FUN_080090b4(param_1);\n          return temp_ptr2;\n        }\nLAB_08009bb0:\n        temp_var7 = temp_var6 + temp_var4;\n        if ((int)temp_var5 <= (int)temp_var7) {\n          temp_var3 = temp_ptr1[3];\n          temp_ptr3 = temp_ptr1 + 2;\n          temp_var1 = *temp_ptr3;\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          temp_var8 = (int)temp_ptr1 + temp_var7;\n          *(int *)(temp_var3 + 8) = temp_var1;\n          temp_ptr2 = temp_ptr1;\n          if (temp_var6 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(temp_ptr3,param_2);\n          param_2 = temp_ptr3;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_var8 + 4) & 0xfffffffe) + temp_var8 + 4) << 0x1f) {\n        temp_var2 = *(uint *)(temp_var8 + 4) & 0xfffffffc;\n        temp_var7 = temp_var6 + temp_var2;\n        if ((int)temp_var7 < (int)temp_var5) {\n          if ((int)(temp_var4 << 0x1f) < 0) goto LAB_08009b36;\n          temp_ptr1 = (int *)((int)temp_ptr2 - param_2[-2]);\n          temp_var4 = temp_ptr1[1] & 0xfffffffc;\n          temp_var7 = temp_var2 + temp_var4 + temp_var6;\n          if ((int)temp_var7 < (int)temp_var5) goto LAB_08009bb0;\n          temp_var1 = *(int *)(temp_var8 + 8);\n          temp_var8 = *(int *)(temp_var8 + 0xc);\n          *(int *)(temp_var1 + 0xc) = temp_var8;\n          *(int *)(temp_var8 + 8) = temp_var1;\n          temp_ptr3 = temp_ptr1 + 2;\n          temp_var1 = *temp_ptr3;\n          temp_var3 = temp_ptr1[3];\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          temp_var8 = (int)temp_ptr1 + temp_var7;\n          *(int *)(temp_var3 + 8) = temp_var1;\n          temp_ptr2 = temp_ptr1;\n          if (0x24 < temp_var6 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          temp_var6 = temp_var6 - 4;\n          temp_var1 = *param_2;\n          temp_ptr1 = temp_ptr3;\n          if (0x13 < temp_var6) {\n            temp_ptr2[2] = temp_var1;\n            temp_ptr2[3] = param_2[1];\n            temp_var1 = param_2[2];\n            if (temp_var6 < 0x1c) {\n              param_2 = param_2 + 2;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = temp_var1;\n              temp_ptr2[5] = param_2[3];\n              temp_var1 = param_2[4];\n              if (temp_var6 == 0x24) {\n                temp_ptr2[6] = temp_var1;\n                temp_ptr2[7] = param_2[5];\n                temp_var1 = param_2[6];\n                param_2 = param_2 + 6;\n                temp_ptr1 = temp_ptr2 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                temp_ptr1 = temp_ptr2 + 6;\n              }\n            }\n          }\n          *temp_ptr1 = temp_var1;\n          temp_ptr1[1] = param_2[1];\n          temp_ptr1[2] = param_2[2];\n          param_2 = temp_ptr3;\n        }\n        else {\n          temp_var1 = *(int *)(temp_var8 + 8);\n          temp_var3 = *(int *)(temp_var8 + 0xc);\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          temp_var8 = (int)temp_ptr2 + temp_var7;\n          *(int *)(temp_var3 + 8) = temp_var1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        temp_ptr1 = (int *)((int)temp_ptr2 - param_2[-2]);\n        temp_var4 = temp_ptr1[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    temp_ptr1 = (int *)FUN_08008af8(param_1,size_of_allocated_memory);\n    if (temp_ptr1 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)temp_ptr2) == temp_ptr1 + -2) {\n        temp_var7 = temp_var6 + (temp_ptr1[-1] & 0xfffffffcU);\n        temp_var8 = (int)temp_ptr2 + temp_var7;\n        goto LAB_08009c00;\n      }\n      temp_var6 = temp_var6 - 4;\n      if (temp_var6 < 0x25) {\n        temp_var8 = *param_2;\n        temp_ptr2 = param_2;\n        temp_ptr3 = temp_ptr1;\n        if (0x13 < temp_var6) {\n          *temp_ptr1 = temp_var8;\n          temp_ptr1[1] = param_2[1];\n          if (temp_var6 < 0x1c) {\n            temp_var8 = param_2[2];\n            temp_ptr2 = param_2 + 2;\n            temp_ptr3 = temp_ptr1 + 2;\n          }\n          else {\n            temp_ptr1[2] = param_2[2];\n            temp_ptr1[3] = param_2[3];\n            if (temp_var6 == 0x24) {\n              temp_ptr1[4] = param_2[4];\n              temp_ptr1[5] = param_2[5];\n              temp_var8 = param_2[6];\n              temp_ptr2 = param_2 + 6;\n              temp_ptr3 = temp_ptr1 + 6;\n            }\n            else {\n              temp_var8 = param_2[4];\n              temp_ptr2 = param_2 + 4;\n              temp_ptr3 = temp_ptr1 + 4;\n            }\n          }\n        }\n        *temp_ptr3 = temp_var8;\n        temp_ptr3[1] = temp_ptr2[1];\n        temp_ptr3[2] = temp_ptr2[2];\n      }\n      else {\n        FUN_08009a18(temp_ptr1,param_2);\n      }\n      FUN_080088ec(param_1,param_2);\n    }\n    FUN_080090b4(param_1);\n    param_2 = temp_ptr1;\n  }\n  else {\nLAB_08009c00:\n    if (temp_var7 - temp_var5 < 0x10) {\n      temp_ptr2[1] = temp_ptr2[1] & 1U | temp_var7;\n      *(uint *)(temp_var8 + 4) = *(uint *)(temp_var8 + 4) | 1;\n    }\n    else {\n      temp_ptr2[1] = temp_ptr2[1] & 1U | temp_var5;\n      *(uint *)((int)temp_ptr2 + temp_var5 + 4) = temp_var7 - temp_var5 | 1;\n      *(uint *)(temp_var8 + 4) = *(uint *)(temp_var8 + 4) | 1;\n      FUN_080088ec(param_1,(int)temp_ptr2 + temp_var5 + 8);\n    }\n    FUN_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "param_3": "size_of_allocated_memory",
                "piVar1": "temp_ptr1",
                "iVar2": "temp_var1",
                "piVar3": "temp_ptr2",
                "uVar4": "temp_var2",
                "iVar5": "temp_var3",
                "uVar6": "temp_var4",
                "piVar7": "temp_ptr3",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6",
                "uVar10": "temp_var7",
                "iVar11": "temp_var8"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 155202,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}