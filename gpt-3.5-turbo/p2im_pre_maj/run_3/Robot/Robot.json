{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_and_extend_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_and_extend_08000134(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_and_extend_08000134",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_08000158",
            "code": "\nulonglong calculate_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint temp1;\n  uint temp2;\n  int shift2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp1 = input4 ^ 0x80000000;\n  temp3 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (temp3 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)temp3 >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp3 = temp1;\n      temp5 = input3;\n      if (shift2 == -1) {\n        temp3 = input2;\n        temp5 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = temp5;\n        temp1 = temp3;\n      }\n      condition2 = (temp5 | temp3 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp3 == temp1;\n      }\n      if (!condition2) {\n        temp3 = temp3 | 0x80000;\n      }\n      return CONCAT44(temp3,temp5);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp3 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (temp3 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,input1 << 1);\n    }\n    if (temp3 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp3 = temp3 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp5 = input4 - temp3;\n  condition2 = temp5 != 0;\n  if (input4 < temp3) {\n    temp5 = -temp5;\n  }\n  temp4 = input1;\n  temp2 = input2;\n  if (condition2 && temp3 <= input4) {\n    temp3 = temp3 + temp5;\n    temp4 = input3;\n    temp2 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < temp5) {\n    return CONCAT44(temp2,temp4);\n  }\n  result2 = temp2 & 0xfffff | 0x100000;\n  if ((temp2 & 0x80000000) != 0) {\n    condition2 = temp4 != 0;\n    temp4 = -temp4;\n    result2 = -result2 - (uint)condition2;\n  }\n  temp2 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  if (temp3 == temp5) {\n    temp2 = temp2 ^ 0x100000;\n    if (temp3 == 0) {\n      result2 = result2 ^ 0x100000;\n      temp3 = 1;\n    }\n    else {\n      temp5 = temp5 - 1;\n    }\n  }\n  temp1 = -temp5 + 0x20;\n  if ((int)temp5 < 0x21) {\n    temp6 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (temp5 & 0xff);\n    result1 = temp4 + input3;\n    result3 = temp2 << (temp1 & 0xff);\n    temp1 = result1 + result3;\n    result2 = result2 + CARRY4(temp4,input3) + ((int)temp2 >> (temp5 & 0xff)) +\n            (uint)CARRY4(result1,result3);\n  }\n  else {\n    temp6 = temp2 << (-temp5 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    temp2 = (int)temp2 >> (temp5 - 0x20 & 0xff);\n    temp1 = temp4 + temp2;\n    result2 = result2 + ((int)temp2 >> 0x1f) + (uint)CARRY4(temp4,temp2);\n  }\n  input2 = result2 & 0x80000000;\n  temp5 = result2;\n  if ((int)result2 < 0) {\n    condition2 = temp6 == 0;\n    temp6 = -temp6;\n    temp5 = -temp1;\n    temp1 = -(uint)!condition2 - temp1;\n    temp5 = -(uint)(condition2 <= temp5) - result2;\n  }\n  if (0xfffff < temp5) {\n    temp4 = temp3 - 1;\n    if (0x1fffff < temp5) {\n      temp4 = temp5 & 1;\n      temp5 = temp5 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(temp4 != 0) << 0x1f | temp1 >> 1;\n      temp6 = (uint)(carry & 1) << 0x1f | temp6 >> 1;\n      temp4 = temp3;\n      if (0xffbfffff < temp3 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition2 = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      condition2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(temp5 + temp4 * 0x100000 + (uint)CARRY4(temp1,(uint)condition2) | input2,\n                    temp1 + condition2);\n  }\n  condition1 = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  temp4 = temp1 * 2;\n  condition2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)condition1;\n  temp5 = temp5 * 2 + (uint)(condition2 || CARRY4(temp4,(uint)condition1));\n  temp4 = temp3 - 2;\n  if ((temp5 & 0x100000) != 0) goto LAB_08000268;\n  temp2 = temp1;\n  temp3 = temp5;\n  if (temp5 == 0) {\n    temp2 = 0;\n    temp3 = temp1;\n  }\n  shift2 = LZCOUNT(temp3);\n  if (temp5 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp5 = shift2 - 0xb;\n  condition3 = SBORROW4(temp5,0x20);\n  temp1 = shift2 - 0x2b;\n  condition2 = (int)temp1 < 0;\n  condition1 = temp1 == 0;\n  if ((int)temp5 < 0x20) {\n    condition3 = SCARRY4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    condition1 = shift2 == 0;\n    temp1 = temp5;\n    if (!condition1 && condition2 == condition3) {\n      temp2 = temp3 << (temp5 & 0xff);\n      temp3 = temp3 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp6 = 0x20 - temp1;\n  }\n  temp3 = temp3 << (temp1 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp3 = temp3 | temp2 >> (temp6 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp2 = temp2 << (temp1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp5 <= (int)temp4) {\n    return CONCAT44(temp3 + (temp4 - temp5) * 0x100000 | input2,temp2);\n  }\n  temp1 = ~(temp4 - temp5);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(result2,temp2 >> (0x20 - (0xcU - shift2) & 0xff) | temp3 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(input2 | temp3 >> (temp1 & 0xff),\n                    temp2 >> (temp1 & 0xff) | temp3 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(result2,temp3 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "result3",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "iVar8": "shift2",
                "uVar9": "temp3",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_concatenation_0800015c",
            "code": "\nulonglong calculateConcatenation_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry1;\n  uint sum1;\n  uint shiftedSum;\n  uint sum2;\n  int shift2;\n  uint shiftedInput2;\n  uint shiftedInput4;\n  uint shiftedSum2;\n  uint shiftedSum3;\n  uint shiftedCarry;\n  uint carry2;\n  bool isSumZero;\n  bool isSum1Zero;\n  bool isSum2Negative;\n  \n  shiftedInput2 = input2 << 1;\n  shiftedSum2 = input4 << 1;\n  isSumZero = ((input2 ^ input4) & 0x7fffffff) == 0;\n  isSum1Zero = isSumZero && input1 == input3;\n  if (!isSumZero || input1 != input3) {\n    isSum1Zero = (shiftedInput2 | input1) == 0;\n  }\n  if (!isSum1Zero) {\n    isSum1Zero = (shiftedSum2 | input3) == 0;\n  }\n  shift2 = (int)shiftedInput2 >> 0x15;\n  if (!isSum1Zero) {\n    isSum1Zero = shift2 == -1;\n  }\n  shift1 = (int)shiftedSum2 >> 0x15;\n  if (!isSum1Zero) {\n    isSum1Zero = shift1 == -1;\n  }\n  if (isSum1Zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shiftedSum2 = input4;\n      shiftedInput2 = input3;\n      if (shift2 == -1) {\n        shiftedSum2 = input2;\n        shiftedInput2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shiftedInput2;\n        input4 = shiftedSum2;\n      }\n      isSum1Zero = (shiftedInput2 | shiftedSum2 << 0xc) == 0;\n      if (isSum1Zero) {\n        isSum1Zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (isSum1Zero) {\n        isSum1Zero = shiftedSum2 == input4;\n      }\n      if (!isSum1Zero) {\n        shiftedSum2 = shiftedSum2 | 0x80000;\n      }\n      return CONCAT44(shiftedSum2,shiftedInput2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shiftedInput2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shiftedInput2 >> 0x15 == 0) {\n      isSum1Zero = (input1 & 0x80000000) != 0;\n      shiftedSum2 = input2 * 2 + (uint)isSum1Zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isSum1Zero)) {\n        shiftedSum2 = shiftedSum2 | 0x80000000;\n      }\n      return CONCAT44(shiftedSum2,input1 << 1);\n    }\n    if (shiftedInput2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shiftedInput2 = shiftedInput2 >> 0x15;\n  shiftedSum2 = shiftedSum2 >> 0x15;\n  shiftedSum3 = shiftedSum2 - shiftedInput2;\n  isSum1Zero = shiftedSum3 != 0;\n  if (shiftedSum2 < shiftedInput2) {\n    shiftedSum3 = -shiftedSum3;\n  }\n  shiftedInput4 = input1;\n  sum2 = input2;\n  if (isSum1Zero && shiftedInput2 <= shiftedSum2) {\n    shiftedInput2 = shiftedInput2 + shiftedSum3;\n    shiftedInput4 = input3;\n    sum2 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < shiftedSum3) {\n    return CONCAT44(sum2,shiftedInput4);\n  }\n  shiftedSum2 = sum2 & 0xfffff | 0x100000;\n  if ((sum2 & 0x80000000) != 0) {\n    isSum1Zero = shiftedInput4 != 0;\n    shiftedInput4 = -shiftedInput4;\n    shiftedSum2 = -shiftedSum2 - (uint)isSum1Zero;\n  }\n  sum2 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    isSum1Zero = input3 != 0;\n    input3 = -input3;\n    sum2 = -sum2 - (uint)isSum1Zero;\n  }\n  if (shiftedInput2 == shiftedSum3) {\n    sum2 = sum2 ^ 0x100000;\n    if (shiftedInput2 == 0) {\n      shiftedSum2 = shiftedSum2 ^ 0x100000;\n      shiftedInput2 = 1;\n    }\n    else {\n      shiftedSum3 = shiftedSum3 - 1;\n    }\n  }\n  carry2 = -shiftedSum3 + 0x20;\n  if ((int)shiftedSum3 < 0x21) {\n    shiftedCarry = input3 << (carry2 & 0xff);\n    input3 = input3 >> (shiftedSum3 & 0xff);\n    sum1 = shiftedInput4 + input3;\n    shiftedSum = sum2 << (carry2 & 0xff);\n    carry2 = sum1 + shiftedSum;\n    shiftedSum2 = shiftedSum2 + CARRY4(shiftedInput4,input3) + ((int)sum2 >> (shiftedSum3 & 0xff)) +\n            (uint)CARRY4(sum1,shiftedSum);\n  }\n  else {\n    shiftedCarry = sum2 << (-shiftedSum3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      shiftedCarry = shiftedCarry | 2;\n    }\n    sum2 = (int)sum2 >> (shiftedSum3 - 0x20 & 0xff);\n    carry2 = shiftedInput4 + sum2;\n    shiftedSum2 = shiftedSum2 + ((int)sum2 >> 0x1f) + (uint)CARRY4(shiftedInput4,sum2);\n  }\n  input2 = shiftedSum2 & 0x80000000;\n  shiftedSum3 = shiftedSum2;\n  if ((int)shiftedSum2 < 0) {\n    isSum1Zero = shiftedCarry == 0;\n    shiftedCarry = -shiftedCarry;\n    shiftedSum3 = -carry2;\n    carry2 = -(uint)!isSum1Zero - carry2;\n    shiftedSum3 = -(uint)(isSum1Zero <= shiftedSum3) - shiftedSum2;\n  }\n  if (0xfffff < shiftedSum3) {\n    shiftedInput4 = shiftedInput2 - 1;\n    if (0x1fffff < shiftedSum3) {\n      shiftedSum2 = shiftedSum3 & 1;\n      shiftedSum3 = shiftedSum3 >> 1;\n      carry1 = (byte)carry2;\n      carry2 = (uint)(shiftedSum2 != 0) << 0x1f | carry2 >> 1;\n      shiftedCarry = (uint)(carry1 & 1) << 0x1f | shiftedCarry >> 1;\n      shiftedInput4 = shiftedInput2;\n      if (0xffbfffff < shiftedInput2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    isSum1Zero = 0x7fffffff < shiftedCarry;\n    if (shiftedCarry == 0x80000000) {\n      isSum1Zero = (carry2 & 1) != 0;\n    }\n    return CONCAT44(shiftedSum3 + shiftedInput4 * 0x100000 + (uint)CARRY4(carry2,(uint)isSum1Zero) | input2,\n                    carry2 + isSum1Zero);\n  }\n  isSumZero = (shiftedCarry & 0x80000000) != 0;\n  shiftedCarry = shiftedCarry << 1;\n  shiftedInput4 = carry2 * 2;\n  isSum1Zero = CARRY4(carry2,carry2);\n  carry2 = carry2 * 2 + (uint)isSumZero;\n  shiftedSum3 = shiftedSum3 * 2 + (uint)(isSum1Zero || CARRY4(shiftedInput4,(uint)isSumZero));\n  shiftedInput4 = shiftedInput2 - 2;\n  if ((shiftedSum3 & 0x100000) != 0) goto LAB_08000268;\n  sum2 = carry2;\n  shiftedInput2 = shiftedSum3;\n  if (shiftedSum3 == 0) {\n    sum2 = 0;\n    shiftedInput2 = carry2;\n  }\n  shift2 = LZCOUNT(shiftedInput2);\n  if (shiftedSum3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  carry2 = shift2 - 0xb;\n  isSum2Negative = SBORROW4(carry2,0x20);\n  shiftedSum3 = shift2 - 0x2b;\n  isSum1Zero = (int)shiftedSum3 < 0;\n  isSumZero = shiftedSum3 == 0;\n  if ((int)carry2 < 0x20) {\n    isSum2Negative = SCARRY4(shiftedSum3,0xc);\n    shift2 = shift2 + -0x1f;\n    isSum1Zero = shift2 < 0;\n    isSumZero = shift2 == 0;\n    shiftedSum3 = carry2;\n    if (!isSumZero && isSum1Zero == isSum2Negative) {\n      sum2 = shiftedInput2 << (carry2 & 0xff);\n      shiftedInput2 = shiftedInput2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isSumZero || isSum1Zero != isSum2Negative) {\n    shiftedCarry = 0x20 - shiftedSum3;\n  }\n  shiftedInput2 = shiftedInput2 << (shiftedSum3 & 0xff);\n  if (isSumZero || isSum1Zero != isSum2Negative) {\n    shiftedInput2 = shiftedInput2 | sum2 >> (shiftedCarry & 0xff);\n  }\n  if (isSumZero || isSum1Zero != isSum2Negative) {\n    sum2 = sum2 << (shiftedSum3 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)carry2 <= (int)shiftedInput4) {\n    return CONCAT44(shiftedInput2 + (shiftedInput4 - carry2) * 0x100000 | input2,sum2);\n  }\n  shiftedSum3 = ~(shiftedInput4 - carry2);\n  if ((int)shiftedSum3 < 0x1f) {\n    shift2 = shiftedSum3 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(shiftedSum3 - 0x1f,0xc)) {\n      return CONCAT44(shiftedSum2,sum2 >> (0x20 - (0xcU - shift2) & 0xff) | shiftedInput2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedSum3 = shiftedSum3 + 1;\n    return CONCAT44(input2 | shiftedInput2 >> (shiftedSum3 & 0xff),\n                    sum2 >> (shiftedSum3 & 0xff) | shiftedInput2 << (0x20 - shiftedSum3 & 0xff));\n  }\n  return CONCAT44(shiftedSum2,shiftedInput2 >> (shiftedSum3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_concatenation_0800015c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry1",
                "uVar3": "sum1",
                "uVar4": "shiftedSum",
                "uVar5": "sum2",
                "iVar6": "shift2",
                "uVar7": "shiftedInput2",
                "uVar8": "shiftedInput4",
                "uVar9": "shiftedSum2",
                "uVar10": "shiftedSum3",
                "uVar11": "shiftedCarry",
                "uVar12": "carry2",
                "bVar13": "isSumZero",
                "bVar14": "isSum1Zero",
                "bVar15": "isSum2Negative"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "extracted_binary_function_080003d4",
            "code": "\nulonglong extractedBinaryFunction_080003d4(uint inputValue)\n\n{\n  uint result1;\n  uint result2;\n  int bitCount;\n  uint shiftAmount;\n  uint remainingBits;\n  bool negativeBit;\n  bool zeroBit;\n  bool carryBit;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  result1 = 0;\n  bitCount = LZCOUNT(inputValue);\n  shiftAmount = bitCount + 0x15;\n  carryBit = SBORROW4(shiftAmount,0x20);\n  result2 = bitCount - 0xb;\n  negativeBit = (int)result2 < 0;\n  zeroBit = result2 == 0;\n  if (shiftAmount < 0x20) {\n    carryBit = SCARRY4(result2,0xc);\n    negativeBit = false;\n    zeroBit = bitCount + 1 == 0;\n    result2 = shiftAmount;\n    if (!zeroBit && carryBit == false) {\n      result1 = inputValue << shiftAmount;\n      inputValue = inputValue >> (0xcU - (bitCount + 1) & 0xff);\n      goto skipShiftLabel;\n    }\n  }\n  if (zeroBit || negativeBit != carryBit) {\n    remainingBits = 0x20 - result2;\n  }\n  inputValue = inputValue << (result2 & 0xff);\n  if (zeroBit || negativeBit != carryBit) {\n    inputValue = inputValue | 0U >> (remainingBits & 0xff);\n  }\n  if (zeroBit || negativeBit != carryBit) {\n    result1 = 0 << (result2 & 0xff);\n  }\nskipShiftLabel:\n  if (shiftAmount < 0x433) {\n    return CONCAT44(inputValue + (0x432 - shiftAmount) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - shiftAmount);\n  if (0x1e < (int)result2) {\n    return (ulonglong)(inputValue >> (result2 - 0x1f & 0xff));\n  }\n  bitCount = result2 - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return CONCAT44(inputValue >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | inputValue << (0x20 - result2 & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - bitCount) & 0xff) | inputValue << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "extracted_binary_function_080003d4",
                "param_1": "inputValue",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "bitCount",
                "uVar4": "shiftAmount",
                "in_r12": "remainingBits",
                "bVar5": "negativeBit",
                "bVar6": "zeroBit",
                "bVar7": "carryBit",
                "LAB_080002e0": "skipShiftLabel"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "calculate_shifted_value_080003f4",
            "code": "\nulonglong calculateShiftedValue_080003f4(uint input)\n\n{\n  uint signBit;\n  uint absInput;\n  uint absShiftAmount;\n  int leadingZeros;\n  uint shiftedValue;\n  uint signExtension;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isUnderflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signExtension = input & 0x80000000;\n  absInput = input;\n  if ((int)signExtension < 0) {\n    absInput = -input;\n  }\n  signBit = 0;\n  leadingZeros = LZCOUNT(absInput);\n  shiftedValue = leadingZeros + 0x15;\n  isUnderflow = SBORROW4(shiftedValue,0x20);\n  absShiftAmount = leadingZeros - 0xb;\n  isNegative = (int)absShiftAmount < 0;\n  isZero = absShiftAmount == 0;\n  if (shiftedValue < 0x20) {\n    isUnderflow = SCARRY4(absShiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    absShiftAmount = shiftedValue;\n    if (!isZero && isUnderflow == false) {\n      signBit = absInput << shiftedValue;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto shiftResult;\n    }\n  }\n  if (isZero || isNegative != isUnderflow) {\n    remainingBits = 0x20 - absShiftAmount;\n  }\n  absInput = absInput << (absShiftAmount & 0xff);\n  if (isZero || isNegative != isUnderflow) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isUnderflow) {\n    signBit = 0 << (absShiftAmount & 0xff);\n  }\nshiftResult:\n  if (shiftedValue < 0x433) {\n    return CONCAT44(absInput + (0x432 - shiftedValue) * 0x100000 | signExtension,signBit);\n  }\n  absShiftAmount = ~(0x432 - shiftedValue);\n  if (0x1e < (int)absShiftAmount) {\n    return CONCAT44(input,absInput >> (absShiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = absShiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(absShiftAmount - 0x1f,0xc)) {\n    absShiftAmount = absShiftAmount + 1;\n    return CONCAT44(signExtension | absInput >> (absShiftAmount & 0xff),\n                    signBit >> (absShiftAmount & 0xff) | absInput << (0x20 - absShiftAmount & 0xff));\n  }\n  return CONCAT44(input,signBit >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "input",
                "uVar1": "signBit",
                "uVar2": "absInput",
                "uVar3": "absShiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedValue",
                "uVar6": "signExtension",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isUnderflow",
                "LAB_080002e0": "shiftResult"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "binary_manipulation_08000418",
            "code": "\nulonglong binaryManipulation_08000418(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint shiftedMask;\n  uint tempVar;\n  uint mergedValues;\n  uint shiftAmount;\n  uint shiftedInput;\n  int leadingZeros;\n  uint tempVar2;\n  uint tempVar3;\n  bool isNegative;\n  bool bVar9;\n  bool bVar10;\n  \n  shiftedInput = input << 1;\n  bVar9 = shiftedInput == 0;\n  shiftedMask = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftAmount = (uint)((int)shiftedInput >> 3) >> 1;\n  mergedValues = shiftedMask | shiftAmount;\n  input = input << 0x1d;\n  if (!bVar9) {\n    param4 = shiftedInput & 0xff000000;\n    bVar9 = param4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = param4 == 0xff000000;\n  }\n  if (!bVar9) {\n    return CONCAT44(mergedValues,input) ^ 0x3800000000000000;\n  }\n  if ((shiftedInput & 0xffffff) == 0) {\n    return CONCAT44(mergedValues,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(mergedValues,input) | 0x8000000000000;\n  }\n  tempVar = input;\n  shiftedInput = shiftAmount;\n  if (shiftAmount == 0) {\n    tempVar = 0;\n    shiftedInput = input;\n  }\n  leadingZeros = LZCOUNT(shiftedInput);\n  if (shiftAmount == 0) {\n    leadingZeros = leadingZeros + 0x20;\n  }\n  tempVar2 = leadingZeros - 0xb;\n  bVar10 = SBORROW4(tempVar2,0x20);\n  shiftAmount = leadingZeros - 0x2b;\n  bVar9 = (int)shiftAmount < 0;\n  isNegative = shiftAmount == 0;\n  if ((int)tempVar2 < 0x20) {\n    bVar10 = SCARRY4(shiftAmount,0xc);\n    leadingZeros = leadingZeros + -0x1f;\n    bVar9 = leadingZeros < 0;\n    isNegative = leadingZeros == 0;\n    shiftAmount = tempVar2;\n    if (!isNegative && bVar9 == bVar10) {\n      tempVar = shiftedInput << (tempVar2 & 0xff);\n      shiftedInput = shiftedInput >> (0xcU - leadingZeros & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isNegative || bVar9 != bVar10) {\n    tempVar3 = 0x20 - shiftAmount;\n  }\n  shiftedInput = shiftedInput << (shiftAmount & 0xff);\n  if (isNegative || bVar9 != bVar10) {\n    shiftedInput = shiftedInput | tempVar >> (tempVar3 & 0xff);\n  }\n  if (isNegative || bVar9 != bVar10) {\n    tempVar = tempVar << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if ((int)tempVar2 < 0x381) {\n    return CONCAT44(shiftedInput + (0x380 - tempVar2) * 0x100000 | shiftedMask,tempVar);\n  }\n  shiftAmount = ~(0x380 - tempVar2);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(mergedValues,shiftedInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(shiftedMask | shiftedInput >> (shiftAmount & 0xff),\n                    tempVar >> (shiftAmount & 0xff) | shiftedInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(mergedValues,tempVar >> (0x20 - (0xcU - leadingZeros) & 0xff) | shiftedInput << (0xcU - leadingZeros & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "binary_manipulation_08000418",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "shiftedMask",
                "uVar2": "tempVar",
                "uVar3": "mergedValues",
                "uVar4": "shiftAmount",
                "uVar5": "shiftedInput",
                "iVar6": "leadingZeros",
                "uVar7": "tempVar2",
                "in_r12": "tempVar3",
                "bVar8": "isNegative"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_floating_point_080004c8",
            "code": "\nulonglong calculateFloatingPoint_080004c8(undefined4 value1,uint bits1,uint bits2,uint bits3)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint value2;\n  uint value3;\n  int sum;\n  uint difference;\n  uint value4;\n  uint uVar7;\n  uint uVar8;\n  bool isZero;\n  bool carryFlag;\n  bool isNegative;\n  ulonglong combinedValue;\n  \n  combinedValue = CONCAT44(bits1,value1);\n  uVar7 = 0x7ff;\n  value3 = bits1 >> 0x14 & 0x7ff;\n  isZero = value3 == 0;\n  if (!isZero) {\n    value4 = bits3 >> 0x14 & 0x7ff;\n    isZero = value4 == 0;\n  }\n  if (!isZero) {\n    isZero = value3 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = value4 == 0x7ff;\n  }\n  if (isZero) {\n    combinedValue = reverse_bits_to_float_080006a4();\n  }\n  value2 = (uint)(combinedValue >> 0x20);\n  sum = value3 + value4;\n  value3 = value2 ^ bits3;\n  value2 = value2 & ~(uVar7 << 0x15);\n  bits3 = bits3 & ~(uVar7 << 0x15);\n  isZero = ((uint)combinedValue | value2 << 0xc) == 0;\n  if (!isZero) {\n    isZero = (bits2 | bits3 << 0xc) == 0;\n  }\n  value2 = value2 | 0x100000;\n  bits3 = bits3 | 0x100000;\n  if (isZero) {\n    bits2 = (uint)combinedValue | bits2;\n    bits3 = (value3 & 0x80000000 | value2) ^ bits3;\n    value3 = uVar7 >> 1;\n    isNegative = SBORROW4(sum,value3);\n    difference = sum - value3;\n    isZero = difference == 0;\n    value2 = difference;\n    if (!isZero && (int)value3 <= sum) {\n      isNegative = SBORROW4(uVar7,difference);\n      value2 = uVar7 - difference;\n      isZero = uVar7 == difference;\n    }\n    if (!isZero && (int)value2 < 0 == isNegative) {\n      bits3 = bits3 | difference * 0x100000;\n    }\n    if (!isZero && (int)value2 < 0 == isNegative) {\n      return CONCAT44(bits3,bits2);\n    }\n    bits3 = bits3 | 0x100000;\n    uVar7 = 0;\n    isNegative = SBORROW4(difference,1);\n    difference = difference - 1;\n    isZero = difference == 0;\n    value3 = difference;\n  }\n  else {\n    result1 = (combinedValue & 0xffffffff) * (ulonglong)bits2;\n    combinedValue = (combinedValue & 0xffffffff) * (ulonglong)bits3 +\n             (ulonglong)value2 * (ulonglong)bits2 + (result1 >> 0x20);\n    uVar8 = (uint)combinedValue;\n    result2 = (ulonglong)value2 * (ulonglong)bits3 + (combinedValue >> 0x20);\n    uVar7 = (uint)result2;\n    value2 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    difference = (sum + -0x3ff) - (uint)(value2 < 0x200);\n    if (value2 < 0x200) {\n      isZero = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      result2 = CONCAT44(value2 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)isZero)),\n                       uVar7 * 2 + (uint)isZero);\n    }\n    bits3 = value3 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    bits2 = (uint)result2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    carryFlag = 0xfc < difference;\n    isNegative = SBORROW4(difference,0xfd);\n    value2 = difference - 0xfd;\n    isZero = value2 == 0;\n    value3 = value2;\n    if (carryFlag && !isZero) {\n      carryFlag = 0x6ff < value2;\n      isNegative = SBORROW4(value2,0x700);\n      value3 = difference - 0x7fd;\n      isZero = value2 == 0x700;\n    }\n    if (!carryFlag || isZero) {\n      isZero = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        isZero = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(bits3 + difference * 0x100000 + (uint)CARRY4(bits2,(uint)isZero),bits2 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)value3 < 0 == isNegative) {\n    return (ulonglong)(bits3 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carryFlag = SCARRY4(difference,0x36);\n  isZero = (int)(difference + 0x36) < 0;\n  isNegative = difference == 0xffffffca;\n  if (isNegative || isZero != carryFlag) {\n    bits2 = 0;\n  }\n  if (isNegative || isZero != carryFlag) {\n    bits3 = bits3 & 0x80000000;\n  }\n  if (isNegative || isZero != carryFlag) {\n    return CONCAT44(bits3,bits2);\n  }\n  value3 = -difference;\n  value2 = value3 - 0x20;\n  if (0x1f < (int)value3) {\n    difference = bits2 >> (value2 & 0xff) | bits3 << (0x20 - value2 & 0xff);\n    value3 = (bits3 >> (value2 & 0xff) & ~((bits3 & 0x80000000) >> (value2 & 0xff))) -\n            ((int)difference >> 0x1f);\n    if ((uVar7 | bits2 << (0x20 - value2 & 0xff) | difference << 1) == 0) {\n      value3 = value3 & ~(difference >> 0x1f);\n    }\n    return CONCAT44(bits3,value3) & 0x80000000ffffffff;\n  }\n  sum = value3 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(value2,0xc)) {\n    uVar8 = bits2 << (difference + 0x20 & 0xff);\n    value2 = bits2 >> (value3 & 0xff) | bits3 << (difference + 0x20 & 0xff);\n    difference = value2 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      difference = difference & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((bits3 & 0x80000000) +\n                    ((bits3 & 0x7fffffff) >> (value3 & 0xff)) +\n                    (uint)CARRY4(value2,-((int)uVar8 >> 0x1f)),difference);\n  }\n  value3 = 0xc - sum;\n  difference = bits2 << (value3 & 0xff);\n  value3 = bits2 >> (0x20 - value3 & 0xff) | bits3 << (value3 & 0xff);\n  value2 = value3 + -((int)difference >> 0x1f);\n  if ((uVar7 | difference << 1) == 0) {\n    value2 = value2 & ~(difference >> 0x1f);\n  }\n  return CONCAT44((bits3 & 0x80000000) + (uint)CARRY4(value3,-((int)difference >> 0x1f)),value2);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_floating_point_080004c8",
                "param_1": "value1",
                "param_2": "bits1",
                "param_3": "bits2",
                "param_4": "bits3",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "value2",
                "uVar4": "value3",
                "iVar5": "sum",
                "uVar6": "difference",
                "unaff_r5": "value4",
                "bVar9": "isZero",
                "bVar10": "carryFlag",
                "bVar11": "isNegative",
                "uVar12": "combinedValue"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "reverse_bits_to_float_080006a4",
            "code": "\nulonglong reverseBitsToFloat_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!isZero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "reverse_bits_to_float_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_float_0800071c",
            "code": "\nulonglong calculateFloat_0800071c(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint bit11;\n  uint bit20;\n  uint bit31;\n  uint bit32;\n  uint uVar5;\n  uint uVar6;\n  uint bitSign;\n  int diff;\n  uint sBitExponent;\n  uint unaff_r5;\n  uint delta;\n  uint result;\n  uint temp1;\n  uint bitFraction;\n  bool isZeroExp1;\n  bool isZeroExp2;\n  bool carryFlag;\n  undefined8 floatBits;\n  \n  floatBits = CONCAT44(param2,param1);\n  bitFraction = 0x7ff;\n  bitSign = param2 >> 0x14 & 0x7ff;\n  isZeroExp1 = bitSign == 0;\n  if (!isZeroExp1) {\n    unaff_r5 = param4 >> 0x14 & 0x7ff;\n    isZeroExp1 = unaff_r5 == 0;\n  }\n  if (!isZeroExp1) {\n    isZeroExp1 = bitSign == 0x7ff;\n  }\n  if (!isZeroExp1) {\n    isZeroExp1 = unaff_r5 == 0x7ff;\n  }\n  if (isZeroExp1) {\n    floatBits = calculate_float_bits_0800088a();\n  }\n  sBitExponent = (uint)((ulonglong)floatBits >> 0x20);\n  result = (uint)floatBits;\n  diff = bitSign - unaff_r5;\n  if ((param3 | param4 << 0xc) == 0) {\n    bitSign = (sBitExponent ^ param4) & 0x80000000 | sBitExponent & 0xfffff;\n    carryFlag = SCARRY4(diff,bitFraction >> 1);\n    sBitExponent = diff + (bitFraction >> 1);\n    isZeroExp1 = (int)sBitExponent < 0;\n    isZeroExp2 = sBitExponent == 0;\n    if (!isZeroExp2 && isZeroExp1 == carryFlag) {\n      carryFlag = SBORROW4(bitFraction,sBitExponent);\n      isZeroExp1 = (int)(bitFraction - sBitExponent) < 0;\n      isZeroExp2 = bitFraction == sBitExponent;\n    }\n    if (!isZeroExp2 && isZeroExp1 == carryFlag) {\n      bitSign = bitSign | sBitExponent * 0x100000;\n    }\n    if (!isZeroExp2 && isZeroExp1 == carryFlag) {\n      return CONCAT44(bitSign,result);\n    }\n    bitSign = bitSign | 0x100000;\n    bitFraction = 0;\n    isZeroExp2 = SBORROW4(sBitExponent,1);\n    sBitExponent = sBitExponent - 1;\n    isZeroExp1 = sBitExponent == 0;\n    bit31 = sBitExponent;\n  }\n  else {\n    bit31 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    bitFraction = param3 << 8;\n    delta = (sBitExponent << 0xc) >> 4 | 0x10000000 | result >> 0x18;\n    result = result * 0x100;\n    bitSign = (sBitExponent ^ param4) & 0x80000000;\n    isZeroExp1 = bit31 <= delta;\n    if (delta == bit31) {\n      isZeroExp1 = bitFraction <= result;\n    }\n    diff = diff + (uint)isZeroExp1;\n    sBitExponent = diff + 0x3fd;\n    if (isZeroExp1 == false) {\n      bit31 = bit31 >> 1;\n      bitFraction = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | bitFraction >> 1;\n    }\n    temp1 = result - bitFraction;\n    delta = (delta - bit31) - (uint)(result < bitFraction);\n    bit32 = bit31 >> 1;\n    bit11 = (uint)((bit31 & 1) != 0) << 0x1f | bitFraction >> 1;\n    result = 0x100000;\n    bit31 = 0x80000;\n    while( true ) {\n      isZeroExp1 = bit11 <= temp1;\n      if (bit32 < delta || delta - bit32 < (uint)isZeroExp1) {\n        temp1 = temp1 - bit11;\n        result = result | bit31;\n        delta = (delta - bit32) - (uint)!isZeroExp1;\n      }\n      uVar5 = bit32 >> 1;\n      bit11 = (uint)((bit32 & 1) != 0) << 0x1f | bit11 >> 1;\n      isZeroExp2 = bit11 <= temp1;\n      isZeroExp1 = delta - uVar5 < (uint)isZeroExp2;\n      bitFraction = delta;\n      if (uVar5 < delta || isZeroExp1) {\n        temp1 = temp1 - bit11;\n        bitFraction = (delta - uVar5) - (uint)!isZeroExp2;\n      }\n      if (uVar5 < delta || isZeroExp1) {\n        result = result | bit31 >> 1;\n      }\n      delta = bit32 >> 2;\n      bit20 = (uint)((uVar5 & 1) != 0) << 0x1f | bit11 >> 1;\n      isZeroExp2 = bit20 <= temp1;\n      isZeroExp1 = bitFraction - delta < (uint)isZeroExp2;\n      uVar5 = bitFraction;\n      if (delta < bitFraction || isZeroExp1) {\n        temp1 = temp1 - bit20;\n        uVar5 = (bitFraction - delta) - (uint)!isZeroExp2;\n      }\n      if (delta < bitFraction || isZeroExp1) {\n        result = result | bit31 >> 2;\n      }\n      uVar6 = bit32 >> 3;\n      bit11 = (uint)((delta & 1) != 0) << 0x1f | bit20 >> 1;\n      isZeroExp2 = bit11 <= temp1;\n      isZeroExp1 = uVar5 - uVar6 < (uint)isZeroExp2;\n      delta = uVar5;\n      if (uVar6 < uVar5 || isZeroExp1) {\n        temp1 = temp1 - bit11;\n        delta = (uVar5 - uVar6) - (uint)!isZeroExp2;\n      }\n      if (uVar6 < uVar5 || isZeroExp1) {\n        result = result | bit31 >> 3;\n      }\n      bitFraction = delta | temp1;\n      if (bitFraction == 0) break;\n      delta = delta << 4 | temp1 >> 0x1c;\n      temp1 = temp1 << 4;\n      bit32 = bit32 & 0xfffffff8 | bit11 >> 0x1d;\n      bit11 = (bit20 >> 1) << 3;\n      bit31 = bit31 >> 4;\n      if (bit31 == 0) {\n        uVar6 = bit32;\n        if ((bitSign & 0x100000) != 0) goto LAB_0800083a;\n        bitSign = bitSign | result;\n        result = 0;\n        bit31 = 0x80000000;\n      }\n    }\n    if ((bitSign & 0x100000) == 0) {\n      bitSign = bitSign | result;\n      result = 0;\n    }\nLAB_0800083a:\n    carryFlag = 0xfc < sBitExponent;\n    isZeroExp2 = SBORROW4(sBitExponent,0xfd);\n    bit32 = diff + 0x300;\n    isZeroExp1 = bit32 == 0;\n    bit31 = bit32;\n    if (carryFlag && !isZeroExp1) {\n      carryFlag = 0x6ff < bit32;\n      isZeroExp2 = SBORROW4(bit32,0x700);\n      bit31 = diff - 0x400;\n      isZeroExp1 = bit32 == 0x700;\n    }\n    if (!carryFlag || isZeroExp1) {\n      isZeroExp1 = uVar6 <= delta;\n      if (delta == uVar6) {\n        isZeroExp1 = bit11 <= temp1;\n      }\n      if (delta == uVar6 && temp1 == bit11) {\n        isZeroExp1 = (result & 1) != 0;\n      }\n      return CONCAT44(bitSign + sBitExponent * 0x100000 + (uint)CARRY4(result,(uint)isZeroExp1),result + isZeroExp1);\n    }\n  }\n  if (!isZeroExp1 && (int)bit31 < 0 == isZeroExp2) {\n    return (ulonglong)(bitSign & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carryFlag = SCARRY4(sBitExponent,0x36);\n  isZeroExp1 = (int)(sBitExponent + 0x36) < 0;\n  isZeroExp2 = sBitExponent == 0xffffffca;\n  if (isZeroExp2 || isZeroExp1 != carryFlag) {\n    result = 0;\n  }\n  if (isZeroExp2 || isZeroExp1 != carryFlag) {\n    bitSign = bitSign & 0x80000000;\n  }\n  if (isZeroExp2 || isZeroExp1 != carryFlag) {\n    return CONCAT44(bitSign,result);\n  }\n  bit31 = -sBitExponent;\n  delta = bit31 - 0x20;\n  if (0x1f < (int)bit31) {\n    bit31 = result >> (delta & 0xff) | bitSign << (0x20 - delta & 0xff);\n    sBitExponent = (bitSign >> (delta & 0xff) & ~((bitSign & 0x80000000) >> (delta & 0xff))) -\n            ((int)bit31 >> 0x1f);\n    if ((bitFraction | result << (0x20 - delta & 0xff) | bit31 << 1) == 0) {\n      sBitExponent = sBitExponent & ~(bit31 >> 0x1f);\n    }\n    return CONCAT44(bitSign,sBitExponent) & 0x80000000ffffffff;\n  }\n  diff = bit31 - 0x14;\n  if (diff != 0 && diff < 0 == SCARRY4(delta,0xc)) {\n    sBitExponent = 0xc - diff;\n    bit31 = result << (sBitExponent & 0xff);\n    result = result >> (0x20 - sBitExponent & 0xff) | bitSign << (sBitExponent & 0xff);\n    sBitExponent = result + -((int)bit31 >> 0x1f);\n    if ((bitFraction | bit31 << 1) == 0) {\n      sBitExponent = sBitExponent & ~(bit31 >> 0x1f);\n    }\n    return CONCAT44((bitSign & 0x80000000) + (uint)CARRY4(result,-((int)bit31 >> 0x1f)),sBitExponent);\n  }\n  delta = result << (sBitExponent + 0x20 & 0xff);\n  result = result >> (bit31 & 0xff) | bitSign << (sBitExponent + 0x20 & 0xff);\n  sBitExponent = result + -((int)delta >> 0x1f);\n  if ((bitFraction | delta << 1) == 0) {\n    sBitExponent = sBitExponent & ~(delta >> 0x1f);\n  }\n  return CONCAT44((bitSign & 0x80000000) +\n                  ((bitSign & 0x7fffffff) >> (bit31 & 0xff)) +\n                  (uint)CARRY4(result,-((int)delta >> 0x1f)),sBitExponent);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_float_0800071c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bit11",
                "uVar2": "bit20",
                "uVar3": "bit31",
                "uVar4": "bit32",
                "uVar7": "bitSign",
                "iVar8": "diff",
                "uVar9": "sBitExponent",
                "uVar10": "delta",
                "uVar11": "result",
                "uVar12": "temp1",
                "uVar13": "bitFraction",
                "bVar14": "isZeroExp1",
                "bVar15": "isZeroExp2",
                "bVar16": "carryFlag",
                "uVar17": "floatBits"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_float_bits_0800088a",
            "code": "\nulonglong calculateFloatBits_0800088a(uint exponent,uint mantissa,uint exponent,uint mantissa)\n\n{\n  uint bit1;\n  uint bit2;\n  uint shiftedBit2;\n  uint shiftedMantissa;\n  uint bitMask;\n  bool isZero;\n  \n  shiftedBit2 = bitMask & mantissa >> 0x14;\n  shiftedMantissa = mantissa;\n  if (bit2 != bitMask || shiftedBit2 != bitMask) {\n    if (bit2 == bitMask) {\n      if (((exponent | mantissa << 0xc) == 0) && (exponent = exponent, shiftedMantissa = mantissa, shiftedBit2 != bitMask)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((mantissa ^ mantissa) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (shiftedBit2 == bitMask) {\n      exponent = exponent;\n      shiftedMantissa = mantissa;\n      if ((exponent | mantissa << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((mantissa ^ mantissa) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (exponent | mantissa << 1) == 0;\n      if (!isZero) {\n        isZero = (exponent | mantissa << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          shiftedMantissa = mantissa & 0x80000000;\n          do {\n            bit1 = exponent & 0x80000000;\n            exponent = exponent << 1;\n            mantissa = mantissa * 2 + (uint)(bit1 != 0);\n          } while ((mantissa & 0x100000) == 0);\n          mantissa = mantissa | shiftedMantissa;\n          if (shiftedBit2 != 0) {\n            return CONCAT44(mantissa,exponent);\n          }\n        }\n        do {\n          shiftedMantissa = exponent & 0x80000000;\n          exponent = exponent << 1;\n          mantissa = mantissa * 2 + (uint)(shiftedMantissa != 0);\n        } while ((mantissa & 0x100000) == 0);\n        return CONCAT44(mantissa,exponent);\n      }\n      if ((exponent | mantissa << 1) != 0) goto LAB_080006fc;\n      if ((exponent | mantissa << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(shiftedMantissa,exponent) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_float_bits_0800088a",
                "param_1": "exponent",
                "param_2": "mantissa",
                "param_3": "exponent",
                "param_4": "mantissa",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "shiftedBit2",
                "uVar3": "shiftedMantissa",
                "in_r12": "bitMask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "compare_parameters_080008fc",
            "code": "\nuint compare_parameters_080008fc(uint shiftedValue1,uint value2,uint value3,uint shiftedValue4)\n\n{\n  uint temp1;\n  bool isEqual;\n  bool isSmaller;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(shiftedValue4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((shiftedValue1 | value2 << 0xc) != 0)) ||\n      (((int)(shiftedValue4 << 1) >> 0x15 == -1 && ((value3 | shiftedValue4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isEqual = (shiftedValue1 | value2 << 1) == 0;\n  if (isEqual) {\n    isEqual = (value3 | shiftedValue4 << 1) == 0;\n  }\n  if (!isEqual) {\n    isEqual = value2 == shiftedValue4;\n  }\n  if (isEqual) {\n    isEqual = shiftedValue1 == value3;\n  }\n  if (!isEqual) {\n    temp1 = value2 ^ shiftedValue4;\n    isEqual = temp1 == 0;\n    if (-1 < (int)temp1) {\n      isEqual = value2 == shiftedValue4;\n    }\n    isSmaller = -1 < (int)temp1 && shiftedValue4 <= value2;\n    if (isEqual) {\n      isSmaller = value3 <= shiftedValue1;\n    }\n    shiftedValue4 = (int)shiftedValue4 >> 0x1f;\n    if (!isSmaller) {\n      shiftedValue4 = ~shiftedValue4;\n    }\n    return shiftedValue4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "compare_parameters_080008fc",
                "param_1": "shiftedValue1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "shiftedValue4",
                "uVar1": "temp1",
                "bVar2": "isEqual",
                "bVar3": "isSmaller"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "validate_and_return_08000978",
            "code": "\nvoid validate_and_return_08000978(undefined4 input1,undefined4 input2,undefined4 parameter1,undefined4 parameter2)\n\n{\n  validate_and_return_08000978_parameter_08000988(parameter1,parameter2,input1,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "validate_and_return_08000978",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "parameter1",
                "param_4": "parameter2"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "validate_and_return_parameter_08000988",
            "code": "\nundefined4 validate_and_return_parameter_08000988(undefined4 input_parameter)\n\n{\n  compare_parameters_080008fc();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08000988": "validate_and_return_parameter_08000988",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978",
                "FUN_08000998"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_parameter_validity_08000998",
            "code": "\nbool check_parameter_validity_08000998(void)\n\n{\n  char is_parameter_valid;\n  \n  validate_and_return_parameter_08000988();\n  return is_parameter_valid != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_parameter_validity_08000998",
                "in_ZR": "is_parameter_valid"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "is_cy_null_080009ac",
            "code": "\nbool is_cy_null_080009ac(void)\n\n{\n  char input_character;\n  \n  validate_and_return_parameter_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "is_cy_null_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "validate_and_return_result_080009c0",
            "code": "\nbool validate_and_return_result_080009c0(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  validate_and_return_parameter_08000988();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "validate_and_return_result_080009c0",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "validate_and_return_080009d4",
            "code": "\nbool validate_and_return_080009d4(void)\n\n{\n  undefined in_zero;\n  undefined in_carry;\n  \n  validate_and_return_080009d4_08000978();\n  return !(bool)in_carry || (bool)in_zero;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "validate_and_return_080009d4",
                "in_ZR": "in_zero",
                "in_CY": "in_carry"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_if_input_is_empty_080009e8",
            "code": "\nbool check_if_input_is_empty_080009e8(void)\n\n{\n  char input_char;\n  \n  validate_and_return_08000978();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_if_input_is_empty_080009e8",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_floating_point_080009fc",
            "code": "\nuint calculateFloatingPoint_080009fc(uint inputValue,uint inputMask)\n\n{\n  uint result;\n  uint maskedValue;\n  uint modifiedValue;\n  uint tempValue;\n  bool isZero;\n  bool isValid;\n  \n  maskedValue = inputMask * 2;\n  isValid = maskedValue < 0x70000000;\n  modifiedValue = maskedValue + 0x90000000;\n  result = modifiedValue;\n  if (!isValid) {\n    tempValue = maskedValue + 0x8fe00000;\n    result = tempValue;\n  }\n  isZero = result == 0;\n  if (!isValid && modifiedValue >= 0x200000) {\n    isZero = tempValue == 0x1fc00000;\n  }\n  if (((isValid || modifiedValue < 0x200000) || 0x1fc00000 < tempValue) || isZero) {\n    if ((inputMask & 0x40000000) != 0) {\n      if (((int)maskedValue >> 0x15 == -1) && ((inputValue | inputMask << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputMask & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(maskedValue + 0x92e00000) < 0 != SCARRY4(modifiedValue,0x2e00000)) {\n      return inputMask & 0x80000000;\n    }\n    maskedValue = 0x18 - (maskedValue + 0x92e00000 >> 0x15);\n    result = inputValue >> (maskedValue & 0xff);\n    if (inputValue << (0x20 - maskedValue & 0xff) != 0) {\n      result = result | 1;\n    }\n    modifiedValue = inputMask & 0x1fffff | 0x100000;\n    inputValue = result | modifiedValue << (0x20 - maskedValue & 0xff);\n    modifiedValue = (modifiedValue >> (maskedValue & 0xff)) << 1;\n  }\n  result = (inputMask & 0x80000000 | inputValue >> 0x1d) + modifiedValue * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_080009fc",
                "param_1": "inputValue",
                "param_2": "inputMask",
                "uVar1": "result",
                "uVar2": "maskedValue",
                "uVar3": "modifiedValue",
                "in_r12": "tempValue",
                "bVar4": "isZero",
                "bVar5": "isValid"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_floating_point_08000aa4",
            "code": "\nuint calculateFloatingPoint_08000aa4(uint exponent,uint significand,undefined4 sign,uint roundingMode)\n\n{\n  int exponentShifted;\n  int shiftedSignificand;\n  uint tempSignificand;\n  uint tempSignificandShifted;\n  uint result;\n  uint shiftCount;\n  uint difference;\n  bool isEqual;\n  \n  tempSignificand = significand ^ 0x80000000;\n  result = exponent << 1;\n  isEqual = result == 0;\n  if (!isEqual) {\n    roundingMode = significand << 1;\n    isEqual = roundingMode == 0;\n  }\n  if (!isEqual) {\n    isEqual = result == roundingMode;\n  }\n  exponentShifted = (int)result >> 0x18;\n  if (!isEqual) {\n    isEqual = exponentShifted == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)roundingMode >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedSignificand = (int)(significand << 1) >> 0x18;\n    if (exponentShifted == -1 || shiftedSignificand == -1) {\n      result = tempSignificand;\n      if (exponentShifted == -1) {\n        result = exponent;\n      }\n      if (exponentShifted != -1 || shiftedSignificand != -1) {\n        tempSignificand = result;\n      }\n      isEqual = (result & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (tempSignificand & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = result == tempSignificand;\n      }\n      if (!isEqual) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((exponent ^ tempSignificand) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        exponent = tempSignificand;\n      }\n      return exponent;\n    }\n    if (exponent != tempSignificand) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      tempSignificand = exponent << 1;\n      if ((exponent & 0x80000000) != 0) {\n        tempSignificand = tempSignificand | 0x80000000;\n      }\n      return tempSignificand;\n    }\n    if (result < 0xfe000000) {\n      return exponent + 0x800000;\n    }\n    exponent = exponent & 0x80000000;\nLAB_08000bde:\n    return exponent | 0x7f800000;\n  }\n  result = result >> 0x18;\n  roundingMode = roundingMode >> 0x18;\n  difference = roundingMode - result;\n  isEqual = difference != 0;\n  shiftCount = result;\n  if (isEqual && result <= roundingMode) {\n    shiftCount = result + difference;\n  }\n  if (isEqual && result <= roundingMode) {\n    tempSignificand = tempSignificand ^ exponent;\n  }\n  if (isEqual && result <= roundingMode) {\n    exponent = exponent ^ tempSignificand;\n  }\n  if (isEqual && result <= roundingMode) {\n    tempSignificand = tempSignificand ^ exponent;\n  }\n  if (roundingMode < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return exponent;\n  }\n  result = exponent & 0xffffff | 0x800000;\n  if ((exponent & 0x80000000) != 0) {\n    result = -result;\n  }\n  tempSignificandShifted = tempSignificand & 0xffffff | 0x800000;\n  if ((tempSignificand & 0x80000000) != 0) {\n    tempSignificandShifted = -tempSignificandShifted;\n  }\n  if (shiftCount == difference) {\n    tempSignificandShifted = tempSignificandShifted ^ 0x800000;\n    if (shiftCount == 0) {\n      result = result ^ 0x800000;\n      shiftCount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)tempSignificandShifted >> (difference & 0xff));\n  tempSignificandShifted = tempSignificandShifted << (0x20 - difference & 0xff);\n  exponent = result & 0x80000000;\n  if ((int)result < 0) {\n    isEqual = tempSignificandShifted != 0;\n    tempSignificandShifted = -tempSignificandShifted;\n    result = -result - (uint)isEqual;\n  }\n  if (result < 0x800000) {\n    tempSignificand = tempSignificandShifted & 0x80000000;\n    tempSignificandShifted = tempSignificandShifted << 1;\n    result = result * 2 + (uint)(tempSignificand != 0);\n    tempSignificand = shiftCount - 2;\n    if ((result & 0x800000) == 0) {\n      difference = LZCOUNT(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)tempSignificand < (int)difference) {\n        result = result >> (-(tempSignificand - difference) & 0xff);\n      }\n      else {\n        result = result + (tempSignificand - difference) * 0x800000;\n      }\n      return result | exponent;\n    }\n  }\n  else {\n    tempSignificand = shiftCount - 1;\n    if (0xffffff < result) {\n      tempSignificand = result & 1;\n      result = result >> 1;\n      tempSignificandShifted = (uint)(tempSignificand != 0) << 0x1f | tempSignificandShifted >> 1;\n      tempSignificand = shiftCount;\n      if (0xfd < shiftCount) goto LAB_08000bde;\n    }\n  }\n  result = result + tempSignificand * 0x800000 + (uint)(0x7fffffff < tempSignificandShifted);\n  if (tempSignificandShifted == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | exponent;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_floating_point_08000aa4",
                "param_1": "exponent",
                "param_2": "significand",
                "param_3": "sign",
                "param_4": "roundingMode",
                "iVar1": "exponentShifted",
                "iVar2": "shiftedSignificand",
                "uVar3": "tempSignificand",
                "uVar4": "tempSignificandShifted",
                "uVar5": "result",
                "uVar6": "shiftCount",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_float_08000aa8",
            "code": "\nuint calculateFloat_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shift;\n  int shift2;\n  uint result1;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool isZero;\n  \n  temp1 = input1 << 1;\n  isZero = temp1 == 0;\n  if (!isZero) {\n    input4 = input2 << 1;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp1 == input4;\n  }\n  shift = (int)temp1 >> 0x18;\n  if (!isZero) {\n    isZero = shift == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shift2 = (int)(input2 << 1) >> 0x18;\n    if (shift == -1 || shift2 == -1) {\n      temp1 = input2;\n      if (shift == -1) {\n        temp1 = input1;\n      }\n      if (shift != -1 || shift2 != -1) {\n        input2 = temp1;\n      }\n      isZero = (temp1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp1 == input2;\n      }\n      if (!isZero) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  isZero = difference != 0;\n  temp2 = temp1;\n  if (isZero && temp1 <= input4) {\n    temp2 = temp1 + difference;\n  }\n  if (isZero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    temp1 = -temp1 - (uint)isZero;\n  }\n  if (temp1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    temp1 = temp1 * 2 + (uint)(difference != 0);\n    difference = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)difference < (int)temp2) {\n        temp1 = temp1 >> (-(difference - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (difference - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    difference = temp2 - 1;\n    if (0xffffff < temp1) {\n      difference = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp2;\n      if (0xfd < temp2) goto LAB_08000bde;\n    }\n  }\n  temp1 = temp1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift",
                "iVar2": "shift2",
                "uVar3": "result1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "difference",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_unsigned_value_08000c08",
            "code": "\nuint calculateUnsignedValue_08000c08(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftValue;\n  int offset;\n  uint additionalValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputValue);\n  shiftValue = leadingZeroes - 8;\n  offset = shiftValue * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    additionalValue = 0 << (shiftValue & 0xff);\n    leadingZeroes = offset + (inputValue << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < additionalValue);\n    if (additionalValue == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  shiftValue = inputValue << leadingZeroes + 0x18;\n  leadingZeroes = offset + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(shiftValue >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_unsigned_value_08000c08",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftValue",
                "iVar3": "offset",
                "uVar4": "additionalValue"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "calculate_modified_value_08000c10",
            "code": "\nuint calculateModifiedValue_08000c10(uint value)\n\n{\n  uint leadingZeros;\n  uint shift;\n  uint isNegative;\n  int modifiedValue;\n  \n  isNegative = value & 0x80000000;\n  if ((int)isNegative < 0) {\n    value = -value;\n  }\n  if (value == 0) {\n    return 0;\n  }\n  leadingZeros = getLeadingZeros(value);\n  shift = leadingZeros - 8;\n  modifiedValue = ((isNegative | 0x4b000000) - 0x800000) + shift * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shift & 0xff);\n    isNegative = modifiedValue + (value << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shift = value << leadingZeros + 0x18;\n  isNegative = modifiedValue + ((value >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shift >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "calculate_modified_value_08000c10",
                "param_1": "value",
                "uVar1": "leadingZeros",
                "uVar2": "shift",
                "uVar3": "isNegative",
                "iVar4": "modifiedValue",
                "LZCOUNT": "getLeadingZeros"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_08000cb8",
            "code": "\nuint calculateFloatingPoint_08000cb8(uint operand1,uint operand2,undefined4 unused,uint operand3)\n\n{\n  longlong product;\n  uint result;\n  uint shift1;\n  int sum1;\n  int sum2;\n  uint shiftedProduct;\n  int shift2;\n  uint resultWithSign;\n  bool flag1;\n  bool flag2;\n  \n  shift1 = operand1 >> 0x17 & 0xff;\n  flag1 = shift1 == 0;\n  if (!flag1) {\n    operand3 = operand2 >> 0x17 & 0xff;\n    flag1 = operand3 == 0;\n  }\n  if (!flag1) {\n    flag1 = shift1 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = operand3 == 0xff;\n  }\n  if (flag1) {\n    operand3 = operand2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || operand3 == 0xff) {\n      flag1 = operand1 == 0 || operand1 == 0x80000000;\n      result = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        flag1 = operand2 == 0;\n        result = operand1;\n      }\n      if (!flag1) {\n        flag1 = operand2 == 0x80000000;\n      }\n      resultWithSign = result;\n      if (((flag1) || ((shift1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((operand3 == 0xff && (resultWithSign = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return resultWithSign | 0x7fc00000;\n      }\n      result = result ^ operand2;\n      goto LAB_08000e08;\n    }\n    flag1 = (operand1 & 0x7fffffff) == 0;\n    if (!flag1) {\n      flag1 = (operand2 & 0x7fffffff) == 0;\n    }\n    if (flag1) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    flag1 = shift1 == 0;\n    result = operand1 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        operand1 = operand1 << 1;\n        flag1 = (operand1 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      shift1 = shift1 - 1;\n    }\n    operand1 = operand1 | result;\n    flag1 = operand3 == 0;\n    result = operand2 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        operand2 = operand2 << 1;\n        flag1 = (operand2 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      operand3 = operand3 - 1;\n    }\n    operand2 = operand2 | result;\n  }\n  sum1 = shift1 + operand3;\n  resultWithSign = operand1 ^ operand2;\n  shift1 = operand1 << 9;\n  flag1 = shift1 == 0;\n  if (!flag1) {\n    operand2 = operand2 << 9;\n    flag1 = operand2 == 0;\n  }\n  if (flag1) {\n    if (shift1 == 0) {\n      operand2 = operand2 << 9;\n    }\n    result = resultWithSign & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    flag2 = SBORROW4(sum1,0x7f);\n    sum2 = sum1 + -0x7f;\n    flag1 = sum2 == 0;\n    shift2 = sum2;\n    if (!flag1 && 0x7e < sum1) {\n      flag2 = SBORROW4(0xff,sum2);\n      shift2 = 0xff - sum2;\n      flag1 = sum2 == 0xff;\n    }\n    if (!flag1 && shift2 < 0 == flag2) {\n      result = result | sum2 * 0x800000;\n    }\n    if (!flag1 && shift2 < 0 == flag2) {\n      return result;\n    }\n    result = result | 0x800000;\n    shiftedProduct = 0;\n    flag2 = SBORROW4(sum2,1);\n    resultWithSign = sum1 - 0x80;\n    flag1 = resultWithSign == 0;\n    shift1 = resultWithSign;\n  }\n  else {\n    product = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    shiftedProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    flag1 = result < 0x800000;\n    if (flag1) {\n      result = result << 1;\n    }\n    if (flag1) {\n      result = result | shiftedProduct >> 0x1f;\n      shiftedProduct = shiftedProduct << 1;\n    }\n    result = resultWithSign & 0x80000000 | result;\n    resultWithSign = (sum1 + -0x7f) - (uint)flag1;\n    flag2 = SBORROW4(resultWithSign,0xfd);\n    flag1 = resultWithSign == 0xfd;\n    shift1 = resultWithSign - 0xfd;\n    if (resultWithSign < 0xfe) {\n      result = result + resultWithSign * 0x800000 + (uint)(0x7fffffff < shiftedProduct);\n      if (shiftedProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (flag1 || (int)shift1 < 0 != flag2) {\n    flag1 = (int)(resultWithSign + 0x19) < 0;\n    if (resultWithSign == 0xffffffe7 || flag1 != SCARRY4(resultWithSign,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (resultWithSign != 0xffffffe7 && flag1 == SCARRY4(resultWithSign,0x19)) {\n      shift1 = (result << 1) >> (-resultWithSign & 0xff);\n      resultWithSign = result << (resultWithSign + 0x20 & 0xff);\n      shift1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((shiftedProduct | resultWithSign << 1) == 0) {\n        shift1 = shift1 & ~(resultWithSign >> 0x1f);\n      }\n      return shift1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_08000cb8",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "unused",
                "param_4": "operand3",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shift1",
                "iVar4": "sum1",
                "iVar5": "sum2",
                "uVar6": "shiftedProduct",
                "iVar7": "shift2",
                "uVar8": "resultWithSign",
                "bVar9": "flag1",
                "bVar10": "flag2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_float_from_uint_08000e20",
            "code": "\nuint calculate_float_from_uint_08000e20(uint mantissa,uint exponent,undefined4 sign,uint rounding)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp3;\n  int temp4;\n  uint result;\n  bool check1;\n  bool check2;\n  bool check3;\n  \n  temp2 = mantissa >> 0x17 & 0xff;\n  check1 = temp2 == 0;\n  if (!check1) {\n    rounding = exponent >> 0x17 & 0xff;\n    check1 = rounding == 0;\n  }\n  if (!check1) {\n    check1 = temp2 == 0xff;\n  }\n  if (!check1) {\n    check1 = rounding == 0xff;\n  }\n  if (check1) {\n    rounding = exponent >> 0x17 & 0xff;\n    result = mantissa;\n    if (temp2 == 0xff) {\n      if (((mantissa & 0x7fffff) != 0) || (result = exponent, rounding == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (rounding == 0xff) {\n        result = exponent;\n        if ((exponent & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (mantissa ^ exponent) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      check1 = (mantissa & 0x7fffffff) == 0;\n      if (!check1) {\n        check1 = (exponent & 0x7fffffff) == 0;\n      }\n      if (!check1) {\n        check1 = temp2 == 0;\n        result = mantissa & 0x80000000;\n        while( true ) {\n          if (check1) {\n            mantissa = mantissa << 1;\n            check1 = (mantissa & 0x800000) == 0;\n          }\n          if (!check1) break;\n          temp2 = temp2 - 1;\n        }\n        mantissa = mantissa | result;\n        check1 = rounding == 0;\n        result = exponent & 0x80000000;\n        while( true ) {\n          if (check1) {\n            exponent = exponent << 1;\n            check1 = (exponent & 0x800000) == 0;\n          }\n          if (!check1) break;\n          rounding = rounding - 1;\n        }\n        exponent = exponent | result;\n        goto LAB_08000e38;\n      }\n      if ((mantissa & 0x7fffffff) == 0) {\n        if ((exponent & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    mantissa = mantissa ^ exponent;\n  }\n  else {\nLAB_08000e38:\n    difference = temp2 - rounding;\n    if (exponent << 9 == 0) {\n      mantissa = (mantissa ^ exponent) & 0x80000000 | mantissa & 0x7fffff;\n      check3 = SCARRY4(difference,0x7f);\n      temp4 = difference + 0x7f;\n      check1 = temp4 < 0;\n      check2 = temp4 == 0;\n      if (!check2 && check1 == check3) {\n        check3 = SBORROW4(0xff,temp4);\n        check1 = 0xff - temp4 < 0;\n        check2 = temp4 == 0xff;\n      }\n      if (!check2 && check1 == check3) {\n        mantissa = mantissa | temp4 * 0x800000;\n      }\n      if (!check2 && check1 == check3) {\n        return mantissa;\n      }\n      mantissa = mantissa | 0x800000;\n      temp2 = 0;\n      check2 = SBORROW4(temp4,1);\n      temp3 = difference + 0x7e;\n      check1 = temp3 == 0;\n      result = temp3;\n    }\n    else {\n      temp1 = (exponent << 9) >> 4 | 0x10000000;\n      temp2 = (mantissa << 9) >> 4 | 0x10000000;\n      mantissa = (mantissa ^ exponent) & 0x80000000;\n      check1 = temp1 <= temp2;\n      if (!check1) {\n        temp2 = temp2 << 1;\n      }\n      temp3 = difference + 0x7d + (uint)check1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          mantissa = mantissa | result;\n        }\n        check1 = temp1 >> 1 <= temp2;\n        if (check1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (check1) {\n          mantissa = mantissa | result >> 1;\n        }\n        check1 = temp1 >> 2 <= temp2;\n        if (check1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (check1) {\n          mantissa = mantissa | result >> 2;\n        }\n        check1 = temp1 >> 3 <= temp2;\n        if (check1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (check1) {\n          mantissa = mantissa | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        check1 = temp2 == 0;\n        if (!check1) {\n          result = result >> 4;\n          check1 = result == 0;\n        }\n      } while (!check1);\n      check2 = SBORROW4(temp3,0xfd);\n      check1 = temp3 == 0xfd;\n      result = temp3 - 0xfd;\n      if (temp3 < 0xfe) {\n        mantissa = mantissa + temp3 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          mantissa = mantissa & 0xfffffffe;\n        }\n        return mantissa;\n      }\n    }\n    if (check1 || (int)result < 0 != check2) {\n      check1 = (int)(temp3 + 0x19) < 0;\n      if (temp3 == 0xffffffe7 || check1 != SCARRY4(temp3,0x19)) {\n        mantissa = mantissa & 0x80000000;\n      }\n      if (temp3 == 0xffffffe7 || check1 != SCARRY4(temp3,0x19)) {\n        return mantissa;\n      }\n      result = (mantissa << 1) >> (-temp3 & 0xff);\n      temp3 = mantissa << (temp3 + 0x20 & 0xff);\n      result = ((uint)((mantissa & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp3 << 1) == 0) {\n        result = result & ~(temp3 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return mantissa & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_float_from_uint_08000e20",
                "param_1": "mantissa",
                "param_2": "exponent",
                "param_3": "sign",
                "param_4": "rounding",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "difference",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "result",
                "bVar7": "check1",
                "bVar8": "check2",
                "bVar9": "check3"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_x_or_y_08000f68",
            "code": "\nuint calculate_x_or_y_08000f68(uint x,uint y)\n\n{\n  bool is_negative;\n  uint x_times_two;\n  uint y_times_two;\n  uint result;\n  bool is_zero;\n  \n  x_times_two = x * 2;\n  y_times_two = y * 2;\n  if (((int)x_times_two >> 0x18 == -1 || (int)y_times_two >> 0x18 == -1) &&\n     ((((int)x_times_two >> 0x18 == -1 && ((x & 0x7fffff) != 0)) ||\n      (((int)y_times_two >> 0x18 == -1 && ((y & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  result = x_times_two | y & 0x7fffffff;\n  is_zero = result == 0;\n  if (!is_zero) {\n    result = x ^ y;\n    is_zero = result == 0;\n  }\n  is_negative = -1 < (int)result;\n  if (is_negative) {\n    x = x_times_two + y * -2;\n    is_zero = x == 0;\n  }\n  if ((is_negative && y_times_two <= x_times_two) && !is_zero) {\n    x = (int)y >> 0x1f;\n  }\n  if (!is_negative || y_times_two > x_times_two) {\n    x = ~((int)y >> 0x1f);\n  }\n  if (!is_zero) {\n    x = x | 1;\n  }\n  return x;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_x_or_y_08000f68",
                "param_1": "x",
                "param_2": "y",
                "uVar2": "x_times_two",
                "uVar3": "y_times_two",
                "uVar4": "result",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "concatenate_parameters_08000fc8",
            "code": "\nvoid concatenateParameters_08000fc8(undefined4 dest,undefined4 src)\n\n{\n  concatenate_parameters_08000fd0(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "concatenate_parameters_08000fc8",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_parameters_08000fd0",
            "code": "\nundefined8 concatenateParameters_08000fd0(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  calculateXorY();\n  return concatenate(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_parameters_08000fd0",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "calculate_x_or_y_08000f68": "calculateXorY",
                "CONCAT44": "concatenate"
            },
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "is_string_empty_08000ff4",
            "code": "\nbool isStringEmpty_08000ff4(void)\n\n{\n  char inputChar;\n  \n  concatenate_parameters_08000fd0();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "is_string_empty_08000ff4",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_if_concatenation_empty_08001030",
            "code": "\nbool check_if_concatenation_empty_08001030(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_if_concatenation_empty_08001030",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "validate_input_08001044",
            "code": "\nuint validateInput_08001044(uint inputValue)\n\n{\n  uint result;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (inputValue << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "validate_input_08001044",
                "param_1": "inputValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_and_advance_pointer_08001084",
            "code": "\nundefined4 * copyAndAdvancePointer_08001084(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempDestPtr;\n  uint remainingSize;\n  uint tempSize;\n  bool isRemainingSizeNonZero;\n  \n  srcPtr = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      tempSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          tempDestPtr = srcPtr;\n          isRemainingSizeNonZero = tempSize != 0;\n          tempSize = tempSize - 1;\n          *(undefined *)tempDestPtr = *(undefined *)destPtr;\n          srcPtr = (undefined4 *)((int)tempDestPtr + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (isRemainingSizeNonZero);\n        *(undefined *)(undefined4 *)((int)tempDestPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)tempDestPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)tempDestPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      tempSize = 4 - ((uint)dest & 3);\n      size = size - tempSize;\n      destPtr = dest;\n      tempDestPtr = src;\n      if (((uint)dest & 1) != 0) {\n        tempDestPtr = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      srcPtr = destPtr;\n      src = tempDestPtr;\n      if ((tempSize & 2) != 0) {\n        src = (undefined4 *)((int)tempDestPtr + 2);\n        srcPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)tempDestPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *srcPtr = *src;\n    srcPtr[1] = src[1];\n    srcPtr[2] = src[2];\n    srcPtr[3] = src[3];\n    srcPtr[4] = src[4];\n    srcPtr[5] = src[5];\n    srcPtr[6] = src[6];\n    srcPtr[7] = src[7];\n    srcPtr[8] = src[8];\n    srcPtr[9] = src[9];\n    srcPtr[10] = src[10];\n    srcPtr[0xb] = src[0xb];\n    srcPtr[0xc] = src[0xc];\n    srcPtr[0xd] = src[0xd];\n    srcPtr[0xe] = src[0xe];\n    srcPtr[0xf] = src[0xf];\n    srcPtr = srcPtr + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *srcPtr = *src;\n      srcPtr[1] = src[1];\n      srcPtr[2] = src[2];\n      srcPtr[3] = src[3];\n      srcPtr = srcPtr + 4;\n      src = src + 4;\n      isRemainingSizeNonZero = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemainingSizeNonZero);\n  }\n  tempSize = remainingSize + 0xc;\n  tempDestPtr = srcPtr;\n  destPtr = src;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      src = destPtr + 1;\n      *tempDestPtr = *destPtr;\n      isRemainingSizeNonZero = 3 < tempSize;\n      tempSize = tempSize - 4;\n      srcPtr = tempDestPtr + 1;\n      tempDestPtr = tempDestPtr + 1;\n      destPtr = src;\n    } while (isRemainingSizeNonZero);\n  }\nLAB_08001108:\n  if (tempSize + 4 != 0) {\n    destPtr = srcPtr;\n    tempDestPtr = src;\n    if ((tempSize & 1) != 0) {\n      tempDestPtr = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)src;\n    }\n    if ((tempSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)tempDestPtr;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_and_advance_pointer_08001084",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "puVar3": "tempDestPtr",
                "uVar4": "remainingSize",
                "uVar5": "tempSize",
                "bVar6": "isRemainingSizeNonZero"
            },
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_parameters_08001170",
            "code": "\nundefined4 check_parameters_08001170(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_parameters_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_result_0800119c",
            "code": "\nuint calculate_result_0800119c(uint input_1,uint input_2)\n\n{\n  uint result_1;\n  int result_2;\n  uint result_3;\n  \n  result_2 = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < result_2) {\n      return 0;\n    }\n    result_1 = result_2 >> 0x15;\n    result_3 = -result_1 - 0x3e1;\n    if (result_1 < 0xfffffc20 && result_3 != 0) {\n      result_1 = (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (result_3 & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        result_1 = -result_1;\n      }\n      return result_1;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0) {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_result_0800119c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result_1",
                "iVar2": "result_2",
                "uVar3": "result_3"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "calculate_result_080011ec",
            "code": "\nundefined8 calculate_result_080011ec(int input1,int input2,int condition1,int condition2)\n\n{\n  undefined8 result;\n  \n  if ((condition2 == 0) && (condition1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = calculate_division_and_remainder_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition1",
                "param_4": "condition2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_division_and_remainder_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculateDivisionAndRemainder_0800121c(uint dividend,uint dividendLow,uint divisor,uint divisorLow,uint *remainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong mulResult;\n  uint quotient;\n  uint quotientLow;\n  uint temp;\n  int shiftAmount;\n  uint quotientDividendLow;\n  uint divisorShifted;\n  uint tempResult;\n  uint *remainderPtr;\n  uint quotientDividend;\n  uint divisorDividend;\n  uint tempResultHigh;\n  bool carry;\n  undefined8 returnValue;\n  \n  if (divisorLow == 0) {\n    if (dividendLow < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      divisorShifted = divisor;\n      if (shiftAmount != 0) {\n        divisorShifted = divisor << shiftAmount;\n        dividendLow = dividend >> (0x20U - shiftAmount & 0xff) | dividendLow << shiftAmount;\n        dividend = dividend << shiftAmount;\n      }\n      divisorDividend = divisorShifted >> 0x10;\n      tempResult = dividendLow / divisorDividend;\n      quotientDividend = tempResult * (divisorShifted & 0xffff);\n      quotientDividendLow = dividend >> 0x10 | (dividendLow - divisorDividend * tempResult) * 0x10000;\n      quotientLow = tempResult;\n      if (quotientDividendLow <= quotientDividend && quotientDividend - quotientDividendLow != 0) {\n        carry = CARRY4(divisorShifted,quotientDividendLow);\n        quotientDividendLow = divisorShifted + quotientDividendLow;\n        quotientLow = tempResult - 1;\n        if ((carry == false) && (quotientDividendLow <= quotientDividend && quotientDividend - quotientDividendLow != 0)) {\n          quotientLow = tempResult - 2;\n          quotientDividendLow = quotientDividendLow + divisorShifted;\n        }\n      }\n      quotient = (quotientDividendLow - quotientDividend) / divisorDividend;\n      temp = quotient * (divisorShifted & 0xffff);\n      tempResult = dividend & 0xffff | ((quotientDividendLow - quotientDividend) - divisorDividend * quotient) * 0x10000;\n      quotientDividendLow = quotient;\n      if (tempResult <= temp && temp - tempResult != 0) {\n        carry = CARRY4(divisorShifted,tempResult);\n        tempResult = divisorShifted + tempResult;\n        quotientDividendLow = quotient - 1;\n        if ((carry == false) && (tempResult <= temp && temp - tempResult != 0)) {\n          quotientDividendLow = quotient - 2;\n          tempResult = tempResult + divisorShifted;\n        }\n      }\n      quotientDividendLow = quotientDividendLow | quotientLow << 0x10;\n      remainderPtr = (uint *)0x0;\n      tempResult = tempResult - temp;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        returnValue = (*UNRECOVERED_JUMPTABLE)();\n        return returnValue;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        remainderPtr = (uint *)0x1;\n        dividendLow = dividendLow - divisor;\n        divisorDividend = divisor >> 0x10;\n        quotient = divisor & 0xffff;\n        divisorShifted = divisor;\n      }\n      else {\n        divisorShifted = divisor << shiftAmount;\n        quotientDividendLow = dividendLow >> (0x20U - shiftAmount & 0xff);\n        divisorDividend = divisorShifted >> 0x10;\n        quotientDividend = quotientDividendLow / divisorDividend;\n        quotient = divisorShifted & 0xffff;\n        temp = quotientDividend * quotient;\n        tempResult = dividend >> (0x20U - shiftAmount & 0xff) | dividendLow << shiftAmount;\n        quotientLow = tempResult >> 0x10 | (quotientDividendLow - divisorDividend * quotientDividend) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotientDividendLow = quotientDividend;\n        if (quotientLow <= temp && temp - quotientLow != 0) {\n          carry = CARRY4(divisorShifted,quotientLow);\n          quotientLow = divisorShifted + quotientLow;\n          quotientDividendLow = quotientDividend - 1;\n          if ((carry == false) && (quotientLow <= temp && temp - quotientLow != 0)) {\n            quotientDividendLow = quotientDividend - 2;\n            quotientLow = quotientLow + divisorShifted;\n          }\n        }\n        quotientDividend = (quotientLow - temp) / divisorDividend;\n        tempResultHigh = quotientDividend * quotient;\n        dividendLow = tempResult & 0xffff | ((quotientLow - temp) - divisorDividend * quotientDividend) * 0x10000;\n        quotientLow = quotientDividend;\n        if (dividendLow <= tempResultHigh && tempResultHigh - dividendLow != 0) {\n          carry = CARRY4(divisorShifted,dividendLow);\n          dividendLow = divisorShifted + dividendLow;\n          quotientLow = quotientDividend - 1;\n          if ((carry == false) && (dividendLow <= tempResultHigh && tempResultHigh - dividendLow != 0)) {\n            quotientLow = quotientDividend - 2;\n            dividendLow = dividendLow + divisorShifted;\n          }\n        }\n        dividendLow = dividendLow - tempResultHigh;\n        remainderPtr = (uint *)(quotientLow | quotientDividendLow << 0x10);\n      }\n      quotientDividend = dividendLow / divisorDividend;\n      quotientDividendLow = quotient * quotientDividend;\n      tempResult = dividend >> 0x10 | (dividendLow - divisorDividend * quotientDividend) * 0x10000;\n      quotientLow = quotientDividend;\n      if (tempResult <= quotientDividendLow && quotientDividendLow - tempResult != 0) {\n        carry = CARRY4(divisorShifted,tempResult);\n        tempResult = divisorShifted + tempResult;\n        quotientLow = quotientDividend - 1;\n        if ((carry == false) && (tempResult <= quotientDividendLow && quotientDividendLow - tempResult != 0)) {\n          quotientLow = quotientDividend - 2;\n          tempResult = tempResult + divisorShifted;\n        }\n      }\n      quotientDividend = (tempResult - quotientDividendLow) / divisorDividend;\n      quotient = quotient * quotientDividend;\n      tempResult = dividend & 0xffff | ((tempResult - quotientDividendLow) - divisorDividend * quotientDividend) * 0x10000;\n      quotientDividendLow = quotientDividend;\n      if (tempResult <= quotient && quotient - tempResult != 0) {\n        carry = CARRY4(divisorShifted,tempResult);\n        tempResult = divisorShifted + tempResult;\n        quotientDividendLow = quotientDividend - 1;\n        if ((carry == false) && (tempResult <= quotient && quotient - tempResult != 0)) {\n          quotientDividendLow = quotientDividend - 2;\n          tempResult = tempResult + divisorShifted;\n        }\n      }\n      tempResult = tempResult - quotient;\n      quotientDividendLow = quotientDividendLow | quotientLow << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = tempResult >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    remainderPtr = remainder;\n    if (dividendLow < divisorLow) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = dividendLow;\n        return 0;\n      }\n      quotientDividendLow = 0;\n    }\n    else {\n      shiftAmount = LZCOUNT(divisorLow);\n      if (shiftAmount == 0) {\n        if ((divisorLow < dividendLow) || (divisor <= dividend)) {\n          carry = dividend < divisor;\n          dividend = dividend - divisor;\n          dividendLow = (dividendLow - divisorLow) - (uint)carry;\n          quotientDividendLow = 1;\n        }\n        else {\n          quotientDividendLow = 0;\n        }\n        remainderPtr = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = dividendLow;\n        }\n      }\n      else {\n        tempResult = 0x20 - shiftAmount;\n        quotient = divisor >> (tempResult & 0xff) | divisorLow << shiftAmount;\n        divisorShifted = dividendLow >> (tempResult & 0xff);\n        temp = quotient >> 0x10;\n        quotientDividend = divisorShifted / temp;\n        divisorDividend = quotientDividend * (quotient & 0xffff);\n        quotientDividendLow = dividendLow << shiftAmount | dividend >> (tempResult & 0xff);\n        quotientLow = quotientDividendLow >> 0x10 | (divisorShifted - temp * quotientDividend) * 0x10000;\n        dividend = dividend << shiftAmount;\n        divisorShifted = quotientDividend;\n        if (quotientLow <= divisorDividend && divisorDividend - quotientLow != 0) {\n          carry = CARRY4(quotient,quotientLow);\n          quotientLow = quotient + quotientLow;\n          divisorShifted = quotientDividend - 1;\n          if ((carry == false) && (quotientLow <= divisorDividend && divisorDividend - quotientLow != 0)) {\n            divisorShifted = quotientDividend - 2;\n            quotientLow = quotientLow + quotient;\n          }\n        }\n        quotientDividend = (quotientLow - divisorDividend) / temp;\n        tempResultHigh = quotientDividend * (quotient & 0xffff);\n        quotientLow = quotientDividendLow & 0xffff | ((quotientLow - divisorDividend) - temp * quotientDividend) * 0x10000;\n        quotientDividendLow = quotientDividend;\n        if (quotientLow <= tempResultHigh && tempResultHigh - quotientLow != 0) {\n          carry = CARRY4(quotient,quotientLow);\n          quotientLow = quotient + quotientLow;\n          quotientDividendLow = quotientDividend - 1;\n          if ((carry == false) && (quotientLow <= tempResultHigh && tempResultHigh - quotientLow != 0)) {\n            quotientDividendLow = quotientDividend - 2;\n            quotientLow = quotientLow + quotient;\n          }\n        }\n        quotientDividendLow = quotientDividendLow | divisorShifted << 0x10;\n        mulResult = (ulonglong)quotientDividendLow * (ulonglong)(divisor << shiftAmount);\n        if (CONCAT44(quotientLow - tempResultHigh,dividend) < mulResult) {\n          quotientDividendLow = quotientDividendLow - 1;\n          mulResult = mulResult - CONCAT44(quotient,divisor << shiftAmount);\n        }\n        if (remainder != (uint *)0x0) {\n          divisorShifted = ((quotientLow - tempResultHigh) - (int)(mulResult >> 0x20)) - (uint)(dividend < (uint)mulResult);\n          *remainder = divisorShifted << (tempResult & 0xff) | dividend - (uint)mulResult >> shiftAmount;\n          remainder[1] = divisorShifted >> shiftAmount;\n          remainderPtr = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(remainderPtr,quotientDividendLow);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_division_and_remainder_0800121c",
                "param_1": "dividend",
                "param_2": "dividendLow",
                "param_3": "divisor",
                "param_4": "divisorLow",
                "param_5": "remainder",
                "uVar1": "mulResult",
                "uVar2": "quotient",
                "uVar3": "quotientLow",
                "uVar4": "temp",
                "iVar5": "shiftAmount",
                "uVar6": "quotientDividendLow",
                "uVar7": "divisorShifted",
                "uVar8": "tempResult",
                "uVar10": "quotientDividend",
                "uVar11": "divisorDividend",
                "uVar12": "tempResultHigh",
                "bVar13": "carry",
                "uVar14": "returnValue",
                "puVar9": "remainderPtr"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "configure_memory_and_save_080014f0",
            "code": "\n\n\nundefined4 configureMemoryAndSave_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  initializeMemoryConfiguration(3);\n  validateAndSave(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "configure_memory_and_save_080014f0",
                "initialize_memory_configuration_08001714": "initializeMemoryConfiguration",
                "validate_and_save_0800151c": "validateAndSave"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "validate_and_save_0800151c",
            "code": "\nundefined4 validateAndSave_0800151c(uint value)\n\n{\n  int validationResult;\n  undefined4 returnValue;\n  \n  validationResult = validate_and_return_value_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (validationResult == 0) {\n    if (value < 0x10) {\n      save_parameter_value_to_memory_0800172a(0xffffffff,value,0);\n      returnValue = 0;\n      DAT_20000000 = value;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "validate_and_save_0800151c",
                "param_1": "value",
                "iVar1": "validationResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increase_data_by_value_0800157c",
            "code": "\nvoid increaseDataByValue_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increase_data_by_value_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_value_080015a0",
            "code": "\nundefined4 get_data_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_value_080015a0"
            },
            "calling": [
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08001f6c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_memory_configuration_080015b4",
            "code": "\n\n\nvoid setMemoryConfiguration_080015b4(uint memoryConfig)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (memoryConfig & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_memory_configuration_080015b4",
                "param_1": "memoryConfig"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_bits_from_register_080015fc",
            "code": "\n\n\nuint getBitsFromRegister_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "save_parameter_value_to_memory_08001618",
            "code": "\nvoid saveParameterValueToMemory_08001618(byte byteValue,uint uintValue)\n\n{\n  if (characterValue1 < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((uintValue & 0xff) << 4);\n  }\n  else {\n    *(char *)(characterValue1 + -0x1fff1c00) = (char)((uintValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "save_parameter_value_to_memory_08001618",
                "param_1": "byteValue",
                "param_2": "uintValue",
                "(char)param_1": "characterValue1"
            },
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "apply_bitwise_operations_0800166c",
            "code": "\nuint applyBitwiseOperations_0800166c(uint bitsToShift,uint inputValue,uint outputValue)\n\n{\n  uint numBitsToSet;\n  \n  bitsToShift = bitsToShift & 7;\n  numBitsToSet = 7 - bitsToShift;\n  if (3 < numBitsToSet) {\n    numBitsToSet = 4;\n  }\n  if (bitsToShift + 4 < 7) {\n    bitsToShift = 0;\n  }\n  else {\n    bitsToShift = bitsToShift - 3;\n  }\n  return outputValue & ~(-1 << (bitsToShift & 0xff)) |\n         (~(-1 << (numBitsToSet & 0xff)) & inputValue) << (bitsToShift & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "apply_bitwise_operations_0800166c",
                "param_1": "bitsToShift",
                "param_2": "inputValue",
                "param_3": "outputValue",
                "uVar1": "numBitsToSet"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "validate_parameter_080016d0",
            "code": "\n\n\nbool validateParameter_080016d0(int inputParameter)\n\n{\n  bool isParameterValid;\n  \n  isParameterValid = inputParameter - 1U < 0x1000000;\n  if (isParameterValid) {\n    _DAT_e000e014 = inputParameter + -1;\n    save_parameter_value_to_memory_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isParameterValid;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "validate_parameter_080016d0",
                "param_1": "inputParameter",
                "bVar1": "isParameterValid"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "initialize_memory_configuration_08001714",
            "code": "\nvoid initializeMemoryConfiguration_08001714(undefined4 configurationData)\n\n{\n  setMemoryConfiguration(configurationData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "initialize_memory_configuration_08001714",
                "param_1": "configurationData",
                "set_memory_configuration_080015b4": "setMemoryConfiguration"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "save_parameter_value_to_memory_0800172a",
            "code": "\nvoid saveParameterValueToMemory_0800172a(char character,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 bitsFromRegister;\n  \n  bitsFromRegister = getBitsFromRegister();\n  bitsFromRegister = applyBitwiseOperations(bitsFromRegister,value1,value2);\n  saveParameterValueToMemory_0800172a((int)character,bitsFromRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "save_parameter_value_to_memory_0800172a",
                "param_1": "character",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "bitsFromRegister",
                "get_bits_from_register_080015fc": "getBitsFromRegister",
                "apply_bitwise_operations_0800166c": "applyBitwiseOperations",
                "save_parameter_value_to_memory_08001618": "saveParameterValueToMemory"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "validate_and_return_value_08001762",
            "code": "\nundefined4 validate_and_return_value_08001762(undefined4 input_value)\n\n{\n  undefined4 validated_value;\n  \n  validated_value = validate_parameter_080016d0(input_value);\n  return validated_value;\n}\n\n",
            "renaming": {
                "FUN_08001762": "validate_and_return_value_08001762",
                "param_1": "input_value",
                "uVar1": "validated_value"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flag_based_on_value_0800177c",
            "code": "\n\n\nvoid setFlagBasedOnValue_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flag_based_on_value_0800177c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_process_080017b4",
            "code": "\nvoid initialize_process_080017b4(void)\n\n{\n  process_data(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_process_080017b4",
                "process_data_08004f78": "process_data"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_flag_bits_080017c4",
            "code": "\n\n\nvoid updateFlagBits_080017c4(uint *flags,uint *data)\n\n{\n  uint bitMask;\n  uint maskedBit;\n  uint opcode;\n  uint *flagsPtr;\n  int index;\n  uint valueToSet;\n  uint bitIndex;\n  \n  valueToSet = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    maskedBit = *data & bitMask;\n    if (maskedBit == bitMask) {\n      opcode = data[1];\n      if (opcode == 0x12) {\n        valueToSet = data[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          valueToSet = data[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            valueToSet = data[3];\n          }\n        }\n        else if (opcode == 3) {\n          valueToSet = 0;\n        }\n        else if (opcode == 0x11) {\n          valueToSet = data[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (data[2] == 0) {\n          valueToSet = 4;\n        }\n        else if (data[2] == 1) {\n          valueToSet = 8;\n          flags[4] = bitMask;\n        }\n        else {\n          valueToSet = 8;\n          flags[5] = bitMask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (maskedBit < 0x100) {\n        bitMask = bitIndex << 2;\n        flagsPtr = flags;\n      }\n      else {\n        flagsPtr = flags + 1;\n        bitMask = (bitIndex - 8) * 4;\n      }\n      *flagsPtr = *flagsPtr & ~(0xf << (bitMask & 0xff)) | valueToSet << (bitMask & 0xff);\n      if ((data[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (flags == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (flags == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (flags == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (flags == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bitIndex & 3) << 2) |\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000);\n        if ((data[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~maskedBit & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = maskedBit | _DAT_40010400;\n        }\n        if ((data[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~maskedBit & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = maskedBit | _DAT_40010404;\n        }\n        if ((data[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~maskedBit & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = maskedBit | _DAT_40010408;\n        }\n        if ((data[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~maskedBit & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = maskedBit | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_flag_bits_080017c4",
                "param_1": "flags",
                "param_2": "data",
                "uVar1": "bitMask",
                "uVar2": "maskedBit",
                "uVar3": "opcode",
                "puVar4": "flagsPtr",
                "iVar5": "index",
                "local_10": "valueToSet",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "update_param_data_08001a80",
            "code": "\nvoid updateParamData_08001a80(int dataPointer,ushort newValue,char writeFlag)\n\n{\n  if (writeFlag == '\\0') {\n    *(uint *)(dataPointer + 0x10) = (uint)newValue << 0x10;\n  }\n  else {\n    *(uint *)(dataPointer + 0x10) = (uint)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "update_param_data_08001a80",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "writeFlag"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_value_08001ab0",
            "code": "\nundefined4 calculateValue_08001ab0(uint **param)\n\n{\n  uint shiftedValue;\n  char isValid;\n  undefined4 returnValue;\n  uint tempValue;\n  bool isZero;\n  \n  if (param == (uint **)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)param + 0x3d) == '\\0') {\n      *(undefined *)(param + 0xf) = 0;\n      FUNC_08001cb8(param);\n    }\n    *(undefined *)((int)param + 0x3d) = 0x24;\n    **param = **param & 0xfffffffe;\n    shiftedValue = getShiftedValue();\n    if (param[1] < (uint *)0x186a1) {\n      tempValue = shiftedValue;\n      if (shiftedValue < 2000000) {\n        tempValue = 1;\n      }\n      isValid = (char)tempValue;\n      if (1999999 < shiftedValue) {\n        isValid = '\\0';\n      }\n    }\n    else {\n      tempValue = shiftedValue;\n      if (shiftedValue < 4000000) {\n        tempValue = 1;\n      }\n      isValid = (char)tempValue;\n      if (3999999 < shiftedValue) {\n        isValid = '\\0';\n      }\n    }\n    if (isValid == '\\0') {\n      tempValue = shiftedValue / 1000000;\n      (*param)[1] = tempValue;\n      if ((uint *)0x186a0 < param[1]) {\n        tempValue = (tempValue * 300) / 1000;\n      }\n      (*param)[8] = tempValue + 1;\n      if (param[1] < (uint *)0x186a1) {\n        shiftedValue = (shiftedValue - 1) / (uint)((int)param[1] << 1) + 1 & 0xfff;\n        if (shiftedValue < 4) {\n          shiftedValue = 4;\n        }\n      }\n      else {\n        if (param[2] == (uint *)0x0) {\n          tempValue = (shiftedValue - 1) / (uint)((int)param[1] * 3) + 1 & 0xfff;\n          isZero = tempValue == 0;\n          if (isZero) {\n            tempValue = 1;\n          }\n          isValid = (char)tempValue;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        else {\n          tempValue = (shiftedValue - 1) / (uint)((int)param[1] * 0x19) + 1 & 0xfff;\n          isZero = tempValue == 0;\n          if (isZero) {\n            tempValue = 1;\n          }\n          isValid = (char)tempValue;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        if (isValid == '\\0') {\n          if (param[2] == (uint *)0x0) {\n            shiftedValue = (shiftedValue - 1) / (uint)((int)param[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            shiftedValue = (shiftedValue - 1) / (uint)((int)param[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          shiftedValue = 1;\n        }\n      }\n      (*param)[7] = shiftedValue;\n      **param = (uint)param[8] | (uint)param[7];\n      (*param)[2] = (uint)param[3] | (uint)param[4];\n      (*param)[3] = (uint)param[6] | (uint)param[5];\n      **param = **param | 1;\n      param[0x10] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3e) = 0;\n      returnValue = 0;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_value_08001ab0",
                "param_1": "param",
                "uVar1": "shiftedValue",
                "cVar2": "isValid",
                "uVar3": "returnValue",
                "uVar4": "tempValue",
                "bVar5": "isZero",
                "get_shifted_value_08003518": "getShiftedValue"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocess_data_08001ccc(uint **data_array,undefined2 value_1,undefined2 value_2,undefined2 value_3,uint *flags_array,\n            undefined2 value_4,undefined4 result)\n\n{\n  int data_value_1;\n  int data_value_2;\n  undefined4 return_value;\n  uint *byte_pointer;\n  \n  data_value_1 = get_data_value_080015a0();\n  if (*(char *)((int)data_array + 0x3d) == ' ') {\n    do {\n      if ((~(*data_array)[6] & 2) != 0) {\n        data_value_2 = 0;\n        goto LAB_08001d9c;\n      }\n      data_value_2 = get_data_value_080015a0();\n    } while ((uint)(data_value_2 - data_value_1) < 0x1a);\n    data_array[0xc] = (uint *)0x0;\n    *(undefined *)((int)data_array + 0x3d) = 0x20;\n    *(undefined *)((int)data_array + 0x3e) = 0;\n    *(undefined *)(data_array + 0xf) = 0;\n    data_value_2 = 3;\nLAB_08001d9c:\n    if (data_value_2 == 0) {\n      if (*(char *)(data_array + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data_array + 0xf) = 1;\n        if ((**data_array & 1) != 1) {\n          **data_array = **data_array | 1;\n        }\n        **data_array = **data_array & 0xfffff7ff;\n        *(undefined *)((int)data_array + 0x3d) = 0x21;\n        *(undefined *)((int)data_array + 0x3e) = 0x40;\n        data_array[0x10] = (uint *)0x0;\n        data_array[9] = flags_array;\n        *(undefined2 *)((int)data_array + 0x2a) = value_4;\n        data_array[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data_array + 10) = *(undefined2 *)((int)data_array + 0x2a);\n        data_value_2 = check_and_update_flags_08002640(data_array,value_1,value_2,value_3,result,data_value_1);\n        if (data_value_2 == 0) {\n          while (*(short *)(data_array + 10) != 0) {\n            data_value_2 = check_parameters_08002bb4(data_array,result,data_value_1);\n            if (data_value_2 != 0) {\n              if (data_array[0x10] == (uint *)0x4) {\n                **data_array = **data_array | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_pointer = data_array[9];\n            data_array[9] = (uint *)((int)byte_pointer + 1);\n            (*data_array)[4] = (uint)*(byte *)byte_pointer;\n            *(short *)(data_array + 10) = *(short *)(data_array + 10) + -1;\n            *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n            if ((((*data_array)[5] & 4) == 4) && (*(short *)(data_array + 10) != 0)) {\n              byte_pointer = data_array[9];\n              data_array[9] = (uint *)((int)byte_pointer + 1);\n              (*data_array)[4] = (uint)*(byte *)byte_pointer;\n              *(short *)(data_array + 10) = *(short *)(data_array + 10) + -1;\n              *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n            }\n          }\n          data_value_1 = check_parameter_validity_08002c2e(data_array,result,data_value_1);\n          if (data_value_1 == 0) {\n            **data_array = **data_array | 0x200;\n            *(undefined *)((int)data_array + 0x3d) = 0x20;\n            *(undefined *)((int)data_array + 0x3e) = 0;\n            *(undefined *)(data_array + 0xf) = 0;\n            return_value = 0;\n          }\n          else if (data_array[0x10] == (uint *)0x4) {\n            **data_array = **data_array | 0x200;\n            return_value = 1;\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data_array[0x10] == (uint *)0x4) {\n          *(undefined *)(data_array + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data_array + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "flags_array",
                "param_6": "value_4",
                "param_7": "result",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "uVar3": "return_value",
                "puVar4": "byte_pointer"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **data,undefined2 value1,undefined2 value2,undefined2 value3,uint *buffer,\n            undefined2 value4,uint limit)\n\n{\n  int dataValue;\n  uint tempValue;\n  int returnValue;\n  undefined4 result;\n  uint *ptr;\n  \n  dataValue = getDataValue();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        returnValue = 0;\n        goto LAB_08002040;\n      }\n      returnValue = getDataValue();\n    } while ((uint)(returnValue - dataValue) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    returnValue = 3;\nLAB_08002040:\n    if (returnValue == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = buffer;\n        *(undefined2 *)((int)data + 0x2a) = value4;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        returnValue = updateFlagsAndCheckParams(data,value1,value2,value3,limit,dataValue);\n        if (returnValue == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disableInterrupts();\n            **data = **data | 0x200;\n            enableInterrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disableInterrupts();\n            **data = **data & 0xfffffbff;\n            enableInterrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                returnValue = checkDataValidity(data,limit,dataValue);\n                if (returnValue != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                tempValue = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    returnValue = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((limit == 0xffffffff) ||\n                        ((limit != 0 && (returnValue = getDataValue(), (uint)(returnValue - dataValue) <= limit)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                returnValue = 3;\nLAB_080022fa:\n                if (returnValue != 0) {\n                  return 3;\n                }\n                disableInterrupts();\n                **data = **data | 0x200;\n                tempValue = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableInterrupts();\n                tempValue = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    returnValue = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((limit == 0xffffffff) ||\n                        ((limit != 0 && (returnValue = getDataValue(), (uint)(returnValue - dataValue) <= limit)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                returnValue = 3;\nLAB_08002418:\n                if (returnValue != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disableInterrupts();\n                tempValue = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    returnValue = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((limit == 0xffffffff) ||\n                        ((limit != 0 && (returnValue = getDataValue(), (uint)(returnValue - dataValue) <= limit)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                returnValue = 3;\nLAB_0800250a:\n                if (returnValue != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                tempValue = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableInterrupts();\n                tempValue = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              returnValue = checkDataValidity(data,limit,dataValue);\n              if (returnValue != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              tempValue = (*data)[4];\n              ptr = data[9];\n              data[9] = (uint *)((int)ptr + 1);\n              *(char *)ptr = (char)tempValue;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                tempValue = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "buffer",
                "param_6": "value4",
                "param_7": "limit",
                "iVar1": "dataValue",
                "uVar2": "tempValue",
                "iVar3": "returnValue",
                "uVar4": "result",
                "puVar5": "ptr",
                "get_data_value_080015a0": "getDataValue",
                "update_flags_and_check_parameters_080027f4": "updateFlagsAndCheckParams",
                "check_data_validity_08002ca8": "checkDataValidity",
                "disableIRQinterrupts": "disableInterrupts",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "check_and_update_flags_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\ncheck_and_update_flags_08002640(uint **data,byte flag,undefined2 value,short condition,uint max_value,int current_value)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((max_value == 0xffffffff) ||\n          ((max_value != 0 && (result = get_data_value_080015a0(), (uint)(result - current_value) <= max_value))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_update_flags_08002640_08002ad8(data,0x10002,max_value,current_value);\n    if (result == 0) {\n      result = check_parameters_08002bb4(data,max_value,current_value,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)value;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value >> 8);\n          result = check_parameters_08002bb4(data,max_value,current_value);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value;\n        }\n        returnValue = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "check_and_update_flags_08002640",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "condition",
                "param_5": "max_value",
                "param_6": "current_value",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "update_flags_and_check_parameters_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nupdateFlagsAndCheckParameters_080027f4(uint **pointer,byte byteVal,undefined2 ushortVal,short shortVal,uint uintVal,int intVal)\n\n{\n  int status;\n  undefined4 returnValue;\n  \n  **pointer = **pointer | 0x400;\n  **pointer = **pointer | 0x100;\n  do {\n    if ((~(*pointer)[5] & 1) == 0) {\n      status = 0;\n      goto LAB_080028d2;\n    }\n  } while ((uintVal == 0xffffffff) ||\n          ((uintVal != 0 && (status = get_data_value_080015a0(), (uint)(status - intVal) <= uintVal))));\n  pointer[0xc] = (uint *)0x0;\n  *(undefined *)((int)pointer + 0x3d) = 0x20;\n  *(undefined *)((int)pointer + 0x3e) = 0;\n  *(undefined *)(pointer + 0xf) = 0;\n  status = 3;\nLAB_080028d2:\n  if (status == 0) {\n    (*pointer)[4] = byteVal & 0xfe;\n    status = check_and_update_flags_08002ad8(pointer,0x10002,uintVal,intVal);\n    if (status == 0) {\n      status = check_parameters_08002bb4(pointer,uintVal,intVal,(*pointer)[6]);\n      if (status == 0) {\n        if (shortVal == 1) {\n          (*pointer)[4] = (uint)(byte)ushortVal;\n        }\n        else {\n          (*pointer)[4] = (uint)(byte)((ushort)ushortVal >> 8);\n          status = check_parameters_08002bb4(pointer,uintVal,intVal);\n          if (status != 0) {\n            if (pointer[0x10] == (uint *)0x4) {\n              **pointer = **pointer | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*pointer)[4] = (uint)(byte)ushortVal;\n        }\n        status = check_parameters_08002bb4(pointer,uintVal,intVal);\n        if (status == 0) {\n          **pointer = **pointer | 0x100;\n          do {\n            if ((~(*pointer)[5] & 1) == 0) {\n              status = 0;\n              goto LAB_08002a90;\n            }\n          } while ((uintVal == 0xffffffff) ||\n                  ((uintVal != 0 && (status = get_data_value_080015a0(), (uint)(status - intVal) <= uintVal))));\n          pointer[0xc] = (uint *)0x0;\n          *(undefined *)((int)pointer + 0x3d) = 0x20;\n          *(undefined *)((int)pointer + 0x3e) = 0;\n          *(undefined *)(pointer + 0xf) = 0;\n          status = 3;\nLAB_08002a90:\n          if (status == 0) {\n            (*pointer)[4] = (uint)(byteVal | 1);\n            status = check_and_update_flags_08002ad8(pointer,0x10002,uintVal,intVal);\n            if (status == 0) {\n              returnValue = 0;\n            }\n            else if (pointer[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (pointer[0x10] == (uint *)0x4) {\n          **pointer = **pointer | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (pointer[0x10] == (uint *)0x4) {\n        **pointer = **pointer | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (pointer[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "update_flags_and_check_parameters_080027f4",
                "param_1": "pointer",
                "param_2": "byteVal",
                "param_3": "ushortVal",
                "param_4": "shortVal",
                "param_5": "uintVal",
                "param_6": "intVal",
                "iVar1": "status",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_flags_08002ad8",
            "code": "\nundefined4 checkAndUpdateFlags_08002ad8(uint **parameters,uint data,uint length,int value)\n\n{\n  int dataValue;\n  char result;\n  uint modifiedData;\n  bool isModified;\n  \n  do {\n    if ((data >> 0x10 & 0xff) == 1) {\n      modifiedData = data & ~(*parameters)[5] & 0xffff;\n      isModified = modifiedData != 0;\n      if (isModified) {\n        modifiedData = 1;\n      }\n      result = (char)modifiedData;\n      if (!isModified) {\n        result = '\\0';\n      }\n    }\n    else {\n      modifiedData = data & ~(*parameters)[6] & 0xffff;\n      isModified = modifiedData != 0;\n      if (isModified) {\n        modifiedData = 1;\n      }\n      result = (char)modifiedData;\n      if (!isModified) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*parameters)[5] & 0x400) == 0x400) {\n      **parameters = **parameters | 0x200;\n      (*parameters)[5] = 0xfffffbff;\n      parameters[0x10] = (uint *)0x4;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)(parameters + 0xf) = 0;\n      return 1;\n    }\n  } while ((length == 0xffffffff) ||\n          ((length != 0 && (dataValue = get_data_value_080015a0(), (uint)(dataValue - value) <= length))));\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  *(undefined *)(parameters + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_flags_08002ad8",
                "param_1": "parameters",
                "param_2": "data",
                "param_3": "length",
                "param_4": "value",
                "iVar1": "dataValue",
                "cVar2": "result",
                "uVar3": "modifiedData",
                "bVar4": "isModified"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_parameters_08002bb4",
            "code": "\nundefined4 checkParameters_08002bb4(int *inputArray,uint value,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*inputArray + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = checkAndModifyParams(inputArray);\n    if (result != 0) break;\n    if ((value != 0xffffffff) &&\n       ((value == 0 || (result = getDataValue(), value < (uint)(result - offset))))) {\n      inputArray[0x10] = inputArray[0x10] | 0x20;\n      inputArray[0xc] = 0;\n      *(undefined *)((int)inputArray + 0x3d) = 0x20;\n      *(undefined *)(inputArray + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_parameters_08002bb4",
                "param_1": "inputArray",
                "param_2": "value",
                "param_3": "offset",
                "iVar1": "result",
                "check_and_modify_params_08002d3c": "checkAndModifyParams",
                "get_data_value_080015a0": "getDataValue"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_parameter_validity_08002c2e",
            "code": "\nundefined4 checkParameterValidity_08002c2e(int *parameterArray,uint dataValue,int referenceValue)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*parameterArray + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = checkAndModifyParameters(parameterArray);\n    if (result != 0) break;\n    if ((dataValue != 0xffffffff) &&\n       ((dataValue == 0 || (result = getDataValue(), dataValue < (uint)(result - referenceValue))))) {\n      parameterArray[0x10] = parameterArray[0x10] | 0x20;\n      parameterArray[0xc] = 0;\n      *(undefined *)((int)parameterArray + 0x3d) = 0x20;\n      *(undefined *)(parameterArray + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_parameter_validity_08002c2e",
                "param_1": "parameterArray",
                "param_2": "dataValue",
                "param_3": "referenceValue",
                "iVar1": "result",
                "check_and_modify_params_08002d3c": "checkAndModifyParameters",
                "get_data_value_080015a0": "getDataValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_data_validity_08002ca8",
            "code": "\nundefined4 checkDataValidity_08002ca8(int *dataPtr,uint dataSize,int offset)\n\n{\n  int dataValue;\n  \n  while( true ) {\n    if ((*(uint *)(*dataPtr + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*dataPtr + 0x14) & 0x10) == 0x10) break;\n    if ((dataSize == 0) || (dataValue = getDataValue(), dataSize < (uint)(dataValue - offset))) {\n      flag1 = flag1 | 0x20;\n      *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n      *(undefined *)(dataPtr + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*dataPtr + 0x14) = 0xffffffef;\n  flag1 = 0;\n  flag2 = 0;\n  *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n  *(undefined *)(dataPtr + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_data_validity_08002ca8",
                "param_1": "dataPtr",
                "param_2": "dataSize",
                "param_3": "offset",
                "iVar1": "dataValue",
                "get_data_value_080015a0": "getDataValue",
                "param_1[0x10]": "flag1",
                "param_1[0xc]": "flag2"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_and_modify_params_08002d3c",
            "code": "\nbool checkAndModifyParams_08002d3c(int *params)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*params + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*params + 0x14) = 0xfffffbff;\n    errorCode = 4;\n    counter = 0;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)(params + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_and_modify_params_08002d3c",
                "param_1": "params",
                "bVar1": "isFlagSet",
                "param_1[0x10]": "errorCode",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_status_08002d98",
            "code": "\n\n\nundefined4 checkStatus_08002d98(uint *statusFlags)\n\n{\n  int initialValue;\n  int currentValue;\n  undefined4 result;\n  bool isConditionMet;\n  \n  if ((*statusFlags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (statusFlags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (statusFlags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (statusFlags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (statusFlags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (statusFlags[1] == 0) {\n        initialValue = get_data_value_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = get_data_value_080015a0();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialValue = get_data_value_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = get_data_value_080015a0();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*statusFlags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (statusFlags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = statusFlags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (statusFlags[4] == 0) {\n      _DAT_42420000 = 0;\n      initialValue = get_data_value_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = get_data_value_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialValue = get_data_value_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = get_data_value_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = statusFlags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*statusFlags & 8) != 0) {\n    if (statusFlags[6] == 0) {\n      _DAT_42420480 = 0;\n      initialValue = get_data_value_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = get_data_value_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialValue = get_data_value_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = get_data_value_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      delay_function_08003568(1);\n    }\n  }\n  if ((*statusFlags & 4) != 0) {\n    isConditionMet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_data_value_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_value_080015a0();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (statusFlags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (statusFlags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (statusFlags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (statusFlags[3] == 0) {\n      initialValue = get_data_value_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = get_data_value_080015a0();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialValue = get_data_value_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = get_data_value_080015a0();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (statusFlags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (statusFlags[7] == 2) {\n    _DAT_42420060 = 0;\n    initialValue = get_data_value_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (statusFlags[8] == 0x10000) {\n          _DAT_40021004 = statusFlags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = statusFlags[9] | statusFlags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initialValue = get_data_value_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentValue = get_data_value_080015a0();\n          if (2 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentValue = get_data_value_080015a0();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialValue = get_data_value_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentValue = get_data_value_080015a0();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_status_08002d98",
                "param_1": "statusFlags",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "bVar4": "isConditionMet"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "update_execution_time_08003260",
            "code": "\n\n\nundefined4 updateExecutionTime_08003260(uint *param,uint size)\n\n{\n  int dataValue1;\n  int dataValue2;\n  uint executionTime;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < size) &&\n     (_DAT_40022000 = size | _DAT_40022000 & 0xfffffff8, size != (size & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*param & 2) != 0) {\n      _DAT_40021004 = param[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*param & 1) == 0) {\nLAB_08003394:\n      if ((size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = size | _DAT_40022000 & 0xfffffff8, size != (size & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*param & 4) != 0) {\n          _DAT_40021004 = param[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*param & 8) != 0) {\n          _DAT_40021004 = param[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        executionTime = calculate_execution_time_08003440();\n        DAT_20000018 = executionTime >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        validate_and_save_0800151c(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (param[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((param[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = param[1] | _DAT_40021004 & 0xfffffffc;\n      dataValue1 = get_data_value_080015a0();\n      if (param[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          dataValue2 = get_data_value_080015a0();\n        } while ((uint)(dataValue2 - dataValue1) < 0x1389);\n        result = 3;\n      }\n      else if (param[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          dataValue2 = get_data_value_080015a0();\n        } while ((uint)(dataValue2 - dataValue1) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          dataValue2 = get_data_value_080015a0();\n        } while ((uint)(dataValue2 - dataValue1) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003260": "update_execution_time_08003260",
                "param_1": "param",
                "param_2": "size",
                "iVar1": "dataValue1",
                "iVar2": "dataValue2",
                "uVar3": "executionTime",
                "uVar4": "result"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_080015a0",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculateExecutionTime_08003440(void)\n\n{\n  undefined2 startDelay;\n  undefined4 constantA;\n  undefined4 constantB;\n  undefined4 constantC;\n  undefined4 constantD;\n  uint executionTime;\n  undefined4 result;\n  uint someData;\n  uint executionTimeInCycles;\n  uint tempVar;\n  \n  constantA = 0x5040302;\n  constantB = 0x9080706;\n  constantC = 0xd0c0b0a;\n  constantD = 0x10100f0e;\n  startDelay = 0x201;\n  result = 0;\n  tempVar = 0;\n  executionTime = 0;\n  executionTimeInCycles = 0;\n  someData = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    executionTimeInCycles = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    executionTime = (uint)*(byte *)((int)&constantA + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      tempVar = executionTime * 4000000;\n    }\n    else {\n      tempVar = (executionTime * 8000000) / (uint)*(byte *)((int)&startDelay + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    executionTimeInCycles = tempVar;\n  }\n  else {\n    executionTimeInCycles = 8000000;\n  }\n  return executionTimeInCycles;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "startDelay",
                "local_2c": "constantA",
                "uStack_28": "constantB",
                "uStack_24": "constantC",
                "uStack_20": "constantD",
                "local_1c": "executionTime",
                "local_18": "result",
                "local_14": "someData",
                "local_10": "executionTimeInCycles",
                "local_c": "tempVar"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_constant_value_08003504",
            "code": "\nundefined4 get_constant_value_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_constant_value_08003504"
            },
            "calling": [
                "FUN_08003518",
                "FUN_080052a0",
                "FUN_08003540"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "get_shifted_value_08003518",
            "code": "\n\n\nuint get_shifted_value_08003518(void)\n\n{\n  uint constant_value;\n  \n  constant_value = get_constant_value_08003504();\n  return constant_value >> *(shift_amount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "get_shifted_value_08003518",
                "uVar1": "constant_value",
                "sbyte": "shift_amount"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "shift_constant_value_08003540",
            "code": "\n\n\nuint shiftConstantValue_08003540(void)\n\n{\n  uint constantValue;\n  \n  constantValue = get_constant_value_08003504();\n  return constantValue >> *(shiftAmount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "shift_constant_value_08003540",
                "uVar1": "constantValue",
                "sbyte": "shiftAmount"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int input)\n\n{\n  bool isDelayComplete;\n  int delayCount;\n  \n  delayCount = input * (DAT_20000018 / 8000);\n  do {\n    isDelayComplete = delayCount != 0;\n    delayCount = delayCount + -1;\n  } while (isDelayComplete);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "input",
                "local_c": "delayCount",
                "bVar1": "isDelayComplete"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_and_update_memory_080035a4",
            "code": "\nundefined4 checkAndUpdateMemory_080035a4(undefined4 *inputArray)\n\n{\n  undefined4 returnValue;\n  \n  if (inputArray == (undefined4 *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)inputArray + 0x3d) == '\\0') {\n      *(undefined *)(inputArray + 0xf) = 0;\n      FUNC_080035fa(inputArray);\n    }\n    *(undefined *)((int)inputArray + 0x3d) = 2;\n    update_memory_08003c94(*inputArray,inputArray + 1);\n    *(undefined *)((int)inputArray + 0x3d) = 1;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_and_update_memory_080035a4",
                "param_1": "inputArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_flags_0800360c",
            "code": "\nundefined4 setFlags_0800360c(uint **param)\n\n{\n  (*param)[3] = (*param)[3] | 1;\n  **param = **param | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "validate_parameter_08003640",
            "code": "\nundefined4 validateParameter_08003640(undefined4 *inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (inputParam == (undefined4 *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)inputParam + 0x3d) == '\\0') {\n      *(undefined *)(inputParam + 0xf) = 0;\n      FUNC_08003696(inputParam);\n    }\n    *(undefined *)((int)inputParam + 0x3d) = 2;\n    update_memory_08003c94(*inputParam,inputParam + 1);\n    *(undefined *)((int)inputParam + 0x3d) = 1;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003640": "validate_parameter_08003640",
                "param_1": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_bit_and_value_080036a8",
            "code": "\nundefined4 update_bit_and_value_080036a8(uint **param_1,undefined4 value)\n\n{\n  update_bit_value_080041ea(*param_1,value,1);\n  if (*param_1 == (uint *)0x40012c00) {\n    (*param_1)[0x11] = (*param_1)[0x11] | 0x8000;\n  }\n  **param_1 = **param_1 | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_bit_and_value_080036a8",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_parameters_080036f8",
            "code": "\nvoid process_parameters_080036f8(int *input_array)\n\n{\n  if (((*(uint *)(*input_array + 0x10) & 2) == 2) && ((*(uint *)(*input_array + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*input_array + 0x10) = 0xfffffffd;\n    *(undefined *)(input_array + 7) = 1;\n    if ((*(uint *)(*input_array + 0x18) & 3) == 0) {\n      FUNC_08003c4a(input_array);\n      FUNC_08003c6e(input_array);\n    }\n    else {\n      FUNC_08003c5c(input_array);\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  if (((*(uint *)(*input_array + 0x10) & 4) == 4) && ((*(uint *)(*input_array + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*input_array + 0x10) = 0xfffffffb;\n    *(undefined *)(input_array + 7) = 2;\n    if ((*(uint *)(*input_array + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(input_array);\n      FUNC_08003c6e(input_array);\n    }\n    else {\n      FUNC_08003c5c(input_array);\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  if (((*(uint *)(*input_array + 0x10) & 8) == 8) && ((*(uint *)(*input_array + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*input_array + 0x10) = 0xfffffff7;\n    *(undefined *)(input_array + 7) = 4;\n    if ((*(uint *)(*input_array + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(input_array);\n      FUNC_08003c6e(input_array);\n    }\n    else {\n      FUNC_08003c5c(input_array);\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  if (((*(uint *)(*input_array + 0x10) & 0x10) == 0x10) && ((*(uint *)(*input_array + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*input_array + 0x10) = 0xffffffef;\n    *(undefined *)(input_array + 7) = 8;\n    if ((*(uint *)(*input_array + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(input_array);\n      FUNC_08003c6e(input_array);\n    }\n    else {\n      FUNC_08003c5c(input_array);\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  if (((*(uint *)(*input_array + 0x10) & 1) == 1) && ((*(uint *)(*input_array + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*input_array + 0x10) = 0xfffffffe;\n    process_data_08004f78(input_array);\n  }\n  if (((*(uint *)(*input_array + 0x10) & 0x80) == 0x80) && ((*(uint *)(*input_array + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*input_array + 0x10) = 0xffffff7f;\n    FUNC_08004378(input_array);\n  }\n  if (((*(uint *)(*input_array + 0x10) & 0x40) == 0x40) && ((*(uint *)(*input_array + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*input_array + 0x10) = 0xffffffbf;\n    FUNC_08003c80(input_array);\n  }\n  if (((*(uint *)(*input_array + 0x10) & 0x20) == 0x20) && ((*(uint *)(*input_array + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*input_array + 0x10) = 0xffffffdf;\n    FUNC_08004366(input_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_parameters_080036f8",
                "param_1": "input_array"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004f78",
                "FUN_08003c6e",
                "FUN_08004378",
                "FUN_08003c4a",
                "FUN_08004366",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "process_configuration_08003908",
            "code": "\nundefined4 processConfiguration_08003908(int *configPtr,int dataPtr,undefined4 option)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(configPtr + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 0xf) = 1;\n    *(undefined *)((int)configPtr + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      updateConfig(*configPtr,dataPtr);\n      *(uint *)(*configPtr + 0x18) = *(uint *)(*configPtr + 0x18) | 8;\n      *(uint *)(*configPtr + 0x18) = *(uint *)(*configPtr + 0x18) & 0xfffffffb;\n      *(uint *)(*configPtr + 0x18) = *(uint *)(dataPtr + 0x10) | *(uint *)(*configPtr + 0x18);\n      break;\n    case 4:\n      updateData(*configPtr,dataPtr);\n      *(uint *)(*configPtr + 0x18) = *(uint *)(*configPtr + 0x18) | 0x800;\n      *(uint *)(*configPtr + 0x18) = *(uint *)(*configPtr + 0x18) & 0xfffffbff;\n      *(uint *)(*configPtr + 0x18) = *(int *)(dataPtr + 0x10) << 8 | *(uint *)(*configPtr + 0x18);\n      break;\n    case 8:\n      updateParameters(*configPtr,dataPtr);\n      *(uint *)(*configPtr + 0x1c) = *(uint *)(*configPtr + 0x1c) | 8;\n      *(uint *)(*configPtr + 0x1c) = *(uint *)(*configPtr + 0x1c) & 0xfffffffb;\n      *(uint *)(*configPtr + 0x1c) = *(uint *)(dataPtr + 0x10) | *(uint *)(*configPtr + 0x1c);\n      break;\n    case 0xc:\n      updateConfig2(*configPtr,dataPtr);\n      *(uint *)(*configPtr + 0x1c) = *(uint *)(*configPtr + 0x1c) | 0x800;\n      *(uint *)(*configPtr + 0x1c) = *(uint *)(*configPtr + 0x1c) & 0xfffffbff;\n      *(uint *)(*configPtr + 0x1c) = *(int *)(dataPtr + 0x10) << 8 | *(uint *)(*configPtr + 0x1c);\n    }\n    *(undefined *)((int)configPtr + 0x3d) = 1;\n    *(undefined *)(configPtr + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003908": "process_configuration_08003908",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "param_3": "option",
                "uVar1": "returnValue",
                "update_configuration_08003d60": "updateConfig",
                "update_data_08003e38": "updateData",
                "update_parameters_08003f18": "updateParameters",
                "update_configuration_08003ff8": "updateConfig2"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "process_data_08003a94",
            "code": "\nundefined4 processData_08003a94(int *inputData,uint *configData)\n\n{\n  undefined4 result;\n  uint configValue;\n  \n  if (*(char *)(inputData + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(inputData + 0xf) = 1;\n    *(undefined *)((int)inputData + 0x3d) = 2;\n    *(uint *)(*inputData + 8) = *(uint *)(*inputData + 8) & 0xffff0088;\n    configValue = *configData;\n    if (configValue == 0x40) {\n      updateParameters(*inputData,configData[1],configData[3]);\n      updateData(*inputData,0x40);\n    }\n    else if (configValue < 0x41) {\n      if (configValue == 0x10) {\n        updateData(*inputData,0x10);\n      }\n      else if (configValue < 0x11) {\n        if (configValue == 0) {\n          updateData(*inputData,0);\n        }\n      }\n      else if (configValue == 0x20) {\n        updateData(*inputData,0x20);\n      }\n      else if (configValue == 0x30) {\n        updateData(*inputData,0x30);\n      }\n    }\n    else if (configValue == 0x70) {\n      updateMemory(*inputData,configData[2],configData[1],configData[3]);\n      *(uint *)(*inputData + 8) = *(uint *)(*inputData + 8) & 0xffffff88 | 0x77;\n    }\n    else if (configValue < 0x71) {\n      if (configValue == 0x50) {\n        updateParameters(*inputData,configData[1],configData[3]);\n        updateData(*inputData,0x50);\n      }\n      else if (configValue == 0x60) {\n        updateFlagsAndValues(*inputData,configData[1],configData[3]);\n        updateData(*inputData,0x60);\n      }\n    }\n    else if (configValue == 0x1000) {\n      *(uint *)(*inputData + 8) = *(uint *)(*inputData + 8) & 0xfffffff8;\n    }\n    else if (configValue == 0x2000) {\n      updateMemory(*inputData,configData[2],configData[1],configData[3]);\n      *(uint *)(*inputData + 8) = *(uint *)(*inputData + 8) | 0x4000;\n    }\n    *(undefined *)((int)inputData + 0x3d) = 1;\n    *(undefined *)(inputData + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "process_data_08003a94",
                "param_1": "inputData",
                "param_2": "configData",
                "uVar1": "result",
                "uVar2": "configValue",
                "update_parameters_080040a0": "updateParameters",
                "update_data_0800416a": "updateData",
                "update_memory_080041a8": "updateMemory",
                "update_flags_and_values_08004104": "updateFlagsAndValues"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_08003c94",
            "code": "\nvoid updateMemory_08003c94(uint *memoryAddress,uint *newMemoryValues)\n\n{\n  uint currentMemoryValue;\n  \n  currentMemoryValue = *memoryAddress;\n  if ((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n      (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) {\n    currentMemoryValue = newMemoryValues[1] | currentMemoryValue & 0xffffff8f;\n  }\n  if (((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n     ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))) {\n    currentMemoryValue = newMemoryValues[3] | currentMemoryValue & 0xfffffcff;\n  }\n  *memoryAddress = newMemoryValues[5] | currentMemoryValue & 0xffffff7f;\n  memoryAddress[0xb] = newMemoryValues[2];\n  memoryAddress[10] = *newMemoryValues;\n  if (memoryAddress == (uint *)0x40012c00) {\n    uRam40012c30 = newMemoryValues[4];\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "param_1": "memoryAddress",
                "param_2": "newMemoryValues",
                "local_c": "currentMemoryValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_configuration_08003d60",
            "code": "\nvoid updateConfiguration_08003d60(int configAddress,uint *configValues)\n\n{\n  uint firstConfigValue;\n  uint modifiedConfigValue;\n  uint currentValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffffe;\n  currentValue = *(uint *)(configAddress + 4);\n  firstConfigValue = *configValues;\n  modifiedConfigValue = configValue2 | *(uint *)(configAddress + 0x20) & 0xfffffffd;\n  if (configAddress == 0x40012c00) {\n    modifiedConfigValue = (configValue3 | modifiedConfigValue & 0xfffffff7) & 0xfffffffb;\n    currentValue = configValue6 | configValue5 | currentValue & 0xfffffcff;\n  }\n  *(uint *)(configAddress + 4) = currentValue;\n  *(uint *)(configAddress + 0x18) = firstConfigValue | *(uint *)(configAddress + 0x18) & 0xffffff8c;\n  *(uint *)(configAddress + 0x34) = configValues[1];\n  *(uint *)(configAddress + 0x20) = modifiedConfigValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_configuration_08003d60",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "firstConfigValue",
                "uVar2": "modifiedConfigValue",
                "local_10": "currentValue",
                "param_2[2]": "configValue2",
                "param_2[3]": "configValue3",
                "param_2[6]": "configValue6",
                "param_2[5]": "configValue5"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_data_08003e38",
            "code": "\nvoid updateData_08003e38(int dataAddress,int *dataArray)\n\n{\n  int var1;\n  uint var2;\n  uint var3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  var3 = *(uint *)(dataAddress + 4);\n  var1 = *dataArray;\n  var2 = dataArray[2] << 4 | *(uint *)(dataAddress + 0x20) & 0xffffffdf;\n  if (dataAddress == 0x40012c00) {\n    var2 = (dataArray[3] << 4 | var2 & 0xffffff7f) & 0xffffffbf;\n    var3 = dataArray[6] << 2 | dataArray[5] << 2 | var3 & 0xfffff3ff;\n  }\n  *(uint *)(dataAddress + 4) = var3;\n  *(uint *)(dataAddress + 0x18) = var1 << 8 | *(uint *)(dataAddress + 0x18) & 0xffff8cff;\n  *(int *)(dataAddress + 0x38) = dataArray[1];\n  *(uint *)(dataAddress + 0x20) = var2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "dataAddress",
                "param_2": "dataArray",
                "iVar1": "var1",
                "uVar2": "var2",
                "local_10": "var3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_parameters_08003f18",
            "code": "\nvoid updateParameters_08003f18(int baseAddress,uint *parameters)\n\n{\n  uint value1;\n  uint value2;\n  uint localValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  localValue = *(uint *)(baseAddress + 4);\n  value1 = *parameters;\n  value2 = parameters[2] << 8 | *(uint *)(baseAddress + 0x20) & 0xfffffdff;\n  if (baseAddress == 0x40012c00) {\n    value2 = (parameters[3] << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    localValue = parameters[6] << 4 | parameters[5] << 4 | localValue & 0xffffcfff;\n  }\n  *(uint *)(baseAddress + 4) = localValue;\n  *(uint *)(baseAddress + 0x1c) = value1 | *(uint *)(baseAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(baseAddress + 0x3c) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_parameters_08003f18",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_configuration_08003ff8",
            "code": "\nvoid updateConfiguration_08003ff8(int configAddress,int *configValues)\n\n{\n  int value1;\n  int value2;\n  uint flags;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffefff;\n  flags = *(uint *)(configAddress + 4);\n  value1 = *configValues;\n  value2 = configValues[2];\n  if (configAddress == 0x40012c00) {\n    flags = configValues[5] << 6 | flags & 0xffffbfff;\n  }\n  *(uint *)(configAddress + 4) = flags;\n  *(uint *)(configAddress + 0x1c) = value1 << 8 | *(uint *)(configAddress + 0x1c) & 0xffff8cff;\n  *(int *)(configAddress + 0x40) = configValues[1];\n  *(uint *)(configAddress + 0x20) = value2 << 0xc | *(uint *)(configAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_configuration_08003ff8",
                "param_1": "configAddress",
                "param_2": "configValues",
                "local_c": "flags",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameters_080040a0",
            "code": "\nvoid updateParameters_080040a0(int inputAddress,uint paramValue,int paramOffset)\n\n{\n  uint tempVar1;\n  \n  tempVar1 = *(uint *)(inputAddress + 0x20);\n  *(uint *)(inputAddress + 0x20) = *(uint *)(inputAddress + 0x20) & 0xfffffffe;\n  *(uint *)(inputAddress + 0x18) = paramOffset << 4 | *(uint *)(inputAddress + 0x18) & 0xffffff0f;\n  *(uint *)(inputAddress + 0x20) = paramValue | tempVar1 & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "inputAddress",
                "param_2": "paramValue",
                "param_3": "paramOffset",
                "uVar1": "tempVar1"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_flags_and_values_08004104",
            "code": "\nvoid updateFlagsAndValues_08004104(int baseAddress,int valueA,int valueB)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  *(uint *)(baseAddress + 0x18) = valueB << 0xc | *(uint *)(baseAddress + 0x18) & 0xffff0fff;\n  *(uint *)(baseAddress + 0x20) = valueA << 4 | *(uint *)(baseAddress + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "baseAddress",
                "param_2": "valueA",
                "param_3": "valueB"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_data_0800416a",
            "code": "\nvoid updateData_0800416a(int dataPointer,ushort newValue)\n\n{\n  *(uint *)(dataPointer + 8) = *(uint *)(dataPointer + 8) & 0xffffff8f | (uint)(newValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_data_0800416a",
                "param_1": "dataPointer",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_memory_080041a8",
            "code": "\nvoid updateMemory_080041a8(int address,uint data,uint mask,int shift)\n\n{\n  *(uint *)(address + 8) = data | shift << 8 | mask | *(uint *)(address + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_memory_080041a8",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "param_4": "shift"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bit_value_080041ea",
            "code": "\nvoid updateBitValue_080041ea(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bit_value_080041ea",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_config_0800422e",
            "code": "\nundefined4 updateConfig_0800422e(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 status;\n  \n  if (*(char *)(configPtr + 0xf) == '\\x01') {\n    status = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 0xf) = 1;\n    *(uint *)(*configPtr + 0x44) =\n         dataPtr[6] |\n         (dataPtr[6] |\n         (dataPtr[5] |\n         (dataPtr[4] |\n         (*dataPtr | (dataPtr[1] | (dataPtr[2] | dataPtr[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(configPtr + 0xf) = 0;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_config_0800422e",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "status"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_and_return_status_080042de",
            "code": "\nundefined4 updateFlagsAndReturnStatus_080042de(int *array,uint *mask)\n\n{\n  undefined4 status;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    status = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xffffff8f;\n    *(uint *)(*array + 4) = *mask | *(uint *)(*array + 4);\n    *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xffffff7f;\n    *(uint *)(*array + 8) = mask[1] | *(uint *)(*array + 8);\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_and_return_status_080042de",
                "param_1": "array",
                "param_2": "mask",
                "uVar1": "status"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_0800438a",
            "code": "\nundefined4 initializeData_0800438a(int *dataPointer)\n\n{\n  undefined4 result;\n  \n  if (dataPointer == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      FUNC_08004424(dataPointer);\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 0x24;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    updateValues(dataPointer);\n    *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x20;\n    *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_0800438a",
                "param_1": "dataPointer",
                "uVar1": "result",
                "update_values_080046ec": "updateValues",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **dataPtr,ushort *inputData,short inputLength,uint maxValue)\n\n{\n  int value1;\n  int value2;\n  undefined4 result;\n  ushort *currInput;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if ((inputData == (ushort *)0x0) || (inputLength == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      dataPtr[0xf] = (uint *)0x0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      value1 = get_data_value_080015a0();\n      *(short *)(dataPtr + 9) = inputLength;\n      *(short *)((int)dataPtr + 0x26) = inputLength;\n      currInput = inputData;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == (uint *)0x1000) {\n          do {\n            if ((**dataPtr & 0x80) == 0x80) {\n              value2 = 0;\n              goto LAB_0800454c;\n            }\n          } while ((maxValue == 0xffffffff) ||\n                  ((maxValue != 0 && (value2 = get_data_value_080015a0(), (uint)(value2 - value1) <= maxValue))));\n          (*dataPtr)[3] = (*dataPtr)[3] & 0xfffffe5f;\n          (*dataPtr)[5] = (*dataPtr)[5] & 0xfffffffe;\n          *(undefined *)((int)dataPtr + 0x39) = 0x20;\n          *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n          *(undefined *)(dataPtr + 0xe) = 0;\n          value2 = 3;\nLAB_0800454c:\n          if (value2 != 0) {\n            return 3;\n          }\n          (*dataPtr)[1] = *currInput & 0x1ff;\n          if (dataPtr[4] == (uint *)0x0) {\n            currInput = currInput + 1;\n          }\n          else {\n            currInput = (ushort *)((int)currInput + 1);\n          }\n        }\n        else {\n          do {\n            if ((**dataPtr & 0x80) == 0x80) {\n              value2 = 0;\n              goto LAB_08004614;\n            }\n          } while ((maxValue == 0xffffffff) ||\n                  ((maxValue != 0 && (value2 = get_data_value_080015a0(), (uint)(value2 - value1) <= maxValue))));\n          (*dataPtr)[3] = (*dataPtr)[3] & 0xfffffe5f;\n          (*dataPtr)[5] = (*dataPtr)[5] & 0xfffffffe;\n          *(undefined *)((int)dataPtr + 0x39) = 0x20;\n          *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n          *(undefined *)(dataPtr + 0xe) = 0;\n          value2 = 3;\nLAB_08004614:\n          if (value2 != 0) {\n            return 3;\n          }\n          (*dataPtr)[1] = (uint)*(byte *)currInput;\n          currInput = (ushort *)((int)currInput + 1);\n        }\n      }\n      do {\n        if ((**dataPtr & 0x40) == 0x40) {\n          value1 = 0;\n          goto LAB_080046c6;\n        }\n      } while ((maxValue == 0xffffffff) ||\n              ((maxValue != 0 && (value2 = get_data_value_080015a0(), (uint)(value2 - value1) <= maxValue))));\n      (*dataPtr)[3] = (*dataPtr)[3] & 0xfffffe5f;\n      (*dataPtr)[5] = (*dataPtr)[5] & 0xfffffffe;\n      *(undefined *)((int)dataPtr + 0x39) = 0x20;\n      *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n      *(undefined *)(dataPtr + 0xe) = 0;\n      value1 = 3;\nLAB_080046c6:\n      if (value1 == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "dataPtr",
                "param_2": "inputData",
                "param_3": "inputLength",
                "param_4": "maxValue",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "result",
                "local_58": "currInput"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "update_values_080046ec",
            "code": "\nvoid updateValues_080046ec(int *input)\n\n{\n  ulonglong result;\n  int temp1;\n  int temp2;\n  uint modifiedValue;\n  int temp3;\n  undefined8 shiftedValue;\n  \n  *(uint *)(*input + 0x10) = input[3] | *(uint *)(*input + 0x10) & 0xffffcfff;\n  *(uint *)(*input + 0xc) =\n       *(uint *)(*input + 0xc) & 0xffffe9f3 | input[5] | input[2] | input[4];\n  *(uint *)(*input + 0x14) = input[6] | *(uint *)(*input + 0x14) & 0xfffffcff;\n  if (*input == 0x40013800) {\n    shiftedValue = shift_constant_value_08003540();\n    result = (ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(input[1] << 2);\n    temp1 = shift_constant_value_08003540((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)(result * 0x51eb851f));\n    temp2 = input[1];\n    shiftedValue = shift_constant_value_08003540();\n    modifiedValue = ((uint)(temp1 * 0x19) / (uint)(temp2 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    temp1 = shift_constant_value_08003540((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),modifiedValue * 0x51eb851f);\n    temp3 = input[1];\n    temp2 = shift_constant_value_08003540();\n    *(uint *)(*input + 8) =\n         ((((uint)(temp1 * 0x19) / (uint)(temp3 << 2) +\n           (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(result / 100) * 0x10 + (modifiedValue / 100 & 0xf0);\n  }\n  else {\n    shiftedValue = get_shifted_value_08003518();\n    result = (ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(input[1] << 2);\n    temp1 = get_shifted_value_08003518((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)(result * 0x51eb851f));\n    temp2 = input[1];\n    shiftedValue = get_shifted_value_08003518();\n    modifiedValue = ((uint)(temp1 * 0x19) / (uint)(temp2 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    temp1 = get_shifted_value_08003518((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),modifiedValue * 0x51eb851f);\n    temp3 = input[1];\n    temp2 = get_shifted_value_08003518();\n    *(uint *)(*input + 8) =\n         ((((uint)(temp1 * 0x19) / (uint)(temp3 << 2) +\n           (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(result / 100) * 0x10 + (modifiedValue / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "update_values_080046ec",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "temp1",
                "iVar3": "temp2",
                "uVar4": "modifiedValue",
                "iVar5": "temp3",
                "uVar6": "shiftedValue"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_parameters_0800491c",
            "code": "\nvoid initialize_parameters_0800491c(undefined4 *parameters)\n\n{\n  undefined value_1;\n  undefined value_2;\n  undefined array_values [5];\n  \n  value_1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&value_1,1);\n  value_2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&value_2,1);\n  array_values[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,array_values,1);\n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  parameters[3] = 0;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  parameters[7] = 0;\n  parameters[8] = 0;\n  parameters[9] = 0;\n  parameters[10] = 0;\n  calculate_modified_float_values_080049cc(parameters);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_parameters_0800491c",
                "param_1": "parameters",
                "local_13": "value_1",
                "local_12": "value_2",
                "local_11": "array_values"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_modified_float_values_080049cc",
            "code": "\nvoid calculateModifiedFloatValues_080049cc(int input)\n\n{\n  undefined4 modifiedFloatValue;\n  undefined4 value2;\n  undefined4 value1;\n  undefined4 currentTime;\n  int iterationCount;\n  int currentIteration;\n  undefined4 sumValue2;\n  undefined4 sumValue1;\n  undefined4 sumValue3;\n  undefined4 sumValue4;\n  \n  iterationCount = 1;\n  sumValue4 = 0;\n  sumValue3 = 0;\n  sumValue1 = 0;\n  sumValue2 = 0;\n  currentTime = (*DAT_20000a50)();\n  currentIteration = 0;\n  while( true ) {\n    if (iterationCount <= currentIteration) break;\n    value1 = 0;\n    value2 = 0;\n    calculate_and_store_modified_values_08004ae0(input);\n    calculate_float_values_08004d78(input,&value1,&value2);\n    sumValue1 = calculate_float_08000aa8(sumValue1,value1);\n    sumValue2 = calculate_float_08000aa8(sumValue2,value2);\n    sumValue4 = calculate_float_08000aa8(sumValue4,*(undefined4 *)(input + 0x10));\n    sumValue3 = calculate_float_08000aa8(sumValue3,*(undefined4 *)(input + 0x14));\n    currentTime = (*DAT_20000a50)();\n    currentIteration = currentIteration + 1;\n  }\n  modifiedFloatValue = calculate_modified_value_08000c10(iterationCount);\n  modifiedFloatValue = calculate_float_from_uint_08000e20(sumValue4,modifiedFloatValue);\n  *(undefined4 *)(input + 0x1c) = modifiedFloatValue;\n  modifiedFloatValue = calculate_modified_value_08000c10(iterationCount);\n  modifiedFloatValue = calculate_float_from_uint_08000e20(sumValue3,modifiedFloatValue);\n  *(undefined4 *)(input + 0x20) = modifiedFloatValue;\n  modifiedFloatValue = calculate_modified_value_08000c10(iterationCount);\n  modifiedFloatValue = calculate_float_from_uint_08000e20(sumValue1,modifiedFloatValue);\n  *(undefined4 *)(input + 0x24) = modifiedFloatValue;\n  modifiedFloatValue = calculate_modified_value_08000c10(iterationCount);\n  modifiedFloatValue = calculate_float_from_uint_08000e20(sumValue2,modifiedFloatValue);\n  *(undefined4 *)(input + 0x28) = modifiedFloatValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_modified_float_values_080049cc",
                "param_1": "input",
                "uVar1": "modifiedFloatValue",
                "local_2c": "value2",
                "local_28": "value1",
                "local_24": "currentTime",
                "local_20": "iterationCount",
                "local_1c": "currentIteration",
                "local_18": "sumValue2",
                "local_14": "sumValue1",
                "local_10": "sumValue3",
                "local_c": "sumValue4"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "calculate_and_store_modified_values_08004ae0",
            "code": "\nvoid calculate_and_store_modified_values_08004ae0(undefined4 *output_array)\n\n{\n  undefined4 uVar1;\n  undefined value_1;\n  undefined value_2;\n  undefined temp_1;\n  undefined temp_2;\n  undefined temp_3;\n  undefined temp_4;\n  undefined temp_5;\n  undefined temp_6;\n  undefined temp_7;\n  undefined temp_8;\n  undefined temp_9;\n  undefined temp_10;\n  undefined temp_11;\n  undefined temp_12;\n  short value_3;\n  short value_4;\n  short value_5;\n  short value_6;\n  short value_7;\n  short value_8;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&value_1,0xe);\n  value_8 = CONCAT11(temp_1,temp_2);\n  value_7 = CONCAT11(temp_3,temp_4);\n  value_6 = CONCAT11(temp_5,temp_6);\n  value_5 = CONCAT11(temp_7,temp_8);\n  value_4 = CONCAT11(temp_9,temp_10);\n  value_3 = CONCAT11(temp_11,temp_12);\n  uVar1 = calculate_modified_value((int)CONCAT11(value_1,value_2));\n  *output_array = uVar1;\n  uVar1 = calculate_modified_value((int)value_8);\n  output_array[1] = uVar1;\n  uVar1 = calculate_modified_value((int)value_7);\n  output_array[2] = uVar1;\n  uVar1 = calculate_modified_value((int)value_6);\n  output_array[3] = uVar1;\n  uVar1 = calculate_modified_value((int)value_5);\n  output_array[4] = uVar1;\n  uVar1 = calculate_modified_value((int)value_4);\n  output_array[5] = uVar1;\n  uVar1 = calculate_modified_value((int)value_3);\n  output_array[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "calculate_and_store_modified_values_08004ae0",
                "param_1": "output_array",
                "local_2c": "value_1",
                "local_2b": "value_2",
                "local_2a": "temp_1",
                "local_29": "temp_2",
                "local_28": "temp_3",
                "local_27": "temp_4",
                "local_26": "temp_5",
                "local_25": "temp_6",
                "local_24": "temp_7",
                "local_23": "temp_8",
                "local_22": "temp_9",
                "local_21": "temp_10",
                "local_20": "temp_11",
                "local_1f": "temp_12",
                "local_1e": "value_3",
                "local_1c": "value_4",
                "local_1a": "value_5",
                "local_18": "value_6",
                "local_16": "value_7",
                "local_14": "value_8",
                "calculate_modified_value_08000c10": "calculate_modified_value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculate_result_08004bd8(int input_data,undefined4 *output_data)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = calculate_floating_point_08000aa4(*(undefined4 *)(input_data + 0x10),*(undefined4 *)(input_data + 0x1c));\n  result2 = binary_manipulation_08000418(DAT_200009e4);\n  result3 = binary_manipulation_08000418(result1);\n  result3 = calculate_floating_point_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = calculate_concatenation_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = calculate_floating_point_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = binary_manipulation_08000418(*(undefined4 *)(input_data + 4));\n  result2 = calculate_float_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = binary_manipulation_08000418(*(undefined4 *)(input_data + 8));\n  result3 = calculate_float_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_calculate_value_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = calculate_floating_point_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = calculate_float_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = binary_manipulation_08000418(*(undefined4 *)(input_data + 0x24));\n  result2 = calculate_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = calculate_concatenation_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = calculate_floating_point_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = binary_manipulation_08000418(DAT_200009e4);\n    result2 = calculate_floating_point_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = binary_manipulation_08000418(result1);\n    result3 = calculate_floating_point_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = calculate_concatenation_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = calculate_floating_point_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *output_data = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input_data",
                "param_2": "output_data",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08000aa4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_float_values_08004d78",
            "code": "\nvoid calculate_float_values_08004d78(undefined4 *input_array,undefined4 *output_1,undefined4 *output_2)\n\n{\n  undefined4 float_value_1;\n  undefined4 float_value_2;\n  undefined4 float_value_3;\n  undefined8 result_1;\n  undefined8 result_2;\n  \n  float_value_1 = calculate_float_from_uint_08000e20(*input_array,0x45800000);\n  float_value_2 = calculate_float_from_uint_08000e20(input_array[1],0x45800000);\n  float_value_3 = calculate_float_from_uint_08000e20(input_array[2],0x45800000);\n  result_1 = binary_manipulation_08000418(float_value_2);\n  result_2 = binary_manipulation_08000418(float_value_3);\n  result_1 = thunk_calculate_value_08005838((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                             (int)((ulonglong)result_2 >> 0x20));\n  result_1 = calculate_floating_point_080004c8((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x40668000);\n  result_1 = calculate_float_0800071c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n  float_value_2 = calculate_floating_point_080009fc((int)result_1,(int)((ulonglong)result_1 >> 0x20));\n  result_1 = binary_manipulation_08000418(float_value_1);\n  result_2 = binary_manipulation_08000418(float_value_3);\n  result_1 = thunk_calculate_value_08005838((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                             (int)((ulonglong)result_2 >> 0x20));\n  result_1 = calculate_floating_point_080004c8((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x40668000);\n  result_1 = calculate_float_0800071c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n  float_value_1 = calculate_floating_point_080009fc((int)result_1,(int)((ulonglong)result_1 >> 0x20));\n  *output_1 = float_value_2;\n  *output_2 = float_value_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_float_values_08004d78",
                "param_1": "input_array",
                "param_2": "output_1",
                "param_3": "output_2",
                "uVar1": "float_value_1",
                "uVar2": "float_value_2",
                "uVar3": "float_value_3",
                "uVar4": "result_1",
                "uVar5": "result_2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "invoke_system_interrupt_08004e6c",
            "code": "\nvoid invoke_system_interrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "invoke_system_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "execute_system_interrupt_08004e74",
            "code": "\nundefined4 execute_system_interrupt_08004e74(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = invoke_system_interrupt_08004e6c(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "execute_system_interrupt_08004e74",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "process_data_08004ea4",
            "code": "\nvoid process_data_08004ea4(undefined data_1,undefined data_2,undefined4 value_1,undefined2 value_2)\n\n{\n  process_data_08004ea4_08001ccc(&DAT_20000a88,data_1,data_2,1,value_1,value_2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "process_data_08004ea4",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "value_1",
                "param_4": "value_2"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "process_data_wrapper_08004ee8",
            "code": "\nvoid process_data_wrapper_08004ee8(undefined data_1,undefined data_2,undefined4 data_3,undefined2 data_4)\n\n{\n  process_data_08001f6c(&DAT_20000a88,data_1,data_2,1,data_3,data_4,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "process_data_wrapper_08004ee8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "get_data_from_binary_08004f2c",
            "code": "\nundefined4 get_data_from_binary_08004f2c(void)\n\n{\n  undefined4 data_value;\n  \n  data_value = get_data_value_080015a0();\n  return data_value;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "get_data_from_binary_08004f2c",
                "uVar1": "data_value"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_and_return_08004f3c",
            "code": "\nvoid processAndReturn_08004f3c(undefined4 input_1,undefined2 input_2)\n\n{\n  process_data_08004436(&DAT_20000adc,input_1,input_2,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_and_return_08004f3c",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_08004f60",
            "code": "\nvoid initializeMemory_08004f60(void)\n\n{\n  fillMemory(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60",
                "fill_memory_08005d68": "fillMemory"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "process_data_08004f78",
            "code": "\nvoid processData_08004f78(void)\n\n{\n  undefined4 modifiedValue1;\n  int isEmpty;\n  undefined4 modifiedValue2;\n  uint bitwiseXor;\n  undefined8 result;\n  byte validatedInput;\n  \n  calculate_and_store_modified_values_08004ae0(&DAT_20000a5c);\n  calculate_result_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  initialize_memory_08004f60();\n  result = binary_manipulation_08000418(DAT_20000ba0);\n  initialize_memory_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)result,(int)((ulonglong)result >> 0x20));\n  modifiedValue1 = find_offset_08005e40(&DAT_20000ba8);\n  process_and_return_08004f3c(&DAT_20000ba8,modifiedValue1);\n  DAT_200009f8 = calculate_floating_point_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculate_floating_point_08000cb8(DAT_20000a00,DAT_200009f8);\n  modifiedValue1 = calculate_floating_point_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculate_float_08000aa8(modifiedValue1,DAT_20000b5c);\n  modifiedValue1 = calculate_modified_value_08000c10(DAT_20000010);\n  isEmpty = is_string_empty_08000ff4(modifiedValue1,DAT_20000b5c);\n  if (isEmpty == 0) {\n    modifiedValue1 = calculate_modified_value_08000c10(DAT_200009f4);\n    isEmpty = check_if_concatenation_empty_08001030(modifiedValue1,DAT_20000b5c);\n    if (isEmpty != 0) {\n      DAT_20000b5c = calculate_unsigned_value_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = calculate_unsigned_value_08000c08(DAT_20000010);\n  }\n  bitwiseXor = DAT_20000a08 ^ 0x80000000;\n  modifiedValue1 = calculate_floating_point_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculate_floating_point_08000cb8(bitwiseXor,modifiedValue1);\n  modifiedValue1 = calculate_float_08000aa8(DAT_20000be8,DAT_20000b5c);\n  modifiedValue1 = calculate_float_08000aa8(modifiedValue1,DAT_20000a58);\n  modifiedValue2 = calculate_modified_value_08000c10(DAT_20000010);\n  isEmpty = check_if_concatenation_empty_08001030(modifiedValue1,modifiedValue2);\n  if (isEmpty == 0) {\n    modifiedValue2 = calculate_modified_value_08000c10(DAT_200009f4);\n    isEmpty = is_string_empty_08000ff4(modifiedValue1,modifiedValue2);\n    if (isEmpty == 0) {\n      validatedInput = validate_input_08001044(modifiedValue1);\n    }\n    else {\n      validatedInput = DAT_200009f4;\n    }\n  }\n  else {\n    validatedInput = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  isEmpty = check_if_concatenation_empty_08001030(DAT_200009f8,0);\n  update_param_data_08001a80(0x40010800,2,isEmpty != 0);\n  isEmpty = check_if_concatenation_empty_08001030(DAT_200009f8,0);\n  update_param_data_08001a80(0x40010800,4,isEmpty == 0);\n  isEmpty = check_if_concatenation_empty_08001030(DAT_200009f8,0);\n  update_param_data_08001a80(0x40010800,8,isEmpty != 0);\n  isEmpty = check_if_concatenation_empty_08001030(DAT_200009f8,0);\n  update_param_data_08001a80(0x40010800,0x10,isEmpty == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)validatedInput;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)validatedInput;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "process_data_08004f78",
                "uVar1": "modifiedValue1",
                "iVar2": "isEmpty",
                "uVar3": "modifiedValue2",
                "uVar4": "bitwiseXor",
                "uVar5": "result",
                "local_11": "validatedInput"
            },
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "called": [
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000418",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08004ae0",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08001a80",
                "FUN_08000c08",
                "FUN_08000aa8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_system_08005224",
            "code": "\nvoid initialize_system_08005224(void)\n\n{\n  configure_memory_and_save();\n  initialize_variables();\n  update_and_set_parameters();\n  initialize_data();\n  initialize();\n  initialize_memory();\n  initialize_and_configure();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  update_bit_and_value(&DAT_20000b1c,0);\n  update_bit_and_value(&DAT_20000b1c,0xc);\n  initialize_parameters(&DAT_20000a5c);\n  set_flags(&DAT_20000b60);\n  execute_system_interrupt(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "configure_memory_and_save_080014f0": "configure_memory_and_save",
                "initialize_variables_080052a0": "initialize_variables",
                "update_and_set_parameters_080055f4": "update_and_set_parameters",
                "initialize_data_08005348": "initialize_data",
                "initialize_08005598": "initialize",
                "initialize_memory_08005500": "initialize_memory",
                "initialize_and_configure_080053b0": "initialize_and_configure",
                "update_bit_and_value_080036a8": "update_bit_and_value",
                "initialize_parameters_0800491c": "initialize_parameters",
                "set_flags_0800360c": "set_flags",
                "execute_system_interrupt_08004e74": "execute_system_interrupt"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080014f0",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_variables_080052a0",
            "code": "\nvoid initializeVariables_080052a0(void)\n\n{\n  int status;\n  undefined8 constantValue;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  undefined4 flag6;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  \n  flag6 = 1;\n  var1 = 0x10000;\n  var2 = 0;\n  var3 = 1;\n  var4 = 2;\n  var5 = 0x10000;\n  var6 = 0x1c0000;\n  status = check_status_08002d98(&flag6);\n  if (status != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x151);\n  }\n  flag1 = 0xf;\n  flag2 = 2;\n  flag3 = 0x80;\n  flag4 = 0;\n  flag5 = 0;\n  status = update_execution_time_08003260(&flag1,2);\n  if (status != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x15e);\n  }\n  constantValue = get_constant_value_08003504();\n  validate_and_return_value_08001762((uint)constantValue / 1000,(int)((ulonglong)constantValue >> 0x20),(uint)constantValue * 0x10624dd3);\n  set_flag_based_on_value_0800177c(4);\n  save_parameter_value_to_memory_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_variables_080052a0",
                "iVar1": "status",
                "uVar2": "constantValue",
                "local_44": "flag1",
                "local_40": "flag2",
                "local_3c": "flag3",
                "local_38": "flag4",
                "local_34": "flag5",
                "local_30": "flag6",
                "local_2c": "var1",
                "local_28": "var2",
                "local_20": "var3",
                "local_14": "var4",
                "local_10": "var5",
                "local_c": "var6"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08005674",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800177c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initialize_data_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = calculate_value(&DAT_20000a88);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result",
                "calculate_value_08001ab0": "calculate_value",
                "infinite_loop_08005674": "handle_error"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_and_configure_080053b0",
            "code": "\nvoid initialize_and_configure_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  undefined4 buffer;\n  undefined4 flag6;\n  undefined4 config1;\n  undefined4 config2;\n  undefined4 config3;\n  undefined4 config4;\n  undefined4 config5;\n  undefined4 config6;\n  undefined4 config7;\n  undefined4 flag8;\n  undefined4 flag9;\n  undefined4 parameters [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = check_and_update_memory_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",399);\n  }\n  parameters[0] = 0x1000;\n  iVar1 = process_data_08003a94(&DAT_20000b1c,parameters);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = validate_parameter_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x198);\n  }\n  flag8 = 0;\n  flag9 = 0;\n  iVar1 = update_flags_and_return_status_080042de(&DAT_20000b1c,&flag8);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x19f);\n  }\n  config1 = 0x60;\n  config2 = 0;\n  config3 = 0;\n  config4 = 0;\n  config5 = 0;\n  config6 = 0;\n  config7 = 0;\n  iVar1 = process_configuration_08003908(&DAT_20000b1c,&config1,0);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = process_configuration_08003908(&DAT_20000b1c,&config1,0xc);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1b0);\n  }\n  flag1 = 0;\n  flag2 = 0;\n  flag3 = 0;\n  flag4 = 0;\n  flag5 = 0;\n  buffer = 0x2000;\n  flag6 = 0;\n  iVar1 = update_config_0800422e(&DAT_20000b1c,&flag1);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1bc);\n  }\n  initialize_flag_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_and_configure_080053b0",
                "local_58": "flag1",
                "local_54": "flag2",
                "local_50": "flag3",
                "local_4c": "flag4",
                "local_48": "flag5",
                "local_44": "buffer",
                "local_40": "flag6",
                "local_3c": "config1",
                "local_38": "config2",
                "local_34": "config3",
                "local_30": "config4",
                "local_2c": "config5",
                "local_28": "config6",
                "local_24": "config7",
                "local_20": "flag8",
                "local_1c": "flag9",
                "local_18": "parameters"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_08003908",
                "FUN_0800422e",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_memory_08005500",
            "code": "\nvoid initializeMemory_08005500(void)\n\n{\n  int iVar1;\n  undefined4 flagSize;\n  undefined4 flagCount;\n  undefined4 memoryLayout [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  iVar1 = check_and_update_memory_080035a4(&DAT_20000b60);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d0);\n  }\n  memoryLayout[0] = 0x1000;\n  iVar1 = process_data_08003a94(&DAT_20000b60,memoryLayout);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d5);\n  }\n  flagSize = 0x20;\n  flagCount = 0;\n  iVar1 = update_flags_and_return_status_080042de(&DAT_20000b60,&flagSize);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_memory_08005500",
                "local_20": "flagSize",
                "local_1c": "flagCount",
                "local_18": "memoryLayout"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_08005598",
            "code": "\nvoid initialize_08005598(void)\n\n{\n  int iVar1;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  iVar1 = initialize_08005598_data(&DAT_20000adc);\n  if (iVar1 != 0) {\n    infinite_loop(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_08005598",
                "initialize_data_0800438a": "initialize_data",
                "infinite_loop_08005674": "infinite_loop"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "update_and_set_parameters_080055f4",
            "code": "\n\n\nvoid updateAndSetParameters_080055f4(void)\n\n{\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  update_param_data_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  param1 = 0x1e;\n  param2 = 1;\n  param3 = 2;\n  update_flag_bits_080017c4(0x40010800,&param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "update_and_set_parameters_080055f4",
                "local_18": "param1",
                "local_14": "param2",
                "local_c": "param3"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_flag_08005680",
            "code": "\nvoid initializeFlag_08005680(int *flagPtr)\n\n{\n  undefined4 flagData;\n  undefined4 flagArg1;\n  undefined4 flagArg2;\n  \n  if (*flagPtr == 0x40012c00) {\n    flagData = 0x900;\n    flagArg1 = 2;\n    flagArg2 = 2;\n    update_flag_bits_080017c4(0x40010800,&flagData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_flag_08005680",
                "param_1": "flagPtr",
                "local_18": "flagData",
                "local_14": "flagArg1",
                "local_c": "flagArg2"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_and_increase_data_08005704",
            "code": "\nvoid initialize_and_increase_data_08005704(void)\n\n{\n  increase_data_by_value();\n  initialize_process();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_and_increase_data_08005704",
                "increase_data_by_value_0800157c": "increase_data_by_value",
                "initialize_process_080017b4": "initialize_process"
            },
            "calling": [],
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_parameters_08005714",
            "code": "\nvoid initializeParameters_08005714(void)\n\n{\n  process_parameters_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_parameters_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *dataPointer;\n  undefined *returnValue;\n  undefined stackBuffer [4];\n  int remainingSize;\n  undefined *currentPointer;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  currentPointer = DAT_20000a10;\n  if (stackBuffer < DAT_20000a10 + size) {\n    remainingSize = size;\n    dataPointer = (undefined4 *)get_data_value_08005d14();\n    *dataPointer = 0xc;\n    returnValue = (undefined *)0xffffffff;\n  }\n  else {\n    returnValue = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "dataPointer",
                "puVar2": "returnValue",
                "auStack_18": "stackBuffer",
                "local_14": "remainingSize",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_register_values_08005780",
            "code": "\n\n\nvoid initializeRegisterValues_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_register_values_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_register_values_08005780();\n  execute_function_set_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_system_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input_value_1,uint input_value_2,uint input_value_3,uint input_value_4)\n\n{\n  int temp_var_1;\n  undefined4 temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined8 temp_var_6;\n  \n  temp_var_4 = input_value_4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp_var_4 | (-input_value_3 | input_value_3) >> 0x1f)) ||\n     (temp_var_5 = input_value_2 & 0x7fffffff, 0x7ff00000 < (temp_var_5 | (-input_value_1 | input_value_1) >> 0x1f))) {\n    temp_var_4 = calculate_concatenation_0800015c(input_value_3,input_value_4,input_value_1,input_value_2);\n    return temp_var_4;\n  }\n  if ((input_value_4 + 0xc0100000 | input_value_3) == 0) {\n    temp_var_4 = calculate_value_080059f0();\n    return temp_var_4;\n  }\n  temp_var_3 = (int)input_value_4 >> 0x1e & 2U | input_value_2 >> 0x1f;\n  if ((temp_var_5 | input_value_1) == 0) {\n    if (temp_var_3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp_var_3 != 3) {\n      return input_value_1;\n    }\n  }\n  else if ((temp_var_4 | input_value_3) != 0) {\n    if (temp_var_4 == 0x7ff00000) {\n      if (temp_var_5 == 0x7ff00000) {\n        if (temp_var_3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp_var_3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp_var_3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp_var_3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp_var_3 != 3) {\n        if (temp_var_3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp_var_5 != 0x7ff00000) {\n      temp_var_1 = (int)(temp_var_5 - temp_var_4) >> 0x14;\n      if (temp_var_1 < 0x3d) {\n        if (((int)input_value_4 < 0) && (temp_var_1 + 0x3c < 0 != SCARRY4(temp_var_1,0x3c))) {\n          temp_var_6 = 0;\n        }\n        else {\n          calculate_float_0800071c(input_value_1,input_value_2,input_value_3,input_value_4,input_value_4);\n          FUNC_08005d0c();\n          temp_var_6 = calculate_value_080059f0();\n        }\n      }\n      else {\n        temp_var_6 = 0x3ff921fb54442d18;\n      }\n      temp_var_2 = (undefined4)((ulonglong)temp_var_6 >> 0x20);\n      temp_var_4 = (uint)temp_var_6;\n      if (temp_var_3 == 1) {\n        return temp_var_4;\n      }\n      if (temp_var_3 == 2) {\n        temp_var_6 = calculate_08000158(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n        temp_var_4 = calculate_08000158(0x54442d18,0x400921fb,(int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20));\n        return temp_var_4;\n      }\n      if (temp_var_3 != 0) {\n        temp_var_6 = calculate_08000158(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n        temp_var_4 = calculate_08000158((int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20),0x54442d18,0x400921fb);\n        return temp_var_4;\n      }\n      return temp_var_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "iVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_value_08005838",
            "code": "\nuint calculate_value_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp4 | (-input3 | input3) >> 0x1f)) ||\n     (temp5 = input2 & 0x7fffffff, 0x7ff00000 < (temp5 | (-input1 | input1) >> 0x1f))) {\n    temp4 = calculate_concatenation_0800015c(input3,input4,input1,input2);\n    return temp4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp4 = calculate_value_08005838_080059f0();\n    return temp4;\n  }\n  temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp5 | input1) == 0) {\n    if (temp3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp3 != 3) {\n      return input1;\n    }\n  }\n  else if ((temp4 | input3) != 0) {\n    if (temp4 == 0x7ff00000) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp3 != 3) {\n        if (temp3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp5 != 0x7ff00000) {\n      temp1 = (int)(temp5 - temp4) >> 0x14;\n      if (temp1 < 0x3d) {\n        if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n          temp6 = 0;\n        }\n        else {\n          calculate_float_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          temp6 = calculate_value_08005838_080059f0();\n        }\n      }\n      else {\n        temp6 = 0x3ff921fb54442d18;\n      }\n      temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp4 = (uint)temp6;\n      if (temp3 == 1) {\n        return temp4;\n      }\n      if (temp3 == 2) {\n        temp6 = calculate_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = calculate_08000158(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        return temp4;\n      }\n      if (temp3 != 0) {\n        temp6 = calculate_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = calculate_08000158((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n        return temp4;\n      }\n      return temp4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_value_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_value_080059f0",
            "code": "\nundefined8 calculate_value_080059f0(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  uint temp_1;\n  int temp_2;\n  undefined8 output_1;\n  undefined8 output_2;\n  \n  output_2 = CONCAT44(input_2,input_1);\n  temp_1 = input_2 & 0x7fffffff;\n  if (temp_1 < 0x44100000) {\n    if (temp_1 < 0x3fdc0000) {\n      if (temp_1 < 0x3e200000) {\n        output_1 = calculate_concatenation_0800015c(input_1,input_2,0x8800759c,0x7e37e43c,input_4);\n        temp_2 = check_if_input_is_empty_080009e8((int)output_1,(int)((ulonglong)output_1 >> 0x20),0,0x3ff00000);\n        if (temp_2 != 0) {\n          return CONCAT44(input_2,input_1);\n        }\n      }\n      temp_2 = -1;\n    }\n    else {\n      output_2 = FUNC_08005d0c();\n      result_4 = (undefined4)((ulonglong)output_2 >> 0x20);\n      result_1 = (undefined4)output_2;\n      if (temp_1 < 0x3ff30000) {\n        if (temp_1 < 0x3fe60000) {\n          output_2 = calculate_concatenation_0800015c(result_1,result_4,result_1,result_4);\n          output_2 = calculate_08000158((int)output_2,(int)((ulonglong)output_2 >> 0x20),0,0x3ff00000);\n          output_1 = calculate_concatenation_0800015c(result_1,result_4,0,0x40000000);\n          output_2 = calculate_float_0800071c((int)output_2,(int)((ulonglong)output_2 >> 0x20),(int)output_1,\n                                (int)((ulonglong)output_1 >> 0x20));\n          temp_2 = 0;\n        }\n        else {\n          output_2 = calculate_08000158(result_1,result_4,0,0x3ff00000);\n          output_1 = calculate_concatenation_0800015c(result_1,result_4,0,0x3ff00000);\n          output_2 = calculate_float_0800071c((int)output_2,(int)((ulonglong)output_2 >> 0x20),(int)output_1,\n                                (int)((ulonglong)output_1 >> 0x20));\n          temp_2 = 1;\n        }\n      }\n      else if (temp_1 < 0x40038000) {\n        output_2 = calculate_08000158(result_1,result_4,0,0x3ff80000);\n        output_1 = calculate_floating_point_080004c8(result_1,result_4,0,0x3ff80000);\n        output_1 = calculate_concatenation_0800015c((int)output_1,(int)((ulonglong)output_1 >> 0x20),0,0x3ff00000);\n        output_2 = calculate_float_0800071c((int)output_2,(int)((ulonglong)output_2 >> 0x20),(int)output_1,\n                              (int)((ulonglong)output_1 >> 0x20));\n        temp_2 = 2;\n      }\n      else {\n        output_2 = calculate_float_0800071c(0,0xbff00000,result_1,result_4);\n        temp_2 = 3;\n      }\n    }\n    result_6 = (undefined4)((ulonglong)output_2 >> 0x20);\n    result_5 = (undefined4)output_2;\n    output_2 = calculate_floating_point_080004c8(result_5,result_6,result_5,result_6);\n    result_2 = (undefined4)((ulonglong)output_2 >> 0x20);\n    result_1 = (undefined4)output_2;\n    output_2 = calculate_floating_point_080004c8(result_1,result_2,result_1,result_2);\n    result_3 = (undefined4)((ulonglong)output_2 >> 0x20);\n    result_4 = (undefined4)output_2;\n    output_2 = calculate_floating_point_080004c8(result_4,result_3,0xe322da11,0x3f90ad3a);\n    output_2 = calculate_concatenation_0800015c((int)output_2,(int)((ulonglong)output_2 >> 0x20),0x24760deb,0x3fa97b4b);\n    output_2 = calculate_floating_point_080004c8((int)output_2,(int)((ulonglong)output_2 >> 0x20),result_4,result_3);\n    output_2 = calculate_concatenation_0800015c((int)output_2,(int)((ulonglong)output_2 >> 0x20),0xa0d03d51,0x3fb10d66);\n    output_2 = calculate_floating_point_080004c8((int)output_2,(int)((ulonglong)output_2 >> 0x20),result_4,result_3);\n    output_2 = calculate_concatenation_0800015c((int)output_2,(int)((ulonglong)output_2 >> 0x20),0xc54c206e,0x3fb745cd);\n    output_2 = calculate_floating_point_080004c8((int)output_2,(int)((ulonglong)output_2 >> 0x20),result_4,result_3);\n    output_2 = calculate_concatenation_0800015c((int)output_2,(int)((ulonglong)output_2 >> 0x20),0x920083ff,0x3fc24924);\n    output_2 = calculate_floating_point_080004c8((int)output_2,(int)((ulonglong)output_2 >> 0x20),result_4,result_3);\n    output_2 = calculate_concatenation_0800015c((int)output_2,(int)((ulonglong)output_2 >> 0x20),0x5555550d,0x3fd55555);\n    output_2 = calculate_floating_point_080004c8((int)output_2,(int)((ulonglong)output_2 >> 0x20),result_1,result_2);\n    output_1 = calculate_floating_point_080004c8(result_4,result_3,0x2c6a6c2f,0xbfa2b444);\n    output_1 = calculate_08000158((int)output_1,(int)((ulonglong)output_1 >> 0x20),0x52defd9a,0x3fadde2d);\n    output_1 = calculate_floating_point_080004c8((int)output_1,(int)((ulonglong)output_1 >> 0x20),result_4,result_3);\n    output_1 = calculate_08000158((int)output_1,(int)((ulonglong)output_1 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    output_1 = calculate_floating_point_080004c8((int)output_1,(int)((ulonglong)output_1 >> 0x20),result_4,result_3);\n    output_1 = calculate_08000158((int)output_1,(int)((ulonglong)output_1 >> 0x20),0xfe231671,0x3fbc71c6);\n    output_1 = calculate_floating_point_080004c8((int)output_1,(int)((ulonglong)output_1 >> 0x20),result_4,result_3);\n    output_1 = calculate_08000158((int)output_1,(int)((ulonglong)output_1 >> 0x20),0x9998ebc4,0x3fc99999);\n    output_1 = calculate_floating_point_080004c8((int)output_1,(int)((ulonglong)output_1 >> 0x20),result_4,result_3);\n    output_2 = calculate_concatenation_0800015c((int)output_2,(int)((ulonglong)output_2 >> 0x20),(int)output_1,\n                          (int)((ulonglong)output_1 >> 0x20));\n    output_2 = calculate_floating_point_080004c8((int)output_2,(int)((ulonglong)output_2 >> 0x20),result_5,result_6);\n    result_1 = (undefined4)((ulonglong)output_2 >> 0x20);\n    if (temp_2 == -1) {\n      output_2 = calculate_08000158(result_5,result_6,(int)output_2,result_1);\n      return output_2;\n    }\n    temp_2 = temp_2 * 8;\n    output_2 = calculate_08000158((int)output_2,result_1,*(undefined4 *)(&UNK_08009ee8 + temp_2),\n                          *(undefined4 *)(&UNK_08009eec + temp_2));\n    output_2 = calculate_08000158((int)output_2,(int)((ulonglong)output_2 >> 0x20),result_5,result_6);\n    output_2 = calculate_08000158(*(undefined4 *)(&UNK_08009ec8 + temp_2),\n                          *(undefined4 *)(&UNK_08009ecc + temp_2),(int)output_2,\n                          (int)((ulonglong)output_2 >> 0x20));\n    if ((int)input_2 < 0) {\n      return CONCAT44((int)((ulonglong)output_2 >> 0x20) + -0x80000000,(int)output_2);\n    }\n  }\n  else {\n    if ((temp_1 < 0x7ff00001) && ((temp_1 != 0x7ff00000 || (input_1 == 0)))) {\n      result_1 = 0xbff921fb;\n      if (0 < (int)input_2) {\n        result_1 = 0x3ff921fb;\n      }\n      return CONCAT44(result_1,0x54442d18);\n    }\n    output_2 = calculate_concatenation_0800015c(input_1,input_2,input_1,input_2,input_4);\n  }\n  return output_2;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_value_080059f0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "result_6",
                "uVar7": "temp_1",
                "iVar8": "temp_2",
                "uVar9": "output_1",
                "uVar10": "output_2"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_data_value_08005d14",
            "code": "\nundefined4 get_data_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_data_value_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_function_set_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctionSet_08005d20(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  FUNC_08009e68();\n  iterationCount = 0;\n  functionPointerArray = (code **)&DAT_0800a198;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_function_set_08005d20",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_08005d68",
            "code": "\nvoid fillMemory_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  uint remainingSize;\n  undefined4 packedValue;\n  bool isZeroSize;\n  \n  if (((uint)dest & 3) != 0) {\n    remainingSize = size - 1;\n    ptr1 = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = value;\n      size = remainingSize;\n      if (((uint)dest & 3) == 0) break;\n      isZeroSize = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      ptr1 = dest;\n      if (isZeroSize) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    packedValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    ptr1 = dest;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      ptr1 = dest + 4;\n      do {\n        ptr1[-4] = packedValue;\n        ptr1[-3] = packedValue;\n        ptr1[-2] = packedValue;\n        ptr1[-1] = packedValue;\n        ptr1 = ptr1 + 4;\n      } while (ptr1 != (undefined4 *)((int)dest + (remainingSize & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      ptr1 = dest;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *dest = packedValue;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)ptr1 + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    ptr1 = dest;\n    do {\n      ptr2 = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = value;\n      ptr1 = ptr2;\n    } while ((undefined4 *)(size + (int)dest) != ptr2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "remainingSize",
                "uVar4": "packedValue",
                "bVar5": "isZeroSize"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_memory_08005dfc",
            "code": "\nvoid initializeMemory_08005dfc(undefined *memoryBlock,undefined4 size,undefined4 param3,undefined4 param4)\n\n{\n  undefined *tempMemory [2];\n  undefined4 maxValue1;\n  undefined4 maxValue2;\n  undefined *currentMemory;\n  undefined4 defaultValue;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  defaultValue = 0x7fffffff;\n  maxValue1 = 0x7fffffff;\n  maxValue2 = 0xffff0208;\n  tempMemory[0] = memoryBlock;\n  currentMemory = memoryBlock;\n  param3Copy = param3;\n  param4Copy = param4;\n  FUNC_08005e9c(DAT_2000001c,tempMemory,size,&param3Copy);\n  *tempMemory[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_memory_08005dfc",
                "param_1": "memoryBlock",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "tempMemory",
                "local_78": "maxValue1",
                "uStack_74": "maxValue2",
                "local_70": "currentMemory",
                "local_6c": "defaultValue",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "find_offset_08005e40",
            "code": "\nint find_offset_08005e40(uint input)\n\n{\n  int alignment_offset;\n  uint *pointer;\n  uint value;\n  \n  pointer = (uint *)(input & 0xfffffffc);\n  alignment_offset = -(input & 3);\n  value = *pointer;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((alignment_offset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    pointer = pointer + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *pointer;\n    alignment_offset = alignment_offset + 4;\n  }\n  return alignment_offset + (0x1fU - LZCOUNT(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "find_offset_08005e40",
                "param_1": "input",
                "iVar1": "alignment_offset",
                "puVar2": "pointer",
                "uVar3": "value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)calculate_offset_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)find_offset_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = allocate_and_store_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = calculate_offset_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)find_offset_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = calculate_offset_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_parameters_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = validate_and_return_result_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = is_cy_null_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_parameters_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)allocate_and_store_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_float_value_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_floating_point_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_parameter_validity_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_float_value_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_floating_point_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_parameter_validity_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_double_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = check_parameter_validity_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_double_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)convert_double_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = check_parameter_validity_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)find_offset_08005e40(piVar23);\n        }\n        else {\n          iVar3 = find_byte_sequence_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_bytes_with_filter_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    process_data_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = check_parameter_validity_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_floating_point_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = calculate_result_0800119c();\n    uVar34 = calculate_shifted_value_080003f4();\n    uVar33 = calculate_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = check_if_input_is_empty_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = check_parameter_validity_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = process_data_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = process_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = process_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = check_parameter_validity_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = check_parameter_validity_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = process_data_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = process_data_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = process_data_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_and_allocate_memory_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_and_allocate_memory_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08005e40",
                "FUN_0800119c",
                "FUN_080011ec",
                "FUN_080009c0",
                "FUN_08008ad4",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_080009e8",
                "FUN_0800901c",
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080096e0",
                "FUN_080088ec",
                "FUN_080079e8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_quotient_080078c0",
            "code": "\nuint calculateQuotient_080078c0(int dividend,int divisor)\n\n{\n  uint quotient;\n  uint *ptrDividend;\n  int carry;\n  int dividendSize;\n  int lastIndex;\n  uint quotientInc;\n  uint *ptrDivisor;\n  uint *ptrQuotient;\n  uint *ptrLastDivisor;\n  uint carryInc;\n  uint *ptrCurDivisor;\n  uint *ptrNextDivisor;\n  \n  dividendSize = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < dividendSize) {\n    return 0;\n  }\n  lastIndex = dividendSize + -1;\n  ptrDivisor = (uint *)(divisor + 0x14);\n  ptrQuotient = (uint *)(dividend + 0x14);\n  quotientInc = ptrQuotient[lastIndex] / (ptrDivisor[lastIndex] + 1);\n  ptrLastDivisor = ptrDivisor + lastIndex;\n  if (quotientInc != 0) {\n    quotient = 0;\n    carry = 0;\n    ptrDividend = ptrQuotient;\n    ptrCurDivisor = ptrDivisor;\n    do {\n      ptrNextDivisor = ptrCurDivisor + 1;\n      quotient = quotientInc * (*ptrCurDivisor & 0xffff) + quotient;\n      carryInc = quotientInc * (*ptrCurDivisor >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*ptrDividend & 0xffff);\n      carry = ((*ptrDividend >> 0x10) - (carryInc & 0xffff)) + ((int)quotient >> 0x10);\n      *ptrDividend = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = carryInc >> 0x10;\n      ptrDividend = ptrDividend + 1;\n      ptrCurDivisor = ptrNextDivisor;\n    } while (ptrNextDivisor <= ptrLastDivisor);\n    if (ptrQuotient[lastIndex] == 0) {\n      if ((ptrQuotient < ptrQuotient + dividendSize + -2) && (ptrQuotient[dividendSize + -2] == 0)) {\n        ptrDividend = ptrQuotient + dividendSize + -3;\n        do {\n          lastIndex = lastIndex + -1;\n          if (ptrDividend <= ptrQuotient) break;\n          quotient = *ptrDividend;\n          ptrDividend = ptrDividend + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = lastIndex;\n    }\n  }\n  dividendSize = compare_arrays_080094f8();\n  if (-1 < dividendSize) {\n    dividendSize = 0;\n    quotientInc = quotientInc + 1;\n    ptrDividend = ptrQuotient;\n    do {\n      ptrCurDivisor = ptrDivisor + 1;\n      quotient = (dividendSize - (*ptrDivisor & 0xffff)) + (*ptrDividend & 0xffff);\n      dividendSize = ((*ptrDividend >> 0x10) - (*ptrDivisor >> 0x10)) + ((int)quotient >> 0x10);\n      *ptrDividend = quotient & 0xffff | dividendSize * 0x10000;\n      dividendSize = dividendSize >> 0x10;\n      ptrDividend = ptrDividend + 1;\n      ptrDivisor = ptrCurDivisor;\n    } while (ptrCurDivisor <= ptrLastDivisor);\n    if (ptrQuotient[lastIndex] == 0) {\n      if ((ptrQuotient < ptrQuotient + lastIndex + -1) && (ptrQuotient[lastIndex + -1] == 0)) {\n        ptrDivisor = ptrQuotient + lastIndex + -2;\n        do {\n          lastIndex = lastIndex + -1;\n          if (ptrDivisor <= ptrQuotient) break;\n          quotient = *ptrDivisor;\n          ptrDivisor = ptrDivisor + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = lastIndex;\n    }\n  }\n  return quotientInc;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_quotient_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "ptrDividend",
                "iVar3": "carry",
                "iVar4": "dividendSize",
                "iVar5": "lastIndex",
                "uVar6": "quotientInc",
                "puVar7": "ptrDivisor",
                "puVar8": "ptrQuotient",
                "puVar9": "ptrLastDivisor",
                "uVar10": "carryInc",
                "puVar11": "ptrCurDivisor",
                "puVar12": "ptrNextDivisor"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_double_to_string_080079e8",
            "code": "\nchar * convertDoubleToString_080079e8(int value,undefined4 type,uint signBit,uint exponent,uint numFractionBits,\n                   uint fractionBits,int *errorCode,uint *isNegative,char **formattedString)\n\n{\n  bool isInfinity;\n  bool isZero;\n  bool useAbbreviatedNotation;\n  char digit;\n  byte isRoundedUp;\n  undefined4 memory;\n  int numDigits;\n  int iterator2;\n  int comparison;\n  char *pcVar10;\n  uint exponentBits;\n  undefined4 mantissaBits;\n  undefined4 tempValue;\n  int memoryPointer1;\n  int iterator;\n  undefined4 tempBits;\n  uint mantissa;\n  uint tempExponent;\n  int carry;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 tempBits2;\n  int charValue;\n  bool isZero5;\n  undefined8 result;\n  undefined8 tempValue2;\n  undefined8 tempBits3;\n  uint fraction;\n  uint exponent;\n  uint errorCode;\n  int fractionBitsOffset;\n  uint estimatedDigits;\n  int numDigitsLeft;\n  int exponentOffset;\n  uint numNonZeroDigits;\n  uint digit;\n  uint concatenatedBits;\n  uint decimalPosition;\n  uint numNonZeroDigitsAfterRounding;\n  int numDigitsAfterRounding;\n  int numFixedDecimalDigits [2];\n  \n  memoryPointer1 = *(int *)(value + 0x40);\n  if (memoryPointer1 != 0) {\n    tempExponent = *(uint *)(value + 0x44);\n    *(uint *)(memoryPointer1 + 4) = tempExponent;\n    *(int *)(memoryPointer1 + 8) = 1 << (tempExponent & 0xff);\n    copy_value_and_swap_0800910c(value,memoryPointer1);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  isZero5 = (int)exponent < 0;\n  tempExponent = exponent;\n  if (isZero5) {\n    tempExponent = exponent & 0x7fffffff;\n  }\n  *isNegative = (uint)isZero5;\n  exponent = exponent;\n  if (isZero5) {\n    exponent = tempExponent;\n  }\n  mantissa = exponent;\n  if ((~tempExponent & 0x7ff00000) == 0) {\n    *errorCode = 9999;\n    if ((signBit == 0) && ((tempExponent & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (formattedString == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (formattedString == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *formattedString = pcVar21;\n    return pcVar10;\n  }\n  result = check_parameter_validity_08000998(signBit,exponent,0,0);\n  if ((int)result != 0) {\n    *errorCode = 1;\n    if (formattedString != (char **)0x0) {\n      *formattedString = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  memory = initialize_memory_08009630(value,(int)((ulonglong)result >> 0x20),signBit,exponent,numFixedDecimalDigits,&numDigitsAfterRounding)\n  ;\n  memoryPointer1 = numDigitsAfterRounding;\n  if (tempExponent >> 0x14 == 0) {\n    carry = numFixedDecimalDigits[0] + numDigitsAfterRounding;\n    iterator = carry + 0x432;\n    if (iterator < 0x21) {\n      tempExponent = signBit << (0x20U - iterator & 0xff);\n    }\n    else {\n      tempExponent = signBit >> (carry + 0x412U & 0xff) | tempExponent << (0x40U - iterator & 0xff);\n    }\n    result = extracted_binary_function_080003d4(tempExponent);\n    carry = carry + -1;\n    isZero5 = true;\n    exponentBits = (int)((ulonglong)result >> 0x20) + 0xfe100000;\n    tempExponent = (uint)result;\n  }\n  else {\n    carry = (tempExponent >> 0x14) - 0x3ff;\n    exponentBits = exponent & 0xfffff | 0x3ff00000;\n    isZero5 = false;\n    tempExponent = signBit;\n  }\n  result = calculate_08000158(tempExponent,exponentBits,0,0x3ff80000);\n  result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),0x636f4361,0x3fd287a7);\n  result = calculate_concatenation_0800015c((int)result,(int)((ulonglong)result >> 0x20),0x8b60c8b3,0x3fc68a28);\n  tempValue2 = calculate_shifted_value_080003f4(carry);\n  tempValue2 = calculate_floating_point_080004c8((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x509f79fb,0x3fd34413);\n  result = calculate_concatenation_0800015c((int)result,(int)((ulonglong)result >> 0x20),(int)tempValue2,\n                        (int)((ulonglong)tempValue2 >> 0x20));\n  tempValue = (undefined4)((ulonglong)result >> 0x20);\n  errorCode = calculate_result_0800119c();\n  iterator = is_cy_null_080009ac((int)result,tempValue,0,0);\n  if (iterator != 0) {\n    tempValue2 = calculate_shifted_value_080003f4(errorCode);\n    iterator = check_parameter_validity_08000998((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)result,tempValue);\n    if (iterator == 0) {\n      errorCode = errorCode - 1;\n    }\n  }\n  if (errorCode < 0x17) {\n    iterator = check_if_input_is_empty_080009e8(*(undefined4 *)(&DAT_08009fa8 + errorCode * 8),\n                          *(undefined4 *)(&DAT_08009fac + errorCode * 8),signBit,exponent);\n    if (iterator == 0) {\n      isZero = false;\n    }\n    else {\n      errorCode = errorCode - 1;\n      isZero = false;\n    }\n  }\n  else {\n    isZero = true;\n  }\n  iterator = (memoryPointer1 - carry) + -1;\n  if (iterator < 0) {\n    fractionBitsOffset = 1 - (memoryPointer1 - carry);\n    iterator = 0;\n  }\n  else {\n    fractionBitsOffset = 0;\n  }\n  if ((int)errorCode < 0) {\n    numNonZeroDigits = 0;\n    fractionBitsOffset = fractionBitsOffset - errorCode;\n    exponentOffset = -errorCode;\n  }\n  else {\n    iterator = iterator + errorCode;\n    numNonZeroDigits = errorCode;\n    exponentOffset = 0;\n  }\n  if (9 < numFractionBits) {\n    decimalPosition = 0xffffffff;\n    isInfinity = true;\n    estimatedDigits = 0xffffffff;\n    useAbbreviatedNotation = true;\n    numFractionBits = 0;\n    fractionBits = 0;\n    goto LAB_08007c24;\n  }\n  isInfinity = (int)numFractionBits < 6;\n  if (!isInfinity) {\n    numFractionBits = numFractionBits - 4;\n  }\n  switch(numFractionBits) {\n  case 2:\n    useAbbreviatedNotation = false;\n    break;\n  case 3:\n    useAbbreviatedNotation = false;\n    goto LAB_08008300;\n  case 4:\n    useAbbreviatedNotation = true;\n    break;\n  case 5:\n    useAbbreviatedNotation = true;\nLAB_08008300:\n    decimalPosition = errorCode + fractionBits;\n    estimatedDigits = decimalPosition + 1;\n    tempExponent = estimatedDigits;\n    if ((int)estimatedDigits < 1) {\n      tempExponent = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    pcVar10 = (char *)allocate_and_initialize_memory_080090c0(value,0);\n    decimalPosition = 0xffffffff;\n    estimatedDigits = 0xffffffff;\n    fractionBits = 0;\n    *(char **)(value + 0x40) = pcVar10;\n    useAbbreviatedNotation = true;\n    goto LAB_08007e36;\n  }\n  if ((int)fractionBits < 1) {\n    decimalPosition = 1;\n    fractionBits = 1;\n    estimatedDigits = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    exponentBits = decimalPosition;\n  }\n  else {\n    decimalPosition = fractionBits;\n    estimatedDigits = fractionBits;\n    tempExponent = fractionBits;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    exponentBits = estimatedDigits;\n    if (0x17 < (int)tempExponent) {\n      carry = 4;\n      memoryPointer1 = 1;\n      do {\n        numDigits = memoryPointer1;\n        carry = carry * 2;\n        memoryPointer1 = numDigits + 1;\n      } while (carry + 0x14U <= tempExponent);\n      *(int *)(value + 0x44) = numDigits;\n    }\n  }\n  pcVar10 = (char *)allocate_and_initialize_memory_080090c0(value);\n  *(char **)(value + 0x40) = pcVar10;\n  if ((exponentBits < 0xf) && (isInfinity)) {\n    if ((int)errorCode < 1) {\n      if (errorCode == 0) {\n        memoryPointer1 = 2;\n        fraction = signBit;\n      }\n      else {\n        memoryPointer1 = (-errorCode & 0xf) * 8;\n        result = calculate_floating_point_080004c8(signBit,exponent,*(undefined4 *)(&DAT_08009fa8 + memoryPointer1),\n                              *(undefined4 *)(&DAT_08009fac + memoryPointer1));\n        exponent = (uint)((ulonglong)result >> 0x20);\n        fraction = (uint)result;\n        carry = (int)-errorCode >> 4;\n        if (carry == 0) {\n          memoryPointer1 = 2;\n        }\n        else {\n          isInfinity = false;\n          memoryPointer1 = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (carry << 0x1f < 0) {\n              result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),*puVar22,puVar22[1]\n                                   );\n              isInfinity = true;\n              memoryPointer1 = memoryPointer1 + 1;\n            }\n            carry = carry >> 1;\n            puVar22 = puVar22 + 2;\n          } while (carry != 0);\n          if (isInfinity) {\n            fraction = (uint)result;\n            exponent = (uint)((ulonglong)result >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      tempExponent = (int)errorCode >> 4;\n      tempValue2 = *(undefined8 *)(&DAT_08009fa8 + (errorCode & 0xf) * 8);\n      result = *(undefined8 *)(&DAT_08009fa8 + (errorCode & 0xf) * 8);\n      if ((int)(tempExponent << 0x1b) < 0) {\n        tempBits3 = calculate_float_0800071c(signBit,exponent,0x7f73bf3c,0x75154fdd);\n        concatenatedBits = (uint)((ulonglong)tempBits3 >> 0x20);\n        digit = (uint)tempBits3;\n        memoryPointer1 = 3;\n        tempExponent = tempExponent & 0xf;\n      }\n      else {\n        memoryPointer1 = 2;\n        concatenatedBits = exponent;\n        digit = signBit;\n      }\n      if (tempExponent != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(tempExponent << 0x1f) < 0) {\n            result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),*puVar22,puVar22[1]);\n            memoryPointer1 = memoryPointer1 + 1;\n          }\n          tempExponent = (int)tempExponent >> 1;\n          puVar22 = puVar22 + 2;\n          tempValue2 = result;\n        } while (tempExponent != 0);\n      }\n      exponent = (uint)((ulonglong)tempValue2 >> 0x20);\n      fraction = (uint)tempValue2;\n      result = calculate_float_0800071c(digit,concatenatedBits,fraction,exponent);\n      fraction = (uint)result;\n      exponent = (uint)((ulonglong)result >> 0x20);\n    }\n    result = CONCAT44(exponent,fraction);\n    if ((isZero) && (carry = is_cy_null_080009ac(fraction,exponent,0,0x3ff00000), carry != 0)) {\n      if (estimatedDigits == 0) {\n        result = calculate_shifted_value_080003f4(memoryPointer1);\n        result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),fraction,exponent);\n        result = calculate_concatenation_0800015c((int)result,(int)((ulonglong)result >> 0x20),0,0x401c0000);\n        tempValue = (undefined4)result;\n        memoryPointer1 = (int)((ulonglong)result >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)decimalPosition) {\n        result = calculate_floating_point_080004c8(fraction,exponent,0,0x40240000);\n        tempValue2 = calculate_shifted_value_080003f4(memoryPointer1 + 1);\n        tempValue2 = calculate_floating_point_080004c8((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)result,\n                              (int)((ulonglong)result >> 0x20));\n        tempValue2 = calculate_concatenation_0800015c((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0,0x401c0000);\n        tempValue = (undefined4)tempValue2;\n        digit = decimalPosition;\n        numNonZeroDigitsAfterRounding = errorCode - 1;\n        memoryPointer1 = (int)((ulonglong)tempValue2 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    tempValue2 = calculate_shifted_value_080003f4(memoryPointer1);\n    tempValue2 = calculate_floating_point_080004c8((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),fraction,exponent);\n    tempValue2 = calculate_concatenation_0800015c((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0,0x401c0000);\n    tempValue = (undefined4)tempValue2;\n    memoryPointer1 = (int)((ulonglong)tempValue2 >> 0x20) + -0x3400000;\n    if (estimatedDigits != 0) {\n      numNonZeroDigitsAfterRounding = errorCode;\n      digit = estimatedDigits;\nLAB_08007cfa:\n      exponent = (uint)((ulonglong)result >> 0x20);\n      fraction = (uint)result;\n      digit = calculate_result_0800119c(fraction,exponent);\n      digit = digit + '0';\n      tempBits = (&DAT_08009fa0)[digit * 2];\n      mantissaBits = (&DAT_08009fa4)[digit * 2];\n      result = calculate_shifted_value_080003f4();\n      result = calculate_08000158(fraction,exponent,(int)result,(int)((ulonglong)result >> 0x20));\n      tempBits2 = (undefined4)((ulonglong)result >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (useAbbreviatedNotation) {\n        tempValue2 = calculate_float_0800071c(0,0x3fe00000,tempBits,mantissaBits);\n        tempValue2 = calculate_08000158((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),tempValue,memoryPointer1);\n        tempValue = (undefined4)((ulonglong)tempValue2 >> 0x20);\n        *pcVar10 = digit;\n        memoryPointer1 = check_if_input_is_empty_080009e8((int)tempValue2,tempValue,(int)result,tempBits2);\n        if (memoryPointer1 != 0) {\nLAB_08008784:\n          errorCode = numNonZeroDigitsAfterRounding;\n          goto LAB_08008294;\n        }\n        tempBits3 = calculate_08000158(0,0x3ff00000,(int)result,tempBits2);\n        memoryPointer1 = check_if_input_is_empty_080009e8((int)tempValue2,tempValue,(int)tempBits3,(int)((ulonglong)tempBits3 >> 0x20));\n        if (memoryPointer1 == 0) {\n          if (digit != 1) {\n            pcVar20 = pcVar21;\n            do {\n              tempValue2 = calculate_floating_point_080004c8((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0,0x40240000);\n              tempValue = (undefined4)((ulonglong)tempValue2 >> 0x20);\n              result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),0,0x40240000);\n              digit = calculate_result_0800119c();\n              tempBits3 = calculate_shifted_value_080003f4();\n              result = calculate_08000158((int)result,(int)((ulonglong)result >> 0x20),(int)tempBits3,\n                                    (int)((ulonglong)tempBits3 >> 0x20));\n              tempBits = (undefined4)((ulonglong)result >> 0x20);\n              digit = digit + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = digit;\n              memoryPointer1 = is_cy_null_080009ac((int)result,tempBits,(int)tempValue2,tempValue);\n              if (memoryPointer1 != 0) {\n                errorCode = numNonZeroDigitsAfterRounding;\n                goto LAB_08008294;\n              }\n              tempBits3 = calculate_08000158(0,0x3ff00000,(int)result,tempBits);\n              memoryPointer1 = is_cy_null_080009ac((int)tempBits3,(int)((ulonglong)tempBits3 >> 0x20),(int)tempValue2,tempValue)\n              ;\n              if (memoryPointer1 != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + digit);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        errorCode = numNonZeroDigitsAfterRounding;\n      }\n      else {\n        tempValue2 = calculate_floating_point_080004c8(tempValue,memoryPointer1,tempBits,mantissaBits);\n        tempValue = (undefined4)((ulonglong)tempValue2 >> 0x20);\n        *pcVar10 = digit;\n        if (digit != 1) {\n          pcVar20 = pcVar21;\n          do {\n            result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),0,0x40240000);\n            digit = calculate_result_0800119c();\n            tempBits3 = calculate_shifted_value_080003f4();\n            result = calculate_08000158((int)result,(int)((ulonglong)result >> 0x20),(int)tempBits3,\n                                  (int)((ulonglong)tempBits3 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = digit + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + digit);\n        }\n        tempBits = (undefined4)((ulonglong)result >> 0x20);\n        tempBits3 = calculate_concatenation_0800015c((int)tempValue2,tempValue,0,0x3fe00000);\n        memoryPointer1 = is_cy_null_080009ac((int)tempBits3,(int)((ulonglong)tempBits3 >> 0x20),(int)result,tempBits);\n        if (memoryPointer1 == 0) {\n          tempValue2 = calculate_08000158(0,0x3fe00000,(int)tempValue2,tempValue);\n          memoryPointer1 = check_if_input_is_empty_080009e8((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)result,tempBits);\n          pcVar20 = pcVar21;\n          if (memoryPointer1 == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        errorCode = numNonZeroDigitsAfterRounding;\n        digit = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    result = calculate_08000158(fraction,exponent,0,0x40140000);\n    tempBits = (undefined4)((ulonglong)result >> 0x20);\n    carry = check_if_input_is_empty_080009e8((int)result,tempBits,tempValue,memoryPointer1);\n    if (carry == 0) {\n      memoryPointer1 = is_cy_null_080009ac((int)result,tempBits,tempValue,memoryPointer1 + -0x80000000);\n      if (memoryPointer1 == 0) goto LAB_08007e36;\n      carry = 0;\n      memoryPointer1 = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    iterator = 0;\n    numDigits = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    errorCode = errorCode + 1;\n    pcVar21 = pcVar10 + 1;\n    carry = numDigits;\n    memoryPointer1 = iterator;\nLAB_08008416:\n    copy_value_and_swap_0800910c(value,memoryPointer1);\n    if (carry == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < numFixedDecimalDigits[0]) && ((int)errorCode < 0xf)) {\n      tempValue = *(undefined4 *)(&DAT_08009fa8 + errorCode * 8);\n      tempBits = *(undefined4 *)(&DAT_08009fac + errorCode * 8);\n      if ((-1 < (int)fractionBits) || (0 < (int)estimatedDigits)) {\n        calculate_float_0800071c(signBit,mantissa,tempValue,tempBits);\n        isRoundedUp = calculate_result_0800119c();\n        result = calculate_shifted_value_080003f4();\n        result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),tempValue,tempBits);\n        result = calculate_08000158(signBit,mantissa,(int)result,(int)((ulonglong)result >> 0x20));\n        *pcVar10 = isRoundedUp + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (estimatedDigits != 1) {\n          result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),0,0x40240000);\n          memoryPointer1 = check_parameter_validity_08000998((int)result,(int)((ulonglong)result >> 0x20),0,0);\n          while (memoryPointer1 == 0) {\n            tempBits2 = (undefined4)((ulonglong)result >> 0x20);\n            calculate_float_0800071c((int)result,tempBits2,tempValue,tempBits);\n            isRoundedUp = calculate_result_0800119c();\n            tempValue2 = calculate_shifted_value_080003f4();\n            tempValue2 = calculate_floating_point_080004c8((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),tempValue,tempBits);\n            result = calculate_08000158((int)result,tempBits2,(int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = isRoundedUp + 0x30;\n            pcVar21 = pcVar20;\n            if (estimatedDigits == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            result = calculate_floating_point_080004c8((int)result,(int)((ulonglong)result >> 0x20),0,0x40240000);\n            memoryPointer1 = check_parameter_validity_08000998((int)result,(int)((ulonglong)result >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        result = calculate_concatenation_0800015c((int)result,(int)((ulonglong)result >> 0x20));\n        tempBits2 = (undefined4)((ulonglong)result >> 0x20);\n        memoryPointer1 = check_if_input_is_empty_080009e8((int)result,tempBits2,tempValue,tempBits);\n        if ((memoryPointer1 == 0) &&\n           ((memoryPointer1 = check_parameter_validity_08000998((int)result,tempBits2,tempValue,tempBits), memoryPointer1 == 0 ||\n            ((isRoundedUp & 1) == 0)))) goto LAB_08008294;\n        digit = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, digit == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            digit = pcVar21[-1];\n            errorCode = errorCode + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          digit = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (estimatedDigits == 0) {\n        result = calculate_floating_point_080004c8(tempValue,tempBits,0,0x40140000);\n        comparison = validate_and_return_080009d4((int)result,(int)((ulonglong)result >> 0x20),signBit,mantissa);\n        carry = 0;\n        iterator = 0;\n        numDigits = 0;\n        memoryPointer1 = 0;\n        if (comparison == 0) goto LAB_08008406;\n      }\n      else {\n        carry = 0;\n        memoryPointer1 = 0;\n      }\nLAB_080084f0:\n      errorCode = ~fractionBits;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    memoryPointer1 = exponentOffset;\n    if (useAbbreviatedNotation) {\n      if ((int)numFractionBits < 2) {\n        if (isZero5) {\n          numDigitsLeft = fractionBitsOffset;\n          fractionBitsOffset = fractionBitsOffset + numFixedDecimalDigits[0] + 0x433;\n          iterator = iterator + numFixedDecimalDigits[0] + 0x433;\n        }\n        else {\n          numDigitsLeft = fractionBitsOffset;\n          fractionBitsOffset = fractionBitsOffset + (0x36 - numDigitsAfterRounding);\n          iterator = iterator + (0x36 - numDigitsAfterRounding);\n        }\n      }\n      else {\n        carry = estimatedDigits - 1;\n        if (exponentOffset < carry) {\n          numNonZeroDigits = numNonZeroDigits + (carry - exponentOffset);\n          memoryPointer1 = 0;\n          exponentOffset = carry;\n        }\n        else {\n          memoryPointer1 = exponentOffset - carry;\n        }\n        if ((int)estimatedDigits < 0) {\n          numDigitsLeft = fractionBitsOffset - estimatedDigits;\n        }\n        else {\n          iterator = iterator + estimatedDigits;\n          numDigitsLeft = fractionBitsOffset;\n          fractionBitsOffset = fractionBitsOffset + estimatedDigits;\n        }\n      }\n      carry = initialize_memory_08009244(value,1);\n    }\n    else {\n      numDigitsLeft = fractionBitsOffset;\n      carry = 0;\n    }\n    if ((0 < numDigitsLeft) && (0 < iterator)) {\n      numDigits = numDigitsLeft;\n      if (iterator <= numDigitsLeft) {\n        numDigits = iterator;\n      }\n      iterator = iterator - numDigits;\n      fractionBitsOffset = fractionBitsOffset - numDigits;\n      numDigitsLeft = numDigitsLeft - numDigits;\n    }\n    if (exponentOffset != 0) {\n      if (useAbbreviatedNotation) {\n        tempValue = memory;\n        if (memoryPointer1 != 0) {\n          carry = process_data_080093a4(value,carry,memoryPointer1);\n          tempValue = allocate_and_initialize_memory_08009258(value,carry,memory);\n          copy_value_and_swap_0800910c(value,memory);\n          memory = tempValue;\n          if (exponentOffset - memoryPointer1 == 0) goto LAB_08008062;\n        }\n        memory = process_data_080093a4(value,tempValue,exponentOffset - memoryPointer1);\n      }\n      else {\n        memory = process_data_080093a4(value,memory,exponentOffset);\n      }\n    }\nLAB_08008062:\n    memoryPointer1 = initialize_memory_08009244(value,1);\n    if (numNonZeroDigits == 0) {\n      if (((int)numFractionBits < 2) && (signBit == 0)) {\nLAB_0800835a:\n        if ((mantissa & 0xfffff) == 0) {\n          mantissa = mantissa & 0x7ff00000;\n          if (mantissa != 0) {\n            iterator = iterator + 1;\n            fractionBitsOffset = fractionBitsOffset + 1;\n            mantissa = 1;\n          }\n        }\n        else {\n          mantissa = 0;\n        }\n        isZero5 = numNonZeroDigits != 0;\n        tempExponent = signBit;\n        numNonZeroDigits = mantissa;\n        if (isZero5) goto LAB_080082d4;\n      }\n      numDigits = 1;\n    }\n    else {\n      result = process_data_080093a4(value,memoryPointer1);\n      memoryPointer1 = (int)result;\n      if (((int)numFractionBits < 2) && (signBit == 0)) goto LAB_0800835a;\n      numNonZeroDigits = 0;\n      tempExponent = (uint)((ulonglong)result >> 0x20);\nLAB_080082d4:\n      numDigits = count_leading_zeros_080091a4(*(undefined4 *)(memoryPointer1 + *(int *)(memoryPointer1 + 0x10) * 4 + 0x10),tempExponent);\n      numDigits = 0x20 - numDigits;\n    }\n    tempExponent = numDigits + iterator & 0x1f;\n    if (tempExponent == 0) {\n      numDigits = 0x1c;\nLAB_08008096:\n      iterator = iterator + numDigits;\n      fractionBitsOffset = fractionBitsOffset + numDigits;\n      numDigitsLeft = numDigitsLeft + numDigits;\n    }\n    else {\n      if (4 < (int)(0x20 - tempExponent)) {\n        numDigits = 0x1c - tempExponent;\n        goto LAB_08008096;\n      }\n      if (0x20 - tempExponent != 4) {\n        numDigits = 0x3c - tempExponent;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < fractionBitsOffset) {\n      memory = initialize_memory_08009444(value,memory,fractionBitsOffset);\n    }\n    if (0 < iterator) {\n      memoryPointer1 = initialize_memory_08009444(value,memoryPointer1,iterator);\n    }\n    pcVar20 = pcVar10;\n    if ((isZero) && (iterator = compare_arrays_080094f8(memory,memoryPointer1), iterator < 0)) {\n      errorCode = errorCode - 1;\n      memory = calculate_product_and_sum_08009120(value,memory,10,0);\n      if (useAbbreviatedNotation) {\n        carry = calculate_product_and_sum_08009120(value,carry,10,0);\n        if ((0 < (int)decimalPosition) || ((int)numFractionBits < 3)) {\n          estimatedDigits = decimalPosition;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)decimalPosition) || ((int)numFractionBits < 3)) {\n        estimatedDigits = decimalPosition;\n        goto LAB_0800820a;\n      }\n      estimatedDigits = decimalPosition;\nLAB_080084e8:\n      if (estimatedDigits == 0) {\n        iterator = calculate_product_and_sum_08009120(value,memoryPointer1,5);\n        comparison = compare_arrays_080094f8(memory,iterator);\n        numDigits = carry;\n        memoryPointer1 = iterator;\n        if (0 < comparison) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)estimatedDigits < 1) && (2 < (int)numFractionBits)) goto LAB_080084e8;\n    if (useAbbreviatedNotation) {\nLAB_080080de:\n      fraction = carry;\n      if (0 < numDigitsLeft) {\n        fraction = initialize_memory_08009444(value,carry,numDigitsLeft);\n      }\n      carry = fraction;\n      if (numNonZeroDigits != 0) {\n        carry = allocate_and_initialize_memory_080090c0(value,*(undefined4 *)(fraction + 4));\n        copy_and_advance_pointer_08001084(carry + 0xc,fraction + 0xc,(*(int *)(fraction + 0x10) + 2) * 4);\n        carry = initialize_memory_08009444(value,carry,1);\n      }\nLAB_08008108:\n      iterator = calculate_quotient_080078c0(memory,memoryPointer1);\n      numDigits = compare_arrays_080094f8(memory,fraction);\n      comparison = compare_and_allocate_memory_08009530(value,memoryPointer1,carry);\n      charValue = iterator + 0x30;\n      if (*(int *)(comparison + 0xc) == 0) {\n        iterator2 = compare_arrays_080094f8(memory);\n        copy_value_and_swap_0800910c(value,comparison);\n        if ((iterator2 != 0) || (numFractionBits != 0)) goto LAB_0800815a;\n        if ((signBit & 1) != 0) {\n          iterator2 = 0;\n          goto LAB_0800815a;\n        }\n        if (charValue != 0x39) {\n          if (0 < numDigits) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        digit = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      copy_value_and_swap_0800910c(value,comparison);\n      iterator2 = 1;\nLAB_0800815a:\n      if ((numDigits < 0) || (((numDigits == 0 && (numFractionBits == 0)) && ((signBit & 1) == 0)))) {\n        if (0 < iterator2) {\n          memory = initialize_memory_08009444(value,memory,1);\n          numDigits = compare_arrays_080094f8(memory,memoryPointer1);\n          if ((0 < numDigits) || ((numDigits == 0 && (iterator << 0x1f < 0)))) {\n            if (charValue == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            charValue = iterator + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)charValue;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < iterator2) {\n        if (charValue == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)iterator + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)charValue;\n      if (pcVar10 + (estimatedDigits - 1) != pcVar20) {\n        memory = calculate_product_and_sum_08009120(value,memory,10,0);\n        pcVar20 = pcVar21;\n        if (fraction == carry) {\n          fraction = calculate_product_and_sum_08009120(value,fraction,10,0);\n          carry = fraction;\n        }\n        else {\n          fraction = calculate_product_and_sum_08009120(value,fraction,10,0);\n          carry = calculate_product_and_sum_08009120(value,carry,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        charValue = calculate_quotient_080078c0(memory,memoryPointer1);\n        charValue = charValue + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)charValue;\n        if ((int)estimatedDigits <= (int)pcVar21 - (int)pcVar10) break;\n        memory = calculate_product_and_sum_08009120(value,memory,10,0);\n        pcVar20 = pcVar21;\n      }\n      fraction = 0;\n    }\n    memory = initialize_memory_08009444(value,memory,1);\n    iterator = compare_arrays_080094f8(memory,memoryPointer1);\n    digit = pcVar21[-1];\n    if ((0 < iterator) || ((iterator == 0 && (charValue << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          errorCode = errorCode + 1;\n          goto LAB_08008274;\n        }\n        digit = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    copy_value_and_swap_0800910c(value,memoryPointer1);\n    if (carry == 0) goto LAB_08008294;\n    if ((fraction != 0) && (fraction != carry)) {\n      copy_value_and_swap_0800910c(value);\n    }\n  }\n  copy_value_and_swap_0800910c(value,carry);\nLAB_08008294:\n  copy_value_and_swap_0800910c(value,memory);\n  *pcVar21 = '\\0';\n  *errorCode = errorCode + 1;\n  if (formattedString == (char **)0x0) {\n    return pcVar10;\n  }\n  *formattedString = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_double_to_string_080079e8",
                "param_1": "value",
                "param_2": "type",
                "param_3": "signBit",
                "param_4": "exponent",
                "param_5": "numFractionBits",
                "param_6": "fractionBits",
                "param_7": "errorCode",
                "param_8": "isNegative",
                "param_9": "formattedString",
                "bVar1": "isInfinity",
                "bVar2": "isZero",
                "bVar3": "useAbbreviatedNotation",
                "cVar4": "digit",
                "bVar5": "isRoundedUp",
                "uVar6": "memory",
                "iVar7": "numDigits",
                "iVar8": "iterator2",
                "iVar9": "comparison",
                "iVar14": "memoryPointer1",
                "iVar15": "iterator",
                "iVar19": "carry",
                "iVar24": "charValue",
                "uVar11": "exponentBits",
                "uVar12": "mantissaBits",
                "uVar13": "tempValue",
                "uVar16": "tempBits",
                "uVar17": "mantissa",
                "uVar18": "tempExponent",
                "uVar23": "tempBits2",
                "uVar26": "result",
                "uVar27": "tempValue2",
                "uVar28": "tempBits3",
                "local_80": "fraction",
                "local_7c": "exponent",
                "local_74": "errorCode",
                "local_70": "fractionBitsOffset",
                "local_68": "estimatedDigits",
                "local_60": "numDigitsLeft",
                "local_5c": "exponentOffset",
                "local_58": "numNonZeroDigits",
                "local_48": "digit",
                "uStack_44": "concatenatedBits",
                "local_38": "decimalPosition",
                "local_34": "numNonZeroDigitsAfterRounding",
                "local_30": "numDigitsAfterRounding",
                "local_2c": "numFixedDecimalDigits"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_0800015c",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08000158",
                "FUN_08009120",
                "FUN_080009e8",
                "FUN_080093a4",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_080009ac",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "allocate_and_initialize_memory_0800884c",
            "code": "\nundefined4 allocate_and_initialize_memory_0800884c(undefined4 result,int size)\n\n{\n  int allocation_result;\n  int adjusted_address;\n  uint data_size;\n  \n  initialize_data();\n  data_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_address = ((0xfef - size) + data_size & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_address) {\n    allocation_result = allocate_and_store_memory(result,0);\n    if (allocation_result == DAT_20000454 + data_size) {\n      allocation_result = allocate_and_store_memory(result,-adjusted_address);\n      if (allocation_result != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_address;\n        *(uint *)(DAT_20000454 + 4) = data_size - adjusted_address | 1;\n        initialize_data2(result);\n        return 1;\n      }\n      adjusted_address = allocate_and_store_memory(result,0);\n      if (0xf < adjusted_address - DAT_20000454) {\n        DAT_20000a14 = adjusted_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  initialize_data2(result);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "allocate_and_initialize_memory_0800884c",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result",
                "iVar2": "adjusted_address",
                "uVar3": "data_size",
                "initialize_data_080090a8": "initialize_data",
                "allocate_and_store_memory_08009744": "allocate_and_store_memory",
                "initialize_data_080090b4": "initialize_data2"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "initialize_and_allocate_memory_080088ec",
            "code": "\nvoid initializeAndAllocateMemory_080088ec(undefined4 param_1,int pointer_to_memory,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint *prev_block;\n  uint *curr_block;\n  undefined *prev_block_header;\n  uint size;\n  uint curr_block_size;\n  undefined *prev_block_footer;\n  undefined *next_block_footer;\n  undefined4 *next_block_header;\n  int block_count;\n  uint data_bit;\n  uint next_block_size;\n  \n  if (pointer_to_memory == 0) {\n    return;\n  }\n  initialize_data_080090a8();\n  data_bit = *(uint *)(pointer_to_memory + -4);\n  prev_block = (uint *)(pointer_to_memory + -8);\n  size = data_bit & 0xfffffffe;\n  curr_block = (uint *)((int)prev_block + size);\n  curr_block_size = curr_block[1] & 0xfffffffc;\n  if (DAT_20000454 == curr_block) {\n    size = size + curr_block_size;\n    if ((data_bit & 1) == 0) {\n      prev_block = (uint *)((int)prev_block - *(int *)(pointer_to_memory + -8));\n      curr_block_size = prev_block[2];\n      data_bit = prev_block[3];\n      size = size + *(int *)(pointer_to_memory + -8);\n      *(uint *)(curr_block_size + 0xc) = data_bit;\n      *(uint *)(data_bit + 8) = curr_block_size;\n    }\n    curr_block_size = DAT_20000858;\n    prev_block[1] = size | 1;\n    DAT_20000454 = prev_block;\n    if (curr_block_size <= size) {\n      allocate_and_initialize_memory_0800884c(param_1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data_080090b4(param_1);\n    return;\n  }\n  curr_block[1] = curr_block_size;\n  if ((data_bit & 1) == 0) {\n    prev_block = (uint *)((int)prev_block - *(int *)(pointer_to_memory + -8));\n    next_block_header = (undefined4 *)prev_block[2];\n    size = size + *(int *)(pointer_to_memory + -8);\n    data_bit = *(uint *)((int)curr_block + curr_block_size + 4) & 1;\n    if ((uint **)next_block_header == &DAT_20000454) {\n      if (data_bit == 0) {\n        data_bit = curr_block[2];\n        next_block_size = curr_block[3];\n        size = size + curr_block_size;\n        *(uint *)(data_bit + 0xc) = next_block_size;\n        *(uint *)(next_block_size + 8) = data_bit;\n        prev_block[1] = size | 1;\n        *(uint *)((int)prev_block + size) = size;\n      }\n      else {\n        prev_block[1] = size | 1;\n        *curr_block = size;\n      }\n      goto LAB_080089f0;\n    }\n    next_block_size = prev_block[3];\n    next_block_header[3] = next_block_size;\n    *(undefined4 **)(next_block_size + 8) = next_block_header;\n  }\n  else {\n    data_bit = *(uint *)((int)curr_block + curr_block_size + 4) & 1;\n  }\n  if (data_bit == 0) {\n    next_block_header = (undefined4 *)curr_block[2];\n    size = size + curr_block_size;\n    if ((uint **)next_block_header == &DAT_20000454) {\n      DAT_2000045c = prev_block;\n      DAT_20000460 = prev_block;\n      prev_block[2] = (uint)&DAT_20000454;\n      prev_block[3] = (uint)&DAT_20000454;\n      prev_block[1] = size | 1;\n      *(uint *)((int)prev_block + size) = size;\n      goto LAB_080089f0;\n    }\n    curr_block_size = curr_block[3];\n    next_block_header[3] = curr_block_size;\n    *(undefined4 **)(curr_block_size + 8) = next_block_header;\n    prev_block[1] = size | 1;\n    *(uint *)((int)prev_block + size) = size;\n  }\n  else {\n    prev_block[1] = size | 1;\n    *(uint *)((int)prev_block + size) = size;\n  }\n  if (size < 0x200) {\n    block_count = (size >> 3) + 1;\n    size = 1 << ((int)(size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    curr_block_size = *(uint *)(&DAT_2000044c + block_count * 8);\n    prev_block[2] = curr_block_size;\n    prev_block[3] = (uint)(&DAT_20000444 + block_count * 8);\n    DAT_20000450 = (undefined *)size;\n    *(uint **)(&DAT_2000044c + block_count * 8) = prev_block;\n    *(uint **)(curr_block_size + 0xc) = prev_block;\n    initialize_data_080090b4(param_1,prev_block,size,param_4);\n    return;\n  }\n  curr_block_size = size >> 9;\n  if (curr_block_size < 5) {\n    block_count = ((size >> 6) + 0x39) * 8;\n    index = (size >> 6) + 0x38;\n  }\n  else if (curr_block_size < 0x15) {\n    block_count = (curr_block_size + 0x5c) * 8;\n    index = curr_block_size + 0x5b;\n  }\n  else if (curr_block_size < 0x55) {\n    block_count = ((size >> 0xc) + 0x6f) * 8;\n    index = (size >> 0xc) + 0x6e;\n  }\n  else if (curr_block_size < 0x155) {\n    block_count = ((size >> 0xf) + 0x78) * 8;\n    index = (size >> 0xf) + 0x77;\n  }\n  else if (curr_block_size < 0x555) {\n    block_count = ((size >> 0x12) + 0x7d) * 8;\n    index = (size >> 0x12) + 0x7c;\n  }\n  else {\n    block_count = 0x3f8;\n    index = 0x7e;\n  }\n  prev_block_header = *(undefined **)(&DAT_2000044c + block_count);\n  prev_block_footer = &DAT_20000444 + block_count;\n  if (prev_block_footer == prev_block_header) {\n    prev_block_header = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    next_block_footer = prev_block_footer;\n    DAT_20000450 = prev_block_header;\n  }\n  else {\n    do {\n      next_block_footer = prev_block_header;\n      if ((*(uint *)(prev_block_header + 4) & 0xfffffffc) <= size) break;\n      prev_block_header = *(undefined **)(prev_block_header + 8);\n      next_block_footer = prev_block_footer;\n    } while (prev_block_footer != prev_block_header);\n    prev_block_footer = *(undefined **)(next_block_footer + 0xc);\n  }\n  prev_block[2] = (uint)next_block_footer;\n  prev_block[3] = (uint)prev_block_footer;\n  *(uint **)(prev_block_footer + 8) = prev_block;\n  *(uint **)(next_block_footer + 0xc) = prev_block;\n  initialize_data_080090b4(param_1,prev_block,prev_block_header,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "initialize_and_allocate_memory_080088ec",
                "param_2": "pointer_to_memory",
                "iVar1": "index",
                "puVar2": "prev_block",
                "puVar3": "curr_block",
                "puVar4": "prev_block_header",
                "uVar5": "size",
                "uVar6": "curr_block_size",
                "puVar7": "prev_block_footer",
                "puVar8": "next_block_footer",
                "puVar9": "next_block_header",
                "iVar10": "block_count",
                "uVar11": "data_bit",
                "uVar12": "next_block_size"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "calculate_offset_08008ad4",
            "code": "\nint calculateOffset_08008ad4(void)\n\n{\n  int offset;\n  \n  offset = *(int *)(DAT_2000001c + 0x34);\n  if (offset == 0) {\n    offset = 0x2000085c;\n  }\n  return offset + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "calculate_offset_08008ad4",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_and_store_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_store_memory_08008af8(undefined4 *param_ptr,uint size)\n\n{\n  undefined *pointer_1;\n  uint value_1;\n  uint value_2;\n  int index_1;\n  undefined *pointer_2;\n  uint value_3;\n  uint value_4;\n  undefined4 *pointer_3;\n  undefined *pointer_4;\n  undefined *pointer_5;\n  int *result_ptr;\n  uint var_1;\n  uint var_2;\n  int index_2;\n  undefined4 *pointer_6;\n  undefined4 *pointer_7;\n  \n  var_1 = size + 0xb;\n  if (var_1 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    initialize_data_080090a8();\n    var_2 = 0x10;\n    index_1 = 0x18;\n    var_1 = 2;\nLAB_08008b18:\n    pointer_5 = *(undefined **)((int)&DAT_20000450 + index_1);\n    if ((pointer_5 != &DAT_20000444 + index_1) ||\n       (pointer_5 = *(undefined **)((int)&DAT_20000458 + index_1), &DAT_2000044c + index_1 != pointer_5)) {\n      index_1 = *(int *)(pointer_5 + 0xc);\n      pointer_2 = pointer_5 + (*(uint *)(pointer_5 + 4) & 0xfffffffc);\n      var_1 = *(uint *)(pointer_2 + 4);\nLAB_08008b34:\n      index_2 = *(int *)(pointer_5 + 8);\n      *(int *)(index_2 + 0xc) = index_1;\n      *(int *)(index_1 + 8) = index_2;\n      *(uint *)(pointer_2 + 4) = var_1 | 1;\n      initialize_data_080090b4(param_ptr);\n      return (int *)(pointer_5 + 8);\n    }\n    var_1 = var_1 + 2;\n  }\n  else {\n    var_2 = var_1 & 0xfffffff8;\n    if (((int)var_2 < 0) || (var_2 < size)) {\nLAB_08008c7a:\n      *param_ptr = 0xc;\n      return (int *)0x0;\n    }\n    initialize_data_080090a8();\n    if (var_2 < 0x1f8) {\n      var_1 = var_1 >> 3;\n      index_1 = var_2 + 8;\n      goto LAB_08008b18;\n    }\n    value_1 = var_1 >> 9;\n    if (value_1 == 0) {\n      index_1 = 0x200;\n      value_3 = 0x40;\n      value_1 = 0x3f;\n    }\n    else if (value_1 < 5) {\n      value_3 = (var_1 >> 6) + 0x39;\n      value_1 = (var_1 >> 6) + 0x38;\n      index_1 = value_3 * 8;\n    }\n    else if (value_1 < 0x15) {\n      value_3 = value_1 + 0x5c;\n      value_1 = value_1 + 0x5b;\n      index_1 = value_3 * 8;\n    }\n    else if (value_1 < 0x55) {\n      value_3 = (var_1 >> 0xc) + 0x6f;\n      value_1 = (var_1 >> 0xc) + 0x6e;\n      index_1 = value_3 * 8;\n    }\n    else if (value_1 < 0x155) {\n      value_3 = (var_1 >> 0xf) + 0x78;\n      value_1 = (var_1 >> 0xf) + 0x77;\n      index_1 = value_3 * 8;\n    }\n    else if (value_1 < 0x555) {\n      value_3 = (var_1 >> 0x12) + 0x7d;\n      value_1 = (var_1 >> 0x12) + 0x7c;\n      index_1 = value_3 * 8;\n    }\n    else {\n      index_1 = 0x3f8;\n      value_3 = 0x7f;\n      value_1 = 0x7e;\n    }\n    for (pointer_5 = *(undefined **)((int)&DAT_20000450 + index_1); var_1 = value_3,\n        &DAT_20000444 + index_1 != pointer_5; pointer_5 = *(undefined **)(pointer_5 + 0xc)) {\n      index_2 = (*(uint *)(pointer_5 + 4) & 0xfffffffc) - var_2;\n      var_1 = value_1;\n      if (0xf < index_2) break;\n      if (-1 < index_2) {\n        pointer_2 = pointer_5 + (*(uint *)(pointer_5 + 4) & 0xfffffffc);\n        var_1 = *(uint *)(pointer_2 + 4);\n        index_1 = *(int *)(pointer_5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  pointer_6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    value_3 = 1 << ((int)var_1 >> 2 & 0xffU);\n    value_1 = DAT_20000450;\n    if (value_3 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    value_3 = DAT_2000045c[1];\n    value_4 = value_3 & 0xfffffffc;\n    value_1 = value_4 - var_2;\n    if (0xf < (int)value_1) {\n      pointer_7 = (undefined4 *)(var_2 + (int)DAT_2000045c);\n      DAT_2000045c[1] = var_2 | 1;\n      DAT_2000045c = pointer_7;\n      DAT_20000460 = pointer_7;\n      pointer_7[2] = &DAT_20000454;\n      pointer_7[3] = &DAT_20000454;\n      pointer_7[1] = value_1 | 1;\n      *(uint *)((int)pointer_6 + value_4) = value_1;\n      initialize_data_080090b4(param_ptr);\n      return pointer_6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)value_1) {\n      *(uint *)((int)pointer_6 + value_4 + 4) = *(uint *)((int)pointer_6 + value_4 + 4) | 1;\n      initialize_data_080090b4(param_ptr);\n      return pointer_6 + 2;\n    }\n    if (value_4 < 0x200) {\n      index_1 = (value_3 >> 3) + 1;\n      index_2 = *(int *)(&DAT_2000044c + index_1 * 8);\n      value_1 = 1 << ((int)(value_3 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      pointer_6[2] = index_2;\n      pointer_6[3] = &DAT_20000444 + index_1 * 8;\n      DAT_20000450 = value_1;\n      *(undefined4 **)(&DAT_2000044c + index_1 * 8) = pointer_6;\n      *(undefined4 **)(index_2 + 0xc) = pointer_6;\n    }\n    else {\n      value_1 = value_3 >> 9;\n      if (value_1 < 5) {\n        index_1 = ((value_3 >> 6) + 0x39) * 8;\n        index_2 = (value_3 >> 6) + 0x38;\n      }\n      else if (value_1 < 0x15) {\n        index_1 = (value_1 + 0x5c) * 8;\n        index_2 = value_1 + 0x5b;\n      }\n      else if (value_1 < 0x55) {\n        index_1 = ((value_3 >> 0xc) + 0x6f) * 8;\n        index_2 = (value_3 >> 0xc) + 0x6e;\n      }\n      else if (value_1 < 0x155) {\n        index_1 = ((value_3 >> 0xf) + 0x78) * 8;\n        index_2 = (value_3 >> 0xf) + 0x77;\n      }\n      else if (value_1 < 0x555) {\n        index_1 = ((value_3 >> 0x12) + 0x7d) * 8;\n        index_2 = (value_3 >> 0x12) + 0x7c;\n      }\n      else {\n        index_1 = 0x3f8;\n        index_2 = 0x7e;\n      }\n      pointer_5 = *(undefined **)(&DAT_2000044c + index_1);\n      pointer_2 = &DAT_20000444 + index_1;\n      if (pointer_2 == pointer_5) {\n        DAT_20000450 = 1 << (index_2 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(pointer_5 + 4) & 0xfffffffc) <= value_4) break;\n          pointer_5 = *(undefined **)(pointer_5 + 8);\n        } while (pointer_2 != pointer_5);\n        pointer_2 = *(undefined **)(pointer_5 + 0xc);\n      }\n      value_1 = DAT_20000450;\n      pointer_6[2] = pointer_5;\n      pointer_6[3] = pointer_2;\n      *(undefined4 **)(pointer_2 + 8) = pointer_6;\n      *(undefined4 **)(pointer_5 + 0xc) = pointer_6;\n    }\n    value_3 = 1 << ((int)var_1 >> 2 & 0xffU);\n    if (value_3 <= value_1) {\nLAB_08008c06:\n      if ((value_3 & value_1) == 0) {\n        var_1 = var_1 & 0xfffffffc;\n        do {\n          value_3 = value_3 << 1;\n          var_1 = var_1 + 4;\n        } while ((value_3 & value_1) == 0);\n      }\n      do {\n        pointer_7 = (undefined4 *)(&DAT_2000044c + var_1 * 8);\n        value_1 = var_1;\n        pointer_6 = pointer_7;\n        do {\n          for (pointer_3 = (undefined4 *)pointer_6[3]; pointer_6 != pointer_3;\n              pointer_3 = (undefined4 *)pointer_3[3]) {\n            value_4 = pointer_3[1] & 0xfffffffc;\n            value_2 = value_4 - var_2;\n            if (0xf < (int)value_2) {\n              index_2 = pointer_3[2];\n              index_1 = pointer_3[3];\n              pointer_6 = (undefined4 *)(var_2 + (int)pointer_3);\n              pointer_3[1] = var_2 | 1;\n              *(int *)(index_2 + 0xc) = index_1;\n              *(int *)(index_1 + 8) = index_2;\n              DAT_2000045c = pointer_6;\n              DAT_20000460 = pointer_6;\n              pointer_6[2] = &DAT_20000454;\n              pointer_6[3] = &DAT_20000454;\n              pointer_6[1] = value_2 | 1;\n              *(uint *)((int)pointer_3 + value_4) = value_2;\n              initialize_data_080090b4(param_ptr);\n              return pointer_3 + 2;\n            }\n            if (-1 < (int)value_2) {\n              index_1 = pointer_3[3];\n              index_2 = pointer_3[2];\n              *(uint *)((int)pointer_3 + value_4 + 4) = *(uint *)((int)pointer_3 + value_4 + 4) | 1;\n              *(int *)(index_2 + 0xc) = index_1;\n              *(int *)(index_1 + 8) = index_2;\n              initialize_data_080090b4(param_ptr);\n              return pointer_3 + 2;\n            }\n          }\n          value_1 = value_1 + 1;\n          pointer_6 = pointer_6 + 2;\n        } while ((value_1 & 3) != 0);\n        do {\n          value_4 = var_1 & 3;\n          pointer_6 = pointer_7 + -2;\n          var_1 = var_1 - 1;\n          if (value_4 == 0) {\n            DAT_20000450 = DAT_20000450 & ~value_3;\n            break;\n          }\n          pointer_7 = (undefined4 *)*pointer_7;\n        } while (pointer_7 == pointer_6);\n        value_3 = value_3 * 2;\n        if ((DAT_20000450 <= value_3 && value_3 - DAT_20000450 != 0) || (var_1 = value_1, value_3 == 0))\n        break;\n        for (; (value_3 & DAT_20000450) == 0; value_3 = value_3 << 1) {\n          var_1 = var_1 + 4;\n        }\n      } while( true );\n    }\n  }\n  pointer_5 = DAT_20000454;\n  var_1 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((var_2 <= var_1) && (value_1 = var_1 - var_2, 0xf < (int)value_1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    value_1 = var_2 + DAT_20000a44 + 0x10;\n  }\n  else {\n    value_1 = var_2 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  pointer_2 = (undefined *)allocate_and_store_memory_08008af8_08009744(param_ptr,value_1);\n  if (pointer_2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    var_1 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    pointer_1 = pointer_5 + var_1;\n    if (pointer_1 < pointer_2 || pointer_1 == pointer_2) {\n      pointer_4 = DAT_20000a14 + value_1;\n      if ((pointer_1 != pointer_2) || (((uint)pointer_1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = pointer_4;\n      *(uint *)(DAT_20000454 + 4) = var_1 + value_1 | 1;\n    }\n    else {\n      if (pointer_5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + value_1;\n      pointer_4 = pointer_2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)pointer_2 - (int)pointer_1);\n        pointer_4 = DAT_20000854;\n      }\n      DAT_20000854 = pointer_4;\n      value_3 = (uint)pointer_2 & 7;\n      if (value_3 == 0) {\n        index_1 = 0x1000;\n      }\n      else {\n        pointer_2 = pointer_2 + (8 - value_3);\n        index_1 = 0x1008 - value_3;\n      }\n      index_1 = index_1 - ((uint)(pointer_2 + value_1) & 0xfff);\n      index_2 = allocate_and_store_memory_08008af8_08009744(param_ptr,index_1);\n      if (index_2 == -1) {\n        value_1 = 1;\n        index_1 = 0;\n      }\n      else {\n        value_1 = (index_2 - (int)pointer_2) + index_1 | 1;\n      }\n      pointer_4 = DAT_20000a14 + index_1;\n      DAT_20000454 = pointer_2;\n      DAT_20000a14 = pointer_4;\n      *(uint *)(pointer_2 + 4) = value_1;\n      if (pointer_5 != &DAT_2000044c) {\n        if (var_1 < 0x10) {\n          *(undefined4 *)(pointer_2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        var_1 = var_1 - 0xc & 0xfffffff8;\n        *(uint *)(pointer_5 + 4) = *(uint *)(pointer_5 + 4) & 1 | var_1;\n        *(undefined4 *)(pointer_5 + var_1 + 4) = 5;\n        *(undefined4 *)(pointer_5 + var_1 + 8) = 5;\n        if (0xf < var_1) {\n          initialize_and_allocate_memory_080088ec(param_ptr,pointer_5 + 8);\n          pointer_4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < pointer_4) {\n      DAT_20000a3c = pointer_4;\n    }\n    var_1 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < pointer_4) {\n      DAT_20000a40 = pointer_4;\n    }\n  }\n  value_1 = (var_1 & 0xfffffffc) - var_2;\n  if ((var_2 <= (var_1 & 0xfffffffc)) && (0xf < (int)value_1)) {\nLAB_08008dac:\n    pointer_5 = DAT_20000454 + var_2;\n    *(uint *)(DAT_20000454 + 4) = var_2 | 1;\n    result_ptr = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = pointer_5;\n    *(uint *)(pointer_5 + 4) = value_1 | 1;\n    initialize_data_080090b4(param_ptr);\n    return result_ptr;\n  }\nLAB_08008eee:\n  initialize_data_080090b4(param_ptr);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_and_store_memory_08008af8",
                "param_1": "param_ptr",
                "param_2": "size",
                "puVar1": "pointer_1",
                "uVar2": "value_1",
                "uVar3": "value_2",
                "iVar4": "index_1",
                "puVar5": "pointer_2",
                "uVar6": "value_3",
                "uVar7": "value_4",
                "puVar8": "pointer_3",
                "puVar9": "pointer_4",
                "puVar10": "pointer_5",
                "piVar11": "result_ptr",
                "uVar12": "var_1",
                "uVar13": "var_2",
                "iVar14": "index_2",
                "puVar15": "pointer_6",
                "puVar16": "pointer_7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_byte_sequence_0800901c",
            "code": "\nuint * find_byte_sequence_0800901c(uint *array,uint byte,uint length)\n\n{\n  uint xored_value;\n  uint combined_byte;\n  uint *current_ptr;\n  uint byte_mask;\n  bool is_zero;\n  \n  byte_mask = byte & 0xff;\n  if (((uint)array & 3) == 0) {\nLAB_0800904a:\n    if (3 < length) {\n      combined_byte = (byte & 0xff) << 8 | byte_mask;\n      current_ptr = array;\n      do {\n        xored_value = *current_ptr ^ (combined_byte | combined_byte << 0x10);\n        array = current_ptr + 1;\n        if ((xored_value + 0xfefefeff & ~xored_value & 0x80808080) != 0) goto LAB_08009050;\n        length = length - 4;\n        current_ptr = array;\n      } while (3 < length);\n    }\n    current_ptr = array;\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      array = current_ptr;\n      if (*(byte *)array != byte_mask) {\n        current_ptr = (uint *)(length + (int)array);\n        do {\n          array = (uint *)((int)array + 1);\n          if (current_ptr == array) goto LAB_0800906c;\n        } while (*(byte *)array != byte_mask);\n      }\n    }\n  }\n  else {\n    combined_byte = length - 1;\n    if (length == 0) {\nLAB_0800906c:\n      array = (uint *)0x0;\n    }\n    else if (*(byte *)array != byte_mask) {\n      current_ptr = (uint *)((int)array + 1);\n      do {\n        array = current_ptr;\n        length = combined_byte;\n        if (((uint)array & 3) == 0) goto LAB_0800904a;\n        is_zero = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_zero) goto LAB_0800906c;\n        current_ptr = (uint *)((int)array + 1);\n      } while (*(byte *)array != byte_mask);\n    }\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "param_1": "array",
                "param_2": "byte",
                "param_3": "length",
                "uVar1": "xored_value",
                "uVar2": "combined_byte",
                "puVar3": "current_ptr",
                "uVar4": "byte_mask",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initializeData_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "allocate_and_initialize_memory_080090c0",
            "code": "\nundefined4 * allocate_and_initialize_memory_080090c0(int ptr,uint index)\n\n{\n  undefined4 *ptr_array;\n  int allocated_ptr;\n  \n  allocated_ptr = *(int *)(ptr + 0x4c);\n  if (allocated_ptr == 0) {\n    allocated_ptr = allocate_and_initialize_memory_080090c0_08009980(ptr,4,0x21);\n    *(int *)(ptr + 0x4c) = allocated_ptr;\n    if (allocated_ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  ptr_array = *(undefined4 **)(allocated_ptr + index * 4);\n  if (ptr_array == (undefined4 *)0x0) {\n    allocated_ptr = 1 << (index & 0xff);\n    ptr_array = (undefined4 *)allocate_and_initialize_memory_080090c0_08009980(ptr,1,(allocated_ptr + 5) * 4);\n    if (ptr_array == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    ptr_array[1] = index;\n    ptr_array[2] = allocated_ptr;\n  }\n  else {\n    *(undefined4 *)(allocated_ptr + index * 4) = *ptr_array;\n  }\n  ptr_array[3] = 0;\n  ptr_array[4] = 0;\n  return ptr_array;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "allocate_and_initialize_memory_080090c0",
                "param_1": "ptr",
                "param_2": "index",
                "puVar1": "ptr_array",
                "iVar2": "allocated_ptr"
            },
            "calling": [
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "copy_value_and_swap_0800910c",
            "code": "\nvoid copyValueAndSwap_0800910c(int originalBaseAddress,undefined4 *valueToCopyAndSwap)\n\n{\n  int ptrArrayAddress;\n  \n  if (valueToCopyAndSwap != (undefined4 *)0x0) {\n    ptrArrayAddress = *(int *)(originalBaseAddress + 0x4c);\n    *valueToCopyAndSwap = *(undefined4 *)(ptrArrayAddress + valueToCopyAndSwap[1] * 4);\n    *(undefined4 **)(ptrArrayAddress + valueToCopyAndSwap[1] * 4) = valueToCopyAndSwap;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "copy_value_and_swap_0800910c",
                "param_1": "originalBaseAddress",
                "param_2": "valueToCopyAndSwap",
                "iVar1": "ptrArrayAddress"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_product_and_sum_08009120",
            "code": "\nundefined4 * calculateProductAndSum_08009120(int inputParam,undefined4 *outputArray,int multiplier,uint accumulator)\n\n{\n  undefined4 *outputArrayPtr;\n  uint temp;\n  int arraySize;\n  uint *arrayPtr;\n  int index;\n  \n  index = 0;\n  arraySize = outputArray[4];\n  arrayPtr = outputArray + 5;\n  do {\n    index = index + 1;\n    accumulator = multiplier * (*arrayPtr & 0xffff) + accumulator;\n    temp = multiplier * (*arrayPtr >> 0x10) + (accumulator >> 0x10);\n    *arrayPtr = (accumulator & 0xffff) + temp * 0x10000;\n    accumulator = temp >> 0x10;\n    arrayPtr = arrayPtr + 1;\n  } while (index < arraySize);\n  outputArrayPtr = outputArray;\n  if (accumulator != 0) {\n    if ((int)outputArray[2] <= arraySize) {\n      outputArrayPtr = (undefined4 *)allocate_and_initialize_memory_080090c0(inputParam,outputArray[1] + 1);\n      copy_and_advance_pointer_08001084(outputArrayPtr + 3,outputArray + 3,(outputArray[4] + 2) * 4);\n      index = *(int *)(inputParam + 0x4c);\n      *outputArray = *(undefined4 *)(index + outputArray[1] * 4);\n      *(undefined4 **)(index + outputArray[1] * 4) = outputArray;\n    }\n    outputArrayPtr[arraySize + 5] = accumulator;\n    outputArrayPtr[4] = arraySize + 1;\n  }\n  return outputArrayPtr;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_product_and_sum_08009120",
                "param_1": "inputParam",
                "param_2": "outputArray",
                "param_3": "multiplier",
                "param_4": "accumulator",
                "puVar1": "outputArrayPtr",
                "uVar2": "temp",
                "iVar3": "arraySize",
                "puVar4": "arrayPtr",
                "iVar5": "index"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZerosCount;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZerosCount = 0x10;\n  }\n  else {\n    leadingZerosCount = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZerosCount = leadingZerosCount + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZerosCount = leadingZerosCount + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZerosCount = leadingZerosCount + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZerosCount + 1;\n    }\n    leadingZerosCount = 0x20;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint countLeadingZeros_080091e4(uint *input)\n\n{\n  int leadingZeros;\n  uint value;\n  \n  value = *input;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leadingZeros = 0x10;\n    }\n    else {\n      leadingZeros = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leadingZeros = leadingZeros + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leadingZeros = leadingZeros + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leadingZeros = leadingZeros + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leadingZeros = leadingZeros + 1;\n    }\n    *input = value;\n    return leadingZeros;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *input = value >> 2;\n    return 2;\n  }\n  *input = value >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_memory_08009244",
            "code": "\nvoid initializeMemory_08009244(undefined4 input,undefined4 value)\n\n{\n  int memoryPtr;\n  \n  memoryPtr = allocate_and_initialize_memory_080090c0(input,1);\n  *(undefined4 *)(memoryPtr + 0x10) = 1;\n  *(undefined4 *)(memoryPtr + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_memory_08009244",
                "param_1": "input",
                "param_2": "value",
                "iVar1": "memoryPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "allocate_and_initialize_memory_08009258",
            "code": "\nvoid allocateAndInitializeMemory_08009258(undefined4 param1,int param2,int param3)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int var3;\n  uint var4;\n  uint *ptr5;\n  uint var6;\n  uint *ptr7;\n  uint var8;\n  int var9;\n  int var10;\n  uint var11;\n  int var12;\n  int var13;\n  uint *ptr14;\n  uint *ptr15;\n  uint *ptr16;\n  uint *ptr17;\n  uint *ptr18;\n  \n  var12 = *(int *)(param2 + 0x10);\n  var9 = *(int *)(param3 + 0x10);\n  var10 = var9;\n  var13 = param2;\n  if (var12 < var9) {\n    var10 = var12;\n    var12 = var9;\n    var13 = param3;\n    param3 = param2;\n  }\n  var9 = var12 + var10;\n  var3 = *(int *)(var13 + 4);\n  if (*(int *)(var13 + 8) < var9) {\n    var3 = var3 + 1;\n  }\n  var3 = allocate_and_initialize_memory_080090c0(param1,var3);\n  ptr18 = (uint *)(var3 + 0x14);\n  ptr17 = ptr18 + var9;\n  for (ptr5 = ptr18; ptr5 < ptr17; ptr5 = ptr5 + 1) {\n    *ptr5 = 0;\n  }\n  var6 = param3 + 0x14;\n  var11 = var6 + var10 * 4;\n  ptr5 = (uint *)(var13 + 0x14);\n  if (var6 < var11) {\n    ptr7 = (uint *)(var6 + ((var11 - param3) - 0x15 & 0xfffffffc));\n    ptr16 = (uint *)(param3 + 0x10);\n    do {\n      while( true ) {\n        ptr16 = ptr16 + 1;\n        var6 = *ptr16 & 0xffff;\n        if (var6 != 0) break;\n        var6 = *ptr16 >> 0x10;\n        if (var6 == 0) goto LAB_080092d2;\nLAB_0800932c:\n        var8 = *ptr18;\n        var4 = 0;\n        ptr1 = ptr5;\n        ptr14 = ptr18;\n        var11 = var8;\n        do {\n          ptr15 = ptr14;\n          var4 = var4 + var6 * *(ushort *)ptr1 + (var11 >> 0x10);\n          *ptr15 = var8 & 0xffff | var4 * 0x10000;\n          ptr2 = ptr1 + 1;\n          var11 = ptr15[1];\n          var8 = var6 * (*ptr1 >> 0x10) + (var11 & 0xffff) + (var4 >> 0x10);\n          var4 = var8 >> 0x10;\n          ptr1 = ptr2;\n          ptr14 = ptr15 + 1;\n        } while (ptr2 < ptr5 + var12);\n        ptr15[1] = var8;\n        ptr18 = ptr18 + 1;\n        if (ptr7 == ptr16) goto LAB_0800937a;\n      }\n      var11 = 0;\n      ptr1 = ptr18;\n      ptr14 = ptr5;\n      do {\n        ptr2 = ptr1;\n        ptr15 = ptr14 + 1;\n        var8 = var6 * (*ptr14 & 0xffff) + (*ptr2 & 0xffff) + var11;\n        var4 = var6 * (*ptr14 >> 0x10) + (*ptr2 >> 0x10) + (var8 >> 0x10);\n        var11 = var4 >> 0x10;\n        *ptr2 = var8 & 0xffff | var4 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr14 = ptr15;\n      } while (ptr15 < ptr5 + var12);\n      ptr2[1] = var11;\n      var6 = *ptr16 >> 0x10;\n      if (var6 != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr18 = ptr18 + 1;\n    } while (ptr7 != ptr16);\n  }\nLAB_0800937a:\n  if (0 < var9) {\n    var6 = ptr17[-1];\n    ptr17 = ptr17 + -1;\n    while ((var6 == 0 && (var9 = var9 + -1, var9 != 0))) {\n      ptr17 = ptr17 + -1;\n      var6 = *ptr17;\n    }\n  }\n  *(int *)(var3 + 0x10) = var9;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "allocate_and_initialize_memory_08009258",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "var3",
                "uVar4": "var4",
                "puVar5": "ptr5",
                "uVar6": "var6",
                "puVar7": "ptr7",
                "uVar8": "var8",
                "iVar9": "var9",
                "iVar10": "var10",
                "uVar11": "var11",
                "iVar12": "var12",
                "iVar13": "var13",
                "puVar14": "ptr14",
                "puVar15": "ptr15",
                "puVar16": "ptr16",
                "puVar17": "ptr17",
                "puVar18": "ptr18"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int inputData,undefined4 *resultArray,uint arraySize)\n\n{\n  int index;\n  int numIterations;\n  undefined4 *currentArray;\n  undefined4 *allocatedArray;\n  \n  if ((arraySize & 3) != 0) {\n    resultArray = (undefined4 *)\n              calculate_product_and_sum_08009120(inputData,resultArray,*(undefined4 *)(&DAT_0800a070 + ((arraySize & 3) - 1) * 4),\n                           0);\n  }\n  numIterations = (int)arraySize >> 2;\n  if (numIterations != 0) {\n    allocatedArray = *(undefined4 **)(inputData + 0x48);\n    if (allocatedArray == (undefined4 *)0x0) {\n      allocatedArray = (undefined4 *)allocate_and_initialize_memory_080090c0(inputData,1);\n      allocatedArray[4] = 1;\n      allocatedArray[5] = 0x271;\n      *(undefined4 **)(inputData + 0x48) = allocatedArray;\n      *allocatedArray = 0;\n    }\n    currentArray = resultArray;\n    if (numIterations << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    numIterations = numIterations >> 1;\n    currentArray = allocatedArray;\n    if (numIterations != 0) {\n      while( true ) {\n        allocatedArray = (undefined4 *)*currentArray;\n        if (allocatedArray == (undefined4 *)0x0) {\n          allocatedArray = (undefined4 *)allocate_and_initialize_memory_08009258(inputData,currentArray,currentArray);\n          *currentArray = allocatedArray;\n          *allocatedArray = 0;\n        }\n        currentArray = resultArray;\n        if (-1 < numIterations << 0x1f) break;\nLAB_080093d2:\n        resultArray = (undefined4 *)allocate_and_initialize_memory_08009258(inputData,currentArray,allocatedArray);\n        if (currentArray == (undefined4 *)0x0) break;\n        index = *(int *)(inputData + 0x4c);\n        numIterations = numIterations >> 1;\n        *currentArray = *(undefined4 *)(index + currentArray[1] * 4);\n        *(undefined4 **)(index + currentArray[1] * 4) = currentArray;\n        currentArray = allocatedArray;\n        if (numIterations == 0) {\n          return resultArray;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "inputData",
                "param_2": "resultArray",
                "param_3": "arraySize",
                "iVar1": "index",
                "iVar2": "numIterations",
                "puVar3": "currentArray",
                "puVar4": "allocatedArray"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "initialize_memory_08009444",
            "code": "\nvoid initializeMemory_08009444(int param1,undefined4 *param2,uint param3)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int tempVar3;\n  undefined4 tempVar4;\n  int tempVar5;\n  int tempVar6;\n  uint *ptrVar1;\n  uint *ptrVar2;\n  uint *ptrVar3;\n  uint *ptrVar4;\n  int tempVar7;\n  int tempVar8;\n  uint tempVar9;\n  uint *ptrVar5;\n  \n  tempVar5 = param2[4];\n  tempVar7 = (int)param3 >> 5;\n  tempVar8 = tempVar7 + tempVar5 + 1;\n  tempVar3 = param2[1];\n  tempVar2 = param2[2];\n  if ((int)param2[2] < tempVar8) {\n    do {\n      tempVar6 = tempVar2 * 2;\n      tempVar1 = tempVar2 * -2;\n      tempVar3 = tempVar3 + 1;\n      tempVar2 = tempVar6;\n    } while (tempVar8 != tempVar6 && tempVar8 + tempVar1 < 0 == SBORROW4(tempVar8,tempVar6));\n  }\n  tempVar2 = allocate_and_initialize_memory_080090c0(param1,tempVar3);\n  ptrVar1 = (uint *)(tempVar2 + 0x14);\n  if (0 < tempVar7) {\n    ptrVar4 = ptrVar1 + tempVar7;\n    ptrVar2 = ptrVar1;\n    do {\n      ptrVar5 = ptrVar2 + 1;\n      *ptrVar2 = 0;\n      ptrVar1 = ptrVar4;\n      ptrVar2 = ptrVar5;\n    } while (ptrVar5 != ptrVar4);\n  }\n  tempVar3 = param2[4];\n  ptrVar2 = param2 + 5;\n  param3 = param3 & 0x1f;\n  if (param3 == 0) {\n    ptrVar1 = ptrVar1 + -1;\n    ptrVar4 = ptrVar2;\n    do {\n      ptrVar5 = ptrVar4 + 1;\n      ptrVar1 = ptrVar1 + 1;\n      *ptrVar1 = *ptrVar4;\n      ptrVar4 = ptrVar5;\n    } while (ptrVar5 < ptrVar2 + tempVar3);\n  }\n  else {\n    tempVar9 = 0;\n    ptrVar4 = ptrVar2;\n    do {\n      ptrVar5 = ptrVar1;\n      *ptrVar5 = *ptrVar4 << param3 | tempVar9;\n      ptrVar3 = ptrVar4 + 1;\n      tempVar9 = *ptrVar4 >> (0x20 - param3 & 0xff);\n      ptrVar1 = ptrVar5 + 1;\n      ptrVar4 = ptrVar3;\n    } while (ptrVar3 < ptrVar2 + tempVar3);\n    ptrVar5[1] = tempVar9;\n    if (tempVar9 != 0) {\n      tempVar8 = tempVar7 + tempVar5 + 2;\n    }\n  }\n  tempVar5 = *(int *)(param1 + 0x4c);\n  tempVar3 = param2[1];\n  tempVar4 = *(undefined4 *)(tempVar5 + tempVar3 * 4);\n  *(int *)(tempVar2 + 0x10) = tempVar8 + -1;\n  *param2 = tempVar4;\n  *(undefined4 **)(tempVar5 + tempVar3 * 4) = param2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "initialize_memory_08009444",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "iVar6": "tempVar6",
                "puVar7": "ptrVar1",
                "puVar8": "ptrVar2",
                "puVar10": "ptrVar3",
                "puVar11": "ptrVar4",
                "iVar12": "tempVar7",
                "iVar13": "tempVar8",
                "uVar14": "tempVar9",
                "puVar9": "ptrVar5"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1,int array2)\n\n{\n  int arraySizeDifference;\n  uint *pArray2;\n  int array2StartIndex;\n  uint *pArray1;\n  \n  array2StartIndex = *(int *)(array2 + 0x10);\n  arraySizeDifference = *(int *)(array1 + 0x10) - array2StartIndex;\n  if (arraySizeDifference == 0) {\n    pArray2 = (uint *)(array2 + 0x14 + array2StartIndex * 4);\n    pArray1 = (uint *)(array1 + 0x14) + array2StartIndex;\n    do {\n      pArray1 = pArray1 + -1;\n      pArray2 = pArray2 + -1;\n      if (*pArray1 != *pArray2) {\n        if (*pArray2 <= *pArray1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < pArray1);\n  }\n  return arraySizeDifference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "arraySizeDifference",
                "iVar3": "array2StartIndex",
                "puVar2": "pArray2",
                "puVar4": "pArray1"
            },
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "compare_and_allocate_memory_08009530",
            "code": "\nvoid compareAndAllocateMemory_08009530(undefined4 srcArray,uint *srcArrayEnd,uint *destArrayEnd,undefined4 param_4)\n\n{\n  int memoryAllocation;\n  uint *srcArrayIndex;\n  uint srcArrayElement;\n  uint temp;\n  undefined4 isEqual;\n  uint *destArrayIndex;\n  uint *srcArrayTempIndex;\n  uint *destArrayTempIndex;\n  uint *srcArrayTemp;\n  uint *srcArrayEndTemp;\n  int carry;\n  uint *destArrayEndTemp;\n  uint numElements;\n  uint *puVar8;\n  \n  srcArrayIndex = (uint *)destArrayEnd[4];\n  srcArrayEndTemp = srcArrayEnd + 5;\n  destArrayEndTemp = destArrayEnd + 5;\n  srcArrayTempIndex = srcArrayEndTemp;\n  destArrayTempIndex = srcArrayEnd;\n  if ((uint *)srcArrayEnd[4] == srcArrayIndex) {\n    destArrayIndex = srcArrayEndTemp + (int)srcArrayIndex;\n    srcArrayIndex = destArrayEndTemp + (int)srcArrayIndex;\n    while( true ) {\n      destArrayIndex = destArrayIndex + -1;\n      srcArrayIndex = srcArrayIndex + -1;\n      if (*destArrayIndex != *srcArrayIndex) break;\n      if (destArrayIndex <= srcArrayEndTemp) {\n        carry = allocate_and_initialize_memory_080090c0(srcArray,0,destArrayIndex,srcArrayIndex,param_4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    isEqual = 0;\n    if (*srcArrayIndex <= *destArrayIndex) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)srcArrayEnd[4] - (int)srcArrayIndex) {\n    isEqual = 0;\n    destArrayIndex = destArrayEnd;\n    goto LAB_08009578;\n  }\n  isEqual = 1;\n  destArrayIndex = srcArrayEndTemp;\n  srcArrayIndex = srcArrayEnd;\n  srcArrayTempIndex = destArrayEndTemp;\n  destArrayTempIndex = destArrayEnd;\n  destArrayEnd = srcArrayEnd;\n  destArrayEndTemp = srcArrayEndTemp;\nLAB_08009578:\n  memoryAllocation = allocate_and_initialize_memory_080090c0(srcArray,destArrayTempIndex[1],destArrayIndex,srcArrayIndex,param_4);\n  carry = 0;\n  numElements = destArrayTempIndex[4];\n  srcArrayElement = destArrayEnd[4];\n  *(undefined4 *)(memoryAllocation + 0xc) = isEqual;\n  srcArrayEndTemp = srcArrayTempIndex + numElements;\n  srcArrayIndex = (uint *)(memoryAllocation + 0x14);\n  destArrayTempIndex = destArrayEndTemp;\n  do {\n    puVar8 = srcArrayTempIndex + 1;\n    srcArrayTemp = destArrayTempIndex + 1;\n    temp = ((*srcArrayTempIndex & 0xffff) + carry) - (*destArrayTempIndex & 0xffff);\n    carry = ((*srcArrayTempIndex >> 0x10) - (*destArrayTempIndex >> 0x10)) + ((int)temp >> 0x10);\n    temp = temp & 0xffff | carry * 0x10000;\n    destArrayIndex = srcArrayIndex + 1;\n    *srcArrayIndex = temp;\n    carry = carry >> 0x10;\n    srcArrayIndex = destArrayIndex;\n    srcArrayTempIndex = puVar8;\n    destArrayTempIndex = srcArrayTemp;\n  } while (srcArrayTemp < destArrayEndTemp + srcArrayElement);\n  srcArrayIndex = puVar8;\n  srcArrayTempIndex = destArrayIndex;\n  if (puVar8 < srcArrayEndTemp) {\n    do {\n      destArrayTempIndex = srcArrayIndex + 1;\n      srcArrayElement = (*srcArrayIndex & 0xffff) + carry;\n      carry = ((int)srcArrayElement >> 0x10) + (*srcArrayIndex >> 0x10);\n      temp = srcArrayElement & 0xffff | carry * 0x10000;\n      *srcArrayTempIndex = temp;\n      carry = carry >> 0x10;\n      srcArrayIndex = destArrayTempIndex;\n      srcArrayTempIndex = srcArrayTempIndex + 1;\n    } while (destArrayTempIndex < srcArrayEndTemp);\n    destArrayIndex = (uint *)((int)destArrayIndex + ((int)srcArrayEndTemp + ~(uint)puVar8 & 0xfffffffc) + 4);\n  }\n  destArrayIndex = destArrayIndex + -1;\n  while (temp == 0) {\n    destArrayIndex = destArrayIndex + -1;\n    numElements = numElements - 1;\n    temp = *destArrayIndex;\n  }\n  *(uint *)(memoryAllocation + 0x10) = numElements;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "compare_and_allocate_memory_08009530",
                "param_1": "srcArray",
                "param_2": "srcArrayEnd",
                "param_3": "destArrayEnd",
                "iVar1": "memoryAllocation",
                "puVar2": "srcArrayIndex",
                "uVar3": "srcArrayElement",
                "uVar4": "temp",
                "uVar5": "isEqual",
                "puVar6": "destArrayIndex",
                "puVar7": "srcArrayTempIndex",
                "puVar9": "destArrayTempIndex",
                "puVar10": "srcArrayTemp",
                "puVar11": "srcArrayEndTemp",
                "iVar12": "carry",
                "puVar13": "destArrayEndTemp",
                "uVar14": "numElements"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "initialize_memory_08009630",
            "code": "\nint initializeMemory_08009630(undefined4 ptr1,undefined4 ptr2,uint val1,uint val2,int *resultParam1,\n                int *resultParam2)\n\n{\n  int memory;\n  uint leadingZeros;\n  int temp1;\n  int temp2;\n  uint temp3;\n  uint temp4;\n  undefined8 temp5;\n  uint localVal1;\n  uint localVal2;\n  \n  memory = allocate_and_initialize_memory_080090c0(ptr1,1);\n  temp4 = (val2 << 1) >> 0x15;\n  localVal2 = val2 & 0xfffff;\n  if (temp4 != 0) {\n    localVal2 = localVal2 | 0x100000;\n  }\n  if (val1 == 0) {\n    temp1 = count_leading_zeros_080091e4(&localVal2);\n    temp2 = 1;\n    leadingZeros = temp1 + 0x20;\n    *(undefined4 *)(memory + 0x10) = 1;\n    *(uint *)(memory + 0x14) = localVal2;\n  }\n  else {\n    localVal1 = val1;\n    leadingZeros = count_leading_zeros_080091e4(&localVal1);\n    if (leadingZeros == 0) {\n      *(uint *)(memory + 0x14) = localVal1;\n    }\n    else {\n      temp3 = localVal2 << (0x20 - leadingZeros & 0xff);\n      localVal2 = localVal2 >> (leadingZeros & 0xff);\n      *(uint *)(memory + 0x14) = temp3 | localVal1;\n    }\n    if (localVal2 == 0) {\n      temp2 = 1;\n    }\n    else {\n      temp2 = 2;\n    }\n    *(uint *)(memory + 0x18) = localVal2;\n    *(int *)(memory + 0x10) = temp2;\n  }\n  if (temp4 == 0) {\n    *resultParam1 = leadingZeros - 0x432;\n    temp5 = count_leading_zeros_080091a4(*(undefined4 *)(memory + temp2 * 4 + 0x10));\n    *resultParam2 = (int)((ulonglong)temp5 >> 0x20) * 0x20 - (int)temp5;\n    return memory;\n  }\n  *resultParam1 = (temp4 - 0x433) + leadingZeros;\n  *resultParam2 = 0x35 - leadingZeros;\n  return memory;\n}\n\n",
            "renaming": {
                "FUN_08009630": "initialize_memory_08009630",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "val1",
                "param_4": "val2",
                "param_5": "resultParam1",
                "param_6": "resultParam2",
                "iVar1": "memory",
                "uVar2": "leadingZeros",
                "iVar3": "temp1",
                "iVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "local_20": "localVal1",
                "local_1c": "localVal2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_float_value_080096e0",
            "code": "\nundefined8 calculate_float_value_080096e0(uint input_value1,uint input_value2,int *output_param,undefined4 additional_data)\n\n{\n  int temp_var1;\n  uint temp_var2;\n  undefined8 combined_values;\n  \n  combined_values = CONCAT44(input_value2,input_value1);\n  temp_var1 = 0;\n  temp_var2 = input_value2 & 0x7fffffff;\n  *output_param = 0;\n  if ((temp_var2 < 0x7ff00000) && ((temp_var2 | input_value1) != 0)) {\n    if (temp_var2 < 0x100000) {\n      combined_values = calculate_floating_point_080004c8(input_value1,input_value2,0,0x43500000,additional_data);\n      temp_var1 = -0x36;\n      temp_var2 = (uint)((ulonglong)combined_values >> 0x20) & 0x7fffffff;\n    }\n    input_value1 = (uint)combined_values;\n    input_value2 = (uint)((ulonglong)combined_values >> 0x20) & 0x800fffff | 0x3fe00000;\n    *output_param = ((int)temp_var2 >> 0x14) + -0x3fe + temp_var1;\n  }\n  return CONCAT44(input_value2,input_value1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_float_value_080096e0",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "output_param",
                "param_4": "additional_data",
                "iVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "combined_values"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "allocate_and_store_memory_08009744",
            "code": "\nvoid allocateAndStoreMemory_08009744(int *result,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000c10 = 0;\n  allocationResult = allocate_memory_08005728(size);\n  if ((allocationResult == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "allocate_and_store_memory_08009744",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_bytes_with_filter_08009768",
            "code": "\nvoid copyBytesWithFilter_08009768(uint *destination,uint *source,uint length)\n\n{\n  char currentCharacter;\n  uint *sourcePtr;\n  uint *destinationPtr;\n  uint currentValue;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) &&\n     (destinationPtr = destination, sourcePtr = source, 3 < length)) {\n    do {\n      source = sourcePtr + 1;\n      currentValue = *sourcePtr;\n      destination = destinationPtr;\n      if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      destination = destinationPtr + 1;\n      *destinationPtr = currentValue;\n      destinationPtr = destination;\n      sourcePtr = source;\n    } while (3 < length);\n  }\n  sourcePtr = source;\n  if (length != 0) {\nLAB_0800979c:\n    currentCharacter = *(char *)sourcePtr;\n    *(char *)destination = currentCharacter;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      length = length - 1;\n      if (currentCharacter == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      sourcePtr = (uint *)((int)sourcePtr + 1);\n      currentCharacter = *(char *)sourcePtr;\n      *(char *)destination = currentCharacter;\n    }\n    if (length != 0) {\n      sourcePtr = destination;\n      do {\n        destinationPtr = (uint *)((int)sourcePtr + 1);\n        *(char *)sourcePtr = '\\0';\n        sourcePtr = destinationPtr;\n      } while (destinationPtr != (uint *)(length + (int)destination));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_bytes_with_filter_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentCharacter",
                "puVar2": "sourcePtr",
                "puVar3": "destinationPtr",
                "uVar4": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 process_data_080097cc(undefined4 *output_buffer,int *input_buffer,int *parameters)\n\n{\n  int initial_value;\n  uint temp_var1;\n  int allocated_memory;\n  int temp_var2;\n  uint remaining_space;\n  uint temp_var3;\n  undefined4 *current_ptr1;\n  undefined4 *current_ptr2;\n  undefined4 temp_var4;\n  \n  if (parameters[2] != 0) {\n    initial_value = *input_buffer;\n    remaining_space = input_buffer[2];\n    current_ptr2 = (undefined4 *)*parameters;\n    do {\n      do {\n        current_ptr1 = current_ptr2 + 2;\n        temp_var4 = *current_ptr2;\n        temp_var3 = current_ptr2[1];\n        current_ptr2 = current_ptr1;\n      } while (temp_var3 == 0);\n      temp_var1 = temp_var3;\n      if ((remaining_space <= temp_var3) && (temp_var1 = remaining_space, (*(ushort *)(input_buffer + 3) & 0x480) != 0)) {\n        temp_var2 = initial_value - input_buffer[4];\n        remaining_space = (input_buffer[5] * 3) / 2;\n        temp_var1 = temp_var3 + 1 + temp_var2;\n        if (remaining_space < temp_var1) {\n          remaining_space = temp_var1;\n        }\n        if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x15) < 0) {\n          allocated_memory = allocate_and_store_memory_08008af8(output_buffer,remaining_space);\n          if (allocated_memory == 0) {\nLAB_08009896:\n            *output_buffer = 0xc;\n            *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n            parameters[1] = 0;\n            parameters[2] = 0;\n            return 0xffffffff;\n          }\n          copy_and_advance_pointer_08001084(allocated_memory,input_buffer[4],temp_var2);\n          *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          allocated_memory = allocate_and_initialize_memory_08009adc(output_buffer);\n          if (allocated_memory == 0) {\n            initialize_and_allocate_memory_080088ec(output_buffer,input_buffer[4]);\n            goto LAB_08009896;\n          }\n        }\n        initial_value = allocated_memory + temp_var2;\n        input_buffer[5] = remaining_space;\n        input_buffer[4] = allocated_memory;\n        *input_buffer = initial_value;\n        input_buffer[2] = remaining_space - temp_var2;\n        temp_var1 = temp_var3;\n      }\n      copy_memory_08009a18(initial_value,temp_var4,temp_var1);\n      temp_var2 = parameters[2];\n      remaining_space = input_buffer[2] - temp_var1;\n      initial_value = *input_buffer + temp_var1;\n      input_buffer[2] = remaining_space;\n      *input_buffer = initial_value;\n      parameters[2] = temp_var2 - temp_var3;\n    } while (temp_var2 - temp_var3 != 0);\n  }\n  parameters[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "parameters",
                "iVar1": "initial_value",
                "uVar2": "temp_var1",
                "iVar3": "allocated_memory",
                "iVar4": "temp_var2",
                "uVar5": "remaining_space",
                "uVar6": "temp_var3",
                "puVar7": "current_ptr1",
                "puVar8": "current_ptr2",
                "uVar9": "temp_var4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "handle_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 handleData_080098c0(int action,undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined *ptr;\n  undefined4 result;\n  uint bitMask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (action != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data2;\n      bitMask = 1 << (count & 0xff);\n      *(uint *)(ptr + 0x188) = *(uint *)(ptr + 0x188) | bitMask;\n      *(undefined4 *)(ptr + count * 4 + 0x108) = data3;\n      if (action == 2) {\n        *(uint *)(ptr + 0x18c) = bitMask | *(uint *)(ptr + 0x18c);\n      }\n    }\n    *(uint *)(ptr + 4) = count + 1;\n    result = DAT_20000448;\n    *(undefined4 *)(ptr + (count + 2) * 4) = data1;\n    FUNC_08008af4(result);\n    result = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "handle_data_080098c0",
                "param_1": "action",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "ptr",
                "uVar2": "result",
                "uVar3": "bitMask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "allocate_and_initialize_memory_08009980",
            "code": "\nundefined4 * allocateAndInitializeMemory_08009980(undefined4 paramPtr,int numElements,int elementSize)\n\n{\n  undefined4 *allocatedMemory;\n  uint adjustedSize;\n  undefined4 *pointerToValue;\n  \n  allocatedMemory = (undefined4 *)allocate_and_store_memory_08008af8(paramPtr,elementSize * numElements);\n  if (allocatedMemory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjustedSize = (allocatedMemory[-1] & 0xfffffffc) - 4;\n  if (adjustedSize < 0x25) {\n    pointerToValue = allocatedMemory;\n    if (0x13 < adjustedSize) {\n      *allocatedMemory = 0;\n      allocatedMemory[1] = 0;\n      if (0x1b < adjustedSize) {\n        allocatedMemory[2] = 0;\n        allocatedMemory[3] = 0;\n        if (adjustedSize == 0x24) {\n          allocatedMemory[4] = 0;\n          allocatedMemory[5] = 0;\n          pointerToValue = allocatedMemory + 6;\n        }\n        else {\n          pointerToValue = allocatedMemory + 4;\n        }\n        *pointerToValue = 0;\n        pointerToValue[1] = 0;\n        pointerToValue[2] = 0;\n        return allocatedMemory;\n      }\n      pointerToValue = allocatedMemory + 2;\n    }\n    *pointerToValue = 0;\n    pointerToValue[1] = 0;\n    pointerToValue[2] = 0;\n    return allocatedMemory;\n  }\n  fill_memory_08005d68(allocatedMemory,0);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "param_1": "paramPtr",
                "param_2": "numElements",
                "param_3": "elementSize",
                "puVar1": "allocatedMemory",
                "uVar2": "adjustedSize",
                "puVar3": "pointerToValue"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  int loopCounter;\n  undefined *destBytePtr;\n  undefined4 *srcBytePtr;\n  uint tempLength;\n  uint remainingLength;\n  \n  if ((source < destination) && (srcPtr = (undefined4 *)((int)source + length), destination < srcPtr)) {\n    destBytePtr = (undefined *)((int)destination + length);\n    if (length != 0) {\n      do {\n        srcPtr = (undefined4 *)((int)srcPtr + -1);\n        destBytePtr = destBytePtr + -1;\n        *destBytePtr = *(undefined *)srcPtr;\n      } while (source != srcPtr);\n    }\n  }\n  else {\n    remainingLength = length;\n    if (0xf < length) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      srcPtr = source + 4;\n      destPtr = destination + 4;\n      do {\n        srcBytePtr = srcPtr + 4;\n        destPtr[-4] = srcPtr[-4];\n        destPtr[-3] = srcPtr[-3];\n        destPtr[-2] = srcPtr[-2];\n        destPtr[-1] = srcPtr[-1];\n        srcPtr = srcBytePtr;\n        destPtr = destPtr + 4;\n      } while (srcBytePtr != (undefined4 *)((int)source + (length - 0x10 & 0xfffffff0) + 0x20));\n      loopCounter = (length - 0x10 >> 4) + 1;\n      remainingLength = length & 0xf;\n      source = source + loopCounter * 4;\n      destination = destination + loopCounter * 4;\n      if (3 < remainingLength) {\n        srcPtr = destination + -1;\n        tempLength = remainingLength;\n        destPtr = source;\n        do {\n          tempLength = tempLength - 4;\n          srcPtr = srcPtr + 1;\n          *srcPtr = *destPtr;\n          destPtr = destPtr + 1;\n        } while (3 < tempLength);\n        loopCounter = (remainingLength - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + loopCounter);\n        source = (undefined4 *)((int)source + loopCounter);\n        remainingLength = length & 3;\n      }\n    }\n    length = remainingLength;\n    if (remainingLength != 0) {\nLAB_08009abc:\n      destBytePtr = (undefined *)((int)destination + -1);\n      srcPtr = source;\n      do {\n        destPtr = (undefined4 *)((int)srcPtr + 1);\n        destBytePtr = destBytePtr + 1;\n        *destBytePtr = *(undefined *)srcPtr;\n        srcPtr = destPtr;\n      } while (destPtr != (undefined4 *)(length + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "iVar3": "loopCounter",
                "puVar4": "destBytePtr",
                "puVar5": "srcBytePtr",
                "uVar6": "tempLength",
                "uVar7": "remainingLength"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_and_initialize_memory_08009adc",
            "code": "\nint * allocate_and_initialize_memory_08009adc(undefined4 *ptr_to_alloc,int *ptr_to_data,uint data_size)\n\n{\n  int *ptr_temp_1;\n  int temp_1;\n  int *ptr_temp_2;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  int *ptr_temp_3;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  \n  if (ptr_to_data == (int *)0x0) {\n    ptr_temp_2 = (int *)allocate_and_store_memory_08008af8(ptr_to_alloc,data_size);\n    return ptr_temp_2;\n  }\n  initialize_data_080090a8();\n  temp_4 = ptr_to_data[-1];\n  temp_6 = temp_4 & 0xfffffffc;\n  ptr_temp_2 = ptr_to_data + -2;\n  if (data_size + 0xb < 0x17) {\n    temp_5 = 0x10;\n  }\n  else {\n    temp_5 = data_size + 0xb & 0xfffffff8;\n    if ((int)temp_5 < 0) goto LAB_08009b8e;\n  }\n  if (temp_5 < data_size) {\nLAB_08009b8e:\n    *ptr_to_alloc = 0xc;\n    return (int *)0x0;\n  }\n  temp_8 = (int)ptr_temp_2 + temp_6;\n  temp_7 = temp_6;\n  if ((int)temp_6 < (int)temp_5) {\n    if (DAT_20000454 == temp_8) {\n      temp_8 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + temp_6;\n      if ((int)(temp_5 + 0x10) <= temp_8) {\n        DAT_20000454 = (int)ptr_temp_2 + temp_5;\n        *(uint *)(DAT_20000454 + 4) = temp_8 - temp_5 | 1;\n        ptr_to_data[-1] = temp_5 | ptr_to_data[-1] & 1U;\n        initialize_data_080090b4(ptr_to_alloc);\n        return ptr_to_data;\n      }\n      if (-1 < (int)(temp_4 << 0x1f)) {\n        ptr_temp_1 = (int *)((int)ptr_temp_2 - ptr_to_data[-2]);\n        temp_4 = ptr_temp_1[1] & 0xfffffffc;\n        if ((int)(temp_5 + 0x10) <= (int)(temp_8 + temp_4)) {\n          temp_3 = ptr_temp_1[3];\n          ptr_temp_2 = ptr_temp_1 + 2;\n          temp_1 = *ptr_temp_2;\n          temp_6 = temp_6 - 4;\n          *(int *)(temp_1 + 0xc) = temp_3;\n          *(int *)(temp_3 + 8) = temp_1;\n          if (temp_6 < 0x25) {\n            temp_1 = *ptr_to_data;\n            ptr_temp_3 = ptr_temp_2;\n            if (0x13 < temp_6) {\n              ptr_temp_1[2] = temp_1;\n              ptr_temp_1[3] = ptr_to_data[1];\n              temp_1 = ptr_to_data[2];\n              if (temp_6 < 0x1c) {\n                ptr_to_data = ptr_to_data + 2;\n                ptr_temp_3 = ptr_temp_1 + 4;\n              }\n              else {\n                ptr_temp_1[4] = temp_1;\n                ptr_temp_1[5] = ptr_to_data[3];\n                temp_1 = ptr_to_data[4];\n                if (temp_6 == 0x24) {\n                  ptr_temp_1[6] = temp_1;\n                  ptr_temp_1[7] = ptr_to_data[5];\n                  temp_1 = ptr_to_data[6];\n                  ptr_to_data = ptr_to_data + 6;\n                  ptr_temp_3 = ptr_temp_1 + 8;\n                }\n                else {\n                  ptr_to_data = ptr_to_data + 4;\n                  ptr_temp_3 = ptr_temp_1 + 6;\n                }\n              }\n            }\n            *ptr_temp_3 = temp_1;\n            ptr_temp_3[1] = ptr_to_data[1];\n            ptr_temp_3[2] = ptr_to_data[2];\n          }\n          else {\n            copy_memory_08009a18(ptr_temp_2,ptr_to_data);\n          }\n          DAT_20000454 = (int)ptr_temp_1 + temp_5;\n          *(uint *)(DAT_20000454 + 4) = (temp_8 + temp_4) - temp_5 | 1;\n          ptr_temp_1[1] = temp_5 | ptr_temp_1[1] & 1U;\n          initialize_data_080090b4(ptr_to_alloc);\n          return ptr_temp_2;\n        }\nLAB_08009bb0:\n        temp_7 = temp_6 + temp_4;\n        if ((int)temp_5 <= (int)temp_7) {\n          temp_3 = ptr_temp_1[3];\n          ptr_temp_3 = ptr_temp_1 + 2;\n          temp_1 = *ptr_temp_3;\n          *(int *)(temp_1 + 0xc) = temp_3;\n          temp_8 = (int)ptr_temp_1 + temp_7;\n          *(int *)(temp_3 + 8) = temp_1;\n          ptr_temp_2 = ptr_temp_1;\n          if (temp_6 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_memory_08009a18(ptr_temp_3,ptr_to_data);\n          ptr_to_data = ptr_temp_3;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_8 + 4) & 0xfffffffe) + temp_8 + 4) << 0x1f) {\n        temp_2 = *(uint *)(temp_8 + 4) & 0xfffffffc;\n        temp_7 = temp_6 + temp_2;\n        if ((int)temp_7 < (int)temp_5) {\n          if ((int)(temp_4 << 0x1f) < 0) goto LAB_08009b36;\n          ptr_temp_1 = (int *)((int)ptr_temp_2 - ptr_to_data[-2]);\n          temp_4 = ptr_temp_1[1] & 0xfffffffc;\n          temp_7 = temp_2 + temp_4 + temp_6;\n          if ((int)temp_7 < (int)temp_5) goto LAB_08009bb0;\n          temp_1 = *(int *)(temp_8 + 8);\n          temp_8 = *(int *)(temp_8 + 0xc);\n          *(int *)(temp_1 + 0xc) = temp_8;\n          *(int *)(temp_8 + 8) = temp_1;\n          ptr_temp_3 = ptr_temp_1 + 2;\n          temp_1 = *ptr_temp_3;\n          temp_3 = ptr_temp_1[3];\n          *(int *)(temp_1 + 0xc) = temp_3;\n          temp_8 = (int)ptr_temp_1 + temp_7;\n          *(int *)(temp_3 + 8) = temp_1;\n          ptr_temp_2 = ptr_temp_1;\n          if (0x24 < temp_6 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          temp_6 = temp_6 - 4;\n          temp_1 = *ptr_to_data;\n          ptr_temp_1 = ptr_temp_3;\n          if (0x13 < temp_6) {\n            ptr_temp_2[2] = temp_1;\n            ptr_temp_2[3] = ptr_to_data[1];\n            temp_1 = ptr_to_data[2];\n            if (temp_6 < 0x1c) {\n              ptr_to_data = ptr_to_data + 2;\n              ptr_temp_1 = ptr_temp_2 + 4;\n            }\n            else {\n              ptr_temp_2[4] = temp_1;\n              ptr_temp_2[5] = ptr_to_data[3];\n              temp_1 = ptr_to_data[4];\n              if (temp_6 == 0x24) {\n                ptr_temp_2[6] = temp_1;\n                ptr_temp_2[7] = ptr_to_data[5];\n                temp_1 = ptr_to_data[6];\n                ptr_to_data = ptr_to_data + 6;\n                ptr_temp_1 = ptr_temp_2 + 8;\n              }\n              else {\n                ptr_to_data = ptr_to_data + 4;\n                ptr_temp_1 = ptr_temp_2 + 6;\n              }\n            }\n          }\n          *ptr_temp_1 = temp_1;\n          ptr_temp_1[1] = ptr_to_data[1];\n          ptr_temp_1[2] = ptr_to_data[2];\n          ptr_to_data = ptr_temp_3;\n        }\n        else {\n          temp_1 = *(int *)(temp_8 + 8);\n          temp_3 = *(int *)(temp_8 + 0xc);\n          *(int *)(temp_1 + 0xc) = temp_3;\n          temp_8 = (int)ptr_temp_2 + temp_7;\n          *(int *)(temp_3 + 8) = temp_1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_4 << 0x1f)) {\n        ptr_temp_1 = (int *)((int)ptr_temp_2 - ptr_to_data[-2]);\n        temp_4 = ptr_temp_1[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    ptr_temp_1 = (int *)allocate_and_store_memory_08008af8(ptr_to_alloc,data_size);\n    if (ptr_temp_1 != (int *)0x0) {\n      if ((int *)((ptr_to_data[-1] & 0xfffffffeU) + (int)ptr_temp_2) == ptr_temp_1 + -2) {\n        temp_7 = temp_6 + (ptr_temp_1[-1] & 0xfffffffcU);\n        temp_8 = (int)ptr_temp_2 + temp_7;\n        goto LAB_08009c00;\n      }\n      temp_6 = temp_6 - 4;\n      if (temp_6 < 0x25) {\n        temp_8 = *ptr_to_data;\n        ptr_temp_2 = ptr_to_data;\n        ptr_temp_3 = ptr_temp_1;\n        if (0x13 < temp_6) {\n          *ptr_temp_1 = temp_8;\n          ptr_temp_1[1] = ptr_to_data[1];\n          if (temp_6 < 0x1c) {\n            temp_8 = ptr_to_data[2];\n            ptr_temp_2 = ptr_to_data + 2;\n            ptr_temp_3 = ptr_temp_1 + 2;\n          }\n          else {\n            ptr_temp_1[2] = ptr_to_data[2];\n            ptr_temp_1[3] = ptr_to_data[3];\n            if (temp_6 == 0x24) {\n              ptr_temp_1[4] = ptr_to_data[4];\n              ptr_temp_1[5] = ptr_to_data[5];\n              temp_8 = ptr_to_data[6];\n              ptr_temp_2 = ptr_to_data + 6;\n              ptr_temp_3 = ptr_temp_1 + 6;\n            }\n            else {\n              temp_8 = ptr_to_data[4];\n              ptr_temp_2 = ptr_to_data + 4;\n              ptr_temp_3 = ptr_temp_1 + 4;\n            }\n          }\n        }\n        *ptr_temp_3 = temp_8;\n        ptr_temp_3[1] = ptr_temp_2[1];\n        ptr_temp_3[2] = ptr_temp_2[2];\n      }\n      else {\n        copy_memory_08009a18(ptr_temp_1,ptr_to_data);\n      }\n      initialize_and_allocate_memory_080088ec(ptr_to_alloc,ptr_to_data);\n    }\n    initialize_data_080090b4(ptr_to_alloc);\n    ptr_to_data = ptr_temp_1;\n  }\n  else {\nLAB_08009c00:\n    if (temp_7 - temp_5 < 0x10) {\n      ptr_temp_2[1] = ptr_temp_2[1] & 1U | temp_7;\n      *(uint *)(temp_8 + 4) = *(uint *)(temp_8 + 4) | 1;\n    }\n    else {\n      ptr_temp_2[1] = ptr_temp_2[1] & 1U | temp_5;\n      *(uint *)((int)ptr_temp_2 + temp_5 + 4) = temp_7 - temp_5 | 1;\n      *(uint *)(temp_8 + 4) = *(uint *)(temp_8 + 4) | 1;\n      initialize_and_allocate_memory_080088ec(ptr_to_alloc,(int)ptr_temp_2 + temp_5 + 8);\n    }\n    initialize_data_080090b4(ptr_to_alloc);\n  }\n  return ptr_to_data;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_and_initialize_memory_08009adc",
                "param_1": "ptr_to_alloc",
                "param_2": "ptr_to_data",
                "param_3": "data_size",
                "piVar1": "ptr_temp_1",
                "iVar2": "temp_1",
                "piVar3": "ptr_temp_2",
                "uVar4": "temp_2",
                "iVar5": "temp_3",
                "uVar6": "temp_4",
                "piVar7": "ptr_temp_3",
                "uVar8": "temp_5",
                "uVar9": "temp_6",
                "uVar10": "temp_7",
                "iVar11": "temp_8"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 159068,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": []
}