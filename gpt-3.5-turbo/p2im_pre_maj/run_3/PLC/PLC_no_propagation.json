{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *input_array,uint target_byte,uint array_length)\n\n{\n  byte current_byte;\n  char is_byte_zero;\n  char is_byte_zero_shifted_8;\n  char is_byte_zero_shifted_16;\n  char is_byte_zero_shifted_24;\n  byte *next_byte_address;\n  uint *current_array_address;\n  byte *matching_byte_address;\n  uint array_alignment;\n  uint aligned_length;\n  uint xor_result1;\n  uint xor_result2;\n  bool is_xor_nonzero;\n  bool is_xor_nonzero_shifted_8;\n  bool is_xor_nonzero_shifted_16;\n  bool is_xor_nonzero_shifted_24;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)array_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n      current_array_address = (uint *)((int)input_array + 1);\n      current_byte = *(byte *)input_array;\n      array_length = array_length - 1;\n      input_array = current_array_address;\n    } while (current_byte != target_byte);\n  }\n  else {\n    array_alignment = (uint)input_array & 7;\n    while( true ) {\n      if (array_alignment == 0) {\n        array_alignment = target_byte | target_byte << 8;\n        array_alignment = array_alignment | array_alignment << 0x10;\n        aligned_length = array_length & 0xfffffff8;\n        do {\n          current_array_address = input_array + 2;\n          aligned_length = aligned_length - 8;\n          xor_result1 = *input_array ^ array_alignment;\n          xor_result2 = input_array[1] ^ array_alignment;\n          is_byte_zero = -((char)xor_result1 == '\\0');\n          is_byte_zero_shifted_8 = -((char)(xor_result1 >> 8) == '\\0');\n          is_byte_zero_shifted_16 = -((char)(xor_result1 >> 0x10) == '\\0');\n          is_byte_zero_shifted_24 = -((char)(xor_result1 >> 0x18) == '\\0');\n          xor_result1 = CONCAT13(is_byte_zero_shifted_24,CONCAT12(is_byte_zero_shifted_16,CONCAT11(is_byte_zero_shifted_8,is_byte_zero)));\n          is_xor_nonzero = (char)xor_result2 != '\\0';\n          is_xor_nonzero_shifted_8 = (char)(xor_result2 >> 8) != '\\0';\n          is_xor_nonzero_shifted_16 = (char)(xor_result2 >> 0x10) != '\\0';\n          is_xor_nonzero_shifted_24 = (char)(xor_result2 >> 0x18) != '\\0';\n          xor_result2 = CONCAT13(is_xor_nonzero_shifted_24 * is_byte_zero_shifted_24 - !is_xor_nonzero_shifted_24,\n                            CONCAT12(is_xor_nonzero_shifted_16 * is_byte_zero_shifted_16 - !is_xor_nonzero_shifted_16,\n                                     CONCAT11(is_xor_nonzero_shifted_8 * is_byte_zero_shifted_8 - !is_xor_nonzero_shifted_8,is_xor_nonzero * is_byte_zero - !is_xor_nonzero)));\n          if (xor_result2 != 0) {\n            if (xor_result1 == 0) {\n              matching_byte_address = (byte *)((int)input_array + 5);\n              xor_result1 = xor_result2;\n            }\n            else {\n              matching_byte_address = (byte *)((int)input_array + 1);\n            }\n            if ((xor_result1 & 1) == 0) {\n              is_xor_nonzero = (xor_result1 & 0x100) == 0;\n              next_byte_address = matching_byte_address + 1;\n              if (is_xor_nonzero) {\n                is_xor_nonzero = (xor_result1 & 0x18000) == 0;\n                next_byte_address = matching_byte_address + 2;\n              }\n              matching_byte_address = next_byte_address;\n              if (is_xor_nonzero) {\n                matching_byte_address = matching_byte_address + 1;\n              }\n            }\n            return matching_byte_address + -1;\n          }\n          input_array = current_array_address;\n        } while (aligned_length != 0);\n        array_length = array_length & 7;\n        goto joined_r0x08000290;\n      }\n      current_array_address = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n      if (*(byte *)input_array == target_byte) break;\n      array_alignment = (uint)current_array_address & 7;\n      input_array = current_array_address;\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_array_address + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "input_array",
                "param_2": "target_byte",
                "param_3": "array_length",
                "bVar1": "current_byte",
                "cVar2": "is_byte_zero",
                "cVar3": "is_byte_zero_shifted_8",
                "cVar4": "is_byte_zero_shifted_16",
                "cVar5": "is_byte_zero_shifted_24",
                "pbVar6": "next_byte_address",
                "puVar7": "current_array_address",
                "pbVar8": "matching_byte_address",
                "uVar9": "array_alignment",
                "uVar10": "aligned_length",
                "uVar11": "xor_result1",
                "uVar12": "xor_result2",
                "bVar13": "is_xor_nonzero",
                "bVar14": "is_xor_nonzero_shifted_8",
                "bVar15": "is_xor_nonzero_shifted_16",
                "bVar16": "is_xor_nonzero_shifted_24"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "check_params_and_return_concatenation_080002d0",
            "code": "\nundefined8 checkParamsAndReturnConcatenation_080002d0(int input1,int input2,int param3,int param4)\n\n{\n  undefined8 result;\n  \n  if ((param4 == 0) && (param3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = FUN_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "check_params_and_return_concatenation_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "perform_division_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong performDivision_08000300(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper,uint *quotient_remainder)\n\n{\n  ulonglong result;\n  uint temp_var;\n  uint quotient_lower;\n  uint quotient_upper;\n  uint remainder_lower;\n  uint temp_quotient_lower;\n  uint temp_divisor;\n  uint quotient_temp;\n  uint divisor_temp;\n  int count;\n  bool carry_flag;\n  \n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      count = LZCOUNT(divisor);\n      if (count != 0) {\n        divisor = divisor << count;\n        dividend_upper = dividend >> (0x20U - count & 0xff) | dividend_upper << count;\n        dividend = dividend << count;\n      }\n      quotient_temp = divisor >> 0x10;\n      temp_quotient_lower = dividend_upper / quotient_temp;\n      remainder_lower = dividend >> 0x10 | (dividend_upper - quotient_temp * temp_quotient_lower) * 0x10000;\n      quotient_upper = temp_quotient_lower * (divisor & 0xffff);\n      quotient_lower = temp_quotient_lower;\n      if (remainder_lower <= quotient_upper && quotient_upper - remainder_lower != 0) {\n        carry_flag = CARRY4(remainder_lower,divisor);\n        remainder_lower = remainder_lower + divisor;\n        quotient_lower = temp_quotient_lower - 1;\n        if ((carry_flag == false) && (remainder_lower <= quotient_upper && quotient_upper - remainder_lower != 0)) {\n          quotient_lower = temp_quotient_lower - 2;\n          remainder_lower = remainder_lower + divisor;\n        }\n      }\n      temp_quotient_lower = (remainder_lower - quotient_upper) / quotient_temp;\n      remainder_lower = dividend & 0xffff | ((remainder_lower - quotient_upper) - quotient_temp * temp_quotient_lower) * 0x10000;\n      quotient_temp = temp_quotient_lower * (divisor & 0xffff);\n      quotient_upper = temp_quotient_lower;\n      if (remainder_lower <= quotient_temp && quotient_temp - remainder_lower != 0) {\n        carry_flag = CARRY4(remainder_lower,divisor);\n        remainder_lower = remainder_lower + divisor;\n        quotient_upper = temp_quotient_lower - 1;\n        if ((carry_flag == false) && (remainder_lower <= quotient_temp && quotient_temp - remainder_lower != 0)) {\n          quotient_upper = temp_quotient_lower - 2;\n          remainder_lower = remainder_lower + divisor;\n        }\n      }\n      remainder_lower = remainder_lower - quotient_temp;\n      quotient_upper = quotient_upper | quotient_lower << 0x10;\n      quotient_lower = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      count = LZCOUNT(divisor);\n      if (count == 0) {\n        dividend_upper = dividend_upper - divisor;\n        remainder_lower = divisor >> 0x10;\n        divisor_temp = divisor & 0xffff;\n        quotient_lower = 1;\n      }\n      else {\n        divisor = divisor << count;\n        remainder_lower = divisor >> 0x10;\n        quotient_upper = dividend_upper >> (0x20U - count & 0xff);\n        temp_divisor = dividend >> (0x20U - count & 0xff) | dividend_upper << count;\n        quotient_lower = quotient_upper / remainder_lower;\n        divisor_temp = divisor & 0xffff;\n        quotient_temp = temp_divisor >> 0x10 | (quotient_upper - remainder_lower * quotient_lower) * 0x10000;\n        temp_quotient_lower = quotient_lower * divisor_temp;\n        dividend = dividend << count;\n        quotient_upper = quotient_lower;\n        if (quotient_temp <= temp_quotient_lower && temp_quotient_lower - quotient_temp != 0) {\n          carry_flag = CARRY4(quotient_temp,divisor);\n          quotient_temp = quotient_temp + divisor;\n          quotient_upper = quotient_lower - 1;\n          if ((carry_flag == false) && (quotient_temp <= temp_quotient_lower && temp_quotient_lower - quotient_temp != 0)) {\n            quotient_upper = quotient_lower - 2;\n            quotient_temp = quotient_temp + divisor;\n          }\n        }\n        temp_var = (quotient_temp - temp_quotient_lower) / remainder_lower;\n        dividend_upper = temp_divisor & 0xffff | ((quotient_temp - temp_quotient_lower) - remainder_lower * temp_var) * 0x10000;\n        temp_quotient_lower = temp_var * divisor_temp;\n        quotient_lower = temp_var;\n        if (dividend_upper <= temp_quotient_lower && temp_quotient_lower - dividend_upper != 0) {\n          carry_flag = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          quotient_lower = temp_var - 1;\n          if ((carry_flag == false) && (dividend_upper <= temp_quotient_lower && temp_quotient_lower - dividend_upper != 0)) {\n            quotient_lower = temp_var - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - temp_quotient_lower;\n        quotient_lower = quotient_lower | quotient_upper << 0x10;\n      }\n      temp_divisor = dividend_upper / remainder_lower;\n      quotient_temp = dividend >> 0x10 | (dividend_upper - remainder_lower * temp_divisor) * 0x10000;\n      quotient_upper = divisor_temp * temp_divisor;\n      temp_quotient_lower = temp_divisor;\n      if (quotient_temp <= quotient_upper && quotient_upper - quotient_temp != 0) {\n        carry_flag = CARRY4(quotient_temp,divisor);\n        quotient_temp = quotient_temp + divisor;\n        temp_quotient_lower = temp_divisor - 1;\n        if ((carry_flag == false) && (quotient_temp <= quotient_upper && quotient_upper - quotient_temp != 0)) {\n          temp_quotient_lower = temp_divisor - 2;\n          quotient_temp = quotient_temp + divisor;\n        }\n      }\n      temp_divisor = (quotient_temp - quotient_upper) / remainder_lower;\n      remainder_lower = dividend & 0xffff | ((quotient_temp - quotient_upper) - remainder_lower * temp_divisor) * 0x10000;\n      divisor_temp = divisor_temp * temp_divisor;\n      quotient_upper = temp_divisor;\n      if (remainder_lower <= divisor_temp && divisor_temp - remainder_lower != 0) {\n        carry_flag = CARRY4(remainder_lower,divisor);\n        remainder_lower = remainder_lower + divisor;\n        quotient_upper = temp_divisor - 1;\n        if ((carry_flag == false) && (remainder_lower <= divisor_temp && divisor_temp - remainder_lower != 0)) {\n          quotient_upper = temp_divisor - 2;\n          remainder_lower = remainder_lower + divisor;\n        }\n      }\n      remainder_lower = remainder_lower - divisor_temp;\n      quotient_upper = quotient_upper | temp_quotient_lower << 0x10;\n    }\n    if (quotient_remainder != (uint *)0x0) {\n      *quotient_remainder = remainder_lower >> count;\n      quotient_remainder[1] = 0;\n      return CONCAT44(quotient_lower,quotient_upper);\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    if (quotient_remainder != (uint *)0x0) {\n      *quotient_remainder = dividend;\n      quotient_remainder[1] = dividend_upper;\n      return 0;\n    }\n    quotient_upper = 0;\n    quotient_lower = 0;\n  }\n  else {\n    count = LZCOUNT(divisor_upper);\n    if (count != 0) {\n      quotient_temp = 0x20 - count;\n      quotient_lower = divisor >> (quotient_temp & 0xff) | divisor_upper << count;\n      divisor_temp = quotient_lower >> 0x10;\n      quotient_upper = dividend_upper >> (quotient_temp & 0xff);\n      temp_var = dividend >> (quotient_temp & 0xff) | dividend_upper << count;\n      temp_divisor = quotient_upper / divisor_temp;\n      temp_quotient_lower = temp_var >> 0x10 | (quotient_upper - divisor_temp * temp_divisor) * 0x10000;\n      remainder_lower = temp_divisor * (quotient_lower & 0xffff);\n      dividend = dividend << count;\n      quotient_upper = temp_divisor;\n      if (temp_quotient_lower <= remainder_lower && remainder_lower - temp_quotient_lower != 0) {\n        carry_flag = CARRY4(temp_quotient_lower,quotient_lower);\n        temp_quotient_lower = temp_quotient_lower + quotient_lower;\n        quotient_upper = temp_divisor - 1;\n        if ((carry_flag == false) && (temp_quotient_lower <= remainder_lower && remainder_lower - temp_quotient_lower != 0)) {\n          quotient_upper = temp_divisor - 2;\n          temp_quotient_lower = temp_quotient_lower + quotient_lower;\n        }\n      }\n      temp_divisor = (temp_quotient_lower - remainder_lower) / divisor_temp;\n      temp_quotient_lower = temp_var & 0xffff | ((temp_quotient_lower - remainder_lower) - divisor_temp * temp_divisor) * 0x10000;\n      divisor_temp = temp_divisor * (quotient_lower & 0xffff);\n      remainder_lower = temp_divisor;\n      if (temp_quotient_lower <= divisor_temp && divisor_temp - temp_quotient_lower != 0) {\n        carry_flag = CARRY4(temp_quotient_lower,quotient_lower);\n        temp_quotient_lower = temp_quotient_lower + quotient_lower;\n        remainder_lower = temp_divisor - 1;\n        if ((carry_flag == false) && (temp_quotient_lower <= divisor_temp && divisor_temp - temp_quotient_lower != 0)) {\n          remainder_lower = temp_divisor - 2;\n          temp_quotient_lower = temp_quotient_lower + quotient_lower;\n        }\n      }\n      remainder_lower = remainder_lower | quotient_upper << 0x10;\n      result = (ulonglong)remainder_lower * (ulonglong)(divisor << count);\n      if (CONCAT44(temp_quotient_lower - divisor_temp,dividend) < result) {\n        result = result - CONCAT44(quotient_lower,divisor << count);\n        remainder_lower = remainder_lower - 1;\n      }\n      if (quotient_remainder != (uint *)0x0) {\n        quotient_upper = ((temp_quotient_lower - divisor_temp) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_remainder = quotient_upper << (quotient_temp & 0xff) | dividend - (uint)result >> count;\n        quotient_remainder[1] = quotient_upper >> count;\n      }\n      return (ulonglong)remainder_lower;\n    }\n    if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_upper = (dividend_upper - divisor_upper) - (uint)carry_flag;\n      quotient_upper = 1;\n    }\n    else {\n      quotient_upper = 0;\n    }\n    quotient_lower = 0;\n    if (quotient_remainder != (uint *)0x0) {\n      *quotient_remainder = dividend;\n      quotient_remainder[1] = dividend_upper;\n      return (ulonglong)quotient_upper;\n    }\n  }\n  return CONCAT44(quotient_lower,quotient_upper);\n}\n\n",
            "renaming": {
                "FUN_08000300": "perform_division_08000300",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "param_5": "quotient_remainder",
                "uVar1": "result",
                "uVar2": "temp_var",
                "uVar3": "quotient_lower",
                "uVar4": "quotient_upper",
                "uVar5": "remainder_lower",
                "uVar6": "temp_quotient_lower",
                "uVar7": "temp_divisor",
                "uVar8": "quotient_temp",
                "uVar9": "divisor_temp",
                "iVar10": "count",
                "bVar11": "carry_flag"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "trigger_software_interrupt_080005e0",
            "code": "\nvoid triggerSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "trigger_software_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_function_080005e4",
            "code": "\nundefined4 executeFunction_080005e4(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = FUN_080005e0(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_function_080005e4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_data_08000600",
            "code": "\nvoid initializeData_08000600(int **dataPtr,undefined4 paramValue)\n\n{\n  char dataFlag;\n  int returnValue;\n  \n  dataFlag = *(char *)((int)dataPtr + 5);\n  if (dataFlag == '\\x02') {\n    *dataPtr = &DAT_20000338;\n  }\n  else if (dataFlag == '\\x03') {\n    *dataPtr = &DAT_20000338;\n  }\n  else if (dataFlag == '\\x01') {\n    *dataPtr = &DAT_20000338;\n  }\n  else {\n    *dataPtr = &DAT_20000338;\n  }\n  FUN_08004388(*dataPtr,paramValue,6);\n  if (1 < *(byte *)((int)dataPtr + 6)) {\n    FUN_08004110(*(byte *)((int)dataPtr + 6),1);\n    FUN_080041bc(*(undefined *)((int)dataPtr + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPtr + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPtr + 0x49) = 0;\n  *(undefined *)((int)dataPtr + 0x4a) = 0;\n  *(undefined2 *)(dataPtr + 0x15) = 0;\n  *(undefined2 *)((int)dataPtr + 0x52) = 0;\n  *(undefined2 *)(dataPtr + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_data_08000600",
                "param_1": "dataPtr",
                "param_2": "paramValue",
                "cVar1": "dataFlag",
                "iVar2": "returnValue"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_08004388",
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataAddress,undefined dataValue,int limit,undefined additionalData)\n\n{\n  *(undefined *)(dataAddress + 4) = dataValue;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(char *)(dataAddress + 5) = (char)limit;\n  *(undefined *)(dataAddress + 6) = additionalData;\n  *(undefined2 *)(dataAddress + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataAddress",
                "param_2": "dataValue",
                "param_3": "limit",
                "param_4": "additionalData"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_08000682",
            "code": "\nundefined4 initialize_08000682(undefined4 input_parameter)\n\n{\n  FUN_0800066c();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_08000682",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "check_and_process_input_08000690",
            "code": "\nvoid check_and_process_input_08000690(int input_condition,int magic_number,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  if (input_condition != 1) {\n    return;\n  }\n  if (magic_number == 0xffff) {\n    FUN_08000682(&DAT_20000124,1,0,0,unused_param_2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "check_and_process_input_08000690",
                "param_1": "input_condition",
                "param_2": "magic_number",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_080006b4",
            "code": "\nint processData_080006b4(int **data)\n\n{\n  bool exceedLimit;\n  undefined result;\n  int returnValue;\n  byte charCount;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_080041bc(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    exceedLimit = false;\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      charCount = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + charCount + 9) = result;\n      charCount = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = charCount;\n      if (0x3f < charCount) {\n        exceedLimit = true;\n      }\n    }\n  }\n  else {\n    exceedLimit = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (exceedLimit) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "param_1": "data",
                "bVar1": "exceedLimit",
                "uVar2": "result",
                "iVar3": "returnValue",
                "bVar4": "charCount"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculate_checksum_08000728(int data_address,int data_length)\n\n{\n  byte bit_count;\n  uint checksum;\n  uint bit;\n  uint index;\n  \n  checksum = 0xffff;\n  for (index = 0; (int)index < data_length; index = index + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data_address + index + 9);\n    for (bit_count = 1; bit_count < 9; bit_count = bit_count + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "data_address",
                "param_2": "data_length",
                "bVar1": "bit_count",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_data_0800076c",
            "code": "\nvoid updateData_0800076c(int **dataPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int loopVar;\n  uint byteValue;\n  \n  byteValue = (uint)*(byte *)((int)dataPtr + 0x49);\n  result = FUN_08000728(dataPtr,byteValue,param3,param4,param4);\n  *(char *)((int)dataPtr + byteValue + 9) = (char)((ushort)result >> 8);\n  byteValue = byteValue + 1 & 0xff;\n  *(char *)((int)dataPtr + byteValue + 9) = (char)result;\n  *(char *)((int)dataPtr + 0x49) = (char)byteValue + '\\x01';\n  if (1 < *(byte *)((int)dataPtr + 6)) {\n    FUN_080041bc(*(byte *)((int)dataPtr + 6),1);\n  }\n  if (*(byte *)((int)dataPtr + 5) < 4) {\n    (**(code **)(**dataPtr + 4))(*dataPtr,(int)dataPtr + 9,*(undefined *)((int)dataPtr + 0x49));\n  }\n  if (1 < *(byte *)((int)dataPtr + 6)) {\n    FUN_080041bc(*(byte *)((int)dataPtr + 6),0);\n  }\n  if (*(byte *)((int)dataPtr + 5) < 4) {\n    do {\n      loopVar = (**(code **)(**dataPtr + 0xc))();\n    } while (-1 < loopVar);\n  }\n  *(undefined *)((int)dataPtr + 0x49) = 0;\n  loopVar = FUN_08004204();\n  dataPtr[0x17] = (int *)(loopVar + (uint)*(ushort *)((int)dataPtr + 0x56));\n  *(short *)((int)dataPtr + 0x52) = *(short *)((int)dataPtr + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_data_0800076c",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "loopVar",
                "uVar3": "byteValue"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08000b54",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004204",
                "FUN_08000728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_conditions_080007f0",
            "code": "\nundefined4 check_conditions_080007f0(int address,undefined4 value,uint count,undefined4 param)\n\n{\n  bool foundMatch;\n  byte result;\n  char condition1;\n  char condition2;\n  int value1;\n  uint index;\n  int value2;\n  \n  index = 0;\n  do {\n    if (7 < index) {\n      foundMatch = false;\nLAB_0800080a:\n      if (!foundMatch) {\n        *(short *)(address + 0x54) = *(short *)(address + 0x54) + 1;\n        return 1;\n      }\n      value2 = *(byte *)(address + 10) - 1;\n      switch(*(byte *)(address + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        condition1 = FUN_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),count,\n                             value2,param);\n        condition2 = FUN_08004640(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n        if (*(byte *)(address + 0x60) < (byte)(condition2 + condition1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        value2 = FUN_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),count,\n                             value2,param);\n        if ((uint)*(byte *)(address + 0x60) < (uint)(value2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        result = FUN_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),count,\n                             value2,param);\n        if (*(byte *)(address + 0x60) < result) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    count = (uint)*(byte *)(address + 10);\n    if ((byte)(&DAT_08005a10)[index] == count) {\n      foundMatch = true;\n      goto LAB_0800080a;\n    }\n    index = index + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  value2 = FUN_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),count,value2,\n                       param);\n  value1 = FUN_08004640(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n  if ((uint)*(byte *)(address + 0x60) <\n      (((uint)(value2 << 0xc) >> 0x10) + ((uint)(value1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_conditions_080007f0",
                "param_1": "address",
                "param_2": "value",
                "param_3": "count",
                "param_4": "param",
                "bVar1": "foundMatch",
                "bVar2": "result",
                "cVar3": "condition1",
                "cVar4": "condition2",
                "iVar5": "value1",
                "uVar6": "index",
                "iVar7": "value2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_byte_to_memory_080008cc",
            "code": "\nvoid copyByteToMemory_080008cc(int sourceAddress,undefined byteToCopy)\n\n{\n  *(undefined *)(sourceAddress + 9) = *(undefined *)(sourceAddress + 4);\n  *(byte *)(sourceAddress + 10) = *(byte *)(sourceAddress + 10) ^ 0x80;\n  *(undefined *)(sourceAddress + 0xb) = byteToCopy;\n  *(undefined *)(sourceAddress + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_byte_to_memory_080008cc",
                "param_1": "sourceAddress",
                "param_2": "byteToCopy"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_data_080008e2",
            "code": "\nint process_data_080008e2(int data,int buffer,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint length;\n  uint index;\n  uint bitIndex;\n  char shiftedByte;\n  int offset;\n  \n  result = FUN_08004640(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param_3,param_4,\n                       param_4);\n  length = FUN_08004640(*(undefined *)(data + 0xd),*(undefined *)(data + 0xe));\n  shiftedByte = (char)((length << 0x15) >> 0x18);\n  if ((length & 7) != 0) {\n    shiftedByte = shiftedByte + '\\x01';\n  }\n  *(char *)(data + 0xb) = shiftedByte;\n  *(undefined *)(data + 0x49) = 3;\n  bitIndex = 0;\n  for (index = 0; (int)index < (int)length; index = index + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(buffer + ((index + result) * 0x100000 >> 0x18) * 2) >>\n         (index + result & 0xf) & 1U) == 0) {\n      offset = (uint)*(byte *)(data + 0x49) + data;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) & ~(byte)(1 << bitIndex);\n    }\n    else {\n      offset = (uint)*(byte *)(data + 0x49) + data;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) | (byte)(1 << bitIndex);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      *(char *)(data + 0x49) = *(char *)(data + 0x49) + '\\x01';\n      bitIndex = 0;\n    }\n  }\n  if ((length & 7) != 0) {\n    *(char *)(data + 0x49) = *(char *)(data + 0x49) + '\\x01';\n  }\n  shiftedByte = *(char *)(data + 0x49);\n  FUN_0800076c(data);\n  return (int)(char)(shiftedByte + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "length",
                "uVar3": "index",
                "uVar4": "bitIndex",
                "cVar5": "shiftedByte",
                "iVar6": "offset"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint process_data_08000998(int data_ptr,int input_ptr,undefined4 var1,undefined4 var2)\n\n{\n  byte byte1;\n  char char1;\n  byte byte2;\n  byte byte3;\n  uint index1;\n  uint index2;\n  \n  byte2 = FUN_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),var1,var2,\n                       var2);\n  byte3 = FUN_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = byte3 << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (index1 = (uint)byte2; index1 < (uint)byte2 + (uint)byte3; index1 = index1 + 1 & 0xff) {\n    byte1 = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)byte1 + 9) = (char)((ushort)*(undefined2 *)(input_ptr + index1 * 2) >> 8)\n    ;\n    index2 = byte1 + 1 & 0xff;\n    char1 = (char)index2;\n    *(char *)(data_ptr + 0x49) = char1;\n    *(undefined *)(data_ptr + index2 + 9) = *(undefined *)(input_ptr + index1 * 2);\n    *(char *)(data_ptr + 0x49) = char1 + '\\x01';\n  }\n  char1 = *(char *)(data_ptr + 0x49);\n  FUN_0800076c(data_ptr);\n  return (int)(char)(char1 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "param_3": "var1",
                "param_4": "var2",
                "bVar1": "byte1",
                "cVar2": "char1",
                "bVar3": "byte2",
                "bVar4": "byte3",
                "uVar5": "index1",
                "uVar6": "index2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_data_08000a00",
            "code": "\nundefined4 updateData_08000a00(int data_ptr,int output_ptr,undefined4 value1,undefined4 value2)\n\n{\n  uint result;\n  uint shifted_value;\n  \n  result = FUN_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),value1,value2,\n                       value2);\n  shifted_value = (result << 0x14) >> 0x18;\n  if (*(char *)(data_ptr + 0xd) == -1) {\n    *(ushort *)(output_ptr + shifted_value * 2) =\n         (ushort)(1 << (result & 0xf)) | *(ushort *)(output_ptr + shifted_value * 2);\n  }\n  else {\n    *(ushort *)(output_ptr + shifted_value * 2) =\n         *(ushort *)(output_ptr + shifted_value * 2) & ~(ushort)(1 << (result & 0xf));\n  }\n  *(undefined *)(data_ptr + 0x49) = 6;\n  FUN_0800076c(data_ptr);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_data_08000a00",
                "param_1": "data_ptr",
                "param_2": "output_ptr",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_data_and_return_08000a4e",
            "code": "\nundefined4 updateDataAndReturn_08000a4e(int inputParam1,int outputParam)\n\n{\n  byte result1;\n  undefined2 result2;\n  \n  result1 = FUN_08004640(*(undefined *)(inputParam1 + 0xb),*(undefined *)(inputParam1 + 0xc));\n  result2 = FUN_08004640(*(undefined *)(inputParam1 + 0xd),*(undefined *)(inputParam1 + 0xe));\n  *(undefined2 *)(outputParam + (uint)result1 * 2) = result2;\n  *(undefined *)(inputParam1 + 0x49) = 6;\n  FUN_0800076c(inputParam1);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_data_and_return_08000a4e",
                "param_1": "inputParam1",
                "param_2": "outputParam",
                "bVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_memory_with_bits_08000a7a",
            "code": "\nundefined4 updateMemoryWithBits_08000a7a(int memoryAddress,int memoryPointer,undefined4 param3,undefined4 param4)\n\n{\n  int result1;\n  int result2;\n  uint iterator;\n  uint bitIndex;\n  uint bitPosition;\n  uint memoryIndex;\n  uint byteIndex;\n  \n  result1 = FUN_08004640(*(undefined *)(memoryAddress + 0xb),*(undefined *)(memoryAddress + 0xc),param3,param4,\n                       param4);\n  result2 = FUN_08004640(*(undefined *)(memoryAddress + 0xd),*(undefined *)(memoryAddress + 0xe));\n  bitIndex = 0;\n  byteIndex = 7;\n  for (iterator = 0; (int)iterator < result2; iterator = iterator + 1 & 0xffff) {\n    memoryIndex = (iterator + result1) * 0x100000 >> 0x18;\n    bitPosition = iterator + result1 & 0xf;\n    if (((int)(uint)*(byte *)(memoryAddress + byteIndex + 9) >> bitIndex & 1U) == 0) {\n      *(ushort *)(memoryPointer + memoryIndex * 2) = *(ushort *)(memoryPointer + memoryIndex * 2) & ~(ushort)(1 << bitPosition);\n    }\n    else {\n      *(ushort *)(memoryPointer + memoryIndex * 2) = (ushort)(1 << bitPosition) | *(ushort *)(memoryPointer + memoryIndex * 2);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      byteIndex = byteIndex + 1 & 0xff;\n      bitIndex = 0;\n    }\n  }\n  *(undefined *)(memoryAddress + 0x49) = 6;\n  FUN_0800076c(memoryAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_memory_with_bits_08000a7a",
                "param_1": "memoryAddress",
                "param_2": "memoryPointer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "iterator",
                "uVar4": "bitIndex",
                "uVar5": "bitPosition",
                "uVar6": "memoryIndex",
                "uVar7": "byteIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "process_data_08000b04",
            "code": "\nint process_data_08000b04(int data_ptr,int output_ptr)\n\n{\n  byte byte_1;\n  byte byte_2;\n  char char_1;\n  undefined2 result;\n  uint counter;\n  \n  byte_1 = *(byte *)(data_ptr + 0xc);\n  byte_2 = *(byte *)(data_ptr + 0xe);\n  *(undefined *)(data_ptr + 0xd) = 0;\n  *(byte *)(data_ptr + 0xe) = byte_2;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  for (counter = 0; counter < byte_2; counter = counter + 1 & 0xff) {\n    result = FUN_08004640(*(undefined *)(counter * 2 + data_ptr + 0x10),\n                         *(undefined *)(data_ptr + (counter + 4) * 2 + 9));\n    *(undefined2 *)(output_ptr + (byte_1 + counter) * 2) = result;\n  }\n  char_1 = *(char *)(data_ptr + 0x49);\n  FUN_0800076c(data_ptr);\n  return (int)(char)(char_1 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "param_1": "data_ptr",
                "param_2": "output_ptr",
                "bVar1": "byte_1",
                "bVar2": "byte_2",
                "cVar3": "char_1",
                "uVar4": "result",
                "uVar5": "counter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_data_08000b54",
            "code": "\nint process_data_08000b54(int **data,int *input,undefined4 value)\n\n{\n  byte byteValue;\n  int result1;\n  uint value1;\n  int result2;\n  \n  data[0x13] = input;\n  *(char *)(data + 0x18) = (char)value;\n  if (*(byte *)((int)data + 5) < 4) {\n    byteValue = (**(code **)(**data + 8))();\n    value1 = (uint)byteValue;\n  }\n  if (value1 == 0) {\n    result2 = 0;\n  }\n  else if ((int)value1 < 8) {\n    result2 = 0;\n  }\n  else {\n    result2 = FUN_080006b4(data);\n    *(char *)(data + 2) = (char)result2;\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      result1 = FUN_080007f0(data);\n      if (result1 < 1) {\n        result1 = FUN_08004204();\n        data[0x17] = (int *)((uint)*(ushort *)((int)data + 0x56) + result1);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n        case 1:\n        case 2:\n          result2 = FUN_080008e2(data,input,value);\n          break;\n        case 3:\n        case 4:\n          result2 = FUN_08000998(data,input,value);\n          break;\n        case 5:\n          result2 = FUN_08000a00(data,input,value);\n          break;\n        case 6:\n          result2 = FUN_08000a4e(data,input,value);\n          break;\n        case 0xf:\n          result2 = FUN_08000a7a(data,input,value);\n          break;\n        case 0x10:\n          result2 = FUN_08000b04(data,input,value);\n        }\n      }\n      else {\n        if (result1 != 0xff) {\n          FUN_080008cc(data,result1);\n          FUN_0800076c(data);\n        }\n        *(char *)(data + 2) = (char)result1;\n        result2 = (int)(char)result1;\n      }\n    }\n    else {\n      result2 = 0;\n    }\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "data",
                "param_2": "input",
                "param_3": "value",
                "bVar1": "byteValue",
                "iVar2": "result1",
                "unaff_r5": "value1",
                "iVar3": "result2"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a4e",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_080008cc",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08004204",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_binary_08000c4c",
            "code": "\nvoid initializeBinary_08000c4c(void)\n\n{\n  FUN_080005e4(0);\n  FUN_08000600(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_binary_08000c4c"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "initialize_data_08000c64",
            "code": "\nvoid initializeData_08000c64(void)\n\n{\n  undefined4 unusedParameter;\n  \n  FUN_08000b54(&DAT_20000124,&DAT_20000004,0x10,unusedParameter,unusedParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "initialize_data_08000c64",
                "in_r3": "unusedParameter"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initializeSystem_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 isFlagSet;\n  undefined4 flagValue;\n  undefined4 count;\n  undefined4 memoryAddress;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 num1;\n  undefined4 num2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  isFlagSet = 1;\n  flagValue = 0x50000;\n  count = 2;\n  memoryAddress = 0x400000;\n  value1 = 8;\n  value2 = 0x150;\n  num1 = 2;\n  num2 = 7;\n  FUN_0800201c(&isFlagSet);\n  FUN_08001f9c();\n  value3 = 0xf;\n  value4 = 2;\n  value5 = 0;\n  value6 = 0x1400;\n  value7 = 0x1000;\n  FUN_08002488(&value3,5);\n  uVar1 = FUN_080025e0();\n  FUN_08000ee0(uVar1 / 1000);\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "isFlagSet",
                "local_50": "flagValue",
                "local_3c": "count",
                "local_38": "memoryAddress",
                "local_34": "value1",
                "local_30": "value2",
                "local_2c": "num1",
                "local_28": "num2",
                "local_24": "value3",
                "local_20": "value4",
                "local_1c": "value5",
                "local_18": "value6",
                "local_14": "value7"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_080025e0",
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_080035bc();\n  FUN_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  FUN_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "execute_initialization_08000d8e",
            "code": "\nvoid executeInitialization_08000d8e(void)\n\n{\n  FUN_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "execute_initialization_08000d8e"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "check_and_set_param_08000d98",
            "code": "\nundefined4 checkAndSetParam_08000d98(uint inputParam)\n\n{\n  int result;\n  \n  result = FUN_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < inputParam) {\n    return 1;\n  }\n  FUN_08000e60(0xffffffff,inputParam,0);\n  DAT_20000028 = inputParam;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "check_and_set_param_08000d98",
                "param_1": "inputParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_system_08000de4",
            "code": "\n\n\nundefined4 initializeSystem_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  FUN_08000e3c(3);\n  FUN_08000d98(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_system_08000de4"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000e3c",
                "FUN_08000d96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_sum_08000e18",
            "code": "\nvoid updateSum_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_sum_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_global_value_08000e30",
            "code": "\nundefined4 getGlobalValue_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_global_value_08000e30"
            },
            "calling": [
                "FUN_0800346c",
                "FUN_08003d18",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_dat_08000e3c",
            "code": "\n\n\nvoid updateDat_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_dat_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_memory_value_08000e60",
            "code": "\n\n\nvoid updateMemoryValue_08000e60(uint address,uint mask,uint value)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (mask & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & value;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_memory_value_08000e60",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_in_memory_08000ec4",
            "code": "\nvoid setBitInMemory_08000ec4(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_in_memory_08000ec4",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "validate_param_08000ee0",
            "code": "\n\n\nundefined4 validate_param_08000ee0(int input)\n\n{\n  if (input - 1U < 0x1000000) {\n    _DAT_e000e014 = input - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    result 0;\n  }\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "validate_param_08000ee0",
                "param_1": "input",
                "return": "result"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_at_position_08000f0c",
            "code": "\nvoid setBitAtPosition_08000f0c(uint position)\n\n{\n  if (-1 < (int)position) {\n    *(int *)(((position >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (position & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_at_position_08000f0c",
                "param_1": "position"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_status_08000f2c",
            "code": "\n\n\nvoid updateStatus_08000f2c(int status)\n\n{\n  if (status != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_status_08000f2c",
                "param_1": "status"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_main_function_08000f4e",
            "code": "\nvoid executeMainFunction_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_main_function_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "set_to_default_08000f56",
            "code": "\nundefined4 setToDefault_08000f56(int input)\n\n{\n  if (input != 0) {\n    *(undefined *)(input + 4) = 2;\n    FUN_080033c8();\n    *(undefined4 *)(input + 0x10) = 0;\n    *(undefined *)(input + 4) = 0;\n    *(undefined *)(input + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "set_to_default_08000f56",
                "param_1": "input"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "set_bit_to_zero_08000f72",
            "code": "\nundefined4 setBitToZero_08000f72(uint **ptrArray,uint bitIndex)\n\n{\n  **ptrArray = **ptrArray & ~(1 << (bitIndex & 0xff));\n  *(undefined *)(ptrArray + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "set_bit_to_zero_08000f72",
                "param_1": "ptrArray",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_data_08000f8c",
            "code": "\nundefined4 updateData_08000f8c(uint **dataRef)\n\n{\n  if (*(char *)((int)dataRef + 0x35) != '\\x02') {\n    updateFlag = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)dataRef + 0x35) = 5;\n  **dataRef = **dataRef & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_data_08000f8c",
                "param_1": "dataRef",
                "param_1[0x15]": "updateFlag"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *inputRegisters,uint *updateValues)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint index;\n  uint bitMask;\n  uint tempVar5;\n  int registerIndex;\n  uint shiftValue;\n  int shiftAmount;\n  \n  for (index = 0; index < 0x10; index = index + 1) {\n    tempVar2 = 1 << (index & 0xff);\n    bitMask = tempVar2 & *updateValues;\n    tempVar1 = _DAT_40013c0c;\n    if (tempVar2 == bitMask) {\n      if ((updateValues[1] == 2) || (updateValues[1] == 0x12)) {\n        registerIndex = (index >> 3) + 8;\n        shiftAmount = (index & 7) << 2;\n        inputRegisters[registerIndex] = inputRegisters[registerIndex] & ~(0xf << shiftAmount) | updateValues[4] << shiftAmount;\n      }\n      shiftValue = index << 1;\n      tempVar1 = ~(3 << (shiftValue & 0xff));\n      *inputRegisters = *inputRegisters & tempVar1 | (updateValues[1] & 3) << (shiftValue & 0xff);\n      tempVar5 = updateValues[1];\n      if (((tempVar5 - 1 < 2) || (tempVar5 == 0x11)) || (tempVar5 == 0x12)) {\n        inputRegisters[2] = inputRegisters[2] & tempVar1 | updateValues[3] << (shiftValue & 0xff);\n        inputRegisters[1] = inputRegisters[1] & ~tempVar2 | ((updateValues[1] << 0x1b) >> 0x1f) << (index & 0xff);\n      }\n      inputRegisters[3] = tempVar1 & inputRegisters[3] | updateValues[2] << (shiftValue & 0xff);\n      tempVar1 = _DAT_40013c0c;\n      if ((updateValues[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        shiftAmount = (index & 3) << 2;\n        if (inputRegisters == (uint *)0x40020000) {\n          registerIndex = 0;\n        }\n        else if (inputRegisters == (uint *)0x40020400) {\n          registerIndex = 1;\n        }\n        else if (inputRegisters == (uint *)0x40020800) {\n          registerIndex = 2;\n        }\n        else if (inputRegisters == (uint *)0x40020c00) {\n          registerIndex = 3;\n        }\n        else if (inputRegisters == (uint *)0x40021000) {\n          registerIndex = 4;\n        }\n        else if (inputRegisters == (uint *)0x40021400) {\n          registerIndex = 5;\n        }\n        else if (inputRegisters == (uint *)0x40021800) {\n          registerIndex = 6;\n        }\n        else if (inputRegisters == (uint *)0x40021c00) {\n          registerIndex = 7;\n        }\n        else if (inputRegisters == (uint *)0x40022000) {\n          registerIndex = 8;\n        }\n        else if (inputRegisters == (uint *)0x40022400) {\n          registerIndex = 9;\n        }\n        else {\n          registerIndex = 10;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) & ~(0xf << shiftAmount) | registerIndex << shiftAmount;\n        tempVar1 = ~bitMask;\n        tempVar2 = _DAT_40013c00 & tempVar1;\n        if ((updateValues[1] & 0x10000) != 0) {\n          tempVar2 = bitMask | _DAT_40013c00;\n        }\n        tempVar5 = tempVar1 & _DAT_40013c04;\n        if ((updateValues[1] & 0x20000) != 0) {\n          tempVar5 = bitMask | _DAT_40013c04;\n        }\n        shiftValue = tempVar1 & _DAT_40013c08;\n        if ((updateValues[1] & 0x100000) != 0) {\n          shiftValue = bitMask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = tempVar2;\n        _DAT_40013c04 = tempVar5;\n        _DAT_40013c08 = shiftValue;\n        tempVar1 = tempVar1 & _DAT_40013c0c;\n        if ((updateValues[1] & 0x200000) != 0) {\n          tempVar1 = bitMask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = tempVar1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "inputRegisters",
                "param_2": "updateValues",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "index",
                "uVar4": "bitMask",
                "uVar5": "tempVar5",
                "iVar6": "registerIndex",
                "uVar7": "shiftValue",
                "iVar8": "shiftAmount"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "update_param_value_08001198",
            "code": "\nvoid updateParamValue_08001198(int paramAddress,int newValue,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(paramAddress + 0x18) = newValue << 0x10;\n    return;\n  }\n  *(int *)(paramAddress + 0x18) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "update_param_value_08001198",
                "param_1": "paramAddress",
                "param_2": "newValue",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_data_and_call_function_080011a4",
            "code": "\n\n\nvoid update_data_and_call_function_080011a4(uint input_data)\n\n{\n  if ((_DAT_40013c14 & input_data) != 0) {\n    _DAT_40013c14 = input_data;\n    FUN_080047d0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_data_and_call_function_080011a4",
                "param_1": "input_data"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_data_080011c0",
            "code": "\nundefined4 updateData_080011c0(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (condition == 0) {\n      *(uint *)(*data + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (data[4] == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (condition == 0) {\n    *(uint *)(*data + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition == 1) {\n    *(uint *)(*data + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_data_080011c0",
                "param_1": "data",
                "param_1[0x14]": "condition",
                "param_1[0x11]": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "extract_and_store_byte_0800124a",
            "code": "\nundefined4 extractAndStoreByte_0800124a(int *dataPointer)\n\n{\n  *(uint *)(*dataPointer + 0x10) = value & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "extract_and_store_byte_0800124a",
                "param_1": "dataPointer",
                "param_1[0x11]": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "update_flags_08001256",
            "code": "\nundefined4 updateFlags_08001256(uint **parameters)\n\n{\n  uint *ptrVar1;\n  \n  ptrVar1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (ptrVar1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          ptrVar1 = *parameters;\n          if ((ptrVar1[1] & 0x800) == 0) {\n            *ptrVar1 = *ptrVar1 | 0x200;\n          }\n          else {\n            *ptrVar1 = *ptrVar1 & 0xfffffbff;\n          }\n        }\n        else if (((ptrVar1 == (uint *)0x4) || (ptrVar1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        ptrVar1 = *parameters;\n        if ((ptrVar1[1] & 0x800) != 0) {\n          ptrVar1[1] = ptrVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        ptrVar1 = *parameters;\n        if ((ptrVar1[1] & 0x800) != 0) {\n          ptrVar1[1] = ptrVar1[1] | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "update_flags_08001256",
                "param_1": "parameters",
                "puVar1": "ptrVar1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "process_buffer_08001420",
            "code": "\nundefined4 processBuffer_08001420(int *buffer)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)buffer + 0x2a) != 0) {\n    bytePtr = (byte *)nextBytePtr;\n    nextBytePtr = (int)(bytePtr + 1);\n    *(uint *)(*buffer + 0x10) = (uint)*bytePtr;\n    *(short *)((int)buffer + 0x2a) = *(short *)((int)buffer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "process_buffer_08001420",
                "param_1": "buffer",
                "pbVar1": "bytePtr",
                "param_1[9]": "nextBytePtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_value_08001440",
            "code": "\nundefined4 updateValue_08001440(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)array[9];\n    array[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_value_08001440",
                "param_1": "array",
                "puVar1": "ptr",
                "param_1[9]": "array[9]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "validate_parameters_08001460",
            "code": "\nundefined4 validate_parameters_08001460(uint **options,uint *data,int size,uint *flags)\n\n{\n  undefined4 result;\n  uint *first_element;\n  \n  if (*(char *)((int)options + 0x3d) == '(') {\n    if (data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(options + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(options + 0xf) = 1;\n      first_element = *options;\n      if ((*first_element & 1) == 0) {\n        *first_element = *first_element | 1;\n      }\n      **options = **options & 0xfffff7ff;\n      *(undefined *)((int)options + 0x3d) = 0x29;\n      *(undefined *)((int)options + 0x3e) = 0x20;\n      result = 0;\n      options[0x10] = (uint *)0x0;\n      options[9] = data;\n      *(short *)((int)options + 0x2a) = (short)size;\n      options[0xb] = flags;\n      *(undefined2 *)(options + 10) = *(undefined2 *)((int)options + 0x2a);\n      *(undefined *)(options + 0xf) = 0;\n      (*options)[1] = (*options)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "validate_parameters_08001460",
                "param_1": "options",
                "param_2": "data",
                "param_3": "size",
                "param_4": "flags",
                "uVar1": "result",
                "puVar2": "first_element"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "validate_and_initialize_params_080014ec",
            "code": "\nundefined4 validate_and_initialize_params_080014ec(uint **param_list_ptr,uint *data_ptr,int size,uint *result_ptr)\n\n{\n  undefined4 status;\n  uint *first_elem_ptr;\n  \n  if (*(char *)((int)param_list_ptr + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      status = 1;\n    }\n    else if (size == 0) {\n      status = 1;\n    }\n    else if (*(char *)(param_list_ptr + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(param_list_ptr + 0xf) = 1;\n      first_elem_ptr = *param_list_ptr;\n      if ((*first_elem_ptr & 1) == 0) {\n        *first_elem_ptr = *first_elem_ptr | 1;\n      }\n      **param_list_ptr = **param_list_ptr & 0xfffff7ff;\n      *(undefined *)((int)param_list_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)param_list_ptr + 0x3e) = 0x20;\n      status = 0;\n      param_list_ptr[0x10] = (uint *)0x0;\n      param_list_ptr[9] = data_ptr;\n      *(short *)((int)param_list_ptr + 0x2a) = (short)size;\n      param_list_ptr[0xb] = result_ptr;\n      *(undefined2 *)(param_list_ptr + 10) = *(undefined2 *)((int)param_list_ptr + 0x2a);\n      *(undefined *)(param_list_ptr + 0xf) = 0;\n      (*param_list_ptr)[1] = (*param_list_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "validate_and_initialize_params_080014ec",
                "param_1": "param_list_ptr",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "result_ptr",
                "uVar1": "status",
                "puVar2": "first_elem_ptr"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_08001578",
            "code": "\nundefined4 initializeData_08001578(uint **dataPointer)\n\n{\n  uint *dataValue;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  dataValue = *dataPointer;\n  if ((*dataValue & 1) == 0) {\n    *dataValue = *dataValue | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "param_1": "dataPointer",
                "puVar1": "dataValue"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_input_080015bc",
            "code": "\nundefined4 processInput_080015bc(int *input)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)input + 0x3d);\n  if (*(short *)((int)input + 0x2a) != 0) {\n    bytePointer = (byte *)input[9];\n    input[9] = (int)(bytePointer + 1);\n    *(uint *)(*input + 0x10) = (uint)*bytePointer;\n    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    if ((*(short *)((int)input + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*input + 4) = *(uint *)(*input + 4) & 0xfffffbff;\n      input[0xc] = 0x21;\n      *(undefined *)((int)input + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_input_080015bc",
                "param_1": "input",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "update_param1_0800160e",
            "code": "\nundefined4 updateParam1_0800160e(int *param)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)param + 0x3d);\n  if (*(short *)((int)param + 0x2a) != 0) {\n    ptr = (undefined *)ptrArray[9];\n    ptrArray[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*param + 0x10);\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    if ((*(short *)((int)param + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*param + 4) = *(uint *)(*param + 4) & 0xfffffbff;\n      param[0xc] = 0x22;\n      *(undefined *)((int)param + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "update_param1_0800160e",
                "param_1": "param",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "param_1[9]": "ptrArray[9]",
                "param_1[0xc]": "param[0xc]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_data_0800165a",
            "code": "\nundefined4 processData_0800165a(int *dataPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 value1;\n  uint value2;\n  \n  value2 = *(uint *)(*dataPtr + 0x18);\n  if ((value2 & 0x80) == 0) {\n    value1 = *(undefined2 *)(dataPtr + 3);\n  }\n  else {\n    value1 = *(undefined2 *)(dataPtr + 6);\n  }\n  FUN_08003880(dataPtr,(*(uint *)(*dataPtr + 0x18) & 4) == 0,value1,value2,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "reset_parameters_08001684",
            "code": "\nundefined4 resetParameters_08001684(uint **parameters)\n\n{\n  if (((parameters[0xb] == (uint *)0x4) || (parameters[0xb] == (uint *)0x8)) &&\n     (*(char *)(addressOfParameters + 0x3d) == '(')) {\n    parameters[0xb] = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)(addressOfParameters + 0x3d) = 0x20;\n    *(undefined *)(addressOfParameters + 0x3e) = 0;\n    FUN_080038d0();\n  }\n  else if (*(char *)(addressOfParameters + 0x3d) == '!') {\n    parameters[0xb] = (uint *)0xffff0000;\n    parameters[0xc] = (uint *)0x21;\n    *(undefined *)(addressOfParameters + 0x3d) = 0x20;\n    *(undefined *)(addressOfParameters + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "reset_parameters_08001684",
                "param_1": "parameters",
                "(int)param_1": "addressOfParameters"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_param_0800171a",
            "code": "\nundefined4 process_param_0800171a(uint **param)\n\n{\n  char first_char;\n  uint *pointer_var;\n  \n  first_char = *(char *)(param_int + 0x3d);\n  pointer_var = param[11];\n  if ((*(short *)(param + 10) == 0) && (first_char == '!')) {\n    if ((pointer_var == (uint *)0x4) || ((pointer_var == (uint *)0x8 || (pointer_var == (uint *)0xffff0000)))) {\n      (*param)[1] = (*param)[1] & 0xfffff8ff;\n      **param = **param | 0x200;\n      param[12] = (uint *)0x0;\n      *(undefined *)(param_int + 0x3d) = 0x20;\n      if (*(char *)(param_int + 0x3e) == '@') {\n        *(undefined *)(param_int + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)(param_int + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*param)[1] = (*param)[1] & 0xfffff8ff;\n      param[12] = (uint *)0x11;\n      *(undefined *)(param_int + 0x3e) = 0;\n      *(undefined *)(param_int + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((first_char == '!') || ((*(char *)(param_int + 0x3e) == '@' && (first_char == '\\\"')))) {\n    if (*(short *)(param_int + 0x2a) == 0) {\n      (*param)[1] = (*param)[1] & 0xfffffbff;\n    }\n    else if (*(char *)(param_int + 0x3e) == '@') {\n      if (param[20] == (uint *)0x0) {\n        if (param[19] == (uint *)0x1) {\n          (*param)[4] = (uint)param[18] & 0xff;\n          param[20] = (uint *)(param_int_2 + 2);\n        }\n        else {\n          (*param)[4] = (uint)((int)param[18] << 0x10) >> 0x18;\n          param[20] = (uint *)(param_int_2 + 1);\n        }\n      }\n      else if (param[20] == (uint *)0x1) {\n        (*param)[4] = (uint)param[18] & 0xff;\n        param[20] = (uint *)(param_int_2 + 1);\n      }\n      else if (param[20] == (uint *)0x2) {\n        if (*(char *)(param_int + 0x3d) == '\\\"') {\n          **param = **param | 0x100;\n        }\n        else if (*(char *)(param_int + 0x3d) == '!') {\n          pointer_var = param[9];\n          param[9] = (uint *)(pointer_var_int + 1);\n          (*param)[4] = (uint)*(byte *)pointer_var;\n          *(short *)(param_int + 0x2a) = *(short *)(param_int + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_var = param[9];\n      param[9] = (uint *)(pointer_var_int + 1);\n      (*param)[4] = (uint)*(byte *)pointer_var;\n      *(short *)(param_int + 0x2a) = *(short *)(param_int + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_param_0800171a",
                "param_1": "param",
                "cVar1": "first_char",
                "puVar2": "pointer_var",
                "param_1[0xb]": "param[11]",
                "param_1[0xc]": "param[12]",
                "param_1[0x12]": "param[18]",
                "param_1[0x13]": "param[19]",
                "param_1[0x14]": "param[20]",
                "(int)param_1": "param_int",
                "(int)param_1[0x14]": "param_int_2",
                "(int)puVar2": "pointer_var_int"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_param_08001864",
            "code": "\nundefined4 processParam_08001864(uint **param)\n\n{\n  uint *value;\n  \n  value = param[0xb];\n  if (*(char *)((int)param + 0x3d) == '!') {\n    if (*(short *)((int)param + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        **param = **param | 0x200;\n        param[0xc] = (uint *)0x0;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        param[0xc] = (uint *)0x11;\n        *(undefined *)((int)param + 0x3e) = 0;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      value = param[9];\n      param[9] = (uint *)((int)value + 1);\n      (*param)[4] = (uint)*(byte *)value;\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_param_08001864",
                "param_1": "param",
                "puVar1": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "update_param_08001904",
            "code": "\nundefined4 updateParam_08001904(uint **paramList)\n\n{\n  uint *ptrVar1;\n  \n  if (*(char *)((int)paramList + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)paramList + 0x2a) < 4) {\n      if (*(ushort *)((int)paramList + 0x2a) < 2) {\n        **paramList = **paramList & 0xfffffbff;\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        ptrVar1 = paramList[9];\n        paramList[9] = (uint *)((int)ptrVar1 + 1);\n        *(char *)ptrVar1 = (char)(*paramList)[4];\n        *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        paramList[0xc] = (uint *)0x0;\n        if (*(char *)((int)paramList + 0x3e) == '@') {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      ptrVar1 = paramList[9];\n      paramList[9] = (uint *)((int)ptrVar1 + 1);\n      *(char *)ptrVar1 = (char)(*paramList)[4];\n      *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n      if (*(short *)((int)paramList + 0x2a) == 3) {\n        (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "update_param_08001904",
                "param_1": "paramList",
                "puVar1": "ptrVar1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_data_080019a0",
            "code": "\nundefined4 processData_080019a0(uint **data)\n\n{\n  uint *tempVar1;\n  \n  if (*(short *)((int)data + 0x2a) == 4) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    tempVar1 = array;\n    array = (uint *)((int)tempVar1 + 1);\n    *(char *)tempVar1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 3) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    tempVar1 = array;\n    array = (uint *)((int)tempVar1 + 1);\n    *(char *)tempVar1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data = **data & 0xfffffbff;\n      **data = **data | 0x100;\n    }\n    else {\n      **data = **data | 0x200;\n    }\n    tempVar1 = array;\n    array = (uint *)((int)tempVar1 + 1);\n    *(char *)tempVar1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    tempVar1 = array;\n    array = (uint *)((int)tempVar1 + 1);\n    *(char *)tempVar1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    (*data)[1] = (*data)[1] & 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    pointer = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    tempVar1 = array;\n    array = (uint *)((int)tempVar1 + 1);\n    *(char *)tempVar1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "tempVar1",
                "param_1[9]": "array",
                "param_1[0xc]": "pointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_data_08001ab0",
            "code": "\nvoid processData_08001ab0(uint **data)\n\n{\n  int result;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08001aac(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      FUN_08003900(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n      data[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0x14])();\n      }\n    }\n    else {\n      data[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    FUN_080038d0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001aac",
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_param_08001bfc",
            "code": "\nundefined4 processParam_08001bfc(uint **param)\n\n{\n  char charValue;\n  uint *ptrVar1;\n  uint *ptrVar2;\n  \n  charValue = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  ptrVar1 = *param;\n  if ((ptrVar1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((ptrVar1[5] & 4) != 0) {\n      ptrVar2 = param[9];\n      param[9] = (uint *)((int)ptrVar2 + 1);\n      *(char *)ptrVar2 = (char)ptrVar1[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      ptrVar1 = param[9];\n      param[9] = (uint *)((int)ptrVar1 + 1);\n      *(char *)ptrVar1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUN_080038d0();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    FUN_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_param_08001bfc",
                "param_1": "param",
                "cVar1": "charValue",
                "puVar2": "ptrVar1",
                "puVar3": "ptrVar2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_data_08001d00",
            "code": "\nvoid processData_08001d00(int *dataPointer)\n\n{\n  int dataValue;\n  uint flags1;\n  uint flags2;\n  uint flags3;\n  \n  dataValue = *dataPointer;\n  flags3 = *(uint *)(dataValue + 0x18);\n  flags1 = *(uint *)(dataValue + 0x14);\n  flags2 = *(uint *)(dataValue + 4);\n  if ((*(char *)((int)dataPointer + 0x3e) == '\\x10') || (*(char *)((int)dataPointer + 0x3e) == '@')) {\n    if (((flags1 & 0x10001) == 0) || ((flags2 & 0x200) == 0)) {\n      if (((flags1 & 0x10008) == 0) || ((flags2 & 0x200) == 0)) {\n        if (((flags1 & 0x10002) != 0) && ((flags2 & 0x200) != 0)) {\n          FUN_08001256(dataPointer);\n        }\n      }\n      else {\n        FUN_0800124a(dataPointer);\n      }\n    }\n    else {\n      FUN_080011c0(dataPointer);\n    }\n    if ((flags3 & 0x100004) == 0) {\n      if ((((flags1 & 0x10040) != 0) && ((flags2 & 0x400) != 0)) && ((flags1 & 0x10004) == 0)) {\n        FUN_08001904(dataPointer);\n        return;\n      }\n      if (((flags1 & 0x10004) != 0) && ((flags2 & 0x200) != 0)) {\n        FUN_080019a0(dataPointer);\n        return;\n      }\n    }\n    else {\n      if ((((flags1 & 0x10080) != 0) && ((flags2 & 0x400) != 0)) && ((flags1 & 0x10004) == 0)) {\n        FUN_0800171a(dataPointer);\n        return;\n      }\n      if (((flags1 & 0x10004) != 0) && ((flags2 & 0x200) != 0)) {\n        FUN_08001864(dataPointer);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags1 & 0x10002) != 0) && ((flags2 & 0x200) != 0)) {\n      FUN_0800165a();\n      return;\n    }\n    if (((flags1 & 0x10010) != 0) && ((flags2 & 0x200) != 0)) {\n      FUN_08001bfc(dataPointer);\n      return;\n    }\n    if ((flags3 & 0x100004) == 0) {\n      if ((((flags1 & 0x10040) != 0) && ((flags2 & 0x400) != 0)) && ((flags1 & 0x10004) == 0)) {\n        FUN_0800160e(dataPointer);\n        return;\n      }\n      if (((flags1 & 0x10004) != 0) && ((flags2 & 0x200) != 0)) {\n        FUN_08001440(dataPointer);\n      }\n    }\n    else {\n      if ((((flags1 & 0x10080) != 0) && ((flags2 & 0x400) != 0)) && ((flags1 & 0x10004) == 0)) {\n        FUN_080015bc(dataPointer);\n        return;\n      }\n      if (((flags1 & 0x10004) != 0) && ((flags2 & 0x200) != 0)) {\n        FUN_08001420(dataPointer);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_data_08001d00",
                "param_1": "dataPointer",
                "iVar1": "dataValue",
                "uVar2": "flags1",
                "uVar3": "flags2",
                "uVar4": "flags3"
            },
            "calling": [],
            "called": [
                "FUN_0800160e",
                "FUN_08001256",
                "FUN_080015bc",
                "FUN_08001440",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800165a",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_0800171a",
                "FUN_080019a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "process_flags_08001e68",
            "code": "\nvoid process_flags_08001e68(uint **data)\n\n{\n  char character;\n  uint *pointer;\n  uint flag1;\n  uint flag2;\n  \n  pointer = *data;\n  flag1 = pointer[5];\n  flag2 = pointer[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 2);\n    (*data)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)data + 0x3d);\n    if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (data[0xc] == (uint *)0x21)))))) {\n      FUN_08001684(data);\n    }\n    else {\n      data[0x10] = (uint *)((uint)data[0x10] | 4);\n      if (*(char *)((int)data + 0x3e) == '\\x10') {\n        **data = **data | 0x200;\n      }\n      (*data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 8);\n    (*data)[5] = 0xfffff7ff;\n  }\n  if (data[0x10] != (uint *)0x0) {\n    FUN_08001ab0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "process_flags_08001e68",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "calling": [],
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "initialize_hardware_08001f9c",
            "code": "\n\n\nundefined4 initializeHardware_08001f9c(void)\n\n{\n  int startTime;\n  int endTime;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  startTime = FUN_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      startTime = FUN_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        endTime = FUN_08000e30();\n      } while ((uint)(endTime - startTime) < 0x3e9);\n      return 3;\n    }\n    endTime = FUN_08000e30();\n  } while ((uint)(endTime - startTime) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "initialize_hardware_08001f9c",
                "iVar1": "startTime",
                "iVar2": "endTime"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_device_status_0800201c",
            "code": "\n\n\nundefined4 check_device_status_0800201c(uint *device_status)\n\n{\n  int initial_time;\n  int current_time;\n  undefined4 result;\n  bool condition_flag;\n  \n  if (device_status == (uint *)0x0) {\n    return 1;\n  }\n  if ((*device_status & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (device_status[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (device_status[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (device_status[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (device_status[1] == 0) {\n        initial_time = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          current_time = FUN_08000e30();\n          if (100 < (uint)(current_time - initial_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initial_time = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          current_time = FUN_08000e30();\n          if (100 < (uint)(current_time - initial_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*device_status & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (device_status[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | device_status[4] << 3;\n    }\n    else if (device_status[3] == 0) {\n      _DAT_42470000 = 0;\n      initial_time = FUN_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      initial_time = FUN_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | device_status[4] << 3;\n    }\n  }\n  if ((*device_status & 8) != 0) {\n    if (device_status[5] == 0) {\n      _DAT_42470e80 = 0;\n      initial_time = FUN_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      initial_time = FUN_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*device_status & 4) != 0) {\n    condition_flag = (_DAT_40023840 & 0x10000000) == 0;\n    if (condition_flag) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initial_time = FUN_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    if (device_status[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (device_status[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (device_status[2] == 0) {\n      initial_time = FUN_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        current_time = FUN_08000e30();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initial_time = FUN_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        current_time = FUN_08000e30();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    if (condition_flag) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (device_status[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (device_status[6] == 2) {\n    _DAT_42470060 = 0;\n    initial_time = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             device_status[7] | device_status[8] | device_status[9] << 6 | ((device_status[10] >> 1) - 1) * 0x10000 |\n             device_status[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        initial_time = FUN_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = FUN_08000e30();\n        } while ((uint)(current_time - initial_time) < 3);\n        return 3;\n      }\n      current_time = FUN_08000e30();\n    } while ((uint)(current_time - initial_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    initial_time = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = FUN_08000e30();\n    } while ((uint)(current_time - initial_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_device_status_0800201c",
                "param_1": "device_status",
                "iVar1": "initial_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "bVar4": "condition_flag"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_clock_speed_080023b4",
            "code": "\n\n\nuint calculateClockSpeed_080023b4(void)\n\n{\n  undefined4 inputRegister;\n  uint calculationResult;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    calculationResult = (_DAT_40023804 << 0x11) >> 0x17;\n    calculationResult = FUN_080002d0(calculationResult * 16000000,\n                         (((uint)(calculationResult * 0x20 < calculationResult) * -0x3f -\n                          (uint)(calculationResult * 0x7c0 < calculationResult * 0x1f)) * 8 +\n                         (uint)CARRY4(calculationResult * 0x3d08,calculationResult)) * 0x400 | calculationResult * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,inputRegister);\n  }\n  else {\n    calculationResult = (_DAT_40023804 << 0x11) >> 0x17;\n    calculationResult = FUN_080002d0(calculationResult * 8000000,\n                         (((uint)(calculationResult * 0x20 < calculationResult) * -0x3f -\n                          (uint)(calculationResult * 0x7c0 < calculationResult * 0x1f)) * 8 +\n                         (uint)CARRY4(calculationResult * 0x3d08,calculationResult)) * 0x200,_DAT_40023804 & 0x3f,0,inputRegister);\n  }\n  return calculationResult / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_clock_speed_080023b4",
                "in_r3": "inputRegister",
                "uVar1": "calculationResult"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_hardware_08002488",
            "code": "\n\n\nundefined4 initializeHardware_08002488(uint *parameterArray,uint arrayLength)\n\n{\n  int initialValue1;\n  int initialValue2;\n  uint returnValue;\n  \n  if (parameterArray == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < arrayLength) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)arrayLength);\n    if (arrayLength != (arrayLength & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameterArray & 2) != 0) {\n    if ((*parameterArray & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*parameterArray & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | parameterArray[2];\n  }\n  if ((*parameterArray & 1) != 0) {\n    returnValue = parameterArray[1];\n    if (returnValue == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (returnValue - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = returnValue | _DAT_40023808 & 0xfffffffc;\n    initialValue1 = FUN_08000e30();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == parameterArray[1] * 4) break;\n      initialValue2 = FUN_08000e30();\n      if (5000 < (uint)(initialValue2 - initialValue1)) {\n        return 3;\n      }\n    }\n  }\n  if (arrayLength < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)arrayLength);\n    if (arrayLength != (arrayLength & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameterArray & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | parameterArray[3];\n  }\n  if ((*parameterArray & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | parameterArray[4] << 3;\n  }\n  returnValue = FUN_080023b4();\n  DAT_2000002c = returnValue >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_hardware_08002488",
                "param_1": "parameterArray",
                "param_2": "arrayLength",
                "iVar1": "initialValue1",
                "iVar2": "initialValue2",
                "uVar3": "returnValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_080023b4",
                "FUN_08000e30",
                "FUN_08000d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_constant_value_080025e0",
            "code": "\nundefined4 getConstantValue_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_constant_value_080025e0"
            },
            "calling": [
                "FUN_080025ec",
                "FUN_0800260c",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "get_shifted_value_080025ec",
            "code": "\n\n\nuint getShiftedValue_080025ec(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "get_shifted_value_080025ec",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "shifted_value_0800260c",
            "code": "\n\n\nuint shiftedValue_0800260c(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "shifted_value_0800260c",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "update_flags_and_status_0800262c",
            "code": "\n\n\nvoid updateFlagsAndStatus_0800262c(int *p_flags)\n\n{\n  if (((*(uint32 *)(*p_flags + 0xc) & 0x100) != 0) && ((*(uint32 *)(*p_flags + 8) & 0x1000) != 0)) {\n    FUN_08003594();\n    *(uint32 *)(*p_flags + 0xc) = *(uint32 *)(*p_flags + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint32 *)(*p_flags + 0xc) & 0x200) != 0) && ((*(uint32 *)(*p_flags + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(p_flags);\n    *(uint32 *)(*p_flags + 0xc) = *(uint32 *)(*p_flags + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)p_flags + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "update_flags_and_status_0800262c",
                "param_1": "p_flags",
                "uint": "uint32"
            },
            "calling": [],
            "called": [
                "FUN_0800268c",
                "FUN_08003594"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_parameter_0800268e",
            "code": "\nvoid updateParameter_0800268e(uint **parameter)\n\n{\n  uint *pointer;\n  \n  *(undefined *)((int)parameter + 0x39) = 2;\n  pointer = *parameter;\n  if ((pointer[8] & 0x1111) == 0) {\n    if ((pointer[8] & 0x444) == 0) {\n      *pointer = *pointer & 0xfffffffe;\n    }\n  }\n  FUN_0800340c(parameter);\n  *(undefined *)((int)parameter + 0x39) = 0;\n  *(undefined *)(parameter + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_parameter_0800268e",
                "param_1": "parameter",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_data_080026ce",
            "code": "\nvoid processData_080026ce(int *data)\n\n{\n  int value;\n  \n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 2) != 0) && ((*(unsignedInt *)(value + 0xc) & 2) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xfffffffd;\n    *(undefinedType *)(data + 6) = 1;\n    if ((*(unsignedInt *)(*data + 0x18) & 3) == 0) {\n      FUN_08003754();\n      FUNC_080026ca(data);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefinedType *)(data + 6) = 0;\n  }\n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 4) != 0) && ((*(unsignedInt *)(value + 0xc) & 4) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xfffffffb;\n    *(undefinedType *)(data + 6) = 2;\n    if ((*(unsignedInt *)(*data + 0x18) & 0x300) == 0) {\n      FUN_08003754(data);\n      FUNC_080026ca(data);\n    }\n    else {\n      FUNC_080026c8(data);\n    }\n    *(undefinedType *)(data + 6) = 0;\n  }\n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 8) != 0) && ((*(unsignedInt *)(value + 0xc) & 8) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xfffffff7;\n    *(undefinedType *)(data + 6) = 4;\n    if ((*(unsignedInt *)(*data + 0x1c) & 3) == 0) {\n      FUN_08003754(data);\n      FUNC_080026ca(data);\n    }\n    else {\n      FUNC_080026c8(data);\n    }\n    *(undefinedType *)(data + 6) = 0;\n  }\n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 0x10) != 0) && ((*(unsignedInt *)(value + 0xc) & 0x10) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xffffffef;\n    *(undefinedType *)(data + 6) = 8;\n    if ((*(unsignedInt *)(*data + 0x1c) & 0x300) == 0) {\n      FUN_08003754(data);\n      FUNC_080026ca(data);\n    }\n    else {\n      FUNC_080026c8(data);\n    }\n    *(undefinedType *)(data + 6) = 0;\n  }\n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 1) != 0) && ((*(unsignedInt *)(value + 0xc) & 1) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xfffffffe;\n    FUN_0800376e(data);\n  }\n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 0x80) != 0) && ((*(unsignedInt *)(value + 0xc) & 0x80) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(data);\n  }\n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 0x40) != 0) && ((*(unsignedInt *)(value + 0xc) & 0x40) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(data);\n  }\n  value = *data;\n  if (((*(unsignedInt *)(value + 0x10) & 0x20) != 0) && ((*(unsignedInt *)(value + 0xc) & 0x20) != 0)) {\n    *(undefinedFour *)(value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_data_080026ce",
                "param_1": "data",
                "iVar1": "value",
                "uint": "unsignedInt",
                "undefined4": "undefinedFour",
                "undefined": "undefinedType"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800293c",
                "FUN_080026c8",
                "FUN_08003754",
                "FUN_080026ca",
                "FUN_0800293e",
                "FUN_0800376e",
                "FUN_080026cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_08002848",
            "code": "\nvoid updateBit_08002848(int data,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_08002848",
                "param_1": "data",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "validate_and_modify_data_08002864",
            "code": "\nundefined4 validate_and_modify_data_08002864(uint **data_ptr,undefined4 value)\n\n{\n  bool is_special_address;\n  uint *address_ptr;\n  \n  FUN_08002848(*data_ptr,value,0);\n  address_ptr = *data_ptr;\n  if (address_ptr == (uint *)0x40010000) {\n    is_special_address = true;\n  }\n  else if (address_ptr == (uint *)0x40010400) {\n    is_special_address = true;\n  }\n  else {\n    is_special_address = false;\n  }\n  if (((is_special_address) && ((address_ptr[8] & 0x1111) == 0)) && ((address_ptr[8] & 0x444) == 0)) {\n    address_ptr[0x11] = address_ptr[0x11] & 0xffff7fff;\n  }\n  address_ptr = *data_ptr;\n  if (((address_ptr[8] & 0x1111) == 0) && ((address_ptr[8] & 0x444) == 0)) {\n    *address_ptr = *address_ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)data_ptr + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "validate_and_modify_data_08002864",
                "param_1": "data_ptr",
                "param_2": "value",
                "bVar1": "is_special_address",
                "puVar2": "address_ptr"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bits_080028d4",
            "code": "\nvoid updateBits_080028d4(int baseAddress,uint bitPosition,int value)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | value << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bits_080028d4",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_flags_and_values_080028f0",
            "code": "\nundefined4 updateFlagsAndValues_080028f0(uint **ptrToPtr,undefined4 value)\n\n{\n  uint *ptrToValue;\n  \n  FUN_080028d4(*ptrToPtr,value,0);\n  ptrToValue = *ptrToPtr;\n  if (((ptrToValue[8] & 0x1111) == 0) && ((ptrToValue[8] & 0x444) == 0)) {\n    ptrToValue[0x11] = ptrToValue[0x11] & 0xffff7fff;\n  }\n  ptrToValue = *ptrToPtr;\n  if (((ptrToValue[8] & 0x1111) == 0) && ((ptrToValue[8] & 0x444) == 0)) {\n    *ptrToValue = *ptrToValue & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_flags_and_values_080028f0",
                "param_1": "ptrToPtr",
                "param_2": "value",
                "puVar1": "ptrToValue"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "set_permissions_and_flag_08002940",
            "code": "\nvoid setPermissionsAndFlag_08002940(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xfffffedf;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputArray + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "set_permissions_and_flag_08002940",
                "param_1": "inputArray"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "decode_and_update_data_0800295c",
            "code": "\nundefined4 decode_and_update_data_0800295c(int *data)\n\n{\n  short value_to_decrement;\n  byte *byte_data;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    byte_data = (byte *)data[8];\n    data[8] = (int)(byte_data + 1);\n    *(uint *)(*data + 4) = (uint)*byte_data;\n  }\n  value_to_decrement = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = value_to_decrement;\n  if (value_to_decrement == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "decode_and_update_data_0800295c",
                "param_1": "data",
                "sVar1": "value_to_decrement",
                "pbVar2": "byte_data"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_values_080029c8",
            "code": "\nvoid calculateValues_080029c8(int *inputParams)\n\n{\n  int result1;\n  int result2;\n  int result3;\n  int result4;\n  int result5;\n  int result6;\n  int result7;\n  int result8;\n  int result9;\n  int result10;\n  \n  *(uint *)(*inputParams + 0x10) = *(uint *)(*inputParams + 0x10) & 0xffffcfff | inputParams[3];\n  *(uint *)(*inputParams + 0xc) =\n       *(uint *)(*inputParams + 0xc) & 0xffff69f3 | inputParams[2] | inputParams[4] | inputParams[5] | inputParams[7];\n  *(uint *)(*inputParams + 0x14) = *(uint *)(*inputParams + 0x14) & 0xfffffcff | inputParams[6];\n  if (inputParams[7] == 0x8000) {\n    result10 = *inputParams;\n    if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n      result1 = FUN_080025ec();\n      result6 = inputParams[1];\n      result2 = FUN_080025ec();\n      result7 = inputParams[1];\n      result3 = FUN_080025ec();\n      result8 = inputParams[1];\n      result4 = FUN_080025ec();\n      result9 = inputParams[1];\n      result5 = FUN_080025ec();\n      *(uint *)(result10 + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                          (int)(((ulonglong)(uint)(result5 * 0x19) /\n                                (ulonglong)(uint)(inputParams[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n             (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n      return;\n    }\n    result1 = FUN_0800260c();\n    result6 = inputParams[1];\n    result2 = FUN_0800260c();\n    result7 = inputParams[1];\n    result3 = FUN_0800260c();\n    result8 = inputParams[1];\n    result4 = FUN_0800260c();\n    result9 = inputParams[1];\n    result5 = FUN_0800260c();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n    return;\n  }\n  result10 = *inputParams;\n  if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n    result1 = FUN_080025ec();\n    result6 = inputParams[1];\n    result2 = FUN_080025ec();\n    result7 = inputParams[1];\n    result3 = FUN_080025ec();\n    result8 = inputParams[1];\n    result4 = FUN_080025ec();\n    result9 = inputParams[1];\n    result5 = FUN_080025ec();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n    return;\n  }\n  result1 = FUN_0800260c();\n  result6 = inputParams[1];\n  result2 = FUN_0800260c();\n  result7 = inputParams[1];\n  result3 = FUN_0800260c();\n  result8 = inputParams[1];\n  result4 = FUN_0800260c();\n  result9 = inputParams[1];\n  result5 = FUN_0800260c();\n  *(uint *)(result10 + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                      (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n         (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_values_080029c8",
                "param_1": "inputParams",
                "iVar1": "result1",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "result6",
                "iVar7": "result7",
                "iVar8": "result8",
                "iVar9": "result9",
                "iVar10": "result10"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "perform_validation_08002d0c",
            "code": "\nundefined4 performValidation_08002d0c(uint **inputArray,uint flags,uint expectedResult,int baseValue,uint maxDifference)\n\n{\n  int result;\n  \n  do {\n    if (((flags & ~**inputArray) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((maxDifference == 0xffffffff) ||\n          ((maxDifference != 0 && (result = FUN_08000e30(), (uint)(result - baseValue) <= maxDifference))));\n  (*inputArray)[3] = (*inputArray)[3] & 0xfffffe5f;\n  (*inputArray)[5] = (*inputArray)[5] & 0xfffffffe;\n  *(undefined *)((int)inputArray + 0x39) = 0x20;\n  *(undefined *)((int)inputArray + 0x3a) = 0x20;\n  *(undefined *)(inputArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "perform_validation_08002d0c",
                "param_1": "inputArray",
                "param_2": "flags",
                "param_3": "expectedResult",
                "param_4": "baseValue",
                "param_5": "maxDifference",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_parameter_08002d72",
            "code": "\nundefined4 initializeParameter_08002d72(int *parameter)\n\n{\n  if (parameter != (int *)0x0) {\n    if (*(char *)((int)parameter + 0x39) == '\\0') {\n      *(undefined *)(parameter + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)parameter + 0x39) = 0x24;\n    *(uint *)(*parameter + 0xc) = *(uint *)(*parameter + 0xc) & 0xffffdfff;\n    FUN_080029c8(parameter);\n    *(uint *)(*parameter + 0x10) = *(uint *)(*parameter + 0x10) & 0xffffb7ff;\n    *(uint *)(*parameter + 0x14) = *(uint *)(*parameter + 0x14) & 0xffffffd5;\n    *(uint *)(*parameter + 0xc) = *(uint *)(*parameter + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)parameter + 0x39) = 0x20;\n    *(undefined *)((int)parameter + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_parameter_08002d72",
                "param_1": "parameter",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "parse_data_08002dd0",
            "code": "\nundefined4 parseData_08002dd0(int *dataPtr,ushort *ushortPtr,int numBytes,undefined4 param4)\n\n{\n  int returnValue;\n  undefined4 status;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if (ushortPtr == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (numBytes == 0) {\n      status = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      intValue = 0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      status = FUN_08000e30();\n      *(short *)(dataPtr + 9) = (short)numBytes;\n      *(short *)((int)dataPtr + 0x26) = (short)numBytes;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == 0x1000) {\n          returnValue = FUN_08002d0c(dataPtr,0x80,0,status,param4);\n          if (returnValue != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = *ushortPtr & 0x1ff;\n          if (dataPtr[4] == 0) {\n            ushortPtr = ushortPtr + 1;\n          }\n          else {\n            ushortPtr = (ushort *)((int)ushortPtr + 1);\n          }\n        }\n        else {\n          returnValue = FUN_08002d0c(dataPtr,0x80,0,status,param4);\n          if (returnValue != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = (uint)*(byte *)ushortPtr;\n          ushortPtr = (ushort *)((int)ushortPtr + 1);\n        }\n      }\n      returnValue = FUN_08002d0c(dataPtr,0x40,0,status,param4);\n      if (returnValue == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "parse_data_08002dd0",
                "param_1": "dataPtr",
                "param_2": "ushortPtr",
                "param_3": "numBytes",
                "param_4": "param4",
                "iVar1": "returnValue",
                "uVar2": "status",
                "param_1[0xf]": "intValue"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_and_update_data_08002eb2",
            "code": "\nundefined4 validate_and_update_data_08002eb2(int *data_ptr,int value_1,int value_2)\n\n{\n  if (*(char *)((int)data_ptr + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data_ptr + 0xe) != '\\x01') {\n    data_ptr[8] = value_1;\n    *(short *)(data_ptr + 9) = (short)value_2;\n    *(short *)((int)data_ptr + 0x26) = (short)value_2;\n    data_ptr[0xf] = 0;\n    *(undefined *)((int)data_ptr + 0x39) = 0x21;\n    *(undefined *)(data_ptr + 0xe) = 0;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_and_update_data_08002eb2",
                "param_1": "data_ptr",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_parameters_08002efa",
            "code": "\nundefined4 validateParameters_08002efa(int *data,int size,int value)\n\n{\n  if (*(char *)((int)data + 0x3a) != ' ') {\n    return 2;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    dataSize = size;\n    *(short *)(data + 0xb) = (short)value;\n    *(short *)((int)data + 0x2e) = (short)value;\n    count = 0;\n    *(undefined *)((int)data + 0x3a) = 0x22;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) | 1;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_parameters_08002efa",
                "param_1": "data",
                "param_2": "size",
                "param_3": "value",
                "param_1[10]": "dataSize",
                "param_1[0xf]": "count"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "clear_bit_and_set_character_08002f4c",
            "code": "\nundefined4 clearBitAndSetCharacter_08002f4c(int *inputPtr)\n\n{\n  *(uint *)(*inputPtr + 0xc) = *(uint *)(*inputPtr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)inputPtr + 0x39) = 0x20;\n  FUN_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "clear_bit_and_set_character_08002f4c",
                "param_1": "inputPtr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *dataPointer)\n\n{\n  byte *destByte;\n  short remainingCount;\n  undefined *destMemory;\n  \n  if (*(char *)((int)dataPointer + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (valueA == 0x1000) {\n    if (valueB == 0) {\n      *(ushort *)outputIndex = (ushort)((uint)(*(int *)(*dataPointer + 4) << 0x17) >> 0x17);\n      outputIndex = outputIndex + 2;\n    }\n    else {\n      *(ushort *)outputIndex = (ushort)*(undefined4 *)(*dataPointer + 4) & 0xff;\n      outputIndex = outputIndex + 1;\n    }\n  }\n  else if (valueB == 0) {\n    destMemory = (undefined *)outputIndex;\n    outputIndex = (int)(destMemory + 1);\n    *destMemory = (char)*(undefined4 *)(*dataPointer + 4);\n  }\n  else {\n    destByte = (byte *)outputIndex;\n    outputIndex = (int)(destByte + 1);\n    *destByte = (byte)*(undefined4 *)(*dataPointer + 4) & 0x7f;\n  }\n  remainingCount = *(short *)((int)dataPointer + 0x2e) + -1;\n  *(short *)((int)dataPointer + 0x2e) = remainingCount;\n  if (remainingCount != 0) {\n    return 0;\n  }\n  *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n  FUN_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "dataPointer",
                "pbVar1": "destByte",
                "sVar2": "remainingCount",
                "puVar3": "destMemory",
                "param_1[2]": "valueA",
                "param_1[4]": "valueB",
                "param_1[10]": "outputIndex"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "check_conditions_and_execute_08002ffc",
            "code": "\nvoid check_conditions_and_execute_08002ffc(uint **ptr_array)\n\n{\n  int result;\n  uint value2;\n  uint *ptr_value;\n  uint temp;\n  uint value1;\n  \n  ptr_value = *ptr_array;\n  value1 = *ptr_value;\n  value2 = ptr_value[3];\n  if ((((value1 & 0xf) == 0) && ((value1 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    FUN_08002f66(ptr_array);\n    return;\n  }\n  if (((value1 & 0xf) == 0) || ((temp = ptr_value[5] & 1, temp == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value1 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      FUN_0800295c(ptr_array);\n      return;\n    }\n    if (((value1 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      FUN_08002f4c(ptr_array);\n    }\n  }\n  else {\n    if (((value1 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      flag_ptr = (uint *)((uint)flag_ptr | 1);\n    }\n    if (((value1 & 4) != 0) && (temp != 0)) {\n      flag_ptr = (uint *)((uint)flag_ptr | 2);\n    }\n    if (((value1 & 2) != 0) && (temp != 0)) {\n      flag_ptr = (uint *)((uint)flag_ptr | 4);\n    }\n    if (((value1 & 8) != 0) && (temp != 0)) {\n      flag_ptr = (uint *)((uint)flag_ptr | 8);\n    }\n    if (flag_ptr != (uint *)0x0) {\n      if (((value1 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        FUN_08002f66(ptr_array);\n      }\n      if ((((uint)flag_ptr & 8) == 0) && (((*ptr_array)[5] & 0x40) == 0)) {\n        FUNC_08003f94(ptr_array);\n        flag_ptr = (uint *)0x0;\n        return;\n      }\n      FUN_08002940(ptr_array);\n      ptr_value = *ptr_array;\n      if ((ptr_value[5] & 0x40) == 0) {\n        FUNC_08003f94(ptr_array);\n        return;\n      }\n      ptr_value[5] = ptr_value[5] & 0xffffffbf;\n      if (data_ptr == (uint *)0x0) {\n        FUNC_08003f94(ptr_array);\n        return;\n      }\n      function_ptr = (uint)&label;\n      result = FUN_08000f8c(data_ptr);\n      if (result != 0) {\n        (*(func_ptr *)function_ptr)();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "check_conditions_and_execute_08002ffc",
                "param_1": "ptr_array",
                "iVar1": "result",
                "uVar2": "value2",
                "puVar3": "ptr_value",
                "uVar4": "temp",
                "uVar5": "value1",
                "param_1[0xf]": "flag_ptr",
                "param_1[0xd]": "data_ptr",
                "param_1[0xd][0x14]": "function_ptr",
                "LAB_0800311c_1": "label",
                "code": "func_ptr"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint getBitValue_08003138(uint inputValue,int offset)\n\n{\n  return *(uint *)(offset + ((inputValue << 0x18) >> 0x1c) * 4) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "inputValue",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_value_0800314e",
            "code": "\nvoid setBitValue_0800314e(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_value_0800314e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "clear_bit_0800316c",
            "code": "\nvoid clearBit_0800316c(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "clear_bit_0800316c",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 inputValue)\n\n{\n  switch(inputValue) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_memory_address_080031fc",
            "code": "\n\n\nundefined4 setMemoryAddress_080031fc(undefined4 addressIndex)\n\n{\n  undefined4 memoryAddress;\n  \n  switch(addressIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    memoryAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    memoryAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    memoryAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    memoryAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    memoryAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    memoryAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    memoryAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    memoryAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    memoryAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    memoryAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    memoryAddress = 0x40022800;\n    break;\n  default:\n    memoryAddress = 0;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_memory_address_080031fc",
                "param_1": "addressIndex",
                "uVar1": "memoryAddress"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_input_validity_08003380",
            "code": "\nundefined4 check_input_validity_08003380(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  \n  result = FUN_0800354a(input_1,&DAT_08005a18,input_3,input_4,input_4);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_input_validity_08003380",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "get_result_0800339c",
            "code": "\nundefined4 get_result_0800339c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result_1;\n  uint result_2;\n  \n  result_1 = FUN_0800354a(input_1,&DAT_08005a3c,input_3,input_4,input_4);\n  result_2 = (uint)(result_1 << 0xc) >> 0x1b;\n  if (result_2 == 3) {\n    return 8;\n  }\n  if (result_2 != 4) {\n    if (result_2 != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "get_result_0800339c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_memory_flag_080033c8",
            "code": "\n\n\nvoid clearMemoryFlag_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_memory_flag_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "process_data_080033d8",
            "code": "\nvoid processData_080033d8(undefined4 inputData)\n\n{\n  int result;\n  int dataArray [5];\n  \n  dataArray[0] = FUN_080034f4(inputData,&DAT_08005a18);\n  if ((dataArray[0] != 0) && ((result = FUN_08003380(inputData), result == 0 || (result == 0x10)))) {\n    FUN_08000f72(dataArray,result);\n    FUN_08000f56(dataArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "inputData",
                "iVar1": "result",
                "local_1c": "dataArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380",
                "FUN_08000f72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "initialize_program_0800340c",
            "code": "\nvoid initialize_program_0800340c(void)\n\n{\n  FUN_080035fc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "initialize_program_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "analyze_data_08003414",
            "code": "\nvoid analyzeData_08003414(undefined4 input)\n\n{\n  int result;\n  uint flags;\n  int data [16];\n  \n  data[0] = FUN_080034f4(input,&DAT_08005a3c);\n  if ((data[0] != 0) &&\n     ((((result = FUN_0800339c(input), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flags = FUN_0800354a(input,&DAT_08005a3c);\n    if ((flags & 0x100000) == 0) {\n      FUN_08002864(data,result);\n    }\n    else {\n      FUN_080028f0(data,result);\n    }\n    FUN_0800268e(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "analyze_data_08003414",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "flags",
                "local_4c": "data"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_application_0800346c",
            "code": "\nvoid initialize_application_0800346c(void)\n\n{\n  FUN_08000e30();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_application_0800346c"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "execute_initialization_08003476",
            "code": "\nvoid execute_initialization_08003476(void)\n\n{\n  FUN_08000e18();\n  FUN_08000f4e();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "execute_initialization_08003476"
            },
            "calling": [],
            "called": [
                "FUN_08003474",
                "FUN_08000f4e",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "initialize_bit_08003486",
            "code": "\nvoid initializeBit_08003486(uint inputValue,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 result;\n  uint bitMask;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  result = FUN_080031fc((inputValue << 0x18) >> 0x1c);\n  bitMask = 1 << (inputValue & 0xf) & 0xffff;\n  localVar4 = 2;\n  localVar2 = param2;\n  localVar3 = param3;\n  FUN_08000fb4(result,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "initialize_bit_08003486",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "local_24": "bitMask",
                "local_20": "localVar2",
                "local_1c": "localVar3",
                "local_18": "localVar4"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "initialize_flag_080034b6",
            "code": "\nvoid initializeFlag_080034b6(undefined4 param1,undefined2 param2,int flag,undefined4 param4)\n\n{\n  if (flag == 0) {\n    FUN_08001198(param1,param2,0,param4,param4);\n    return;\n  }\n  FUN_08001198(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "initialize_flag_080034b6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "param4"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initializeSystem_080034ce(void)\n\n{\n  FUN_08000de4();\n  FUN_08000c8c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_in_array_080034da",
            "code": "\nundefined4 find_value_in_array_080034da(int search_value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == search_value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "search_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "check_valid_input_080034f4",
            "code": "\nundefined4 checkValidInput_080034f4(int inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (inputValue != -1) {\n    returnValue = FUN_080034da();\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "check_valid_input_080034f4",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003978",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_index_08003506",
            "code": "\nint find_value_index_08003506(int target_value,short *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 2) == target_value) break;\n    array_ptr = array_ptr + 6;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_index_08003506",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "check_parameter_0800351e",
            "code": "\nundefined4 checkParameter_0800351e(int input)\n\n{\n  undefined4 result;\n  \n  if (input != 0) {\n    result = FUN_08003506();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "check_parameter_0800351e",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *values_array)\n\n{\n  while( true ) {\n    if (*values_array == -1) {\n      return 0xffffffff;\n    }\n    if (*values_array == value) break;\n    values_array = values_array + 6;\n  }\n  return *(undefined4 *)(values_array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "values_array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "check_param_0800354a",
            "code": "\nundefined4 check_param_0800354a(int input)\n\n{\n  undefined4 result;\n  \n  if (input == -1) {\n    return 0xffffffff;\n  }\n  result = FUN_0800352e();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "check_param_0800354a",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003978"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 find_value_in_array_0800355e(int value,short *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) value_found;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array",
                "break": "value_found"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "return_smaller_08003582",
            "code": "\nint returnSmaller_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "return_smaller_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid executeCallback_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_data_080035bc",
            "code": "\n\n\nvoid initializeData_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_data_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "set_control_bits_080035fc",
            "code": "\n\n\nvoid setControlBits_080035fc(int *controlValue)\n\n{\n  if (*controlValue == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*controlValue == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*controlValue == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*controlValue == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*controlValue == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*controlValue == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*controlValue == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*controlValue == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*controlValue == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*controlValue == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*controlValue == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*controlValue == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*controlValue == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*controlValue == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "set_control_bits_080035fc",
                "param_1": "controlValue"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_from_param_08003750",
            "code": "\nint subtractFourFromParam_08003750(int inputNum)\n\n{\n  return inputNum + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_from_param_08003750",
                "param_1": "inputNum"
            },
            "calling": [
                "FUN_08003754",
                "FUN_0800376e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_callback_08003754",
            "code": "\nvoid executeCallback_08003754(int callbackParam)\n\n{\n  int callbackHandle;\n  \n  callbackHandle = FUN_08003750();\n  if ((*(code **)(callbackHandle + 0x48) != (code *)0x0) && (*(char *)(callbackParam + 0x18) == '\\x01')) {\n    (**(code **)(callbackHandle + 0x48))(callbackHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_callback_08003754",
                "param_1": "callbackParam",
                "iVar1": "callbackHandle"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_optional_function_0800376e",
            "code": "\nvoid executeOptionalFunction_0800376e(void)\n\n{\n  int functionPointer;\n  \n  functionPointer = FUN_08003750();\n  if (*(code **)(functionPointer + 0x44) != (code *)0x0) {\n    (**(code **)(functionPointer + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_optional_function_0800376e",
                "iVar1": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "check_and_call_functions_0800377c",
            "code": "\nvoid check_and_call_functions_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    FUN_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    FUN_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "check_and_call_functions_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08003880",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_data_08003880",
            "code": "\nvoid processData_08003880(int input,int flag,int compareVal,undefined4 extraParam)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (compareVal == *(int *)(input + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      FUN_08001460(input,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    FUN_080014ec(input,result + 0x68,0x20,8,extraParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_data_08003880",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "compareVal",
                "param_4": "extraParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_080014ec",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_function_080038d0",
            "code": "\nvoid executeFunction_080038d0(undefined4 arg)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_0800387c();\n  if (((*(code **)(returnValue + 0x60) != (code *)0x0) && (*(char *)(returnValue + 0x5e) == '\\x01')) &&\n     (*(char *)(returnValue + 0x2c) != ' ')) {\n    (**(code **)(returnValue + 0x60))(returnValue + 0x68);\n  }\n  FUN_08001578(arg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_function_080038d0",
                "param_1": "arg",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_call_function_08003900",
            "code": "\nvoid checkAndCallFunction_08003900(undefined4 inputParameter)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    FUN_08001578(inputParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "inputParameter",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configureUARTPins_08003978(int *pinConfig)\n\n{\n  int uartPin1;\n  int uartPin2;\n  undefined4 uartFlag;\n  uint uartSetting;\n  uint pinMask1;\n  uint uartConfig;\n  uint uartConfig2;\n  undefined4 uartData;\n  uint uartConfig3;\n  \n  if (pinConfig != (int *)0x0) {\n    uartPin1 = FUN_080034f4((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n    uartPin2 = FUN_080034f4((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n    if ((uartPin2 == 0) || (uartPin1 == 0)) {\n      FUN_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2);\n    }\n    else {\n      uartPin1 = FUN_08003582(uartPin1);\n      *pinConfig = uartPin1;\n      if (uartPin1 == 0) {\n        FUN_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(pinConfig + 0x11) = 0;\n          *(undefined *)(pinConfig + 0x17) = 0x25;\n        }\n        else if (uartPin1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(pinConfig + 0x11) = 1;\n          *(undefined *)(pinConfig + 0x17) = 0x26;\n        }\n        else if (uartPin1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(pinConfig + 0x11) = 2;\n          *(undefined *)(pinConfig + 0x17) = 0x27;\n        }\n        else if (uartPin1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(pinConfig + 0x11) = 3;\n          *(undefined *)(pinConfig + 0x17) = 0x34;\n        }\n        else if (uartPin1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(pinConfig + 0x11) = 4;\n          *(undefined *)(pinConfig + 0x17) = 0x35;\n        }\n        else if (uartPin1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(pinConfig + 0x11) = 5;\n          *(undefined *)(pinConfig + 0x17) = 0x47;\n        }\n        else if (uartPin1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(pinConfig + 0x11) = 6;\n          *(undefined *)(pinConfig + 0x17) = 0x52;\n        }\n        else if (uartPin1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(pinConfig + 0x11) = 7;\n          *(undefined *)(pinConfig + 0x17) = 0x53;\n        }\n        uartFlag = FUN_080031fc((uint)((int)*(short *)((int)pinConfig + 0x5a) << 0x18) >> 0x1c);\n        uartSetting = FUN_0800354a((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n        pinMask1 = 1 << (*(ushort *)((int)pinConfig + 0x5a) & 0xf) & 0xffff;\n        uartConfig = (uartSetting >> 3 & 1) << 4 | uartSetting & 7;\n        uartConfig2 = (uartSetting << 0x1a) >> 0x1e;\n        uartConfig3 = (uartSetting << 0x11) >> 0x19;\n        uartData = 3;\n        FUN_08000fb4(uartFlag,&pinMask1);\n        uartFlag = FUN_080031fc((uint)((int)*(short *)(pinConfig + 0x16) << 0x18) >> 0x1c);\n        uartSetting = FUN_0800354a((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n        pinMask1 = 1 << (*(ushort *)(pinConfig + 0x16) & 0xf) & 0xffff;\n        uartConfig = (uartSetting >> 3 & 1) << 4 | uartSetting & 7;\n        uartConfig2 = (uartSetting << 0x1a) >> 0x1e;\n        FUN_08000fb4(uartFlag,&pinMask1);\n        (&DAT_200002b4)[*(byte *)(pinConfig + 0x11)] = pinConfig + 1;\n        pinConfig[1] = *pinConfig;\n        pinConfig[2] = pinConfig[0x12];\n        pinConfig[3] = pinConfig[0x13];\n        pinConfig[4] = pinConfig[0x14];\n        pinConfig[5] = pinConfig[0x15];\n        pinConfig[6] = 0xc;\n        pinConfig[7] = 0;\n        pinConfig[8] = 0;\n        FUN_08002d72(pinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "pinConfig",
                "iVar1": "uartPin1",
                "iVar2": "uartPin2",
                "uVar3": "uartFlag",
                "uVar4": "uartSetting",
                "local_2c": "pinMask1",
                "local_28": "uartConfig",
                "local_24": "uartConfig2",
                "local_20": "uartData",
                "local_1c": "uartConfig3"
            },
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08003582",
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_0800354a",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_data_08003cc8",
            "code": "\nvoid initializeData_08003cc8(void)\n\n{\n  int result1;\n  undefined4 result2;\n  \n  result1 = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (result1 != 0) {\n    result2 = FUN_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = FUN_0800351e(result2,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    FUN_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_data_08003cc8",
                "iVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_0800351e",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "execute_reversed_check_08003d18",
            "code": "\nuint execute_reversed_check_08003d18(undefined4 input_param,uint value_param)\n\n{\n  int initial_value;\n  int check_result;\n  uint counter;\n  \n  initial_value = FUN_08000e30();\n  check_result = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (check_result == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 10 &&\n      (((&DAT_200002b4)[counter] == 0 ||\n       (check_result = FUN_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[counter] != check_result))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (9 < counter) {\n    if ((9 < DAT_20000074) && (FUN_08003cc8(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    counter = (uint)DAT_20000074;\n  }\n  do {\n    check_result = FUN_08002dd0((&DAT_200002b4)[counter],input_param,value_param & 0xffff,1000);\n    if (check_result == 0) {\n      return value_param;\n    }\n    check_result = FUN_08000e30();\n  } while ((uint)(check_result - initial_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "execute_reversed_check_08003d18",
                "param_1": "input_param",
                "param_2": "value_param",
                "iVar1": "initial_value",
                "iVar2": "check_result",
                "uVar3": "counter"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08000e30",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_bit_set_08003dd0",
            "code": "\nbool isBitSet_08003dd0(int value)\n\n{\n  uint bitMask;\n  \n  bitMask = FUN_0800312c((&DAT_200002b4)[*(index *)(value + 0x44)]);\n  return (bitMask & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_bit_set_08003dd0",
                "param_1": "value",
                "uVar1": "bitMask",
                "byte": "index"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_flag_set_08003df4",
            "code": "\nbool isFlagSet_08003df4(int flag)\n\n{\n  uint value;\n  \n  value = FUN_0800312c((&DAT_200002b4)[*(byteValue *)(flag + 0x44)]);\n  return (value & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_flag_set_08003df4",
                "param_1": "flag",
                "uVar1": "value",
                "byte": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "extract_data_from_binary_08003e18",
            "code": "\nundefined4 extractDataFromBinary_08003e18(int input,undefined *output,undefined4 size,undefined4 parameter)\n\n{\n  int result;\n  \n  if (input == 0) {\n    return 0xffffffff;\n  }\n  result = FUN_08003dd0();\n  if (result == 0) {\n    *output = *(undefined *)(input + 0x45);\n    FUN_08002efa((&DAT_200002b4)[*(byte *)(input + 0x44)],input + 0x45,1,&DAT_200002b4,parameter);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "extract_data_from_binary_08003e18",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "param_4": "parameter",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_data_in_storage_08003e54",
            "code": "\nvoid updateDataInStorage_08003e54(int dataPointer,undefined4 newValue,undefined4 unused1,undefined4 unused2)\n\n{\n  int result;\n  uint index;\n  \n  if (dataPointer != 0) {\n    result = FUN_08003dd0();\n    if (result == 0) {\n      index = (uint)*(byte *)(dataPointer + 0x44);\n      *(undefined4 *)(&DAT_20000214 + index * 4) = newValue;\n      *(int *)(&DAT_2000023c + index * 4) = dataPointer;\n      FUN_08000e60((int)*(char *)(dataPointer + 0x5c),0,1,index,unused2);\n      FUN_08000ec4((int)*(char *)(dataPointer + 0x5c));\n      FUN_08002efa((&DAT_200002b4)[*(byte *)(dataPointer + 0x44)],dataPointer + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_data_in_storage_08003e54",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "result",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08000e60",
                "FUN_08003dd0",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_data_and_perform_actions_08003eac",
            "code": "\nvoid updateDataAndPerformActions_08003eac(int dataPointer,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPointer != 0) {\n    byteValue = *(byte *)(dataPointer + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = dataPointer;\n    FUN_08000e60((int)*(char *)(dataPointer + 0x5c),0,2);\n    FUN_08000ec4((int)*(char *)(dataPointer + 0x5c));\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 0x68) + (uint)*(ushort *)(dataPointer + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_data_and_perform_actions_08003eac",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_index_in_array_08003f00",
            "code": "\nuint find_index_in_array_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_index_in_array_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_if_valid_index_08003f24",
            "code": "\nvoid executeFunctionIfValidIndex_08003f24(void)\n\n{\n  uint result;\n  \n  result = FUN_08003f00();\n  if (result < 10) {\n    (**(code **)(&DAT_20000214 + result * 4))(*(undefined4 *)(&DAT_2000023c + result * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_if_valid_index_08003f24",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "execute_special_action_08003f48",
            "code": "\nvoid execute_special_action_08003f48(void)\n\n{\n  uint result;\n  int action_status;\n  int function_ptr;\n  \n  result = FUN_08003f00();\n  function_ptr = *(int *)(&DAT_2000028c + result * 4);\n  if ((result < 10) && (action_status = (**(code **)(&DAT_20000264 + result * 4))(function_ptr), action_status != -1)) {\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(function_ptr + 0x44)],\n                 *(int *)(function_ptr + 0x68) + (uint)*(ushort *)(function_ptr + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "execute_special_action_08003f48",
                "uVar1": "result",
                "iVar2": "action_status",
                "iVar3": "function_ptr"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *ptr;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  ptr = DAT_200002dc;\n  if (DAT_200002dc + size <= endOfStackMemory) {\n    DAT_200002dc = DAT_200002dc + size;\n    return ptr;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "ptr",
                "&stack0x00000000": "endOfStackMemory"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_error_code_080040d0",
            "code": "\nErrorCode get_error_code_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0",
                "undefined4": "ErrorCode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_080040d6",
            "code": "\nundefined4 initializeMemory_080040d6(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_080040d6",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "check_return_value_080040e0",
            "code": "\nint check_return_value_080040e0(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "check_return_value_080040e0",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_program_080040e4",
            "code": "\nundefined4 initializeProgram_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_program_080040e4"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nundefined4 initialize_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "initialize_data_080040ec",
            "code": "\nvoid initialize_data_080040ec(undefined4 param_1,undefined4 source_data,undefined4 temp_data_1,undefined4 temp_data_2)\n\n{\n  FUN_08003d18(source_data,temp_data_1,temp_data_1,temp_data_2,temp_data_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "initialize_data_080040ec",
                "param_2": "source_data",
                "param_3": "temp_data_1",
                "param_4": "temp_data_2"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "initialize_default_return_value_0800410c",
            "code": "\nuint32_t initializeDefaultReturnValue_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "initialize_default_return_value_0800410c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_data_08004110",
            "code": "\nvoid processData_08004110(uint inputValue,undefined4 option,undefined4 data,undefined *buffer)\n\n{\n  int result;\n  undefined *pointer;\n  int index;\n  \n  if (inputValue < 0x60) {\n    index = (int)*(short *)(&DAT_08005d3c + inputValue * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    index = -1;\n    pointer = buffer;\n  }\n  if (index != -1) {\n    result = FUN_08003138(index,&DAT_200002e0,data,pointer,buffer);\n    if (result != 0) {\n      result = FUN_0800355e(index,&DAT_08005a18);\n      if (result == 0) {\n        result = FUN_0800355e(index,&DAT_08005a3c);\n        if (result != 0) {\n          FUN_08003414(index);\n        }\n      }\n      else {\n        FUN_080033d8(index);\n      }\n      FUN_0800316c(index,&DAT_200002e0);\n    }\n    switch(option) {\n    case 0:\n      FUN_08003486(index,0);\n      break;\n    case 1:\n      FUN_08003486(index,1,0);\n      break;\n    case 2:\n      FUN_08003486(index,0,1);\n      break;\n    case 3:\n      FUN_08003486(index,0,2);\n    }\n    FUN_0800314e(index,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "inputValue",
                "param_2": "option",
                "param_3": "data",
                "param_4": "buffer",
                "iVar1": "result",
                "puVar2": "pointer",
                "iVar3": "index"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_0800314e",
                "FUN_080033d8",
                "FUN_08003138",
                "FUN_08003414",
                "FUN_0800355e",
                "FUN_08003486",
                "FUN_0800316c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "process_data_080041bc",
            "code": "\nvoid processData_080041bc(uint index,undefined4 value1,undefined4 value2,undefined *data)\n\n{\n  int returnValue;\n  undefined4 shiftedValue;\n  undefined *pointer;\n  uint ushortValue;\n  \n  if (index < 0x60) {\n    ushortValue = (uint)*(short *)(&DAT_08005d3c + index * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    ushortValue = 0xffffffff;\n    pointer = data;\n  }\n  if ((ushortValue != 0xffffffff) &&\n     (returnValue = FUN_08003138(ushortValue,&DAT_2000030c,value2,pointer,data), returnValue != 0)) {\n    shiftedValue = FUN_0800318c((ushortValue << 0x18) >> 0x1c);\n    FUN_080034b6(shiftedValue,1 << (ushortValue & 0xf) & 0xffff,value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "index",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "iVar1": "returnValue",
                "uVar2": "shiftedValue",
                "puVar3": "pointer",
                "uVar4": "ushortValue"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_0800318c",
                "FUN_08003138",
                "FUN_080034b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_system_08004204",
            "code": "\nvoid initialize_system_08004204(void)\n\n{\n  FUN_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_system_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_checksum_08004240",
            "code": "\nushort calculateChecksum_08004240(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x138) + 0x40) - *(short *)(inputValue + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_checksum_08004240",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_data_080042ac",
            "code": "\nvoid updateData_080042ac(int data)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = FUN_08003e18(data,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(data + 100) + 1U & 0x3f, newIndex != *(ushort *)(data + 0x66))) {\n    *(undefined *)(*(int *)(data + 0x60) + (uint)*(ushort *)(data + 100)) = newValue;\n    *(ushort *)(data + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "initialize_data_080042e8",
            "code": "\nundefined4 initializeData_080042e8(int dataPtr,undefined value)\n\n{\n  byte byteValue;\n  byte maskedValue;\n  int incrementedValue;\n  \n  *(undefined *)(dataPtr + 0x10) = 1;\n  incrementedValue = *(ushort *)(dataPtr + 0x140) + 1;\n  byteValue = (byte)incrementedValue;\n  maskedValue = byteValue & 0x7f;\n  if (incrementedValue == 0) {\n    maskedValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataPtr + 0x142) == (ushort)maskedValue);\n  *(undefined *)(*(int *)(dataPtr + 0x13c) + (uint)*(ushort *)(dataPtr + 0x140)) = value;\n  *(ushort *)(dataPtr + 0x140) = (ushort)maskedValue;\n  incrementedValue = FUN_08003df4(dataPtr + 0xd4);\n  if (incrementedValue == 0) {\n    FUN_08003eac(dataPtr + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "initialize_data_080042e8",
                "param_1": "dataPtr",
                "param_2": "value",
                "bVar1": "byteValue",
                "bVar2": "maskedValue",
                "iVar3": "incrementedValue"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_memory_08004364",
            "code": "\nvoid initializeMemory_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_memory_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_hardware_serial_08004388",
            "code": "\nvoid initializeHardwareSerial_08004388(int serialHandle,undefined4 baudRate,byte options)\n\n{\n  uint fileSize;\n  byte optionMask;\n  int configValue;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialHandle + 0x11c) = baudRate;\n  *(byte *)(serialHandle + 0x144) = options;\n  optionMask = options & 7;\n  if (optionMask == 4) {\n    configValue = 7;\n  }\n  else if (optionMask == 6) {\n    configValue = 8;\n  }\n  else if (optionMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((options & 0x30) == 0x30) {\n    *(undefined4 *)(serialHandle + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((options & 0x20) == 0) {\n    *(undefined4 *)(serialHandle + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialHandle + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((options & 8) == 0) {\n    *(undefined4 *)(serialHandle + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialHandle + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialHandle + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialHandle + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    FUN_08003978(serialHandle + 0xd4);\n    FUN_08003e54(serialHandle + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  FUN_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (fileSize < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + fileSize * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_hardware_serial_08004388",
                "param_1": "serialHandle",
                "param_2": "baudRate",
                "param_3": "options",
                "extraout_r1": "fileSize",
                "bVar1": "optionMask",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_jumptable_value_08004444",
            "code": "\nvoid setJumptableValue_08004444(int memoryAddress,uint index)\n\n{\n  undefined2 value;\n  code *jumptable;\n  \n  if (index < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(memoryAddress + 0x12e) = value;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_jumptable_value_08004444",
                "param_1": "memoryAddress",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_default_value_08004460",
            "code": "\nvoid setDefaultValue_08004460(int destination,uint value)\n\n{\n  undefined2 defaultValue;\n  \n  if (value < 0x60) {\n    defaultValue = *(undefined2 *)(&DAT_08005d3c + value * 2);\n  }\n  else {\n    defaultValue = 0xffff;\n  }\n  *(undefined2 *)(destination + 300) = defaultValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_default_value_08004460",
                "param_1": "destination",
                "param_2": "value",
                "uVar1": "defaultValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_function_0800447c",
            "code": "\nundefined4 *\ninitializeFunction_0800447c(undefined4 *output,undefined4 input,undefined4 paramA,undefined4 paramB)\n\n{\n  undefined2 returnValue;\n  \n  output[1] = 0;\n  output[2] = 1000;\n  *output = &PTR_FUN_080042e8_1_08005ed4;\n  if (output == &DAT_20000338) {\n    FUN_08004444(&DAT_20000338,0x4c,paramA,&DAT_20000338,paramB);\n    FUN_08004460(&DAT_20000338,0x4d);\n  }\n  else {\n    returnValue = FUN_0800351e(input,&DAT_08005c10);\n    *(undefined2 *)((int)output + 0x12e) = returnValue;\n    returnValue = FUN_0800351e(input,&DAT_08005ca0);\n    *(undefined2 *)(output + 0x4b) = returnValue;\n  }\n  FUN_08004364(output);\n  return output;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_function_0800447c",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004444",
                "FUN_08004364",
                "FUN_0800351e",
                "FUN_08004460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "check_params_and_call_function_080044d8",
            "code": "\nvoid check_params_and_call_function_080044d8(int status,int value,undefined4 arg1,undefined4 arg2)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    FUN_0800447c(&DAT_20000338,0x40004800,arg1,0xffff,arg2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "check_params_and_call_function_080044d8",
                "param_1": "status",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08005f28;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_data_08004560",
            "code": "\nvoid initializeData_08004560(int flag1,int flag2)\n\n{\n  if ((flag1 == 1) && (flag2 == 0xffff)) {\n    FUN_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_data_08004560",
                "param_1": "flag1",
                "param_2": "flag2"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combineValues_08004640(int input,uint value)\n\n{\n  return value | input << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "input",
                "param_2": "value"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_080007f0",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_08004648",
            "code": "\nvoid initialize_08004648(void)\n\n{\n  FUN_08000e3c(3);\n  FUN_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_08004648"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "execute_continuous_operations_08004658",
            "code": "\nvoid execute_continuous_operations_08004658(void)\n\n{\n  FUNC_08004646();\n  FUN_08000c4c();\n  do {\n    FUN_08000c64();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "execute_continuous_operations_08004658"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004338",
                "FUN_08000c64",
                "FUN_08000c4c",
                "FUN_08004646"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int isFirstRun,int someValue,undefined4 unimportantParam,undefined4 anotherParam)\n\n{\n  if (isFirstRun != 1) {\n    return;\n  }\n  if (someValue == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    FUN_080047fe(0,&anotherLabel,&DAT_20000000,&DAT_20000488,anotherParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "isFirstRun",
                "param_2": "someValue",
                "param_3": "unimportantParam",
                "param_4": "anotherParam",
                "LAB_0800468c_1": "anotherLabel"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_function_or_continue_if_null_080047c0",
            "code": "\nvoid executeFunctionOrContinueIfNull_080047c0(int argument)\n\n{\n  int index;\n  \n  if (*(int *)(argument + 8) != 0) {\n    (**(code **)(argument + 0xc))();\n    return;\n  }\n  FUN_08005760();\n  index = FUN_08004678();\n  if ((&DAT_20000494)[index * 5] != 0) {\n    executeFunctionOrContinueIfNull_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_function_or_continue_if_null_080047c0",
                "param_1": "argument",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_data_availability_080047d0",
            "code": "\nvoid checkDataAvailability_080047d0(void)\n\n{\n  int currentIndex;\n  \n  currentIndex = FUN_08004678();\n  if ((&DAT_20000494)[currentIndex * 5] != 0) {\n    FUN_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_data_availability_080047d0",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "call_fun_with_params_080047fe",
            "code": "\nvoid callFunWithParams_080047fe(undefined4 paramA,undefined4 paramB)\n\n{\n  FUN_08004844(paramB,paramA);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "call_fun_with_params_080047fe",
                "param_1": "paramA",
                "param_2": "paramB"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "print_assert_error_08004808",
            "code": "\nvoid printAssertError_08004808(undefined4 fileName,undefined4 lineNumber,char *errorMessage,undefined4 extraMsg)\n\n{\n  undefined4 filePtr;\n  char *function;\n  undefined8 result;\n  undefined4 extraPtr;\n  \n  filePtr = *(undefined4 *)(DAT_200000a0 + 0xc);\n  extraPtr = extraMsg;\n  if (errorMessage == (char *)0x0) goto LAB_0800482c;\n  function = \", function: \";\n  do {\n    FUN_08004860(filePtr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",extraMsg,fileName,lineNumber\n                 ,function,errorMessage,extraPtr);\n    result = FUN_080051ac();\n    lineNumber = (undefined4)((ulonglong)result >> 0x20);\n    filePtr = (undefined4)result;\nLAB_0800482c:\n    errorMessage = \"\";\n    function = errorMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "print_assert_error_08004808",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "errorMessage",
                "param_4": "extraMsg",
                "uVar1": "filePtr",
                "pcVar2": "function",
                "uVar3": "result",
                "uVar4": "extraPtr"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "left_shift_param2_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong left_shift_param2_08004844(undefined4 undefined_param,uint input_value)\n\n{\n  return (ulonglong)input_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "left_shift_param2_08004844",
                "param_1": "undefined_param",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "initialize_data_08004860",
            "code": "\nvoid initializeData_08004860(undefined4 data1,undefined4 data2,undefined4 stackPointer1,undefined4 stackPointer2)\n\n{\n  undefined4 updatedStackPointer1;\n  undefined4 updatedStackPointer2;\n  \n  updatedStackPointer1 = stackPointer1;\n  updatedStackPointer2 = stackPointer2;\n  FUN_08004a84(DAT_200000a0,data1,data2,&updatedStackPointer1,data1,&updatedStackPointer1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "initialize_data_08004860",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "stackPointer1",
                "param_4": "stackPointer2",
                "uStack_8": "updatedStackPointer1",
                "uStack_4": "updatedStackPointer2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_with_080048cc",
            "code": "\nvoid fillMemoryWith_080048cc(undefined *memory,undefined value,int size)\n\n{\n  undefined *endPointer;\n  \n  endPointer = memory + size;\n  for (; memory != endPointer; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_with_080048cc",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_08005400",
                "FUN_08005374",
                "FUN_0800532c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_function_data_080048dc",
            "code": "\nvoid updateFunctionData_080048dc(undefined4 *dataArray,int dataSize,undefined4 param3,undefined4 param4)\n\n{\n  int *ptr1;\n  int **extraPtr;\n  int **ptr2;\n  int **ptr3;\n  int **ptr4;\n  int **ptr5;\n  bool flag;\n  \n  if (dataSize == 0) {\n    return;\n  }\n  ptr5 = (int **)(dataSize + -4);\n  if (*(int *)(dataSize + -4) < 0) {\n    ptr5 = (int **)((int)ptr5 + *(int *)(dataSize + -4));\n  }\n  FUNC_0800557c();\n  ptr3 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    ptr5[1] = (int *)0x0;\n    ptr2 = extraPtr;\n    DAT_200005c8 = ptr5;\n  }\n  else {\n    ptr3 = DAT_200005c8;\n    if (ptr5 < DAT_200005c8) {\n      ptr2 = (int **)*ptr5;\n      ptr3 = (int **)((int)ptr5 + (int)ptr2);\n      flag = DAT_200005c8 == ptr3;\n      if (flag) {\n        ptr3 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      ptr5[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = ptr5;\n      if (flag) {\n        ptr3 = (int **)((int)ptr3 + (int)ptr2);\n        *ptr5 = (int *)ptr3;\n      }\n    }\n    else {\n      do {\n        ptr4 = ptr3;\n        ptr3 = (int **)ptr4[1];\n        if (ptr3 == (int **)0x0) break;\n      } while (ptr3 <= ptr5);\n      ptr2 = (int **)*ptr4;\n      if ((int **)((int)ptr4 + (int)ptr2) == ptr5) {\n        ptr2 = (int **)((int)ptr2 + (int)*ptr5);\n        *ptr4 = (int *)ptr2;\n        if (ptr3 == (int **)((int)ptr4 + (int)ptr2)) {\n          ptr1 = *ptr3;\n          ptr3 = (int **)ptr3[1];\n          ptr4[1] = (int *)ptr3;\n          ptr2 = (int **)((int)ptr2 + (int)ptr1);\n          *ptr4 = (int *)ptr2;\n        }\n      }\n      else if (ptr5 < (int **)((int)ptr4 + (int)ptr2)) {\n        *dataArray = 0xc;\n      }\n      else {\n        ptr2 = (int **)((int)ptr5 + (int)*ptr5);\n        flag = ptr3 == ptr2;\n        if (flag) {\n          ptr2 = (int **)*ptr3;\n          ptr3 = (int **)ptr3[1];\n        }\n        ptr5[1] = (int *)ptr3;\n        if (flag) {\n          ptr2 = (int **)((int)ptr2 + (int)*ptr5);\n          *ptr5 = (int *)ptr2;\n        }\n        ptr4[1] = (int *)ptr5;\n      }\n    }\n  }\n  FUNC_0800557e(dataArray,ptr2,ptr3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_function_data_080048dc",
                "param_1": "dataArray",
                "param_2": "dataSize",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "ptr1",
                "extraout_r1": "extraPtr",
                "ppiVar2": "ptr2",
                "ppiVar3": "ptr3",
                "ppiVar4": "ptr4",
                "ppiVar5": "ptr5",
                "bVar6": "flag"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_block_08004978",
            "code": "\nuint allocate_memory_block_08004978(undefined4 *output_buffer,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint block_difference;\n  uint *new_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    new_block = DAT_200005c8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_difference = *previous_block - allocated_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *previous_block = block_difference;\n          *(uint *)((int)previous_block + block_difference) = allocated_size;\n          new_block = (uint *)((int)previous_block + block_difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = FUN_0800500c(output_buffer);\n    }\n    current_block = (uint *)FUN_0800500c(output_buffer,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_space = FUN_0800500c(output_buffer,(int)new_block - (int)current_block), remaining_space != -1)))) {\n      *new_block = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(output_buffer);\n      allocated_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(new_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_0800557e(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "output_buffer",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "block_difference",
                "puVar5": "new_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e",
                "FUN_0800500c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint processInput_08004a34(int input,byte byteValue,byte **data)\n\n{\n  int tmpVar1;\n  byte *tmpVar2;\n  byte *tmpVar3;\n  uint returnValue;\n  \n  tmpVar2 = data[2] + -1;\n  data[2] = tmpVar2;\n  if ((-1 < (int)tmpVar2) ||\n     (((int)data[6] <= (int)tmpVar2 && (tmpVar2 = (byte *)(uint)byteValue, tmpVar2 != (byte *)0xa))))\n  {\n    tmpVar2 = *data;\n    *data = tmpVar2 + 1;\n    *tmpVar2 = byteValue;\n    return (uint)byteValue;\n  }\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (data == (byte **)&DAT_08005fc0) {\n    data = *(byte ***)(input + 4);\n  }\n  else if (data == (byte **)&DAT_08005fe0) {\n    data = *(byte ***)(input + 8);\n  }\n  else if (data == (byte **)&DAT_08005fa0) {\n    data = *(byte ***)(input + 0xc);\n  }\n  data[2] = data[6];\n  tmpVar3 = (byte *)(uint)*(ushort *)(data + 3);\n  tmpVar1 = (int)tmpVar3 << 0x1c;\n  if (((tmpVar1 < 0) && (tmpVar3 = data[4], tmpVar3 != (byte *)0x0)) ||\n     (tmpVar1 = FUN_080050d0(input,data,tmpVar1,tmpVar3,tmpVar2), tmpVar1 == 0)) {\n    tmpVar1 = (int)*data - (int)data[4];\n    returnValue = (uint)byteValue;\n    if ((tmpVar1 < (int)data[5]) || (tmpVar1 = FUN_080052cc(input,data), tmpVar1 == 0)) {\n      data[2] = data[2] + -1;\n      tmpVar2 = *data;\n      *data = tmpVar2 + 1;\n      *tmpVar2 = byteValue;\n      if ((byte *)(tmpVar1 + 1) != data[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1f)) {\n          return returnValue;\n        }\n        if (returnValue != 10) {\n          return returnValue;\n        }\n      }\n      tmpVar1 = FUN_080052cc(input,data);\n      if (tmpVar1 == 0) {\n        return returnValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input",
                "param_2": "byteValue",
                "param_3": "data",
                "iVar1": "tmpVar1",
                "pbVar2": "tmpVar2",
                "pbVar3": "tmpVar3",
                "uVar4": "returnValue"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080052cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_data_08004a60",
            "code": "\nint process_data_08004a60(undefined4 input_param,undefined4 output_param,undefined *data_ptr,int data_length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = data_ptr + data_length;\n  current_index = data_length;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    result = FUN_08004a34(input_param,*data_ptr,output_param,data_length,current_index);\n    data_length = result + 1;\n    data_ptr = data_ptr + 1;\n  } while (data_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_data_08004a60",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "data_ptr",
                "param_4": "data_length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "parse_input_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint parseInput_08004a84(int inputPtr,undefined4 *paramPtr,byte *strPtr,int *outputPtr)\n\n{\n  int result;\n  int *counterPtr;\n  bool isNumeric;\n  byte *currentChar;\n  byte *nextChar;\n  int unaff_r9;\n  int tempVar;\n  int *counterPtr;\n  uint flags;\n  int precision;\n  undefined4 local_80;\n  int fieldWidth;\n  int totalChars;\n  byte conversionSpecifier;\n  undefined local_6f;\n  undefined local_6e;\n  undefined widthFlag;\n  undefined4 local_30;\n  \n  counterPtr = outputPtr;\n  if ((inputPtr != 0) && (*(int *)(inputPtr + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (paramPtr == &DAT_08005fc0) {\n    paramPtr = *(undefined4 **)(inputPtr + 4);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_08005fe0) {\n    paramPtr = *(undefined4 **)(inputPtr + 8);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_08005fa0) {\n    paramPtr = *(undefined4 **)(inputPtr + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x1c)) || (paramPtr[4] == 0)) &&\n     (tempVar = FUN_080050d0(inputPtr,paramPtr), tempVar != 0)) {\n    return -1;\n  }\n  totalChars = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  currentChar = strPtr;\nLAB_08004ac6:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  tempVar = (int)nextChar - (int)strPtr;\n  if (tempVar != 0) {\n    result = FUN_08004a60(inputPtr,paramPtr,strPtr,tempVar);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(paramPtr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalChars;\n    }\n    totalChars = totalChars + tempVar;\n  }\n  if (*nextChar == 0) goto LAB_08004c70;\n  flags = 0;\n  fieldWidth = 0;\n  precision = -1;\n  local_80 = 0;\n  widthFlag = 0;\n  local_30 = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    tempVar = FUN_08000230(\"#-0+ \",*currentChar);\n    strPtr = currentChar + 1;\n    if (tempVar == 0) break;\n    flags = 1 << (tempVar + 0xf7ffa094U & 0xff) | flags;\n    currentChar = strPtr;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    widthFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    widthFlag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    counterPtr = counterPtr + 1;\n    tempVar = *counterPtr;\n    counterPtr = counterPtr;\n    if (tempVar < 0) {\n      fieldWidth = -tempVar;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    isNumeric = false;\n    tempVar = fieldWidth;\n    strPtr = currentChar;\n    while( true ) {\n      if (9 < *strPtr - 0x30) break;\n      tempVar = tempVar * 10 + (*strPtr - 0x30);\n      isNumeric = true;\n      strPtr = strPtr + 1;\n    }\n    if (!isNumeric) goto LAB_08004bae;\n  }\n  fieldWidth = tempVar;\nLAB_08004bae:\n  if (*strPtr == 0x2e) {\n    if (strPtr[1] == 0x2a) {\n      precision = *counterPtr;\n      if (precision < 0) {\n        precision = -1;\n      }\n      strPtr = strPtr + 2;\n      counterPtr = counterPtr + 1;\n    }\n    else {\n      isNumeric = false;\n      precision = 0;\n      tempVar = 0;\n      while( true ) {\n        strPtr = strPtr + 1;\n        if (9 < *strPtr - 0x30) break;\n        tempVar = tempVar * 10 + (*strPtr - 0x30);\n        isNumeric = true;\n      }\n      if (isNumeric) {\n        precision = tempVar;\n      }\n    }\n  }\n  tempVar = FUN_08000230(&DAT_08005f72,*strPtr,3);\n  if (tempVar != 0) {\n    flags = flags | 0x40 << (tempVar + 0xf7ffa08eU & 0xff);\n    strPtr = strPtr + 1;\n  }\n  conversionSpecifier = *strPtr;\n  strPtr = strPtr + 1;\n  tempVar = FUN_08000230(\"efgEFG\",conversionSpecifier,6);\n  if (tempVar == 0) {\n    unaff_r9 = FUN_08004d9c(inputPtr,&flags,paramPtr,0x8004a61,&counterPtr);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    counterPtr = (int *)(((int)counterPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalChars = totalChars + unaff_r9;\n  currentChar = strPtr;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "parse_input_08004a84",
                "param_1": "inputPtr",
                "param_2": "paramPtr",
                "param_3": "strPtr",
                "param_4": "outputPtr",
                "iVar1": "result",
                "piVar2": "counterPtr",
                "bVar3": "isNumeric",
                "pbVar4": "currentChar",
                "pbVar5": "nextChar",
                "iVar6": "tempVar",
                "local_8c": "counterPtr",
                "local_88": "flags",
                "local_84": "precision",
                "local_7c": "fieldWidth",
                "local_74": "totalChars",
                "local_70": "conversionSpecifier",
                "local_45": "widthFlag"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230",
                "FUN_080053a0",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocessData_08004cb0(undefined4 input,uint *data,uint *result,undefined4 param,code *callback)\n\n{\n  int index;\n  int returnValue;\n  uint maxSize;\n  uint count;\n  bool condition;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *result = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *result = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *result); index = index + 1) {\n      returnValue = (*callback)(input,param,(int)data + 0x19,1);\n      if (returnValue == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n    maxSize = maxSize + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,maxSize);\n  if (index != -1) {\n    maxSize = data[3];\n    condition = (*data & 6) == 4;\n    if (condition) {\n      maxSize = maxSize - *result;\n    }\n    if (condition) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    count = 0;\n    while( true ) {\n      if (maxSize == count) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      count = count + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "returnValue",
                "uVar3": "maxSize",
                "uVar4": "count",
                "bVar5": "condition"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "decode_and_process_data_08004d9c",
            "code": "\nuint decode_and_process_data_08004d9c(undefined4 input,uint *data,undefined4 length,code *callback,uint **counter)\n\n{\n  byte byteValue;\n  int index;\n  uint *ptr;\n  int result;\n  char *hexChars;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value1;\n  uint value2;\n  char *ptr2;\n  char *ptr3;\n  uint outputSize [2];\n  \n  byteValue = *(byte *)(data + 6);\n  ptr3 = (char *)((int)data + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_08004f56;\n          if (byteValue != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hexChars = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          base = *data;\n          ptr = *counter;\n          *counter = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value1 = (uint)*(ushort *)ptr;\n          }\n          else {\n            value1 = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value1 == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_08004dcc;\n          value1 = *data;\n          ptr = *counter;\n          if ((value1 & 0x80) == 0) {\n            *counter = ptr + 1;\n            if ((value1 & 0x40) == 0) goto LAB_08004dec;\n            value1 = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *counter = ptr + 1;\nLAB_08004dec:\n            value1 = *ptr;\n          }\n          if ((int)value1 < 0) {\n            value1 = -value1;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hexChars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        value2 = data[1];\n        data[2] = value2;\n        ptr2 = ptr3;\n        if ((int)value2 < 0) {\n          if (value1 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)data + 0x42) = *hexChars;\n          ptr2 = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value1 == 0) {\n            if (value2 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              value2 = value1 / base;\n              ptr2 = ptr2 + -1;\n              *ptr2 = hexChars[value1 - base * value2];\n              value1 = value2;\n            } while (value2 != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          ptr2[-1] = '0';\n          ptr2 = ptr2 + -1;\n        }\n        data[4] = (int)ptr3 - (int)ptr2;\n        ptr3 = ptr2;\n        goto LAB_08004ec2;\n      }\n      ptr = *counter;\n      *counter = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      ptr3 = (char *)((int)data + 0x42);\n      value1 = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_08004e52:\n            value1 = *data;\n            ptr = *counter;\n            if ((value1 & 0x80) == 0) {\n              *counter = ptr + 1;\n              if ((value1 & 0x40) == 0) goto LAB_08004e60;\n              value1 = (uint)*(ushort *)ptr;\n            }\n            else {\n              *counter = ptr + 1;\nLAB_08004e60:\n              value1 = *ptr;\n            }\n            hexChars = \"0123456789ABCDEF\";\n            if (byteValue == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byteValue == 0x70) {\n            *data = *data | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)data + 0x45) = 0x78;\n            hexChars = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_08004e52;\n          if (byteValue == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)data + 0x42) = byteValue;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*counter;\n      *counter = (uint *)(ppcVar8 + 1);\n      ptr3 = *ppcVar8;\n      index = FUN_08000230(ptr3,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)ptr3;\n      }\n      value1 = data[1];\n    }\n    data[4] = value1;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  value1 = *data;\n  ppuVar7 = (uint **)*counter;\n  base = data[5];\n  if ((value1 & 0x80) == 0) {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value1 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_08004f42:\n    *ptr = base;\n  }\nLAB_08004f56:\n  data[4] = 0;\nLAB_08004ec2:\n  index = FUN_08004cb0(input,data,outputSize,length,callback);\n  if ((index == -1) || (index = (*callback)(input,length,ptr3,data[4]), index == -1)) {\nLAB_08004ed6:\n    value1 = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - outputSize[0]); index = index + 1) {\n        result = (*callback)(input,length,(int)data + 0x19,1);\n        if (result == -1) goto LAB_08004ed6;\n      }\n    }\n    value1 = data[3];\n    if ((int)data[3] < (int)outputSize[0]) {\n      value1 = outputSize[0];\n    }\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "decode_and_process_data_08004d9c",
                "param_1": "input",
                "param_2": "data",
                "param_3": "length",
                "param_4": "callback",
                "param_5": "counter",
                "bVar1": "byteValue",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "hexChars",
                "uVar6": "base",
                "uVar9": "value1",
                "uVar10": "value2",
                "pcVar11": "ptr2",
                "pcVar12": "ptr3",
                "local_24": "outputSize"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "initialize_function_08004fdc",
            "code": "\nvoid initializeFunction_08004fdc(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int data;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  \n  data = DAT_200000a0;\n  var1 = input1;\n  var2 = input2;\n  var3 = input3;\n  var4 = input4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  FUN_08004a84(data,*(undefined4 *)(data + 8),input1,&var2,var1,&var2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "initialize_function_08004fdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "data",
                "uVar2": "var1",
                "uStack_c": "var2",
                "uStack_8": "var3",
                "uStack_4": "var4"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08004a84",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "check_and_update_value_0800500c",
            "code": "\nvoid checkAndUpdateValue_0800500c(int *outputPtr,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_08004094(inputValue);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *outputPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "check_and_update_value_0800500c",
                "param_1": "outputPtr",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "validate_and_process_data_080050d0",
            "code": "\nuint validate_and_process_data_080050d0(undefined4 *output_result,undefined4 *input_data)\n\n{\n  int data_address;\n  uint result_value;\n  ushort input_data_value;\n  \n  data_address = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  if (input_data == &DAT_08005fc0) {\n    input_data = *(undefined4 **)(data_address + 4);\n  }\n  else if (input_data == (undefined4 *)&DAT_08005fe0) {\n    input_data = *(undefined4 **)(data_address + 8);\n  }\n  else if (input_data == (undefined4 *)&DAT_08005fa0) {\n    input_data = *(undefined4 **)(data_address + 0xc);\n  }\n  input_data_value = *(ushort *)(input_data + 3);\n  result_value = (uint)input_data_value;\n  if (-1 < (int)(result_value << 0x1c)) {\n    if (-1 < (int)(result_value << 0x1b)) {\n      *output_result = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result_value << 0x1d) < 0) {\n      if ((undefined4 *)param_2_d_value != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2_d_value != input_data + 0x11) {\n          FUN_080048dc(output_result);\n        }\n        param_2_d_value = 0;\n      }\n      *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xffdb;\n      param_2_1_value = 0;\n      *input_data = param_2_4_value;\n    }\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 8;\n  }\n  if ((param_2_4_value == 0) && ((*(ushort *)(input_data + 3) & 0x280) != 0x200)) {\n    FUN_080054fc(output_result,input_data);\n  }\n  input_data_value = *(ushort *)(input_data + 3);\n  result_value = input_data_value & 1;\n  if ((input_data_value & 1) == 0) {\n    if (-1 < (int)((uint)input_data_value << 0x1e)) {\n      result_value = param_2_5_value;\n    }\n    param_2_2_value = result_value;\n  }\n  else {\n    param_2_2_value = 0;\n    param_2_6_value = -param_2_5_value;\n  }\n  if (param_2_4_value == 0) {\n    input_data_value = *(ushort *)(input_data + 3);\n    result_value = (int)(short)input_data_value & 0x80;\n    if (result_value != 0) {\nLAB_08005100:\n      *(ushort *)(input_data + 3) = input_data_value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result_value = 0;\n  }\n  return result_value;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "validate_and_process_data_080050d0",
                "param_1": "output_result",
                "param_2": "input_data",
                "iVar1": "data_address",
                "uVar2": "result_value",
                "uVar3": "input_data_value",
                "param_2[0xd]": "param_2_d_value",
                "param_2[1]": "param_2_1_value",
                "param_2[4]": "param_2_4_value",
                "param_2[5]": "param_2_5_value",
                "param_2[2]": "param_2_2_value",
                "param_2[6]": "param_2_6_value"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080054fc",
                "FUN_080048dc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_data_080051ac",
            "code": "\nvoid processData_080051ac(void)\n\n{\n  uint *dataPointer;\n  int totalValue;\n  int *parameters;\n  int *additionalParameters;\n  uint tempValue;\n  ushort flag;\n  int flagValue;\n  code *callbackFunction;\n  int loopCounter;\n  uint initialValue;\n  code *jumpTable;\n  bool isFlagSet;\n  undefined8 result;\n  \n  FUN_080055d0(6);\n  jumpTable = (code *)0x80051bb;\n  result = FUN_080040f8(1);\n  parameters = (int *)((ulonglong)result >> 0x20);\n  dataPointer = (uint *)result;\n  flag = *(ushort *)(parameters + 3);\n  tempValue = (uint)flag;\n  if ((int)(tempValue << 0x1c) < 0) {\n    totalValue = parameters[4];\n    if (totalValue != 0) {\n      flagValue = tempValue << 0x1e;\n      isFlagSet = flagValue == 0;\n      loopCounter = *parameters;\n      if (isFlagSet) {\n        flagValue = parameters[5];\n      }\n      *parameters = totalValue;\n      if (!isFlagSet) {\n        flagValue = 0;\n      }\n      parameters[2] = flagValue;\n      for (loopCounter = loopCounter - totalValue; 0 < loopCounter; loopCounter = loopCounter - flagValue) {\n        flagValue = (*(code *)parameters[10])(dataPointer,parameters[8],totalValue,loopCounter);\n        if (flagValue < 1) {\n          flag = *(ushort *)(parameters + 3);\n          goto LAB_080052b2;\n        }\n        totalValue = totalValue + flagValue;\n      }\n    }\n  }\n  else if (((0 < parameters[1]) || (0 < parameters[0x10])) &&\n          (callbackFunction = (code *)parameters[0xb], callbackFunction != (code *)0x0)) {\n    initialValue = *dataPointer;\n    *dataPointer = 0;\n    if ((flag & 0x1000) == 0) {\n      totalValue = (*callbackFunction)(dataPointer,parameters[8],tempValue & 0x1000,1);\n      if ((totalValue == -1) && (tempValue = *dataPointer, tempValue != 0)) {\n        if ((tempValue != 0x1d) && (tempValue != 0x16)) {\n          *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *dataPointer = initialValue;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      totalValue = parameters[0x15];\n    }\n    if (((int)((uint)*(ushort *)(parameters + 3) << 0x1d) < 0) &&\n       (totalValue = totalValue - parameters[1], parameters[0xd] != 0)) {\n      totalValue = totalValue - parameters[0x10];\n    }\n    totalValue = (*(code *)parameters[0xb])(dataPointer,parameters[8],totalValue,0);\n    flag = *(ushort *)(parameters + 3);\n    if ((totalValue == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(parameters + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    parameters[1] = 0;\n    *parameters = parameters[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((totalValue != -1 || (*dataPointer == 0)))) {\n      parameters[0x15] = totalValue;\n    }\n    additionalParameters = (int *)parameters[0xd];\n    *dataPointer = initialValue;\n    if (additionalParameters != (int *)0x0) {\n      if (additionalParameters != parameters + 0x11) {\n        FUN_080048dc(dataPointer);\n      }\n      parameters[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "dataPointer",
                "iVar2": "totalValue",
                "piVar3": "parameters",
                "piVar4": "additionalParameters",
                "uVar5": "tempValue",
                "uVar6": "flag",
                "iVar7": "flagValue",
                "pcVar8": "callbackFunction",
                "iVar9": "loopCounter",
                "uVar10": "initialValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isFlagSet",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *dataArr,int *infoArr)\n\n{\n  undefined4 result;\n  int tempVar1;\n  int *tempArrPtr;\n  uint tempVar2;\n  ushort tempVar3;\n  int tempVar4;\n  undefined4 unaffVar1;\n  undefined4 unaffVar2;\n  code *funcPtr;\n  int tempVar5;\n  uint tempVar6;\n  code *jumpTable;\n  bool bVar10;\n  \n  if (infoArr[4] != 0) {\n    if ((dataArr != (uint *)0x0) && (dataArr[6] == 0)) {\n      FUN_080053a0();\n    }\n    if (infoArr == &DAT_08005fc0) {\n      infoArr = (int *)dataArr[1];\n    }\n    else if (infoArr == (int *)&DAT_08005fe0) {\n      infoArr = (int *)dataArr[2];\n    }\n    else if (infoArr == (int *)&DAT_08005fa0) {\n      infoArr = (int *)dataArr[3];\n    }\n    if (*(short *)(infoArr + 3) != 0) {\n      tempVar3 = *(ushort *)(infoArr + 3);\n      tempVar2 = (uint)tempVar3;\n      if ((int)(tempVar2 << 0x1c) < 0) {\n        tempVar1 = infoArr[4];\n        if (tempVar1 != 0) {\n          tempVar4 = tempVar2 << 0x1e;\n          bVar10 = tempVar4 == 0;\n          tempVar5 = *infoArr;\n          if (bVar10) {\n            tempVar4 = infoArr[5];\n          }\n          *infoArr = tempVar1;\n          if (!bVar10) {\n            tempVar4 = 0;\n          }\n          infoArr[2] = tempVar4;\n          for (tempVar5 = tempVar5 - tempVar1; 0 < tempVar5; tempVar5 = tempVar5 - tempVar4) {\n            tempVar4 = (*(code *)infoArr[10])(dataArr,infoArr[8],tempVar1,tempVar5,unaffVar1,unaffVar2);\n            if (tempVar4 < 1) {\n              tempVar3 = *(ushort *)(infoArr + 3);\n              goto LAB_080052b2;\n            }\n            tempVar1 = tempVar1 + tempVar4;\n          }\n        }\n      }\n      else if (((0 < infoArr[1]) || (0 < infoArr[0x10])) &&\n              (funcPtr = (code *)infoArr[0xb], funcPtr != (code *)0x0)) {\n        tempVar6 = *dataArr;\n        *dataArr = 0;\n        if ((tempVar3 & 0x1000) == 0) {\n          tempVar1 = (*funcPtr)(dataArr,infoArr[8],tempVar2 & 0x1000,1);\n          if ((tempVar1 == -1) && (tempVar2 = *dataArr, tempVar2 != 0)) {\n            if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n              *(ushort *)(infoArr + 3) = *(ushort *)(infoArr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jumpTable)();\n              return result;\n            }\n            *dataArr = tempVar6;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          tempVar1 = infoArr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoArr + 3) << 0x1d) < 0) &&\n           (tempVar1 = tempVar1 - infoArr[1], infoArr[0xd] != 0)) {\n          tempVar1 = tempVar1 - infoArr[0x10];\n        }\n        tempVar1 = (*(code *)infoArr[0xb])(dataArr,infoArr[8],tempVar1,0);\n        tempVar3 = *(ushort *)(infoArr + 3);\n        if ((tempVar1 == -1) &&\n           ((0x1d < *dataArr || (-1 < (int)((0x20400001U >> (*dataArr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(infoArr + 3) = tempVar3 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jumpTable)(0xffffffff);\n          return result;\n        }\n        infoArr[1] = 0;\n        *infoArr = infoArr[4];\n        if (((int)((uint)tempVar3 << 0x13) < 0) && ((tempVar1 != -1 || (*dataArr == 0)))) {\n          infoArr[0x15] = tempVar1;\n        }\n        tempArrPtr = (int *)infoArr[0xd];\n        *dataArr = tempVar6;\n        if (tempArrPtr != (int *)0x0) {\n          if (tempArrPtr != infoArr + 0x11) {\n            FUN_080048dc(dataArr);\n          }\n          infoArr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jumpTable)();\n          return result;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jumpTable)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "dataArr",
                "param_2": "infoArr",
                "uVar1": "result",
                "iVar2": "tempVar1",
                "piVar3": "tempArrPtr",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "iVar6": "tempVar4",
                "unaff_r4": "unaffVar1",
                "unaff_r5": "unaffVar2",
                "pcVar7": "funcPtr",
                "iVar8": "tempVar5",
                "uVar9": "tempVar6",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_structures_0800532c",
            "code": "\nvoid initializeDataStructures_0800532c(undefined4 *outputArray,undefined2 value1,undefined2 value2)\n\n{\n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  *(undefined2 *)(outputArray + 3) = value1;\n  outputArray[0x19] = 0;\n  *(undefined2 *)((int)outputArray + 0xe) = value2;\n  outputArray[4] = 0;\n  outputArray[5] = 0;\n  outputArray[6] = 0;\n  FUN_080048cc(outputArray + 0x17,0,8);\n  outputArray[9] = 0x8005609;\n  outputArray[10] = 0x800562b;\n  outputArray[0xb] = 0x8005663;\n  outputArray[8] = outputArray;\n  outputArray[0xc] = &LAB_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_structures_0800532c",
                "param_1": "outputArray",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "initialize_array_08005374",
            "code": "\nundefined4 * initializeArray_08005374(undefined4 arrayPointer,int arraySize)\n\n{\n  undefined4 *resultPointer;\n  int offset;\n  \n  offset = (arraySize + -1) * 0x68;\n  resultPointer = (undefined4 *)FUN_08004978(arrayPointer,offset + 0x74);\n  if (resultPointer != (undefined4 *)0x0) {\n    *resultPointer = 0;\n    resultPointer[1] = arraySize;\n    resultPointer[2] = resultPointer + 3;\n    FUN_080048cc(resultPointer + 3,0,offset + 0x68);\n  }\n  return resultPointer;\n}\n\n",
            "renaming": {
                "FUN_08005374": "initialize_array_08005374",
                "param_1": "arrayPointer",
                "param_2": "arraySize",
                "puVar1": "resultPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_080053a0",
            "code": "\nvoid initializeData_080053a0(undefined4 *dataArray)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (dataArray[6] == 0) {\n    dataArray[0x12] = 0;\n    dataArray[0x13] = 0;\n    dataArray[0x14] = 0;\n    pointer = &DAT_200000a4;\n    dataArray[10] = &LAB_08005320_1;\n    if (dataArray == &DAT_200000a4) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (dataArray == &DAT_200000a4) {\n      dataArray[6] = pointer;\n    }\n    result = FUN_08005400();\n    dataArray[1] = result;\n    result = FUN_08005400(dataArray);\n    dataArray[2] = result;\n    result = FUN_08005400(dataArray);\n    dataArray[3] = result;\n    FUN_0800532c(dataArray[1],4,0);\n    FUN_0800532c(dataArray[2],9,1);\n    FUN_0800532c(dataArray[3],0x12,2);\n    dataArray[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "dataArray",
                "uVar1": "result",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_structures_08005400",
            "code": "\nint * initializeDataStructures_08005400(undefined4 *output,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentValue;\n  int *currentArray;\n  int **arrayList;\n  \n  if (DAT_200000bc == 0) {\n    FUN_080053a0(&DAT_200000a4);\n  }\n  arrayList = (int **)&DAT_200000ec;\n  do {\n    currentArray = arrayList[2];\n    currentValue = arrayList[1];\n    while (currentValue = (int *)((int)currentValue + -1), -1 < (int)currentValue) {\n      if (*(short *)(currentArray + 3) == 0) {\n        *(undefined2 *)((int)currentArray + 0xe) = 0xffff;\n        *(undefined2 *)(currentArray + 3) = 1;\n        currentArray[0x19] = 0;\n        *currentArray = 0;\n        currentArray[2] = 0;\n        currentArray[1] = 0;\n        currentArray[4] = 0;\n        currentArray[5] = 0;\n        currentArray[6] = 0;\n        FUN_080048cc(currentArray + 0x17,0,8,1,param4);\n        currentArray[0xd] = 0;\n        currentArray[0xe] = 0;\n        currentArray[0x12] = 0;\n        currentArray[0x13] = 0;\n        return currentArray;\n      }\n      currentArray = currentArray + 0x1a;\n    }\n    if (*arrayList == (int *)0x0) {\n      currentValue = (int *)FUN_08005374(output,4);\n      *arrayList = currentValue;\n      if (currentValue == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    arrayList = (int **)*arrayList;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_structures_08005400",
                "param_1": "output",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentValue",
                "piVar2": "currentArray",
                "ppiVar3": "arrayList"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08005374",
                "FUN_080048cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "get_access_permissions_080054b4",
            "code": "\nundefined4 getAccessPermissions_080054b4(undefined4 input_param,int input_size,undefined4 *output_param,uint *access_data)\n\n{\n  int result;\n  undefined4 access_level;\n  undefined partial_access [4];\n  uint access_flags;\n  \n  if ((*(short *)(input_size + 0xe) < 0) ||\n     (result = FUN_080056d4(input_param,(int)*(short *)(input_size + 0xe),partial_access), result < 0)) {\n    *access_data = 0;\n    if ((int)((uint)*(ushort *)(input_size + 0xc) << 0x18) < 0) {\n      access_level = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *access_data = (uint)((access_flags & 0xf000) == 0x2000);\n  }\n  access_level = 0x400;\nLAB_080054f4:\n  *output_param = access_level;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "get_access_permissions_080054b4",
                "param_1": "input_param",
                "param_2": "input_size",
                "param_3": "output_param",
                "param_4": "access_data",
                "iVar1": "result",
                "uVar2": "access_level",
                "auStack_4c": "partial_access",
                "local_48": "access_flags"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "process_parameter_080054fc",
            "code": "\nvoid processParameter_080054fc(int input,int *output)\n\n{\n  ushort result;\n  int status;\n  int paramValue;\n  int *paramPtr;\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x1e)) {\n    paramValue = input;\n    paramPtr = output;\n    result = FUN_080054b4(input,output,&paramValue,&paramPtr);\n    status = FUN_08004978(input,paramValue);\n    if (status != 0) {\n      *(undefined **)(input + 0x28) = &LAB_08005320_1;\n      *output = status;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[5] = paramValue;\n      output[4] = status;\n      if ((paramPtr != (int *)0x0) &&\n         (status = FUN_080056f8(input,(int)*(short *)((int)output + 0xe)), status != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = result | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "process_parameter_080054fc",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "paramValue",
                "local_14": "paramPtr"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080054b4",
                "FUN_080056f8",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "process_input_080055d0",
            "code": "\nint process_input_080055d0(uint input_value)\n\n{\n  int *data_ptr;\n  undefined4 result;\n  int index;\n  code *function_ptr;\n  undefined4 value_4;\n  undefined4 value_5;\n  undefined4 value_lr;\n  undefined4 *data_ptr_ptr;\n  \n  data_ptr = DAT_200000a0;\n  data_ptr_ptr = &DAT_200000a0;\n  if (0x1f < input_value) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  index = DAT_200000a0[0x11];\n  if ((index != 0) && (function_ptr = *(code **)(index + input_value * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + input_value * 4) = 0;\n      (*function_ptr)(input_value);\n    }\n    return 0;\n  }\n  result = thunk_FUN_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  index = FUN_080040fc(result,input_value,input_value,0,data_ptr_ptr,value_4,value_5,value_lr);\n  if ((index == -1) && (DAT_20000674 != 0)) {\n    *data_ptr = DAT_20000674;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "input_value",
                "piVar1": "data_ptr",
                "uVar2": "result",
                "iVar3": "index",
                "pcVar4": "function_ptr",
                "unaff_r4": "value_4",
                "unaff_r5": "value_5",
                "in_lr": "value_lr",
                "puVar5": "data_ptr_ptr"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "FUN_080040fc",
                "thunk_FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "initialize_thunk_0800410c",
            "code": "\nstatus initialize_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "initialize_thunk_0800410c",
                "undefined4": "status"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_value_08005608",
            "code": "\nvoid updateValue_08005608(undefined4 value1,int value2)\n\n{\n  int result1;\n  uint result2;\n  bool isPositive;\n  \n  result1 = FUN_0800573c(value1,(int)*(short *)(value2 + 0xe));\n  isPositive = -1 < result1;\n  if (isPositive) {\n    result2 = *(int *)(value2 + 0x54) + result1;\n  }\n  else {\n    result2 = *(ushort *)(value2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(value2 + 0x54) = result2;\n  }\n  if (!isPositive) {\n    *(short *)(value2 + 0xc) = (short)result2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_value_08005608",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "result1",
                "uVar2": "result2",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "execute_operation_0800562a",
            "code": "\nvoid executeOperation_0800562a(int *result,int inputData,undefined4 paramA,undefined4 paramB)\n\n{\n  int iVar1;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  \n  if ((int)((uint)*(ushort *)(inputData + 0xc) << 0x17) < 0) {\n    FUN_08005718(result,(int)*(short *)(inputData + 0xe),0,2);\n  }\n  *(ushort *)(inputData + 0xc) = *(ushort *)(inputData + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  iVar1 = FUN_080040ec((int)*(short *)(inputData + 0xe),paramA,paramB,paramB,paramB,tempVar1,\n                       tempVar2,tempVar3);\n  if ((iVar1 == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "execute_operation_0800562a",
                "param_1": "result",
                "param_2": "inputData",
                "param_3": "paramA",
                "param_4": "paramB",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "in_lr": "tempVar3"
            },
            "calling": [],
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "update_flag_08005662",
            "code": "\nvoid updateFlag_08005662(undefined4 input,int data)\n\n{\n  int result;\n  ushort flag;\n  bool isSuccess;\n  \n  result = FUN_08005718(input,(int)*(short *)(data + 0xe));\n  isSuccess = result == -1;\n  if (isSuccess) {\n    flag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    flag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isSuccess) {\n    *(ushort *)(data + 0xc) = flag;\n  }\n  if (!isSuccess) {\n    *(ushort *)(data + 0xc) = flag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "update_flag_08005662",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "flag",
                "bVar3": "isSuccess"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "extract_and_assign_value_080056d4",
            "code": "\nvoid extractAndAssignValue_080056d4(int *result,undefined4 inputParam_1,undefined4 inputParam_2,undefined4 inputParam_3)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = FUN_080040d6(inputParam_1,inputParam_2,inputParam_2,0,inputParam_3);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "extract_and_assign_value_080056d4",
                "param_1": "result",
                "param_2": "inputParam_1",
                "param_3": "inputParam_2",
                "param_4": "inputParam_3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "validate_and_assign_value_080056f8",
            "code": "\nvoid validate_and_assign_value_080056f8(int *output_pointer,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e0(input_value);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output_pointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "validate_and_assign_value_080056f8",
                "param_1": "output_pointer",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "update_and_check_value_08005718",
            "code": "\nvoid updateAndCheckValue_08005718(int *resultPtr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = FUN_080040e4(arg1,arg2,arg3,arg3,arg3);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *resultPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "update_and_check_value_08005718",
                "param_1": "resultPtr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "check_and_update_value_0800573c",
            "code": "\nvoid checkAndUpdateValue_0800573c(int *resultPointer,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = FUN_080040e8(paramA,paramB,paramC,paramC,paramC);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *resultPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "check_and_update_value_0800573c",
                "param_1": "resultPointer",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initializeData_08005760(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = initializeData_08005760;\n  FUN_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 124317,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_080002d0",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_08000600",
            "FUN_0800066c",
            "FUN_08000682",
            "FUN_08000690",
            "FUN_080006b4",
            "FUN_08000728",
            "FUN_0800076c",
            "FUN_080007f0",
            "FUN_080008cc",
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000b54",
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08000c8c",
            "FUN_08000d8e",
            "FUN_08000d98",
            "FUN_08000de4",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f56",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011a4",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_08001ab0",
            "FUN_08001bfc",
            "FUN_08001d00",
            "FUN_08001e68",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080023b4",
            "FUN_08002488",
            "FUN_080025e0",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_08002848",
            "FUN_08002864",
            "FUN_080028d4",
            "FUN_080028f0",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_080029c8",
            "FUN_08002d0c",
            "FUN_08002d72",
            "FUN_08002dd0",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08002ffc",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_080033c8",
            "FUN_080033d8",
            "FUN_0800340c",
            "FUN_08003414",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034ce",
            "FUN_080034da",
            "FUN_080034f4",
            "FUN_08003506",
            "FUN_0800351e",
            "FUN_0800352e",
            "FUN_0800354a",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_0800377c",
            "FUN_0800387c",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003978",
            "FUN_08003cc8",
            "FUN_08003d18",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_08003eac",
            "FUN_08003f00",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040ec",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004110",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_08004240",
            "FUN_080042ac",
            "FUN_080042e8",
            "FUN_08004364",
            "FUN_08004388",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_0800447c",
            "FUN_080044d8",
            "FUN_08004544",
            "FUN_08004560",
            "FUN_08004640",
            "FUN_08004648",
            "FUN_08004658",
            "FUN_08004678",
            "FUN_080046b4",
            "FUN_080047c0",
            "FUN_080047d0",
            "FUN_080047fe",
            "FUN_08004808",
            "FUN_08004844",
            "FUN_08004860",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004978",
            "FUN_08004a34",
            "FUN_08004a60",
            "FUN_08004a84",
            "FUN_08004cb0",
            "FUN_08004d9c",
            "FUN_08004fdc",
            "FUN_0800500c",
            "FUN_080050d0",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800532c",
            "FUN_08005374",
            "FUN_080053a0",
            "FUN_08005400",
            "FUN_080054b4",
            "FUN_080054fc",
            "FUN_080055d0",
            "thunk_FUN_0800410c",
            "FUN_08005608",
            "FUN_0800562a",
            "FUN_08005662",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c",
            "FUN_08005760"
        ]
    ],
    "locked_functions": []
}