{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_parameters_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_parameters_08000134(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_parameters_08000134",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "perform_arithmetic_operation_08000158",
            "code": "\nulonglong performArithmeticOperation_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool temp13;\n  bool temp14;\n  bool temp15;\n  \n  temp6 = input4 ^ 0x80000000;\n  temp9 = input2 << 1;\n  input4 = input4 << 1;\n  temp13 = ((input2 ^ temp6) & 0x7fffffff) == 0;\n  temp14 = temp13 && input1 == input3;\n  if (!temp13 || input1 != input3) {\n    temp14 = (temp9 | input1) == 0;\n  }\n  if (!temp14) {\n    temp14 = (input4 | input3) == 0;\n  }\n  temp8 = (int)temp9 >> 0x15;\n  if (!temp14) {\n    temp14 = temp8 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!temp14) {\n    temp14 = temp1 == -1;\n  }\n  if (temp14) {\n    if (temp8 == -1 || temp1 == -1) {\n      temp9 = temp6;\n      temp11 = input3;\n      if (temp8 == -1) {\n        temp9 = input2;\n        temp11 = input1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        input3 = temp11;\n        temp6 = temp9;\n      }\n      temp14 = (temp11 | temp9 << 0xc) == 0;\n      if (temp14) {\n        temp14 = (input3 | temp6 << 0xc) == 0;\n      }\n      if (temp14) {\n        temp14 = temp9 == temp6;\n      }\n      if (!temp14) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp11);\n    }\n    if (((input2 ^ temp6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp9 | input1) == 0) {\n        input1 = input3;\n        input2 = temp6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp6) {\n      return 0;\n    }\n    if (temp9 >> 0x15 == 0) {\n      temp14 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)temp14;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)temp14)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp9 = temp9 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp11 = input4 - temp9;\n  temp14 = temp11 != 0;\n  if (input4 < temp9) {\n    temp11 = -temp11;\n  }\n  temp10 = input1;\n  temp7 = input2;\n  if (temp14 && temp9 <= input4) {\n    temp9 = temp9 + temp11;\n    temp10 = input3;\n    temp7 = temp6;\n    input3 = input1;\n    temp6 = input2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp7,temp10);\n  }\n  temp4 = temp7 & 0xfffff | 0x100000;\n  if ((temp7 & 0x80000000) != 0) {\n    temp14 = temp10 != 0;\n    temp10 = -temp10;\n    temp4 = -temp4 - (uint)temp14;\n  }\n  temp7 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    temp14 = input3 != 0;\n    input3 = -input3;\n    temp7 = -temp7 - (uint)temp14;\n  }\n  if (temp9 == temp11) {\n    temp7 = temp7 ^ 0x100000;\n    if (temp9 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp9 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp6 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = input3 << (temp6 & 0xff);\n    input3 = input3 >> (temp11 & 0xff);\n    temp3 = temp10 + input3;\n    temp5 = temp7 << (temp6 & 0xff);\n    temp6 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(temp10,input3) + ((int)temp7 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    temp12 = temp7 << (-temp11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp7 = (int)temp7 >> (temp11 - 0x20 & 0xff);\n    temp6 = temp10 + temp7;\n    temp4 = temp4 + ((int)temp7 >> 0x1f) + (uint)CARRY4(temp10,temp7);\n  }\n  input2 = temp4 & 0x80000000;\n  temp11 = temp4;\n  if ((int)temp4 < 0) {\n    temp14 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp6;\n    temp6 = -(uint)!temp14 - temp6;\n    temp11 = -(uint)(temp14 <= temp11) - temp4;\n  }\n  if (0xfffff < temp11) {\n    temp10 = temp9 - 1;\n    if (0x1fffff < temp11) {\n      temp10 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      temp2 = (byte)temp6;\n      temp6 = (uint)(temp10 != 0) << 0x1f | temp6 >> 1;\n      temp12 = (uint)(temp2 & 1) << 0x1f | temp12 >> 1;\n      temp10 = temp9;\n      if (0xffbfffff < temp9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    temp14 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      temp14 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(temp11 + temp10 * 0x100000 + (uint)CARRY4(temp6,(uint)temp14) | input2,\n                    temp6 + temp14);\n  }\n  temp13 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  temp10 = temp6 * 2;\n  temp14 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)temp13;\n  temp11 = temp11 * 2 + (uint)(temp14 || CARRY4(temp10,(uint)temp13));\n  temp10 = temp9 - 2;\n  if ((temp11 & 0x100000) != 0) goto LAB_08000268;\n  temp7 = temp6;\n  temp9 = temp11;\n  if (temp11 == 0) {\n    temp7 = 0;\n    temp9 = temp6;\n  }\n  temp8 = LZCOUNT(temp9);\n  if (temp11 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  temp11 = temp8 - 0xb;\n  temp15 = SBORROW4(temp11,0x20);\n  temp6 = temp8 - 0x2b;\n  temp14 = (int)temp6 < 0;\n  temp13 = temp6 == 0;\n  if ((int)temp11 < 0x20) {\n    temp15 = SCARRY4(temp6,0xc);\n    temp8 = temp8 + -0x1f;\n    temp14 = temp8 < 0;\n    temp13 = temp8 == 0;\n    temp6 = temp11;\n    if (!temp13 && temp14 == temp15) {\n      temp7 = temp9 << (temp11 & 0xff);\n      temp9 = temp9 >> (0xcU - temp8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (temp13 || temp14 != temp15) {\n    temp12 = 0x20 - temp6;\n  }\n  temp9 = temp9 << (temp6 & 0xff);\n  if (temp13 || temp14 != temp15) {\n    temp9 = temp9 | temp7 >> (temp12 & 0xff);\n  }\n  if (temp13 || temp14 != temp15) {\n    temp7 = temp7 << (temp6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp11 <= (int)temp10) {\n    return CONCAT44(temp9 + (temp10 - temp11) * 0x100000 | input2,temp7);\n  }\n  temp6 = ~(temp10 - temp11);\n  if ((int)temp6 < 0x1f) {\n    temp8 = temp6 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp6 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp7 >> (0x20 - (0xcU - temp8) & 0xff) | temp9 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp6 = temp6 + 1;\n    return CONCAT44(input2 | temp9 >> (temp6 & 0xff),\n                    temp7 >> (temp6 & 0xff) | temp9 << (0x20 - temp6 & 0xff));\n  }\n  return CONCAT44(temp4,temp9 >> (temp6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "perform_arithmetic_operation_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "temp13",
                "bVar14": "temp14",
                "bVar15": "temp15"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_sum_0800015c",
            "code": "\nulonglong calculateSum_0800015c(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shiftedNum2;\n  uint shiftedNum4;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  shiftedNum2 = num2 << 1;\n  temp4 = num4 << 1;\n  condition1 = ((num2 ^ num4) & 0x7fffffff) == 0;\n  condition2 = condition1 && num1 == num3;\n  if (!condition1 || num1 != num3) {\n    condition2 = (shiftedNum2 | num1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (temp4 | num3) == 0;\n  }\n  shift2 = (int)shiftedNum2 >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)temp4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp4 = num4;\n      shiftedNum2 = num3;\n      if (shift2 == -1) {\n        temp4 = num2;\n        shiftedNum2 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = shiftedNum2;\n        num4 = temp4;\n      }\n      condition2 = (shiftedNum2 | temp4 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (num3 | num4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp4 == num4;\n      }\n      if (!condition2) {\n        temp4 = temp4 | 0x80000;\n      }\n      return CONCAT44(temp4,shiftedNum2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shiftedNum2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shiftedNum2 >> 0x15 == 0) {\n      condition2 = (num1 & 0x80000000) != 0;\n      temp4 = num2 * 2 + (uint)condition2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,num1 << 1);\n    }\n    if (shiftedNum2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shiftedNum2 = shiftedNum2 >> 0x15;\n  temp4 = temp4 >> 0x15;\n  temp5 = temp4 - shiftedNum2;\n  condition2 = temp5 != 0;\n  if (temp4 < shiftedNum2) {\n    temp5 = -temp5;\n  }\n  shiftedNum4 = num1;\n  temp3 = num2;\n  if (condition2 && shiftedNum2 <= temp4) {\n    shiftedNum2 = shiftedNum2 + temp5;\n    shiftedNum4 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < temp5) {\n    return CONCAT44(temp3,shiftedNum4);\n  }\n  temp4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    condition2 = shiftedNum4 != 0;\n    shiftedNum4 = -shiftedNum4;\n    temp4 = -temp4 - (uint)condition2;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    condition2 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)condition2;\n  }\n  if (shiftedNum2 == temp5) {\n    temp3 = temp3 ^ 0x100000;\n    if (shiftedNum2 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      shiftedNum2 = 1;\n    }\n    else {\n      temp5 = temp5 - 1;\n    }\n  }\n  temp7 = -temp5 + 0x20;\n  if ((int)temp5 < 0x21) {\n    temp6 = num3 << (temp7 & 0xff);\n    num3 = num3 >> (temp5 & 0xff);\n    temp1 = shiftedNum4 + num3;\n    temp2 = temp3 << (temp7 & 0xff);\n    temp7 = temp1 + temp2;\n    temp4 = temp4 + CARRY4(shiftedNum4,num3) + ((int)temp3 >> (temp5 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp6 = temp3 << (-temp5 + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    temp3 = (int)temp3 >> (temp5 - 0x20 & 0xff);\n    temp7 = shiftedNum4 + temp3;\n    temp4 = temp4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shiftedNum4,temp3);\n  }\n  num2 = temp4 & 0x80000000;\n  temp5 = temp4;\n  if ((int)temp4 < 0) {\n    condition2 = temp6 == 0;\n    temp6 = -temp6;\n    temp5 = -temp7;\n    temp7 = -(uint)!condition2 - temp7;\n    temp5 = -(uint)(condition2 <= temp5) - temp4;\n  }\n  if (0xfffff < temp5) {\n    shiftedNum4 = shiftedNum2 - 1;\n    if (0x1fffff < temp5) {\n      temp4 = temp5 & 1;\n      temp5 = temp5 >> 1;\n      carry = (byte)temp7;\n      temp7 = (uint)(temp4 != 0) << 0x1f | temp7 >> 1;\n      temp6 = (uint)(carry & 1) << 0x1f | temp6 >> 1;\n      shiftedNum4 = shiftedNum2;\n      if (0xffbfffff < shiftedNum2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition2 = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      condition2 = (temp7 & 1) != 0;\n    }\n    return CONCAT44(temp5 + shiftedNum4 * 0x100000 + (uint)CARRY4(temp7,(uint)condition2) | num2,\n                    temp7 + condition2);\n  }\n  condition1 = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  shiftedNum4 = temp7 * 2;\n  condition2 = CARRY4(temp7,temp7);\n  temp7 = temp7 * 2 + (uint)condition1;\n  temp5 = temp5 * 2 + (uint)(condition2 || CARRY4(shiftedNum4,(uint)condition1));\n  shiftedNum4 = shiftedNum2 - 2;\n  if ((temp5 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp7;\n  shiftedNum2 = temp5;\n  if (temp5 == 0) {\n    temp3 = 0;\n    shiftedNum2 = temp7;\n  }\n  shift2 = LZCOUNT(shiftedNum2);\n  if (temp5 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp7 = shift2 - 0xb;\n  condition3 = SBORROW4(temp7,0x20);\n  temp5 = shift2 - 0x2b;\n  condition2 = (int)temp5 < 0;\n  condition1 = temp5 == 0;\n  if ((int)temp7 < 0x20) {\n    condition3 = SCARRY4(temp5,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    condition1 = shift2 == 0;\n    temp5 = temp7;\n    if (!condition1 && condition2 == condition3) {\n      temp3 = shiftedNum2 << (temp7 & 0xff);\n      shiftedNum2 = shiftedNum2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp6 = 0x20 - temp5;\n  }\n  shiftedNum2 = shiftedNum2 << (temp5 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    shiftedNum2 = shiftedNum2 | temp3 >> (temp6 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp3 = temp3 << (temp5 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp7 <= (int)shiftedNum4) {\n    return CONCAT44(shiftedNum2 + (shiftedNum4 - temp7) * 0x100000 | num2,temp3);\n  }\n  temp5 = ~(shiftedNum4 - temp7);\n  if ((int)temp5 < 0x1f) {\n    shift2 = temp5 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp5 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shiftedNum2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp5 = temp5 + 1;\n    return CONCAT44(num2 | shiftedNum2 >> (temp5 & 0xff),\n                    temp3 >> (temp5 & 0xff) | shiftedNum2 << (0x20 - temp5 & 0xff));\n  }\n  return CONCAT44(temp4,shiftedNum2 >> (temp5 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_sum_0800015c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shiftedNum2",
                "uVar8": "shiftedNum4",
                "uVar9": "temp4",
                "uVar10": "temp5",
                "uVar11": "temp6",
                "uVar12": "temp7",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "bit_shift_080003d4",
            "code": "\nulonglong bit_shift_080003d4(uint input_num)\n\n{\n  uint upper_bit_shift_080003d4ed;\n  uint lower_bit_shift_080003d4ed;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_num == 0) {\n    return 0;\n  }\n  upper_bit_shift_080003d4ed = 0;\n  leading_zeros = LZCOUNT(input_num);\n  shift_amount = leading_zeros + 0x15;\n  carry_flag = SBORROW4(shift_amount,0x20);\n  lower_bit_shift_080003d4ed = leading_zeros - 0xb;\n  is_negative = (int)lower_bit_shift_080003d4ed < 0;\n  is_zero = lower_bit_shift_080003d4ed == 0;\n  if (shift_amount < 0x20) {\n    carry_flag = SCARRY4(lower_bit_shift_080003d4ed,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    lower_bit_shift_080003d4ed = shift_amount;\n    if (!is_zero && carry_flag == false) {\n      upper_bit_shift_080003d4ed = input_num << shift_amount;\n      input_num = input_num >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - lower_bit_shift_080003d4ed;\n  }\n  input_num = input_num << (lower_bit_shift_080003d4ed & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    input_num = input_num | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    upper_bit_shift_080003d4ed = 0 << (lower_bit_shift_080003d4ed & 0xff);\n  }\nLAB_080002e0:\n  if (shift_amount < 0x433) {\n    return CONCAT44(input_num + (0x432 - shift_amount) * 0x100000,upper_bit_shift_080003d4ed);\n  }\n  lower_bit_shift_080003d4ed = ~(0x432 - shift_amount);\n  if (0x1e < (int)lower_bit_shift_080003d4ed) {\n    return (ulonglong)(input_num >> (lower_bit_shift_080003d4ed - 0x1f & 0xff));\n  }\n  leading_zeros = lower_bit_shift_080003d4ed - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(lower_bit_shift_080003d4ed - 0x1f,0xc)) {\n    lower_bit_shift_080003d4ed = lower_bit_shift_080003d4ed + 1;\n    return CONCAT44(input_num >> (lower_bit_shift_080003d4ed & 0xff),\n                    upper_bit_shift_080003d4ed >> (lower_bit_shift_080003d4ed & 0xff) | input_num << (0x20 - lower_bit_shift_080003d4ed & 0xff));\n  }\n  return (ulonglong)(upper_bit_shift_080003d4ed >> (0x20 - (0xcU - leading_zeros) & 0xff) | input_num << (0xcU - leading_zeros & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "bit_shift_080003d4",
                "param_1": "input_num",
                "uVar1": "upper_bit_shifted",
                "uVar2": "lower_bit_shifted",
                "iVar3": "leading_zeros",
                "uVar4": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "carry_flag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "calculate_shifted_value_080003f4",
            "code": "\nulonglong calculate_shifted_value_080003f4(uint input_value)\n\n{\n  uint temp_1;\n  uint absolute_value;\n  uint shift_count;\n  int lz_count;\n  uint adjusted_shift;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  absolute_value = input_value;\n  if ((int)sign_bit < 0) {\n    absolute_value = -input_value;\n  }\n  temp_1 = 0;\n  lz_count = LZCOUNT(absolute_value);\n  adjusted_shift = lz_count + 0x15;\n  is_overflow = SBORROW4(adjusted_shift,0x20);\n  shift_count = lz_count - 0xb;\n  is_negative = (int)shift_count < 0;\n  is_zero = shift_count == 0;\n  if (adjusted_shift < 0x20) {\n    is_overflow = SCARRY4(shift_count,0xc);\n    is_negative = false;\n    is_zero = lz_count + 1 == 0;\n    shift_count = adjusted_shift;\n    if (!is_zero && is_overflow == false) {\n      temp_1 = absolute_value << adjusted_shift;\n      absolute_value = absolute_value >> (0xcU - (lz_count + 1) & 0xff);\n      goto shift_result;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_count;\n  }\n  absolute_value = absolute_value << (shift_count & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    absolute_value = absolute_value | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    temp_1 = 0 << (shift_count & 0xff);\n  }\nshift_result:\n  if (adjusted_shift < 0x433) {\n    return CONCAT44(absolute_value + (0x432 - adjusted_shift) * 0x100000 | sign_bit,temp_1);\n  }\n  shift_count = ~(0x432 - adjusted_shift);\n  if (0x1e < (int)shift_count) {\n    return CONCAT44(input_value,absolute_value >> (shift_count - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  lz_count = shift_count - 0x13;\n  if (lz_count == 0 || lz_count < 0 != SCARRY4(shift_count - 0x1f,0xc)) {\n    shift_count = shift_count + 1;\n    return CONCAT44(sign_bit | absolute_value >> (shift_count & 0xff),\n                    temp_1 >> (shift_count & 0xff) | absolute_value << (0x20 - shift_count & 0xff));\n  }\n  return CONCAT44(input_value,temp_1 >> (0x20 - (0xcU - lz_count) & 0xff) | absolute_value << (0xcU - lz_count & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "input_value",
                "uVar1": "temp_1",
                "uVar2": "absolute_value",
                "uVar3": "shift_count",
                "iVar4": "lz_count",
                "uVar5": "adjusted_shift",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_overflow",
                "LAB_080002e0": "shift_result"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "convert_uint_to_ulong_long_08000418",
            "code": "\nulonglong convertUintToUlongLong_08000418(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint signBit;\n  uint shiftedInput;\n  uint result;\n  uint shift;\n  uint inputShifted;\n  int lzCount;\n  uint shiftedLzCount;\n  uint constant;\n  bool isNegativeShift;\n  bool isZero;\n  bool overflow;\n  \n  inputShifted = input << 1;\n  isZero = inputShifted == 0;\n  signBit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shift = (uint)((int)inputShifted >> 3) >> 1;\n  result = signBit | shift;\n  input = input << 0x1d;\n  if (!isZero) {\n    param4 = inputShifted & 0xff000000;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((inputShifted & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  shiftedInput = input;\n  inputShifted = shift;\n  if (shift == 0) {\n    shiftedInput = 0;\n    inputShifted = input;\n  }\n  lzCount = LZCOUNT(inputShifted);\n  if (shift == 0) {\n    lzCount = lzCount + 0x20;\n  }\n  shiftedLzCount = lzCount - 0xb;\n  overflow = SBORROW4(shiftedLzCount,0x20);\n  shift = lzCount - 0x2b;\n  isZero = (int)shift < 0;\n  isNegativeShift = shift == 0;\n  if ((int)shiftedLzCount < 0x20) {\n    overflow = SCARRY4(shift,0xc);\n    lzCount = lzCount + -0x1f;\n    isZero = lzCount < 0;\n    isNegativeShift = lzCount == 0;\n    shift = shiftedLzCount;\n    if (!isNegativeShift && isZero == overflow) {\n      shiftedInput = inputShifted << (shiftedLzCount & 0xff);\n      inputShifted = inputShifted >> (0xcU - lzCount & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isNegativeShift || isZero != overflow) {\n    constant = 0x20 - shift;\n  }\n  inputShifted = inputShifted << (shift & 0xff);\n  if (isNegativeShift || isZero != overflow) {\n    inputShifted = inputShifted | shiftedInput >> (constant & 0xff);\n  }\n  if (isNegativeShift || isZero != overflow) {\n    shiftedInput = shiftedInput << (shift & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shiftedLzCount < 0x381) {\n    return CONCAT44(inputShifted + (0x380 - shiftedLzCount) * 0x100000 | signBit,shiftedInput);\n  }\n  shift = ~(0x380 - shiftedLzCount);\n  if (0x1e < (int)shift) {\n    return CONCAT44(result,inputShifted >> (shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  lzCount = shift - 0x13;\n  if (lzCount == 0 || lzCount < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(signBit | inputShifted >> (shift & 0xff),\n                    shiftedInput >> (shift & 0xff) | inputShifted << (0x20 - shift & 0xff));\n  }\n  return CONCAT44(result,shiftedInput >> (0x20 - (0xcU - lzCount) & 0xff) | inputShifted << (0xcU - lzCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "convert_uint_to_ulong_long_08000418",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "signBit",
                "uVar2": "shiftedInput",
                "uVar3": "result",
                "uVar4": "shift",
                "uVar5": "inputShifted",
                "iVar6": "lzCount",
                "uVar7": "shiftedLzCount",
                "in_r12": "constant",
                "bVar8": "isNegativeShift",
                "bVar9": "isZero",
                "bVar10": "overflow"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_result_080004c8",
            "code": "\nulonglong calculate_result_080004c8(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  ulonglong result_1;\n  longlong result_2;\n  uint temp_1;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong temp_8;\n  \n  temp_8 = CONCAT44(input_2,input_1);\n  temp_6 = 0x7ff;\n  temp_2 = input_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_2 == 0;\n  if (!flag_1) {\n    temp_5 = input_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_5 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_2 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_5 == 0x7ff;\n  }\n  if (flag_1) {\n    temp_8 = calculate_result_080004c8_080006a4();\n  }\n  temp_1 = (uint)(temp_8 >> 0x20);\n  temp_3 = temp_2 + temp_5;\n  temp_2 = temp_1 ^ input_4;\n  temp_1 = temp_1 & ~(temp_6 << 0x15);\n  input_4 = input_4 & ~(temp_6 << 0x15);\n  flag_1 = ((uint)temp_8 | temp_1 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (input_3 | input_4 << 0xc) == 0;\n  }\n  temp_1 = temp_1 | 0x100000;\n  input_4 = input_4 | 0x100000;\n  if (flag_1) {\n    input_3 = (uint)temp_8 | input_3;\n    input_4 = (temp_2 & 0x80000000 | temp_1) ^ input_4;\n    temp_2 = temp_6 >> 1;\n    flag_3 = SBORROW4(temp_3,temp_2);\n    temp_4 = temp_3 - temp_2;\n    flag_1 = temp_4 == 0;\n    temp_1 = temp_4;\n    if (!flag_1 && (int)temp_2 <= temp_3) {\n      flag_3 = SBORROW4(temp_6,temp_4);\n      temp_1 = temp_6 - temp_4;\n      flag_1 = temp_6 == temp_4;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      input_4 = input_4 | temp_4 * 0x100000;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      return CONCAT44(input_4,input_3);\n    }\n    input_4 = input_4 | 0x100000;\n    temp_6 = 0;\n    flag_3 = SBORROW4(temp_4,1);\n    temp_4 = temp_4 - 1;\n    flag_1 = temp_4 == 0;\n    temp_2 = temp_4;\n  }\n  else {\n    result_1 = (temp_8 & 0xffffffff) * (ulonglong)input_3;\n    temp_8 = (temp_8 & 0xffffffff) * (ulonglong)input_4 +\n             (ulonglong)temp_1 * (ulonglong)input_3 + (result_1 >> 0x20);\n    temp_7 = (uint)temp_8;\n    result_2 = (ulonglong)temp_1 * (ulonglong)input_4 + (temp_8 >> 0x20);\n    temp_6 = (uint)result_2;\n    temp_1 = (uint)((ulonglong)result_2 >> 0x20);\n    if ((int)result_1 != 0) {\n      temp_7 = temp_7 | 1;\n    }\n    temp_4 = (temp_3 + -0x3ff) - (uint)(temp_1 < 0x200);\n    if (temp_1 < 0x200) {\n      flag_1 = (temp_7 & 0x80000000) != 0;\n      temp_7 = temp_7 << 1;\n      result_2 = CONCAT44(temp_1 * 2 + (uint)(CARRY4(temp_6,temp_6) || CARRY4(temp_6 * 2,(uint)flag_1)),\n                       temp_6 * 2 + (uint)flag_1);\n    }\n    input_4 = temp_2 & 0x80000000 | (int)((ulonglong)result_2 >> 0x20) << 0xb | (uint)result_2 >> 0x15;\n    input_3 = (uint)result_2 << 0xb | temp_7 >> 0x15;\n    temp_6 = temp_7 * 0x800;\n    flag_2 = 0xfc < temp_4;\n    flag_3 = SBORROW4(temp_4,0xfd);\n    temp_1 = temp_4 - 0xfd;\n    flag_1 = temp_1 == 0;\n    temp_2 = temp_1;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < temp_1;\n      flag_3 = SBORROW4(temp_1,0x700);\n      temp_2 = temp_4 - 0x7fd;\n      flag_1 = temp_1 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < temp_6;\n      if (temp_6 == 0x80000000) {\n        flag_1 = (temp_7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_4 + temp_4 * 0x100000 + (uint)CARRY4(input_3,(uint)flag_1),input_3 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)temp_2 < 0 == flag_3) {\n    return (ulonglong)(input_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(temp_4,0x36);\n  flag_1 = (int)(temp_4 + 0x36) < 0;\n  flag_3 = temp_4 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    input_3 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    input_4 = input_4 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(input_4,input_3);\n  }\n  temp_2 = -temp_4;\n  temp_1 = temp_2 - 0x20;\n  if (0x1f < (int)temp_2) {\n    temp_4 = input_3 >> (temp_1 & 0xff) | input_4 << (0x20 - temp_1 & 0xff);\n    temp_2 = (input_4 >> (temp_1 & 0xff) & ~((input_4 & 0x80000000) >> (temp_1 & 0xff))) -\n            ((int)temp_4 >> 0x1f);\n    if ((temp_6 | input_3 << (0x20 - temp_1 & 0xff) | temp_4 << 1) == 0) {\n      temp_2 = temp_2 & ~(temp_4 >> 0x1f);\n    }\n    return CONCAT44(input_4,temp_2) & 0x80000000ffffffff;\n  }\n  temp_3 = temp_2 - 0x14;\n  if (temp_3 == 0 || temp_3 < 0 != SCARRY4(temp_1,0xc)) {\n    temp_7 = input_3 << (temp_4 + 0x20 & 0xff);\n    temp_1 = input_3 >> (temp_2 & 0xff) | input_4 << (temp_4 + 0x20 & 0xff);\n    temp_4 = temp_1 + -((int)temp_7 >> 0x1f);\n    if ((temp_6 | temp_7 << 1) == 0) {\n      temp_4 = temp_4 & ~(temp_7 >> 0x1f);\n    }\n    return CONCAT44((input_4 & 0x80000000) +\n                    ((input_4 & 0x7fffffff) >> (temp_2 & 0xff)) +\n                    (uint)CARRY4(temp_1,-((int)temp_7 >> 0x1f)),temp_4);\n  }\n  temp_2 = 0xc - temp_3;\n  temp_4 = input_3 << (temp_2 & 0xff);\n  temp_2 = input_3 >> (0x20 - temp_2 & 0xff) | input_4 << (temp_2 & 0xff);\n  temp_1 = temp_2 + -((int)temp_4 >> 0x1f);\n  if ((temp_6 | temp_4 << 1) == 0) {\n    temp_1 = temp_1 & ~(temp_4 >> 0x1f);\n  }\n  return CONCAT44((input_4 & 0x80000000) + (uint)CARRY4(temp_2,-((int)temp_4 >> 0x1f)),temp_1);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "lVar2": "result_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "iVar5": "temp_3",
                "uVar6": "temp_4",
                "unaff_r5": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_7",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "temp_8"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_result_080006a4",
            "code": "\nulonglong calculate_result_080006a4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_improved_floating_point_0800071c",
            "code": "\nulonglong calculateImprovedFloatingPoint_0800071c(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(value2,value1);\n  temp14 = 0x7ff;\n  temp7 = value2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = value4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_floating_point_value_0800088a();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((value3 | value4 << 0xc) == 0) {\n    temp7 = (temp9 ^ value4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (value4 << 0xc) >> 4 | 0x10000000 | value3 >> 0x18;\n    temp14 = value3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ value4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((value3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_improved_floating_point_0800071c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_floating_point_value_0800088a",
            "code": "\nulonglong calculateFloatingPointValue_0800088a(uint exponentBits1,uint mantissaBits1,uint exponentBits2,uint mantissaBits2)\n\n{\n  uint firstExponentBit;\n  uint exponentBits1Copy;\n  uint shiftedCopy;\n  uint mantissaBits1Copy;\n  uint exponentBits1Original;\n  bool isZeroFlag;\n  \n  shiftedCopy = exponentBits1Original & mantissaBits2 >> 0x14;\n  mantissaBits1Copy = mantissaBits1;\n  if (exponentBits1Copy != exponentBits1Original || shiftedCopy != exponentBits1Original) {\n    if (exponentBits1Copy == exponentBits1Original) {\n      if (((exponentBits1 | mantissaBits1 << 0xc) == 0) && (exponentBits1 = exponentBits2, mantissaBits1Copy = mantissaBits2, shiftedCopy != exponentBits1Original)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((mantissaBits1 ^ mantissaBits2) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (shiftedCopy == exponentBits1Original) {\n      exponentBits1 = exponentBits2;\n      mantissaBits1Copy = mantissaBits2;\n      if ((exponentBits2 | mantissaBits2 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((mantissaBits1 ^ mantissaBits2) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZeroFlag = (exponentBits1 | mantissaBits1 << 1) == 0;\n      if (!isZeroFlag) {\n        isZeroFlag = (exponentBits2 | mantissaBits2 << 1) == 0;\n      }\n      if (!isZeroFlag) {\n        if (exponentBits1Copy == 0) {\n          mantissaBits1Copy = mantissaBits1 & 0x80000000;\n          do {\n            firstExponentBit = exponentBits1 & 0x80000000;\n            exponentBits1 = exponentBits1 << 1;\n            mantissaBits1 = mantissaBits1 * 2 + (uint)(firstExponentBit != 0);\n          } while ((mantissaBits1 & 0x100000) == 0);\n          mantissaBits1 = mantissaBits1 | mantissaBits1Copy;\n          if (shiftedCopy != 0) {\n            return CONCAT44(mantissaBits1,exponentBits1);\n          }\n        }\n        do {\n          mantissaBits1Copy = exponentBits2 & 0x80000000;\n          exponentBits2 = exponentBits2 << 1;\n          mantissaBits2 = mantissaBits2 * 2 + (uint)(mantissaBits1Copy != 0);\n        } while ((mantissaBits2 & 0x100000) == 0);\n        return CONCAT44(mantissaBits1,exponentBits1);\n      }\n      if ((exponentBits1 | mantissaBits1 << 1) != 0) goto LAB_080006fc;\n      if ((exponentBits2 | mantissaBits2 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(mantissaBits1Copy,exponentBits1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_floating_point_value_0800088a",
                "param_1": "exponentBits1",
                "param_2": "mantissaBits1",
                "param_3": "exponentBits2",
                "param_4": "mantissaBits2",
                "unaff_r4": "exponentBits1Copy",
                "uVar1": "firstExponentBit",
                "uVar2": "shiftedCopy",
                "uVar3": "mantissaBits1Copy",
                "in_r12": "exponentBits1Original",
                "bVar4": "isZeroFlag"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_params_and_return_080008fc",
            "code": "\nuint check_params_and_return_080008fc(uint input_1,uint shifted_param_2,uint input_3,uint shifted_param_4)\n\n{\n  uint xor_result;\n  bool is_equal;\n  bool is_less_or_equal;\n  \n  if (((int)(shifted_param_2 << 1) >> 0x15 == -1 || (int)(shifted_param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(shifted_param_2 << 1) >> 0x15 == -1 && ((input_1 | shifted_param_2 << 0xc) != 0)) ||\n      (((int)(shifted_param_4 << 1) >> 0x15 == -1 && ((input_3 | shifted_param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_equal = (input_1 | shifted_param_2 << 1) == 0;\n  if (is_equal) {\n    is_equal = (input_3 | shifted_param_4 << 1) == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_param_2 == shifted_param_4;\n  }\n  if (is_equal) {\n    is_equal = input_1 == input_3;\n  }\n  if (!is_equal) {\n    xor_result = shifted_param_2 ^ shifted_param_4;\n    is_equal = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_equal = shifted_param_2 == shifted_param_4;\n    }\n    is_less_or_equal = -1 < (int)xor_result && shifted_param_4 <= shifted_param_2;\n    if (is_equal) {\n      is_less_or_equal = input_3 <= input_1;\n    }\n    shifted_param_4 = (int)shifted_param_4 >> 0x1f;\n    if (!is_less_or_equal) {\n      shifted_param_4 = ~shifted_param_4;\n    }\n    return shifted_param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_params_and_return_080008fc",
                "param_1": "input_1",
                "param_2": "shifted_param_2",
                "param_3": "input_3",
                "param_4": "shifted_param_4",
                "uVar1": "xor_result",
                "bVar2": "is_equal",
                "bVar3": "is_less_or_equal"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "validate_and_return_value_08000978",
            "code": "\nvoid validate_and_return_value_08000978(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  validate_and_return_08000988(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "validate_and_return_value_08000978",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "validate_and_return_08000988",
            "code": "\nundefined4 validate_and_return_08000988(undefined4 input_value)\n\n{\n  check_params_and_return_080008fc();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000988": "validate_and_return_08000988",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978",
                "FUN_08000998"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "validate_and_return_input_08000998",
            "code": "\nbool validateAndReturnInput_08000998(void)\n\n{\n  char inputChar;\n  \n  validate_and_return_08000988();\n  return inputChar != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "validate_and_return_input_08000998",
                "in_ZR": "inputChar"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "validate_input_080009ac",
            "code": "\nbool validate_input_080009ac(void)\n\n{\n  char input_character;\n  \n  validate_and_return_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "validate_input_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_carry_and_zero_080009c0",
            "code": "\nbool check_carry_and_zero_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_and_return_08000988();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_carry_and_zero_080009c0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "validate_and_return_080009d4",
            "code": "\nbool validate_and_return_080009d4(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_and_return_080009d4_value_08000978();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "validate_and_return_080009d4",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_if_input_is_empty_080009e8",
            "code": "\nbool check_if_input_is_empty_080009e8(void)\n\n{\n  char input_character;\n  \n  validate_and_return_value_08000978();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_if_input_is_empty_080009e8",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_floating_point_080009fc",
            "code": "\nuint calculateFloatingPoint_080009fc(uint input1,uint input2)\n\n{\n  uint result;\n  uint multipliedInput2;\n  uint calculation1;\n  uint calculation2;\n  bool check1;\n  bool check2;\n  \n  multipliedInput2 = input2 * 2;\n  check2 = multipliedInput2 < 0x70000000;\n  calculation1 = multipliedInput2 + 0x90000000;\n  result = calculation1;\n  if (!check2) {\n    calculation2 = multipliedInput2 + 0x8fe00000;\n    result = calculation2;\n  }\n  check1 = result == 0;\n  if (!check2 && calculation1 >= 0x200000) {\n    check1 = calculation2 == 0x1fc00000;\n  }\n  if (((check2 || calculation1 < 0x200000) || 0x1fc00000 < calculation2) || check1) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)multipliedInput2 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multipliedInput2 + 0x92e00000) < 0 != SCARRY4(calculation1,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    multipliedInput2 = 0x18 - (multipliedInput2 + 0x92e00000 >> 0x15);\n    result = input1 >> (multipliedInput2 & 0xff);\n    if (input1 << (0x20 - multipliedInput2 & 0xff) != 0) {\n      result = result | 1;\n    }\n    calculation1 = input2 & 0x1fffff | 0x100000;\n    input1 = result | calculation1 << (0x20 - multipliedInput2 & 0xff);\n    calculation1 = (calculation1 >> (multipliedInput2 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + calculation1 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_080009fc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "multipliedInput2",
                "uVar3": "calculation1",
                "in_r12": "calculation2",
                "bVar4": "check1",
                "bVar5": "check2"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "perform_calculation_08000aa4",
            "code": "\nuint performCalculation_08000aa4(uint inputValue1,uint inputValue2,undefined4 inputValue3,uint inputValue4)\n\n{\n  int shiftAmount;\n  int shiftedInput;\n  uint tempValue1;\n  uint tempValue2;\n  uint tempValue3;\n  uint tempValue4;\n  uint tempValue5;\n  bool isConditionMet;\n  \n  tempValue1 = inputValue2 ^ 0x80000000;\n  tempValue3 = inputValue1 << 1;\n  isConditionMet = tempValue3 == 0;\n  if (!isConditionMet) {\n    inputValue4 = inputValue2 << 1;\n    isConditionMet = inputValue4 == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = tempValue3 == inputValue4;\n  }\n  shiftAmount = (int)tempValue3 >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftAmount == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)inputValue4 >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftedInput = (int)(inputValue2 << 1) >> 0x18;\n    if (shiftAmount == -1 || shiftedInput == -1) {\n      tempValue3 = tempValue1;\n      if (shiftAmount == -1) {\n        tempValue3 = inputValue1;\n      }\n      if (shiftAmount != -1 || shiftedInput != -1) {\n        tempValue1 = tempValue3;\n      }\n      isConditionMet = (tempValue3 & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (tempValue1 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = tempValue3 == tempValue1;\n      }\n      if (!isConditionMet) {\n        tempValue3 = tempValue3 | 0x400000;\n      }\n      return tempValue3;\n    }\n    if (((inputValue1 ^ tempValue1) & 0x7fffffff) != 0) {\n      if (tempValue3 == 0) {\n        inputValue1 = tempValue1;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != tempValue1) {\n      return 0;\n    }\n    if ((tempValue3 & 0xff000000) == 0) {\n      tempValue1 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        tempValue1 = tempValue1 | 0x80000000;\n      }\n      return tempValue1;\n    }\n    if (tempValue3 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_08000bde:\n    return inputValue1 | 0x7f800000;\n  }\n  tempValue3 = tempValue3 >> 0x18;\n  inputValue4 = inputValue4 >> 0x18;\n  tempValue5 = inputValue4 - tempValue3;\n  isConditionMet = tempValue5 != 0;\n  tempValue4 = tempValue3;\n  if (isConditionMet && tempValue3 <= inputValue4) {\n    tempValue4 = tempValue3 + tempValue5;\n  }\n  if (isConditionMet && tempValue3 <= inputValue4) {\n    tempValue1 = tempValue1 ^ inputValue1;\n  }\n  if (isConditionMet && tempValue3 <= inputValue4) {\n    inputValue1 = inputValue1 ^ tempValue1;\n  }\n  if (isConditionMet && tempValue3 <= inputValue4) {\n    tempValue1 = tempValue1 ^ inputValue1;\n  }\n  if (inputValue4 < tempValue3) {\n    tempValue5 = -tempValue5;\n  }\n  if (0x19 < tempValue5) {\n    return inputValue1;\n  }\n  tempValue3 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    tempValue3 = -tempValue3;\n  }\n  tempValue2 = tempValue1 & 0xffffff | 0x800000;\n  if ((tempValue1 & 0x80000000) != 0) {\n    tempValue2 = -tempValue2;\n  }\n  if (tempValue4 == tempValue5) {\n    tempValue2 = tempValue2 ^ 0x800000;\n    if (tempValue4 == 0) {\n      tempValue3 = tempValue3 ^ 0x800000;\n      tempValue4 = 1;\n    }\n    else {\n      tempValue5 = tempValue5 - 1;\n    }\n  }\n  tempValue3 = tempValue3 + ((int)tempValue2 >> (tempValue5 & 0xff));\n  tempValue2 = tempValue2 << (0x20 - tempValue5 & 0xff);\n  inputValue1 = tempValue3 & 0x80000000;\n  if ((int)tempValue3 < 0) {\n    isConditionMet = tempValue2 != 0;\n    tempValue2 = -tempValue2;\n    tempValue3 = -tempValue3 - (uint)isConditionMet;\n  }\n  if (tempValue3 < 0x800000) {\n    tempValue1 = tempValue2 & 0x80000000;\n    tempValue2 = tempValue2 << 1;\n    tempValue3 = tempValue3 * 2 + (uint)(tempValue1 != 0);\n    tempValue1 = tempValue4 - 2;\n    if ((tempValue3 & 0x800000) == 0) {\n      tempValue5 = LZCOUNT(tempValue3) - 8;\n      tempValue3 = tempValue3 << (tempValue5 & 0xff);\n      if ((int)tempValue1 < (int)tempValue5) {\n        tempValue3 = tempValue3 >> (-(tempValue1 - tempValue5) & 0xff);\n      }\n      else {\n        tempValue3 = tempValue3 + (tempValue1 - tempValue5) * 0x800000;\n      }\n      return tempValue3 | inputValue1;\n    }\n  }\n  else {\n    tempValue1 = tempValue4 - 1;\n    if (0xffffff < tempValue3) {\n      tempValue1 = tempValue3 & 1;\n      tempValue3 = tempValue3 >> 1;\n      tempValue2 = (uint)(tempValue1 != 0) << 0x1f | tempValue2 >> 1;\n      tempValue1 = tempValue4;\n      if (0xfd < tempValue4) goto LAB_08000bde;\n    }\n  }\n  tempValue3 = tempValue3 + tempValue1 * 0x800000 + (uint)(0x7fffffff < tempValue2);\n  if (tempValue2 == 0x80000000) {\n    tempValue3 = tempValue3 & 0xfffffffe;\n  }\n  return tempValue3 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "perform_calculation_08000aa4",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "iVar1": "shiftAmount",
                "iVar2": "shiftedInput",
                "uVar3": "tempValue1",
                "uVar4": "tempValue2",
                "uVar5": "tempValue3",
                "uVar6": "tempValue4",
                "uVar7": "tempValue5",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_value_08000aa8",
            "code": "\nuint calculateFloatingPointValue_08000aa8(uint inputValue1,uint inputValue2,undefined4 inputParam3,uint inputParam4)\n\n{\n  int leftShiftedValue;\n  int rightShiftedValue;\n  uint result1;\n  uint result2;\n  uint tempValue1;\n  uint tempValue2;\n  bool isZero;\n  \n  result2 = inputValue1 << 1;\n  isZero = result2 == 0;\n  if (!isZero) {\n    inputParam4 = inputValue2 << 1;\n    isZero = inputParam4 == 0;\n  }\n  if (!isZero) {\n    isZero = result2 == inputParam4;\n  }\n  leftShiftedValue = (int)result2 >> 0x18;\n  if (!isZero) {\n    isZero = leftShiftedValue == -1;\n  }\n  if (!isZero) {\n    isZero = (int)inputParam4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    rightShiftedValue = (int)(inputValue2 << 1) >> 0x18;\n    if (leftShiftedValue == -1 || rightShiftedValue == -1) {\n      result2 = inputValue2;\n      if (leftShiftedValue == -1) {\n        result2 = inputValue1;\n      }\n      if (leftShiftedValue != -1 || rightShiftedValue != -1) {\n        inputValue2 = result2;\n      }\n      isZero = (result2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (inputValue2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = result2 == inputValue2;\n      }\n      if (!isZero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((inputValue1 ^ inputValue2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        inputValue1 = inputValue2;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != inputValue2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_08000bde:\n    return inputValue1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  inputParam4 = inputParam4 >> 0x18;\n  tempValue2 = inputParam4 - result2;\n  isZero = tempValue2 != 0;\n  tempValue1 = result2;\n  if (isZero && result2 <= inputParam4) {\n    tempValue1 = result2 + tempValue2;\n  }\n  if (isZero && result2 <= inputParam4) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (isZero && result2 <= inputParam4) {\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  if (isZero && result2 <= inputParam4) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (inputParam4 < result2) {\n    tempValue2 = -tempValue2;\n  }\n  if (0x19 < tempValue2) {\n    return inputValue1;\n  }\n  result2 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = inputValue2 & 0xffffff | 0x800000;\n  if ((inputValue2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (tempValue1 == tempValue2) {\n    result1 = result1 ^ 0x800000;\n    if (tempValue1 == 0) {\n      result2 = result2 ^ 0x800000;\n      tempValue1 = 1;\n    }\n    else {\n      tempValue2 = tempValue2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (tempValue2 & 0xff));\n  result1 = result1 << (0x20 - tempValue2 & 0xff);\n  inputValue1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isZero;\n  }\n  if (result2 < 0x800000) {\n    tempValue2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(tempValue2 != 0);\n    tempValue2 = tempValue1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      tempValue1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (tempValue1 & 0xff);\n      if ((int)tempValue2 < (int)tempValue1) {\n        result2 = result2 >> (-(tempValue2 - tempValue1) & 0xff);\n      }\n      else {\n        result2 = result2 + (tempValue2 - tempValue1) * 0x800000;\n      }\n      return result2 | inputValue1;\n    }\n  }\n  else {\n    tempValue2 = tempValue1 - 1;\n    if (0xffffff < result2) {\n      tempValue2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(tempValue2 != 0) << 0x1f | result1 >> 1;\n      tempValue2 = tempValue1;\n      if (0xfd < tempValue1) goto LAB_08000bde;\n    }\n  }\n  result2 = result2 + tempValue2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_value_08000aa8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "leftShiftedValue",
                "iVar2": "rightShiftedValue",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_result_08000c08",
            "code": "\nuint calculateResult_08000c08(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int baseValue;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  baseValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = baseValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = baseValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_result_08000c08",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "baseValue",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "calculate_unsigned_result_08000c10",
            "code": "\nuint calculateUnsignedResult_08000c10(uint input)\n\n{\n  uint leadingZeroCount;\n  uint shiftAmount;\n  uint signBitMask;\n  int result;\n  \n  signBitMask = input & 0x80000000;\n  if ((int)signBitMask < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeroCount = countLeadingZeros(input);\n  shiftAmount = leadingZeroCount - 8;\n  result = ((signBitMask | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeroCount) {\n    leadingZeroCount = 0 << (shiftAmount & 0xff);\n    signBitMask = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeroCount);\n    if (leadingZeroCount == 0x80000000) {\n      signBitMask = signBitMask & 0xfffffffe;\n    }\n    return signBitMask;\n  }\n  shiftAmount = input << leadingZeroCount + 0x18;\n  signBitMask = result + ((input >> (0x20 - (leadingZeroCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBitMask = signBitMask & ~(shiftAmount >> 0x1f);\n  }\n  return signBitMask;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "calculate_unsigned_result_08000c10",
                "param_1": "input",
                "uVar1": "leadingZeroCount",
                "uVar2": "shiftAmount",
                "uVar3": "signBitMask",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_float_value_08000cb8",
            "code": "\nuint calculateFloatValue_08000cb8(uint valueA,uint valueB,undefined4 valueC,uint valueD)\n\n{\n  longlong result;\n  uint floatValue;\n  uint exponentA;\n  int exponentSum;\n  int exponentDiff;\n  uint product;\n  int exponent;\n  uint resultFloat;\n  bool isZero;\n  bool isNegative;\n  \n  exponentA = valueA >> 0x17 & 0xff;\n  isZero = exponentA == 0;\n  if (!isZero) {\n    valueD = valueB >> 0x17 & 0xff;\n    isZero = valueD == 0;\n  }\n  if (!isZero) {\n    isZero = exponentA == 0xff;\n  }\n  if (!isZero) {\n    isZero = valueD == 0xff;\n  }\n  if (isZero) {\n    valueD = valueB >> 0x17 & 0xff;\n    if (exponentA == 0xff || valueD == 0xff) {\n      isZero = valueA == 0 || valueA == 0x80000000;\n      floatValue = valueB;\n      if (valueA != 0 && valueA != 0x80000000) {\n        isZero = valueB == 0;\n        floatValue = valueA;\n      }\n      if (!isZero) {\n        isZero = valueB == 0x80000000;\n      }\n      resultFloat = floatValue;\n      if (((isZero) || ((exponentA == 0xff && ((floatValue & 0x7fffff) != 0)))) ||\n         ((valueD == 0xff && (resultFloat = valueB, (valueB & 0x7fffff) != 0)))) {\n        return resultFloat | 0x7fc00000;\n      }\n      floatValue = floatValue ^ valueB;\n      goto LAB_08000e08;\n    }\n    isZero = (valueA & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (valueB & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (valueA ^ valueB) & 0x80000000;\n    }\n    isZero = exponentA == 0;\n    floatValue = valueA & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        valueA = valueA << 1;\n        isZero = (valueA & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponentA = exponentA - 1;\n    }\n    valueA = valueA | floatValue;\n    isZero = valueD == 0;\n    floatValue = valueB & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        valueB = valueB << 1;\n        isZero = (valueB & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      valueD = valueD - 1;\n    }\n    valueB = valueB | floatValue;\n  }\n  exponentSum = exponentA + valueD;\n  resultFloat = valueA ^ valueB;\n  exponentA = valueA << 9;\n  isZero = exponentA == 0;\n  if (!isZero) {\n    valueB = valueB << 9;\n    isZero = valueB == 0;\n  }\n  if (isZero) {\n    if (exponentA == 0) {\n      valueB = valueB << 9;\n    }\n    floatValue = resultFloat & 0x80000000 | valueA & 0x7fffff | valueB >> 9;\n    isNegative = SBORROW4(exponentSum,0x7f);\n    exponentDiff = exponentSum + -0x7f;\n    isZero = exponentDiff == 0;\n    exponent = exponentDiff;\n    if (!isZero && 0x7e < exponentSum) {\n      isNegative = SBORROW4(0xff,exponentDiff);\n      exponent = 0xff - exponentDiff;\n      isZero = exponentDiff == 0xff;\n    }\n    if (!isZero && exponent < 0 == isNegative) {\n      floatValue = floatValue | exponentDiff * 0x800000;\n    }\n    if (!isZero && exponent < 0 == isNegative) {\n      return floatValue;\n    }\n    floatValue = floatValue | 0x800000;\n    product = 0;\n    isNegative = SBORROW4(exponentDiff,1);\n    resultFloat = exponentSum - 0x80;\n    isZero = resultFloat == 0;\n    exponentA = resultFloat;\n  }\n  else {\n    result = (ulonglong)(exponentA >> 5 | 0x8000000) * (ulonglong)(valueB >> 5 | 0x8000000);\n    product = (uint)result;\n    floatValue = (uint)((ulonglong)result >> 0x20);\n    isZero = floatValue < 0x800000;\n    if (isZero) {\n      floatValue = floatValue << 1;\n    }\n    if (isZero) {\n      floatValue = floatValue | product >> 0x1f;\n      product = product << 1;\n    }\n    floatValue = resultFloat & 0x80000000 | floatValue;\n    resultFloat = (exponentSum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(resultFloat,0xfd);\n    isZero = resultFloat == 0xfd;\n    exponentA = resultFloat - 0xfd;\n    if (resultFloat < 0xfe) {\n      floatValue = floatValue + resultFloat * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        floatValue = floatValue & 0xfffffffe;\n      }\n      return floatValue;\n    }\n  }\n  if (isZero || (int)exponentA < 0 != isNegative) {\n    isZero = (int)(resultFloat + 0x19) < 0;\n    if (resultFloat == 0xffffffe7 || isZero != SCARRY4(resultFloat,0x19)) {\n      floatValue = floatValue & 0x80000000;\n    }\n    if (resultFloat != 0xffffffe7 && isZero == SCARRY4(resultFloat,0x19)) {\n      exponentA = (floatValue << 1) >> (-resultFloat & 0xff);\n      resultFloat = floatValue << (resultFloat + 0x20 & 0xff);\n      exponentA = ((uint)((floatValue & 0x80000000) != 0) << 0x1f | exponentA >> 1) + (uint)((byte)exponentA & 1);\n      if ((product | resultFloat << 1) == 0) {\n        exponentA = exponentA & ~(resultFloat >> 0x1f);\n      }\n      return exponentA;\n    }\n    return floatValue;\n  }\nLAB_08000e08:\n  return floatValue & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_float_value_08000cb8",
                "param_1": "valueA",
                "param_2": "valueB",
                "param_3": "valueC",
                "param_4": "valueD",
                "lVar1": "result",
                "uVar2": "floatValue",
                "uVar3": "exponentA",
                "iVar4": "exponentSum",
                "iVar5": "exponentDiff",
                "uVar6": "product",
                "iVar7": "exponent",
                "uVar8": "resultFloat",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "compute_float_08000e20",
            "code": "\nuint computeFloat_08000e20(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint rem1;\n  uint rem2;\n  int diff;\n  uint mod1;\n  int mod2;\n  uint result;\n  bool isZero;\n  bool isNegative;\n  bool carry;\n  \n  rem2 = input1 >> 0x17 & 0xff;\n  isZero = rem2 == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = rem2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (rem2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = rem2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          rem2 = rem2 - 1;\n        }\n        input1 = input1 | result;\n        isZero = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    diff = rem2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      carry = SCARRY4(diff,0x7f);\n      mod2 = diff + 0x7f;\n      isZero = mod2 < 0;\n      isNegative = mod2 == 0;\n      if (!isNegative && isZero == carry) {\n        carry = SBORROW4(0xff,mod2);\n        isZero = 0xff - mod2 < 0;\n        isNegative = mod2 == 0xff;\n      }\n      if (!isNegative && isZero == carry) {\n        input1 = input1 | mod2 * 0x800000;\n      }\n      if (!isNegative && isZero == carry) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      rem2 = 0;\n      isNegative = SBORROW4(mod2,1);\n      mod1 = diff + 0x7e;\n      isZero = mod1 == 0;\n      result = mod1;\n    }\n    else {\n      rem1 = (input2 << 9) >> 4 | 0x10000000;\n      rem2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = rem1 <= rem2;\n      if (!isZero) {\n        rem2 = rem2 << 1;\n      }\n      mod1 = diff + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (rem1 <= rem2) {\n          rem2 = rem2 - rem1;\n          input1 = input1 | result;\n        }\n        isZero = rem1 >> 1 <= rem2;\n        if (isZero) {\n          rem2 = rem2 - (rem1 >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 1;\n        }\n        isZero = rem1 >> 2 <= rem2;\n        if (isZero) {\n          rem2 = rem2 - (rem1 >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 2;\n        }\n        isZero = rem1 >> 3 <= rem2;\n        if (isZero) {\n          rem2 = rem2 - (rem1 >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 3;\n        }\n        rem2 = rem2 * 0x10;\n        isZero = rem2 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(mod1,0xfd);\n      isZero = mod1 == 0xfd;\n      result = mod1 - 0xfd;\n      if (mod1 < 0xfe) {\n        input1 = input1 + mod1 * 0x800000 + (uint)(rem1 <= rem2);\n        if (rem2 - rem1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)result < 0 != isNegative) {\n      isZero = (int)(mod1 + 0x19) < 0;\n      if (mod1 == 0xffffffe7 || isZero != SCARRY4(mod1,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (mod1 == 0xffffffe7 || isZero != SCARRY4(mod1,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-mod1 & 0xff);\n      mod1 = input1 << (mod1 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((rem2 | mod1 << 1) == 0) {\n        result = result & ~(mod1 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "compute_float_08000e20",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "rem1",
                "uVar2": "rem2",
                "iVar3": "diff",
                "uVar4": "mod1",
                "iVar5": "mod2",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "carry"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_and_compare_08000f68",
            "code": "\nuint calculate_and_compare_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_and_compare_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "concatenate_integers_08000fc8",
            "code": "\nvoid concatenateIntegers_08000fc8(undefined4 integer1,undefined4 integer2)\n\n{\n  concatenate_integers_08000fd0(integer2,integer1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "concatenate_integers_08000fc8",
                "param_1": "integer1",
                "param_2": "integer2"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_integers_08000fd0",
            "code": "\nundefined8 concatenateIntegers_08000fd0(undefined4 firstInteger,undefined4 secondInteger)\n\n{\n  calculate_and_compare_08000f68();\n  return CONCAT44(secondInteger,firstInteger);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_integers_08000fd0",
                "param_1": "firstInteger",
                "param_2": "secondInteger"
            },
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "check_if_concatenation_failed_08000ff4",
            "code": "\nbool check_if_concatenation_failed_08000ff4(void)\n\n{\n  char concatenated_result;\n  \n  concatenate_integers_08000fd0();\n  return concatenated_result == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "check_if_concatenation_failed_08000ff4",
                "in_CY": "concatenated_result"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "is_concated_integer_null_08001030",
            "code": "\nbool is_concated_integer_null_08001030(void)\n\n{\n  char concatenated_integer;\n  \n  concatenate_integers();\n  return concatenated_integer == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "is_concated_integer_null_08001030",
                "in_CY": "concatenated_integer",
                "concatenate_integers_08000fc8": "concatenate_integers"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "validate_unsigned_param_08001044",
            "code": "\nuint validateUnsignedParam_08001044(uint unsignedParam)\n\n{\n  uint result;\n  \n  if (((unsignedParam & 0x80000000) != 0) || (unsignedParam << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((unsignedParam << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (unsignedParam << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((unsignedParam & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "validate_unsigned_param_08001044",
                "param_1": "unsignedParam",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *prevDestPtr;\n  undefined4 *srcPtr;\n  uint tempLength;\n  uint remainingLength;\n  bool isRemaining;\n  \n  prevDestPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      remainingLength = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          srcPtr = prevDestPtr;\n          isRemaining = remainingLength != 0;\n          remainingLength = remainingLength - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          prevDestPtr = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemaining);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingLength = 4 - ((uint)destination & 3);\n      length = length - remainingLength;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      prevDestPtr = destPtr;\n      source = srcPtr;\n      if ((remainingLength & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        prevDestPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *prevDestPtr = *source;\n    prevDestPtr[1] = source[1];\n    prevDestPtr[2] = source[2];\n    prevDestPtr[3] = source[3];\n    prevDestPtr[4] = source[4];\n    prevDestPtr[5] = source[5];\n    prevDestPtr[6] = source[6];\n    prevDestPtr[7] = source[7];\n    prevDestPtr[8] = source[8];\n    prevDestPtr[9] = source[9];\n    prevDestPtr[10] = source[10];\n    prevDestPtr[0xb] = source[0xb];\n    prevDestPtr[0xc] = source[0xc];\n    prevDestPtr[0xd] = source[0xd];\n    prevDestPtr[0xe] = source[0xe];\n    prevDestPtr[0xf] = source[0xf];\n    prevDestPtr = prevDestPtr + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  tempLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *prevDestPtr = *source;\n      prevDestPtr[1] = source[1];\n      prevDestPtr[2] = source[2];\n      prevDestPtr[3] = source[3];\n      prevDestPtr = prevDestPtr + 4;\n      source = source + 4;\n      isRemaining = 0xf < tempLength;\n      tempLength = tempLength - 0x10;\n    } while (isRemaining);\n  }\n  remainingLength = tempLength + 0xc;\n  srcPtr = prevDestPtr;\n  destPtr = source;\n  if (0xfffffff3 < tempLength) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      isRemaining = 3 < remainingLength;\n      remainingLength = remainingLength - 4;\n      prevDestPtr = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (isRemaining);\n  }\nLAB_08001108:\n  if (remainingLength + 4 != 0) {\n    destPtr = prevDestPtr;\n    srcPtr = source;\n    if ((remainingLength & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)prevDestPtr + 1);\n      *(undefined *)prevDestPtr = *(undefined *)source;\n    }\n    if ((remainingLength + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "prevDestPtr",
                "puVar3": "srcPtr",
                "uVar4": "tempLength",
                "uVar5": "remainingLength",
                "bVar6": "isRemaining"
            },
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_input_validity_08001170",
            "code": "\nundefined4 check_input_validity_08001170(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_input_validity_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "perform_calculation_0800119c",
            "code": "\nuint performCalculation_0800119c(uint input1,uint input2)\n\n{\n  uint result;\n  int modifiedInput2;\n  uint difference;\n  \n  modifiedInput2 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < modifiedInput2) {\n      return 0;\n    }\n    result = modifiedInput2 >> 0x15;\n    difference = -result - 0x3e1;\n    if (result < 0xfffffc20 && difference != 0) {\n      result = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (difference & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "perform_calculation_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "iVar2": "modifiedInput2",
                "uVar3": "difference"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "handle_params_080011ec",
            "code": "\nundefined8 handleParams_080011ec(int input_1,int input_2,int check_1,int check_2)\n\n{\n  undefined8 uVar1;\n  \n  if ((check_2 == 0) && (check_1 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return combineInputs(input_2,input_1);\n  }\n  uVar1 = performCalculation();\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "handle_params_080011ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "check_1",
                "param_4": "check_2",
                "CONCAT44": "combineInputs",
                "calculate_result_0800121c": "performCalculation"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_result_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculateResult_0800121c(uint input_1,uint input_2,uint dividend,uint divisor,uint *result)\n\n{\n  code *jumpTable;\n  ulonglong temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  int temp_5;\n  uint quotient_1;\n  uint quotient_2;\n  uint remainder_1;\n  uint *puVar9;\n  uint quotient_3;\n  uint quotient_4;\n  uint remainder_2;\n  bool carryFlag;\n  undefined8 resultValue;\n  \n  if (divisor == 0) {\n    if (input_2 < dividend) {\n      temp_5 = leadingZerosCount(dividend);\n      quotient_2 = dividend;\n      if (temp_5 != 0) {\n        quotient_2 = dividend << temp_5;\n        input_2 = input_1 >> (0x20U - temp_5 & 0xff) | input_2 << temp_5;\n        input_1 = input_1 << temp_5;\n      }\n      quotient_4 = quotient_2 >> 0x10;\n      remainder_1 = input_2 / quotient_4;\n      quotient_3 = remainder_1 * (quotient_2 & 0xffff);\n      quotient_1 = input_1 >> 0x10 | (input_2 - quotient_4 * remainder_1) * 0x10000;\n      temp_3 = remainder_1;\n      if (quotient_1 <= quotient_3 && quotient_3 - quotient_1 != 0) {\n        carryFlag = carryCheck(quotient_2,quotient_1);\n        quotient_1 = quotient_2 + quotient_1;\n        temp_3 = remainder_1 - 1;\n        if ((carryFlag == false) && (quotient_1 <= quotient_3 && quotient_3 - quotient_1 != 0)) {\n          temp_3 = remainder_1 - 2;\n          quotient_1 = quotient_1 + quotient_2;\n        }\n      }\n      temp_2 = (quotient_1 - quotient_3) / quotient_4;\n      temp_4 = temp_2 * (quotient_2 & 0xffff);\n      remainder_1 = input_1 & 0xffff | ((quotient_1 - quotient_3) - quotient_4 * temp_2) * 0x10000;\n      quotient_1 = temp_2;\n      if (remainder_1 <= temp_4 && temp_4 - remainder_1 != 0) {\n        carryFlag = carryCheck(quotient_2,remainder_1);\n        remainder_1 = quotient_2 + remainder_1;\n        quotient_1 = temp_2 - 1;\n        if ((carryFlag == false) && (remainder_1 <= temp_4 && temp_4 - remainder_1 != 0)) {\n          quotient_1 = temp_2 - 2;\n          remainder_1 = remainder_1 + quotient_2;\n        }\n      }\n      quotient_1 = quotient_1 | temp_3 << 0x10;\n      puVar9 = (uint *)0x0;\n      remainder_1 = remainder_1 - temp_4;\n    }\n    else {\n      if (dividend == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumpTable = (code *)software_udf(0xff,0x8001302);\n        resultValue = (*jumpTable)();\n        return resultValue;\n      }\n      temp_5 = leadingZerosCount(dividend);\n      if (temp_5 == 0) {\n        puVar9 = (uint *)0x1;\n        input_2 = input_2 - dividend;\n        quotient_4 = dividend >> 0x10;\n        temp_2 = dividend & 0xffff;\n        quotient_2 = dividend;\n      }\n      else {\n        quotient_2 = dividend << temp_5;\n        quotient_1 = input_2 >> (0x20U - temp_5 & 0xff);\n        quotient_4 = quotient_2 >> 0x10;\n        quotient_3 = quotient_1 / quotient_4;\n        temp_2 = quotient_2 & 0xffff;\n        temp_4 = quotient_3 * temp_2;\n        remainder_1 = input_1 >> (0x20U - temp_5 & 0xff) | input_2 << temp_5;\n        temp_3 = remainder_1 >> 0x10 | (quotient_1 - quotient_4 * quotient_3) * 0x10000;\n        input_1 = input_1 << temp_5;\n        quotient_1 = quotient_3;\n        if (temp_3 <= temp_4 && temp_4 - temp_3 != 0) {\n          carryFlag = carryCheck(quotient_2,temp_3);\n          temp_3 = quotient_2 + temp_3;\n          quotient_1 = quotient_3 - 1;\n          if ((carryFlag == false) && (temp_3 <= temp_4 && temp_4 - temp_3 != 0)) {\n            quotient_1 = quotient_3 - 2;\n            temp_3 = temp_3 + quotient_2;\n          }\n        }\n        quotient_3 = (temp_3 - temp_4) / quotient_4;\n        remainder_2 = quotient_3 * temp_2;\n        input_2 = remainder_1 & 0xffff | ((temp_3 - temp_4) - quotient_4 * quotient_3) * 0x10000;\n        temp_3 = quotient_3;\n        if (input_2 <= remainder_2 && remainder_2 - input_2 != 0) {\n          carryFlag = carryCheck(quotient_2,input_2);\n          input_2 = quotient_2 + input_2;\n          temp_3 = quotient_3 - 1;\n          if ((carryFlag == false) && (input_2 <= remainder_2 && remainder_2 - input_2 != 0)) {\n            temp_3 = quotient_3 - 2;\n            input_2 = input_2 + quotient_2;\n          }\n        }\n        input_2 = input_2 - remainder_2;\n        puVar9 = (uint *)(temp_3 | quotient_1 << 0x10);\n      }\n      quotient_3 = input_2 / quotient_4;\n      quotient_1 = temp_2 * quotient_3;\n      remainder_1 = input_1 >> 0x10 | (input_2 - quotient_4 * quotient_3) * 0x10000;\n      temp_3 = quotient_3;\n      if (remainder_1 <= quotient_1 && quotient_1 - remainder_1 != 0) {\n        carryFlag = carryCheck(quotient_2,remainder_1);\n        remainder_1 = quotient_2 + remainder_1;\n        temp_3 = quotient_3 - 1;\n        if ((carryFlag == false) && (remainder_1 <= quotient_1 && quotient_1 - remainder_1 != 0)) {\n          temp_3 = quotient_3 - 2;\n          remainder_1 = remainder_1 + quotient_2;\n        }\n      }\n      quotient_3 = (remainder_1 - quotient_1) / quotient_4;\n      temp_2 = temp_2 * quotient_3;\n      remainder_1 = input_1 & 0xffff | ((remainder_1 - quotient_1) - quotient_4 * quotient_3) * 0x10000;\n      quotient_1 = quotient_3;\n      if (remainder_1 <= temp_2 && temp_2 - remainder_1 != 0) {\n        carryFlag = carryCheck(quotient_2,remainder_1);\n        remainder_1 = quotient_2 + remainder_1;\n        quotient_1 = quotient_3 - 1;\n        if ((carryFlag == false) && (remainder_1 <= temp_2 && temp_2 - remainder_1 != 0)) {\n          quotient_1 = quotient_3 - 2;\n          remainder_1 = remainder_1 + quotient_2;\n        }\n      }\n      remainder_1 = remainder_1 - temp_2;\n      quotient_1 = quotient_1 | temp_3 << 0x10;\n    }\n    if (result != (uint *)0x0) {\n      *result = remainder_1 >> leadingZerosCount(dividend);\n      result[1] = 0;\n    }\n  }\n  else {\n    puVar9 = result;\n    if (input_2 < divisor) {\n      if (result != (uint *)0x0) {\n        *result = input_1;\n        result[1] = input_2;\n        return 0;\n      }\n      quotient_1 = 0;\n    }\n    else {\n      temp_5 = leadingZerosCount(divisor);\n      if (temp_5 == 0) {\n        if ((divisor < input_2) || (dividend <= input_1)) {\n          carryFlag = input_1 < dividend;\n          input_1 = input_1 - dividend;\n          input_2 = (input_2 - divisor) - (uint)carryFlag;\n          quotient_1 = 1;\n        }\n        else {\n          quotient_1 = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (result != (uint *)0x0) {\n          *result = input_1;\n          result[1] = input_2;\n        }\n      }\n      else {\n        remainder_1 = 0x20 - temp_5;\n        temp_2 = dividend >> (remainder_1 & 0xff) | divisor << temp_5;\n        quotient_2 = input_2 >> (remainder_1 & 0xff);\n        temp_4 = temp_2 >> 0x10;\n        quotient_3 = quotient_2 / temp_4;\n        quotient_4 = quotient_3 * (temp_2 & 0xffff);\n        quotient_1 = input_2 << temp_5 | input_1 >> (remainder_1 & 0xff);\n        temp_3 = quotient_1 >> 0x10 | (quotient_2 - temp_4 * quotient_3) * 0x10000;\n        input_1 = input_1 << temp_5;\n        quotient_2 = quotient_3;\n        if (temp_3 <= quotient_4 && quotient_4 - temp_3 != 0) {\n          carryFlag = carryCheck(temp_2,temp_3);\n          temp_3 = temp_2 + temp_3;\n          quotient_2 = quotient_3 - 1;\n          if ((carryFlag == false) && (temp_3 <= quotient_4 && quotient_4 - temp_3 != 0)) {\n            quotient_2 = quotient_3 - 2;\n            temp_3 = temp_3 + temp_2;\n          }\n        }\n        quotient_3 = (temp_3 - quotient_4) / temp_4;\n        remainder_2 = quotient_3 * (temp_2 & 0xffff);\n        temp_3 = quotient_1 & 0xffff | ((temp_3 - quotient_4) - temp_4 * quotient_3) * 0x10000;\n        quotient_1 = quotient_3;\n        if (temp_3 <= remainder_2 && remainder_2 - temp_3 != 0) {\n          carryFlag = carryCheck(temp_2,temp_3);\n          temp_3 = temp_2 + temp_3;\n          quotient_1 = quotient_3 - 1;\n          if ((carryFlag == false) && (temp_3 <= remainder_2 && remainder_2 - temp_3 != 0)) {\n            quotient_1 = quotient_3 - 2;\n            temp_3 = temp_3 + temp_2;\n          }\n        }\n        quotient_1 = quotient_1 | quotient_2 << 0x10;\n        temp_1 = (ulonglong)quotient_1 * (ulonglong)(dividend << temp_5);\n        if (CONCAT44(temp_3 - remainder_2,input_1) < temp_1) {\n          quotient_1 = quotient_1 - 1;\n          temp_1 = temp_1 - CONCAT44(temp_2,dividend << temp_5);\n        }\n        if (result != (uint *)0x0) {\n          quotient_2 = ((temp_3 - remainder_2) - (int)(temp_1 >> 0x20)) - (uint)(input_1 < (uint)temp_1);\n          *result = quotient_2 << (remainder_1 & 0xff) | input_1 - (uint)temp_1 >> temp_5;\n          result[1] = quotient_2 >> temp_5;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,quotient_1);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_result_0800121c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "dividend",
                "param_4": "divisor",
                "param_5": "result",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "iVar5": "temp_5",
                "uVar6": "quotient_1",
                "uVar7": "quotient_2",
                "uVar8": "remainder_1",
                "uVar10": "quotient_3",
                "uVar11": "quotient_4",
                "uVar12": "remainder_2",
                "bVar13": "carryFlag",
                "uVar14": "resultValue",
                "LZCOUNT": "leadingZerosCount",
                "CARRY4": "carryCheck"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_memory_system_080014f0",
            "code": "\n\n\nundefined4 initialize_memory_system_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_memory(3);\n  initialize_and_verify_memory(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_memory_system_080014f0",
                "configure_memory_08001714": "configure_memory",
                "initialize_and_check_memory_0800151c": "initialize_and_verify_memory"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "initialize_and_check_memory_0800151c",
            "code": "\nundefined4 initializeAndCheckMemory_0800151c(uint size)\n\n{\n  int initResult;\n  undefined4 returnValue;\n  \n  initResult = initialize_memory_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (initResult == 0) {\n    if (size < 0x10) {\n      update_memory_0800172a(0xffffffff,size,0);\n      returnValue = 0;\n      DAT_20000000 = size;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "initialize_and_check_memory_0800151c",
                "param_1": "size",
                "iVar1": "initResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increment_data_value_0800157c",
            "code": "\nvoid incrementDataValue_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increment_data_value_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_global_data_080015a0",
            "code": "\nundefined4 getGlobalData_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_global_data_080015a0"
            },
            "calling": [
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08001f6c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_memory_configuration_080015b4",
            "code": "\n\n\nvoid setMemoryConfiguration_080015b4(uint configurationValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configurationValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_memory_configuration_080015b4",
                "param_1": "configurationValue"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_bits_from_byte_080015fc",
            "code": "\n\n\nuint getBitsFromByte_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_bits_from_byte_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "update_memory_08001618",
            "code": "\nvoid updateMemory_08001618(byte address,uint value)\n\n{\n  if ((byte_value)address < '\\0') {\n    *(byte_value *)((address & 0xf) + 0xe000ed14) = (byte_value)((value & 0xff) << 4);\n  }\n  else {\n    *(byte_value *)((byte_value)address + -0x1fff1c00) = (byte_value)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "update_memory_08001618",
                "param_1": "address",
                "param_2": "value",
                "char": "byte_value"
            },
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "apply_bitwise_operations_0800166c",
            "code": "\nuint applyBitwiseOperations_0800166c(uint value,uint mask,uint data)\n\n{\n  uint shiftAmount;\n  \n  value = value & 7;\n  shiftAmount = 7 - value;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (value + 4 < 7) {\n    value = 0;\n  }\n  else {\n    value = value - 3;\n  }\n  resulteturesultn data & ~(-1 << (value & 0xff)) |\n         (~(-1 << (shiftAmount & 0xff)) & mask) << (value & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "apply_bitwise_operations_0800166c",
                "param_1": "value",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shiftAmount",
                "r": "result"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_initialize_memory_080016d0",
            "code": "\n\n\nbool checkAndInitializeMemory_080016d0(int inputValue)\n\n{\n  bool isValueInRange;\n  \n  isValueInRange = inputValue - 1U < 0x1000000;\n  if (isValueInRange) {\n    _DAT_e000e014 = inputValue + -1;\n    updateMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueInRange;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_initialize_memory_080016d0",
                "param_1": "inputValue",
                "bVar1": "isValueInRange",
                "update_memory_08001618": "updateMemory"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "configure_memory_08001714",
            "code": "\nvoid configure_memory_08001714(undefined4 memory_configuration)\n\n{\n  set_memory_configuration(memory_configuration);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "configure_memory_08001714",
                "param_1": "memory_configuration",
                "set_memory_configuration_080015b4": "set_memory_configuration"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "update_memory_0800172a",
            "code": "\nvoid updateMemory_0800172a(char inputCharacter,undefined4 operation1,undefined4 operation2)\n\n{\n  undefined4 bits;\n  \n  bits = getBitsFromByte();\n  bits = applyBitwiseOperations(bits,operation1,operation2);\n  updateMemory_0800172a((int)inputCharacter,bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "update_memory_0800172a",
                "param_1": "inputCharacter",
                "param_2": "operation1",
                "param_3": "operation2",
                "uVar1": "bits",
                "get_bits_from_byte_080015fc": "getBitsFromByte",
                "apply_bitwise_operations_0800166c": "applyBitwiseOperations",
                "update_memory_08001618": "updateMemory"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "initialize_memory_08001762",
            "code": "\nundefined4 initializeMemory_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_initialize_memory_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "initialize_memory_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "update_data_0800177c",
            "code": "\n\n\nvoid update_data_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "update_data_0800177c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "calculate_pitch_080017b4",
            "code": "\nvoid calculate_pitch_080017b4(void)\n\n{\n  calculate_pitch_080017b4_helper(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "calculate_pitch_080017b4",
                "calculate_pitch_08004f78": "calculate_pitch_helper"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bitmasks_080017c4",
            "code": "\n\n\nvoid updateBitmasks_080017c4(uint *bitmaskArray,uint *settingsArray)\n\n{\n  uint bitmaskFlag;\n  uint bitmaskCheck;\n  uint settingsType;\n  uint *bitmaskPtr;\n  int bitmaskIndex;\n  uint bitmaskValue;\n  uint settingsIndex;\n  \n  bitmaskValue = 0;\n  settingsIndex = 0;\n  do {\n    if (0xf < settingsIndex) {\n      return;\n    }\n    bitmaskFlag = 1 << (settingsIndex & 0xff);\n    bitmaskCheck = *settingsArray & bitmaskFlag;\n    if (bitmaskCheck == bitmaskFlag) {\n      settingsType = settingsArray[1];\n      if (settingsType == 0x12) {\n        bitmaskValue = settingsArray[3] + 0xc;\n      }\n      else if (settingsType < 0x13) {\n        if (settingsType == 2) {\n          bitmaskValue = settingsArray[3] + 8;\n        }\n        else if (settingsType < 3) {\n          if (settingsType == 0) goto LAB_08001882;\n          if (settingsType == 1) {\n            bitmaskValue = settingsArray[3];\n          }\n        }\n        else if (settingsType == 3) {\n          bitmaskValue = 0;\n        }\n        else if (settingsType == 0x11) {\n          bitmaskValue = settingsArray[3] + 4;\n        }\n      }\n      else if (settingsType == 0x10210000) {\nLAB_08001882:\n        if (settingsArray[2] == 0) {\n          bitmaskValue = 4;\n        }\n        else if (settingsArray[2] == 1) {\n          bitmaskValue = 8;\n          bitmaskArray[4] = bitmaskFlag;\n        }\n        else {\n          bitmaskValue = 8;\n          bitmaskArray[5] = bitmaskFlag;\n        }\n      }\n      else if (settingsType < 0x10210001) {\n        if ((settingsType == 0x10110000) || (settingsType == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((settingsType == 0x10310000) || (settingsType == 0x10320000)) || (settingsType == 0x10220000))\n      goto LAB_08001882;\n      if (bitmaskCheck < 0x100) {\n        bitmaskFlag = settingsIndex << 2;\n        bitmaskPtr = bitmaskArray;\n      }\n      else {\n        bitmaskPtr = bitmaskArray + 1;\n        bitmaskFlag = (settingsIndex - 8) * 4;\n      }\n      *bitmaskPtr = *bitmaskPtr & ~(0xf << (bitmaskFlag & 0xff)) | bitmaskValue << (bitmaskFlag & 0xff);\n      if ((settingsArray[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (bitmaskArray == (uint *)0x40010800) {\n          bitmaskIndex = 0;\n        }\n        else if (bitmaskArray == (uint *)0x40010c00) {\n          bitmaskIndex = 1;\n        }\n        else if (bitmaskArray == (uint *)0x40011000) {\n          bitmaskIndex = 2;\n        }\n        else if (bitmaskArray == (uint *)0x40011400) {\n          bitmaskIndex = 3;\n        }\n        else {\n          bitmaskIndex = 4;\n        }\n        *(uint *)(((settingsIndex >> 2) + 2) * 4 + 0x40010000) =\n             bitmaskIndex << ((settingsIndex & 3) << 2) |\n             ~(0xf << ((settingsIndex & 3) << 2)) & *(uint *)(((settingsIndex >> 2) + 2) * 4 + 0x40010000);\n        if ((settingsArray[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitmaskCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitmaskCheck | _DAT_40010400;\n        }\n        if ((settingsArray[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitmaskCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitmaskCheck | _DAT_40010404;\n        }\n        if ((settingsArray[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitmaskCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitmaskCheck | _DAT_40010408;\n        }\n        if ((settingsArray[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitmaskCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitmaskCheck | _DAT_4001040c;\n        }\n      }\n    }\n    settingsIndex = settingsIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bitmasks_080017c4",
                "param_1": "bitmaskArray",
                "param_2": "settingsArray",
                "uVar1": "bitmaskFlag",
                "uVar2": "bitmaskCheck",
                "uVar3": "settingsType",
                "puVar4": "bitmaskPtr",
                "iVar5": "bitmaskIndex",
                "local_10": "bitmaskValue",
                "local_c": "settingsIndex"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "set_param_value_08001a80",
            "code": "\nvoid setParamValue_08001a80(int paramAddress,ushort paramValue,char isShifted)\n\n{\n  if (isShifted == '\\0') {\n    *(unsignedInteger *)(paramAddress + 0x10) = (unsignedInteger)paramValue << 0x10;\n  }\n  else {\n    *(unsignedInteger *)(paramAddress + 0x10) = (unsignedInteger)paramValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "paramAddress",
                "param_2": "paramValue",
                "param_3": "isShifted",
                "uint": "unsignedInteger"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_data_08001ab0",
            "code": "\nundefined4 calculateData_08001ab0(uint **inputArray)\n\n{\n  uint offset;\n  char isInvalid;\n  undefined4 result;\n  uint temp;\n  bool isZero;\n  \n  if (inputArray == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)inputArray + 0x3d) == '\\0') {\n      *(undefined *)(inputArray + 0xf) = 0;\n      FUNC_08001cb8(inputArray);\n    }\n    *(undefined *)((int)inputArray + 0x3d) = 0x24;\n    **inputArray = **inputArray & 0xfffffffe;\n    offset = shift_data_by_offset_08003518();\n    if (inputArray[1] < (uint *)0x186a1) {\n      temp = offset;\n      if (offset < 2000000) {\n        temp = 1;\n      }\n      isInvalid = (char)temp;\n      if (1999999 < offset) {\n        isInvalid = '\\0';\n      }\n    }\n    else {\n      temp = offset;\n      if (offset < 4000000) {\n        temp = 1;\n      }\n      isInvalid = (char)temp;\n      if (3999999 < offset) {\n        isInvalid = '\\0';\n      }\n    }\n    if (isInvalid == '\\0') {\n      temp = offset / 1000000;\n      (*inputArray)[1] = temp;\n      if ((uint *)0x186a0 < inputArray[1]) {\n        temp = (temp * 300) / 1000;\n      }\n      (*inputArray)[8] = temp + 1;\n      if (inputArray[1] < (uint *)0x186a1) {\n        offset = (offset - 1) / (uint)((int)inputArray[1] << 1) + 1 & 0xfff;\n        if (offset < 4) {\n          offset = 4;\n        }\n      }\n      else {\n        if (inputArray[2] == (uint *)0x0) {\n          temp = (offset - 1) / (uint)((int)inputArray[1] * 3) + 1 & 0xfff;\n          isZero = temp == 0;\n          if (isZero) {\n            temp = 1;\n          }\n          isInvalid = (char)temp;\n          if (!isZero) {\n            isInvalid = '\\0';\n          }\n        }\n        else {\n          temp = (offset - 1) / (uint)((int)inputArray[1] * 0x19) + 1 & 0xfff;\n          isZero = temp == 0;\n          if (isZero) {\n            temp = 1;\n          }\n          isInvalid = (char)temp;\n          if (!isZero) {\n            isInvalid = '\\0';\n          }\n        }\n        if (isInvalid == '\\0') {\n          if (inputArray[2] == (uint *)0x0) {\n            offset = (offset - 1) / (uint)((int)inputArray[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            offset = (offset - 1) / (uint)((int)inputArray[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          offset = 1;\n        }\n      }\n      (*inputArray)[7] = offset;\n      **inputArray = (uint)inputArray[8] | (uint)inputArray[7];\n      (*inputArray)[2] = (uint)inputArray[3] | (uint)inputArray[4];\n      (*inputArray)[3] = (uint)inputArray[6] | (uint)inputArray[5];\n      **inputArray = **inputArray | 1;\n      inputArray[0x10] = (uint *)0x0;\n      *(undefined *)((int)inputArray + 0x3d) = 0x20;\n      inputArray[0xc] = (uint *)0x0;\n      *(undefined *)((int)inputArray + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_data_08001ab0",
                "param_1": "inputArray",
                "uVar1": "offset",
                "cVar2": "isInvalid",
                "uVar3": "result",
                "uVar4": "temp",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocess_data_08001ccc(uint **data,undefined2 value1,undefined2 value2,undefined2 value3,uint *flags,\n            undefined2 value4,undefined4 result)\n\n{\n  int global_data1;\n  int global_data2;\n  undefined4 return_value;\n  uint *temp_ptr;\n  \n  global_data1 = get_global_data_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        global_data2 = 0;\n        goto LAB_08001d9c;\n      }\n      global_data2 = get_global_data_080015a0();\n    } while ((uint)(global_data2 - global_data1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    global_data2 = 3;\nLAB_08001d9c:\n    if (global_data2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = flags;\n        *(undefined2 *)((int)data + 0x2a) = value4;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        global_data2 = update_flags_and_value_08002640(data,value1,value2,value3,result,global_data1);\n        if (global_data2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            global_data2 = check_and_update_flags_08002bb4(data,result,global_data1);\n            if (global_data2 != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            temp_ptr = data[9];\n            data[9] = (uint *)((int)temp_ptr + 1);\n            (*data)[4] = (uint)*(byte *)temp_ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              temp_ptr = data[9];\n              data[9] = (uint *)((int)temp_ptr + 1);\n              (*data)[4] = (uint)*(byte *)temp_ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          global_data1 = check_and_handle_flag_08002c2e(data,result,global_data1);\n          if (global_data1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            return_value = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            return_value = 1;\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "flags",
                "param_6": "value4",
                "param_7": "result",
                "iVar1": "global_data1",
                "iVar2": "global_data2",
                "uVar3": "return_value",
                "puVar4": "temp_ptr"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **inputData,undefined2 val1,undefined2 val2,undefined2 val3,uint *outputData,\n            undefined2 val4,uint val5)\n\n{\n  int globalData1;\n  uint temp1;\n  int temp2;\n  undefined4 result;\n  uint *tempPtr;\n  \n  globalData1 = get_global_data_080015a0();\n  if (*(char *)((int)inputData + 0x3d) == ' ') {\n    do {\n      if ((~(*inputData)[6] & 2) != 0) {\n        temp2 = 0;\n        goto LAB_08002040;\n      }\n      temp2 = get_global_data_080015a0();\n    } while ((uint)(temp2 - globalData1) < 0x1a);\n    inputData[0xc] = (uint *)0x0;\n    *(undefined *)((int)inputData + 0x3d) = 0x20;\n    *(undefined *)((int)inputData + 0x3e) = 0;\n    *(undefined *)(inputData + 0xf) = 0;\n    temp2 = 3;\nLAB_08002040:\n    if (temp2 == 0) {\n      if (*(char *)(inputData + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(inputData + 0xf) = 1;\n        if ((**inputData & 1) != 1) {\n          **inputData = **inputData | 1;\n        }\n        **inputData = **inputData & 0xfffff7ff;\n        *(undefined *)((int)inputData + 0x3d) = 0x22;\n        *(undefined *)((int)inputData + 0x3e) = 0x40;\n        inputData[0x10] = (uint *)0x0;\n        inputData[9] = outputData;\n        *(undefined2 *)((int)inputData + 0x2a) = val4;\n        inputData[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(inputData + 10) = *(undefined2 *)((int)inputData + 0x2a);\n        temp2 = update_data_value_080027f4(inputData,val1,val2,val3,val5,globalData1);\n        if (temp2 == 0) {\n          if (*(short *)(inputData + 10) == 0) {\n            **inputData = **inputData | 0x200;\n          }\n          else if (*(short *)(inputData + 10) == 1) {\n            **inputData = **inputData & 0xfffffbff;\n            disableIRQinterrupts();\n            **inputData = **inputData | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(inputData + 10) == 2) {\n            **inputData = **inputData | 0x800;\n            disableIRQinterrupts();\n            **inputData = **inputData & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **inputData = **inputData | 0x400;\n          }\n          while (*(short *)(inputData + 10) != 0) {\n            if (*(ushort *)(inputData + 10) < 4) {\n              if (*(short *)(inputData + 10) == 1) {\n                temp2 = check_status_08002ca8(inputData,val5,globalData1);\n                if (temp2 != 0) {\n                  if (inputData[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                temp1 = (*inputData)[4];\n                tempPtr = inputData[9];\n                inputData[9] = (uint *)((int)tempPtr + 1);\n                *(char *)tempPtr = (char)temp1;\n                *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n                *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n              }\n              else if (*(short *)(inputData + 10) == 2) {\n                do {\n                  if ((~(*inputData)[5] & 4) == 0) {\n                    temp2 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((val5 == 0xffffffff) ||\n                        ((val5 != 0 && (temp2 = get_global_data_080015a0(), (uint)(temp2 - globalData1) <= val5)\n                         )));\n                inputData[0xc] = (uint *)0x0;\n                *(undefined *)((int)inputData + 0x3d) = 0x20;\n                *(undefined *)((int)inputData + 0x3e) = 0;\n                *(undefined *)(inputData + 0xf) = 0;\n                temp2 = 3;\nLAB_080022fa:\n                if (temp2 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **inputData = **inputData | 0x200;\n                temp1 = (*inputData)[4];\n                tempPtr = inputData[9];\n                inputData[9] = (uint *)((int)tempPtr + 1);\n                *(char *)tempPtr = (char)temp1;\n                *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n                *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n                enableIRQinterrupts();\n                temp1 = (*inputData)[4];\n                tempPtr = inputData[9];\n                inputData[9] = (uint *)((int)tempPtr + 1);\n                *(char *)tempPtr = (char)temp1;\n                *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n                *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*inputData)[5] & 4) == 0) {\n                    temp2 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((val5 == 0xffffffff) ||\n                        ((val5 != 0 && (temp2 = get_global_data_080015a0(), (uint)(temp2 - globalData1) <= val5)\n                         )));\n                inputData[0xc] = (uint *)0x0;\n                *(undefined *)((int)inputData + 0x3d) = 0x20;\n                *(undefined *)((int)inputData + 0x3e) = 0;\n                *(undefined *)(inputData + 0xf) = 0;\n                temp2 = 3;\nLAB_08002418:\n                if (temp2 != 0) {\n                  return 3;\n                }\n                **inputData = **inputData & 0xfffffbff;\n                disableIRQinterrupts();\n                temp1 = (*inputData)[4];\n                tempPtr = inputData[9];\n                inputData[9] = (uint *)((int)tempPtr + 1);\n                *(char *)tempPtr = (char)temp1;\n                *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n                *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n                do {\n                  if ((~(*inputData)[5] & 4) == 0) {\n                    temp2 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((val5 == 0xffffffff) ||\n                        ((val5 != 0 && (temp2 = get_global_data_080015a0(), (uint)(temp2 - globalData1) <= val5)\n                         )));\n                inputData[0xc] = (uint *)0x0;\n                *(undefined *)((int)inputData + 0x3d) = 0x20;\n                *(undefined *)((int)inputData + 0x3e) = 0;\n                *(undefined *)(inputData + 0xf) = 0;\n                temp2 = 3;\nLAB_0800250a:\n                if (temp2 != 0) {\n                  return 3;\n                }\n                **inputData = **inputData | 0x200;\n                temp1 = (*inputData)[4];\n                tempPtr = inputData[9];\n                inputData[9] = (uint *)((int)tempPtr + 1);\n                *(char *)tempPtr = (char)temp1;\n                *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n                *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n                enableIRQinterrupts();\n                temp1 = (*inputData)[4];\n                tempPtr = inputData[9];\n                inputData[9] = (uint *)((int)tempPtr + 1);\n                *(char *)tempPtr = (char)temp1;\n                *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n                *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n              }\n            }\n            else {\n              temp2 = check_status_08002ca8(inputData,val5,globalData1);\n              if (temp2 != 0) {\n                if (inputData[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              temp1 = (*inputData)[4];\n              tempPtr = inputData[9];\n              inputData[9] = (uint *)((int)tempPtr + 1);\n              *(char *)tempPtr = (char)temp1;\n              *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n              *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n              if (((*inputData)[5] & 4) == 4) {\n                temp1 = (*inputData)[4];\n                tempPtr = inputData[9];\n                inputData[9] = (uint *)((int)tempPtr + 1);\n                *(char *)tempPtr = (char)temp1;\n                *(short *)(inputData + 10) = *(short *)(inputData + 10) + -1;\n                *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)inputData + 0x3d) = 0x20;\n          *(undefined *)((int)inputData + 0x3e) = 0;\n          *(undefined *)(inputData + 0xf) = 0;\n          result = 0;\n        }\n        else if (inputData[0x10] == (uint *)0x4) {\n          *(undefined *)(inputData + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(inputData + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "inputData",
                "param_2": "val1",
                "param_3": "val2",
                "param_4": "val3",
                "param_5": "outputData",
                "param_6": "val4",
                "param_7": "val5",
                "iVar1": "globalData1",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "uVar4": "result",
                "puVar5": "tempPtr"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_flags_and_value_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateFlagsAndValue_08002640(uint **ptr_param_1,byte byte_param,undefined2 ushort_param,short short_param,uint uint_param,int int_param)\n\n{\n  int status;\n  undefined4 result;\n  \n  **ptr_param_1 = **ptr_param_1 | 0x100;\n  do {\n    if ((~(*ptr_param_1)[5] & 1) == 0) {\n      status = 0;\n      goto LAB_0800270a;\n    }\n  } while ((uint_param == 0xffffffff) ||\n          ((uint_param != 0 && (status = get_global_data_080015a0(), (uint)(status - int_param) <= uint_param))));\n  ptr_param_1[0xc] = (uint *)0x0;\n  *(undefined *)((int)ptr_param_1 + 0x3d) = 0x20;\n  *(undefined *)((int)ptr_param_1 + 0x3e) = 0;\n  *(undefined *)(ptr_param_1 + 0xf) = 0;\n  status = 3;\nLAB_0800270a:\n  if (status == 0) {\n    (*ptr_param_1)[4] = byte_param & 0xfe;\n    status = check_and_update_value_08002ad8(ptr_param_1,0x10002,uint_param,int_param);\n    if (status == 0) {\n      status = check_and_update_flags_08002bb4(ptr_param_1,uint_param,int_param,(*ptr_param_1)[6]);\n      if (status == 0) {\n        if (short_param == 1) {\n          (*ptr_param_1)[4] = (uint)(byte)ushort_param;\n        }\n        else {\n          (*ptr_param_1)[4] = (uint)(byte)((ushort)ushort_param >> 8);\n          status = check_and_update_flags_08002bb4(ptr_param_1,uint_param,int_param);\n          if (status != 0) {\n            if (ptr_param_1[0x10] == (uint *)0x4) {\n              **ptr_param_1 = **ptr_param_1 | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*ptr_param_1)[4] = (uint)(byte)ushort_param;\n        }\n        result = 0;\n      }\n      else if (ptr_param_1[0x10] == (uint *)0x4) {\n        **ptr_param_1 = **ptr_param_1 | 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (ptr_param_1[0x10] == (uint *)0x4) {\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else {\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_flags_and_value_08002640",
                "param_1": "ptr_param_1",
                "param_2": "byte_param",
                "param_3": "ushort_param",
                "param_4": "short_param",
                "param_5": "uint_param",
                "param_6": "int_param",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "update_data_value_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nupdateDataValue_080027f4(uint **data,byte flag,undefined2 value1,short value2,uint limit,int param)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **data = **data | 0x400;\n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = get_global_data_080015a0(), (uint)(result - param) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_update_value_08002ad8(data,0x10002,limit,param);\n    if (result == 0) {\n      result = check_and_update_flags_08002bb4(data,limit,param,(*data)[6]);\n      if (result == 0) {\n        if (value2 == 1) {\n          (*data)[4] = (uint)(byte)value1;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value1 >> 8);\n          result = check_and_update_flags_08002bb4(data,limit,param);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value1;\n        }\n        result = check_and_update_flags_08002bb4(data,limit,param);\n        if (result == 0) {\n          **data = **data | 0x100;\n          do {\n            if ((~(*data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = get_global_data_080015a0(), (uint)(result - param) <= limit))));\n          data[0xc] = (uint *)0x0;\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*data)[4] = (uint)(flag | 1);\n            result = check_and_update_value_08002ad8(data,0x10002,limit,param);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (data[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          **data = **data | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "update_data_value_080027f4",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "limit",
                "param_6": "param",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_value_08002ad8",
            "code": "\nundefined4 checkAndUpdateValue_08002ad8(uint **parameters,uint inputValue,uint maximumValue,int comparisonValue)\n\n{\n  int globalDataValue;\n  char charValue;\n  uint updatedValue;\n  bool valueChanged;\n  \n  do {\n    if ((inputValue >> 0x10 & 0xff) == 1) {\n      updatedValue = inputValue & ~(*parameters)[5] & 0xffff;\n      valueChanged = updatedValue != 0;\n      if (valueChanged) {\n        updatedValue = 1;\n      }\n      charValue = (char)updatedValue;\n      if (!valueChanged) {\n        charValue = '\\0';\n      }\n    }\n    else {\n      updatedValue = inputValue & ~(*parameters)[6] & 0xffff;\n      valueChanged = updatedValue != 0;\n      if (valueChanged) {\n        updatedValue = 1;\n      }\n      charValue = (char)updatedValue;\n      if (!valueChanged) {\n        charValue = '\\0';\n      }\n    }\n    if (charValue == '\\0') {\n      return 0;\n    }\n    if (((*parameters)[5] & 0x400) == 0x400) {\n      **parameters = **parameters | 0x200;\n      (*parameters)[5] = 0xfffffbff;\n      parameters[0x10] = (uint *)0x4;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)(parameters + 0xf) = 0;\n      return 1;\n    }\n  } while ((maximumValue == 0xffffffff) ||\n          ((maximumValue != 0 && (globalDataValue = get_global_data_080015a0(), (uint)(globalDataValue - comparisonValue) <= maximumValue))));\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  *(undefined *)(parameters + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_value_08002ad8",
                "param_1": "parameters",
                "param_2": "inputValue",
                "param_3": "maximumValue",
                "param_4": "comparisonValue",
                "iVar1": "globalDataValue",
                "cVar2": "charValue",
                "uVar3": "updatedValue",
                "bVar4": "valueChanged"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_and_update_flags_08002bb4",
            "code": "\nundefined4 check_and_update_flags_08002bb4(int *flag_data,uint flag_value,int offset_value)\n\n{\n  int status;\n  \n  while( true ) {\n    if ((*(uint *)(*flag_data + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    status = check_flag_status(flag_data);\n    if (status != 0) break;\n    if ((flag_value != 0xffffffff) &&\n       ((flag_value == 0 || (status = get_global_data(), flag_value < (uint)(status - offset_value))))) {\n      flag_data[0x10] = flag_data[0x10] | 0x20;\n      flag_data[0xc] = 0;\n      *(undefined *)((int)flag_data + 0x3d) = 0x20;\n      *(undefined *)(flag_data + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_and_update_flags_08002bb4",
                "param_1": "flag_data",
                "param_2": "flag_value",
                "param_3": "offset_value",
                "iVar1": "status",
                "check_flag_status_08002d3c": "check_flag_status",
                "get_global_data_080015a0": "get_global_data"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_handle_flag_08002c2e",
            "code": "\nundefined4 checkAndHandleFlag_08002c2e(int *flagStatus,uint globalDataSize,int dataOffset)\n\n{\n  int flagCheckResult;\n  \n  while( true ) {\n    if ((*(uint *)(*flagStatus + 0x14) & 4) == 4) {\n      return 0;\n    }\n    flagCheckResult = check_flag_status_08002d3c(flagStatus);\n    if (flagCheckResult != 0) break;\n    if ((globalDataSize != 0xffffffff) &&\n       ((globalDataSize == 0 || (flagCheckResult = get_global_data_080015a0(), globalDataSize < (uint)(flagCheckResult - dataOffset))))) {\n      flagStatus[0x10] = flagStatus[0x10] | 0x20;\n      flagStatus[0xc] = 0;\n      *(undefined *)((int)flagStatus + 0x3d) = 0x20;\n      *(undefined *)(flagStatus + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_handle_flag_08002c2e",
                "param_1": "flagStatus",
                "param_2": "globalDataSize",
                "param_3": "dataOffset",
                "iVar1": "flagCheckResult"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_status_08002ca8",
            "code": "\nundefined4 check_status_08002ca8(int *ptr_list,uint size,int offset)\n\n{\n  int global_data;\n  \n  while( true ) {\n    if ((*(uint *)(*ptr_list + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*ptr_list + 0x14) & 0x10) == 0x10) break;\n    if ((size == 0) || (global_data = get_global_data_080015a0(), size < (uint)(global_data - offset))) {\n      flag = flag | 0x20;\n      *(undefined *)((int)ptr_list + 0x3d) = 0x20;\n      *(undefined *)(ptr_list + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*ptr_list + 0x14) = 0xffffffef;\n  flag = 0;\n  ptr_list[0xc] = 0;\n  *(undefined *)((int)ptr_list + 0x3d) = 0x20;\n  *(undefined *)(ptr_list + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_status_08002ca8",
                "param_1": "ptr_list",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "global_data",
                "param_1[0x10]": "flag"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flag_status_08002d3c",
            "code": "\nbool checkFlagStatus_08002d3c(int *flagPointer)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*flagPointer + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*flagPointer + 0x14) = 0xfffffbff;\n    arrayElement1 = 4;\n    arrayElement2 = 0;\n    *(undefined *)((int)flagPointer + 0x3d) = 0x20;\n    *(undefined *)(flagPointer + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "param_1": "flagPointer",
                "bVar1": "isFlagSet",
                "param_1[0x10]": "arrayElement1",
                "param_1[0xc]": "arrayElement2"
            },
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "handle_flags_08002d98",
            "code": "\n\n\nundefined4 handleFlags_08002d98(uint *flags)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isFlagSet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        startTime = getTimestamp();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = getTimestamp();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = getTimestamp();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = getTimestamp();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = getTimestamp();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = getTimestamp();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = getTimestamp();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = getTimestamp();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = getTimestamp();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = getTimestamp();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = getTimestamp();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = getTimestamp();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      delayFunction(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = getTimestamp();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = getTimestamp();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      startTime = getTimestamp();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = getTimestamp();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = getTimestamp();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = getTimestamp();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = getTimestamp();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        startTime = getTimestamp();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentTime = getTimestamp();\n          if (2 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentTime = getTimestamp();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = getTimestamp();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentTime = getTimestamp();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "handle_flags_08002d98",
                "param_1": "flags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isFlagSet",
                "get_global_data_080015a0": "getTimestamp",
                "delay_function_08003568": "delayFunction"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "calculate_execution_time_and_initialize_memory_08003260",
            "code": "\n\n\nundefined4 calculate_execution_time_and_initialize_memory_08003260(uint *flags,uint execution_time)\n\n{\n  int start_time;\n  int current_time;\n  uint time_calculation_result;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < execution_time) &&\n     (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*flags & 2) != 0) {\n      _DAT_40021004 = flags[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*flags & 1) == 0) {\nLAB_08003394:\n      if ((execution_time < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*flags & 4) != 0) {\n          _DAT_40021004 = flags[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*flags & 8) != 0) {\n          _DAT_40021004 = flags[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        time_calculation_result = calculate_execution_time_08003440();\n        DAT_20000018 = time_calculation_result >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        initialize_and_check_memory_0800151c(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (flags[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((flags[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = flags[1] | _DAT_40021004 & 0xfffffffc;\n      start_time = get_global_data_080015a0();\n      if (flags[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_time = get_global_data_080015a0();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n      else if (flags[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_time = get_global_data_080015a0();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_time = get_global_data_080015a0();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003260": "calculate_execution_time_and_initialize_memory_08003260",
                "param_1": "flags",
                "param_2": "execution_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "time_calculation_result",
                "uVar4": "result"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_080015a0",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculateExecutionTime_08003440(void)\n\n{\n  undefined2 executionTime;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint executionTimeResult;\n  uint temp3;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  executionTime = 0x201;\n  temp2 = 0;\n  temp3 = 0;\n  temp1 = 0;\n  executionTimeResult = 0;\n  temp3 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    executionTimeResult = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    temp1 = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp3 = temp1 * 4000000;\n    }\n    else {\n      temp3 = (temp1 * 8000000) / (uint)*(byte *)((int)&executionTime + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    executionTimeResult = temp3;\n  }\n  else {\n    executionTimeResult = 8000000;\n  }\n  return executionTimeResult;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "executionTime",
                "local_2c": "constant1",
                "uStack_28": "constant2",
                "uStack_24": "constant3",
                "uStack_20": "constant4",
                "local_1c": "temp1",
                "local_18": "temp2",
                "local_14": "temp3",
                "local_10": "executionTimeResult",
                "local_c": "temp3"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_08003504",
            "code": "\nundefined4 get_data_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_08003504"
            },
            "calling": [
                "FUN_08003518",
                "FUN_080052a0",
                "FUN_08003540"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shift_data_by_offset_08003518",
            "code": "\n\n\nuint shiftDataByOffset_08003518(void)\n\n{\n  uint data;\n  \n  data = getData();\n  return data >> *(offset *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shift_data_by_offset_08003518",
                "uVar1": "data",
                "get_data_08003504": "getData",
                "sbyte": "offset"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "get_shifted_data_08003540",
            "code": "\n\n\nuint get_shifted_data_08003540(void)\n\n{\n  uint data;\n  \n  data = get_data_08003504();\n  return data >> *(shift *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "get_shifted_data_08003540",
                "uVar1": "data",
                "sbyte": "shift"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int inputValue)\n\n{\n  bool isCountNonZero;\n  int delayCount;\n  \n  delayCount = inputValue * (DAT_20000018 / 8000);\n  do {\n    isCountNonZero = delayCount != 0;\n    delayCount = delayCount + -1;\n  } while (isCountNonZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "inputValue",
                "local_c": "delayCount",
                "bVar1": "isCountNonZero"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "validate_data_080035a4",
            "code": "\nundefined4 validate_data_080035a4(undefined4 *data_pointer)\n\n{\n  undefined4 result;\n  \n  if (data_pointer == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_pointer + 0x3d) == '\\0') {\n      *(undefined *)(data_pointer + 0xf) = 0;\n      FUNC_080035fa(data_pointer);\n    }\n    *(undefined *)((int)data_pointer + 0x3d) = 2;\n    update_memory(*data_pointer,data_pointer + 1);\n    *(undefined *)((int)data_pointer + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "validate_data_080035a4",
                "param_1": "data_pointer",
                "uVar1": "result",
                "update_memory_08003c94": "update_memory"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_flags_0800360c",
            "code": "\nundefined4 setFlags_0800360c(uint **ptrArray)\n\n{\n  (*ptrArray)[3] = (*ptrArray)[3] | 1;\n  **ptrArray = **ptrArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "ptrArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "handle_param1_08003640",
            "code": "\nundefined4 handleParam1_08003640(undefined4 *paramPtr)\n\n{\n  undefined4 returnValue;\n  \n  if (paramPtr == (undefined4 *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)paramPtr + 0x3d) == '\\0') {\n      *(undefined *)(paramPtr + 0xf) = 0;\n      FUNC_08003696(paramPtr);\n    }\n    *(undefined *)((int)paramPtr + 0x3d) = 2;\n    updateMemory(*paramPtr,paramPtr + 1);\n    *(undefined *)((int)paramPtr + 0x3d) = 1;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003640": "handle_param1_08003640",
                "param_1": "paramPtr",
                "uVar1": "returnValue",
                "update_memory_08003c94": "updateMemory"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "set_and_update_flags_080036a8",
            "code": "\nundefined4 setAndUpdateFlags_080036a8(uint **bitsArray,undefined4 flagValue)\n\n{\n  update_bits_080041ea(*bitsArray,flagValue,1);\n  if (*bitsArray == (uint *)0x40012c00) {\n    (*bitsArray)index = (*bitsArray)index | 0x8000;\n  }\n  **bitsArray = **bitsArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "set_and_update_flags_080036a8",
                "param_1": "bitsArray",
                "param_2": "flagValue",
                "[0x11]": "index"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_flags_080036f8",
            "code": "\nvoid processFlags_080036f8(int *flags)\n\n{\n  if (((*(uint *)(*flags + 0x10) & 2) == 2) && ((*(uint *)(*flags + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 4) == 4) && ((*(uint *)(*flags + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 8) == 8) && ((*(uint *)(*flags + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x10) == 0x10) && ((*(uint *)(*flags + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(flags);\n      FUNC_08003c6e(flags);\n    }\n    else {\n      FUNC_08003c5c(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  if (((*(uint *)(*flags + 0x10) & 1) == 1) && ((*(uint *)(*flags + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*flags + 0x10) = 0xfffffffe;\n    calculatePitch(flags);\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x80) == 0x80) && ((*(uint *)(*flags + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffff7f;\n    FUNC_08004378(flags);\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x40) == 0x40) && ((*(uint *)(*flags + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffffbf;\n    FUNC_08003c80(flags);\n  }\n  if (((*(uint *)(*flags + 0x10) & 0x20) == 0x20) && ((*(uint *)(*flags + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*flags + 0x10) = 0xffffffdf;\n    FUNC_08004366(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "param_1": "flags",
                "calculate_pitch_08004f78": "calculatePitch"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004f78",
                "FUN_08003c6e",
                "FUN_08004378",
                "FUN_08003c4a",
                "FUN_08004366",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_data_08003908",
            "code": "\nundefined4 updateData_08003908(int *dataPtr,int param,undefined4 action)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(dataPtr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(dataPtr + 0xf) = 1;\n    *(undefined *)((int)dataPtr + 0x3d) = 2;\n    switch(action) {\n    case 0:\n      update_data_08003d60(*dataPtr,param);\n      *(uint *)(*dataPtr + 0x18) = *(uint *)(*dataPtr + 0x18) | 8;\n      *(uint *)(*dataPtr + 0x18) = *(uint *)(*dataPtr + 0x18) & 0xfffffffb;\n      *(uint *)(*dataPtr + 0x18) = *(uint *)(param + 0x10) | *(uint *)(*dataPtr + 0x18);\n      break;\n    case 4:\n      update_data_08003e38(*dataPtr,param);\n      *(uint *)(*dataPtr + 0x18) = *(uint *)(*dataPtr + 0x18) | 0x800;\n      *(uint *)(*dataPtr + 0x18) = *(uint *)(*dataPtr + 0x18) & 0xfffffbff;\n      *(uint *)(*dataPtr + 0x18) = *(int *)(param + 0x10) << 8 | *(uint *)(*dataPtr + 0x18);\n      break;\n    case 8:\n      update_config_08003f18(*dataPtr,param);\n      *(uint *)(*dataPtr + 0x1c) = *(uint *)(*dataPtr + 0x1c) | 8;\n      *(uint *)(*dataPtr + 0x1c) = *(uint *)(*dataPtr + 0x1c) & 0xfffffffb;\n      *(uint *)(*dataPtr + 0x1c) = *(uint *)(param + 0x10) | *(uint *)(*dataPtr + 0x1c);\n      break;\n    case 0xc:\n      update_parameters_08003ff8(*dataPtr,param);\n      *(uint *)(*dataPtr + 0x1c) = *(uint *)(*dataPtr + 0x1c) | 0x800;\n      *(uint *)(*dataPtr + 0x1c) = *(uint *)(*dataPtr + 0x1c) & 0xfffffbff;\n      *(uint *)(*dataPtr + 0x1c) = *(int *)(param + 0x10) << 8 | *(uint *)(*dataPtr + 0x1c);\n    }\n    *(undefined *)((int)dataPtr + 0x3d) = 1;\n    *(undefined *)(dataPtr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_data_08003908",
                "param_1": "dataPtr",
                "param_2": "param",
                "param_3": "action",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "process_parameter_08003a94",
            "code": "\nundefined4 processParameter_08003a94(int *parameterList,uint *values)\n\n{\n  undefined4 result;\n  uint value;\n  \n  if (*(char *)(parameterList + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(parameterList + 0xf) = 1;\n    *(undefined *)((int)parameterList + 0x3d) = 2;\n    *(uint *)(*parameterList + 8) = *(uint *)(*parameterList + 8) & 0xffff0088;\n    value = *values;\n    if (value == 0x40) {\n      updateParameters(*parameterList,values[1],values[3]);\n      updateParameterValue(*parameterList,0x40);\n    }\n    else if (value < 0x41) {\n      if (value == 0x10) {\n        updateParameterValue(*parameterList,0x10);\n      }\n      else if (value < 0x11) {\n        if (value == 0) {\n          updateParameterValue(*parameterList,0);\n        }\n      }\n      else if (value == 0x20) {\n        updateParameterValue(*parameterList,0x20);\n      }\n      else if (value == 0x30) {\n        updateParameterValue(*parameterList,0x30);\n      }\n    }\n    else if (value == 0x70) {\n      updateParamWithShift(*parameterList,values[2],values[1],values[3]);\n      *(uint *)(*parameterList + 8) = *(uint *)(*parameterList + 8) & 0xffffff88 | 0x77;\n    }\n    else if (value < 0x71) {\n      if (value == 0x50) {\n        updateParameters(*parameterList,values[1],values[3]);\n        updateParameterValue(*parameterList,0x50);\n      }\n      else if (value == 0x60) {\n        update_flags_and_values_08004104(*parameterList,values[1],values[3]);\n        updateParameterValue(*parameterList,0x60);\n      }\n    }\n    else if (value == 0x1000) {\n      *(uint *)(*parameterList + 8) = *(uint *)(*parameterList + 8) & 0xfffffff8;\n    }\n    else if (value == 0x2000) {\n      updateParamWithShift(*parameterList,values[2],values[1],values[3]);\n      *(uint *)(*parameterList + 8) = *(uint *)(*parameterList + 8) | 0x4000;\n    }\n    *(undefined *)((int)parameterList + 0x3d) = 1;\n    *(undefined *)(parameterList + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "process_parameter_08003a94",
                "param_1": "parameterList",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "value",
                "param_2[1]": "values[1]",
                "param_2[3]": "values[3]",
                "update_parameters_080040a0": "updateParameters",
                "update_parameter_value_0800416a": "updateParameterValue",
                "update_param_with_shift_080041a8": "updateParamWithShift"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_08003c94",
            "code": "\nvoid updateMemory_08003c94(uint *memoryBlock,uint *sourceMemory)\n\n{\n  uint originalValue;\n  \n  originalValue = *memoryBlock;\n  if ((((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n      (memoryBlock == (uint *)0x40000400)) || (memoryBlock == (uint *)0x40000800)) {\n    originalValue = sourceMemory[1] | originalValue & 0xffffff8f;\n  }\n  if (((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n     ((memoryBlock == (uint *)0x40000400 || (memoryBlock == (uint *)0x40000800)))) {\n    originalValue = sourceMemory[3] | originalValue & 0xfffffcff;\n  }\n  *memoryBlock = sourceMemory[5] | originalValue & 0xffffff7f;\n  memoryBlock[0xb] = sourceMemory[2];\n  memoryBlock[10] = *sourceMemory;\n  if (memoryBlock == (uint *)0x40012c00) {\n    valueAt40012c30 = sourceMemory[4];\n  }\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "param_1": "memoryBlock",
                "param_2": "sourceMemory",
                "local_c": "originalValue",
                "uRam40012c30": "valueAt40012c30"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_data_08003d60",
            "code": "\nvoid updateData_08003d60(int dataPointer,uint *dataArray)\n\n{\n  uint dataValue;\n  uint modifiedValue;\n  uint localValue;\n  \n  *(uint *)(dataPointer + 0x20) = *(uint *)(dataPointer + 0x20) & 0xfffffffe;\n  localValue = *(uint *)(dataPointer + 4);\n  dataValue = *dataArray;\n  modifiedValue = dataArray[2] | *(uint *)(dataPointer + 0x20) & 0xfffffffd;\n  if (dataPointer == 0x40012c00) {\n    modifiedValue = (dataArray[3] | modifiedValue & 0xfffffff7) & 0xfffffffb;\n    localValue = dataArray[6] | dataArray[5] | localValue & 0xfffffcff;\n  }\n  *(uint *)(dataPointer + 4) = localValue;\n  *(uint *)(dataPointer + 0x18) = dataValue | *(uint *)(dataPointer + 0x18) & 0xffffff8c;\n  *(uint *)(dataPointer + 0x34) = dataArray[1];\n  *(uint *)(dataPointer + 0x20) = modifiedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_data_08003d60",
                "param_1": "dataPointer",
                "param_2": "dataArray",
                "uVar1": "dataValue",
                "uVar2": "modifiedValue",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_data_08003e38",
            "code": "\nvoid updateData_08003e38(int dataAddress,int *dataValues)\n\n{\n  int value1;\n  uint value2;\n  uint value3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  value3 = *(uint *)(dataAddress + 4);\n  value1 = *dataValues;\n  value2 = dataValues[2] << 4 | *(uint *)(dataAddress + 0x20) & 0xffffffdf;\n  if (dataAddress == 0x40012c00) {\n    value2 = (dataValues[3] << 4 | value2 & 0xffffff7f) & 0xffffffbf;\n    value3 = dataValues[6] << 2 | dataValues[5] << 2 | value3 & 0xfffff3ff;\n  }\n  *(uint *)(dataAddress + 4) = value3;\n  *(uint *)(dataAddress + 0x18) = value1 << 8 | *(uint *)(dataAddress + 0x18) & 0xffff8cff;\n  *(int *)(dataAddress + 0x38) = dataValues[1];\n  *(uint *)(dataAddress + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "dataAddress",
                "param_2": "dataValues",
                "iVar1": "value1",
                "uVar2": "value2",
                "local_10": "value3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_config_08003f18",
            "code": "\nvoid updateConfig_08003f18(int configAddress,uint *configData)\n\n{\n  uint data1;\n  uint data2;\n  uint localValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffeff;\n  localValue = *(uint *)(configAddress + 4);\n  data1 = *configData;\n  data2 = param2Value2 << 8 | *(uint *)(configAddress + 0x20) & 0xfffffdff;\n  if (configAddress == 0x40012c00) {\n    data2 = (configData[3] << 8 | data2 & 0xfffff7ff) & 0xfffffbff;\n    localValue = param2Value4 << 4 | param2Value5 << 4 | localValue & 0xffffcfff;\n  }\n  *(uint *)(configAddress + 4) = localValue;\n  *(uint *)(configAddress + 0x1c) = data1 | *(uint *)(configAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(configAddress + 0x3c) = param2Value6;\n  *(uint *)(configAddress + 0x20) = data2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_config_08003f18",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "data1",
                "uVar2": "data2",
                "local_10": "localValue",
                "param_2[2]": "param2Value2",
                "param_2[6]": "param2Value4",
                "param_2[5]": "param2Value5",
                "param_2[1]": "param2Value6"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_parameters_08003ff8",
            "code": "\nvoid updateParameters_08003ff8(int address,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint mask;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffefff;\n  mask = *(uint *)(address + 4);\n  value1 = *parameters;\n  value2 = parameters[2];\n  if (address == 0x40012c00) {\n    mask = parameters[5] << 6 | mask & 0xffffbfff;\n  }\n  *(uint *)(address + 4) = mask;\n  *(uint *)(address + 0x1c) = value1 << 8 | *(uint *)(address + 0x1c) & 0xffff8cff;\n  *(int *)(address + 0x40) = parameters[1];\n  *(uint *)(address + 0x20) = value2 << 0xc | *(uint *)(address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_parameters_08003ff8",
                "param_1": "address",
                "param_2": "parameters",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "mask"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameters_080040a0",
            "code": "\nvoid updateParameters_080040a0(int functionData,uint newParam,int shiftValue)\n\n{\n  uint previousValue;\n  \n  previousValue = *(uint *)(functionData + 0x20);\n  *(uint *)(functionData + 0x20) = *(uint *)(functionData + 0x20) & 0xfffffffe;\n  *(uint *)(functionData + 0x18) = shiftValue << 4 | *(uint *)(functionData + 0x18) & 0xffffff0f;\n  *(uint *)(functionData + 0x20) = newParam | previousValue & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "functionData",
                "param_2": "newParam",
                "param_3": "shiftValue",
                "uVar1": "previousValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_flags_and_values_08004104",
            "code": "\nvoid updateFlagsAndValues_08004104(int ptrParam,int valueParam,int dataParam)\n\n{\n  *(uint *)(ptrParam + 0x20) = *(uint *)(ptrParam + 0x20) & 0xffffffef;\n  *(uint *)(ptrParam + 0x18) = dataParam << 0xc | *(uint *)(ptrParam + 0x18) & 0xffff0fff;\n  *(uint *)(ptrParam + 0x20) = valueParam << 4 | *(uint *)(ptrParam + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "ptrParam",
                "param_2": "valueParam",
                "param_3": "dataParam"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_parameter_value_0800416a",
            "code": "\nvoid updateParameterValue_0800416a(int dataAddress,ushort newValue)\n\n{\n  *(uint *)(dataAddress + 8) = *(uint *)(dataAddress + 8) & 0xffffff8f | (uint)(newValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_parameter_value_0800416a",
                "param_1": "dataAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_param_with_shift_080041a8",
            "code": "\nvoid updateParamWithShift_080041a8(int dataPointer,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(dataPointer + 8) = value1 | value3 << 8 | value2 | *(uint *)(dataPointer + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_param_with_shift_080041a8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bits_080041ea",
            "code": "\nvoid updateBits_080041ea(int data,uint position,int value)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (position & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | value << (position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bits_080041ea",
                "param_1": "data",
                "param_2": "position",
                "param_3": "value"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "set_flag_if_value_is_one_0800422e",
            "code": "\nundefined4 setFlagIfValueIsOne_0800422e(int *config,uint *values)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(config + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(config + 0xf) = 1;\n    *(uint *)(*config + 0x44) =\n         values[6] |\n         (values[6] |\n         (values[5] |\n         (values[4] |\n         (*values | (values[1] | (values[2] | values[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(config + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "set_flag_if_value_is_one_0800422e",
                "param_1": "config",
                "param_2": "values",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_080042de",
            "code": "\nundefined4 updateFlags_080042de(int *pointer,uint *data)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(pointer + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(pointer + 0xf) = 1;\n    *(undefined *)((int)pointer + 0x3d) = 2;\n    *(uint *)(*pointer + 4) = *(uint *)(*pointer + 4) & 0xffffff8f;\n    *(uint *)(*pointer + 4) = *data | *(uint *)(*pointer + 4);\n    *(uint *)(*pointer + 8) = *(uint *)(*pointer + 8) & 0xffffff7f;\n    *(uint *)(*pointer + 8) = data[1] | *(uint *)(*pointer + 8);\n    *(undefined *)((int)pointer + 0x3d) = 1;\n    *(undefined *)(pointer + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_080042de",
                "param_1": "pointer",
                "param_2": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "check_and_update_0800438a",
            "code": "\nundefined4 checkAndUpdate_0800438a(int *inputArray)\n\n{\n  undefined4 returnValue;\n  \n  if (inputArray == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)inputArray + 0x39) == '\\0') {\n      *(undefined *)(inputArray + 0xe) = 0;\n      FUNC_08004424(inputArray);\n    }\n    *(undefined *)((int)inputArray + 0x39) = 0x24;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xffffdfff;\n    calculate_checksum_080046ec(inputArray);\n    *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffb7ff;\n    *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xffffffd5;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x2000;\n    inputArray[0xf] = 0;\n    *(undefined *)((int)inputArray + 0x39) = 0x20;\n    *(undefined *)((int)inputArray + 0x3a) = 0x20;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "check_and_update_0800438a",
                "param_1": "inputArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **data,ushort *input,short inputLength,uint timeout)\n\n{\n  int result;\n  int temp;\n  undefined4 returnVal;\n  ushort *currentChar;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input == (ushort *)0x0) || (inputLength == 0)) {\n      returnVal = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      returnVal = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      result = get_global_data_080015a0();\n      *(short *)(data + 9) = inputLength;\n      *(short *)((int)data + 0x26) = inputLength;\n      currentChar = input;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              temp = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp = get_global_data_080015a0(), (uint)(temp - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          temp = 3;\nLAB_0800454c:\n          if (temp != 0) {\n            return 3;\n          }\n          (*data)[1] = *currentChar & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            currentChar = currentChar + 1;\n          }\n          else {\n            currentChar = (ushort *)((int)currentChar + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              temp = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp = get_global_data_080015a0(), (uint)(temp - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          temp = 3;\nLAB_08004614:\n          if (temp != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)currentChar;\n          currentChar = (ushort *)((int)currentChar + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (temp = get_global_data_080015a0(), (uint)(temp - result) <= timeout))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        returnVal = 0;\n      }\n      else {\n        returnVal = 3;\n      }\n    }\n  }\n  else {\n    returnVal = 2;\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "data",
                "param_2": "input",
                "param_3": "inputLength",
                "param_4": "timeout",
                "iVar1": "result",
                "iVar2": "temp",
                "uVar3": "returnVal",
                "local_58": "currentChar"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_checksum_080046ec",
            "code": "\nvoid calculateChecksum_080046ec(int *data)\n\n{\n  ulonglong quotient;\n  int shiftedData1;\n  int length;\n  uint checksum;\n  int shiftedData2;\n  undefined8 shiftedData3;\n  \n  *(uint *)(*data + 0x10) = data[3] | *(uint *)(*data + 0x10) & 0xffffcfff;\n  *(uint *)(*data + 0xc) =\n       *(uint *)(*data + 0xc) & 0xffffe9f3 | data[5] | data[2] | data[4];\n  *(uint *)(*data + 0x14) = data[6] | *(uint *)(*data + 0x14) & 0xfffffcff;\n  if (*data == 0x40013800) {\n    shiftedData3 = get_shifted_data_08003540();\n    quotient = (ulonglong)(uint)((int)shiftedData3 * 0x19) / (ulonglong)(uint)(data[1] << 2);\n    shiftedData1 = get_shifted_data_08003540((int)shiftedData3,(int)((ulonglong)shiftedData3 >> 0x20),(int)(quotient * 0x51eb851f));\n    length = data[1];\n    shiftedData3 = get_shifted_data_08003540();\n    checksum = ((uint)(shiftedData1 * 0x19) / (uint)(length << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedData3 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    shiftedData1 = get_shifted_data_08003540((int)shiftedData3,(int)((ulonglong)shiftedData3 >> 0x20),checksum * 0x51eb851f);\n    shiftedData2 = data[1];\n    length = get_shifted_data_08003540();\n    *(uint *)(*data + 8) =\n         ((((uint)(shiftedData1 * 0x19) / (uint)(shiftedData2 << 2) +\n           (int)(((ulonglong)(uint)(length * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (checksum / 100 & 0xf0);\n  }\n  else {\n    shiftedData3 = shift_data_by_offset_08003518();\n    quotient = (ulonglong)(uint)((int)shiftedData3 * 0x19) / (ulonglong)(uint)(data[1] << 2);\n    shiftedData1 = shift_data_by_offset_08003518((int)shiftedData3,(int)((ulonglong)shiftedData3 >> 0x20),(int)(quotient * 0x51eb851f));\n    length = data[1];\n    shiftedData3 = shift_data_by_offset_08003518();\n    checksum = ((uint)(shiftedData1 * 0x19) / (uint)(length << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedData3 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    shiftedData1 = shift_data_by_offset_08003518((int)shiftedData3,(int)((ulonglong)shiftedData3 >> 0x20),checksum * 0x51eb851f);\n    shiftedData2 = data[1];\n    length = shift_data_by_offset_08003518();\n    *(uint *)(*data + 8) =\n         ((((uint)(shiftedData1 * 0x19) / (uint)(shiftedData2 << 2) +\n           (int)(((ulonglong)(uint)(length * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (checksum / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "data",
                "uVar1": "quotient",
                "iVar2": "shiftedData1",
                "iVar3": "length",
                "uVar4": "checksum",
                "iVar5": "shiftedData2",
                "uVar6": "shiftedData3"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_data_0800491c",
            "code": "\nvoid initialize_data_0800491c(undefined4 *output_array)\n\n{\n  undefined data_1;\n  undefined data_2;\n  undefined data_3 [5];\n  \n  data_1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&data_1,1);\n  data_2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&data_2,1);\n  data_3[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,data_3,1);\n  *output_array = 0;\n  output_array[1] = 0;\n  output_array[2] = 0;\n  output_array[3] = 0;\n  output_array[4] = 0;\n  output_array[5] = 0;\n  output_array[6] = 0;\n  output_array[7] = 0;\n  output_array[8] = 0;\n  output_array[9] = 0;\n  output_array[10] = 0;\n  calculate_and_update_results_080049cc(output_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "param_1": "output_array",
                "local_13": "data_1",
                "local_12": "data_2",
                "local_11": "data_3"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_and_update_results_080049cc",
            "code": "\nvoid calculate_and_update_results_080049cc(int input_value)\n\n{\n  undefined4 uVar1;\n  undefined4 value_2;\n  undefined4 value_1;\n  undefined4 time_value;\n  int loop_counter;\n  int iteration_count;\n  undefined4 value_4;\n  undefined4 value_3;\n  undefined4 value_5;\n  undefined4 value_6;\n  \n  loop_counter = 1;\n  value_6 = 0;\n  value_5 = 0;\n  value_3 = 0;\n  value_4 = 0;\n  time_value = (*DAT_20000a50)();\n  iteration_count = 0;\n  while( true ) {\n    if (loop_counter <= iteration_count) break;\n    value_1 = 0;\n    value_2 = 0;\n    extract_values_08004ae0(input_value);\n    calculate_float_result_08004d78(input_value,&value_1,&value_2);\n    value_3 = calculate_floating_point_value_08000aa8(value_3,value_1);\n    value_4 = calculate_floating_point_value_08000aa8(value_4,value_2);\n    value_6 = calculate_floating_point_value_08000aa8(value_6,*(undefined4 *)(input_value + 0x10));\n    value_5 = calculate_floating_point_value_08000aa8(value_5,*(undefined4 *)(input_value + 0x14));\n    time_value = (*DAT_20000a50)();\n    iteration_count = iteration_count + 1;\n  }\n  uVar1 = calculate_unsigned_result_08000c10(loop_counter);\n  uVar1 = compute_float_08000e20(value_6,uVar1);\n  *(undefined4 *)(input_value + 0x1c) = uVar1;\n  uVar1 = calculate_unsigned_result_08000c10(loop_counter);\n  uVar1 = compute_float_08000e20(value_5,uVar1);\n  *(undefined4 *)(input_value + 0x20) = uVar1;\n  uVar1 = calculate_unsigned_result_08000c10(loop_counter);\n  uVar1 = compute_float_08000e20(value_3,uVar1);\n  *(undefined4 *)(input_value + 0x24) = uVar1;\n  uVar1 = calculate_unsigned_result_08000c10(loop_counter);\n  uVar1 = compute_float_08000e20(value_4,uVar1);\n  *(undefined4 *)(input_value + 0x28) = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_and_update_results_080049cc",
                "param_1": "input_value",
                "local_2c": "value_2",
                "local_28": "value_1",
                "local_24": "time_value",
                "local_20": "loop_counter",
                "local_1c": "iteration_count",
                "local_18": "value_4",
                "local_14": "value_3",
                "local_10": "value_5",
                "local_c": "value_6"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_values_08004ae0",
            "code": "\nvoid extractValues_08004ae0(undefined4 *outputArray)\n\n{\n  undefined4 uVar1;\n  undefined temp_1;\n  undefined temp_2;\n  undefined temp_3;\n  undefined temp_4;\n  undefined temp_5;\n  undefined temp_6;\n  undefined temp_7;\n  undefined temp_8;\n  undefined temp_9;\n  undefined temp_10;\n  undefined temp_11;\n  undefined temp_12;\n  undefined temp_13;\n  undefined temp_14;\n  short value_1;\n  short value_2;\n  short value_3;\n  short value_4;\n  short value_5;\n  short value_6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&temp_1,0xe);\n  value_6 = CONCAT11(temp_3,temp_4);\n  value_5 = CONCAT11(temp_5,temp_6);\n  value_4 = CONCAT11(temp_7,temp_8);\n  value_3 = CONCAT11(temp_9,temp_10);\n  value_2 = CONCAT11(temp_11,temp_12);\n  value_1 = CONCAT11(temp_13,temp_14);\n  uVar1 = calculateUnsignedResult((int)CONCAT11(temp_1,temp_2));\n  *outputArray = uVar1;\n  uVar1 = calculateUnsignedResult((int)value_6);\n  outputArray[1] = uVar1;\n  uVar1 = calculateUnsignedResult((int)value_5);\n  outputArray[2] = uVar1;\n  uVar1 = calculateUnsignedResult((int)value_4);\n  outputArray[3] = uVar1;\n  uVar1 = calculateUnsignedResult((int)value_3);\n  outputArray[4] = uVar1;\n  uVar1 = calculateUnsignedResult((int)value_2);\n  outputArray[5] = uVar1;\n  uVar1 = calculateUnsignedResult((int)value_1);\n  outputArray[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_values_08004ae0",
                "param_1": "outputArray",
                "local_2c": "temp_1",
                "local_2b": "temp_2",
                "local_2a": "temp_3",
                "local_29": "temp_4",
                "local_28": "temp_5",
                "local_27": "temp_6",
                "local_26": "temp_7",
                "local_25": "temp_8",
                "local_24": "temp_9",
                "local_23": "temp_10",
                "local_22": "temp_11",
                "local_21": "temp_12",
                "local_20": "temp_13",
                "local_1f": "temp_14",
                "local_1e": "value_1",
                "local_1c": "value_2",
                "local_1a": "value_3",
                "local_18": "value_4",
                "local_16": "value_5",
                "local_14": "value_6",
                "calculate_unsigned_result_08000c10": "calculateUnsignedResult"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculate_result_08004bd8(int input_data,undefined4 *output_data)\n\n{\n  undefined4 calculation_result_1;\n  undefined8 calculation_result_2;\n  undefined8 calculation_result_3;\n  \n  calculation_result_1 = perform_calculation_08000aa4(*(undefined4 *)(input_data + 0x10),*(undefined4 *)(input_data + 0x1c));\n  calculation_result_2 = convert_uint_to_ulong_long_08000418(DAT_200009e4);\n  calculation_result_3 = convert_uint_to_ulong_long_08000418(calculation_result_1);\n  calculation_result_3 = calculate_result_08004bd8_080004c8((int)calculation_result_3,(int)((ulonglong)calculation_result_3 >> 0x20),0x83f5c366,0x3f340215);\n  calculation_result_2 = calculate_sum_0800015c((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),(int)calculation_result_3,\n                       (int)((ulonglong)calculation_result_3 >> 0x20));\n  DAT_200009e4 = calculate_floating_point_080009fc((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20));\n  calculation_result_2 = convert_uint_to_ulong_long_08000418(*(undefined4 *)(input_data + 4));\n  calculation_result_2 = calculate_improved_floating_point_0800071c((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),0,0x40b00000);\n  calculation_result_3 = convert_uint_to_ulong_long_08000418(*(undefined4 *)(input_data + 8));\n  calculation_result_3 = calculate_improved_floating_point_0800071c((int)calculation_result_3,(int)((ulonglong)calculation_result_3 >> 0x20),0,0x40b00000);\n  calculation_result_2 = thunk_calculate_result_08004bd8_08005838((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),(int)calculation_result_3,\n                             (int)((ulonglong)calculation_result_3 >> 0x20));\n  calculation_result_2 = calculate_result_08004bd8_080004c8((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),0,0x40668000);\n  calculation_result_2 = calculate_improved_floating_point_0800071c((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),0x54442d18,0x400921fb);\n  calculation_result_3 = convert_uint_to_ulong_long_08000418(*(undefined4 *)(input_data + 0x24));\n  calculation_result_2 = perform_arithmetic_operation_08000158((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),(int)calculation_result_3,\n                       (int)((ulonglong)calculation_result_3 >> 0x20));\n  calculation_result_2 = calculate_sum_0800015c((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),0,0x40568000);\n  calculation_result_1 = calculate_floating_point_080009fc((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    calculation_result_2 = convert_uint_to_ulong_long_08000418(DAT_200009e4);\n    calculation_result_2 = calculate_result_08004bd8_080004c8((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),0x9999999a,0x3fe99999);\n    calculation_result_3 = convert_uint_to_ulong_long_08000418(calculation_result_1);\n    calculation_result_3 = calculate_result_08004bd8_080004c8((int)calculation_result_3,(int)((ulonglong)calculation_result_3 >> 0x20),0x9999999a,0x3fc99999);\n    calculation_result_2 = calculate_sum_0800015c((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),(int)calculation_result_3,\n                         (int)((ulonglong)calculation_result_3 >> 0x20));\n    DAT_200009e4 = calculate_floating_point_080009fc((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = calculation_result_1;\n  }\n  *output_data = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input_data",
                "param_2": "output_data",
                "uVar1": "calculation_result_1",
                "uVar2": "calculation_result_2",
                "uVar3": "calculation_result_3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08000aa4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_float_result_08004d78",
            "code": "\nvoid calculate_float_result_08004d78(undefined4 *input_data,undefined4 *result_1,undefined4 *result_2)\n\n{\n  undefined4 converted_input_1;\n  undefined4 converted_input_2;\n  undefined4 converted_input_3;\n  undefined8 temp_result;\n  undefined8 temp_result2;\n  \n  converted_input_1 = compute_float_08000e20(*input_data,0x45800000);\n  converted_input_2 = compute_float_08000e20(input_data[1],0x45800000);\n  converted_input_3 = compute_float_08000e20(input_data[2],0x45800000);\n  temp_result = convert_uint_to_ulong_long_08000418(converted_input_2);\n  temp_result2 = convert_uint_to_ulong_long_08000418(converted_input_3);\n  temp_result = thunk_calculate_result_08005838((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result2,\n                             (int)((ulonglong)temp_result2 >> 0x20));\n  temp_result = calculate_result_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x40668000);\n  temp_result = calculate_improved_floating_point_0800071c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x54442d18,0x400921fb);\n  converted_input_2 = calculate_floating_point_080009fc((int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n  temp_result = convert_uint_to_ulong_long_08000418(converted_input_1);\n  temp_result2 = convert_uint_to_ulong_long_08000418(converted_input_3);\n  temp_result = thunk_calculate_result_08005838((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result2,\n                             (int)((ulonglong)temp_result2 >> 0x20));\n  temp_result = calculate_result_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x40668000);\n  temp_result = calculate_improved_floating_point_0800071c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x54442d18,0x400921fb);\n  converted_input_1 = calculate_floating_point_080009fc((int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n  *result_1 = converted_input_2;\n  *result_2 = converted_input_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_float_result_08004d78",
                "param_1": "input_data",
                "param_2": "result_1",
                "param_3": "result_2",
                "uVar1": "converted_input_1",
                "uVar2": "converted_input_2",
                "uVar3": "converted_input_3",
                "uVar4": "temp_result",
                "uVar5": "temp_result2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "perform_software_interrupt_08004e6c",
            "code": "\nvoid performSoftwareInterrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "perform_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_interrupt_08004e74",
            "code": "\nundefined4 initialize_interrupt_08004e74(undefined4 interrupt_type)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = perform_software_interrupt_08004e6c(1,interrupt_type,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_interrupt_08004e74",
                "param_1": "interrupt_type",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "process_and_return_data_08004ea4",
            "code": "\nvoid process_and_return_data_08004ea4(undefined input_1,undefined input_2,undefined4 config_value,undefined2 additional_info)\n\n{\n  process_data_08001ccc(&DAT_20000a88,input_1,input_2,1,config_value,additional_info,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "process_and_return_data_08004ea4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "config_value",
                "param_4": "additional_info"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "process_data_08004ee8",
            "code": "\nvoid process_data_08004ee8(undefined data_1,undefined data_2,undefined4 value_1,undefined2 value_2)\n\n{\n  process_data_08004ee8_08001f6c(&DAT_20000a88,data_1,data_2,1,value_1,value_2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "value_1",
                "param_4": "value_2"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "retrieve_global_data_08004f2c",
            "code": "\nundefined4 retrieveGlobalData_08004f2c(void)\n\n{\n  undefined4 globalData;\n  \n  globalData = get_global_data_080015a0();\n  return globalData;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "retrieve_global_data_08004f2c",
                "uVar1": "globalData"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_data_08004f3c",
            "code": "\nvoid process_data_08004f3c(undefined4 data_ptr,undefined2 data_length)\n\n{\n  process_data_08004f3c_08004436(&DAT_20000adc,data_ptr,data_length,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data_ptr",
                "param_2": "data_length"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_08004f60",
            "code": "\nvoid initializeMemory_08004f60(void)\n\n{\n  fillMemory(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60",
                "fill_memory_08005d68": "fillMemory"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "calculate_pitch_08004f78",
            "code": "\nvoid calculatePitch_08004f78(void)\n\n{\n  undefined4 offset;\n  int concatenationFailed;\n  undefined4 unsignedResult;\n  uint xorValue;\n  undefined8 convertedValue;\n  byte validatedParam;\n  \n  extract_values_08004ae0(&DAT_20000a5c);\n  calculate_result_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  initialize_memory_08004f60();\n  convertedValue = convert_uint_to_ulong_long_08000418(DAT_20000ba0);\n  initialize_data_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  offset = get_byte_offset_08005e40(&DAT_20000ba8);\n  process_data_08004f3c(&DAT_20000ba8,offset);\n  DAT_200009f8 = perform_calculation_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculate_float_value_08000cb8(DAT_20000a00,DAT_200009f8);\n  offset = calculate_float_value_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculate_floating_point_value_08000aa8(offset,DAT_20000b5c);\n  offset = calculate_unsigned_result_08000c10(DAT_20000010);\n  concatenationFailed = check_if_concatenation_failed_08000ff4(offset,DAT_20000b5c);\n  if (concatenationFailed == 0) {\n    offset = calculate_unsigned_result_08000c10(DAT_200009f4);\n    concatenationFailed = is_concated_integer_null_08001030(offset,DAT_20000b5c);\n    if (concatenationFailed != 0) {\n      DAT_20000b5c = calculate_result_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = calculate_result_08000c08(DAT_20000010);\n  }\n  xorValue = DAT_20000a08 ^ 0x80000000;\n  offset = perform_calculation_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculate_float_value_08000cb8(xorValue,offset);\n  offset = calculate_floating_point_value_08000aa8(DAT_20000be8,DAT_20000b5c);\n  offset = calculate_floating_point_value_08000aa8(offset,DAT_20000a58);\n  unsignedResult = calculate_unsigned_result_08000c10(DAT_20000010);\n  concatenationFailed = is_concated_integer_null_08001030(offset,unsignedResult);\n  if (concatenationFailed == 0) {\n    unsignedResult = calculate_unsigned_result_08000c10(DAT_200009f4);\n    concatenationFailed = check_if_concatenation_failed_08000ff4(offset,unsignedResult);\n    if (concatenationFailed == 0) {\n      validatedParam = validate_unsigned_param_08001044(offset);\n    }\n    else {\n      validatedParam = DAT_200009f4;\n    }\n  }\n  else {\n    validatedParam = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  concatenationFailed = is_concated_integer_null_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,2,concatenationFailed != 0);\n  concatenationFailed = is_concated_integer_null_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,4,concatenationFailed == 0);\n  concatenationFailed = is_concated_integer_null_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,8,concatenationFailed != 0);\n  concatenationFailed = is_concated_integer_null_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,0x10,concatenationFailed == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)validatedParam;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)validatedParam;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "calculate_pitch_08004f78",
                "uVar1": "offset",
                "iVar2": "concatenationFailed",
                "uVar3": "unsignedResult",
                "uVar4": "xorValue",
                "uVar5": "convertedValue",
                "local_11": "validatedParam"
            },
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "called": [
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000418",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08004ae0",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08001a80",
                "FUN_08000c08",
                "FUN_08000aa8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_program_loop_08005224",
            "code": "\nvoid initialize_program_loop_08005224(void)\n\n{\n  initialize_memory_system();\n  initialize_program();\n  initialize_bitmask();\n  initialize_data1();\n  initialize_data2();\n  initialize_data3();\n  initialize_data4();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  set_and_update_flags(&DAT_20000b1c,0);\n  set_and_update_flags(&DAT_20000b1c,0xc);\n  initialize_data5(&DAT_20000a5c);\n  set_flags(&DAT_20000b60);\n  initialize_interrupt(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_program_loop_08005224",
                "initialize_memory_system_080014f0": "initialize_memory_system",
                "initialize_program_080052a0": "initialize_program",
                "initialize_bitmask_080055f4": "initialize_bitmask",
                "initialize_data_08005348": "initialize_data1",
                "initialize_data_08005598": "initialize_data2",
                "initialize_data_08005500": "initialize_data3",
                "initialize_data_080053b0": "initialize_data4",
                "set_and_update_flags_080036a8": "set_and_update_flags",
                "initialize_data_0800491c": "initialize_data5",
                "set_flags_0800360c": "set_flags",
                "initialize_interrupt_08004e74": "initialize_interrupt"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080014f0",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_program_080052a0",
            "code": "\nvoid initializeProgram_080052a0(void)\n\n{\n  int result;\n  undefined8 uVar2;\n  undefined4 flag;\n  undefined4 value;\n  undefined4 size;\n  undefined4 count;\n  undefined4 index;\n  undefined4 enabled;\n  undefined4 maxValue;\n  undefined4 counter;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  enabled = 1;\n  maxValue = 0x10000;\n  counter = 0;\n  constant1 = 1;\n  constant2 = 2;\n  constant3 = 0x10000;\n  constant4 = 0x1c0000;\n  result = checkFlags(&enabled);\n  if (result != 0) {\n    infiniteLoop(\"../src/main.c\",0x151);\n  }\n  flag = 0xf;\n  value = 2;\n  size = 0x80;\n  count = 0;\n  index = 0;\n  result = calculateTimeAndInitMemory(&flag,2);\n  if (result != 0) {\n    infiniteLoop(\"../src/main.c\",0x15e);\n  }\n  uVar2 = getData();\n  initializeMemory((uint)uVar2 / 1000,(int)((ulonglong)uVar2 >> 0x20),(uint)uVar2 * 0x10624dd3);\n  updateData(4);\n  updateMemory(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_program_080052a0",
                "local_44": "flag",
                "local_40": "value",
                "local_3c": "size",
                "local_38": "count",
                "local_34": "index",
                "local_30": "enabled",
                "local_2c": "maxValue",
                "local_28": "counter",
                "local_20": "constant1",
                "local_14": "constant2",
                "local_10": "constant3",
                "local_c": "constant4",
                "iVar1": "result",
                "handle_flags_08002d98": "checkFlags",
                "infinite_loop_08005674": "infiniteLoop",
                "calculate_execution_time_and_initialize_memory_08003260": "calculateTimeAndInitMemory",
                "get_data_08003504": "getData",
                "initialize_memory_08001762": "initializeMemory",
                "update_data_0800177c": "updateData",
                "update_memory_0800172a": "updateMemory"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08005674",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800177c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = calculate_data_08001ab0(&DAT_20000a88);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_data_080053b0",
            "code": "\nvoid initializeData_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  undefined4 param9;\n  undefined4 param10;\n  undefined4 param11;\n  undefined4 param12;\n  undefined4 param13;\n  undefined4 param14;\n  undefined4 param15;\n  undefined4 param16;\n  undefined4 param17 [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = validate_data_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",399);\n  }\n  param17[0] = 0x1000;\n  iVar1 = process_parameter_08003a94(&DAT_20000b1c,param17);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = handle_param1_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x198);\n  }\n  param15 = 0;\n  param16 = 0;\n  iVar1 = update_flags_080042de(&DAT_20000b1c,&param15);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x19f);\n  }\n  param8 = 0x60;\n  param9 = 0;\n  param10 = 0;\n  param11 = 0;\n  param12 = 0;\n  param13 = 0;\n  param14 = 0;\n  iVar1 = update_data_08003908(&DAT_20000b1c,&param8,0);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = update_data_08003908(&DAT_20000b1c,&param8,0xc);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1b0);\n  }\n  param1 = 0;\n  param2 = 0;\n  param3 = 0;\n  param4 = 0;\n  param5 = 0;\n  param6 = 0x2000;\n  param7 = 0;\n  iVar1 = set_flag_if_value_is_one_0800422e(&DAT_20000b1c,&param1);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1bc);\n  }\n  initialize_bitmasks_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_data_080053b0",
                "local_58": "param1",
                "local_54": "param2",
                "local_50": "param3",
                "local_4c": "param4",
                "local_48": "param5",
                "local_44": "param6",
                "local_40": "param7",
                "local_3c": "param8",
                "local_38": "param9",
                "local_34": "param10",
                "local_30": "param11",
                "local_2c": "param12",
                "local_28": "param13",
                "local_24": "param14",
                "local_20": "param15",
                "local_1c": "param16",
                "local_18": "param17"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_08003908",
                "FUN_0800422e",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_data_08005500",
            "code": "\nvoid initializeData_08005500(void)\n\n{\n  int iVar1;\n  undefined4 bufferSize;\n  undefined4 flag;\n  undefined4 parameters [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  iVar1 = validate_data_080035a4(&DAT_20000b60);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d0);\n  }\n  parameters[0] = 0x1000;\n  iVar1 = process_parameter_08003a94(&DAT_20000b60,parameters);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  flag = 0;\n  iVar1 = update_flags_080042de(&DAT_20000b60,&bufferSize);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_data_08005500",
                "local_20": "bufferSize",
                "local_1c": "flag",
                "local_18": "parameters"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_08005598",
            "code": "\nvoid initializeData_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = check_and_update_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_bitmask_080055f4",
            "code": "\n\n\nvoid initializeBitmask_080055f4(void)\n\n{\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  setBitmaskParameterValue(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  parameter1 = 0x1e;\n  parameter2 = 1;\n  parameter3 = 2;\n  updateBitmasks(0x40010800,&parameter1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_bitmask_080055f4",
                "set_param_value_08001a80": "setBitmaskParameterValue",
                "local_18": "parameter1",
                "local_14": "parameter2",
                "local_c": "parameter3",
                "update_bitmasks_080017c4": "updateBitmasks"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_bitmasks_08005680",
            "code": "\nvoid initializeBitmasks_08005680(int *bitmaskArray)\n\n{\n  undefined4 initialValue;\n  undefined4 size;\n  undefined4 count;\n  \n  if (*bitmaskArray == 0x40012c00) {\n    initialValue = 0x900;\n    size = 2;\n    count = 2;\n    update_bitmasks_080017c4(0x40010800,&initialValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_bitmasks_08005680",
                "param_1": "bitmaskArray",
                "local_18": "initialValue",
                "local_14": "size",
                "local_c": "count"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "increment_and_calculate_pitch_08005704",
            "code": "\nvoid increment_and_calculate_pitch_08005704(void)\n\n{\n  increment_data_value();\n  calculate_pitch();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "increment_and_calculate_pitch_08005704",
                "increment_data_value_0800157c": "increment_data_value",
                "calculate_pitch_080017b4": "calculate_pitch"
            },
            "calling": [],
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_flags_08005714",
            "code": "\nvoid initialize_flags_08005714(void)\n\n{\n  process_flags_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_flags_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *global_variable_ptr;\n  undefined *result;\n  undefined local_buffer [4];\n  int remaining_size;\n  undefined *current_ptr;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_ptr = DAT_20000a10;\n  if (local_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    global_variable_ptr = (undefined4 *)get_global_variable_08005d14();\n    *global_variable_ptr = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "global_variable_ptr",
                "puVar2": "result",
                "auStack_18": "local_buffer",
                "local_14": "remaining_size",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_system_08005780",
            "code": "\n\n\nvoid initializeSystem_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_system_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_08005780();\n  execute_function_array_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_program_loop_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_floating_point_value_thunk_08005838",
            "code": "\nuint calculateFloatingPointValue_thunk_08005838(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = value4 & 0x7fffffff;\n  if ((0x7ff00000 < (tempVar4 | (-value3 | value3) >> 0x1f)) ||\n     (tempVar5 = value2 & 0x7fffffff, 0x7ff00000 < (tempVar5 | (-value1 | value1) >> 0x1f))) {\n    tempVar4 = calculate_sum_0800015c(value3,value4,value1,value2);\n    return tempVar4;\n  }\n  if ((value4 + 0xc0100000 | value3) == 0) {\n    tempVar4 = improved_calculate_080059f0();\n    return tempVar4;\n  }\n  tempVar3 = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n  if ((tempVar5 | value1) == 0) {\n    if (tempVar3 == 2) {\n      return 0x54442d18;\n    }\n    if (tempVar3 != 3) {\n      return value1;\n    }\n  }\n  else if ((tempVar4 | value3) != 0) {\n    if (tempVar4 == 0x7ff00000) {\n      if (tempVar5 == 0x7ff00000) {\n        if (tempVar3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (tempVar3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (tempVar3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (tempVar3 == 2) {\n        return 0x54442d18;\n      }\n      if (tempVar3 != 3) {\n        if (tempVar3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (tempVar5 != 0x7ff00000) {\n      tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n      if (tempVar1 < 0x3d) {\n        if (((int)value4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n          tempVar6 = 0;\n        }\n        else {\n          calculate_improved_floating_point_0800071c(value1,value2,value3,value4,value4);\n          FUNC_08005d0c();\n          tempVar6 = improved_calculate_080059f0();\n        }\n      }\n      else {\n        tempVar6 = 0x3ff921fb54442d18;\n      }\n      tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n      tempVar4 = (uint)tempVar6;\n      if (tempVar3 == 1) {\n        return tempVar4;\n      }\n      if (tempVar3 == 2) {\n        tempVar6 = perform_arithmetic_operation_08000158(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n        tempVar4 = perform_arithmetic_operation_08000158(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n        return tempVar4;\n      }\n      if (tempVar3 != 0) {\n        tempVar6 = perform_arithmetic_operation_08000158(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n        tempVar4 = perform_arithmetic_operation_08000158((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n        return tempVar4;\n      }\n      return tempVar4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_floating_point_value_thunk_08005838",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculate_result_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp4 | (-input3 | input3) >> 0x1f)) ||\n     (temp5 = input2 & 0x7fffffff, 0x7ff00000 < (temp5 | (-input1 | input1) >> 0x1f))) {\n    temp4 = calculate_sum_0800015c(input3,input4,input1,input2);\n    return temp4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp4 = improved_calculate_080059f0();\n    return temp4;\n  }\n  temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp5 | input1) == 0) {\n    if (temp3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp3 != 3) {\n      return input1;\n    }\n  }\n  else if ((temp4 | input3) != 0) {\n    if (temp4 == 0x7ff00000) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp3 != 3) {\n        if (temp3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp5 != 0x7ff00000) {\n      temp1 = (int)(temp5 - temp4) >> 0x14;\n      if (temp1 < 0x3d) {\n        if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n          temp6 = 0;\n        }\n        else {\n          calculate_improved_floating_point_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          temp6 = improved_calculate_080059f0();\n        }\n      }\n      else {\n        temp6 = 0x3ff921fb54442d18;\n      }\n      temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp4 = (uint)temp6;\n      if (temp3 == 1) {\n        return temp4;\n      }\n      if (temp3 == 2) {\n        temp6 = perform_arithmetic_operation_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = perform_arithmetic_operation_08000158(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        return temp4;\n      }\n      if (temp3 != 0) {\n        temp6 = perform_arithmetic_operation_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = perform_arithmetic_operation_08000158((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n        return temp4;\n      }\n      return temp4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "improved_calculate_080059f0",
            "code": "\nundefined8 improved_calculate_080059f0(int input_value,uint flags,undefined4 temp_value_1,undefined4 temp_value_2)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  uint unsigned_flags;\n  int operation_type;\n  undefined8 result_value_1;\n  undefined8 result_value_2;\n  \n  result_value_2 = CONCAT44(flags,input_value);\n  unsigned_flags = flags & 0x7fffffff;\n  if (unsigned_flags < 0x44100000) {\n    if (unsigned_flags < 0x3fdc0000) {\n      if (unsigned_flags < 0x3e200000) {\n        result_value_1 = calculate_sum_0800015c(input_value,flags,0x8800759c,0x7e37e43c,temp_value_2);\n        operation_type = check_if_input_is_empty_080009e8((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),0,0x3ff00000);\n        if (operation_type != 0) {\n          return CONCAT44(flags,input_value);\n        }\n      }\n      operation_type = -1;\n    }\n    else {\n      result_value_2 = FUNC_08005d0c();\n      temp_4 = (undefined4)((ulonglong)result_value_2 >> 0x20);\n      temp_1 = (undefined4)result_value_2;\n      if (unsigned_flags < 0x3ff30000) {\n        if (unsigned_flags < 0x3fe60000) {\n          result_value_2 = calculate_sum_0800015c(temp_1,temp_4,temp_1,temp_4);\n          result_value_2 = perform_arithmetic_operation_08000158((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),0,0x3ff00000);\n          result_value_1 = calculate_sum_0800015c(temp_1,temp_4,0,0x40000000);\n          result_value_2 = calculate_improved_floating_point_0800071c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),(int)result_value_1,\n                                (int)((ulonglong)result_value_1 >> 0x20));\n          operation_type = 0;\n        }\n        else {\n          result_value_2 = perform_arithmetic_operation_08000158(temp_1,temp_4,0,0x3ff00000);\n          result_value_1 = calculate_sum_0800015c(temp_1,temp_4,0,0x3ff00000);\n          result_value_2 = calculate_improved_floating_point_0800071c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),(int)result_value_1,\n                                (int)((ulonglong)result_value_1 >> 0x20));\n          operation_type = 1;\n        }\n      }\n      else if (unsigned_flags < 0x40038000) {\n        result_value_2 = perform_arithmetic_operation_08000158(temp_1,temp_4,0,0x3ff80000);\n        result_value_1 = calculate_result_080004c8(temp_1,temp_4,0,0x3ff80000);\n        result_value_1 = calculate_sum_0800015c((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),0,0x3ff00000);\n        result_value_2 = calculate_improved_floating_point_0800071c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),(int)result_value_1,\n                              (int)((ulonglong)result_value_1 >> 0x20));\n        operation_type = 2;\n      }\n      else {\n        result_value_2 = calculate_improved_floating_point_0800071c(0,0xbff00000,temp_1,temp_4);\n        operation_type = 3;\n      }\n    }\n    temp_6 = (undefined4)((ulonglong)result_value_2 >> 0x20);\n    temp_5 = (undefined4)result_value_2;\n    result_value_2 = calculate_result_080004c8(temp_5,temp_6,temp_5,temp_6);\n    temp_2 = (undefined4)((ulonglong)result_value_2 >> 0x20);\n    temp_1 = (undefined4)result_value_2;\n    result_value_2 = calculate_result_080004c8(temp_1,temp_2,temp_1,temp_2);\n    temp_3 = (undefined4)((ulonglong)result_value_2 >> 0x20);\n    temp_4 = (undefined4)result_value_2;\n    result_value_2 = calculate_result_080004c8(temp_4,temp_3,0xe322da11,0x3f90ad3a);\n    result_value_2 = calculate_sum_0800015c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),0x24760deb,0x3fa97b4b);\n    result_value_2 = calculate_result_080004c8((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),temp_4,temp_3);\n    result_value_2 = calculate_sum_0800015c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),0xa0d03d51,0x3fb10d66);\n    result_value_2 = calculate_result_080004c8((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),temp_4,temp_3);\n    result_value_2 = calculate_sum_0800015c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),0xc54c206e,0x3fb745cd);\n    result_value_2 = calculate_result_080004c8((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),temp_4,temp_3);\n    result_value_2 = calculate_sum_0800015c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),0x920083ff,0x3fc24924);\n    result_value_2 = calculate_result_080004c8((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),temp_4,temp_3);\n    result_value_2 = calculate_sum_0800015c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),0x5555550d,0x3fd55555);\n    result_value_2 = calculate_result_080004c8((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),temp_1,temp_2);\n    result_value_1 = calculate_result_080004c8(temp_4,temp_3,0x2c6a6c2f,0xbfa2b444);\n    result_value_1 = perform_arithmetic_operation_08000158((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),0x52defd9a,0x3fadde2d);\n    result_value_1 = calculate_result_080004c8((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),temp_4,temp_3);\n    result_value_1 = perform_arithmetic_operation_08000158((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    result_value_1 = calculate_result_080004c8((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),temp_4,temp_3);\n    result_value_1 = perform_arithmetic_operation_08000158((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),0xfe231671,0x3fbc71c6);\n    result_value_1 = calculate_result_080004c8((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),temp_4,temp_3);\n    result_value_1 = perform_arithmetic_operation_08000158((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),0x9998ebc4,0x3fc99999);\n    result_value_1 = calculate_result_080004c8((int)result_value_1,(int)((ulonglong)result_value_1 >> 0x20),temp_4,temp_3);\n    result_value_2 = calculate_sum_0800015c((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),(int)result_value_1,\n                          (int)((ulonglong)result_value_1 >> 0x20));\n    result_value_2 = calculate_result_080004c8((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),temp_5,temp_6);\n    temp_1 = (undefined4)((ulonglong)result_value_2 >> 0x20);\n    if (operation_type == -1) {\n      result_value_2 = perform_arithmetic_operation_08000158(temp_5,temp_6,(int)result_value_2,temp_1);\n      return result_value_2;\n    }\n    operation_type = operation_type * 8;\n    result_value_2 = perform_arithmetic_operation_08000158((int)result_value_2,temp_1,*(undefined4 *)(&UNK_08009ee8 + operation_type),\n                          *(undefined4 *)(&UNK_08009eec + operation_type));\n    result_value_2 = perform_arithmetic_operation_08000158((int)result_value_2,(int)((ulonglong)result_value_2 >> 0x20),temp_5,temp_6);\n    result_value_2 = perform_arithmetic_operation_08000158(*(undefined4 *)(&UNK_08009ec8 + operation_type),\n                          *(undefined4 *)(&UNK_08009ecc + operation_type),(int)result_value_2,\n                          (int)((ulonglong)result_value_2 >> 0x20));\n    if ((int)flags < 0) {\n      return CONCAT44((int)((ulonglong)result_value_2 >> 0x20) + -0x80000000,(int)result_value_2);\n    }\n  }\n  else {\n    if ((unsigned_flags < 0x7ff00001) && ((unsigned_flags != 0x7ff00000 || (input_value == 0)))) {\n      temp_1 = 0xbff921fb;\n      if (0 < (int)flags) {\n        temp_1 = 0x3ff921fb;\n      }\n      return CONCAT44(temp_1,0x54442d18);\n    }\n    result_value_2 = calculate_sum_0800015c(input_value,flags,input_value,flags,temp_value_2);\n  }\n  return result_value_2;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "improved_calculate_080059f0",
                "param_1": "input_value",
                "param_2": "flags",
                "param_3": "temp_value_1",
                "param_4": "temp_value_2",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "unsigned_flags",
                "iVar8": "operation_type",
                "uVar9": "result_value_1",
                "uVar10": "result_value_2"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_global_variable_08005d14",
            "code": "\nundefined4 getGlobalVariable_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_global_variable_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_function_array_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctionArray_08005d20(void)\n\n{\n  int counter;\n  code **functionArray;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionArray = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionArray)();\n    functionArray = functionArray + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_function_array_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_08005d68",
            "code": "\nvoid fillMemory_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *tempPtr;\n  uint remainingSize;\n  undefined4 pattern;\n  bool isSizeZero;\n  \n  if (((uint)dest & 3) != 0) {\n    remainingSize = size - 1;\n    destPtr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      size = remainingSize;\n      if (((uint)dest & 3) == 0) break;\n      isSizeZero = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      destPtr = dest;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    destPtr = dest;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      destPtr = dest + 4;\n      do {\n        destPtr[-4] = pattern;\n        destPtr[-3] = pattern;\n        destPtr[-2] = pattern;\n        destPtr[-1] = pattern;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (remainingSize & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      destPtr = dest;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)destPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    destPtr = dest;\n    do {\n      tempPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = tempPtr;\n    } while ((undefined4 *)(size + (int)dest) != tempPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "tempPtr",
                "uVar3": "remainingSize",
                "uVar4": "pattern",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_data_08005dfc",
            "code": "\nvoid initializeData_08005dfc(undefined *input,undefined4 size,undefined4 pointer,undefined4 value)\n\n{\n  undefined *array [2];\n  undefined4 maxSize;\n  undefined4 constant;\n  undefined *current;\n  undefined4 minSize;\n  undefined4 arg3;\n  undefined4 arg4;\n  \n  minSize = 0x7fffffff;\n  maxSize = 0x7fffffff;\n  constant = 0xffff0208;\n  array[0] = input;\n  current = input;\n  arg3 = pointer;\n  arg4 = value;\n  FUNC_08005e9c(DAT_2000001c,array,size,&arg3);\n  *array[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_data_08005dfc",
                "param_1": "input",
                "param_2": "size",
                "param_3": "pointer",
                "param_4": "value",
                "local_80": "array",
                "local_78": "maxSize",
                "uStack_74": "constant",
                "local_70": "current",
                "local_6c": "minSize",
                "uStack_8": "arg3",
                "uStack_4": "arg4"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "get_byte_offset_08005e40",
            "code": "\nint get_byte_offset_08005e40(uint address)\n\n{\n  int alignment;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(address & 0xfffffffc);\n  alignment = -(address & 3);\n  value = *ptr;\n  if ((address & 3) != 0) {\n    value = value | 0xffffffffU >> ((alignment + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    alignment = alignment + 4;\n  }\n  return alignment + (0x1fU - LZCOUNT(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "get_byte_offset_08005e40",
                "param_1": "address",
                "iVar1": "alignment",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_updated_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)get_byte_offset_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = allocate_and_initialize_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_updated_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)get_byte_offset_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_updated_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_input_validity_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = check_carry_and_zero_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = validate_input_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_input_validity_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)allocate_and_initialize_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_normalized_value_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = validate_and_return_input_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_normalized_value_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = validate_and_return_input_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)parse_float_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = validate_and_return_input_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)parse_float_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)parse_float_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = validate_and_return_input_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)get_byte_offset_08005e40(piVar23);\n        }\n        else {\n          iVar3 = find_first_occurrence_of_byte_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        handle_params_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_safe_string_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = handle_params_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = validate_and_return_input_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = perform_calculation_0800119c();\n    uVar34 = calculate_shifted_value_080003f4();\n    uVar33 = perform_arithmetic_operation_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = check_if_input_is_empty_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = validate_and_return_input_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = copy_and_update_memory_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_update_memory_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_update_memory_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = validate_and_return_input_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = copy_and_update_memory_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = validate_and_return_input_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = copy_and_update_memory_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_update_memory_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = copy_and_update_memory_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = copy_and_update_memory_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_memory_and_data_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_memory_and_data_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08005e40",
                "FUN_0800119c",
                "FUN_080011ec",
                "FUN_080009c0",
                "FUN_08008ad4",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_080009e8",
                "FUN_0800901c",
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080096e0",
                "FUN_080088ec",
                "FUN_080079e8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_division_080078c0",
            "code": "\nuint calculateDivision_080078c0(int dividend,int divisor)\n\n{\n  uint quotient;\n  uint *dividendPtr;\n  int carry;\n  int divisorLength;\n  int dividendLength;\n  uint result;\n  uint *divisorPtr;\n  uint *dividendDigitsPtr;\n  uint *lastDivisorDigitPtr;\n  uint carryHigh;\n  uint *dividendDigitPtr;\n  uint *nextDividendDigitPtr;\n  \n  divisorLength = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < divisorLength) {\n    return 0;\n  }\n  dividendLength = divisorLength + -1;\n  divisorPtr = (uint *)(divisor + 0x14);\n  dividendDigitsPtr = (uint *)(dividend + 0x14);\n  result = dividendDigitsPtr[dividendLength] / (divisorPtr[dividendLength] + 1);\n  lastDivisorDigitPtr = divisorPtr + dividendLength;\n  if (result != 0) {\n    quotient = 0;\n    carry = 0;\n    dividendPtr = dividendDigitsPtr;\n    dividendDigitPtr = divisorPtr;\n    do {\n      nextDividendDigitPtr = dividendDigitPtr + 1;\n      quotient = result * (*dividendDigitPtr & 0xffff) + quotient;\n      carryHigh = result * (*dividendDigitPtr >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*dividendPtr & 0xffff);\n      carry = ((*dividendPtr >> 0x10) - (carryHigh & 0xffff)) + ((int)quotient >> 0x10);\n      *dividendPtr = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = carryHigh >> 0x10;\n      dividendPtr = dividendPtr + 1;\n      dividendDigitPtr = nextDividendDigitPtr;\n    } while (nextDividendDigitPtr <= lastDivisorDigitPtr);\n    if (dividendDigitsPtr[dividendLength] == 0) {\n      if ((dividendDigitsPtr < dividendDigitsPtr + divisorLength + -2) && (dividendDigitsPtr[divisorLength + -2] == 0)) {\n        dividendPtr = dividendDigitsPtr + divisorLength + -3;\n        do {\n          dividendLength = dividendLength + -1;\n          if (dividendPtr <= dividendDigitsPtr) break;\n          quotient = *dividendPtr;\n          dividendPtr = dividendPtr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = dividendLength;\n    }\n  }\n  divisorLength = compare_arrays_080094f8();\n  if (-1 < divisorLength) {\n    divisorLength = 0;\n    result = result + 1;\n    dividendPtr = dividendDigitsPtr;\n    do {\n      dividendDigitPtr = divisorPtr + 1;\n      quotient = (divisorLength - (*divisorPtr & 0xffff)) + (*dividendPtr & 0xffff);\n      divisorLength = ((*dividendPtr >> 0x10) - (*divisorPtr >> 0x10)) + ((int)quotient >> 0x10);\n      *dividendPtr = quotient & 0xffff | divisorLength * 0x10000;\n      divisorLength = divisorLength >> 0x10;\n      dividendPtr = dividendPtr + 1;\n      divisorPtr = dividendDigitPtr;\n    } while (dividendDigitPtr <= lastDivisorDigitPtr);\n    if (dividendDigitsPtr[dividendLength] == 0) {\n      if ((dividendDigitsPtr < dividendDigitsPtr + dividendLength + -1) && (dividendDigitsPtr[dividendLength + -1] == 0)) {\n        divisorPtr = dividendDigitsPtr + dividendLength + -2;\n        do {\n          dividendLength = dividendLength + -1;\n          if (divisorPtr <= dividendDigitsPtr) break;\n          quotient = *divisorPtr;\n          divisorPtr = divisorPtr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = dividendLength;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "dividendPtr",
                "iVar3": "carry",
                "iVar4": "divisorLength",
                "iVar5": "dividendLength",
                "uVar6": "result",
                "puVar7": "divisorPtr",
                "puVar8": "dividendDigitsPtr",
                "puVar9": "lastDivisorDigitPtr",
                "uVar10": "carryHigh",
                "puVar11": "dividendDigitPtr",
                "puVar12": "nextDividendDigitPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "parse_float_080079e8",
            "code": "\nchar * parseFloat_080079e8(int inputBuffer,undefined4 param_2,uint mantissa,uint exp,uint fmt,\n                   uint precision,int *syntaxError,uint *isNegative,char **outputBuffer)\n\n{\n  bool isInfinity;\n  bool isValidZero;\n  bool useExponential;\n  char digit;\n  byte isLessThanHalf;\n  undefined4 value;\n  int index;\n  int resultIndex;\n  int expTen;\n  char *result;\n  uint flags;\n  undefined4 zeroValueExp1;\n  undefined4 zeroValueExp2;\n  int copyIndex;\n  int remainingChars;\n  undefined4 infValueExp;\n  uint infValueMant;\n  uint mantissaValue;\n  int expTenIndex;\n  char *resultIndex;\n  char *p;\n  undefined4 *VALID_ZERO_VALUES;\n  undefined4 expValue1;\n  int digitIndex;\n  bool isValidZero5;\n  undefined8 expValue2;\n  undefined8 shiftedValue;\n  undefined8 sumValue;\n  uint local_80;\n  uint numOfDigitsExp;\n  uint prevBufferIndex;\n  int bufferIndex;\n  uint currentFormat;\n  int numOfDigits;\n  int zeroLeadingCount;\n  uint zeroTrailingCount;\n  uint zeroValueExp;\n  uint uStack_44;\n  uint totalExp;\n  uint expBias;\n  int remainingBits;\n  int remainingDigits [2];\n  \n  copyIndex = *(int *)(inputBuffer + 0x40);\n  if (copyIndex != 0) {\n    mantissaValue = *(uint *)(inputBuffer + 0x44);\n    *(uint *)(copyIndex + 4) = mantissaValue;\n    *(int *)(copyIndex + 8) = 1 << (mantissaValue & 0xff);\n    copy_value_to_pointer_0800910c(inputBuffer,copyIndex);\n    *(undefined4 *)(inputBuffer + 0x40) = 0;\n  }\n  isValidZero5 = (int)exp < 0;\n  mantissaValue = exp;\n  if (isValidZero5) {\n    mantissaValue = exp & 0x7fffffff;\n  }\n  *isNegative = (uint)isValidZero5;\n  numOfDigitsExp = exp;\n  if (isValidZero5) {\n    numOfDigitsExp = mantissaValue;\n  }\n  infValueMant = numOfDigitsExp;\n  if ((~mantissaValue & 0x7ff00000) == 0) {\n    *syntaxError = 9999;\n    if ((mantissa == 0) && ((mantissaValue & 0xfffff) == 0)) {\n      result = \"Infinity\";\n      if (outputBuffer == (char **)0x0) {\n        return result;\n      }\n      p = \"\";\n    }\n    else {\n      result = \"NaN\";\n      if (outputBuffer == (char **)0x0) {\n        return result;\n      }\n      p = \"\";\n    }\n    *outputBuffer = p;\n    return result;\n  }\n  expValue2 = validate_and_return_input_08000998(mantissa,numOfDigitsExp,0,0);\n  if ((int)expValue2 != 0) {\n    *syntaxError = 1;\n    if (outputBuffer != (char **)0x0) {\n      *outputBuffer = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  value = process_data_08009630(inputBuffer,(int)((ulonglong)expValue2 >> 0x20),mantissa,numOfDigitsExp,remainingDigits,&remainingBits)\n  ;\n  copyIndex = remainingBits;\n  if (mantissaValue >> 0x14 == 0) {\n    expTenIndex = remainingDigits[0] + remainingBits;\n    remainingChars = expTenIndex + 0x432;\n    if (remainingChars < 0x21) {\n      mantissaValue = mantissa << (0x20U - remainingChars & 0xff);\n    }\n    else {\n      mantissaValue = mantissa >> (expTenIndex + 0x412U & 0xff) | mantissaValue << (0x40U - remainingChars & 0xff);\n    }\n    expValue2 = bit_shift_080003d4(mantissaValue);\n    expTenIndex = expTenIndex + -1;\n    isValidZero5 = true;\n    flags = (int)((ulonglong)expValue2 >> 0x20) + 0xfe100000;\n    mantissaValue = (uint)expValue2;\n  }\n  else {\n    expTenIndex = (mantissaValue >> 0x14) - 0x3ff;\n    flags = numOfDigitsExp & 0xfffff | 0x3ff00000;\n    isValidZero5 = false;\n    mantissaValue = mantissa;\n  }\n  expValue2 = perform_arithmetic_operation_08000158(mantissaValue,flags,0,0x3ff80000);\n  expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0x636f4361,0x3fd287a7);\n  expValue2 = calculate_sum_0800015c((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  shiftedValue = calculate_shifted_value_080003f4(expTenIndex);\n  shiftedValue = calculate_result_080004c8((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),0x509f79fb,0x3fd34413);\n  expValue2 = calculate_sum_0800015c((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),(int)shiftedValue,\n                        (int)((ulonglong)shiftedValue >> 0x20));\n  zeroValueExp2 = (undefined4)((ulonglong)expValue2 >> 0x20);\n  prevBufferIndex = perform_calculation_0800119c();\n  remainingChars = validate_input_080009ac((int)expValue2,zeroValueExp2,0,0);\n  if (remainingChars != 0) {\n    shiftedValue = calculate_shifted_value_080003f4(prevBufferIndex);\n    remainingChars = validate_and_return_input_08000998((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)expValue2,zeroValueExp2);\n    if (remainingChars == 0) {\n      prevBufferIndex = prevBufferIndex - 1;\n    }\n  }\n  if (prevBufferIndex < 0x17) {\n    remainingChars = check_if_input_is_empty_080009e8(*(undefined4 *)(&DAT_08009fa8 + prevBufferIndex * 8),\n                          *(undefined4 *)(&DAT_08009fac + prevBufferIndex * 8),mantissa,numOfDigitsExp);\n    if (remainingChars == 0) {\n      isValidZero = false;\n    }\n    else {\n      prevBufferIndex = prevBufferIndex - 1;\n      isValidZero = false;\n    }\n  }\n  else {\n    isValidZero = true;\n  }\n  remainingChars = (copyIndex - expTenIndex) + -1;\n  if (remainingChars < 0) {\n    bufferIndex = 1 - (copyIndex - expTenIndex);\n    remainingChars = 0;\n  }\n  else {\n    bufferIndex = 0;\n  }\n  if ((int)prevBufferIndex < 0) {\n    zeroTrailingCount = 0;\n    bufferIndex = bufferIndex - prevBufferIndex;\n    zeroLeadingCount = -prevBufferIndex;\n  }\n  else {\n    remainingChars = remainingChars + prevBufferIndex;\n    zeroTrailingCount = prevBufferIndex;\n    zeroLeadingCount = 0;\n  }\n  if (9 < fmt) {\n    totalExp = 0xffffffff;\n    isInfinity = true;\n    currentFormat = 0xffffffff;\n    useExponential = true;\n    fmt = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  isInfinity = (int)fmt < 6;\n  if (!isInfinity) {\n    fmt = fmt - 4;\n  }\n  switch(fmt) {\n  case 2:\n    useExponential = false;\n    break;\n  case 3:\n    useExponential = false;\n    goto LAB_08008300;\n  case 4:\n    useExponential = true;\n    break;\n  case 5:\n    useExponential = true;\nLAB_08008300:\n    totalExp = prevBufferIndex + precision;\n    currentFormat = totalExp + 1;\n    mantissaValue = currentFormat;\n    if ((int)currentFormat < 1) {\n      mantissaValue = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(inputBuffer + 0x44) = 0;\n    result = (char *)allocate_and_initialize_memory_080090c0(inputBuffer,0);\n    totalExp = 0xffffffff;\n    currentFormat = 0xffffffff;\n    precision = 0;\n    *(char **)(inputBuffer + 0x40) = result;\n    useExponential = true;\n    goto LAB_08007e36;\n  }\n  if ((int)precision < 1) {\n    totalExp = 1;\n    precision = 1;\n    currentFormat = 1;\nLAB_08007c24:\n    *(undefined4 *)(inputBuffer + 0x44) = 0;\n    flags = totalExp;\n  }\n  else {\n    totalExp = precision;\n    currentFormat = precision;\n    mantissaValue = precision;\nLAB_08008314:\n    *(undefined4 *)(inputBuffer + 0x44) = 0;\n    flags = currentFormat;\n    if (0x17 < (int)mantissaValue) {\n      expTenIndex = 4;\n      copyIndex = 1;\n      do {\n        index = copyIndex;\n        expTenIndex = expTenIndex * 2;\n        copyIndex = index + 1;\n      } while (expTenIndex + 0x14U <= mantissaValue);\n      *(int *)(inputBuffer + 0x44) = index;\n    }\n  }\n  result = (char *)allocate_and_initialize_memory_080090c0(inputBuffer);\n  *(char **)(inputBuffer + 0x40) = result;\n  if ((flags < 0xf) && (isInfinity)) {\n    if ((int)prevBufferIndex < 1) {\n      if (prevBufferIndex == 0) {\n        copyIndex = 2;\n        local_80 = mantissa;\n      }\n      else {\n        copyIndex = (-prevBufferIndex & 0xf) * 8;\n        expValue2 = calculate_result_080004c8(mantissa,numOfDigitsExp,*(undefined4 *)(&DAT_08009fa8 + copyIndex),\n                              *(undefined4 *)(&DAT_08009fac + copyIndex));\n        numOfDigitsExp = (uint)((ulonglong)expValue2 >> 0x20);\n        local_80 = (uint)expValue2;\n        expTenIndex = (int)-prevBufferIndex >> 4;\n        if (expTenIndex == 0) {\n          copyIndex = 2;\n        }\n        else {\n          isInfinity = false;\n          copyIndex = 2;\n          VALID_ZERO_VALUES = &DAT_08009f80;\n          do {\n            if (expTenIndex << 0x1f < 0) {\n              expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),*VALID_ZERO_VALUES,VALID_ZERO_VALUES[1]\n                                   );\n              isInfinity = true;\n              copyIndex = copyIndex + 1;\n            }\n            expTenIndex = expTenIndex >> 1;\n            VALID_ZERO_VALUES = VALID_ZERO_VALUES + 2;\n          } while (expTenIndex != 0);\n          if (isInfinity) {\n            local_80 = (uint)expValue2;\n            numOfDigitsExp = (uint)((ulonglong)expValue2 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      mantissaValue = (int)prevBufferIndex >> 4;\n      shiftedValue = *(undefined8 *)(&DAT_08009fa8 + (prevBufferIndex & 0xf) * 8);\n      expValue2 = *(undefined8 *)(&DAT_08009fa8 + (prevBufferIndex & 0xf) * 8);\n      if ((int)(mantissaValue << 0x1b) < 0) {\n        sumValue = calculate_improved_floating_point_0800071c(mantissa,numOfDigitsExp,0x7f73bf3c,0x75154fdd);\n        uStack_44 = (uint)((ulonglong)sumValue >> 0x20);\n        zeroValueExp = (uint)sumValue;\n        copyIndex = 3;\n        mantissaValue = mantissaValue & 0xf;\n      }\n      else {\n        copyIndex = 2;\n        uStack_44 = numOfDigitsExp;\n        zeroValueExp = mantissa;\n      }\n      if (mantissaValue != 0) {\n        VALID_ZERO_VALUES = &DAT_08009f80;\n        do {\n          if ((int)(mantissaValue << 0x1f) < 0) {\n            expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),*VALID_ZERO_VALUES,VALID_ZERO_VALUES[1]);\n            copyIndex = copyIndex + 1;\n          }\n          mantissaValue = (int)mantissaValue >> 1;\n          VALID_ZERO_VALUES = VALID_ZERO_VALUES + 2;\n          shiftedValue = expValue2;\n        } while (mantissaValue != 0);\n      }\n      numOfDigitsExp = (uint)((ulonglong)shiftedValue >> 0x20);\n      local_80 = (uint)shiftedValue;\n      expValue2 = calculate_improved_floating_point_0800071c(zeroValueExp,uStack_44,local_80,numOfDigitsExp);\n      local_80 = (uint)expValue2;\n      numOfDigitsExp = (uint)((ulonglong)expValue2 >> 0x20);\n    }\n    expValue2 = CONCAT44(numOfDigitsExp,local_80);\n    if ((isValidZero) && (expTenIndex = validate_input_080009ac(local_80,numOfDigitsExp,0,0x3ff00000), expTenIndex != 0)) {\n      if (currentFormat == 0) {\n        expValue2 = calculate_shifted_value_080003f4(copyIndex);\n        expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),local_80,numOfDigitsExp);\n        expValue2 = calculate_sum_0800015c((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0,0x401c0000);\n        zeroValueExp2 = (undefined4)expValue2;\n        copyIndex = (int)((ulonglong)expValue2 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)totalExp) {\n        expValue2 = calculate_result_080004c8(local_80,numOfDigitsExp,0,0x40240000);\n        shiftedValue = calculate_shifted_value_080003f4(copyIndex + 1);\n        shiftedValue = calculate_result_080004c8((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)expValue2,\n                              (int)((ulonglong)expValue2 >> 0x20));\n        shiftedValue = calculate_sum_0800015c((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),0,0x401c0000);\n        zeroValueExp2 = (undefined4)shiftedValue;\n        zeroValueExp = totalExp;\n        expBias = prevBufferIndex - 1;\n        copyIndex = (int)((ulonglong)shiftedValue >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    shiftedValue = calculate_shifted_value_080003f4(copyIndex);\n    shiftedValue = calculate_result_080004c8((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),local_80,numOfDigitsExp);\n    shiftedValue = calculate_sum_0800015c((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),0,0x401c0000);\n    zeroValueExp2 = (undefined4)shiftedValue;\n    copyIndex = (int)((ulonglong)shiftedValue >> 0x20) + -0x3400000;\n    if (currentFormat != 0) {\n      expBias = prevBufferIndex;\n      zeroValueExp = currentFormat;\nLAB_08007cfa:\n      numOfDigitsExp = (uint)((ulonglong)expValue2 >> 0x20);\n      local_80 = (uint)expValue2;\n      digit = perform_calculation_0800119c(local_80,numOfDigitsExp);\n      digit = digit + '0';\n      infValueExp = (&DAT_08009fa0)[zeroValueExp * 2];\n      zeroValueExp1 = (&DAT_08009fa4)[zeroValueExp * 2];\n      expValue2 = calculate_shifted_value_080003f4();\n      expValue2 = perform_arithmetic_operation_08000158(local_80,numOfDigitsExp,(int)expValue2,(int)((ulonglong)expValue2 >> 0x20));\n      expValue1 = (undefined4)((ulonglong)expValue2 >> 0x20);\n      p = result + 1;\n      if (useExponential) {\n        shiftedValue = calculate_improved_floating_point_0800071c(0,0x3fe00000,infValueExp,zeroValueExp1);\n        shiftedValue = perform_arithmetic_operation_08000158((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),zeroValueExp2,copyIndex);\n        zeroValueExp2 = (undefined4)((ulonglong)shiftedValue >> 0x20);\n        *result = digit;\n        copyIndex = check_if_input_is_empty_080009e8((int)shiftedValue,zeroValueExp2,(int)expValue2,expValue1);\n        if (copyIndex != 0) {\nLAB_08008784:\n          prevBufferIndex = expBias;\n          goto LAB_08008294;\n        }\n        sumValue = perform_arithmetic_operation_08000158(0,0x3ff00000,(int)expValue2,expValue1);\n        copyIndex = check_if_input_is_empty_080009e8((int)shiftedValue,zeroValueExp2,(int)sumValue,(int)((ulonglong)sumValue >> 0x20));\n        if (copyIndex == 0) {\n          if (zeroValueExp != 1) {\n            resultIndex = p;\n            do {\n              shiftedValue = calculate_result_080004c8((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),0,0x40240000);\n              zeroValueExp2 = (undefined4)((ulonglong)shiftedValue >> 0x20);\n              expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0,0x40240000);\n              digit = perform_calculation_0800119c();\n              sumValue = calculate_shifted_value_080003f4();\n              expValue2 = perform_arithmetic_operation_08000158((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),(int)sumValue,\n                                    (int)((ulonglong)sumValue >> 0x20));\n              infValueExp = (undefined4)((ulonglong)expValue2 >> 0x20);\n              digit = digit + '0';\n              p = resultIndex + 1;\n              *resultIndex = digit;\n              copyIndex = validate_input_080009ac((int)expValue2,infValueExp,(int)shiftedValue,zeroValueExp2);\n              if (copyIndex != 0) {\n                prevBufferIndex = expBias;\n                goto LAB_08008294;\n              }\n              sumValue = perform_arithmetic_operation_08000158(0,0x3ff00000,(int)expValue2,infValueExp);\n              copyIndex = validate_input_080009ac((int)sumValue,(int)((ulonglong)sumValue >> 0x20),(int)shiftedValue,zeroValueExp2)\n              ;\n              if (copyIndex != 0) goto LAB_08008798;\n              resultIndex = p;\n            } while (p != result + zeroValueExp);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        prevBufferIndex = expBias;\n      }\n      else {\n        shiftedValue = calculate_result_080004c8(zeroValueExp2,copyIndex,infValueExp,zeroValueExp1);\n        zeroValueExp2 = (undefined4)((ulonglong)shiftedValue >> 0x20);\n        *result = digit;\n        if (zeroValueExp != 1) {\n          resultIndex = p;\n          do {\n            expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0,0x40240000);\n            digit = perform_calculation_0800119c();\n            sumValue = calculate_shifted_value_080003f4();\n            expValue2 = perform_arithmetic_operation_08000158((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),(int)sumValue,\n                                  (int)((ulonglong)sumValue >> 0x20));\n            p = resultIndex + 1;\n            *resultIndex = digit + '0';\n            resultIndex = p;\n          } while (p != result + zeroValueExp);\n        }\n        infValueExp = (undefined4)((ulonglong)expValue2 >> 0x20);\n        sumValue = calculate_sum_0800015c((int)shiftedValue,zeroValueExp2,0,0x3fe00000);\n        copyIndex = validate_input_080009ac((int)sumValue,(int)((ulonglong)sumValue >> 0x20),(int)expValue2,infValueExp);\n        if (copyIndex == 0) {\n          shiftedValue = perform_arithmetic_operation_08000158(0,0x3fe00000,(int)shiftedValue,zeroValueExp2);\n          copyIndex = check_if_input_is_empty_080009e8((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)expValue2,infValueExp);\n          resultIndex = p;\n          if (copyIndex == 0) goto LAB_08007e36;\n          do {\n            p = resultIndex;\n            resultIndex = p + -1;\n          } while (p[-1] == '0');\n          goto LAB_08008784;\n        }\n        prevBufferIndex = expBias;\n        digit = p[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    expValue2 = perform_arithmetic_operation_08000158(local_80,numOfDigitsExp,0,0x40140000);\n    infValueExp = (undefined4)((ulonglong)expValue2 >> 0x20);\n    expTenIndex = check_if_input_is_empty_080009e8((int)expValue2,infValueExp,zeroValueExp2,copyIndex);\n    if (expTenIndex == 0) {\n      copyIndex = validate_input_080009ac((int)expValue2,infValueExp,zeroValueExp2,copyIndex + -0x80000000);\n      if (copyIndex == 0) goto LAB_08007e36;\n      expTenIndex = 0;\n      copyIndex = 0;\n      p = result;\n      goto LAB_080084f0;\n    }\n    remainingChars = 0;\n    index = 0;\nLAB_08008406:\n    *result = '1';\n    prevBufferIndex = prevBufferIndex + 1;\n    p = result + 1;\n    expTenIndex = index;\n    copyIndex = remainingChars;\nLAB_08008416:\n    copy_value_to_pointer_0800910c(inputBuffer,copyIndex);\n    if (expTenIndex == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    p = result;\n    if ((-1 < remainingDigits[0]) && ((int)prevBufferIndex < 0xf)) {\n      zeroValueExp2 = *(undefined4 *)(&DAT_08009fa8 + prevBufferIndex * 8);\n      infValueExp = *(undefined4 *)(&DAT_08009fac + prevBufferIndex * 8);\n      if ((-1 < (int)precision) || (0 < (int)currentFormat)) {\n        calculate_improved_floating_point_0800071c(mantissa,infValueMant,zeroValueExp2,infValueExp);\n        isLessThanHalf = perform_calculation_0800119c();\n        expValue2 = calculate_shifted_value_080003f4();\n        expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),zeroValueExp2,infValueExp);\n        expValue2 = perform_arithmetic_operation_08000158(mantissa,infValueMant,(int)expValue2,(int)((ulonglong)expValue2 >> 0x20));\n        *result = isLessThanHalf + 0x30;\n        p = result + 1;\n        if (currentFormat != 1) {\n          expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0,0x40240000);\n          copyIndex = validate_and_return_input_08000998((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0,0);\n          while (copyIndex == 0) {\n            expValue1 = (undefined4)((ulonglong)expValue2 >> 0x20);\n            calculate_improved_floating_point_0800071c((int)expValue2,expValue1,zeroValueExp2,infValueExp);\n            isLessThanHalf = perform_calculation_0800119c();\n            shiftedValue = calculate_shifted_value_080003f4();\n            shiftedValue = calculate_result_080004c8((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),zeroValueExp2,infValueExp);\n            expValue2 = perform_arithmetic_operation_08000158((int)expValue2,expValue1,(int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20));\n            resultIndex = p + 1;\n            *p = isLessThanHalf + 0x30;\n            p = resultIndex;\n            if (currentFormat == (int)resultIndex - (int)result) goto LAB_08007f3a;\n            expValue2 = calculate_result_080004c8((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0,0x40240000);\n            copyIndex = validate_and_return_input_08000998((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        expValue2 = calculate_sum_0800015c((int)expValue2,(int)((ulonglong)expValue2 >> 0x20));\n        expValue1 = (undefined4)((ulonglong)expValue2 >> 0x20);\n        copyIndex = check_if_input_is_empty_080009e8((int)expValue2,expValue1,zeroValueExp2,infValueExp);\n        if ((copyIndex == 0) &&\n           ((copyIndex = validate_and_return_input_08000998((int)expValue2,expValue1,zeroValueExp2,infValueExp), copyIndex == 0 ||\n            ((isLessThanHalf & 1) == 0)))) goto LAB_08008294;\n        digit = p[-1];\nLAB_08007f7c:\n        while (resultIndex = p + -1, digit == '9') {\n          if (result == resultIndex) {\n            *result = '0';\n            digit = p[-1];\n            prevBufferIndex = prevBufferIndex + 1;\n            resultIndex = result;\n            break;\n          }\n          digit = p[-2];\n          p = resultIndex;\n        }\n        *resultIndex = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (currentFormat == 0) {\n        expValue2 = calculate_result_080004c8(zeroValueExp2,infValueExp,0,0x40140000);\n        expTen = validate_and_return_080009d4((int)expValue2,(int)((ulonglong)expValue2 >> 0x20),mantissa,infValueMant);\n        expTenIndex = 0;\n        remainingChars = 0;\n        index = 0;\n        copyIndex = 0;\n        if (expTen == 0) goto LAB_08008406;\n      }\n      else {\n        expTenIndex = 0;\n        copyIndex = 0;\n      }\nLAB_080084f0:\n      prevBufferIndex = ~precision;\n      result = p;\n      goto LAB_08008416;\n    }\n    copyIndex = zeroLeadingCount;\n    if (useExponential) {\n      if ((int)fmt < 2) {\n        if (isValidZero5) {\n          numOfDigits = bufferIndex;\n          bufferIndex = bufferIndex + remainingDigits[0] + 0x433;\n          remainingChars = remainingChars + remainingDigits[0] + 0x433;\n        }\n        else {\n          numOfDigits = bufferIndex;\n          bufferIndex = bufferIndex + (0x36 - remainingBits);\n          remainingChars = remainingChars + (0x36 - remainingBits);\n        }\n      }\n      else {\n        expTenIndex = currentFormat - 1;\n        if (zeroLeadingCount < expTenIndex) {\n          zeroTrailingCount = zeroTrailingCount + (expTenIndex - zeroLeadingCount);\n          copyIndex = 0;\n          zeroLeadingCount = expTenIndex;\n        }\n        else {\n          copyIndex = zeroLeadingCount - expTenIndex;\n        }\n        if ((int)currentFormat < 0) {\n          numOfDigits = bufferIndex - currentFormat;\n        }\n        else {\n          remainingChars = remainingChars + currentFormat;\n          numOfDigits = bufferIndex;\n          bufferIndex = bufferIndex + currentFormat;\n        }\n      }\n      expTenIndex = initialize_memory_08009244(inputBuffer,1);\n    }\n    else {\n      numOfDigits = bufferIndex;\n      expTenIndex = 0;\n    }\n    if ((0 < numOfDigits) && (0 < remainingChars)) {\n      index = numOfDigits;\n      if (remainingChars <= numOfDigits) {\n        index = remainingChars;\n      }\n      remainingChars = remainingChars - index;\n      bufferIndex = bufferIndex - index;\n      numOfDigits = numOfDigits - index;\n    }\n    if (zeroLeadingCount != 0) {\n      if (useExponential) {\n        zeroValueExp2 = value;\n        if (copyIndex != 0) {\n          expTenIndex = process_data_080093a4(inputBuffer,expTenIndex,copyIndex);\n          zeroValueExp2 = initialize_memory_08009258(inputBuffer,expTenIndex,value);\n          copy_value_to_pointer_0800910c(inputBuffer,value);\n          value = zeroValueExp2;\n          if (zeroLeadingCount - copyIndex == 0) goto LAB_08008062;\n        }\n        value = process_data_080093a4(inputBuffer,zeroValueExp2,zeroLeadingCount - copyIndex);\n      }\n      else {\n        value = process_data_080093a4(inputBuffer,value,zeroLeadingCount);\n      }\n    }\nLAB_08008062:\n    copyIndex = initialize_memory_08009244(inputBuffer,1);\n    if (zeroTrailingCount == 0) {\n      if (((int)fmt < 2) && (mantissa == 0)) {\nLAB_0800835a:\n        if ((infValueMant & 0xfffff) == 0) {\n          infValueMant = infValueMant & 0x7ff00000;\n          if (infValueMant != 0) {\n            remainingChars = remainingChars + 1;\n            bufferIndex = bufferIndex + 1;\n            infValueMant = 1;\n          }\n        }\n        else {\n          infValueMant = 0;\n        }\n        isValidZero5 = zeroTrailingCount != 0;\n        mantissaValue = mantissa;\n        zeroTrailingCount = infValueMant;\n        if (isValidZero5) goto LAB_080082d4;\n      }\n      index = 1;\n    }\n    else {\n      expValue2 = process_data_080093a4(inputBuffer,copyIndex);\n      copyIndex = (int)expValue2;\n      if (((int)fmt < 2) && (mantissa == 0)) goto LAB_0800835a;\n      zeroTrailingCount = 0;\n      mantissaValue = (uint)((ulonglong)expValue2 >> 0x20);\nLAB_080082d4:\n      index = count_leading_zeros_080091a4(*(undefined4 *)(copyIndex + *(int *)(copyIndex + 0x10) * 4 + 0x10),mantissaValue);\n      index = 0x20 - index;\n    }\n    mantissaValue = index + remainingChars & 0x1f;\n    if (mantissaValue == 0) {\n      index = 0x1c;\nLAB_08008096:\n      remainingChars = remainingChars + index;\n      bufferIndex = bufferIndex + index;\n      numOfDigits = numOfDigits + index;\n    }\n    else {\n      if (4 < (int)(0x20 - mantissaValue)) {\n        index = 0x1c - mantissaValue;\n        goto LAB_08008096;\n      }\n      if (0x20 - mantissaValue != 4) {\n        index = 0x3c - mantissaValue;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < bufferIndex) {\n      value = allocate_and_initialize_memory_08009444(inputBuffer,value,bufferIndex);\n    }\n    if (0 < remainingChars) {\n      copyIndex = allocate_and_initialize_memory_08009444(inputBuffer,copyIndex,remainingChars);\n    }\n    resultIndex = result;\n    if ((isValidZero) && (remainingChars = compare_arrays_080094f8(value,copyIndex), remainingChars < 0)) {\n      prevBufferIndex = prevBufferIndex - 1;\n      value = compute_checksum_08009120(inputBuffer,value,10,0);\n      if (useExponential) {\n        expTenIndex = compute_checksum_08009120(inputBuffer,expTenIndex,10,0);\n        if ((0 < (int)totalExp) || ((int)fmt < 3)) {\n          currentFormat = totalExp;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)totalExp) || ((int)fmt < 3)) {\n        currentFormat = totalExp;\n        goto LAB_0800820a;\n      }\n      currentFormat = totalExp;\nLAB_080084e8:\n      if (currentFormat == 0) {\n        remainingChars = compute_checksum_08009120(inputBuffer,copyIndex,5);\n        expTen = compare_arrays_080094f8(value,remainingChars);\n        index = expTenIndex;\n        copyIndex = remainingChars;\n        if (0 < expTen) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)currentFormat < 1) && (2 < (int)fmt)) goto LAB_080084e8;\n    if (useExponential) {\nLAB_080080de:\n      local_80 = expTenIndex;\n      if (0 < numOfDigits) {\n        local_80 = allocate_and_initialize_memory_08009444(inputBuffer,expTenIndex,numOfDigits);\n      }\n      expTenIndex = local_80;\n      if (zeroTrailingCount != 0) {\n        expTenIndex = allocate_and_initialize_memory_080090c0(inputBuffer,*(undefined4 *)(local_80 + 4));\n        copy_memory_08001084(expTenIndex + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        expTenIndex = allocate_and_initialize_memory_08009444(inputBuffer,expTenIndex,1);\n      }\nLAB_08008108:\n      remainingChars = calculate_division_080078c0(value,copyIndex);\n      index = compare_arrays_080094f8(value,local_80);\n      expTen = reverse_and_compare_arrays_08009530(inputBuffer,copyIndex,expTenIndex);\n      digitIndex = remainingChars + 0x30;\n      if (*(int *)(expTen + 0xc) == 0) {\n        resultIndex = compare_arrays_080094f8(value);\n        copy_value_to_pointer_0800910c(inputBuffer,expTen);\n        if ((resultIndex != 0) || (fmt != 0)) goto LAB_0800815a;\n        if ((mantissa & 1) != 0) {\n          resultIndex = 0;\n          goto LAB_0800815a;\n        }\n        if (digitIndex != 0x39) {\n          if (0 < index) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        p = resultIndex + 1;\n        digit = '9';\n        *resultIndex = '9';\n        goto LAB_08008268;\n      }\n      copy_value_to_pointer_0800910c(inputBuffer,expTen);\n      resultIndex = 1;\nLAB_0800815a:\n      if ((index < 0) || (((index == 0 && (fmt == 0)) && ((mantissa & 1) == 0)))) {\n        if (0 < resultIndex) {\n          value = allocate_and_initialize_memory_08009444(inputBuffer,value,1);\n          index = compare_arrays_080094f8(value,copyIndex);\n          if ((0 < index) || ((index == 0 && (remainingChars << 0x1f < 0)))) {\n            if (digitIndex == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            digitIndex = remainingChars + 0x31;\n          }\n        }\nLAB_080085a4:\n        p = resultIndex + 1;\n        *resultIndex = (char)digitIndex;\n        goto LAB_08008274;\n      }\n      p = resultIndex + 1;\n      if (0 < resultIndex) {\n        if (digitIndex == 0x39) goto LAB_08008752;\n        *resultIndex = (char)remainingChars + '1';\n        goto LAB_08008274;\n      }\n      *resultIndex = (char)digitIndex;\n      if (result + (currentFormat - 1) != resultIndex) {\n        value = compute_checksum_08009120(inputBuffer,value,10,0);\n        resultIndex = p;\n        if (local_80 == expTenIndex) {\n          local_80 = compute_checksum_08009120(inputBuffer,local_80,10,0);\n          expTenIndex = local_80;\n        }\n        else {\n          local_80 = compute_checksum_08009120(inputBuffer,local_80,10,0);\n          expTenIndex = compute_checksum_08009120(inputBuffer,expTenIndex,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        digitIndex = calculate_division_080078c0(value,copyIndex);\n        digitIndex = digitIndex + 0x30;\n        p = resultIndex + 1;\n        *resultIndex = (char)digitIndex;\n        if ((int)currentFormat <= (int)p - (int)result) break;\n        value = compute_checksum_08009120(inputBuffer,value,10,0);\n        resultIndex = p;\n      }\n      local_80 = 0;\n    }\n    value = allocate_and_initialize_memory_08009444(inputBuffer,value,1);\n    remainingChars = compare_arrays_080094f8(value,copyIndex);\n    digit = p[-1];\n    if ((0 < remainingChars) || ((remainingChars == 0 && (digitIndex << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        resultIndex = p + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (result == resultIndex) {\n          *result = '1';\n          prevBufferIndex = prevBufferIndex + 1;\n          goto LAB_08008274;\n        }\n        digit = p[-2];\n        p = resultIndex;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = p[-2];\n      p = p + -1;\n    }\nLAB_08008274:\n    copy_value_to_pointer_0800910c(inputBuffer,copyIndex);\n    if (expTenIndex == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != expTenIndex)) {\n      copy_value_to_pointer_0800910c(inputBuffer);\n    }\n  }\n  copy_value_to_pointer_0800910c(inputBuffer,expTenIndex);\nLAB_08008294:\n  copy_value_to_pointer_0800910c(inputBuffer,value);\n  *p = '\\0';\n  *syntaxError = prevBufferIndex + 1;\n  if (outputBuffer == (char **)0x0) {\n    return result;\n  }\n  *outputBuffer = p;\n  return result;\ncode_r0x08008270:\n  *resultIndex = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "parse_float_080079e8",
                "param_1": "inputBuffer",
                "param_3": "mantissa",
                "param_4": "exp",
                "param_5": "fmt",
                "param_6": "precision",
                "param_7": "syntaxError",
                "param_8": "isNegative",
                "param_9": "outputBuffer",
                "bVar1": "isInfinity",
                "bVar2": "isValidZero",
                "bVar3": "useExponential",
                "cVar4": "digit",
                "bVar5": "isLessThanHalf",
                "uVar6": "value",
                "iVar7": "index",
                "iVar8": "resultIndex",
                "iVar9": "expTen",
                "iVar14": "copyIndex",
                "iVar15": "remainingChars",
                "iVar19": "expTenIndex",
                "iVar24": "digitIndex",
                "pcVar10": "result",
                "pcVar20": "resultIndex",
                "pcVar21": "p",
                "puVar22": "VALID_ZERO_VALUES",
                "uVar11": "flags",
                "uVar12": "zeroValueExp1",
                "uVar13": "zeroValueExp2",
                "uVar16": "infValueExp",
                "uVar17": "infValueMant",
                "uVar18": "mantissaValue",
                "uVar23": "expValue1",
                "uVar26": "expValue2",
                "uVar27": "shiftedValue",
                "uVar28": "sumValue",
                "local_2c": "remainingDigits",
                "local_30": "remainingBits",
                "local_34": "expBias",
                "local_38": "totalExp",
                "local_48": "zeroValueExp",
                "local_58": "zeroTrailingCount",
                "local_5c": "zeroLeadingCount",
                "local_60": "numOfDigits",
                "local_68": "currentFormat",
                "local_70": "bufferIndex",
                "local_74": "prevBufferIndex",
                "local_7c": "numOfDigitsExp"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_0800015c",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08000158",
                "FUN_08009120",
                "FUN_080009e8",
                "FUN_080093a4",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_080009ac",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "initialize_memory_and_data_0800884c",
            "code": "\nundefined4 initializeMemoryAndData_0800884c(undefined4 param1,int param2)\n\n{\n  int returnValue1;\n  int returnValue2;\n  uint updatedVar3;\n  \n  initialize_data_080090a8();\n  updatedVar3 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  returnValue2 = ((0xfef - param2) + updatedVar3 & 0xfffff000) - 0x1000;\n  if (0xfff < returnValue2) {\n    returnValue1 = allocate_and_check_memory_08009744(param1,0);\n    if (returnValue1 == DAT_20000454 + updatedVar3) {\n      returnValue1 = allocate_and_check_memory_08009744(param1,-returnValue2);\n      if (returnValue1 != -1) {\n        DAT_20000a14 = DAT_20000a14 - returnValue2;\n        *(uint *)(DAT_20000454 + 4) = updatedVar3 - returnValue2 | 1;\n        initialize_data_080090b4(param1);\n        return 1;\n      }\n      returnValue2 = allocate_and_check_memory_08009744(param1,0);\n      if (0xf < returnValue2 - DAT_20000454) {\n        DAT_20000a14 = returnValue2 - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = returnValue2 - DAT_20000454 | 1;\n      }\n    }\n  }\n  initialize_data_080090b4(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "initialize_memory_and_data_0800884c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "returnValue1",
                "iVar2": "returnValue2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "initialize_memory_and_data_080088ec",
            "code": "\nvoid initializeMemoryAndData_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index1;\n  uint *pointer1;\n  uint *pointer2;\n  undefined *pointer3;\n  uint value1;\n  uint value2;\n  undefined *pointer4;\n  undefined *pointer5;\n  undefined4 *pointer6;\n  int index2;\n  uint value3;\n  uint value4;\n  \n  if (param2 == 0) {\n    return;\n  }\n  initialize_data_080090a8();\n  value3 = *(uint *)(param2 + -4);\n  pointer1 = (uint *)(param2 + -8);\n  value1 = value3 & 0xfffffffe;\n  pointer2 = (uint *)((int)pointer1 + value1);\n  value2 = pointer2[1] & 0xfffffffc;\n  if (DAT_20000454 == pointer2) {\n    value1 = value1 + value2;\n    if ((value3 & 1) == 0) {\n      pointer1 = (uint *)((int)pointer1 - *(int *)(param2 + -8));\n      value2 = pointer1[2];\n      value3 = pointer1[3];\n      value1 = value1 + *(int *)(param2 + -8);\n      *(uint *)(value2 + 0xc) = value3;\n      *(uint *)(value3 + 8) = value2;\n    }\n    value2 = DAT_20000858;\n    pointer1[1] = value1 | 1;\n    DAT_20000454 = pointer1;\n    if (value2 <= value1) {\n      initialize_memory_and_data_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data_080090b4(param1);\n    return;\n  }\n  pointer2[1] = value2;\n  if ((value3 & 1) == 0) {\n    pointer1 = (uint *)((int)pointer1 - *(int *)(param2 + -8));\n    pointer6 = (undefined4 *)pointer1[2];\n    value1 = value1 + *(int *)(param2 + -8);\n    value3 = *(uint *)((int)pointer2 + value2 + 4) & 1;\n    if ((uint **)pointer6 == &DAT_20000454) {\n      if (value3 == 0) {\n        value3 = pointer2[2];\n        value4 = pointer2[3];\n        value1 = value1 + value2;\n        *(uint *)(value3 + 0xc) = value4;\n        *(uint *)(value4 + 8) = value3;\n        pointer1[1] = value1 | 1;\n        *(uint *)((int)pointer1 + value1) = value1;\n      }\n      else {\n        pointer1[1] = value1 | 1;\n        *pointer2 = value1;\n      }\n      goto LAB_080089f0;\n    }\n    value4 = pointer1[3];\n    pointer6[3] = value4;\n    *(undefined4 **)(value4 + 8) = pointer6;\n  }\n  else {\n    value3 = *(uint *)((int)pointer2 + value2 + 4) & 1;\n  }\n  if (value3 == 0) {\n    pointer6 = (undefined4 *)pointer2[2];\n    value1 = value1 + value2;\n    if ((uint **)pointer6 == &DAT_20000454) {\n      DAT_2000045c = pointer1;\n      DAT_20000460 = pointer1;\n      pointer1[2] = (uint)&DAT_20000454;\n      pointer1[3] = (uint)&DAT_20000454;\n      pointer1[1] = value1 | 1;\n      *(uint *)((int)pointer1 + value1) = value1;\n      goto LAB_080089f0;\n    }\n    value2 = pointer2[3];\n    pointer6[3] = value2;\n    *(undefined4 **)(value2 + 8) = pointer6;\n    pointer1[1] = value1 | 1;\n    *(uint *)((int)pointer1 + value1) = value1;\n  }\n  else {\n    pointer1[1] = value1 | 1;\n    *(uint *)((int)pointer1 + value1) = value1;\n  }\n  if (value1 < 0x200) {\n    index2 = (value1 >> 3) + 1;\n    value1 = 1 << ((int)(value1 >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    value2 = *(uint *)(&DAT_2000044c + index2 * 8);\n    pointer1[2] = value2;\n    pointer1[3] = (uint)(&DAT_20000444 + index2 * 8);\n    DAT_20000450 = (undefined *)value1;\n    *(uint **)(&DAT_2000044c + index2 * 8) = pointer1;\n    *(uint **)(value2 + 0xc) = pointer1;\n    initialize_data_080090b4(param1,pointer1,value1,param4);\n    return;\n  }\n  value2 = value1 >> 9;\n  if (value2 < 5) {\n    index2 = ((value1 >> 6) + 0x39) * 8;\n    index1 = (value1 >> 6) + 0x38;\n  }\n  else if (value2 < 0x15) {\n    index2 = (value2 + 0x5c) * 8;\n    index1 = value2 + 0x5b;\n  }\n  else if (value2 < 0x55) {\n    index2 = ((value1 >> 0xc) + 0x6f) * 8;\n    index1 = (value1 >> 0xc) + 0x6e;\n  }\n  else if (value2 < 0x155) {\n    index2 = ((value1 >> 0xf) + 0x78) * 8;\n    index1 = (value1 >> 0xf) + 0x77;\n  }\n  else if (value2 < 0x555) {\n    index2 = ((value1 >> 0x12) + 0x7d) * 8;\n    index1 = (value1 >> 0x12) + 0x7c;\n  }\n  else {\n    index2 = 0x3f8;\n    index1 = 0x7e;\n  }\n  pointer3 = *(undefined **)(&DAT_2000044c + index2);\n  pointer4 = &DAT_20000444 + index2;\n  if (pointer4 == pointer3) {\n    pointer3 = (undefined *)(1 << (index1 >> 2 & 0xffU) | (uint)DAT_20000450);\n    pointer5 = pointer4;\n    DAT_20000450 = pointer3;\n  }\n  else {\n    do {\n      pointer5 = pointer3;\n      if ((*(uint *)(pointer3 + 4) & 0xfffffffc) <= value1) break;\n      pointer3 = *(undefined **)(pointer3 + 8);\n      pointer5 = pointer4;\n    } while (pointer4 != pointer3);\n    pointer4 = *(undefined **)(pointer5 + 0xc);\n  }\n  pointer1[2] = (uint)pointer5;\n  pointer1[3] = (uint)pointer4;\n  *(uint **)(pointer4 + 8) = pointer1;\n  *(uint **)(pointer5 + 0xc) = pointer1;\n  initialize_data_080090b4(param1,pointer1,pointer3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "initialize_memory_and_data_080088ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index1",
                "puVar2": "pointer1",
                "puVar3": "pointer2",
                "puVar4": "pointer3",
                "uVar5": "value1",
                "uVar6": "value2",
                "puVar7": "pointer4",
                "puVar8": "pointer5",
                "puVar9": "pointer6",
                "iVar10": "index2",
                "uVar11": "value3",
                "uVar12": "value4"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_updated_value_08008ad4",
            "code": "\nint getUpdatedValue_08008ad4(void)\n\n{\n  int currentValue;\n  \n  currentValue = *(int *)(DAT_2000001c + 0x34);\n  if (currentValue == 0) {\n    currentValue = 0x2000085c;\n  }\n  return currentValue + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_updated_value_08008ad4",
                "iVar1": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_and_initialize_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateAndInitializeMemory_08008af8(undefined4 *param_memory,uint size)\n\n{\n  undefined *pointer1;\n  uint variable1;\n  uint variable2;\n  int variable3;\n  undefined *pointer2;\n  uint variable4;\n  uint variable5;\n  undefined4 *pointer3;\n  undefined *pointer4;\n  undefined *pointer5;\n  int *result;\n  uint variable6;\n  uint variable7;\n  int variable8;\n  undefined4 *pointer6;\n  undefined4 *pointer7;\n  \n  variable6 = size + 0xb;\n  if (variable6 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    initialize_data_080090a8();\n    variable7 = 0x10;\n    variable3 = 0x18;\n    variable6 = 2;\nLAB_08008b18:\n    pointer5 = *(undefined **)((int)&DAT_20000450 + variable3);\n    if ((pointer5 != &DAT_20000444 + variable3) ||\n       (pointer5 = *(undefined **)((int)&DAT_20000458 + variable3), &DAT_2000044c + variable3 != pointer5)) {\n      variable3 = *(int *)(pointer5 + 0xc);\n      pointer2 = pointer5 + (*(uint *)(pointer5 + 4) & 0xfffffffc);\n      variable6 = *(uint *)(pointer2 + 4);\nLAB_08008b34:\n      variable8 = *(int *)(pointer5 + 8);\n      *(int *)(variable8 + 0xc) = variable3;\n      *(int *)(variable3 + 8) = variable8;\n      *(uint *)(pointer2 + 4) = variable6 | 1;\n      initialize_data_080090b4(param_memory);\n      return (int *)(pointer5 + 8);\n    }\n    variable6 = variable6 + 2;\n  }\n  else {\n    variable7 = variable6 & 0xfffffff8;\n    if (((int)variable7 < 0) || (variable7 < size)) {\nLAB_08008c7a:\n      *param_memory = 0xc;\n      return (int *)0x0;\n    }\n    initialize_data_080090a8();\n    if (variable7 < 0x1f8) {\n      variable6 = variable6 >> 3;\n      variable3 = variable7 + 8;\n      goto LAB_08008b18;\n    }\n    variable1 = variable6 >> 9;\n    if (variable1 == 0) {\n      variable3 = 0x200;\n      variable4 = 0x40;\n      variable1 = 0x3f;\n    }\n    else if (variable1 < 5) {\n      variable4 = (variable6 >> 6) + 0x39;\n      variable1 = (variable6 >> 6) + 0x38;\n      variable3 = variable4 * 8;\n    }\n    else if (variable1 < 0x15) {\n      variable4 = variable1 + 0x5c;\n      variable1 = variable1 + 0x5b;\n      variable3 = variable4 * 8;\n    }\n    else if (variable1 < 0x55) {\n      variable4 = (variable6 >> 0xc) + 0x6f;\n      variable1 = (variable6 >> 0xc) + 0x6e;\n      variable3 = variable4 * 8;\n    }\n    else if (variable1 < 0x155) {\n      variable4 = (variable6 >> 0xf) + 0x78;\n      variable1 = (variable6 >> 0xf) + 0x77;\n      variable3 = variable4 * 8;\n    }\n    else if (variable1 < 0x555) {\n      variable4 = (variable6 >> 0x12) + 0x7d;\n      variable1 = (variable6 >> 0x12) + 0x7c;\n      variable3 = variable4 * 8;\n    }\n    else {\n      variable3 = 0x3f8;\n      variable4 = 0x7f;\n      variable1 = 0x7e;\n    }\n    for (pointer5 = *(undefined **)((int)&DAT_20000450 + variable3); variable6 = variable4,\n        &DAT_20000444 + variable3 != pointer5; pointer5 = *(undefined **)(pointer5 + 0xc)) {\n      variable8 = (*(uint *)(pointer5 + 4) & 0xfffffffc) - variable7;\n      variable6 = variable1;\n      if (0xf < variable8) break;\n      if (-1 < variable8) {\n        pointer2 = pointer5 + (*(uint *)(pointer5 + 4) & 0xfffffffc);\n        variable6 = *(uint *)(pointer2 + 4);\n        variable3 = *(int *)(pointer5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  pointer6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    variable4 = 1 << ((int)variable6 >> 2 & 0xffU);\n    variable1 = DAT_20000450;\n    if (variable4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    variable4 = DAT_2000045c[1];\n    variable5 = variable4 & 0xfffffffc;\n    variable1 = variable5 - variable7;\n    if (0xf < (int)variable1) {\n      pointer7 = (undefined4 *)(variable7 + (int)DAT_2000045c);\n      DAT_2000045c[1] = variable7 | 1;\n      DAT_2000045c = pointer7;\n      DAT_20000460 = pointer7;\n      pointer7[2] = &DAT_20000454;\n      pointer7[3] = &DAT_20000454;\n      pointer7[1] = variable1 | 1;\n      *(uint *)((int)pointer6 + variable5) = variable1;\n      initialize_data_080090b4(param_memory);\n      return pointer6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)variable1) {\n      *(uint *)((int)pointer6 + variable5 + 4) = *(uint *)((int)pointer6 + variable5 + 4) | 1;\n      initialize_data_080090b4(param_memory);\n      return pointer6 + 2;\n    }\n    if (variable5 < 0x200) {\n      variable3 = (variable4 >> 3) + 1;\n      variable8 = *(int *)(&DAT_2000044c + variable3 * 8);\n      variable1 = 1 << ((int)(variable4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      pointer6[2] = variable8;\n      pointer6[3] = &DAT_20000444 + variable3 * 8;\n      DAT_20000450 = variable1;\n      *(undefined4 **)(&DAT_2000044c + variable3 * 8) = pointer6;\n      *(undefined4 **)(variable8 + 0xc) = pointer6;\n    }\n    else {\n      variable1 = variable4 >> 9;\n      if (variable1 < 5) {\n        variable3 = ((variable4 >> 6) + 0x39) * 8;\n        variable8 = (variable4 >> 6) + 0x38;\n      }\n      else if (variable1 < 0x15) {\n        variable3 = (variable1 + 0x5c) * 8;\n        variable8 = variable1 + 0x5b;\n      }\n      else if (variable1 < 0x55) {\n        variable3 = ((variable4 >> 0xc) + 0x6f) * 8;\n        variable8 = (variable4 >> 0xc) + 0x6e;\n      }\n      else if (variable1 < 0x155) {\n        variable3 = ((variable4 >> 0xf) + 0x78) * 8;\n        variable8 = (variable4 >> 0xf) + 0x77;\n      }\n      else if (variable1 < 0x555) {\n        variable3 = ((variable4 >> 0x12) + 0x7d) * 8;\n        variable8 = (variable4 >> 0x12) + 0x7c;\n      }\n      else {\n        variable3 = 0x3f8;\n        variable8 = 0x7e;\n      }\n      pointer5 = *(undefined **)(&DAT_2000044c + variable3);\n      pointer2 = &DAT_20000444 + variable3;\n      if (pointer2 == pointer5) {\n        DAT_20000450 = 1 << (variable8 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(pointer5 + 4) & 0xfffffffc) <= variable5) break;\n          pointer5 = *(undefined **)(pointer5 + 8);\n        } while (pointer2 != pointer5);\n        pointer2 = *(undefined **)(pointer5 + 0xc);\n      }\n      variable1 = DAT_20000450;\n      pointer6[2] = pointer5;\n      pointer6[3] = pointer2;\n      *(undefined4 **)(pointer2 + 8) = pointer6;\n      *(undefined4 **)(pointer5 + 0xc) = pointer6;\n    }\n    variable4 = 1 << ((int)variable6 >> 2 & 0xffU);\n    if (variable4 <= variable1) {\nLAB_08008c06:\n      if ((variable4 & variable1) == 0) {\n        variable6 = variable6 & 0xfffffffc;\n        do {\n          variable4 = variable4 << 1;\n          variable6 = variable6 + 4;\n        } while ((variable4 & variable1) == 0);\n      }\n      do {\n        pointer7 = (undefined4 *)(&DAT_2000044c + variable6 * 8);\n        variable1 = variable6;\n        pointer6 = pointer7;\n        do {\n          for (pointer3 = (undefined4 *)pointer6[3]; pointer6 != pointer3;\n              pointer3 = (undefined4 *)pointer3[3]) {\n            variable5 = pointer3[1] & 0xfffffffc;\n            variable2 = variable5 - variable7;\n            if (0xf < (int)variable2) {\n              variable8 = pointer3[2];\n              variable3 = pointer3[3];\n              pointer6 = (undefined4 *)(variable7 + (int)pointer3);\n              pointer3[1] = variable7 | 1;\n              *(int *)(variable8 + 0xc) = variable3;\n              *(int *)(variable3 + 8) = variable8;\n              DAT_2000045c = pointer6;\n              DAT_20000460 = pointer6;\n              pointer6[2] = &DAT_20000454;\n              pointer6[3] = &DAT_20000454;\n              pointer6[1] = variable2 | 1;\n              *(uint *)((int)pointer3 + variable5) = variable2;\n              initialize_data_080090b4(param_memory);\n              return pointer3 + 2;\n            }\n            if (-1 < (int)variable2) {\n              variable3 = pointer3[3];\n              variable8 = pointer3[2];\n              *(uint *)((int)pointer3 + variable5 + 4) = *(uint *)((int)pointer3 + variable5 + 4) | 1;\n              *(int *)(variable8 + 0xc) = variable3;\n              *(int *)(variable3 + 8) = variable8;\n              initialize_data_080090b4(param_memory);\n              return pointer3 + 2;\n            }\n          }\n          variable1 = variable1 + 1;\n          pointer6 = pointer6 + 2;\n        } while ((variable1 & 3) != 0);\n        do {\n          variable5 = variable6 & 3;\n          pointer6 = pointer7 + -2;\n          variable6 = variable6 - 1;\n          if (variable5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~variable4;\n            break;\n          }\n          pointer7 = (undefined4 *)*pointer7;\n        } while (pointer7 == pointer6);\n        variable4 = variable4 * 2;\n        if ((DAT_20000450 <= variable4 && variable4 - DAT_20000450 != 0) || (variable6 = variable1, variable4 == 0))\n        break;\n        for (; (variable4 & DAT_20000450) == 0; variable4 = variable4 << 1) {\n          variable6 = variable6 + 4;\n        }\n      } while( true );\n    }\n  }\n  pointer5 = DAT_20000454;\n  variable6 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((variable7 <= variable6) && (variable1 = variable6 - variable7, 0xf < (int)variable1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    variable1 = variable7 + DAT_20000a44 + 0x10;\n  }\n  else {\n    variable1 = variable7 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  pointer2 = (undefined *)allocate_and_check_memory_08009744(param_memory,variable1);\n  if (pointer2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    variable6 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    pointer1 = pointer5 + variable6;\n    if (pointer1 < pointer2 || pointer1 == pointer2) {\n      pointer4 = DAT_20000a14 + variable1;\n      if ((pointer1 != pointer2) || (((uint)pointer1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = pointer4;\n      *(uint *)(DAT_20000454 + 4) = variable6 + variable1 | 1;\n    }\n    else {\n      if (pointer5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + variable1;\n      pointer4 = pointer2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)pointer2 - (int)pointer1);\n        pointer4 = DAT_20000854;\n      }\n      DAT_20000854 = pointer4;\n      variable4 = (uint)pointer2 & 7;\n      if (variable4 == 0) {\n        variable3 = 0x1000;\n      }\n      else {\n        pointer2 = pointer2 + (8 - variable4);\n        variable3 = 0x1008 - variable4;\n      }\n      variable3 = variable3 - ((uint)(pointer2 + variable1) & 0xfff);\n      variable8 = allocate_and_check_memory_08009744(param_memory,variable3);\n      if (variable8 == -1) {\n        variable1 = 1;\n        variable3 = 0;\n      }\n      else {\n        variable1 = (variable8 - (int)pointer2) + variable3 | 1;\n      }\n      pointer4 = DAT_20000a14 + variable3;\n      DAT_20000454 = pointer2;\n      DAT_20000a14 = pointer4;\n      *(uint *)(pointer2 + 4) = variable1;\n      if (pointer5 != &DAT_2000044c) {\n        if (variable6 < 0x10) {\n          *(undefined4 *)(pointer2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        variable6 = variable6 - 0xc & 0xfffffff8;\n        *(uint *)(pointer5 + 4) = *(uint *)(pointer5 + 4) & 1 | variable6;\n        *(undefined4 *)(pointer5 + variable6 + 4) = 5;\n        *(undefined4 *)(pointer5 + variable6 + 8) = 5;\n        if (0xf < variable6) {\n          initialize_memory_and_data_080088ec(param_memory,pointer5 + 8);\n          pointer4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < pointer4) {\n      DAT_20000a3c = pointer4;\n    }\n    variable6 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < pointer4) {\n      DAT_20000a40 = pointer4;\n    }\n  }\n  variable1 = (variable6 & 0xfffffffc) - variable7;\n  if ((variable7 <= (variable6 & 0xfffffffc)) && (0xf < (int)variable1)) {\nLAB_08008dac:\n    pointer5 = DAT_20000454 + variable7;\n    *(uint *)(DAT_20000454 + 4) = variable7 | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = pointer5;\n    *(uint *)(pointer5 + 4) = variable1 | 1;\n    initialize_data_080090b4(param_memory);\n    return result;\n  }\nLAB_08008eee:\n  initialize_data_080090b4(param_memory);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_and_initialize_memory_08008af8",
                "param_1": "param_memory",
                "param_2": "size",
                "puVar1": "pointer1",
                "uVar2": "variable1",
                "uVar3": "variable2",
                "iVar4": "variable3",
                "puVar5": "pointer2",
                "uVar6": "variable4",
                "uVar7": "variable5",
                "puVar8": "pointer3",
                "puVar9": "pointer4",
                "puVar10": "pointer5",
                "piVar11": "result",
                "uVar12": "variable6",
                "uVar13": "variable7",
                "iVar14": "variable8",
                "puVar15": "pointer6",
                "puVar16": "pointer7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_first_occurrence_of_byte_0800901c",
            "code": "\nuint * find_first_occurrence_of_byte_0800901c(uint *buffer,uint byte_to_find,uint length)\n\n{\n  uint tmp;\n  uint combined_byte;\n  uint *current_position;\n  uint masked_byte;\n  bool is_length_zero;\n  \n  masked_byte = byte_to_find & 0xff;\n  if (((uint)buffer & 3) == 0) {\nLAB_0800904a:\n    if (3 < length) {\n      combined_byte = (byte_to_find & 0xff) << 8 | masked_byte;\n      current_position = buffer;\n      do {\n        tmp = *current_position ^ (combined_byte | combined_byte << 0x10);\n        buffer = current_position + 1;\n        if ((tmp + 0xfefefeff & ~tmp & 0x80808080) != 0) goto LAB_08009050;\n        length = length - 4;\n        current_position = buffer;\n      } while (3 < length);\n    }\n    current_position = buffer;\n    if (length == 0) {\n      buffer = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      buffer = current_position;\n      if (*(byte *)buffer != masked_byte) {\n        current_position = (uint *)(length + (int)buffer);\n        do {\n          buffer = (uint *)((int)buffer + 1);\n          if (current_position == buffer) goto LAB_0800906c;\n        } while (*(byte *)buffer != masked_byte);\n      }\n    }\n  }\n  else {\n    combined_byte = length - 1;\n    if (length == 0) {\nLAB_0800906c:\n      buffer = (uint *)0x0;\n    }\n    else if (*(byte *)buffer != masked_byte) {\n      current_position = (uint *)((int)buffer + 1);\n      do {\n        buffer = current_position;\n        length = combined_byte;\n        if (((uint)buffer & 3) == 0) goto LAB_0800904a;\n        is_length_zero = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_length_zero) goto LAB_0800906c;\n        current_position = (uint *)((int)buffer + 1);\n      } while (*(byte *)buffer != masked_byte);\n    }\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_first_occurrence_of_byte_0800901c",
                "param_1": "buffer",
                "param_2": "byte_to_find",
                "param_3": "length",
                "uVar1": "tmp",
                "uVar2": "combined_byte",
                "puVar3": "current_position",
                "uVar4": "masked_byte",
                "bVar5": "is_length_zero"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initialize_data_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "allocate_and_initialize_memory_080090c0",
            "code": "\nundefined4 * allocate_and_initialize_memory_080090c0(int mem_address,uint index)\n\n{\n  undefined4 *memory_ptr;\n  int mem_handle;\n  \n  mem_handle = *(int *)(mem_address + 0x4c);\n  if (mem_handle == 0) {\n    mem_handle = allocate_and_initialize_memory_080090c0_08009980(mem_address,4,0x21);\n    *(int *)(mem_address + 0x4c) = mem_handle;\n    if (mem_handle == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  memory_ptr = *(undefined4 **)(mem_handle + index * 4);\n  if (memory_ptr == (undefined4 *)0x0) {\n    mem_handle = 1 << (index & 0xff);\n    memory_ptr = (undefined4 *)allocate_and_initialize_memory_080090c0_08009980(mem_address,1,(mem_handle + 5) * 4);\n    if (memory_ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    memory_ptr[1] = index;\n    memory_ptr[2] = mem_handle;\n  }\n  else {\n    *(undefined4 *)(mem_handle + index * 4) = *memory_ptr;\n  }\n  memory_ptr[3] = 0;\n  memory_ptr[4] = 0;\n  return memory_ptr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "allocate_and_initialize_memory_080090c0",
                "param_1": "mem_address",
                "param_2": "index",
                "puVar1": "memory_ptr",
                "iVar2": "mem_handle"
            },
            "calling": [
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "copy_value_to_pointer_0800910c",
            "code": "\nvoid copyValueToPointer_0800910c(int inputPointer,undefined4 *outputPointer)\n\n{\n  int memoryOffset;\n  \n  if (outputPointer != (undefined4 *)0x0) {\n    memoryOffset = *(int *)(inputPointer + 0x4c);\n    *outputPointer = *(undefined4 *)(memoryOffset + outputPointer[1] * 4);\n    *(undefined4 **)(memoryOffset + outputPointer[1] * 4) = outputPointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "copy_value_to_pointer_0800910c",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "iVar1": "memoryOffset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "compute_checksum_08009120",
            "code": "\nundefined4 * computeChecksum_08009120(int param_address,undefined4 *checksum_data,int multiplier,uint checksum)\n\n{\n  undefined4 *updated_checksum_data;\n  uint partial_checksum;\n  int checksum_data_length;\n  uint *current_checksum_data;\n  int index;\n  \n  index = 0;\n  checksum_data_length = checksum_data[4];\n  current_checksum_data = checksum_data + 5;\n  do {\n    index = index + 1;\n    checksum = multiplier * (*current_checksum_data & 0xffff) + checksum;\n    partial_checksum = multiplier * (*current_checksum_data >> 0x10) + (checksum >> 0x10);\n    *current_checksum_data = (checksum & 0xffff) + partial_checksum * 0x10000;\n    checksum = partial_checksum >> 0x10;\n    current_checksum_data = current_checksum_data + 1;\n  } while (index < checksum_data_length);\n  updated_checksum_data = checksum_data;\n  if (checksum != 0) {\n    if ((int)checksum_data[2] <= checksum_data_length) {\n      updated_checksum_data = (undefined4 *)allocate_and_initialize_memory_080090c0(param_address,checksum_data[1] + 1);\n      copy_memory_08001084(updated_checksum_data + 3,checksum_data + 3,(checksum_data[4] + 2) * 4);\n      index = *(int *)(param_address + 0x4c);\n      *checksum_data = *(undefined4 *)(index + checksum_data[1] * 4);\n      *(undefined4 **)(index + checksum_data[1] * 4) = checksum_data;\n    }\n    updated_checksum_data[checksum_data_length + 5] = checksum;\n    updated_checksum_data[4] = checksum_data_length + 1;\n  }\n  return updated_checksum_data;\n}\n\n",
            "renaming": {
                "FUN_08009120": "compute_checksum_08009120",
                "param_1": "param_address",
                "param_2": "checksum_data",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "updated_checksum_data",
                "uVar2": "partial_checksum",
                "iVar3": "checksum_data_length",
                "puVar4": "current_checksum_data",
                "iVar5": "index"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZeros = 0x10;\n  }\n  else {\n    leadingZeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZeros = leadingZeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZeros = leadingZeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZeros = leadingZeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZeros + 1;\n    }\n    leadingZeros = 0x20;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZeros"
            },
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_trailing_zeros_080091e4",
            "code": "\nint countTrailingZeros_080091e4(uint *input)\n\n{\n  int count;\n  uint value;\n  \n  value = *input;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      count = 0x10;\n    }\n    else {\n      count = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      count = count + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      count = count + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      count = count + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      count = count + 1;\n    }\n    *input = value;\n    return count;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *input = value >> 2;\n    return 2;\n  }\n  *input = value >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "param_1": "input",
                "iVar1": "count",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_memory_08009244",
            "code": "\nvoid initializeMemory_08009244(undefined4 source,undefined4 value)\n\n{\n  int memoryAddress;\n  \n  memoryAddress = allocate_and_initialize_memory_080090c0(source,1);\n  *(undefined4 *)(memoryAddress + 0x10) = 1;\n  *(undefined4 *)(memoryAddress + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_memory_08009244",
                "param_1": "source",
                "param_2": "value",
                "iVar1": "memoryAddress"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_memory_08009258",
            "code": "\nvoid initializeMemory_08009258(undefined4 param1,int input1,int input2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int var8;\n  uint temp2;\n  uint *ptr3;\n  uint temp3;\n  uint *ptr4;\n  uint temp4;\n  int var7;\n  int var3;\n  uint temp7;\n  int var6;\n  int var9;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  var6 = *(int *)(input1 + 0x10);\n  var7 = *(int *)(input2 + 0x10);\n  var3 = var7;\n  var9 = input1;\n  if (var6 < var7) {\n    var3 = var6;\n    var6 = var7;\n    var9 = input2;\n    input2 = input1;\n  }\n  var7 = var6 + var3;\n  var8 = *(int *)(var9 + 4);\n  if (*(int *)(var9 + 8) < var7) {\n    var8 = var8 + 1;\n  }\n  var8 = allocate_and_initialize_memory_080090c0(param1,var8);\n  ptr9 = (uint *)(var8 + 0x14);\n  ptr8 = ptr9 + var7;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  temp3 = input2 + 0x14;\n  temp7 = temp3 + var3 * 4;\n  ptr3 = (uint *)(var9 + 0x14);\n  if (temp3 < temp7) {\n    ptr4 = (uint *)(temp3 + ((temp7 - input2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(input2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        temp3 = *ptr7 & 0xffff;\n        if (temp3 != 0) break;\n        temp3 = *ptr7 >> 0x10;\n        if (temp3 == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp4 = *ptr9;\n        temp2 = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        temp7 = temp4;\n        do {\n          ptr6 = ptr5;\n          temp2 = temp2 + temp3 * *(ushort *)ptr1 + (temp7 >> 0x10);\n          *ptr6 = temp4 & 0xffff | temp2 * 0x10000;\n          ptr2 = ptr1 + 1;\n          temp7 = ptr6[1];\n          temp4 = temp3 * (*ptr1 >> 0x10) + (temp7 & 0xffff) + (temp2 >> 0x10);\n          temp2 = temp4 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + var6);\n        ptr6[1] = temp4;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      temp7 = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp4 = temp3 * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + temp7;\n        temp2 = temp3 * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp4 >> 0x10);\n        temp7 = temp2 >> 0x10;\n        *ptr2 = temp4 & 0xffff | temp2 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + var6);\n      ptr2[1] = temp7;\n      temp3 = *ptr7 >> 0x10;\n      if (temp3 != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < var7) {\n    temp3 = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((temp3 == 0 && (var7 = var7 + -1, var7 != 0))) {\n      ptr8 = ptr8 + -1;\n      temp3 = *ptr8;\n    }\n  }\n  *(int *)(var8 + 0x10) = var7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_memory_08009258",
                "param_1": "param1",
                "param_2": "input1",
                "param_3": "input2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "var8",
                "uVar4": "temp2",
                "puVar5": "ptr3",
                "uVar6": "temp3",
                "puVar7": "ptr4",
                "uVar8": "temp4",
                "iVar9": "var7",
                "iVar10": "var3",
                "uVar11": "temp7",
                "iVar12": "var6",
                "iVar13": "var9",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int inputData,undefined4 *outputData,uint dataSize)\n\n{\n  int index;\n  int size;\n  undefined4 *currentData;\n  undefined4 *memoryBlock;\n  \n  if ((dataSize & 3) != 0) {\n    outputData = (undefined4 *)\n              compute_checksum_08009120(inputData,outputData,*(undefined4 *)(&DAT_0800a070 + ((dataSize & 3) - 1) * 4),\n                           0);\n  }\n  size = (int)dataSize >> 2;\n  if (size != 0) {\n    memoryBlock = *(undefined4 **)(inputData + 0x48);\n    if (memoryBlock == (undefined4 *)0x0) {\n      memoryBlock = (undefined4 *)allocate_and_initialize_memory_080090c0(inputData,1);\n      memoryBlock[4] = 1;\n      memoryBlock[5] = 0x271;\n      *(undefined4 **)(inputData + 0x48) = memoryBlock;\n      *memoryBlock = 0;\n    }\n    currentData = outputData;\n    if (size << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    size = size >> 1;\n    currentData = memoryBlock;\n    if (size != 0) {\n      while( true ) {\n        memoryBlock = (undefined4 *)*currentData;\n        if (memoryBlock == (undefined4 *)0x0) {\n          memoryBlock = (undefined4 *)initialize_memory_08009258(inputData,currentData,currentData);\n          *currentData = memoryBlock;\n          *memoryBlock = 0;\n        }\n        currentData = outputData;\n        if (-1 < size << 0x1f) break;\nLAB_080093d2:\n        outputData = (undefined4 *)initialize_memory_08009258(inputData,currentData,memoryBlock);\n        if (currentData == (undefined4 *)0x0) break;\n        index = *(int *)(inputData + 0x4c);\n        size = size >> 1;\n        *currentData = *(undefined4 *)(index + currentData[1] * 4);\n        *(undefined4 **)(index + currentData[1] * 4) = currentData;\n        currentData = memoryBlock;\n        if (size == 0) {\n          return outputData;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return outputData;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "dataSize",
                "iVar1": "index",
                "iVar2": "size",
                "puVar3": "currentData",
                "puVar4": "memoryBlock"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "allocate_and_initialize_memory_08009444",
            "code": "\nvoid allocate_and_initialize_memory_08009444(int memory_size,undefined4 *params,uint bit_shift)\n\n{\n  int temp_var1;\n  int temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int temp_var5;\n  int temp_var6;\n  uint *ptr_var1;\n  uint *ptr_var2;\n  uint *ptr_var4;\n  uint *ptr_var5;\n  int temp_var7;\n  int temp_var8;\n  uint temp_var9;\n  uint *ptr_var3;\n  \n  temp_var5 = params[4];\n  temp_var7 = (int)bit_shift >> 5;\n  temp_var8 = temp_var7 + temp_var5 + 1;\n  temp_var3 = params[1];\n  temp_var2 = params[2];\n  if ((int)params[2] < temp_var8) {\n    do {\n      temp_var6 = temp_var2 * 2;\n      temp_var1 = temp_var2 * -2;\n      temp_var3 = temp_var3 + 1;\n      temp_var2 = temp_var6;\n    } while (temp_var8 != temp_var6 && temp_var8 + temp_var1 < 0 == SBORROW4(temp_var8,temp_var6));\n  }\n  temp_var2 = allocate_and_initialize_memory_08009444_080090c0(memory_size,temp_var3);\n  ptr_var1 = (uint *)(temp_var2 + 0x14);\n  if (0 < temp_var7) {\n    ptr_var5 = ptr_var1 + temp_var7;\n    ptr_var2 = ptr_var1;\n    do {\n      ptr_var3 = ptr_var2 + 1;\n      *ptr_var2 = 0;\n      ptr_var1 = ptr_var5;\n      ptr_var2 = ptr_var3;\n    } while (ptr_var3 != ptr_var5);\n  }\n  temp_var3 = params[4];\n  ptr_var2 = params + 5;\n  bit_shift = bit_shift & 0x1f;\n  if (bit_shift == 0) {\n    ptr_var1 = ptr_var1 + -1;\n    ptr_var5 = ptr_var2;\n    do {\n      ptr_var3 = ptr_var5 + 1;\n      ptr_var1 = ptr_var1 + 1;\n      *ptr_var1 = *ptr_var5;\n      ptr_var5 = ptr_var3;\n    } while (ptr_var3 < ptr_var2 + temp_var3);\n  }\n  else {\n    temp_var9 = 0;\n    ptr_var5 = ptr_var2;\n    do {\n      ptr_var3 = ptr_var1;\n      *ptr_var3 = *ptr_var5 << bit_shift | temp_var9;\n      ptr_var4 = ptr_var5 + 1;\n      temp_var9 = *ptr_var5 >> (0x20 - bit_shift & 0xff);\n      ptr_var1 = ptr_var3 + 1;\n      ptr_var5 = ptr_var4;\n    } while (ptr_var4 < ptr_var2 + temp_var3);\n    ptr_var3[1] = temp_var9;\n    if (temp_var9 != 0) {\n      temp_var8 = temp_var7 + temp_var5 + 2;\n    }\n  }\n  temp_var5 = *(int *)(memory_size + 0x4c);\n  temp_var3 = params[1];\n  temp_var4 = *(undefined4 *)(temp_var5 + temp_var3 * 4);\n  *(int *)(temp_var2 + 0x10) = temp_var8 + -1;\n  *params = temp_var4;\n  *(undefined4 **)(temp_var5 + temp_var3 * 4) = params;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "allocate_and_initialize_memory_08009444",
                "param_1": "memory_size",
                "param_2": "params",
                "param_3": "bit_shift",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "iVar3": "temp_var3",
                "uVar4": "temp_var4",
                "iVar5": "temp_var5",
                "iVar6": "temp_var6",
                "puVar7": "ptr_var1",
                "puVar8": "ptr_var2",
                "puVar9": "ptr_var3",
                "puVar10": "ptr_var4",
                "puVar11": "ptr_var5",
                "iVar12": "temp_var7",
                "iVar13": "temp_var8",
                "uVar14": "temp_var9"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1_start,int array2_start)\n\n{\n  int array_diff;\n  uint *ptr_array2;\n  int array1_offset;\n  uint *ptr_array1;\n  \n  array1_offset = *(int *)(array2_start + 0x10);\n  array_diff = *(int *)(array1_start + 0x10) - array1_offset;\n  if (array_diff == 0) {\n    ptr_array2 = (uint *)(array2_start + 0x14 + array1_offset * 4);\n    ptr_array1 = (uint *)(array1_start + 0x14) + array1_offset;\n    do {\n      ptr_array1 = ptr_array1 + -1;\n      ptr_array2 = ptr_array2 + -1;\n      if (*ptr_array1 != *ptr_array2) {\n        if (*ptr_array2 <= *ptr_array1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1_start + 0x14) < ptr_array1);\n  }\n  return array_diff;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1_start",
                "param_2": "array2_start",
                "iVar1": "array_diff",
                "puVar2": "ptr_array2",
                "iVar3": "array1_offset",
                "puVar4": "ptr_array1"
            },
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "reverse_and_compare_arrays_08009530",
            "code": "\nvoid reverse_and_compare_arrays_08009530(undefined4 input,uint *array1,uint *array2,undefined4 size)\n\n{\n  int result;\n  uint *ptr1;\n  uint var1;\n  uint var2;\n  undefined4 isMatched;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint *ptr6;\n  int temp;\n  uint *ptr7;\n  uint count;\n  uint *ptr8;\n  \n  ptr1 = (uint *)array2[4];\n  ptr6 = array1 + 5;\n  ptr7 = array2 + 5;\n  ptr3 = ptr6;\n  ptr4 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = ptr6 + (int)ptr1;\n    ptr1 = ptr7 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= ptr6) {\n        temp = allocate_and_initialize_memory_080090c0(input,0,ptr2,ptr1,size);\n        *(undefined4 *)(temp + 0x10) = 1;\n        *(undefined4 *)(temp + 0x14) = 0;\n        return;\n      }\n    }\n    isMatched = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    isMatched = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  isMatched = 1;\n  ptr2 = ptr6;\n  ptr1 = array1;\n  ptr3 = ptr7;\n  ptr4 = array2;\n  array2 = array1;\n  ptr7 = ptr6;\nLAB_08009578:\n  result = allocate_and_initialize_memory_080090c0(input,ptr4[1],ptr2,ptr1,size);\n  temp = 0;\n  count = ptr4[4];\n  var1 = array2[4];\n  *(undefined4 *)(result + 0xc) = isMatched;\n  ptr6 = ptr3 + count;\n  ptr1 = (uint *)(result + 0x14);\n  ptr4 = ptr7;\n  do {\n    ptr8 = ptr3 + 1;\n    ptr5 = ptr4 + 1;\n    var2 = ((*ptr3 & 0xffff) + temp) - (*ptr4 & 0xffff);\n    temp = ((*ptr3 >> 0x10) - (*ptr4 >> 0x10)) + ((int)var2 >> 0x10);\n    var2 = var2 & 0xffff | temp * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = var2;\n    temp = temp >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = ptr8;\n    ptr4 = ptr5;\n  } while (ptr5 < ptr7 + var1);\n  ptr1 = ptr8;\n  ptr3 = ptr2;\n  if (ptr8 < ptr6) {\n    do {\n      ptr4 = ptr1 + 1;\n      var1 = (*ptr1 & 0xffff) + temp;\n      temp = ((int)var1 >> 0x10) + (*ptr1 >> 0x10);\n      var2 = var1 & 0xffff | temp * 0x10000;\n      *ptr3 = var2;\n      temp = temp >> 0x10;\n      ptr1 = ptr4;\n      ptr3 = ptr3 + 1;\n    } while (ptr4 < ptr6);\n    ptr2 = (uint *)((int)ptr2 + ((int)ptr6 + ~(uint)ptr8 & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (var2 == 0) {\n    ptr2 = ptr2 + -1;\n    count = count - 1;\n    var2 = *ptr2;\n  }\n  *(uint *)(result + 0x10) = count;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "reverse_and_compare_arrays_08009530",
                "param_1": "input",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "ptr1",
                "uVar3": "var1",
                "uVar4": "var2",
                "uVar5": "isMatched",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "puVar11": "ptr6",
                "iVar12": "temp",
                "puVar13": "ptr7",
                "uVar14": "count",
                "puVar8": "ptr8"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "process_data_08009630",
            "code": "\nint processData_08009630(undefined4 arg1,undefined4 arg2,uint input1,uint input2,int *output1,\n                int *output2)\n\n{\n  int memoryBlock;\n  uint trailingZerosCount;\n  int count1;\n  int count2;\n  uint updatedInput;\n  uint shiftValue;\n  undefined8 leadingZerosCount;\n  uint localInput1;\n  uint localInput2;\n  \n  memoryBlock = allocate_and_initialize_memory_080090c0(arg1,1);\n  shiftValue = (input2 << 1) >> 0x15;\n  localInput2 = input2 & 0xfffff;\n  if (shiftValue != 0) {\n    localInput2 = localInput2 | 0x100000;\n  }\n  if (input1 == 0) {\n    count1 = count_trailing_zeros_080091e4(&localInput2);\n    count2 = 1;\n    trailingZerosCount = count1 + 0x20;\n    *(undefined4 *)(memoryBlock + 0x10) = 1;\n    *(uint *)(memoryBlock + 0x14) = localInput2;\n  }\n  else {\n    localInput1 = input1;\n    trailingZerosCount = count_trailing_zeros_080091e4(&localInput1);\n    if (trailingZerosCount == 0) {\n      *(uint *)(memoryBlock + 0x14) = localInput1;\n    }\n    else {\n      updatedInput = localInput2 << (0x20 - trailingZerosCount & 0xff);\n      localInput2 = localInput2 >> (trailingZerosCount & 0xff);\n      *(uint *)(memoryBlock + 0x14) = updatedInput | localInput1;\n    }\n    if (localInput2 == 0) {\n      count2 = 1;\n    }\n    else {\n      count2 = 2;\n    }\n    *(uint *)(memoryBlock + 0x18) = localInput2;\n    *(int *)(memoryBlock + 0x10) = count2;\n  }\n  if (shiftValue == 0) {\n    *output1 = trailingZerosCount - 0x432;\n    leadingZerosCount = count_leading_zeros_080091a4(*(undefined4 *)(memoryBlock + count2 * 4 + 0x10));\n    *output2 = (int)((ulonglong)leadingZerosCount >> 0x20) * 0x20 - (int)leadingZerosCount;\n    return memoryBlock;\n  }\n  *output1 = (shiftValue - 0x433) + trailingZerosCount;\n  *output2 = 0x35 - trailingZerosCount;\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_08009630": "process_data_08009630",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "memoryBlock",
                "uVar2": "trailingZerosCount",
                "iVar3": "count1",
                "iVar4": "count2",
                "uVar5": "updatedInput",
                "uVar6": "shiftValue",
                "uVar7": "leadingZerosCount",
                "local_20": "localInput1",
                "local_1c": "localInput2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_normalized_value_080096e0",
            "code": "\nundefined8 calculate_normalized_value_080096e0(uint input_value,uint input_mask,int *output_result,undefined4 constant_value)\n\n{\n  int temp_var_1;\n  uint temp_var_2;\n  undefined8 combined_values;\n  \n  combined_values = CONCAT44(input_mask,input_value);\n  temp_var_1 = 0;\n  temp_var_2 = input_mask & 0x7fffffff;\n  *output_result = 0;\n  if ((temp_var_2 < 0x7ff00000) && ((temp_var_2 | input_value) != 0)) {\n    if (temp_var_2 < 0x100000) {\n      combined_values = calculate_result_080004c8(input_value,input_mask,0,0x43500000,constant_value);\n      temp_var_1 = -0x36;\n      temp_var_2 = (uint)((ulonglong)combined_values >> 0x20) & 0x7fffffff;\n    }\n    input_value = (uint)combined_values;\n    input_mask = (uint)((ulonglong)combined_values >> 0x20) & 0x800fffff | 0x3fe00000;\n    *output_result = ((int)temp_var_2 >> 0x14) + -0x3fe + temp_var_1;\n  }\n  return CONCAT44(input_mask,input_value);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_normalized_value_080096e0",
                "param_1": "input_value",
                "param_2": "input_mask",
                "param_3": "output_result",
                "param_4": "constant_value",
                "iVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "combined_values"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "allocate_and_check_memory_08009744",
            "code": "\nvoid allocateAndCheckMemory_08009744(int *outputPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000c10 = 0;\n  allocationResult = allocate_memory_08005728(size);\n  if ((allocationResult == -1) && (DAT_20000c10 != 0)) {\n    *outputPointer = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "allocate_and_check_memory_08009744",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_safe_string_08009768",
            "code": "\nvoid copy_safe_string_08009768(uint *destination,uint *source,uint size)\n\n{\n  char current_byte;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_value;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) &&\n     (destination_ptr = destination, source_ptr = source, 3 < size)) {\n    do {\n      source = source_ptr + 1;\n      current_value = *source_ptr;\n      destination = destination_ptr;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      destination = destination_ptr + 1;\n      *destination_ptr = current_value;\n      destination_ptr = destination;\n      source_ptr = source;\n    } while (3 < size);\n  }\n  source_ptr = source;\n  if (size != 0) {\nLAB_0800979c:\n    current_byte = *(char *)source_ptr;\n    *(char *)destination = current_byte;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      size = size - 1;\n      if (current_byte == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_byte = *(char *)source_ptr;\n      *(char *)destination = current_byte;\n    }\n    if (size != 0) {\n      source_ptr = destination;\n      do {\n        destination_ptr = (uint *)((int)source_ptr + 1);\n        *(char *)source_ptr = '\\0';\n        source_ptr = destination_ptr;\n      } while (destination_ptr != (uint *)(size + (int)destination));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_safe_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "cVar1": "current_byte",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "uVar4": "current_value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "copy_and_update_memory_080097cc",
            "code": "\nundefined4 copy_and_update_memory_080097cc(undefined4 *result,int *source,int *destination)\n\n{\n  int sourceIndex;\n  uint destinationIndex;\n  int allocatedMemory;\n  int bytesCopied;\n  uint newAllocationSize;\n  uint bytesRemaining;\n  undefined4 *currentData;\n  undefined4 *nextData;\n  undefined4 currentValue;\n  \n  if (destination[2] != 0) {\n    sourceIndex = *source;\n    newAllocationSize = source[2];\n    nextData = (undefined4 *)*destination;\n    do {\n      do {\n        currentData = nextData + 2;\n        currentValue = *nextData;\n        bytesRemaining = nextData[1];\n        nextData = currentData;\n      } while (bytesRemaining == 0);\n      destinationIndex = bytesRemaining;\n      if ((newAllocationSize <= bytesRemaining) && (destinationIndex = newAllocationSize, (*(ushort *)(source + 3) & 0x480) != 0)) {\n        bytesCopied = sourceIndex - source[4];\n        newAllocationSize = (source[5] * 3) / 2;\n        destinationIndex = bytesRemaining + 1 + bytesCopied;\n        if (newAllocationSize < destinationIndex) {\n          newAllocationSize = destinationIndex;\n        }\n        if ((int)((uint)*(ushort *)(source + 3) << 0x15) < 0) {\n          allocatedMemory = allocate_and_initialize_memory_08008af8(result,newAllocationSize);\n          if (allocatedMemory == 0) {\nLAB_08009896:\n            *result = 0xc;\n            *(ushort *)(source + 3) = *(ushort *)(source + 3) | 0x40;\n            destination[1] = 0;\n            destination[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory_08001084(allocatedMemory,source[4],bytesCopied);\n          *(ushort *)(source + 3) = *(ushort *)(source + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          allocatedMemory = allocate_and_initialize_memory_if_needed_08009adc(result);\n          if (allocatedMemory == 0) {\n            initialize_memory_and_data_080088ec(result,source[4]);\n            goto LAB_08009896;\n          }\n        }\n        sourceIndex = allocatedMemory + bytesCopied;\n        source[5] = newAllocationSize;\n        source[4] = allocatedMemory;\n        *source = sourceIndex;\n        source[2] = newAllocationSize - bytesCopied;\n        destinationIndex = bytesRemaining;\n      }\n      copy_memory_08009a18(sourceIndex,currentValue,destinationIndex);\n      bytesCopied = destination[2];\n      newAllocationSize = source[2] - destinationIndex;\n      sourceIndex = *source + destinationIndex;\n      source[2] = newAllocationSize;\n      *source = sourceIndex;\n      destination[2] = bytesCopied - bytesRemaining;\n    } while (bytesCopied - bytesRemaining != 0);\n  }\n  destination[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "copy_and_update_memory_080097cc",
                "param_1": "result",
                "param_2": "source",
                "param_3": "destination",
                "iVar1": "sourceIndex",
                "uVar2": "destinationIndex",
                "iVar3": "allocatedMemory",
                "iVar4": "bytesCopied",
                "uVar5": "newAllocationSize",
                "uVar6": "bytesRemaining",
                "puVar7": "currentData",
                "puVar8": "nextData",
                "uVar9": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int operation,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitmask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (operation != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data1;\n      bitmask = 1 << (count & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitmask;\n      *(undefined4 *)(dataPtr + count * 4 + 0x108) = data2;\n      if (operation == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitmask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    *(uint *)(dataPtr + 4) = count + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(dataPtr + (count + 2) * 4) = value;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "operation",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitmask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "allocate_and_initialize_memory_08009980",
            "code": "\nundefined4 * allocate_and_initialize_memory_08009980(undefined4 memory_start,int item_size,int num_items)\n\n{\n  undefined4 *memory_pointer;\n  uint memory_size;\n  undefined4 *next_memory_pointer;\n  \n  memory_pointer = (undefined4 *)allocate_and_initialize_memory_08009980_08008af8(memory_start,num_items * item_size);\n  if (memory_pointer == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  memory_size = (memory_pointer[-1] & 0xfffffffc) - 4;\n  if (memory_size < 0x25) {\n    next_memory_pointer = memory_pointer;\n    if (0x13 < memory_size) {\n      *memory_pointer = 0;\n      memory_pointer[1] = 0;\n      if (0x1b < memory_size) {\n        memory_pointer[2] = 0;\n        memory_pointer[3] = 0;\n        if (memory_size == 0x24) {\n          memory_pointer[4] = 0;\n          memory_pointer[5] = 0;\n          next_memory_pointer = memory_pointer + 6;\n        }\n        else {\n          next_memory_pointer = memory_pointer + 4;\n        }\n        *next_memory_pointer = 0;\n        next_memory_pointer[1] = 0;\n        next_memory_pointer[2] = 0;\n        return memory_pointer;\n      }\n      next_memory_pointer = memory_pointer + 2;\n    }\n    *next_memory_pointer = 0;\n    next_memory_pointer[1] = 0;\n    next_memory_pointer[2] = 0;\n    return memory_pointer;\n  }\n  fill_memory_08005d68(memory_pointer,0);\n  return memory_pointer;\n}\n\n",
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "param_1": "memory_start",
                "param_2": "item_size",
                "param_3": "num_items",
                "puVar1": "memory_pointer",
                "uVar2": "memory_size",
                "puVar3": "next_memory_pointer"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *src,undefined4 *dest,uint size)\n\n{\n  undefined4 *src_ptr;\n  undefined4 *dest_ptr;\n  int iteration;\n  undefined *dest_end;\n  undefined4 *temp_ptr;\n  uint temp;\n  uint remaining_size;\n  \n  if ((dest < src) && (dest_ptr = (undefined4 *)((int)dest + size), src < dest_ptr)) {\n    dest_end = (undefined *)((int)src + size);\n    if (size != 0) {\n      do {\n        dest_ptr = (undefined4 *)((int)dest_ptr + -1);\n        dest_end = dest_end + -1;\n        *dest_end = *(undefined *)dest_ptr;\n      } while (dest != dest_ptr);\n    }\n  }\n  else {\n    remaining_size = size;\n    if (0xf < size) {\n      if ((((uint)src | (uint)dest) & 3) != 0) goto LAB_08009abc;\n      dest_ptr = dest + 4;\n      src_ptr = src + 4;\n      do {\n        temp_ptr = dest_ptr + 4;\n        src_ptr[-4] = dest_ptr[-4];\n        src_ptr[-3] = dest_ptr[-3];\n        src_ptr[-2] = dest_ptr[-2];\n        src_ptr[-1] = dest_ptr[-1];\n        dest_ptr = temp_ptr;\n        src_ptr = src_ptr + 4;\n      } while (temp_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      remaining_size = size & 0xf;\n      dest = dest + iteration * 4;\n      src = src + iteration * 4;\n      if (3 < remaining_size) {\n        dest_ptr = src + -1;\n        temp = remaining_size;\n        src_ptr = dest;\n        do {\n          temp = temp - 4;\n          dest_ptr = dest_ptr + 1;\n          *dest_ptr = *src_ptr;\n          src_ptr = src_ptr + 1;\n        } while (3 < temp);\n        iteration = (remaining_size - 4 & 0xfffffffc) + 4;\n        src = (undefined4 *)((int)src + iteration);\n        dest = (undefined4 *)((int)dest + iteration);\n        remaining_size = size & 3;\n      }\n    }\n    size = remaining_size;\n    if (remaining_size != 0) {\nLAB_08009abc:\n      dest_end = (undefined *)((int)src + -1);\n      dest_ptr = dest;\n      do {\n        src_ptr = (undefined4 *)((int)dest_ptr + 1);\n        dest_end = dest_end + 1;\n        *dest_end = *(undefined *)dest_ptr;\n        dest_ptr = src_ptr;\n      } while (src_ptr != (undefined4 *)(size + (int)dest));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "src",
                "param_2": "dest",
                "param_3": "size",
                "puVar1": "src_ptr",
                "puVar2": "dest_ptr",
                "iVar3": "iteration",
                "puVar4": "dest_end",
                "puVar5": "temp_ptr",
                "uVar6": "temp",
                "uVar7": "remaining_size"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_and_initialize_memory_if_needed_08009adc",
            "code": "\nint * allocate_and_initialize_memory_if_needed_08009adc(undefined4 *pointer,int *existing_memory,uint size)\n\n{\n  int *new_memory;\n  int temp1;\n  int *temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  int *temp6;\n  uint aligned_size;\n  uint adjusted_size;\n  uint new_block_size;\n  int current_block;\n  \n  if (existing_memory == (int *)0x0) {\n    temp2 = (int *)allocate_and_initialize_memory(pointer,size);\n    return temp2;\n  }\n  initialize_data();\n  temp5 = existing_memory[-1];\n  adjusted_size = temp5 & 0xfffffffc;\n  temp2 = existing_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < size) {\nLAB_08009b8e:\n    *pointer = 0xc;\n    return (int *)0x0;\n  }\n  current_block = (int)temp2 + adjusted_size;\n  new_block_size = adjusted_size;\n  if ((int)adjusted_size < (int)aligned_size) {\n    if (DAT_20000454 == current_block) {\n      current_block = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + adjusted_size;\n      if ((int)(aligned_size + 0x10) <= current_block) {\n        DAT_20000454 = (int)temp2 + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = current_block - aligned_size | 1;\n        existing_memory[-1] = aligned_size | existing_memory[-1] & 1U;\n        initialize_data_again(pointer);\n        return existing_memory;\n      }\n      if (-1 < (int)(temp5 << 0x1f)) {\n        new_memory = (int *)((int)temp2 - existing_memory[-2]);\n        temp5 = new_memory[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(current_block + temp5)) {\n          temp4 = new_memory[3];\n          temp2 = new_memory + 2;\n          temp1 = *temp2;\n          adjusted_size = adjusted_size - 4;\n          *(int *)(temp1 + 0xc) = temp4;\n          *(int *)(temp4 + 8) = temp1;\n          if (adjusted_size < 0x25) {\n            temp1 = *existing_memory;\n            temp6 = temp2;\n            if (0x13 < adjusted_size) {\n              new_memory[2] = temp1;\n              new_memory[3] = existing_memory[1];\n              temp1 = existing_memory[2];\n              if (adjusted_size < 0x1c) {\n                existing_memory = existing_memory + 2;\n                temp6 = new_memory + 4;\n              }\n              else {\n                new_memory[4] = temp1;\n                new_memory[5] = existing_memory[3];\n                temp1 = existing_memory[4];\n                if (adjusted_size == 0x24) {\n                  new_memory[6] = temp1;\n                  new_memory[7] = existing_memory[5];\n                  temp1 = existing_memory[6];\n                  existing_memory = existing_memory + 6;\n                  temp6 = new_memory + 8;\n                }\n                else {\n                  existing_memory = existing_memory + 4;\n                  temp6 = new_memory + 6;\n                }\n              }\n            }\n            *temp6 = temp1;\n            temp6[1] = existing_memory[1];\n            temp6[2] = existing_memory[2];\n          }\n          else {\n            copy_memory(temp2,existing_memory);\n          }\n          DAT_20000454 = (int)new_memory + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (current_block + temp5) - aligned_size | 1;\n          new_memory[1] = aligned_size | new_memory[1] & 1U;\n          initialize_data_again(pointer);\n          return temp2;\n        }\nLAB_08009bb0:\n        new_block_size = adjusted_size + temp5;\n        if ((int)aligned_size <= (int)new_block_size) {\n          temp4 = new_memory[3];\n          temp6 = new_memory + 2;\n          temp1 = *temp6;\n          *(int *)(temp1 + 0xc) = temp4;\n          current_block = (int)new_memory + new_block_size;\n          *(int *)(temp4 + 8) = temp1;\n          temp2 = new_memory;\n          if (adjusted_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_memory(temp6,existing_memory);\n          existing_memory = temp6;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(current_block + 4) & 0xfffffffe) + current_block + 4) << 0x1f) {\n        temp3 = *(uint *)(current_block + 4) & 0xfffffffc;\n        new_block_size = adjusted_size + temp3;\n        if ((int)new_block_size < (int)aligned_size) {\n          if ((int)(temp5 << 0x1f) < 0) goto LAB_08009b36;\n          new_memory = (int *)((int)temp2 - existing_memory[-2]);\n          temp5 = new_memory[1] & 0xfffffffc;\n          new_block_size = temp3 + temp5 + adjusted_size;\n          if ((int)new_block_size < (int)aligned_size) goto LAB_08009bb0;\n          temp1 = *(int *)(current_block + 8);\n          current_block = *(int *)(current_block + 0xc);\n          *(int *)(temp1 + 0xc) = current_block;\n          *(int *)(current_block + 8) = temp1;\n          temp6 = new_memory + 2;\n          temp1 = *temp6;\n          temp4 = new_memory[3];\n          *(int *)(temp1 + 0xc) = temp4;\n          current_block = (int)new_memory + new_block_size;\n          *(int *)(temp4 + 8) = temp1;\n          temp2 = new_memory;\n          if (0x24 < adjusted_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          adjusted_size = adjusted_size - 4;\n          temp1 = *existing_memory;\n          new_memory = temp6;\n          if (0x13 < adjusted_size) {\n            temp2[2] = temp1;\n            temp2[3] = existing_memory[1];\n            temp1 = existing_memory[2];\n            if (adjusted_size < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = temp2 + 4;\n            }\n            else {\n              temp2[4] = temp1;\n              temp2[5] = existing_memory[3];\n              temp1 = existing_memory[4];\n              if (adjusted_size == 0x24) {\n                temp2[6] = temp1;\n                temp2[7] = existing_memory[5];\n                temp1 = existing_memory[6];\n                existing_memory = existing_memory + 6;\n                new_memory = temp2 + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = temp2 + 6;\n              }\n            }\n          }\n          *new_memory = temp1;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          existing_memory = temp6;\n        }\n        else {\n          temp1 = *(int *)(current_block + 8);\n          temp4 = *(int *)(current_block + 0xc);\n          *(int *)(temp1 + 0xc) = temp4;\n          current_block = (int)temp2 + new_block_size;\n          *(int *)(temp4 + 8) = temp1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp5 << 0x1f)) {\n        new_memory = (int *)((int)temp2 - existing_memory[-2]);\n        temp5 = new_memory[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory = (int *)allocate_and_initialize_memory(pointer,size);\n    if (new_memory != (int *)0x0) {\n      if ((int *)((existing_memory[-1] & 0xfffffffeU) + (int)temp2) == new_memory + -2) {\n        new_block_size = adjusted_size + (new_memory[-1] & 0xfffffffcU);\n        current_block = (int)temp2 + new_block_size;\n        goto LAB_08009c00;\n      }\n      adjusted_size = adjusted_size - 4;\n      if (adjusted_size < 0x25) {\n        current_block = *existing_memory;\n        temp2 = existing_memory;\n        temp6 = new_memory;\n        if (0x13 < adjusted_size) {\n          *new_memory = current_block;\n          new_memory[1] = existing_memory[1];\n          if (adjusted_size < 0x1c) {\n            current_block = existing_memory[2];\n            temp2 = existing_memory + 2;\n            temp6 = new_memory + 2;\n          }\n          else {\n            new_memory[2] = existing_memory[2];\n            new_memory[3] = existing_memory[3];\n            if (adjusted_size == 0x24) {\n              new_memory[4] = existing_memory[4];\n              new_memory[5] = existing_memory[5];\n              current_block = existing_memory[6];\n              temp2 = existing_memory + 6;\n              temp6 = new_memory + 6;\n            }\n            else {\n              current_block = existing_memory[4];\n              temp2 = existing_memory + 4;\n              temp6 = new_memory + 4;\n            }\n          }\n        }\n        *temp6 = current_block;\n        temp6[1] = temp2[1];\n        temp6[2] = temp2[2];\n      }\n      else {\n        copy_memory(new_memory,existing_memory);\n      }\n      initialize_memory_and_data(pointer,existing_memory);\n    }\n    initialize_data_again(pointer);\n    existing_memory = new_memory;\n  }\n  else {\nLAB_08009c00:\n    if (new_block_size - aligned_size < 0x10) {\n      temp2[1] = temp2[1] & 1U | new_block_size;\n      *(uint *)(current_block + 4) = *(uint *)(current_block + 4) | 1;\n    }\n    else {\n      temp2[1] = temp2[1] & 1U | aligned_size;\n      *(uint *)((int)temp2 + aligned_size + 4) = new_block_size - aligned_size | 1;\n      *(uint *)(current_block + 4) = *(uint *)(current_block + 4) | 1;\n      initialize_memory_and_data(pointer,(int)temp2 + aligned_size + 8);\n    }\n    initialize_data_again(pointer);\n  }\n  return existing_memory;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_and_initialize_memory_if_needed_08009adc",
                "param_1": "pointer",
                "param_2": "existing_memory",
                "param_3": "size",
                "piVar1": "new_memory",
                "iVar2": "temp1",
                "piVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "aligned_size",
                "uVar9": "adjusted_size",
                "uVar10": "new_block_size",
                "iVar11": "current_block",
                "allocate_and_initialize_memory_08008af8": "allocate_and_initialize_memory",
                "initialize_data_080090a8": "initialize_data",
                "initialize_data_080090b4": "initialize_data_again",
                "copy_memory_08009a18": "copy_memory",
                "initialize_memory_and_data_080088ec": "initialize_memory_and_data"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 152980,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": []
}