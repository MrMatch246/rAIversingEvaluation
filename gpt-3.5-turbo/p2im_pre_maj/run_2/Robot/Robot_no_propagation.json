{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "set_flag_if_not_set_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 setFlagIfNotSet_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "set_flag_if_not_set_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_unsigned_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_unsigned_integers_08000134(undefined4 first_integer,undefined4 second_integer)\n\n{\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_unsigned_integers_08000134",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "perform_unsigned_division_08000158",
            "code": "\nulonglong performUnsignedDivision_08000158(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint result1;\n  uint result2;\n  int shift2;\n  uint temp4;\n  uint temp5;\n  uint result3;\n  uint result4;\n  bool isZero;\n  bool condition1;\n  bool condition2;\n  \n  result1 = remainder ^ 0x80000000;\n  temp4 = divisor << 1;\n  remainder = remainder << 1;\n  isZero = ((divisor ^ result1) & 0x7fffffff) == 0;\n  condition1 = isZero && dividend == quotient;\n  if (!isZero || dividend != quotient) {\n    condition1 = (temp4 | dividend) == 0;\n  }\n  if (!condition1) {\n    condition1 = (remainder | quotient) == 0;\n  }\n  shift2 = (int)temp4 >> 0x15;\n  if (!condition1) {\n    condition1 = shift2 == -1;\n  }\n  shift1 = (int)remainder >> 0x15;\n  if (!condition1) {\n    condition1 = shift1 == -1;\n  }\n  if (condition1) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp4 = result1;\n      result3 = quotient;\n      if (shift2 == -1) {\n        temp4 = divisor;\n        result3 = dividend;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        quotient = result3;\n        result1 = temp4;\n      }\n      condition1 = (result3 | temp4 << 0xc) == 0;\n      if (condition1) {\n        condition1 = (quotient | result1 << 0xc) == 0;\n      }\n      if (condition1) {\n        condition1 = temp4 == result1;\n      }\n      if (!condition1) {\n        temp4 = temp4 | 0x80000;\n      }\n      return CONCAT44(temp4,result3);\n    }\n    if (((divisor ^ result1) & 0x7fffffff) != 0 || dividend != quotient) {\n      if ((temp4 | dividend) == 0) {\n        dividend = quotient;\n        divisor = result1;\n      }\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != result1) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      condition1 = (dividend & 0x80000000) != 0;\n      result1 = divisor * 2 + (uint)condition1;\n      if (CARRY4(divisor,divisor) || CARRY4(divisor * 2,(uint)condition1)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,dividend << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(divisor + 0x100000,dividend);\n    }\n    divisor = divisor & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(divisor | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  remainder = remainder >> 0x15;\n  result3 = remainder - temp4;\n  condition1 = result3 != 0;\n  if (remainder < temp4) {\n    result3 = -result3;\n  }\n  temp5 = dividend;\n  result2 = divisor;\n  if (condition1 && temp4 <= remainder) {\n    temp4 = temp4 + result3;\n    temp5 = quotient;\n    result2 = result1;\n    quotient = dividend;\n    result1 = divisor;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(result2,temp5);\n  }\n  temp2 = result2 & 0xfffff | 0x100000;\n  if ((result2 & 0x80000000) != 0) {\n    condition1 = temp5 != 0;\n    temp5 = -temp5;\n    temp2 = -temp2 - (uint)condition1;\n  }\n  result2 = result1 & 0xfffff | 0x100000;\n  if ((result1 & 0x80000000) != 0) {\n    condition1 = quotient != 0;\n    quotient = -quotient;\n    result2 = -result2 - (uint)condition1;\n  }\n  if (temp4 == result3) {\n    result2 = result2 ^ 0x100000;\n    if (temp4 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  result1 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = quotient << (result1 & 0xff);\n    quotient = quotient >> (result3 & 0xff);\n    temp1 = temp5 + quotient;\n    temp3 = result2 << (result1 & 0xff);\n    result1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp5,quotient) + ((int)result2 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = result2 << (-result3 + 0x40 & 0xff);\n    if (quotient != 0) {\n      result4 = result4 | 2;\n    }\n    result2 = (int)result2 >> (result3 - 0x20 & 0xff);\n    result1 = temp5 + result2;\n    temp2 = temp2 + ((int)result2 >> 0x1f) + (uint)CARRY4(temp5,result2);\n  }\n  divisor = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    condition1 = result4 == 0;\n    result4 = -result4;\n    result3 = -result1;\n    result1 = -(uint)!condition1 - result1;\n    result3 = -(uint)(condition1 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < result3) {\n      temp5 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)result1;\n      result1 = (uint)(temp5 != 0) << 0x1f | result1 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition1 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      condition1 = (result1 & 1) != 0;\n    }\n    return CONCAT44(result3 + temp5 * 0x100000 + (uint)CARRY4(result1,(uint)condition1) | divisor,\n                    result1 + condition1);\n  }\n  isZero = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  temp5 = result1 * 2;\n  condition1 = CARRY4(result1,result1);\n  result1 = result1 * 2 + (uint)isZero;\n  result3 = result3 * 2 + (uint)(condition1 || CARRY4(temp5,(uint)isZero));\n  temp5 = temp4 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000268;\n  result2 = result1;\n  temp4 = result3;\n  if (result3 == 0) {\n    result2 = 0;\n    temp4 = result1;\n  }\n  shift2 = LZCOUNT(temp4);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  condition2 = SBORROW4(result3,0x20);\n  result1 = shift2 - 0x2b;\n  condition1 = (int)result1 < 0;\n  isZero = result1 == 0;\n  if ((int)result3 < 0x20) {\n    condition2 = SCARRY4(result1,0xc);\n    shift2 = shift2 + -0x1f;\n    condition1 = shift2 < 0;\n    isZero = shift2 == 0;\n    result1 = result3;\n    if (!isZero && condition1 == condition2) {\n      result2 = temp4 << (result3 & 0xff);\n      temp4 = temp4 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || condition1 != condition2) {\n    result4 = 0x20 - result1;\n  }\n  temp4 = temp4 << (result1 & 0xff);\n  if (isZero || condition1 != condition2) {\n    temp4 = temp4 | result2 >> (result4 & 0xff);\n  }\n  if (isZero || condition1 != condition2) {\n    result2 = result2 << (result1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result3 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - result3) * 0x100000 | divisor,result2);\n  }\n  result1 = ~(temp5 - result3);\n  if ((int)result1 < 0x1f) {\n    shift2 = result1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(result1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,result2 >> (0x20 - (0xcU - shift2) & 0xff) | temp4 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result1 = result1 + 1;\n    return CONCAT44(divisor | temp4 >> (result1 & 0xff),\n                    result2 >> (result1 & 0xff) | temp4 << (0x20 - result1 & 0xff));\n  }\n  return CONCAT44(temp2,temp4 >> (result1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "perform_unsigned_division_08000158",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "result1",
                "uVar7": "result2",
                "iVar8": "shift2",
                "uVar9": "temp4",
                "uVar10": "temp5",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "isZero",
                "bVar14": "condition1",
                "bVar15": "condition2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_shifted_sum_0800015c",
            "code": "\nulonglong calculate_shifted_sum_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shifted_input2;\n  byte carry_flag;\n  uint shifted_sum;\n  uint shifted_sum2;\n  uint input2_copy;\n  int shifted_input4;\n  uint shifted_input2_copy;\n  uint shifted_input4_copy;\n  uint shifted_sum_copy;\n  uint shifted_sum2_copy;\n  uint shifted_sum2_shifted;\n  uint temp1;\n  bool temp1_flag;\n  bool temp2_flag;\n  bool temp3_flag;\n  \n  shifted_input2_copy = input2 << 1;\n  shifted_sum_copy = input4 << 1;\n  temp1_flag = ((input2 ^ input4) & 0x7fffffff) == 0;\n  temp2_flag = temp1_flag && input1 == input3;\n  if (!temp1_flag || input1 != input3) {\n    temp2_flag = (shifted_input2_copy | input1) == 0;\n  }\n  if (!temp2_flag) {\n    temp2_flag = (shifted_sum_copy | input3) == 0;\n  }\n  shifted_input4 = (int)shifted_input2_copy >> 0x15;\n  if (!temp2_flag) {\n    temp2_flag = shifted_input4 == -1;\n  }\n  shifted_input2 = (int)shifted_sum_copy >> 0x15;\n  if (!temp2_flag) {\n    temp2_flag = shifted_input2 == -1;\n  }\n  if (temp2_flag) {\n    if (shifted_input4 == -1 || shifted_input2 == -1) {\n      shifted_sum_copy = input4;\n      shifted_input2_copy = input3;\n      if (shifted_input4 == -1) {\n        shifted_sum_copy = input2;\n        shifted_input2_copy = input1;\n      }\n      if (shifted_input4 != -1 || shifted_input2 != -1) {\n        input3 = shifted_input2_copy;\n        input4 = shifted_sum_copy;\n      }\n      temp2_flag = (shifted_input2_copy | shifted_sum_copy << 0xc) == 0;\n      if (temp2_flag) {\n        temp2_flag = (input3 | input4 << 0xc) == 0;\n      }\n      if (temp2_flag) {\n        temp2_flag = shifted_sum_copy == input4;\n      }\n      if (!temp2_flag) {\n        shifted_sum_copy = shifted_sum_copy | 0x80000;\n      }\n      return CONCAT44(shifted_sum_copy,shifted_input2_copy);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2_copy | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2_copy >> 0x15 == 0) {\n      temp2_flag = (input1 & 0x80000000) != 0;\n      shifted_sum_copy = input2 * 2 + (uint)temp2_flag;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)temp2_flag)) {\n        shifted_sum_copy = shifted_sum_copy | 0x80000000;\n      }\n      return CONCAT44(shifted_sum_copy,input1 << 1);\n    }\n    if (shifted_input2_copy < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2_copy = shifted_input2_copy >> 0x15;\n  shifted_sum_copy = shifted_sum_copy >> 0x15;\n  shifted_sum2_copy = shifted_sum_copy - shifted_input2_copy;\n  temp2_flag = shifted_sum2_copy != 0;\n  if (shifted_sum_copy < shifted_input2_copy) {\n    shifted_sum2_copy = -shifted_sum2_copy;\n  }\n  shifted_input4_copy = input1;\n  input2_copy = input2;\n  if (temp2_flag && shifted_input2_copy <= shifted_sum_copy) {\n    shifted_input2_copy = shifted_input2_copy + shifted_sum2_copy;\n    shifted_input4_copy = input3;\n    input2_copy = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < shifted_sum2_copy) {\n    return CONCAT44(input2_copy,shifted_input4_copy);\n  }\n  shifted_sum_copy = input2_copy & 0xfffff | 0x100000;\n  if ((input2_copy & 0x80000000) != 0) {\n    temp2_flag = shifted_input4_copy != 0;\n    shifted_input4_copy = -shifted_input4_copy;\n    shifted_sum_copy = -shifted_sum_copy - (uint)temp2_flag;\n  }\n  input2_copy = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    temp2_flag = input3 != 0;\n    input3 = -input3;\n    input2_copy = -input2_copy - (uint)temp2_flag;\n  }\n  if (shifted_input2_copy == shifted_sum2_copy) {\n    input2_copy = input2_copy ^ 0x100000;\n    if (shifted_input2_copy == 0) {\n      shifted_sum_copy = shifted_sum_copy ^ 0x100000;\n      shifted_input2_copy = 1;\n    }\n    else {\n      shifted_sum2_copy = shifted_sum2_copy - 1;\n    }\n  }\n  temp1 = -shifted_sum2_copy + 0x20;\n  if ((int)shifted_sum2_copy < 0x21) {\n    shifted_sum2_shifted = input3 << (temp1 & 0xff);\n    input3 = input3 >> (shifted_sum2_copy & 0xff);\n    shifted_sum = shifted_input4_copy + input3;\n    shifted_sum2 = input2_copy << (temp1 & 0xff);\n    temp1 = shifted_sum + shifted_sum2;\n    shifted_sum_copy = shifted_sum_copy + CARRY4(shifted_input4_copy,input3) + ((int)input2_copy >> (shifted_sum2_copy & 0xff)) +\n            (uint)CARRY4(shifted_sum,shifted_sum2);\n  }\n  else {\n    shifted_sum2_shifted = input2_copy << (-shifted_sum2_copy + 0x40 & 0xff);\n    if (input3 != 0) {\n      shifted_sum2_shifted = shifted_sum2_shifted | 2;\n    }\n    input2_copy = (int)input2_copy >> (shifted_sum2_copy - 0x20 & 0xff);\n    temp1 = shifted_input4_copy + input2_copy;\n    shifted_sum_copy = shifted_sum_copy + ((int)input2_copy >> 0x1f) + (uint)CARRY4(shifted_input4_copy,input2_copy);\n  }\n  input2 = shifted_sum_copy & 0x80000000;\n  shifted_sum2_copy = shifted_sum_copy;\n  if ((int)shifted_sum_copy < 0) {\n    temp2_flag = shifted_sum2_shifted == 0;\n    shifted_sum2_shifted = -shifted_sum2_shifted;\n    shifted_sum2_copy = -temp1;\n    temp1 = -(uint)!temp2_flag - temp1;\n    shifted_sum2_copy = -(uint)(temp2_flag <= shifted_sum2_copy) - shifted_sum_copy;\n  }\n  if (0xfffff < shifted_sum2_copy) {\n    shifted_input4_copy = shifted_input2_copy - 1;\n    if (0x1fffff < shifted_sum2_copy) {\n      shifted_sum_copy = shifted_sum2_copy & 1;\n      shifted_sum2_copy = shifted_sum2_copy >> 1;\n      carry_flag = (byte)temp1;\n      temp1 = (uint)(shifted_sum_copy != 0) << 0x1f | temp1 >> 1;\n      shifted_sum2_shifted = (uint)(carry_flag & 1) << 0x1f | shifted_sum2_shifted >> 1;\n      shifted_input4_copy = shifted_input2_copy;\n      if (0xffbfffff < shifted_input2_copy * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    temp2_flag = 0x7fffffff < shifted_sum2_shifted;\n    if (shifted_sum2_shifted == 0x80000000) {\n      temp2_flag = (temp1 & 1) != 0;\n    }\n    return CONCAT44(shifted_sum2_copy + shifted_input4_copy * 0x100000 + (uint)CARRY4(temp1,(uint)temp2_flag) | input2,\n                    temp1 + temp2_flag);\n  }\n  temp1_flag = (shifted_sum2_shifted & 0x80000000) != 0;\n  shifted_sum2_shifted = shifted_sum2_shifted << 1;\n  shifted_input4_copy = temp1 * 2;\n  temp2_flag = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)temp1_flag;\n  shifted_sum2_copy = shifted_sum2_copy * 2 + (uint)(temp2_flag || CARRY4(shifted_input4_copy,(uint)temp1_flag));\n  shifted_input4_copy = shifted_input2_copy - 2;\n  if ((shifted_sum2_copy & 0x100000) != 0) goto LAB_08000268;\n  input2_copy = temp1;\n  shifted_input2_copy = shifted_sum2_copy;\n  if (shifted_sum2_copy == 0) {\n    input2_copy = 0;\n    shifted_input2_copy = temp1;\n  }\n  shifted_input4 = LZCOUNT(shifted_input2_copy);\n  if (shifted_sum2_copy == 0) {\n    shifted_input4 = shifted_input4 + 0x20;\n  }\n  temp1 = shifted_input4 - 0xb;\n  temp3_flag = SBORROW4(temp1,0x20);\n  shifted_sum2_copy = shifted_input4 - 0x2b;\n  temp2_flag = (int)shifted_sum2_copy < 0;\n  temp1_flag = shifted_sum2_copy == 0;\n  if ((int)temp1 < 0x20) {\n    temp3_flag = SCARRY4(shifted_sum2_copy,0xc);\n    shifted_input4 = shifted_input4 + -0x1f;\n    temp2_flag = shifted_input4 < 0;\n    temp1_flag = shifted_input4 == 0;\n    shifted_sum2_copy = temp1;\n    if (!temp1_flag && temp2_flag == temp3_flag) {\n      input2_copy = shifted_input2_copy << (temp1 & 0xff);\n      shifted_input2_copy = shifted_input2_copy >> (0xcU - shifted_input4 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (temp1_flag || temp2_flag != temp3_flag) {\n    shifted_sum2_shifted = 0x20 - shifted_sum2_copy;\n  }\n  shifted_input2_copy = shifted_input2_copy << (shifted_sum2_copy & 0xff);\n  if (temp1_flag || temp2_flag != temp3_flag) {\n    shifted_input2_copy = shifted_input2_copy | input2_copy >> (shifted_sum2_shifted & 0xff);\n  }\n  if (temp1_flag || temp2_flag != temp3_flag) {\n    input2_copy = input2_copy << (shifted_sum2_copy & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp1 <= (int)shifted_input4_copy) {\n    return CONCAT44(shifted_input2_copy + (shifted_input4_copy - temp1) * 0x100000 | input2,input2_copy);\n  }\n  shifted_sum2_copy = ~(shifted_input4_copy - temp1);\n  if ((int)shifted_sum2_copy < 0x1f) {\n    shifted_input4 = shifted_sum2_copy - 0x13;\n    if (shifted_input4 != 0 && shifted_input4 < 0 == SCARRY4(shifted_sum2_copy - 0x1f,0xc)) {\n      return CONCAT44(shifted_sum_copy,input2_copy >> (0x20 - (0xcU - shifted_input4) & 0xff) | shifted_input2_copy << (0xcU - shifted_input4 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_sum2_copy = shifted_sum2_copy + 1;\n    return CONCAT44(input2 | shifted_input2_copy >> (shifted_sum2_copy & 0xff),\n                    input2_copy >> (shifted_sum2_copy & 0xff) | shifted_input2_copy << (0x20 - shifted_sum2_copy & 0xff));\n  }\n  return CONCAT44(shifted_sum_copy,shifted_input2_copy >> (shifted_sum2_copy - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_shifted_sum_0800015c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input2",
                "bVar2": "carry_flag",
                "uVar3": "shifted_sum",
                "uVar4": "shifted_sum2",
                "uVar5": "input2_copy",
                "iVar6": "shifted_input4",
                "uVar7": "shifted_input2_copy",
                "uVar8": "shifted_input4_copy",
                "uVar9": "shifted_sum_copy",
                "uVar10": "shifted_sum2_copy",
                "uVar11": "shifted_sum2_shifted",
                "uVar12": "temp1",
                "bVar13": "temp1_flag",
                "bVar14": "temp2_flag",
                "bVar15": "temp3_flag"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "shift_and_or_concat_080003d4",
            "code": "\nulonglong shift_and_or_concat_080003d4(uint input)\n\n{\n  uint upper_part;\n  uint lower_part;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  upper_part = 0;\n  bit_count = LZCOUNT(input);\n  shift_amount = bit_count + 0x15;\n  is_carry = SBORROW4(shift_amount,0x20);\n  lower_part = bit_count - 0xb;\n  is_negative = (int)lower_part < 0;\n  is_zero = lower_part == 0;\n  if (shift_amount < 0x20) {\n    is_carry = SCARRY4(lower_part,0xc);\n    is_negative = false;\n    is_zero = bit_count + 1 == 0;\n    lower_part = shift_amount;\n    if (!is_zero && is_carry == false) {\n      upper_part = input << shift_amount;\n      input = input >> (0xcU - (bit_count + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - lower_part;\n  }\n  input = input << (lower_part & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    input = input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    upper_part = 0 << (lower_part & 0xff);\n  }\nLAB_080002e0:\n  if (shift_amount < 0x433) {\n    return CONCAT44(input + (0x432 - shift_amount) * 0x100000,upper_part);\n  }\n  lower_part = ~(0x432 - shift_amount);\n  if (0x1e < (int)lower_part) {\n    return (ulonglong)(input >> (lower_part - 0x1f & 0xff));\n  }\n  bit_count = lower_part - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(lower_part - 0x1f,0xc)) {\n    lower_part = lower_part + 1;\n    return CONCAT44(input >> (lower_part & 0xff),\n                    upper_part >> (lower_part & 0xff) | input << (0x20 - lower_part & 0xff));\n  }\n  return (ulonglong)(upper_part >> (0x20 - (0xcU - bit_count) & 0xff) | input << (0xcU - bit_count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "shift_and_or_concat_080003d4",
                "param_1": "input",
                "uVar1": "upper_part",
                "uVar2": "lower_part",
                "iVar3": "bit_count",
                "uVar4": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_carry"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "count_set_bits_080003f4",
            "code": "\nulonglong countSetBits_080003f4(uint input)\n\n{\n  uint count;\n  uint absInput;\n  uint shift;\n  int leadingZeros;\n  uint totalBits;\n  uint isNegative;\n  uint rightShift;\n  bool isNegativeShift;\n  bool isZeroShift;\n  bool isShiftOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  isNegative = input & 0x80000000;\n  absInput = input;\n  if ((int)isNegative < 0) {\n    absInput = -input;\n  }\n  count = 0;\n  leadingZeros = LZCOUNT(absInput);\n  totalBits = leadingZeros + 0x15;\n  isShiftOverflow = SBORROW4(totalBits,0x20);\n  shift = leadingZeros - 0xb;\n  isNegativeShift = (int)shift < 0;\n  isZeroShift = shift == 0;\n  if (totalBits < 0x20) {\n    isShiftOverflow = SCARRY4(shift,0xc);\n    isNegativeShift = false;\n    isZeroShift = leadingZeros + 1 == 0;\n    shift = totalBits;\n    if (!isZeroShift && isShiftOverflow == false) {\n      count = absInput << totalBits;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZeroShift || isNegativeShift != isShiftOverflow) {\n    rightShift = 0x20 - shift;\n  }\n  absInput = absInput << (shift & 0xff);\n  if (isZeroShift || isNegativeShift != isShiftOverflow) {\n    absInput = absInput | 0U >> (rightShift & 0xff);\n  }\n  if (isZeroShift || isNegativeShift != isShiftOverflow) {\n    count = 0 << (shift & 0xff);\n  }\nLAB_080002e0:\n  if (totalBits < 0x433) {\n    return CONCAT44(absInput + (0x432 - totalBits) * 0x100000 | isNegative,count);\n  }\n  shift = ~(0x432 - totalBits);\n  if (0x1e < (int)shift) {\n    return CONCAT44(input,absInput >> (shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shift - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(isNegative | absInput >> (shift & 0xff),\n                    count >> (shift & 0xff) | absInput << (0x20 - shift & 0xff));\n  }\n  return CONCAT44(input,count >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "count_set_bits_080003f4",
                "param_1": "input",
                "uVar1": "count",
                "uVar2": "absInput",
                "uVar3": "shift",
                "iVar4": "leadingZeros",
                "uVar5": "totalBits",
                "uVar6": "isNegative",
                "in_r12": "rightShift",
                "bVar7": "isNegativeShift",
                "bVar8": "isZeroShift",
                "bVar9": "isShiftOverflow"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "extract_bits_08000418",
            "code": "\nulonglong extract_bits_08000418(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint msb_set_bit;\n  uint extracted_bits;\n  uint extended_bits;\n  uint shifted_bits;\n  uint temp_result;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_full;\n  bool condition_met;\n  \n  temp_result = input << 1;\n  is_full = temp_result == 0;\n  msb_set_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_bits = (uint)((int)temp_result >> 3) >> 1;\n  extended_bits = msb_set_bit | shifted_bits;\n  input = input << 0x1d;\n  if (!is_full) {\n    param4 = temp_result & 0xff000000;\n    is_full = param4 == 0;\n  }\n  if (!is_full) {\n    is_full = param4 == 0xff000000;\n  }\n  if (!is_full) {\n    return CONCAT44(extended_bits,input) ^ 0x3800000000000000;\n  }\n  if ((temp_result & 0xffffff) == 0) {\n    return CONCAT44(extended_bits,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(extended_bits,input) | 0x8000000000000;\n  }\n  extracted_bits = input;\n  temp_result = shifted_bits;\n  if (shifted_bits == 0) {\n    extracted_bits = 0;\n    temp_result = input;\n  }\n  leading_zeros = LZCOUNT(temp_result);\n  if (shifted_bits == 0) {\n    leading_zeros = leading_zeros + 0x20;\n  }\n  shift_amount = leading_zeros - 0xb;\n  condition_met = SBORROW4(shift_amount,0x20);\n  shifted_bits = leading_zeros - 0x2b;\n  is_full = (int)shifted_bits < 0;\n  is_zero = shifted_bits == 0;\n  if ((int)shift_amount < 0x20) {\n    condition_met = SCARRY4(shifted_bits,0xc);\n    leading_zeros = leading_zeros + -0x1f;\n    is_full = leading_zeros < 0;\n    is_zero = leading_zeros == 0;\n    shifted_bits = shift_amount;\n    if (!is_zero && is_full == condition_met) {\n      extracted_bits = temp_result << (shift_amount & 0xff);\n      temp_result = temp_result >> (0xcU - leading_zeros & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_full != condition_met) {\n    remaining_bits = 0x20 - shifted_bits;\n  }\n  temp_result = temp_result << (shifted_bits & 0xff);\n  if (is_zero || is_full != condition_met) {\n    temp_result = temp_result | extracted_bits >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_full != condition_met) {\n    extracted_bits = extracted_bits << (shifted_bits & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp_result + (0x380 - shift_amount) * 0x100000 | msb_set_bit,extracted_bits);\n  }\n  shifted_bits = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_bits) {\n    return CONCAT44(extended_bits,temp_result >> (shifted_bits - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shifted_bits - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shifted_bits - 0x1f,0xc)) {\n    shifted_bits = shifted_bits + 1;\n    return CONCAT44(msb_set_bit | temp_result >> (shifted_bits & 0xff),\n                    extracted_bits >> (shifted_bits & 0xff) | temp_result << (0x20 - shifted_bits & 0xff));\n  }\n  return CONCAT44(extended_bits,extracted_bits >> (0x20 - (0xcU - leading_zeros) & 0xff) | temp_result << (0xcU - leading_zeros & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "extract_bits_08000418",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "msb_set_bit",
                "uVar2": "extracted_bits",
                "uVar3": "extended_bits",
                "uVar4": "shifted_bits",
                "uVar5": "temp_result",
                "iVar6": "leading_zeros",
                "uVar7": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar8": "is_zero",
                "bVar9": "is_full",
                "bVar10": "condition_met"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_080004c8",
            "code": "\nulonglong calculate_080004c8(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  ulonglong temp1;\n  longlong temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong result;\n  \n  result = CONCAT44(value2,value1);\n  temp8 = 0x7ff;\n  temp4 = value2 >> 0x14 & 0x7ff;\n  flag1 = temp4 == 0;\n  if (!flag1) {\n    temp7 = value4 >> 0x14 & 0x7ff;\n    flag1 = temp7 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp4 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_080006a4();\n  }\n  temp3 = (uint)(result >> 0x20);\n  temp5 = temp4 + temp7;\n  temp4 = temp3 ^ value4;\n  temp3 = temp3 & ~(temp8 << 0x15);\n  value4 = value4 & ~(temp8 << 0x15);\n  flag1 = ((uint)result | temp3 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (value3 | value4 << 0xc) == 0;\n  }\n  temp3 = temp3 | 0x100000;\n  value4 = value4 | 0x100000;\n  if (flag1) {\n    value3 = (uint)result | value3;\n    value4 = (temp4 & 0x80000000 | temp3) ^ value4;\n    temp4 = temp8 >> 1;\n    flag3 = SBORROW4(temp5,temp4);\n    temp6 = temp5 - temp4;\n    flag1 = temp6 == 0;\n    temp3 = temp6;\n    if (!flag1 && (int)temp4 <= temp5) {\n      flag3 = SBORROW4(temp8,temp6);\n      temp3 = temp8 - temp6;\n      flag1 = temp8 == temp6;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      value4 = value4 | temp6 * 0x100000;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      return CONCAT44(value4,value3);\n    }\n    value4 = value4 | 0x100000;\n    temp8 = 0;\n    flag3 = SBORROW4(temp6,1);\n    temp6 = temp6 - 1;\n    flag1 = temp6 == 0;\n    temp4 = temp6;\n  }\n  else {\n    temp1 = (result & 0xffffffff) * (ulonglong)value3;\n    result = (result & 0xffffffff) * (ulonglong)value4 +\n             (ulonglong)temp3 * (ulonglong)value3 + (temp1 >> 0x20);\n    temp9 = (uint)result;\n    temp2 = (ulonglong)temp3 * (ulonglong)value4 + (result >> 0x20);\n    temp8 = (uint)temp2;\n    temp3 = (uint)((ulonglong)temp2 >> 0x20);\n    if ((int)temp1 != 0) {\n      temp9 = temp9 | 1;\n    }\n    temp6 = (temp5 + -0x3ff) - (uint)(temp3 < 0x200);\n    if (temp3 < 0x200) {\n      flag1 = (temp9 & 0x80000000) != 0;\n      temp9 = temp9 << 1;\n      temp2 = CONCAT44(temp3 * 2 + (uint)(CARRY4(temp8,temp8) || CARRY4(temp8 * 2,(uint)flag1)),\n                       temp8 * 2 + (uint)flag1);\n    }\n    value4 = temp4 & 0x80000000 | (int)((ulonglong)temp2 >> 0x20) << 0xb | (uint)temp2 >> 0x15;\n    value3 = (uint)temp2 << 0xb | temp9 >> 0x15;\n    temp8 = temp9 * 0x800;\n    flag2 = 0xfc < temp6;\n    flag3 = SBORROW4(temp6,0xfd);\n    temp3 = temp6 - 0xfd;\n    flag1 = temp3 == 0;\n    temp4 = temp3;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp3;\n      flag3 = SBORROW4(temp3,0x700);\n      temp4 = temp6 - 0x7fd;\n      flag1 = temp3 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp8;\n      if (temp8 == 0x80000000) {\n        flag1 = (temp9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(value4 + temp6 * 0x100000 + (uint)CARRY4(value3,(uint)flag1),value3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp4 < 0 == flag3) {\n    return (ulonglong)(value4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp6,0x36);\n  flag1 = (int)(temp6 + 0x36) < 0;\n  flag3 = temp6 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    value3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    value4 = value4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(value4,value3);\n  }\n  temp4 = -temp6;\n  temp3 = temp4 - 0x20;\n  if (0x1f < (int)temp4) {\n    temp6 = value3 >> (temp3 & 0xff) | value4 << (0x20 - temp3 & 0xff);\n    temp4 = (value4 >> (temp3 & 0xff) & ~((value4 & 0x80000000) >> (temp3 & 0xff))) -\n            ((int)temp6 >> 0x1f);\n    if ((temp8 | value3 << (0x20 - temp3 & 0xff) | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44(value4,temp4) & 0x80000000ffffffff;\n  }\n  temp5 = temp4 - 0x14;\n  if (temp5 == 0 || temp5 < 0 != SCARRY4(temp3,0xc)) {\n    temp9 = value3 << (temp6 + 0x20 & 0xff);\n    temp3 = value3 >> (temp4 & 0xff) | value4 << (temp6 + 0x20 & 0xff);\n    temp6 = temp3 + -((int)temp9 >> 0x1f);\n    if ((temp8 | temp9 << 1) == 0) {\n      temp6 = temp6 & ~(temp9 >> 0x1f);\n    }\n    return CONCAT44((value4 & 0x80000000) +\n                    ((value4 & 0x7fffffff) >> (temp4 & 0xff)) +\n                    (uint)CARRY4(temp3,-((int)temp9 >> 0x1f)),temp6);\n  }\n  temp4 = 0xc - temp5;\n  temp6 = value3 << (temp4 & 0xff);\n  temp4 = value3 >> (0x20 - temp4 & 0xff) | value4 << (temp4 & 0xff);\n  temp3 = temp4 + -((int)temp6 >> 0x1f);\n  if ((temp8 | temp6 << 1) == 0) {\n    temp3 = temp3 & ~(temp6 >> 0x1f);\n  }\n  return CONCAT44((value4 & 0x80000000) + (uint)CARRY4(temp4,-((int)temp6 >> 0x1f)),temp3);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_080004c8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "lVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "unaff_r5": "temp7",
                "uVar7": "temp8",
                "uVar8": "temp9",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_bitwise_xor_080006a4",
            "code": "\nulonglong calculate_bitwise_xor_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint constant1;\n  bool flag;\n  \n  temp3 = constant1 & input4 >> 0x14;\n  if (temp2 != constant1 && temp3 != constant1) {\n    flag = (input1 | input2 << 1) == 0;\n    if (!flag) {\n      flag = (input3 | input4 << 1) == 0;\n    }\n    if (flag) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp2 == 0) {\n      temp4 = input2 & 0x80000000;\n      do {\n        temp1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp4;\n      if (temp3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  flag = (input1 | input2 << 1) == 0;\n  if (flag) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!flag) {\n    flag = (input3 | input4 << 1) == 0;\n  }\n  temp4 = input2;\n  if (((!flag) && ((temp2 != constant1 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp3 != constant1 || (input1 = input3, temp4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_bitwise_xor_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "constant1",
                "bVar4": "flag"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_float_0800071c",
            "code": "\nulonglong calculateFloat_0800071c(undefined4 sign,uint exp_mant_high,uint exp_mant_low,uint mantissa)\n\n{\n  uint exp_mant_low_shifted;\n  uint mantissa_shifted;\n  uint temp;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int diff;\n  uint normalized_diff;\n  uint exp_high;\n  uint exp_low;\n  uint result_high;\n  uint result_low;\n  uint temp6;\n  bool condition;\n  bool flag;\n  bool overflow;\n  undefined8 result;\n  \n  result = CONCAT44(exp_mant_high,sign);\n  temp6 = 0x7ff;\n  temp5 = exp_mant_high >> 0x14 & 0x7ff;\n  condition = temp5 == 0;\n  if (!condition) {\n    exp_high = mantissa >> 0x14 & 0x7ff;\n    condition = exp_high == 0;\n  }\n  if (!condition) {\n    condition = temp5 == 0x7ff;\n  }\n  if (!condition) {\n    condition = exp_high == 0x7ff;\n  }\n  if (condition) {\n    result = FUN_0800088a();\n  }\n  normalized_diff = (uint)((ulonglong)result >> 0x20);\n  result_high = (uint)result;\n  diff = temp5 - exp_high;\n  if ((exp_mant_low | mantissa << 0xc) == 0) {\n    temp5 = (normalized_diff ^ mantissa) & 0x80000000 | normalized_diff & 0xfffff;\n    overflow = SCARRY4(diff,temp6 >> 1);\n    normalized_diff = diff + (temp6 >> 1);\n    condition = (int)normalized_diff < 0;\n    flag = normalized_diff == 0;\n    if (!flag && condition == overflow) {\n      overflow = SBORROW4(temp6,normalized_diff);\n      condition = (int)(temp6 - normalized_diff) < 0;\n      flag = temp6 == normalized_diff;\n    }\n    if (!flag && condition == overflow) {\n      temp5 = temp5 | normalized_diff * 0x100000;\n    }\n    if (!flag && condition == overflow) {\n      return CONCAT44(temp5,result_high);\n    }\n    temp5 = temp5 | 0x100000;\n    temp6 = 0;\n    flag = SBORROW4(normalized_diff,1);\n    normalized_diff = normalized_diff - 1;\n    condition = normalized_diff == 0;\n    temp = normalized_diff;\n  }\n  else {\n    temp = (mantissa << 0xc) >> 4 | 0x10000000 | exp_mant_low >> 0x18;\n    temp6 = exp_mant_low << 8;\n    exp_low = (normalized_diff << 0xc) >> 4 | 0x10000000 | result_high >> 0x18;\n    result_high = result_high * 0x100;\n    temp5 = (normalized_diff ^ mantissa) & 0x80000000;\n    condition = temp <= exp_low;\n    if (exp_low == temp) {\n      condition = temp6 <= result_high;\n    }\n    diff = diff + (uint)condition;\n    normalized_diff = diff + 0x3fd;\n    if (condition == false) {\n      temp = temp >> 1;\n      temp6 = (uint)((exp_mant_low >> 0x18 & 1) != 0) << 0x1f | temp6 >> 1;\n    }\n    result_low = result_high - temp6;\n    exp_low = (exp_low - temp) - (uint)(result_high < temp6);\n    temp2 = temp >> 1;\n    exp_mant_low_shifted = (uint)((temp & 1) != 0) << 0x1f | temp6 >> 1;\n    result_high = 0x100000;\n    temp = 0x80000;\n    while( true ) {\n      condition = exp_mant_low_shifted <= result_low;\n      if (temp2 < exp_low || exp_low - temp2 < (uint)condition) {\n        result_low = result_low - exp_mant_low_shifted;\n        result_high = result_high | temp;\n        exp_low = (exp_low - temp2) - (uint)!condition;\n      }\n      temp3 = temp2 >> 1;\n      exp_mant_low_shifted = (uint)((temp2 & 1) != 0) << 0x1f | exp_mant_low_shifted >> 1;\n      flag = exp_mant_low_shifted <= result_low;\n      condition = exp_low - temp3 < (uint)flag;\n      temp6 = exp_low;\n      if (temp3 < exp_low || condition) {\n        result_low = result_low - exp_mant_low_shifted;\n        temp6 = (exp_low - temp3) - (uint)!flag;\n      }\n      if (temp3 < exp_low || condition) {\n        result_high = result_high | temp >> 1;\n      }\n      exp_low = temp2 >> 2;\n      mantissa_shifted = (uint)((temp3 & 1) != 0) << 0x1f | exp_mant_low_shifted >> 1;\n      flag = mantissa_shifted <= result_low;\n      condition = temp6 - exp_low < (uint)flag;\n      temp3 = temp6;\n      if (exp_low < temp6 || condition) {\n        result_low = result_low - mantissa_shifted;\n        temp3 = (temp6 - exp_low) - (uint)!flag;\n      }\n      if (exp_low < temp6 || condition) {\n        result_high = result_high | temp >> 2;\n      }\n      temp4 = temp2 >> 3;\n      exp_mant_low_shifted = (uint)((exp_low & 1) != 0) << 0x1f | mantissa_shifted >> 1;\n      flag = exp_mant_low_shifted <= result_low;\n      condition = temp3 - temp4 < (uint)flag;\n      exp_low = temp3;\n      if (temp4 < temp3 || condition) {\n        result_low = result_low - exp_mant_low_shifted;\n        exp_low = (temp3 - temp4) - (uint)!flag;\n      }\n      if (temp4 < temp3 || condition) {\n        result_high = result_high | temp >> 3;\n      }\n      temp6 = exp_low | result_low;\n      if (temp6 == 0) break;\n      exp_low = exp_low << 4 | result_low >> 0x1c;\n      result_low = result_low << 4;\n      temp2 = temp2 & 0xfffffff8 | exp_mant_low_shifted >> 0x1d;\n      exp_mant_low_shifted = (mantissa_shifted >> 1) << 3;\n      temp = temp >> 4;\n      if (temp == 0) {\n        temp4 = temp2;\n        if ((temp5 & 0x100000) != 0) goto LAB_0800083a;\n        temp5 = temp5 | result_high;\n        result_high = 0;\n        temp = 0x80000000;\n      }\n    }\n    if ((temp5 & 0x100000) == 0) {\n      temp5 = temp5 | result_high;\n      result_high = 0;\n    }\nLAB_0800083a:\n    overflow = 0xfc < normalized_diff;\n    flag = SBORROW4(normalized_diff,0xfd);\n    temp2 = diff + 0x300;\n    condition = temp2 == 0;\n    temp = temp2;\n    if (overflow && !condition) {\n      overflow = 0x6ff < temp2;\n      flag = SBORROW4(temp2,0x700);\n      temp = diff - 0x400;\n      condition = temp2 == 0x700;\n    }\n    if (!overflow || condition) {\n      condition = temp4 <= exp_low;\n      if (exp_low == temp4) {\n        condition = exp_mant_low_shifted <= result_low;\n      }\n      if (exp_low == temp4 && result_low == exp_mant_low_shifted) {\n        condition = (result_high & 1) != 0;\n      }\n      return CONCAT44(temp5 + normalized_diff * 0x100000 + (uint)CARRY4(result_high,(uint)condition),result_high + condition);\n    }\n  }\n  if (!condition && (int)temp < 0 == flag) {\n    return (ulonglong)(temp5 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflow = SCARRY4(normalized_diff,0x36);\n  condition = (int)(normalized_diff + 0x36) < 0;\n  flag = normalized_diff == 0xffffffca;\n  if (flag || condition != overflow) {\n    result_high = 0;\n  }\n  if (flag || condition != overflow) {\n    temp5 = temp5 & 0x80000000;\n  }\n  if (flag || condition != overflow) {\n    return CONCAT44(temp5,result_high);\n  }\n  temp = -normalized_diff;\n  exp_low = temp - 0x20;\n  if (0x1f < (int)temp) {\n    temp = result_high >> (exp_low & 0xff) | temp5 << (0x20 - exp_low & 0xff);\n    normalized_diff = (temp5 >> (exp_low & 0xff) & ~((temp5 & 0x80000000) >> (exp_low & 0xff))) -\n            ((int)temp >> 0x1f);\n    if ((temp6 | result_high << (0x20 - exp_low & 0xff) | temp << 1) == 0) {\n      normalized_diff = normalized_diff & ~(temp >> 0x1f);\n    }\n    return CONCAT44(temp5,normalized_diff) & 0x80000000ffffffff;\n  }\n  diff = temp - 0x14;\n  if (diff != 0 && diff < 0 == SCARRY4(exp_low,0xc)) {\n    normalized_diff = 0xc - diff;\n    temp = result_high << (normalized_diff & 0xff);\n    result_high = result_high >> (0x20 - normalized_diff & 0xff) | temp5 << (normalized_diff & 0xff);\n    normalized_diff = result_high + -((int)temp >> 0x1f);\n    if ((temp6 | temp << 1) == 0) {\n      normalized_diff = normalized_diff & ~(temp >> 0x1f);\n    }\n    return CONCAT44((temp5 & 0x80000000) + (uint)CARRY4(result_high,-((int)temp >> 0x1f)),normalized_diff);\n  }\n  exp_low = result_high << (normalized_diff + 0x20 & 0xff);\n  result_high = result_high >> (temp & 0xff) | temp5 << (normalized_diff + 0x20 & 0xff);\n  normalized_diff = result_high + -((int)exp_low >> 0x1f);\n  if ((temp6 | exp_low << 1) == 0) {\n    normalized_diff = normalized_diff & ~(exp_low >> 0x1f);\n  }\n  return CONCAT44((temp5 & 0x80000000) +\n                  ((temp5 & 0x7fffffff) >> (temp & 0xff)) +\n                  (uint)CARRY4(result_high,-((int)exp_low >> 0x1f)),normalized_diff);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_float_0800071c",
                "param_1": "sign",
                "param_2": "exp_mant_high",
                "param_3": "exp_mant_low",
                "param_4": "mantissa",
                "uVar1": "exp_mant_low_shifted",
                "uVar2": "mantissa_shifted",
                "uVar3": "temp",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "diff",
                "uVar9": "normalized_diff",
                "unaff_r5": "exp_high",
                "uVar10": "exp_low",
                "uVar11": "result_high",
                "uVar12": "result_low",
                "uVar13": "temp6",
                "bVar14": "condition",
                "bVar15": "flag",
                "bVar16": "overflow",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "floating_point_conversion_0800088a",
            "code": "\nulonglong floatingPointConversion_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint mask1;\n  uint mask2;\n  uint mask3;\n  uint mask4;\n  uint mask5;\n  bool isZero;\n  \n  mask3 = mask5 & input4 >> 0x14;\n  mask4 = input2;\n  if (mask2 != mask5 || mask3 != mask5) {\n    if (mask2 == mask5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, mask4 = input4, mask3 != mask5)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (mask3 == mask5) {\n      input1 = input3;\n      mask4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (mask2 == 0) {\n          mask4 = input2 & 0x80000000;\n          do {\n            mask1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(mask1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | mask4;\n          if (mask3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          mask4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(mask4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(mask4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "floating_point_conversion_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "mask1",
                "unaff_r4": "mask2",
                "uVar2": "mask3",
                "uVar3": "mask4",
                "in_r12": "mask5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_parameters_080008fc",
            "code": "\nuint check_parameters_080008fc(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(input2 << 1) >> 0x15 == -1 || (int)(input4 << 1) >> 0x15 == -1) &&\n     ((((int)(input2 << 1) >> 0x15 == -1 && ((input1 | input2 << 0xc) != 0)) ||\n      (((int)(input4 << 1) >> 0x15 == -1 && ((input3 | input4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = input2 == input4;\n  }\n  if (isZero) {\n    isZero = input1 == input3;\n  }\n  if (!isZero) {\n    result = input2 ^ input4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = input2 == input4;\n    }\n    isNegative = -1 < (int)result && input4 <= input2;\n    if (isZero) {\n      isNegative = input3 <= input1;\n    }\n    input4 = (int)input4 >> 0x1f;\n    if (!isNegative) {\n      input4 = ~input4;\n    }\n    return input4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_function_08000978",
            "code": "\nvoid execute_function_08000978(undefined4 input_arg1,undefined4 input_arg2,undefined4 input_arg3,undefined4 input_arg4)\n\n{\n  FUN_08000988(input_arg3,input_arg4,input_arg1,input_arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_function_08000978",
                "param_1": "input_arg1",
                "param_2": "input_arg2",
                "param_3": "input_arg3",
                "param_4": "input_arg4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "execute_function_08000988",
            "code": "\nundefined4 execute_function_08000988(undefined4 input_param)\n\n{\n  FUN_080008fc();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000988": "execute_function_08000988",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_if_zero_08000998",
            "code": "\nbool check_if_zero_08000998(void)\n\n{\n  char input_character;\n  \n  FUN_08000988();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_if_zero_08000998",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_input_is_empty_080009ac",
            "code": "\nbool check_if_input_is_empty_080009ac(void)\n\n{\n  char input_character;\n  \n  FUN_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_input_is_empty_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_conditions_080009c0",
            "code": "\nbool check_conditions_080009c0(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  FUN_08000988();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_conditions_080009c0",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_flag_status_080009d4",
            "code": "\nbool checkFlagStatus_080009d4(void)\n\n{\n  undefined isZeroFlagSet;\n  undefined isCarryFlagSet;\n  \n  FUN_08000978();\n  return !(bool)isCarryFlagSet || (bool)isZeroFlagSet;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_flag_status_080009d4",
                "in_ZR": "isZeroFlagSet",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "is_string_empty_080009e8",
            "code": "\nbool isStringEmpty_080009e8(void)\n\n{\n  char inputChar;\n  \n  FUN_08000978();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "is_string_empty_080009e8",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_floating_point_080009fc",
            "code": "\nuint calculateFloatingPoint_080009fc(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isEqualZero;\n  bool isLessThan;\n  \n  temp1 = input2 * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isEqualZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isEqualZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isEqualZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != checkOverflow(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_080009fc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isEqualZero",
                "bVar5": "isLessThan",
                "SCARRY4": "checkOverflow"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_floating_point_08000aa4",
            "code": "\nuint calculateFloatingPoint_08000aa4(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int upperBits1;\n  int upperBits2;\n  uint temp1;\n  uint temp2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool isTrue;\n  \n  temp1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  isTrue = result1 == 0;\n  if (!isTrue) {\n    input4 = input2 << 1;\n    isTrue = input4 == 0;\n  }\n  if (!isTrue) {\n    isTrue = result1 == input4;\n  }\n  upperBits1 = (int)result1 >> 0x18;\n  if (!isTrue) {\n    isTrue = upperBits1 == -1;\n  }\n  if (!isTrue) {\n    isTrue = (int)input4 >> 0x18 == -1;\n  }\n  if (isTrue) {\n    upperBits2 = (int)(input2 << 1) >> 0x18;\n    if (upperBits1 == -1 || upperBits2 == -1) {\n      result1 = temp1;\n      if (upperBits1 == -1) {\n        result1 = input1;\n      }\n      if (upperBits1 != -1 || upperBits2 != -1) {\n        temp1 = result1;\n      }\n      isTrue = (result1 & 0x7fffff) == 0;\n      if (isTrue) {\n        isTrue = (temp1 & 0x7fffff) == 0;\n      }\n      if (isTrue) {\n        isTrue = result1 == temp1;\n      }\n      if (!isTrue) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  isTrue = difference != 0;\n  result2 = result1;\n  if (isTrue && result1 <= input4) {\n    result2 = result1 + difference;\n  }\n  if (isTrue && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (isTrue && result1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (isTrue && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (result2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    isTrue = temp2 != 0;\n    temp2 = -temp2;\n    result1 = -result1 - (uint)isTrue;\n  }\n  if (result1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result1 = result1 * 2 + (uint)(temp1 != 0);\n    temp1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result1 = result1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (temp1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    temp1 = result2 - 1;\n    if (0xffffff < result1) {\n      temp1 = result1 & 1;\n      result1 = result1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = result2;\n      if (0xfd < result2) goto LAB_08000bde;\n    }\n  }\n  result1 = result1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_floating_point_08000aa4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "upperBits1",
                "iVar2": "upperBits2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "isTrue"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_value_08000aa8",
            "code": "\nuint calculateFloatingPointValue_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftAmount1;\n  int shiftAmount2;\n  uint result1;\n  uint value1;\n  uint value2;\n  uint difference;\n  bool isEqual;\n  \n  value1 = input1 << 1;\n  isEqual = value1 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = value1 == input4;\n  }\n  shiftAmount1 = (int)value1 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftAmount1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount1 == -1 || shiftAmount2 == -1) {\n      value1 = input2;\n      if (shiftAmount1 == -1) {\n        value1 = input1;\n      }\n      if (shiftAmount1 != -1 || shiftAmount2 != -1) {\n        input2 = value1;\n      }\n      isEqual = (value1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = value1 == input2;\n      }\n      if (!isEqual) {\n        value1 = value1 | 0x400000;\n      }\n      return value1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (value1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((value1 & 0xff000000) == 0) {\n      value1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        value1 = value1 | 0x80000000;\n      }\n      return value1;\n    }\n    if (value1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  value1 = value1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - value1;\n  isEqual = difference != 0;\n  value2 = value1;\n  if (isEqual && value1 <= input4) {\n    value2 = value1 + difference;\n  }\n  if (isEqual && value1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && value1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && value1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < value1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  value1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    value1 = -value1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (value2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (value2 == 0) {\n      value1 = value1 ^ 0x800000;\n      value2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  value1 = value1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = value1 & 0x80000000;\n  if ((int)value1 < 0) {\n    isEqual = result1 != 0;\n    result1 = -result1;\n    value1 = -value1 - (uint)isEqual;\n  }\n  if (value1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    value1 = value1 * 2 + (uint)(difference != 0);\n    difference = value2 - 2;\n    if ((value1 & 0x800000) == 0) {\n      value2 = LZCOUNT(value1) - 8;\n      value1 = value1 << (value2 & 0xff);\n      if ((int)difference < (int)value2) {\n        value1 = value1 >> (-(difference - value2) & 0xff);\n      }\n      else {\n        value1 = value1 + (difference - value2) * 0x800000;\n      }\n      return value1 | input1;\n    }\n  }\n  else {\n    difference = value2 - 1;\n    if (0xffffff < value1) {\n      difference = value1 & 1;\n      value1 = value1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = value2;\n      if (0xfd < value2) goto LAB_08000bde;\n    }\n  }\n  value1 = value1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    value1 = value1 & 0xfffffffe;\n  }\n  return value1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_value_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftAmount1",
                "iVar2": "shiftAmount2",
                "uVar3": "result1",
                "uVar4": "value1",
                "uVar5": "value2",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "decode_and_transform_08000c08",
            "code": "\nuint decode_and_transform_08000c08(uint input_data)\n\n{\n  uint decoded_value;\n  uint mask;\n  int shifted_value;\n  uint conditional_flag;\n  \n  if (input_data == 0) {\n    return 0;\n  }\n  decoded_value = LZCOUNT(input_data);\n  mask = decoded_value - 8;\n  shifted_value = mask * -0x800000 + 0x4a800000;\n  if (7 < decoded_value) {\n    conditional_flag = 0 << (mask & 0xff);\n    decoded_value = shifted_value + (input_data << (mask & 0xff)) +\n            (0U >> (0x20 - mask & 0xff)) + (uint)(0x7fffffff < conditional_flag);\n    if (conditional_flag == 0x80000000) {\n      decoded_value = decoded_value & 0xfffffffe;\n    }\n    return decoded_value;\n  }\n  mask = input_data << decoded_value + 0x18;\n  decoded_value = shifted_value + ((input_data >> (0x20 - (decoded_value + 0x18) & 0xff)) - ((int)mask >> 0x1f));\n  if ((mask & 0x7fffffff) == 0) {\n    decoded_value = decoded_value & ~(mask >> 0x1f);\n  }\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "decode_and_transform_08000c08",
                "param_1": "input_data",
                "uVar1": "decoded_value",
                "uVar2": "mask",
                "iVar3": "shifted_value",
                "uVar4": "conditional_flag"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "reverse_bits_08000c10",
            "code": "\nuint reverseBits_08000c10(uint input)\n\n{\n  uint numLeadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  numLeadingZeros = countLeadingZeros(input);\n  shiftAmount = numLeadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < numLeadingZeros) {\n    numLeadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < numLeadingZeros);\n    if (numLeadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << numLeadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (numLeadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "reverse_bits_08000c10",
                "param_1": "input",
                "uVar1": "numLeadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_float_08000cb8",
            "code": "\nuint calculateFloat_08000cb8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong tempLong;\n  uint result;\n  uint tempVar1;\n  int tempVar2;\n  int tempVar3;\n  uint tempVar4;\n  int tempVar5;\n  uint tempVar6;\n  bool condition1;\n  bool condition2;\n  \n  tempVar1 = input1 >> 0x17 & 0xff;\n  condition1 = tempVar1 == 0;\n  if (!condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    condition1 = input4 == 0;\n  }\n  if (!condition1) {\n    condition1 = tempVar1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = input4 == 0xff;\n  }\n  if (condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (tempVar1 == 0xff || input4 == 0xff) {\n      condition1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition1 = input2 == 0;\n        result = input1;\n      }\n      if (!condition1) {\n        condition1 = input2 == 0x80000000;\n      }\n      tempVar6 = result;\n      if (((condition1) || ((tempVar1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (tempVar6 = input2, (input2 & 0x7fffff) != 0)))) {\n        return tempVar6 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    condition1 = (input1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition1 = tempVar1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input1 = input1 << 1;\n        condition1 = (input1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      tempVar1 = tempVar1 - 1;\n    }\n    input1 = input1 | result;\n    condition1 = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input2 = input2 << 1;\n        condition1 = (input2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  tempVar2 = tempVar1 + input4;\n  tempVar6 = input1 ^ input2;\n  tempVar1 = input1 << 9;\n  condition1 = tempVar1 == 0;\n  if (!condition1) {\n    input2 = input2 << 9;\n    condition1 = input2 == 0;\n  }\n  if (condition1) {\n    if (tempVar1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = tempVar6 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    condition2 = SBORROW4(tempVar2,0x7f);\n    tempVar3 = tempVar2 + -0x7f;\n    condition1 = tempVar3 == 0;\n    tempVar5 = tempVar3;\n    if (!condition1 && 0x7e < tempVar2) {\n      condition2 = SBORROW4(0xff,tempVar3);\n      tempVar5 = 0xff - tempVar3;\n      condition1 = tempVar3 == 0xff;\n    }\n    if (!condition1 && tempVar5 < 0 == condition2) {\n      result = result | tempVar3 * 0x800000;\n    }\n    if (!condition1 && tempVar5 < 0 == condition2) {\n      return result;\n    }\n    result = result | 0x800000;\n    tempVar4 = 0;\n    condition2 = SBORROW4(tempVar3,1);\n    tempVar6 = tempVar2 - 0x80;\n    condition1 = tempVar6 == 0;\n    tempVar1 = tempVar6;\n  }\n  else {\n    tempLong = (ulonglong)(tempVar1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    tempVar4 = (uint)tempLong;\n    result = (uint)((ulonglong)tempLong >> 0x20);\n    condition1 = result < 0x800000;\n    if (condition1) {\n      result = result << 1;\n    }\n    if (condition1) {\n      result = result | tempVar4 >> 0x1f;\n      tempVar4 = tempVar4 << 1;\n    }\n    result = tempVar6 & 0x80000000 | result;\n    tempVar6 = (tempVar2 + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(tempVar6,0xfd);\n    condition1 = tempVar6 == 0xfd;\n    tempVar1 = tempVar6 - 0xfd;\n    if (tempVar6 < 0xfe) {\n      result = result + tempVar6 * 0x800000 + (uint)(0x7fffffff < tempVar4);\n      if (tempVar4 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (condition1 || (int)tempVar1 < 0 != condition2) {\n    condition1 = (int)(tempVar6 + 0x19) < 0;\n    if (tempVar6 == 0xffffffe7 || condition1 != SCARRY4(tempVar6,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (tempVar6 != 0xffffffe7 && condition1 == SCARRY4(tempVar6,0x19)) {\n      tempVar1 = (result << 1) >> (-tempVar6 & 0xff);\n      tempVar6 = result << (tempVar6 + 0x20 & 0xff);\n      tempVar1 = ((uint)((result & 0x80000000) != 0) << 0x1f | tempVar1 >> 1) + (uint)((byte)tempVar1 & 1);\n      if ((tempVar4 | tempVar6 << 1) == 0) {\n        tempVar1 = tempVar1 & ~(tempVar6 >> 0x1f);\n      }\n      return tempVar1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_float_08000cb8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "tempLong",
                "uVar2": "result",
                "uVar3": "tempVar1",
                "iVar4": "tempVar2",
                "iVar5": "tempVar3",
                "uVar6": "tempVar4",
                "iVar7": "tempVar5",
                "uVar8": "tempVar6",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "floating_point_addition_08000e20",
            "code": "\nuint floatingPointAddition_08000e20(uint value_1,uint value_2,undefined4 extra_val,uint extra_val_2)\n\n{\n  uint mask;\n  uint exponent_1;\n  int difference;\n  uint exponent_2;\n  int sum;\n  uint result;\n  bool condition;\n  bool condition_2;\n  bool overflow;\n  \n  exponent_1 = value_1 >> 0x17 & 0xff;\n  condition = exponent_1 == 0;\n  if (!condition) {\n    extra_val_2 = value_2 >> 0x17 & 0xff;\n    condition = extra_val_2 == 0;\n  }\n  if (!condition) {\n    condition = exponent_1 == 0xff;\n  }\n  if (!condition) {\n    condition = extra_val_2 == 0xff;\n  }\n  if (condition) {\n    extra_val_2 = value_2 >> 0x17 & 0xff;\n    result = value_1;\n    if (exponent_1 == 0xff) {\n      if (((value_1 & 0x7fffff) != 0) || (result = value_2, extra_val_2 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (extra_val_2 == 0xff) {\n        result = value_2;\n        if ((value_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (value_1 ^ value_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      condition = (value_1 & 0x7fffffff) == 0;\n      if (!condition) {\n        condition = (value_2 & 0x7fffffff) == 0;\n      }\n      if (!condition) {\n        condition = exponent_1 == 0;\n        result = value_1 & 0x80000000;\n        while( true ) {\n          if (condition) {\n            value_1 = value_1 << 1;\n            condition = (value_1 & 0x800000) == 0;\n          }\n          if (!condition) break;\n          exponent_1 = exponent_1 - 1;\n        }\n        value_1 = value_1 | result;\n        condition = extra_val_2 == 0;\n        result = value_2 & 0x80000000;\n        while( true ) {\n          if (condition) {\n            value_2 = value_2 << 1;\n            condition = (value_2 & 0x800000) == 0;\n          }\n          if (!condition) break;\n          extra_val_2 = extra_val_2 - 1;\n        }\n        value_2 = value_2 | result;\n        goto LAB_08000e38;\n      }\n      if ((value_1 & 0x7fffffff) == 0) {\n        if ((value_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    value_1 = value_1 ^ value_2;\n  }\n  else {\nLAB_08000e38:\n    difference = exponent_1 - extra_val_2;\n    if (value_2 << 9 == 0) {\n      value_1 = (value_1 ^ value_2) & 0x80000000 | value_1 & 0x7fffff;\n      overflow = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      condition = sum < 0;\n      condition_2 = sum == 0;\n      if (!condition_2 && condition == overflow) {\n        overflow = SBORROW4(0xff,sum);\n        condition = 0xff - sum < 0;\n        condition_2 = sum == 0xff;\n      }\n      if (!condition_2 && condition == overflow) {\n        value_1 = value_1 | sum * 0x800000;\n      }\n      if (!condition_2 && condition == overflow) {\n        return value_1;\n      }\n      value_1 = value_1 | 0x800000;\n      exponent_1 = 0;\n      condition_2 = SBORROW4(sum,1);\n      exponent_2 = difference + 0x7e;\n      condition = exponent_2 == 0;\n      result = exponent_2;\n    }\n    else {\n      mask = (value_2 << 9) >> 4 | 0x10000000;\n      exponent_1 = (value_1 << 9) >> 4 | 0x10000000;\n      value_1 = (value_1 ^ value_2) & 0x80000000;\n      condition = mask <= exponent_1;\n      if (!condition) {\n        exponent_1 = exponent_1 << 1;\n      }\n      exponent_2 = difference + 0x7d + (uint)condition;\n      result = 0x800000;\n      do {\n        if (mask <= exponent_1) {\n          exponent_1 = exponent_1 - mask;\n          value_1 = value_1 | result;\n        }\n        condition = mask >> 1 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (mask >> 1);\n        }\n        if (condition) {\n          value_1 = value_1 | result >> 1;\n        }\n        condition = mask >> 2 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (mask >> 2);\n        }\n        if (condition) {\n          value_1 = value_1 | result >> 2;\n        }\n        condition = mask >> 3 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (mask >> 3);\n        }\n        if (condition) {\n          value_1 = value_1 | result >> 3;\n        }\n        exponent_1 = exponent_1 * 0x10;\n        condition = exponent_1 == 0;\n        if (!condition) {\n          result = result >> 4;\n          condition = result == 0;\n        }\n      } while (!condition);\n      condition_2 = SBORROW4(exponent_2,0xfd);\n      condition = exponent_2 == 0xfd;\n      result = exponent_2 - 0xfd;\n      if (exponent_2 < 0xfe) {\n        value_1 = value_1 + exponent_2 * 0x800000 + (uint)(mask <= exponent_1);\n        if (exponent_1 - mask == 0) {\n          value_1 = value_1 & 0xfffffffe;\n        }\n        return value_1;\n      }\n    }\n    if (condition || (int)result < 0 != condition_2) {\n      condition = (int)(exponent_2 + 0x19) < 0;\n      if (exponent_2 == 0xffffffe7 || condition != SCARRY4(exponent_2,0x19)) {\n        value_1 = value_1 & 0x80000000;\n      }\n      if (exponent_2 == 0xffffffe7 || condition != SCARRY4(exponent_2,0x19)) {\n        return value_1;\n      }\n      result = (value_1 << 1) >> (-exponent_2 & 0xff);\n      exponent_2 = value_1 << (exponent_2 + 0x20 & 0xff);\n      result = ((uint)((value_1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent_1 | exponent_2 << 1) == 0) {\n        result = result & ~(exponent_2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return value_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "floating_point_addition_08000e20",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "extra_val",
                "param_4": "extra_val_2",
                "uVar1": "mask",
                "uVar2": "exponent_1",
                "iVar3": "difference",
                "uVar4": "exponent_2",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition",
                "bVar8": "condition_2",
                "bVar9": "overflow"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "check_overflow_08000f68",
            "code": "\nuint check_overflow_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_input;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "check_overflow_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "copy_parameters_08000fc8",
            "code": "\nvoid copyParameters_08000fc8(undefined4 source,undefined4 destination)\n\n{\n  FUN_08000fd0(destination,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "copy_parameters_08000fc8",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_params_08000fd0",
            "code": "\nundefined8 concatenate_params_08000fd0(undefined4 param_1,undefined4 param_2)\n\n{\n  FUN_08000f68();\n  return concatenate_64bit_values(param_2,param_1);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_params_08000fd0",
                "CONCAT44": "concatenate_64bit_values"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "check_if_char_is_null_08000ff4",
            "code": "\nbool checkIfCharIsNull_08000ff4(void)\n\n{\n  char inputChar;\n  \n  FUN_08000fd0();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "check_if_char_is_null_08000ff4",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_if_null_terminated_08001030",
            "code": "\nbool check_if_null_terminated_08001030(void)\n\n{\n  char input_character;\n  \n  FUN_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_if_null_terminated_08001030",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "calculate_shifted_value_08001044",
            "code": "\nuint calculateShiftedValue_08001044(uint inputValue)\n\n{\n  uint shiftAmount;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (inputValue << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "calculate_shifted_value_08001044",
                "param_1": "inputValue",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_data_08001084",
            "code": "\nundefined4 * copyData_08001084(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destStart;\n  undefined4 *srcStart;\n  uint count;\n  uint innerCount;\n  bool condition;\n  \n  destStart = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      innerCount = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          srcStart = destStart;\n          condition = innerCount != 0;\n          innerCount = innerCount - 1;\n          *(undefined *)srcStart = *(undefined *)destPtr;\n          destStart = (undefined4 *)((int)srcStart + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (condition);\n        *(undefined *)(undefined4 *)((int)srcStart + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcStart + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcStart + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      innerCount = 4 - ((uint)dest & 3);\n      size = size - innerCount;\n      destPtr = dest;\n      srcStart = src;\n      if (((uint)dest & 1) != 0) {\n        srcStart = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destStart = destPtr;\n      src = srcStart;\n      if ((innerCount & 2) != 0) {\n        src = (undefined4 *)((int)srcStart + 2);\n        destStart = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcStart;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destStart = *src;\n    destStart[1] = src[1];\n    destStart[2] = src[2];\n    destStart[3] = src[3];\n    destStart[4] = src[4];\n    destStart[5] = src[5];\n    destStart[6] = src[6];\n    destStart[7] = src[7];\n    destStart[8] = src[8];\n    destStart[9] = src[9];\n    destStart[10] = src[10];\n    destStart[0xb] = src[0xb];\n    destStart[0xc] = src[0xc];\n    destStart[0xd] = src[0xd];\n    destStart[0xe] = src[0xe];\n    destStart[0xf] = src[0xf];\n    destStart = destStart + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  count = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destStart = *src;\n      destStart[1] = src[1];\n      destStart[2] = src[2];\n      destStart[3] = src[3];\n      destStart = destStart + 4;\n      src = src + 4;\n      condition = 0xf < count;\n      count = count - 0x10;\n    } while (condition);\n  }\n  innerCount = count + 0xc;\n  srcStart = destStart;\n  destPtr = src;\n  if (0xfffffff3 < count) {\n    do {\n      src = destPtr + 1;\n      *srcStart = *destPtr;\n      condition = 3 < innerCount;\n      innerCount = innerCount - 4;\n      destStart = srcStart + 1;\n      srcStart = srcStart + 1;\n      destPtr = src;\n    } while (condition);\n  }\nLAB_08001108:\n  if (innerCount + 4 != 0) {\n    destPtr = destStart;\n    srcStart = src;\n    if ((innerCount & 1) != 0) {\n      srcStart = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destStart + 1);\n      *(undefined *)destStart = *(undefined *)src;\n    }\n    if ((innerCount + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcStart;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_data_08001084",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destStart",
                "puVar3": "srcStart",
                "uVar4": "count",
                "uVar5": "innerCount",
                "bVar6": "condition"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_parameters_08001170",
            "code": "\nundefined4 check_parameters_08001170(uint first_param,int second_param,uint third_param,int fourth_param)\n\n{\n  if ((((second_param << 1) >> 0x15 != -1) || ((first_param | second_param << 0xc) == 0)) &&\n     (((fourth_param << 1) >> 0x15 != -1 || ((third_param | fourth_param << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_parameters_08001170",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "convert_unsigned_to_signed_0800119c",
            "code": "\nuint convertUnsignedToSigned_0800119c(uint higherBits,uint maxValue)\n\n{\n  uint shiftedValue;\n  int offset;\n  uint subtractValue;\n  \n  offset = maxValue * 2 + 0x200000;\n  if (maxValue * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    shiftedValue = offset >> 0x15;\n    subtractValue = -shiftedValue - 0x3e1;\n    if (shiftedValue < 0xfffffc20 && subtractValue != 0) {\n      shiftedValue = (maxValue << 0xb | 0x80000000 | higherBits >> 0x15) >> (subtractValue & 0xff);\n      if ((maxValue & 0x80000000) != 0) {\n        shiftedValue = -shiftedValue;\n      }\n      return shiftedValue;\n    }\n  }\n  else if ((higherBits | maxValue << 0xc) != 0) {\n    return 0;\n  }\n  maxValue = maxValue & 0x80000000;\n  if (maxValue == 0) {\n    maxValue = 0x7fffffff;\n  }\n  return maxValue;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "convert_unsigned_to_signed_0800119c",
                "param_1": "higherBits",
                "param_2": "maxValue",
                "uVar1": "shiftedValue",
                "iVar2": "offset",
                "uVar3": "subtractValue"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "check_params_and_get_concatenation_080011ec",
            "code": "\nundefined8 checkParamsAndGetConcatenation_080011ec(int input1,int input2,int param3,int param4)\n\n{\n  undefined8 result;\n  \n  if ((param4 == 0) && (param3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = FUN_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "check_params_and_get_concatenation_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "perform_division_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 performDivision_0800121c(uint dividend,uint divisor,uint quotient,uint remainder,uint *output)\n\n{\n  code *undefinedFunction;\n  ulonglong temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int shiftAmount;\n  uint lowerQuotient;\n  uint temp5;\n  uint upperQuotient;\n  uint *puVar9;\n  uint temp6;\n  uint multiplier;\n  uint temp7;\n  bool carry;\n  undefined8 returnValue;\n  \n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftAmount = LZCOUNT(quotient);\n      temp5 = quotient;\n      if (shiftAmount != 0) {\n        temp5 = quotient << shiftAmount;\n        divisor = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n      }\n      multiplier = temp5 >> 0x10;\n      upperQuotient = divisor / multiplier;\n      temp6 = upperQuotient * (temp5 & 0xffff);\n      lowerQuotient = dividend >> 0x10 | (divisor - multiplier * upperQuotient) * 0x10000;\n      temp3 = upperQuotient;\n      if (lowerQuotient <= temp6 && temp6 - lowerQuotient != 0) {\n        carry = CARRY4(temp5,lowerQuotient);\n        lowerQuotient = temp5 + lowerQuotient;\n        temp3 = upperQuotient - 1;\n        if ((carry == false) && (lowerQuotient <= temp6 && temp6 - lowerQuotient != 0)) {\n          temp3 = upperQuotient - 2;\n          lowerQuotient = lowerQuotient + temp5;\n        }\n      }\n      temp2 = (lowerQuotient - temp6) / multiplier;\n      temp4 = temp2 * (temp5 & 0xffff);\n      upperQuotient = dividend & 0xffff | ((lowerQuotient - temp6) - multiplier * temp2) * 0x10000;\n      lowerQuotient = temp2;\n      if (upperQuotient <= temp4 && temp4 - upperQuotient != 0) {\n        carry = CARRY4(temp5,upperQuotient);\n        upperQuotient = temp5 + upperQuotient;\n        lowerQuotient = temp2 - 1;\n        if ((carry == false) && (upperQuotient <= temp4 && temp4 - upperQuotient != 0)) {\n          lowerQuotient = temp2 - 2;\n          upperQuotient = upperQuotient + temp5;\n        }\n      }\n      lowerQuotient = lowerQuotient | temp3 << 0x10;\n      puVar9 = (uint *)0x0;\n      upperQuotient = upperQuotient - temp4;\n    }\n    else {\n      if (quotient == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        undefinedFunction = (code *)software_udf(0xff,0x8001302);\n        returnValue = (*undefinedFunction)();\n        return returnValue;\n      }\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount == 0) {\n        puVar9 = (uint *)0x1;\n        divisor = divisor - quotient;\n        multiplier = quotient >> 0x10;\n        temp2 = quotient & 0xffff;\n        temp5 = quotient;\n      }\n      else {\n        temp5 = quotient << shiftAmount;\n        lowerQuotient = divisor >> (0x20U - shiftAmount & 0xff);\n        multiplier = temp5 >> 0x10;\n        temp6 = lowerQuotient / multiplier;\n        temp2 = temp5 & 0xffff;\n        temp4 = temp6 * temp2;\n        upperQuotient = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        temp3 = upperQuotient >> 0x10 | (lowerQuotient - multiplier * temp6) * 0x10000;\n        dividend = dividend << shiftAmount;\n        lowerQuotient = temp6;\n        if (temp3 <= temp4 && temp4 - temp3 != 0) {\n          carry = CARRY4(temp5,temp3);\n          temp3 = temp5 + temp3;\n          lowerQuotient = temp6 - 1;\n          if ((carry == false) && (temp3 <= temp4 && temp4 - temp3 != 0)) {\n            lowerQuotient = temp6 - 2;\n            temp3 = temp3 + temp5;\n          }\n        }\n        temp6 = (temp3 - temp4) / multiplier;\n        temp7 = temp6 * temp2;\n        divisor = upperQuotient & 0xffff | ((temp3 - temp4) - multiplier * temp6) * 0x10000;\n        temp3 = temp6;\n        if (divisor <= temp7 && temp7 - divisor != 0) {\n          carry = CARRY4(temp5,divisor);\n          divisor = temp5 + divisor;\n          temp3 = temp6 - 1;\n          if ((carry == false) && (divisor <= temp7 && temp7 - divisor != 0)) {\n            temp3 = temp6 - 2;\n            divisor = divisor + temp5;\n          }\n        }\n        divisor = divisor - temp7;\n        puVar9 = (uint *)(temp3 | lowerQuotient << 0x10);\n      }\n      temp6 = divisor / multiplier;\n      lowerQuotient = temp2 * temp6;\n      upperQuotient = dividend >> 0x10 | (divisor - multiplier * temp6) * 0x10000;\n      temp3 = temp6;\n      if (upperQuotient <= lowerQuotient && lowerQuotient - upperQuotient != 0) {\n        carry = CARRY4(temp5,upperQuotient);\n        upperQuotient = temp5 + upperQuotient;\n        temp3 = temp6 - 1;\n        if ((carry == false) && (upperQuotient <= lowerQuotient && lowerQuotient - upperQuotient != 0)) {\n          temp3 = temp6 - 2;\n          upperQuotient = upperQuotient + temp5;\n        }\n      }\n      temp6 = (upperQuotient - lowerQuotient) / multiplier;\n      temp2 = temp2 * temp6;\n      upperQuotient = dividend & 0xffff | ((upperQuotient - lowerQuotient) - multiplier * temp6) * 0x10000;\n      lowerQuotient = temp6;\n      if (upperQuotient <= temp2 && temp2 - upperQuotient != 0) {\n        carry = CARRY4(temp5,upperQuotient);\n        upperQuotient = temp5 + upperQuotient;\n        lowerQuotient = temp6 - 1;\n        if ((carry == false) && (upperQuotient <= temp2 && temp2 - upperQuotient != 0)) {\n          lowerQuotient = temp6 - 2;\n          upperQuotient = upperQuotient + temp5;\n        }\n      }\n      upperQuotient = upperQuotient - temp2;\n      lowerQuotient = lowerQuotient | temp3 << 0x10;\n    }\n    if (output != (uint *)0x0) {\n      *output = upperQuotient >> LZCOUNT(quotient);\n      output[1] = 0;\n    }\n  }\n  else {\n    puVar9 = output;\n    if (divisor < remainder) {\n      if (output != (uint *)0x0) {\n        *output = dividend;\n        output[1] = divisor;\n        return 0;\n      }\n      lowerQuotient = 0;\n    }\n    else {\n      shiftAmount = LZCOUNT(remainder);\n      if (shiftAmount == 0) {\n        if ((remainder < divisor) || (quotient <= dividend)) {\n          carry = dividend < quotient;\n          dividend = dividend - quotient;\n          divisor = (divisor - remainder) - (uint)carry;\n          lowerQuotient = 1;\n        }\n        else {\n          lowerQuotient = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (output != (uint *)0x0) {\n          *output = dividend;\n          output[1] = divisor;\n        }\n      }\n      else {\n        upperQuotient = 0x20 - shiftAmount;\n        temp2 = quotient >> (upperQuotient & 0xff) | remainder << shiftAmount;\n        temp5 = divisor >> (upperQuotient & 0xff);\n        temp4 = temp2 >> 0x10;\n        temp6 = temp5 / temp4;\n        multiplier = temp6 * (temp2 & 0xffff);\n        lowerQuotient = divisor << shiftAmount | dividend >> (upperQuotient & 0xff);\n        temp3 = lowerQuotient >> 0x10 | (temp5 - temp4 * temp6) * 0x10000;\n        dividend = dividend << shiftAmount;\n        temp5 = temp6;\n        if (temp3 <= multiplier && multiplier - temp3 != 0) {\n          carry = CARRY4(temp2,temp3);\n          temp3 = temp2 + temp3;\n          temp5 = temp6 - 1;\n          if ((carry == false) && (temp3 <= multiplier && multiplier - temp3 != 0)) {\n            temp5 = temp6 - 2;\n            temp3 = temp3 + temp2;\n          }\n        }\n        temp6 = (temp3 - multiplier) / temp4;\n        temp7 = temp6 * (temp2 & 0xffff);\n        temp3 = lowerQuotient & 0xffff | ((temp3 - multiplier) - temp4 * temp6) * 0x10000;\n        lowerQuotient = temp6;\n        if (temp3 <= temp7 && temp7 - temp3 != 0) {\n          carry = CARRY4(temp2,temp3);\n          temp3 = temp2 + temp3;\n          lowerQuotient = temp6 - 1;\n          if ((carry == false) && (temp3 <= temp7 && temp7 - temp3 != 0)) {\n            lowerQuotient = temp6 - 2;\n            temp3 = temp3 + temp2;\n          }\n        }\n        lowerQuotient = lowerQuotient | temp5 << 0x10;\n        temp1 = (ulonglong)lowerQuotient * (ulonglong)(quotient << shiftAmount);\n        if (CONCAT44(temp3 - temp7,dividend) < temp1) {\n          lowerQuotient = lowerQuotient - 1;\n          temp1 = temp1 - CONCAT44(temp2,quotient << shiftAmount);\n        }\n        if (output != (uint *)0x0) {\n          temp5 = ((temp3 - temp7) - (int)(temp1 >> 0x20)) - (uint)(dividend < (uint)temp1);\n          *output = temp5 << (upperQuotient & 0xff) | dividend - (uint)temp1 >> shiftAmount;\n          output[1] = temp5 >> shiftAmount;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,lowerQuotient);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "perform_division_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "output",
                "UNRECOVERED_JUMPTABLE": "undefinedFunction",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "shiftAmount",
                "uVar6": "lowerQuotient",
                "uVar7": "temp5",
                "uVar8": "upperQuotient",
                "uVar10": "temp6",
                "uVar11": "multiplier",
                "uVar12": "temp7",
                "bVar13": "carry",
                "uVar14": "returnValue"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_flags_080014f0",
            "code": "\n\n\nundefined4 initialize_flags_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_flags_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "check_and_set_param_0800151c",
            "code": "\nundefined4 checkAndSetParam_0800151c(uint inputParam)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (inputParam < 0x10) {\n      FUN_0800172a(0xffffffff,inputParam,0);\n      returnValue = 0;\n      DAT_20000000 = inputParam;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "check_and_set_param_0800151c",
                "param_1": "inputParam",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increment_data_with_offset_0800157c",
            "code": "\nvoid incrementDataWithOffset_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increment_data_with_offset_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_080015a0",
            "code": "\nundefined4 get_data_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_080015a0"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_configuration_080015b4",
            "code": "\n\n\nvoid setConfiguration_080015b4(uint configurationValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configurationValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_configuration_080015b4",
                "param_1": "configurationValue"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_extracted_value_080015fc",
            "code": "\n\n\nuint getExtractedValue_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_extracted_value_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "store_byte_in_memory_08001618",
            "code": "\nvoid storeByteInMemory_08001618(byte input,uint value)\n\n{\n  if ((char)input < '\\0') {\n    *(char *)((input & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "store_byte_in_memory_08001618",
                "param_1": "input",
                "param_2": "value"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "apply_bitwise_operations_0800166c",
            "code": "\nuint applyBitwiseOperations_0800166c(uint bitCount,uint inputBits,uint outputBits)\n\n{\n  uint numBitsToShift;\n  \n  bitCount = bitCount & 7;\n  numBitsToShift = 7 - bitCount;\n  if (3 < numBitsToShift) {\n    numBitsToShift = 4;\n  }\n  if (bitCount + 4 < 7) {\n    bitCount = 0;\n  }\n  else {\n    bitCount = bitCount - 3;\n  }\n  return outputBits & ~(-1 << (bitCount & 0xff)) |\n         (~(-1 << (numBitsToShift & 0xff)) & inputBits) << (bitCount & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "apply_bitwise_operations_0800166c",
                "param_1": "bitCount",
                "param_2": "inputBits",
                "param_3": "outputBits",
                "uVar1": "numBitsToShift"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_set_data_value_080016d0",
            "code": "\n\n\nbool check_and_set_data_value_080016d0(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_set_data_value_080016d0",
                "param_1": "input_value",
                "bVar1": "is_valid"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "initialize_function_08001714",
            "code": "\nvoid initialize_function_08001714(undefined4 input)\n\n{\n  FUN_080015b4(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "initialize_function_08001714",
                "param_1": "input"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "process_data_0800172a",
            "code": "\nvoid processData_0800172a(char input,undefined4 var1,undefined4 var2)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,var1,var2);\n  FUN_08001618((int)input,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "input",
                "param_2": "var1",
                "param_3": "var2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "decode_binary_08001762",
            "code": "\nundefined4 decode_binary_08001762(undefined4 input_data)\n\n{\n  undefined4 decoded_result;\n  \n  decoded_result = FUN_080016d0(input_data);\n  return decoded_result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "decode_binary_08001762",
                "param_1": "input_data",
                "uVar1": "decoded_result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_bit_in_register_0800177c",
            "code": "\n\n\nvoid setBitInRegister_0800177c(int bitNumber)\n\n{\n  if (bitNumber == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_bit_in_register_0800177c",
                "param_1": "bitNumber"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_application_080017b4",
            "code": "\nvoid initializeApplication_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_application_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_config_080017c4",
            "code": "\n\n\nvoid updateConfig_080017c4(uint *config,uint *flags)\n\n{\n  uint bitMask;\n  uint flagCheck;\n  uint flagValue;\n  uint *configPointer;\n  int configIndex;\n  uint offset;\n  uint bitIndex;\n  \n  offset = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    flagCheck = *flags & bitMask;\n    if (flagCheck == bitMask) {\n      flagValue = flags[1];\n      if (flagValue == 0x12) {\n        offset = flags[3] + 0xc;\n      }\n      else if (flagValue < 0x13) {\n        if (flagValue == 2) {\n          offset = flags[3] + 8;\n        }\n        else if (flagValue < 3) {\n          if (flagValue == 0) goto LAB_08001882;\n          if (flagValue == 1) {\n            offset = flags[3];\n          }\n        }\n        else if (flagValue == 3) {\n          offset = 0;\n        }\n        else if (flagValue == 0x11) {\n          offset = flags[3] + 4;\n        }\n      }\n      else if (flagValue == 0x10210000) {\nLAB_08001882:\n        if (flags[2] == 0) {\n          offset = 4;\n        }\n        else if (flags[2] == 1) {\n          offset = 8;\n          config[4] = bitMask;\n        }\n        else {\n          offset = 8;\n          config[5] = bitMask;\n        }\n      }\n      else if (flagValue < 0x10210001) {\n        if ((flagValue == 0x10110000) || (flagValue == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((flagValue == 0x10310000) || (flagValue == 0x10320000)) || (flagValue == 0x10220000))\n      goto LAB_08001882;\n      if (flagCheck < 0x100) {\n        bitMask = bitIndex << 2;\n        configPointer = config;\n      }\n      else {\n        configPointer = config + 1;\n        bitMask = (bitIndex - 8) * 4;\n      }\n      *configPointer = *configPointer & ~(0xf << (bitMask & 0xff)) | offset << (bitMask & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (config == (uint *)0x40010800) {\n          configIndex = 0;\n        }\n        else if (config == (uint *)0x40010c00) {\n          configIndex = 1;\n        }\n        else if (config == (uint *)0x40011000) {\n          configIndex = 2;\n        }\n        else if (config == (uint *)0x40011400) {\n          configIndex = 3;\n        }\n        else {\n          configIndex = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             configIndex << ((bitIndex & 3) << 2) |\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000);\n        if ((flags[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~flagCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = flagCheck | _DAT_40010400;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~flagCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = flagCheck | _DAT_40010404;\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~flagCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = flagCheck | _DAT_40010408;\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~flagCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = flagCheck | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_config_080017c4",
                "param_1": "config",
                "param_2": "flags",
                "uVar1": "bitMask",
                "uVar2": "flagCheck",
                "uVar3": "flagValue",
                "puVar4": "configPointer",
                "iVar5": "configIndex",
                "local_10": "offset",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "set_param_value_08001a80",
            "code": "\nvoid setParamValue_08001a80(int ptr,ushort value,char flag)\n\n{\n  if (flag == '\\0') {\n    *(uint *)(ptr + 0x10) = (uint)value << 0x10;\n  }\n  else {\n    *(uint *)(ptr + 0x10) = (uint)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_stats_08001ab0",
            "code": "\nundefined4 calculateStats_08001ab0(uint **pointerArray)\n\n{\n  uint tempVar1;\n  char charFlag;\n  undefined4 returnValue;\n  uint tempVar2;\n  bool boolFlag;\n  \n  if (pointerArray == (uint **)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)pointerArray + 0x3d) == '\\0') {\n      *(undefined *)(pointerArray + 0xf) = 0;\n      FUNC_08001cb8(pointerArray);\n    }\n    *(undefined *)((int)pointerArray + 0x3d) = 0x24;\n    **pointerArray = **pointerArray & 0xfffffffe;\n    tempVar1 = FUN_08003518();\n    if (pointerArray[1] < (uint *)0x186a1) {\n      tempVar2 = tempVar1;\n      if (tempVar1 < 2000000) {\n        tempVar2 = 1;\n      }\n      charFlag = (char)tempVar2;\n      if (1999999 < tempVar1) {\n        charFlag = '\\0';\n      }\n    }\n    else {\n      tempVar2 = tempVar1;\n      if (tempVar1 < 4000000) {\n        tempVar2 = 1;\n      }\n      charFlag = (char)tempVar2;\n      if (3999999 < tempVar1) {\n        charFlag = '\\0';\n      }\n    }\n    if (charFlag == '\\0') {\n      tempVar2 = tempVar1 / 1000000;\n      (*pointerArray)[1] = tempVar2;\n      if ((uint *)0x186a0 < pointerArray[1]) {\n        tempVar2 = (tempVar2 * 300) / 1000;\n      }\n      (*pointerArray)[8] = tempVar2 + 1;\n      if (pointerArray[1] < (uint *)0x186a1) {\n        tempVar1 = (tempVar1 - 1) / (uint)((int)pointerArray[1] << 1) + 1 & 0xfff;\n        if (tempVar1 < 4) {\n          tempVar1 = 4;\n        }\n      }\n      else {\n        if (pointerArray[2] == (uint *)0x0) {\n          tempVar2 = (tempVar1 - 1) / (uint)((int)pointerArray[1] * 3) + 1 & 0xfff;\n          boolFlag = tempVar2 == 0;\n          if (boolFlag) {\n            tempVar2 = 1;\n          }\n          charFlag = (char)tempVar2;\n          if (!boolFlag) {\n            charFlag = '\\0';\n          }\n        }\n        else {\n          tempVar2 = (tempVar1 - 1) / (uint)((int)pointerArray[1] * 0x19) + 1 & 0xfff;\n          boolFlag = tempVar2 == 0;\n          if (boolFlag) {\n            tempVar2 = 1;\n          }\n          charFlag = (char)tempVar2;\n          if (!boolFlag) {\n            charFlag = '\\0';\n          }\n        }\n        if (charFlag == '\\0') {\n          if (pointerArray[2] == (uint *)0x0) {\n            tempVar1 = (tempVar1 - 1) / (uint)((int)pointerArray[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            tempVar1 = (tempVar1 - 1) / (uint)((int)pointerArray[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          tempVar1 = 1;\n        }\n      }\n      (*pointerArray)[7] = tempVar1;\n      **pointerArray = (uint)pointerArray[8] | (uint)pointerArray[7];\n      (*pointerArray)[2] = (uint)pointerArray[3] | (uint)pointerArray[4];\n      (*pointerArray)[3] = (uint)pointerArray[6] | (uint)pointerArray[5];\n      **pointerArray = **pointerArray | 1;\n      pointerArray[0x10] = (uint *)0x0;\n      *(undefined *)((int)pointerArray + 0x3d) = 0x20;\n      pointerArray[0xc] = (uint *)0x0;\n      *(undefined *)((int)pointerArray + 0x3e) = 0;\n      returnValue = 0;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_stats_08001ab0",
                "param_1": "pointerArray",
                "uVar1": "tempVar1",
                "cVar2": "charFlag",
                "uVar3": "returnValue",
                "uVar4": "tempVar2",
                "bVar5": "boolFlag"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "validate_and_process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nvalidateAndProcessData_08001ccc(uint **data,undefined2 param1,undefined2 param2,undefined2 param3,uint *param4,\n            undefined2 param5,undefined4 param6)\n\n{\n  int value1;\n  int value2;\n  undefined4 result;\n  uint *pointer;\n  \n  value1 = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        value2 = 0;\n        goto LAB_08001d9c;\n      }\n      value2 = FUN_080015a0();\n    } while ((uint)(value2 - value1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    value2 = 3;\nLAB_08001d9c:\n    if (value2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param4;\n        *(undefined2 *)((int)data + 0x2a) = param5;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        value2 = FUN_08002640(data,param1,param2,param3,param6,value1);\n        if (value2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            value2 = FUN_08002bb4(data,param6,value1);\n            if (value2 != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            pointer = data[9];\n            data[9] = (uint *)((int)pointer + 1);\n            (*data)[4] = (uint)*(byte *)pointer;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              pointer = data[9];\n              data[9] = (uint *)((int)pointer + 1);\n              (*data)[4] = (uint)*(byte *)pointer;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          value1 = FUN_08002c2e(data,param6,value1);\n          if (value1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            result = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "validate_and_process_data_08001ccc",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "result",
                "puVar4": "pointer"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **data,undefined2 val1,undefined2 val2,undefined2 val3,uint *buffer,\n            undefined2 val4,uint count)\n\n{\n  int initialValue;\n  uint tempValue;\n  int loopCount;\n  undefined4 returnValue;\n  uint *ptr;\n  \n  initialValue = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        loopCount = 0;\n        goto label1;\n      }\n      loopCount = FUN_080015a0();\n    } while ((uint)(loopCount - initialValue) < 0x1a);\n    ptrValue3 = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    loopCount = 3;\nlabel1:\n    if (loopCount == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        ptrValue4 = (uint *)0x0;\n        ptrValue5 = buffer;\n        *(undefined2 *)((int)data + 0x2a) = val4;\n        ptrValue6 = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        loopCount = FUN_080027f4(data,val1,val2,val3,count,initialValue);\n        if (loopCount == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disableIRQinterrupts();\n            **data = **data | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disableIRQinterrupts();\n            **data = **data & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                loopCount = FUN_08002ca8(data,count,initialValue);\n                if (loopCount != 0) {\n                  if (ptrValue4 == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                tempValue = (*data)[4];\n                ptr = ptrValue5;\n                ptrValue5 = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    loopCount = 0;\n                    goto label2;\n                  }\n                } while ((count == 0xffffffff) ||\n                        ((count != 0 && (loopCount = FUN_080015a0(), (uint)(loopCount - initialValue) <= count)\n                         )));\n                ptrValue3 = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                loopCount = 3;\nlabel2:\n                if (loopCount != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **data = **data | 0x200;\n                tempValue = (*data)[4];\n                ptr = ptrValue5;\n                ptrValue5 = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableIRQinterrupts();\n                tempValue = (*data)[4];\n                ptr = ptrValue5;\n                ptrValue5 = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    loopCount = 0;\n                    goto label3;\n                  }\n                } while ((count == 0xffffffff) ||\n                        ((count != 0 && (loopCount = FUN_080015a0(), (uint)(loopCount - initialValue) <= count)\n                         )));\n                ptrValue3 = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                loopCount = 3;\nlabel3:\n                if (loopCount != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disableIRQinterrupts();\n                tempValue = (*data)[4];\n                ptr = ptrValue5;\n                ptrValue5 = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    loopCount = 0;\n                    goto label4;\n                  }\n                } while ((count == 0xffffffff) ||\n                        ((count != 0 && (loopCount = FUN_080015a0(), (uint)(loopCount - initialValue) <= count)\n                         )));\n                ptrValue3 = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                loopCount = 3;\nlabel4:\n                if (loopCount != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                tempValue = (*data)[4];\n                ptr = ptrValue5;\n                ptrValue5 = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableIRQinterrupts();\n                tempValue = (*data)[4];\n                ptr = ptrValue5;\n                ptrValue5 = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              loopCount = FUN_08002ca8(data,count,initialValue);\n              if (loopCount != 0) {\n                if (ptrValue4 == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              tempValue = (*data)[4];\n              ptr = ptrValue5;\n              ptrValue5 = (uint *)((int)ptr + 1);\n              *(char *)ptr = (char)tempValue;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                tempValue = (*data)[4];\n                ptr = ptrValue5;\n                ptrValue5 = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 0;\n        }\n        else if (ptrValue4 == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "data",
                "param_2": "val1",
                "param_3": "val2",
                "param_4": "val3",
                "param_5": "buffer",
                "param_6": "val4",
                "param_7": "count",
                "iVar1": "initialValue",
                "uVar2": "tempValue",
                "iVar3": "loopCount",
                "uVar4": "returnValue",
                "puVar5": "ptr",
                "LAB_08002040": "label1",
                "LAB_080022fa": "label2",
                "LAB_08002418": "label3",
                "LAB_0800250a": "label4",
                "param_1[0xc]": "ptrValue3",
                "param_1[0x10]": "ptrValue4",
                "param_1[9]": "ptrValue5",
                "param_1[0xb]": "ptrValue6"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_flag_and_check_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateFlagAndCheck_08002640(uint **ptrToPtr,byte flagByte,undefined2 code,short condition,uint limit,int base)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **ptrToPtr = **ptrToPtr | 0x100;\n  do {\n    if ((~(*ptrToPtr)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - base) <= limit))));\n  ptrToPtr[0xc] = (uint *)0x0;\n  *(undefined *)((int)ptrToPtr + 0x3d) = 0x20;\n  *(undefined *)((int)ptrToPtr + 0x3e) = 0;\n  *(undefined *)(ptrToPtr + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*ptrToPtr)[4] = flagByte & 0xfe;\n    result = FUN_08002ad8(ptrToPtr,0x10002,limit,base);\n    if (result == 0) {\n      result = FUN_08002bb4(ptrToPtr,limit,base,(*ptrToPtr)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*ptrToPtr)[4] = (uint)(byte)code;\n        }\n        else {\n          (*ptrToPtr)[4] = (uint)(byte)((ushort)code >> 8);\n          result = FUN_08002bb4(ptrToPtr,limit,base);\n          if (result != 0) {\n            if (ptrToPtr[0x10] == (uint *)0x4) {\n              **ptrToPtr = **ptrToPtr | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*ptrToPtr)[4] = (uint)(byte)code;\n        }\n        returnValue = 0;\n      }\n      else if (ptrToPtr[0x10] == (uint *)0x4) {\n        **ptrToPtr = **ptrToPtr | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (ptrToPtr[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_flag_and_check_08002640",
                "param_1": "ptrToPtr",
                "param_2": "flagByte",
                "param_3": "code",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "base",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "execute_task_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nexecuteTask_080027f4(uint **taskPointer,byte byteValue,undefined2 shortValue,short condition,uint limit,int initialValue)\n\n{\n  int status;\n  undefined4 result;\n  \n  **taskPointer = **taskPointer | 0x400;\n  **taskPointer = **taskPointer | 0x100;\n  do {\n    if ((~(*taskPointer)[5] & 1) == 0) {\n      status = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (status = FUN_080015a0(), (uint)(status - initialValue) <= limit))));\n  taskPointer[0xc] = (uint *)0x0;\n  *(undefined *)((int)taskPointer + 0x3d) = 0x20;\n  *(undefined *)((int)taskPointer + 0x3e) = 0;\n  *(undefined *)(taskPointer + 0xf) = 0;\n  status = 3;\nLAB_080028d2:\n  if (status == 0) {\n    (*taskPointer)[4] = byteValue & 0xfe;\n    status = FUN_08002ad8(taskPointer,0x10002,limit,initialValue);\n    if (status == 0) {\n      status = FUN_08002bb4(taskPointer,limit,initialValue,(*taskPointer)[6]);\n      if (status == 0) {\n        if (condition == 1) {\n          (*taskPointer)[4] = (uint)(byte)shortValue;\n        }\n        else {\n          (*taskPointer)[4] = (uint)(byte)((ushort)shortValue >> 8);\n          status = FUN_08002bb4(taskPointer,limit,initialValue);\n          if (status != 0) {\n            if (taskPointer[0x10] == (uint *)0x4) {\n              **taskPointer = **taskPointer | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*taskPointer)[4] = (uint)(byte)shortValue;\n        }\n        status = FUN_08002bb4(taskPointer,limit,initialValue);\n        if (status == 0) {\n          **taskPointer = **taskPointer | 0x100;\n          do {\n            if ((~(*taskPointer)[5] & 1) == 0) {\n              status = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (status = FUN_080015a0(), (uint)(status - initialValue) <= limit))));\n          taskPointer[0xc] = (uint *)0x0;\n          *(undefined *)((int)taskPointer + 0x3d) = 0x20;\n          *(undefined *)((int)taskPointer + 0x3e) = 0;\n          *(undefined *)(taskPointer + 0xf) = 0;\n          status = 3;\nLAB_08002a90:\n          if (status == 0) {\n            (*taskPointer)[4] = (uint)(byteValue | 1);\n            status = FUN_08002ad8(taskPointer,0x10002,limit,initialValue);\n            if (status == 0) {\n              result = 0;\n            }\n            else if (taskPointer[0x10] == (uint *)0x4) {\n              result = 1;\n            }\n            else {\n              result = 3;\n            }\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (taskPointer[0x10] == (uint *)0x4) {\n          **taskPointer = **taskPointer | 0x200;\n          result = 1;\n        }\n        else {\n          result = 3;\n        }\n      }\n      else if (taskPointer[0x10] == (uint *)0x4) {\n        **taskPointer = **taskPointer | 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (taskPointer[0x10] == (uint *)0x4) {\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else {\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "execute_task_080027f4",
                "param_1": "taskPointer",
                "param_2": "byteValue",
                "param_3": "shortValue",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "initialValue",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_modify_flags_08002ad8",
            "code": "\nundefined4 check_and_modify_flags_08002ad8(uint **input_data,uint flag_value,uint max_value,int comparison_value)\n\n{\n  int result;\n  char flag_char;\n  uint modified_flag;\n  bool is_flag_modified;\n  \n  do {\n    if ((flag_value >> 0x10 & 0xff) == 1) {\n      modified_flag = flag_value & ~(*input_data)[5] & 0xffff;\n      is_flag_modified = modified_flag != 0;\n      if (is_flag_modified) {\n        modified_flag = 1;\n      }\n      flag_char = (char)modified_flag;\n      if (!is_flag_modified) {\n        flag_char = '\\0';\n      }\n    }\n    else {\n      modified_flag = flag_value & ~(*input_data)[6] & 0xffff;\n      is_flag_modified = modified_flag != 0;\n      if (is_flag_modified) {\n        modified_flag = 1;\n      }\n      flag_char = (char)modified_flag;\n      if (!is_flag_modified) {\n        flag_char = '\\0';\n      }\n    }\n    if (flag_char == '\\0') {\n      return 0;\n    }\n    if (((*input_data)[5] & 0x400) == 0x400) {\n      **input_data = **input_data | 0x200;\n      (*input_data)[5] = 0xfffffbff;\n      input_data[0x10] = (uint *)0x4;\n      input_data[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      *(undefined *)(input_data + 0xf) = 0;\n      return 1;\n    }\n  } while ((max_value == 0xffffffff) ||\n          ((max_value != 0 && (result = FUN_080015a0(), (uint)(result - comparison_value) <= max_value))));\n  input_data[0xc] = (uint *)0x0;\n  *(undefined *)((int)input_data + 0x3d) = 0x20;\n  *(undefined *)(input_data + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_modify_flags_08002ad8",
                "param_1": "input_data",
                "param_2": "flag_value",
                "param_3": "max_value",
                "param_4": "comparison_value",
                "iVar1": "result",
                "cVar2": "flag_char",
                "uVar3": "modified_flag",
                "bVar4": "is_flag_modified"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_and_update_flags_08002bb4",
            "code": "\nundefined4 check_and_update_flags_08002bb4(int *array_ptr,uint array_length,int array_offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*array_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = FUN_08002d3c(array_ptr);\n    if (result != 0) break;\n    if ((array_length != 0xffffffff) &&\n       ((array_length == 0 || (result = FUN_080015a0(), array_length < (uint)(result - array_offset))))) {\n      array_ptr[16] = array_ptr[16] | 0x20;\n      array_ptr[12] = 0;\n      *(undefined *)((int)array_ptr + 0x3d) = 0x20;\n      *(undefined *)(array_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_and_update_flags_08002bb4",
                "param_1": "array_ptr",
                "param_2": "array_length",
                "param_3": "array_offset",
                "iVar1": "result",
                "param_1[0x10]": "array_ptr[16]",
                "param_1[0xc]": "array_ptr[12]"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_modify_parameters_08002c2e",
            "code": "\nundefined4 checkAndModifyParameters_08002c2e(int *ptrIntArray,uint maxValue,int threshold)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*ptrIntArray + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(ptrIntArray);\n    if (result != 0) break;\n    if ((maxValue != 0xffffffff) &&\n       ((maxValue == 0 || (result = FUN_080015a0(), maxValue < (uint)(result - threshold))))) {\n      ptrIntArray[0x10] = ptrIntArray[0x10] | 0x20;\n      ptrIntArray[0xc] = 0;\n      *(undefined *)((int)ptrIntArray + 0x3d) = 0x20;\n      *(undefined *)(ptrIntArray + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_modify_parameters_08002c2e",
                "param_1": "ptrIntArray",
                "param_2": "maxValue",
                "param_3": "threshold",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_flag_08002ca8",
            "code": "\nundefined4 checkFlag_08002ca8(int *dataPointer,uint size,int offset)\n\n{\n  int funcResult;\n  \n  while( true ) {\n    if ((*(uint *)(*dataPointer + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*dataPointer + 0x14) & 0x10) == 0x10) break;\n    if ((size == 0) || (funcResult = FUN_080015a0(), size < (uint)(funcResult - offset))) {\n      dataPointer[0x10] = dataPointer[0x10] | 0x20;\n      *(undefined *)((int)dataPointer + 0x3d) = 0x20;\n      *(undefined *)(dataPointer + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*dataPointer + 0x14) = 0xffffffef;\n  dataPointer[0x10] = 0;\n  dataPointer[0xc] = 0;\n  *(undefined *)((int)dataPointer + 0x3d) = 0x20;\n  *(undefined *)(dataPointer + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_flag_08002ca8",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "funcResult"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "update_binary_data_08002d3c",
            "code": "\nbool updateBinaryData_08002d3c(int *binaryData)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*binaryData + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*binaryData + 0x14) = 0xfffffbff;\n    binaryData[0x10] = 4;\n    binaryData[0xc] = 0;\n    *(undefined *)((int)binaryData + 0x3d) = 0x20;\n    *(undefined *)(binaryData + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "update_binary_data_08002d3c",
                "param_1": "binaryData",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_and_control_08002d98",
            "code": "\n\n\nundefined4 checkAndControl_08002d98(uint *flags)\n\n{\n  int initialTime;\n  int currentTime;\n  undefined4 result;\n  bool flagSet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        initialTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = FUN_080015a0();\n          if (100 < (uint)(currentTime - initialTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = FUN_080015a0();\n          if (100 < (uint)(currentTime - initialTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      initialTime = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialTime = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      initialTime = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialTime = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    flagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (flagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialTime = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = FUN_080015a0();\n        if (100 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      initialTime = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialTime = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    initialTime = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initialTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentTime = FUN_080015a0();\n          if (2 < (uint)(currentTime - initialTime)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentTime = FUN_080015a0();\n    } while ((uint)(currentTime - initialTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialTime = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentTime = FUN_080015a0();\n    } while ((uint)(currentTime - initialTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_and_control_08002d98",
                "param_1": "flags",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "flagSet"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "update_data_08003260",
            "code": "\n\n\nundefined4 updateData_08003260(uint *dataPtr,uint dataSize)\n\n{\n  int initialTime;\n  int currentTime;\n  uint returnValue;\n  undefined4 success;\n  \n  if (((_DAT_40022000 & 7) < dataSize) &&\n     (_DAT_40022000 = dataSize | _DAT_40022000 & 0xfffffff8, dataSize != (dataSize & 7))) {\n    success = 1;\n  }\n  else {\n    if ((*dataPtr & 2) != 0) {\n      _DAT_40021004 = configValue2 | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*dataPtr & 1) == 0) {\nLAB_08003394:\n      if ((dataSize < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = dataSize | _DAT_40022000 & 0xfffffff8, dataSize != (dataSize & 7))) {\n        success = 1;\n      }\n      else {\n        if ((*dataPtr & 4) != 0) {\n          _DAT_40021004 = configValue3 | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*dataPtr & 8) != 0) {\n          _DAT_40021004 = configValue4 << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        returnValue = FUN_08003440();\n        DAT_20000018 = returnValue >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        success = 0;\n      }\n    }\n    else {\n      if (configValue1 == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((configValue1 != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = configValue1 | _DAT_40021004 & 0xfffffffc;\n      initialTime = FUN_080015a0();\n      if (configValue1 == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          currentTime = FUN_080015a0();\n        } while ((uint)(currentTime - initialTime) < 0x1389);\n        success = 3;\n      }\n      else if (configValue1 == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          currentTime = FUN_080015a0();\n        } while ((uint)(currentTime - initialTime) < 0x1389);\n        success = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          currentTime = FUN_080015a0();\n        } while ((uint)(currentTime - initialTime) < 0x1389);\n        success = 3;\n      }\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_08003260": "update_data_08003260",
                "param_1": "dataPtr",
                "param_2": "dataSize",
                "uVar3": "returnValue",
                "uVar4": "success",
                "param_1[2]": "configValue2",
                "param_1[3]": "configValue3",
                "param_1[4]": "configValue4",
                "param_1[1]": "configValue1",
                "iVar1": "initialTime",
                "iVar2": "currentTime"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculateExecutionTime_08003440(void)\n\n{\n  undefined2 processId;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint executionTime;\n  undefined4 constant5;\n  uint data;\n  uint executionTimeMilliseconds;\n  uint tempValue;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  processId = 0x201;\n  constant5 = 0;\n  tempValue = 0;\n  executionTime = 0;\n  executionTimeMilliseconds = 0;\n  data = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    executionTimeMilliseconds = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    executionTime = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      tempValue = executionTime * 4000000;\n    }\n    else {\n      tempValue = (executionTime * 8000000) / (uint)*(byte *)((int)&processId + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    executionTimeMilliseconds = tempValue;\n  }\n  else {\n    executionTimeMilliseconds = 8000000;\n  }\n  return executionTimeMilliseconds;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "processId",
                "local_2c": "constant1",
                "uStack_28": "constant2",
                "uStack_24": "constant3",
                "uStack_20": "constant4",
                "local_1c": "executionTime",
                "local_18": "constant5",
                "local_14": "data",
                "local_10": "executionTimeMilliseconds",
                "local_c": "tempValue"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_08003504",
            "code": "\nundefined4 get_data_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_08003504"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shift_bits_based_on_index_08003518",
            "code": "\n\n\nuint shiftBitsBasedOnIndex_08003518(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(shiftAmount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shift_bits_based_on_index_08003518",
                "uVar1": "result",
                "sbyte": "shiftAmount"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "shift_uint_by_value_08003540",
            "code": "\n\n\nuint shiftUintByValue_08003540(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "shift_uint_by_value_08003540",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "calculate_iterations_08003568",
            "code": "\nvoid calculateIterations_08003568(int inputValue)\n\n{\n  bool hasMoreIterations;\n  int adjustedIterations;\n  \n  adjustedIterations = inputValue * (DAT_20000018 / 8000);\n  do {\n    hasMoreIterations = adjustedIterations != 0;\n    adjustedIterations = adjustedIterations + -1;\n  } while (hasMoreIterations);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "calculate_iterations_08003568",
                "param_1": "inputValue",
                "local_c": "adjustedIterations",
                "bVar1": "hasMoreIterations"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_and_process_data_080035a4",
            "code": "\nundefined4 check_and_process_data_080035a4(undefined4 *data_ptr)\n\n{\n  undefined4 result;\n  \n  if (data_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      FUNC_080035fa(data_ptr);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    FUN_08003c94(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_and_process_data_080035a4",
                "param_1": "data_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_flags_0800360c",
            "code": "\nundefined4 setFlags_0800360c(uint **ptr)\n\n{\n  (*ptr)[3] = (*ptr)[3] | 1;\n  **ptr = **ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "validate_and_process_data_08003640",
            "code": "\nundefined4 validate_and_process_data_08003640(undefined4 *data_ptr)\n\n{\n  undefined4 result;\n  \n  if (data_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      FUNC_08003696(data_ptr);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    FUN_08003c94(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003640": "validate_and_process_data_08003640",
                "param_1": "data_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_status_and_flags_080036a8",
            "code": "\nundefined4 updateStatusAndFlags_080036a8(unsignedInteger **dataPtr,undefined4 status)\n\n{\n  FUN_080041ea(*dataPtr,status,1);\n  if (*dataPtr == (unsignedInteger *)0x40012c00) {\n    (*dataPtr)[0x11] = (*dataPtr)[0x11] | 0x8000;\n  }\n  **dataPtr = **dataPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_status_and_flags_080036a8",
                "param_1": "dataPtr",
                "param_2": "status",
                "uint": "unsignedInteger"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_flags_080036f8",
            "code": "\nvoid processFlags_080036f8(int *ptr)\n\n{\n  if (((*(uint *)(*ptr + 0x10) & 2) == 2) && ((*(uint *)(*ptr + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(ptr + 7) = 1;\n    if ((*(uint *)(*ptr + 0x18) & 3) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 4) == 4) && ((*(uint *)(*ptr + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(ptr + 7) = 2;\n    if ((*(uint *)(*ptr + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 8) == 8) && ((*(uint *)(*ptr + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(ptr + 7) = 4;\n    if ((*(uint *)(*ptr + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x10) == 0x10) && ((*(uint *)(*ptr + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffffef;\n    *(undefined *)(ptr + 7) = 8;\n    if ((*(uint *)(*ptr + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 1) == 1) && ((*(uint *)(*ptr + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffffe;\n    FUN_08004f78(ptr);\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x80) == 0x80) && ((*(uint *)(*ptr + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffff7f;\n    FUNC_08004378(ptr);\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x40) == 0x40) && ((*(uint *)(*ptr + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffffbf;\n    FUNC_08003c80(ptr);\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x20) == 0x20) && ((*(uint *)(*ptr + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffffdf;\n    FUNC_08004366(ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "process_data_08003908",
            "code": "\nundefined4 processData_08003908(int *data,int size,undefined4 mode)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(data + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    switch(mode) {\n    case 0:\n      FUN_08003d60(*data,size);\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 8;\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffffb;\n      *(uint *)(*data + 0x18) = *(uint *)(size + 0x10) | *(uint *)(*data + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*data,size);\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 0x800;\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffbff;\n      *(uint *)(*data + 0x18) = *(int *)(size + 0x10) << 8 | *(uint *)(*data + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*data,size);\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 8;\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffffb;\n      *(uint *)(*data + 0x1c) = *(uint *)(size + 0x10) | *(uint *)(*data + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*data,size);\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 0x800;\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffbff;\n      *(uint *)(*data + 0x1c) = *(int *)(size + 0x10) << 8 | *(uint *)(*data + 0x1c);\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "process_data_08003908",
                "param_1": "data",
                "param_2": "size",
                "param_3": "mode",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "update_status_08003a94",
            "code": "\nundefined4 updateStatus_08003a94(int *data,uint *values)\n\n{\n  undefined4 result;\n  uint value;\n  \n  if (*(char *)(data + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xffff0088;\n    value = *values;\n    if (value == 0x40) {\n      FUN_080040a0(*data,values[1],values[3]);\n      FUN_0800416a(*data,0x40);\n    }\n    else if (value < 0x41) {\n      if (value == 0x10) {\n        FUN_0800416a(*data,0x10);\n      }\n      else if (value < 0x11) {\n        if (value == 0) {\n          FUN_0800416a(*data,0);\n        }\n      }\n      else if (value == 0x20) {\n        FUN_0800416a(*data,0x20);\n      }\n      else if (value == 0x30) {\n        FUN_0800416a(*data,0x30);\n      }\n    }\n    else if (value == 0x70) {\n      FUN_080041a8(*data,values[2],values[1],values[3]);\n      *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xffffff88 | 0x77;\n    }\n    else if (value < 0x71) {\n      if (value == 0x50) {\n        FUN_080040a0(*data,values[1],values[3]);\n        FUN_0800416a(*data,0x50);\n      }\n      else if (value == 0x60) {\n        FUN_08004104(*data,values[1],values[3]);\n        FUN_0800416a(*data,0x60);\n      }\n    }\n    else if (value == 0x1000) {\n      *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xfffffff8;\n    }\n    else if (value == 0x2000) {\n      FUN_080041a8(*data,values[2],values[1],values[3]);\n      *(uint *)(*data + 8) = *(uint *)(*data + 8) | 0x4000;\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "update_status_08003a94",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "value"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_08003c94",
            "code": "\nvoid updateMemory_08003c94(uint *memoryAddress,uint *newValue)\n\n{\n  uint oldValue;\n  \n  oldValue = *memoryAddress;\n  if ((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n      (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) {\n    oldValue = newValue[1] | oldValue & 0xffffff8f;\n  }\n  if (((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n     ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))) {\n    oldValue = newValue[3] | oldValue & 0xfffffcff;\n  }\n  *memoryAddress = newValue[5] | oldValue & 0xffffff7f;\n  memoryAddress[0xb] = newValue[2];\n  memoryAddress[10] = *newValue;\n  if (memoryAddress == (uint *)0x40012c00) {\n    specialValue = newValue[4];\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "param_1": "memoryAddress",
                "param_2": "newValue",
                "local_c": "oldValue",
                "uRam40012c30": "specialValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_registers_08003d60",
            "code": "\nvoid updateRegisters_08003d60(int registerBaseAddress,uint *paramsArray)\n\n{\n  uint firstParam;\n  uint secondParam;\n  uint localVariable;\n  \n  *(uint *)(registerBaseAddress + 0x20) = *(uint *)(registerBaseAddress + 0x20) & 0xfffffffe;\n  localVariable = *(uint *)(registerBaseAddress + 4);\n  firstParam = *paramsArray;\n  secondParam = valueOfArray2 | *(uint *)(registerBaseAddress + 0x20) & 0xfffffffd;\n  if (registerBaseAddress == 0x40012c00) {\n    secondParam = (valueOfArray3 | secondParam & 0xfffffff7) & 0xfffffffb;\n    localVariable = valueOfArray4 | valueOfArray5 | localVariable & 0xfffffcff;\n  }\n  *(uint *)(registerBaseAddress + 4) = localVariable;\n  *(uint *)(registerBaseAddress + 0x18) = firstParam | *(uint *)(registerBaseAddress + 0x18) & 0xffffff8c;\n  *(uint *)(registerBaseAddress + 0x34) = paramsArray[1];\n  *(uint *)(registerBaseAddress + 0x20) = secondParam;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_registers_08003d60",
                "param_1": "registerBaseAddress",
                "param_2": "paramsArray",
                "uVar1": "firstParam",
                "uVar2": "secondParam",
                "local_10": "localVariable",
                "param_2[2]": "valueOfArray2",
                "param_2[3]": "valueOfArray3",
                "param_2[6]": "valueOfArray4",
                "param_2[5]": "valueOfArray5"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_data_08003e38",
            "code": "\nvoid updateData_08003e38(int dataAddress,int *params)\n\n{\n  int paramValue;\n  uint updatedValue;\n  uint tempValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  tempValue = *(uint *)(dataAddress + 4);\n  paramValue = *params;\n  updatedValue = params[2] << 4 | *(uint *)(dataAddress + 0x20) & 0xffffffdf;\n  if (dataAddress == 0x40012c00) {\n    updatedValue = (params[3] << 4 | updatedValue & 0xffffff7f) & 0xffffffbf;\n    tempValue = params[6] << 2 | params[5] << 2 | tempValue & 0xfffff3ff;\n  }\n  *(uint *)(dataAddress + 4) = tempValue;\n  *(uint *)(dataAddress + 0x18) = paramValue << 8 | *(uint *)(dataAddress + 0x18) & 0xffff8cff;\n  *(int *)(dataAddress + 0x38) = params[1];\n  *(uint *)(dataAddress + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "dataAddress",
                "param_2": "params",
                "iVar1": "paramValue",
                "uVar2": "updatedValue",
                "local_10": "tempValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_data_08003f18",
            "code": "\nvoid updateData_08003f18(int address,uint *data)\n\n{\n  uint value;\n  uint modifiedValue;\n  uint oldValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  oldValue = *(uint *)(address + 4);\n  value = *data;\n  modifiedValue = dataValue << 8 | *(uint *)(address + 0x20) & 0xfffffdff;\n  if (address == 0x40012c00) {\n    modifiedValue = (additionalDataValue << 8 | modifiedValue & 0xfffff7ff) & 0xfffffbff;\n    oldValue = extraDataValue << 4 | data[5] << 4 | oldValue & 0xffffcfff;\n  }\n  *(uint *)(address + 4) = oldValue;\n  *(uint *)(address + 0x1c) = value | *(uint *)(address + 0x1c) & 0xffffff8c;\n  *(uint *)(address + 0x3c) = data[1];\n  *(uint *)(address + 0x20) = modifiedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "value",
                "uVar2": "modifiedValue",
                "local_10": "oldValue",
                "param_2[2]": "dataValue",
                "param_2[3]": "additionalDataValue",
                "param_2[6]": "extraDataValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_parameter_08003ff8",
            "code": "\nvoid updateParameter_08003ff8(int baseAddress,int *parameterArray)\n\n{\n  int firstValue;\n  int secondValue;\n  uint localValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  localValue = *(uint *)(baseAddress + 4);\n  firstValue = *parameterArray;\n  secondValue = parameterArray[2];\n  if (baseAddress == 0x40012c00) {\n    localValue = parameterArray[5] << 6 | localValue & 0xffffbfff;\n  }\n  *(uint *)(baseAddress + 4) = localValue;\n  *(uint *)(baseAddress + 0x1c) = firstValue << 8 | *(uint *)(baseAddress + 0x1c) & 0xffff8cff;\n  *(int *)(baseAddress + 0x40) = parameterArray[1];\n  *(uint *)(baseAddress + 0x20) = secondValue << 0xc | *(uint *)(baseAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_parameter_08003ff8",
                "param_1": "baseAddress",
                "param_2": "parameterArray",
                "local_c": "localValue",
                "iVar1": "firstValue",
                "iVar2": "secondValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameters_080040a0",
            "code": "\nvoid updateParameters_080040a0(int ptr_parameter1,uint parameter2,int parameter3)\n\n{\n  uint variable1;\n  \n  variable1 = *(uint *)(ptr_parameter1 + 0x20);\n  *(uint *)(ptr_parameter1 + 0x20) = *(uint *)(ptr_parameter1 + 0x20) & 0xfffffffe;\n  *(uint *)(ptr_parameter1 + 0x18) = parameter3 << 4 | *(uint *)(ptr_parameter1 + 0x18) & 0xffffff0f;\n  *(uint *)(ptr_parameter1 + 0x20) = parameter2 | variable1 & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "ptr_parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "uVar1": "variable1"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_flags_and_values_08004104",
            "code": "\nvoid updateFlagsAndValues_08004104(int inputAddress,int value2,int value3)\n\n{\n  *(uint *)(inputAddress + 0x20) = *(uint *)(inputAddress + 0x20) & 0xffffffef;\n  *(uint *)(inputAddress + 0x18) = value3 << 0xc | *(uint *)(inputAddress + 0x18) & 0xffff0fff;\n  *(uint *)(inputAddress + 0x20) = value2 << 4 | *(uint *)(inputAddress + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "inputAddress",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "set_param_flag_0800416a",
            "code": "\nvoid setParamFlag_0800416a(int dataPointer,ushort flagValue)\n\n{\n  *(uint *)(dataPointer + 8) = *(uint *)(dataPointer + 8) & 0xffffff8f | (uint)(flagValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "set_param_flag_0800416a",
                "param_1": "dataPointer",
                "param_2": "flagValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "set_bitwise_and_or_080041a8",
            "code": "\nvoid setBitwiseAndOr_080041a8(int inputPtr,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(inputPtr + 8) = value1 | value3 << 8 | value2 | *(uint *)(inputPtr + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "set_bitwise_and_or_080041a8",
                "param_1": "inputPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bitwise_value_080041ea",
            "code": "\nvoid updateBitwiseValue_080041ea(int ptr,uint bitIndex,int newValue)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) | newValue << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bitwise_value_080041ea",
                "param_1": "ptr",
                "param_2": "bitIndex",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_configuration_0800422e",
            "code": "\nundefined4 updateConfiguration_0800422e(int *configArray,uint *dataArray)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(configArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(configArray + 0xf) = 1;\n    *(uint *)(*configArray + 0x44) =\n         dataArray[6] |\n         (dataArray[6] |\n         (dataArray[5] |\n         (dataArray[4] |\n         (*dataArray | (dataArray[1] | (dataArray[2] | dataArray[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(configArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_configuration_0800422e",
                "param_1": "configArray",
                "param_2": "dataArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_and_return_080042de",
            "code": "\nundefined4 updateFlagsAndReturn_080042de(int *flagsArray,uint *dataArray)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(flagsArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(flagsArray + 0xf) = 1;\n    *(undefined *)((int)flagsArray + 0x3d) = 2;\n    *(uint *)(*flagsArray + 4) = *(uint *)(*flagsArray + 4) & 0xffffff8f;\n    *(uint *)(*flagsArray + 4) = *dataArray | *(uint *)(*flagsArray + 4);\n    *(uint *)(*flagsArray + 8) = *(uint *)(*flagsArray + 8) & 0xffffff7f;\n    *(uint *)(*flagsArray + 8) = dataArray[1] | *(uint *)(*flagsArray + 8);\n    *(undefined *)((int)flagsArray + 0x3d) = 1;\n    *(undefined *)(flagsArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_and_return_080042de",
                "param_1": "flagsArray",
                "param_2": "dataArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_device_0800438a",
            "code": "\nundefined4 initializeDevice_0800438a(int *devicePtr)\n\n{\n  undefined4 status;\n  \n  if (devicePtr == (int *)0x0) {\n    status = 1;\n  }\n  else {\n    if (*(char *)((int)devicePtr + 0x39) == '\\0') {\n      *(undefined *)(devicePtr + 0xe) = 0;\n      FUNC_08004424(devicePtr);\n    }\n    *(undefined *)((int)devicePtr + 0x39) = 0x24;\n    *(uint *)(*devicePtr + 0xc) = *(uint *)(*devicePtr + 0xc) & 0xffffdfff;\n    FUN_080046ec(devicePtr);\n    *(uint *)(*devicePtr + 0x10) = *(uint *)(*devicePtr + 0x10) & 0xffffb7ff;\n    *(uint *)(*devicePtr + 0x14) = *(uint *)(*devicePtr + 0x14) & 0xffffffd5;\n    *(uint *)(*devicePtr + 0xc) = *(uint *)(*devicePtr + 0xc) | 0x2000;\n    deviceSettings = 0;\n    *(undefined *)((int)devicePtr + 0x39) = 0x20;\n    *(undefined *)((int)devicePtr + 0x3a) = 0x20;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_device_0800438a",
                "param_1": "devicePtr",
                "uVar1": "status",
                "param_1[0xf]": "deviceSettings"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **data,ushort *input,short inputSize,uint maxIterations)\n\n{\n  int result;\n  int tempResult;\n  undefined4 returnValue;\n  ushort *inputPtr;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input == (ushort *)0x0) || (inputSize == 0)) {\n      returnValue = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      result = FUN_080015a0();\n      *(short *)(data + 9) = inputSize;\n      *(short *)((int)data + 0x26) = inputSize;\n      inputPtr = input;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              tempResult = 0;\n              goto LAB_0800454c;\n            }\n          } while ((maxIterations == 0xffffffff) ||\n                  ((maxIterations != 0 && (tempResult = FUN_080015a0(), (uint)(tempResult - result) <= maxIterations))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          tempResult = 3;\nLAB_0800454c:\n          if (tempResult != 0) {\n            return 3;\n          }\n          (*data)[1] = *inputPtr & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            inputPtr = inputPtr + 1;\n          }\n          else {\n            inputPtr = (ushort *)((int)inputPtr + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              tempResult = 0;\n              goto LAB_08004614;\n            }\n          } while ((maxIterations == 0xffffffff) ||\n                  ((maxIterations != 0 && (tempResult = FUN_080015a0(), (uint)(tempResult - result) <= maxIterations))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          tempResult = 3;\nLAB_08004614:\n          if (tempResult != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)inputPtr;\n          inputPtr = (ushort *)((int)inputPtr + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((maxIterations == 0xffffffff) ||\n              ((maxIterations != 0 && (tempResult = FUN_080015a0(), (uint)(tempResult - result) <= maxIterations))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "data",
                "param_2": "input",
                "param_3": "inputSize",
                "param_4": "maxIterations",
                "iVar1": "result",
                "iVar2": "tempResult",
                "uVar3": "returnValue",
                "local_58": "inputPtr"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_checksum_080046ec",
            "code": "\nvoid calculateChecksum_080046ec(int *inputArray)\n\n{\n  ulonglong quotient;\n  int tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  undefined8 randomValue;\n  \n  *(uint *)(*inputArray + 0x10) = value3 | *(uint *)(*inputArray + 0x10) & 0xffffcfff;\n  *(uint *)(*inputArray + 0xc) =\n       *(uint *)(*inputArray + 0xc) & 0xffffe9f3 | value5 | value2 | value4;\n  *(uint *)(*inputArray + 0x14) = value6 | *(uint *)(*inputArray + 0x14) & 0xfffffcff;\n  if (*inputArray == 0x40013800) {\n    randomValue = FUN_08003540();\n    quotient = (ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(value1 << 2);\n    tempVar1 = FUN_08003540((int)randomValue,(int)((ulonglong)randomValue >> 0x20),(int)(quotient * 0x51eb851f));\n    tempVar2 = value1;\n    randomValue = FUN_08003540();\n    tempVar3 = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(value1 << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003540((int)randomValue,(int)((ulonglong)randomValue >> 0x20),tempVar3 * 0x51eb851f);\n    tempVar4 = value1;\n    tempVar2 = FUN_08003540();\n    *(uint *)(*inputArray + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar4 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(value1 << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (tempVar3 / 100 & 0xf0);\n  }\n  else {\n    randomValue = FUN_08003518();\n    quotient = (ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(value1 << 2);\n    tempVar1 = FUN_08003518((int)randomValue,(int)((ulonglong)randomValue >> 0x20),(int)(quotient * 0x51eb851f));\n    tempVar2 = value1;\n    randomValue = FUN_08003518();\n    tempVar3 = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(value1 << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003518((int)randomValue,(int)((ulonglong)randomValue >> 0x20),tempVar3 * 0x51eb851f);\n    tempVar4 = value1;\n    tempVar2 = FUN_08003518();\n    *(uint *)(*inputArray + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar4 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(value1 << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (tempVar3 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "inputArray",
                "uVar1": "quotient",
                "iVar2": "tempVar1",
                "iVar3": "tempVar2",
                "uVar4": "tempVar3",
                "iVar5": "tempVar4",
                "uVar6": "randomValue",
                "param_1[1]": "value1",
                "param_1[2]": "value2",
                "param_1[3]": "value3",
                "param_1[4]": "value4",
                "param_1[5]": "value5",
                "param_1[6]": "value6"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_data_0800491c",
            "code": "\nvoid initializeData_0800491c(undefined4 *dataArray)\n\n{\n  undefined startValue;\n  undefined constantValue;\n  undefined arrayBuffer [5];\n  \n  startValue = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&startValue,1);\n  constantValue = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&constantValue,1);\n  arrayBuffer[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,arrayBuffer,1);\n  *dataArray = 0;\n  dataArray[1] = 0;\n  dataArray[2] = 0;\n  dataArray[3] = 0;\n  dataArray[4] = 0;\n  dataArray[5] = 0;\n  dataArray[6] = 0;\n  dataArray[7] = 0;\n  dataArray[8] = 0;\n  dataArray[9] = 0;\n  dataArray[10] = 0;\n  FUN_080049cc(dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "param_1": "dataArray",
                "local_13": "startValue",
                "local_12": "constantValue",
                "local_11": "arrayBuffer"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_averages_080049cc",
            "code": "\nvoid calculateAverages_080049cc(int array)\n\n{\n  undefined4 uVar1;\n  undefined4 sum2;\n  undefined4 sum1;\n  undefined4 timestamp;\n  int count;\n  int index;\n  undefined4 average2;\n  undefined4 average1;\n  undefined4 average3;\n  undefined4 average4;\n  \n  count = 1;\n  average4 = 0;\n  average3 = 0;\n  average1 = 0;\n  average2 = 0;\n  timestamp = (*DAT_20000a50)();\n  index = 0;\n  while( true ) {\n    if (count <= index) break;\n    sum1 = 0;\n    sum2 = 0;\n    FUN_08004ae0(array);\n    FUN_08004d78(array,&sum1,&sum2);\n    average1 = FUN_08000aa8(average1,sum1);\n    average2 = FUN_08000aa8(average2,sum2);\n    average4 = FUN_08000aa8(average4,*(undefined4 *)(array + 0x10));\n    average3 = FUN_08000aa8(average3,*(undefined4 *)(array + 0x14));\n    timestamp = (*DAT_20000a50)();\n    index = index + 1;\n  }\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(average4,uVar1);\n  *(undefined4 *)(array + 0x1c) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(average3,uVar1);\n  *(undefined4 *)(array + 0x20) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(average1,uVar1);\n  *(undefined4 *)(array + 0x24) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(average2,uVar1);\n  *(undefined4 *)(array + 0x28) = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_averages_080049cc",
                "param_1": "array",
                "local_2c": "sum2",
                "local_28": "sum1",
                "local_24": "timestamp",
                "local_20": "count",
                "local_1c": "index",
                "local_18": "average2",
                "local_14": "average1",
                "local_10": "average3",
                "local_c": "average4"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "decrypt_data_08004ae0",
            "code": "\nvoid decryptData_08004ae0(undefined4 *result)\n\n{\n  undefined4 uVar1;\n  undefined temp1;\n  undefined temp2;\n  undefined temp3;\n  undefined temp4;\n  undefined temp5;\n  undefined temp6;\n  undefined temp7;\n  undefined temp8;\n  undefined temp9;\n  undefined temp10;\n  undefined temp11;\n  undefined temp12;\n  undefined temp13;\n  undefined temp14;\n  short encryptedData1;\n  short encryptedData2;\n  short encryptedData3;\n  short encryptedData4;\n  short encryptedData5;\n  short encryptedData6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&temp1,0xe);\n  encryptedData6 = CONCAT11(temp3,temp4);\n  encryptedData5 = CONCAT11(temp5,temp6);\n  encryptedData4 = CONCAT11(temp7,temp8);\n  encryptedData3 = CONCAT11(temp9,temp10);\n  encryptedData2 = CONCAT11(temp11,temp12);\n  encryptedData1 = CONCAT11(temp13,temp14);\n  uVar1 = FUN_08000c10((int)CONCAT11(temp1,temp2));\n  *result = uVar1;\n  uVar1 = FUN_08000c10((int)encryptedData6);\n  result[1] = uVar1;\n  uVar1 = FUN_08000c10((int)encryptedData5);\n  result[2] = uVar1;\n  uVar1 = FUN_08000c10((int)encryptedData4);\n  result[3] = uVar1;\n  uVar1 = FUN_08000c10((int)encryptedData3);\n  result[4] = uVar1;\n  uVar1 = FUN_08000c10((int)encryptedData2);\n  result[5] = uVar1;\n  uVar1 = FUN_08000c10((int)encryptedData1);\n  result[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "decrypt_data_08004ae0",
                "param_1": "result",
                "local_2c": "temp1",
                "local_2b": "temp2",
                "local_2a": "temp3",
                "local_29": "temp4",
                "local_28": "temp5",
                "local_27": "temp6",
                "local_26": "temp7",
                "local_25": "temp8",
                "local_24": "temp9",
                "local_23": "temp10",
                "local_22": "temp11",
                "local_21": "temp12",
                "local_20": "temp13",
                "local_1f": "temp14",
                "local_1e": "encryptedData1",
                "local_1c": "encryptedData2",
                "local_1a": "encryptedData3",
                "local_18": "encryptedData4",
                "local_16": "encryptedData5",
                "local_14": "encryptedData6"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculateResult_08004bd8(int input,undefined4 *output)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(input + 0x10),*(undefined4 *)(input + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(input + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(input + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(input + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_result_08004d78",
            "code": "\nvoid calculateResult_08004d78(undefined4 *inputValues,undefined4 *outputValue1,undefined4 *outputValue2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 intermediateResult1;\n  undefined8 intermediateResult2;\n  \n  result1 = FUN_08000e20(*inputValues,0x45800000);\n  result2 = FUN_08000e20(inputValues[1],0x45800000);\n  result3 = FUN_08000e20(inputValues[2],0x45800000);\n  intermediateResult1 = FUN_08000418(result2);\n  intermediateResult2 = FUN_08000418(result3);\n  intermediateResult1 = thunk_FUN_08005838((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),(int)intermediateResult2,\n                             (int)((ulonglong)intermediateResult2 >> 0x20));\n  intermediateResult1 = FUN_080004c8((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),0,0x40668000);\n  intermediateResult1 = FUN_0800071c((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),0x54442d18,0x400921fb);\n  result2 = FUN_080009fc((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20));\n  intermediateResult1 = FUN_08000418(result1);\n  intermediateResult2 = FUN_08000418(result3);\n  intermediateResult1 = thunk_FUN_08005838((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),(int)intermediateResult2,\n                             (int)((ulonglong)intermediateResult2 >> 0x20));\n  intermediateResult1 = FUN_080004c8((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),0,0x40668000);\n  intermediateResult1 = FUN_0800071c((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),0x54442d18,0x400921fb);\n  result1 = FUN_080009fc((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20));\n  *outputValue1 = result2;\n  *outputValue2 = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_result_08004d78",
                "param_1": "inputValues",
                "param_2": "outputValue1",
                "param_3": "outputValue2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "intermediateResult1",
                "uVar5": "intermediateResult2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "execute_software_interrupt_08004e6c",
            "code": "\nvoid executeSoftwareInterrupt_08004e6c(void)\n\n{\n  executeInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "execute_software_interrupt_08004e6c",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_data_08004e74",
            "code": "\nundefined4 initializeData_08004e74(undefined4 inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_200009f0 == 0) {\n    returnValue = FUN_08004e6c(1,inputValue,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_data_08004e74",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "initialize_data_08004ea4",
            "code": "\nvoid initializeData_08004ea4(undefined dataPointer1,undefined dataPointer2,undefined4 value1,undefined2 value2)\n\n{\n  FUN_08001ccc(&DAT_20000a88,dataPointer1,dataPointer2,1,value1,value2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "initialize_data_08004ea4",
                "param_1": "dataPointer1",
                "param_2": "dataPointer2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "initialize_data_08004ee8",
            "code": "\nvoid initialize_data_08004ee8(undefined param_to,undefined param_from,undefined4 value_1,undefined2 value_2)\n\n{\n  FUN_08001f6c(&DAT_20000a88,param_to,param_from,1,value_1,value_2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "initialize_data_08004ee8",
                "param_1": "param_to",
                "param_2": "param_from",
                "param_3": "value_1",
                "param_4": "value_2"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "retrieve_data_from_binary_08004f2c",
            "code": "\nundefined4 retrieveDataFromBinary_08004f2c(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015a0();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "retrieve_data_from_binary_08004f2c",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initializeData_08004f3c(undefined4 dataPointer,undefined2 offset)\n\n{\n  FUN_08004436(&DAT_20000adc,dataPointer,offset,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "dataPointer",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_area_08004f60",
            "code": "\nvoid initializeMemoryArea_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_area_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "extract_pitch_information_08004f78",
            "code": "\nvoid extractPitchInformation_08004f78(void)\n\n{\n  undefined4 temp1;\n  int temp2;\n  undefined4 temp3;\n  uint temp4;\n  undefined8 pitchValue;\n  byte pitchInt;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitchValue = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitchValue,(int)((ulonglong)pitchValue >> 0x20));\n  temp1 = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,temp1);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  temp1 = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(temp1,DAT_20000b5c);\n  temp1 = FUN_08000c10(DAT_20000010);\n  temp2 = FUN_08000ff4(temp1,DAT_20000b5c);\n  if (temp2 == 0) {\n    temp1 = FUN_08000c10(DAT_200009f4);\n    temp2 = FUN_08001030(temp1,DAT_20000b5c);\n    if (temp2 != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  temp4 = DAT_20000a08 ^ 0x80000000;\n  temp1 = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(temp4,temp1);\n  temp1 = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  temp1 = FUN_08000aa8(temp1,DAT_20000a58);\n  temp3 = FUN_08000c10(DAT_20000010);\n  temp2 = FUN_08001030(temp1,temp3);\n  if (temp2 == 0) {\n    temp3 = FUN_08000c10(DAT_200009f4);\n    temp2 = FUN_08000ff4(temp1,temp3);\n    if (temp2 == 0) {\n      pitchInt = FUN_08001044(temp1);\n    }\n    else {\n      pitchInt = DAT_200009f4;\n    }\n  }\n  else {\n    pitchInt = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  temp2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,temp2 != 0);\n  temp2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,temp2 == 0);\n  temp2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,temp2 != 0);\n  temp2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,temp2 == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitchInt;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitchInt;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "extract_pitch_information_08004f78",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "pitchValue",
                "local_11": "pitchInt"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_and_loop_08005224",
            "code": "\nvoid initializeAndLoop_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_and_loop_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_system_080052a0",
            "code": "\nvoid initializeSystem_080052a0(void)\n\n{\n  int result;\n  undefined8 timestamp;\n  undefined4 mask;\n  undefined4 count;\n  undefined4 flag;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined4 var_5;\n  undefined4 var_6;\n  undefined4 var_7;\n  undefined4 var_8;\n  undefined4 var_9;\n  \n  var_3 = 1;\n  var_4 = 0x10000;\n  var_5 = 0;\n  var_6 = 1;\n  var_7 = 2;\n  var_8 = 0x10000;\n  var_9 = 0x1c0000;\n  result = FUN_08002d98(&var_3);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  mask = 0xf;\n  count = 2;\n  flag = 0x80;\n  var_1 = 0;\n  var_2 = 0;\n  result = FUN_08003260(&mask,2);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  timestamp = FUN_08003504();\n  FUN_08001762((uint)timestamp / 1000,(int)((ulonglong)timestamp >> 0x20),(uint)timestamp * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_system_080052a0",
                "iVar1": "result",
                "uVar2": "timestamp",
                "local_44": "mask",
                "local_40": "count",
                "local_3c": "flag",
                "local_38": "var_1",
                "local_34": "var_2",
                "local_30": "var_3",
                "local_2c": "var_4",
                "local_28": "var_5",
                "local_20": "var_6",
                "local_14": "var_7",
                "local_10": "var_8",
                "local_c": "var_9"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int iVar1;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  iVar1 = FUN_08001ab0(&DAT_20000a88);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_program_080053b0",
            "code": "\nvoid initializeProgram_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 memoryLocation;\n  undefined4 size;\n  undefined4 offset;\n  undefined4 count;\n  undefined4 value;\n  undefined4 buffer;\n  undefined4 start;\n  undefined4 length;\n  undefined4 index;\n  undefined4 value;\n  undefined4 value;\n  undefined4 value;\n  undefined4 value;\n  undefined4 value;\n  undefined4 value;\n  undefined4 value;\n  undefined4 array [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  array[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b1c,array);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = FUN_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  value = 0;\n  value = 0;\n  iVar1 = FUN_080042de(&DAT_20000b1c,&value);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  length = 0x60;\n  index = 0;\n  value = 0;\n  value = 0;\n  value = 0;\n  value = 0;\n  value = 0;\n  iVar1 = FUN_08003908(&DAT_20000b1c,&length,0);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = FUN_08003908(&DAT_20000b1c,&length,0xc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  memoryLocation = 0;\n  size = 0;\n  offset = 0;\n  count = 0;\n  value = 0;\n  buffer = 0x2000;\n  start = 0;\n  iVar1 = FUN_0800422e(&DAT_20000b1c,&memoryLocation);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "local_58": "memoryLocation",
                "local_54": "size",
                "local_50": "offset",
                "local_4c": "count",
                "local_48": "value",
                "local_44": "buffer",
                "local_40": "start",
                "local_3c": "length",
                "local_38": "index",
                "local_34": "value",
                "local_30": "value",
                "local_2c": "value",
                "local_28": "value",
                "local_24": "value",
                "local_20": "value",
                "local_1c": "value",
                "local_18": "array"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_data_08005500",
            "code": "\nvoid initializeData_08005500(void)\n\n{\n  int returnValue;\n  undefined4 bufferSize;\n  undefined4 index;\n  undefined4 array [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  returnValue = FUN_080035a4(&DAT_20000b60);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  array[0] = 0x1000;\n  returnValue = FUN_08003a94(&DAT_20000b60,array);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  index = 0;\n  returnValue = FUN_080042de(&DAT_20000b60,&bufferSize);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_data_08005500",
                "local_20": "bufferSize",
                "local_1c": "index",
                "local_18": "array",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_08005598",
            "code": "\nvoid initializeData_08005598(void)\n\n{\n  int iVar1;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  iVar1 = FUN_0800438a(&DAT_20000adc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_08005598"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_hardware_080055f4",
            "code": "\n\n\nvoid initializeHardware_080055f4(void)\n\n{\n  undefined4 bufferSize;\n  undefined4 flag;\n  undefined4 count;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  bufferSize = 0x1e;\n  flag = 1;\n  count = 2;\n  FUN_080017c4(0x40010800,&bufferSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_hardware_080055f4",
                "local_18": "bufferSize",
                "local_14": "flag",
                "local_c": "count"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_data_08005680",
            "code": "\nvoid initializeData_08005680(int *param_1)\n\n{\n  undefined4 size;\n  undefined4 count1;\n  undefined4 count2;\n  \n  if (*param_1 == 0x40012c00) {\n    size = 0x900;\n    count1 = 2;\n    count2 = 2;\n    FUN_080017c4(0x40010800,&size);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_data_08005680",
                "local_18": "size",
                "local_14": "count1",
                "local_c": "count2"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_application_08005704",
            "code": "\nvoid initialize_application_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_application_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_structure_08005714",
            "code": "\nvoid initialize_data_structure_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_structure_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *ptr_to_error_flag;\n  undefined *allocated_memory;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *memory_start;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  memory_start = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    ptr_to_error_flag = (undefined4 *)FUN_08005d14();\n    *ptr_to_error_flag = 0xc;\n    allocated_memory = (undefined *)0xffffffff;\n  }\n  else {\n    allocated_memory = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "ptr_to_error_flag",
                "puVar2": "allocated_memory",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "memory_start"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_peripheral_08005780",
            "code": "\n\n\nvoid initializePeripheral_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_peripheral_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint shifted_input_4;\n  uint absolute_input_4;\n  uint absolute_input_2;\n  undefined8 final_result;\n  \n  absolute_input_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (absolute_input_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (absolute_input_2 = input_2 & 0x7fffffff, 0x7ff00000 < (absolute_input_2 | (-input_1 | input_1) >> 0x1f))) {\n    absolute_input_4 = FUN_0800015c(input_3,input_4,input_1,input_2);\n    return absolute_input_4;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    absolute_input_4 = FUN_080059f0();\n    return absolute_input_4;\n  }\n  shifted_input_4 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((absolute_input_2 | input_1) == 0) {\n    if (shifted_input_4 == 2) {\n      return 0x54442d18;\n    }\n    if (shifted_input_4 != 3) {\n      return input_1;\n    }\n  }\n  else if ((absolute_input_4 | input_3) != 0) {\n    if (absolute_input_4 == 0x7ff00000) {\n      if (absolute_input_2 == 0x7ff00000) {\n        if (shifted_input_4 == 2) {\n          return 0x7f3321d2;\n        }\n        if (shifted_input_4 == 3) {\n          return 0x7f3321d2;\n        }\n        if (shifted_input_4 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (shifted_input_4 == 2) {\n        return 0x54442d18;\n      }\n      if (shifted_input_4 != 3) {\n        if (shifted_input_4 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (absolute_input_2 != 0x7ff00000) {\n      difference = (int)(absolute_input_2 - absolute_input_4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          final_result = 0;\n        }\n        else {\n          FUN_0800071c(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          final_result = FUN_080059f0();\n        }\n      }\n      else {\n        final_result = 0x3ff921fb54442d18;\n      }\n      result_high = (undefined4)((ulonglong)final_result >> 0x20);\n      absolute_input_4 = (uint)final_result;\n      if (shifted_input_4 == 1) {\n        return absolute_input_4;\n      }\n      if (shifted_input_4 == 2) {\n        final_result = FUN_08000158(absolute_input_4,result_high,0x33145c07,0x3ca1a626);\n        absolute_input_4 = FUN_08000158(0x54442d18,0x400921fb,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n        return absolute_input_4;\n      }\n      if (shifted_input_4 != 0) {\n        final_result = FUN_08000158(absolute_input_4,result_high,0x33145c07,0x3ca1a626);\n        absolute_input_4 = FUN_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),0x54442d18,0x400921fb);\n        return absolute_input_4;\n      }\n      return absolute_input_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "result_high",
                "uVar3": "shifted_input_4",
                "uVar4": "absolute_input_4",
                "uVar5": "absolute_input_2",
                "uVar6": "final_result"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_float_value_08005838",
            "code": "\nuint calculateFloatValue_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint trimmedInput4;\n  uint trimmedInput2;\n  undefined8 result;\n  \n  trimmedInput4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (trimmedInput4 | (-input3 | input3) >> 0x1f)) ||\n     (trimmedInput2 = input2 & 0x7fffffff, 0x7ff00000 < (trimmedInput2 | (-input1 | input1) >> 0x1f))) {\n    trimmedInput4 = FUN_0800015c(input3,input4,input1,input2);\n    return trimmedInput4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    trimmedInput4 = FUN_080059f0();\n    return trimmedInput4;\n  }\n  tempVar3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((trimmedInput2 | input1) == 0) {\n    if (tempVar3 == 2) {\n      return 0x54442d18;\n    }\n    if (tempVar3 != 3) {\n      return input1;\n    }\n  }\n  else if ((trimmedInput4 | input3) != 0) {\n    if (trimmedInput4 == 0x7ff00000) {\n      if (trimmedInput2 == 0x7ff00000) {\n        if (tempVar3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (tempVar3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (tempVar3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (tempVar3 == 2) {\n        return 0x54442d18;\n      }\n      if (tempVar3 != 3) {\n        if (tempVar3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (trimmedInput2 != 0x7ff00000) {\n      tempVar1 = (int)(trimmedInput2 - trimmedInput4) >> 0x14;\n      if (tempVar1 < 0x3d) {\n        if (((int)input4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n          result = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = FUN_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      tempVar2 = (undefined4)((ulonglong)result >> 0x20);\n      trimmedInput4 = (uint)result;\n      if (tempVar3 == 1) {\n        return trimmedInput4;\n      }\n      if (tempVar3 == 2) {\n        result = FUN_08000158(trimmedInput4,tempVar2,0x33145c07,0x3ca1a626);\n        trimmedInput4 = FUN_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return trimmedInput4;\n      }\n      if (tempVar3 != 0) {\n        result = FUN_08000158(trimmedInput4,tempVar2,0x33145c07,0x3ca1a626);\n        trimmedInput4 = FUN_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return trimmedInput4;\n      }\n      return trimmedInput4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_float_value_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "trimmedInput4",
                "uVar5": "trimmedInput2",
                "uVar6": "result"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculate_result_080059f0(int number1,uint number2,undefined4 constant1,undefined4 constant2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint modifiedNumber2;\n  int index;\n  undefined8 tempResult;\n  undefined8 finalResult;\n  \n  finalResult = CONCAT44(number2,number1);\n  modifiedNumber2 = number2 & 0x7fffffff;\n  if (modifiedNumber2 < 0x44100000) {\n    if (modifiedNumber2 < 0x3fdc0000) {\n      if (modifiedNumber2 < 0x3e200000) {\n        tempResult = FUN_0800015c(number1,number2,0x8800759c,0x7e37e43c,constant2);\n        index = FUN_080009e8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        if (index != 0) {\n          return CONCAT44(number2,number1);\n        }\n      }\n      index = -1;\n    }\n    else {\n      finalResult = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)finalResult >> 0x20);\n      result1 = (undefined4)finalResult;\n      if (modifiedNumber2 < 0x3ff30000) {\n        if (modifiedNumber2 < 0x3fe60000) {\n          finalResult = FUN_0800015c(result1,result4,result1,result4);\n          finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x3ff00000);\n          tempResult = FUN_0800015c(result1,result4,0,0x40000000);\n          finalResult = FUN_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                                (int)((ulonglong)tempResult >> 0x20));\n          index = 0;\n        }\n        else {\n          finalResult = FUN_08000158(result1,result4,0,0x3ff00000);\n          tempResult = FUN_0800015c(result1,result4,0,0x3ff00000);\n          finalResult = FUN_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                                (int)((ulonglong)tempResult >> 0x20));\n          index = 1;\n        }\n      }\n      else if (modifiedNumber2 < 0x40038000) {\n        finalResult = FUN_08000158(result1,result4,0,0x3ff80000);\n        tempResult = FUN_080004c8(result1,result4,0,0x3ff80000);\n        tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        finalResult = FUN_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                              (int)((ulonglong)tempResult >> 0x20));\n        index = 2;\n      }\n      else {\n        finalResult = FUN_0800071c(0,0xbff00000,result1,result4);\n        index = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result5 = (undefined4)finalResult;\n    finalResult = FUN_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result1 = (undefined4)finalResult;\n    finalResult = FUN_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result4 = (undefined4)finalResult;\n    finalResult = FUN_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x24760deb,0x3fa97b4b);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xc54c206e,0x3fb745cd);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x920083ff,0x3fc24924);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x5555550d,0x3fd55555);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result1,result2);\n    tempResult = FUN_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x52defd9a,0x3fadde2d);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xfe231671,0x3fbc71c6);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9998ebc4,0x3fc99999);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                          (int)((ulonglong)tempResult >> 0x20));\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)finalResult >> 0x20);\n    if (index == -1) {\n      finalResult = FUN_08000158(result5,result6,(int)finalResult,result1);\n      return finalResult;\n    }\n    index = index * 8;\n    finalResult = FUN_08000158((int)finalResult,result1,*(undefined4 *)(&UNK_08009ee8 + index),\n                          *(undefined4 *)(&UNK_08009eec + index));\n    finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result5,result6);\n    finalResult = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + index),\n                          *(undefined4 *)(&UNK_08009ecc + index),(int)finalResult,\n                          (int)((ulonglong)finalResult >> 0x20));\n    if ((int)number2 < 0) {\n      return CONCAT44((int)((ulonglong)finalResult >> 0x20) + -0x80000000,(int)finalResult);\n    }\n  }\n  else {\n    if ((modifiedNumber2 < 0x7ff00001) && ((modifiedNumber2 != 0x7ff00000 || (number1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)number2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    finalResult = FUN_0800015c(number1,number2,number1,number2,constant2);\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "modifiedNumber2",
                "iVar8": "index",
                "uVar9": "tempResult",
                "uVar10": "finalResult"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_data_offset_08005d14",
            "code": "\nundefined4 get_data_offset_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_data_offset_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_function_set_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctionSet_08005d20(void)\n\n{\n  int counter;\n  code **functionPtr;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPtr = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPtr)();\n    functionPtr = functionPtr + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_function_set_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPtr"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "set_memory_08005d68",
            "code": "\nvoid setMemory_08005d68(undefined4 *dst,undefined value,uint size)\n\n{\n  undefined4 *dstPtr;\n  undefined4 *nextDstPtr;\n  uint remainingSize;\n  undefined4 valueConcat;\n  bool isSizeZero;\n  \n  if (((uint)dst & 3) != 0) {\n    remainingSize = size - 1;\n    dstPtr = dst;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dst = (undefined4 *)((int)dstPtr + 1);\n      *(undefined *)dstPtr = value;\n      size = remainingSize;\n      if (((uint)dst & 3) == 0) break;\n      isSizeZero = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      dstPtr = dst;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    valueConcat = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    dstPtr = dst;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      dstPtr = dst + 4;\n      do {\n        dstPtr[-4] = valueConcat;\n        dstPtr[-3] = valueConcat;\n        dstPtr[-2] = valueConcat;\n        dstPtr[-1] = valueConcat;\n        dstPtr = dstPtr + 4;\n      } while (dstPtr != (undefined4 *)((int)dst + (remainingSize & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dst = dst + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      dstPtr = dst;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *dst = valueConcat;\n      dst = dst + 1;\n    } while (3 < size);\n    dst = (undefined4 *)((int)dstPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    dstPtr = dst;\n    do {\n      nextDstPtr = (undefined4 *)((int)dstPtr + 1);\n      *(undefined *)dstPtr = value;\n      dstPtr = nextDstPtr;\n    } while ((undefined4 *)(size + (int)dst) != nextDstPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "set_memory_08005d68",
                "param_1": "dst",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dstPtr",
                "puVar2": "nextDstPtr",
                "uVar3": "remainingSize",
                "uVar4": "valueConcat",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "clear_memory_08005dfc",
            "code": "\nvoid clearMemory_08005dfc(undefined *dataPointer,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  undefined *tempBuffer [2];\n  undefined4 maxValue;\n  undefined4 constantValue;\n  undefined *currentPointer;\n  undefined4 maxSize;\n  undefined4 param3;\n  undefined4 param4;\n  \n  maxSize = 0x7fffffff;\n  maxValue = 0x7fffffff;\n  constantValue = 0xffff0208;\n  tempBuffer[0] = dataPointer;\n  currentPointer = dataPointer;\n  param3 = value1;\n  param4 = value2;\n  FUNC_08005e9c(DAT_2000001c,tempBuffer,size,&param3);\n  *tempBuffer[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "clear_memory_08005dfc",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "local_80": "tempBuffer",
                "local_78": "maxValue",
                "uStack_74": "constantValue",
                "local_70": "currentPointer",
                "local_6c": "maxSize",
                "uStack_8": "param3",
                "uStack_4": "param4"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "count_leading_zeroes_08005e40",
            "code": "\nint countLeadingZeroes_08005e40(uint inputValue)\n\n{\n  int bitOffset;\n  uint *pointer;\n  uint mask;\n  \n  pointer = (uint *)(inputValue & 0xfffffffc);\n  bitOffset = -(inputValue & 3);\n  mask = *pointer;\n  if ((inputValue & 3) != 0) {\n    mask = mask | 0xffffffffU >> ((bitOffset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    pointer = pointer + 1;\n    mask = mask + 0xfefefeff & ~mask & 0x80808080;\n    if (mask != 0) break;\n    mask = *pointer;\n    bitOffset = bitOffset + 4;\n  }\n  return bitOffset + (0x1fU - LZCOUNT(mask & -mask) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "count_leading_zeroes_08005e40",
                "param_1": "inputValue",
                "iVar1": "bitOffset",
                "puVar2": "pointer",
                "uVar3": "mask"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "perform_division_080078c0",
            "code": "\nuint performDivision_080078c0(int numerator,int denominator)\n\n{\n  uint quotient;\n  uint *numeratorPtr;\n  int carry;\n  int numeratorSize;\n  int denominatorSize;\n  uint result;\n  uint *denominatorPtr;\n  uint *numeratorModifiedPtr;\n  uint *lastElement;\n  uint temp;\n  uint *denominatorModifiedPtr;\n  uint *nextElement;\n  \n  numeratorSize = *(int *)(denominator + 0x10);\n  if (*(int *)(numerator + 0x10) < numeratorSize) {\n    return 0;\n  }\n  denominatorSize = numeratorSize + -1;\n  denominatorPtr = (uint *)(denominator + 0x14);\n  numeratorModifiedPtr = (uint *)(numerator + 0x14);\n  result = numeratorModifiedPtr[denominatorSize] / (denominatorPtr[denominatorSize] + 1);\n  lastElement = denominatorPtr + denominatorSize;\n  if (result != 0) {\n    quotient = 0;\n    carry = 0;\n    numeratorPtr = numeratorModifiedPtr;\n    denominatorModifiedPtr = denominatorPtr;\n    do {\n      nextElement = denominatorModifiedPtr + 1;\n      quotient = result * (*denominatorModifiedPtr & 0xffff) + quotient;\n      temp = result * (*denominatorModifiedPtr >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*numeratorPtr & 0xffff);\n      carry = ((*numeratorPtr >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *numeratorPtr = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      numeratorPtr = numeratorPtr + 1;\n      denominatorModifiedPtr = nextElement;\n    } while (nextElement <= lastElement);\n    if (numeratorModifiedPtr[denominatorSize] == 0) {\n      if ((numeratorModifiedPtr < numeratorModifiedPtr + numeratorSize + -2) && (numeratorModifiedPtr[numeratorSize + -2] == 0)) {\n        numeratorPtr = numeratorModifiedPtr + numeratorSize + -3;\n        do {\n          denominatorSize = denominatorSize + -1;\n          if (numeratorPtr <= numeratorModifiedPtr) break;\n          quotient = *numeratorPtr;\n          numeratorPtr = numeratorPtr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = denominatorSize;\n    }\n  }\n  numeratorSize = FUN_080094f8();\n  if (-1 < numeratorSize) {\n    numeratorSize = 0;\n    result = result + 1;\n    numeratorPtr = numeratorModifiedPtr;\n    do {\n      denominatorModifiedPtr = denominatorPtr + 1;\n      quotient = (numeratorSize - (*denominatorPtr & 0xffff)) + (*numeratorPtr & 0xffff);\n      numeratorSize = ((*numeratorPtr >> 0x10) - (*denominatorPtr >> 0x10)) + ((int)quotient >> 0x10);\n      *numeratorPtr = quotient & 0xffff | numeratorSize * 0x10000;\n      numeratorSize = numeratorSize >> 0x10;\n      numeratorPtr = numeratorPtr + 1;\n      denominatorPtr = denominatorModifiedPtr;\n    } while (denominatorModifiedPtr <= lastElement);\n    if (numeratorModifiedPtr[denominatorSize] == 0) {\n      if ((numeratorModifiedPtr < numeratorModifiedPtr + denominatorSize + -1) && (numeratorModifiedPtr[denominatorSize + -1] == 0)) {\n        denominatorPtr = numeratorModifiedPtr + denominatorSize + -2;\n        do {\n          denominatorSize = denominatorSize + -1;\n          if (denominatorPtr <= numeratorModifiedPtr) break;\n          quotient = *denominatorPtr;\n          denominatorPtr = denominatorPtr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = denominatorSize;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "perform_division_080078c0",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "quotient",
                "puVar2": "numeratorPtr",
                "iVar3": "carry",
                "iVar4": "numeratorSize",
                "iVar5": "denominatorSize",
                "uVar6": "result",
                "puVar7": "denominatorPtr",
                "puVar8": "numeratorModifiedPtr",
                "puVar9": "lastElement",
                "uVar10": "temp",
                "puVar11": "denominatorModifiedPtr",
                "puVar12": "nextElement"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "parse_float_to_string_080079e8",
            "code": "\nchar * parseFloatToString_080079e8(int value,undefined4 flags,uint significand,uint exponent,uint minIntegerDigits,\n                   uint minFractionDigits,int *numDigits,uint *isNegative,char **outputString)\n\n{\n  bool isInfinity;\n  bool useExponentialNotation;\n  bool addLeadingZero;\n  char digit;\n  byte mulBy10;\n  undefined4 decimalValue;\n  int trailingZeroIndex;\n  int zeroLength;\n  int exponentBias;\n  char *pcVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  int minSignificantDigits;\n  int maxSignificantDigits;\n  undefined4 uVar16;\n  uint uVar17;\n  uint uVar18;\n  int leadingZeros;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 uVar23;\n  int leadingZeroIndex;\n  bool useExponentialNotation5;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  uint integerString;\n  uint exponentString;\n  uint outputLength;\n  int integerLength;\n  uint exponentLength;\n  int trailingZeros;\n  int leadingZeros;\n  uint fractionDigits;\n  uint currentDigit;\n  uint previousDigit;\n  uint maxFractionDigits;\n  uint expNeutralMinFixedDigits;\n  int numLeadingDigits;\n  int bufferIndices [2];\n  \n  minSignificantDigits = *(int *)(value + 0x40);\n  if (minSignificantDigits != 0) {\n    uVar18 = *(uint *)(value + 0x44);\n    *(uint *)(minSignificantDigits + 4) = uVar18;\n    *(int *)(minSignificantDigits + 8) = 1 << (uVar18 & 0xff);\n    FUN_0800910c(value,minSignificantDigits);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  useExponentialNotation5 = (int)exponent < 0;\n  uVar18 = exponent;\n  if (useExponentialNotation5) {\n    uVar18 = exponent & 0x7fffffff;\n  }\n  *isNegative = (uint)useExponentialNotation5;\n  exponentString = exponent;\n  if (useExponentialNotation5) {\n    exponentString = uVar18;\n  }\n  uVar17 = exponentString;\n  if ((~uVar18 & 0x7ff00000) == 0) {\n    *numDigits = 9999;\n    if ((significand == 0) && ((uVar18 & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (outputString == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (outputString == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *outputString = pcVar21;\n    return pcVar10;\n  }\n  uVar26 = FUN_08000998(significand,exponentString,0,0);\n  if ((int)uVar26 != 0) {\n    *numDigits = 1;\n    if (outputString != (char **)0x0) {\n      *outputString = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  decimalValue = FUN_08009630(value,(int)((ulonglong)uVar26 >> 0x20),significand,exponentString,bufferIndices,&numLeadingDigits)\n  ;\n  minSignificantDigits = numLeadingDigits;\n  if (uVar18 >> 0x14 == 0) {\n    leadingZeros = bufferIndices[0] + numLeadingDigits;\n    maxSignificantDigits = leadingZeros + 0x432;\n    if (maxSignificantDigits < 0x21) {\n      uVar18 = significand << (0x20U - maxSignificantDigits & 0xff);\n    }\n    else {\n      uVar18 = significand >> (leadingZeros + 0x412U & 0xff) | uVar18 << (0x40U - maxSignificantDigits & 0xff);\n    }\n    uVar26 = FUN_080003d4(uVar18);\n    leadingZeros = leadingZeros + -1;\n    useExponentialNotation5 = true;\n    uVar11 = (int)((ulonglong)uVar26 >> 0x20) + 0xfe100000;\n    uVar18 = (uint)uVar26;\n  }\n  else {\n    leadingZeros = (uVar18 >> 0x14) - 0x3ff;\n    uVar11 = exponentString & 0xfffff | 0x3ff00000;\n    useExponentialNotation5 = false;\n    uVar18 = significand;\n  }\n  uVar26 = FUN_08000158(uVar18,uVar11,0,0x3ff80000);\n  uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x636f4361,0x3fd287a7);\n  uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  uVar27 = FUN_080003f4(leadingZeros);\n  uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0x509f79fb,0x3fd34413);\n  uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar27,\n                        (int)((ulonglong)uVar27 >> 0x20));\n  uVar13 = (undefined4)((ulonglong)uVar26 >> 0x20);\n  outputLength = FUN_0800119c();\n  maxSignificantDigits = FUN_080009ac((int)uVar26,uVar13,0,0);\n  if (maxSignificantDigits != 0) {\n    uVar27 = FUN_080003f4(outputLength);\n    maxSignificantDigits = FUN_08000998((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar13);\n    if (maxSignificantDigits == 0) {\n      outputLength = outputLength - 1;\n    }\n  }\n  if (outputLength < 0x17) {\n    maxSignificantDigits = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + outputLength * 8),\n                          *(undefined4 *)(&DAT_08009fac + outputLength * 8),significand,exponentString);\n    if (maxSignificantDigits == 0) {\n      useExponentialNotation = false;\n    }\n    else {\n      outputLength = outputLength - 1;\n      useExponentialNotation = false;\n    }\n  }\n  else {\n    useExponentialNotation = true;\n  }\n  maxSignificantDigits = (minSignificantDigits - leadingZeros) + -1;\n  if (maxSignificantDigits < 0) {\n    integerLength = 1 - (minSignificantDigits - leadingZeros);\n    maxSignificantDigits = 0;\n  }\n  else {\n    integerLength = 0;\n  }\n  if ((int)outputLength < 0) {\n    fractionDigits = 0;\n    integerLength = integerLength - outputLength;\n    leadingZeros = -outputLength;\n  }\n  else {\n    maxSignificantDigits = maxSignificantDigits + outputLength;\n    fractionDigits = outputLength;\n    leadingZeros = 0;\n  }\n  if (9 < minIntegerDigits) {\n    maxFractionDigits = 0xffffffff;\n    isInfinity = true;\n    exponentLength = 0xffffffff;\n    addLeadingZero = true;\n    minIntegerDigits = 0;\n    minFractionDigits = 0;\n    goto LAB_08007c24;\n  }\n  isInfinity = (int)minIntegerDigits < 6;\n  if (!isInfinity) {\n    minIntegerDigits = minIntegerDigits - 4;\n  }\n  switch(minIntegerDigits) {\n  case 2:\n    addLeadingZero = false;\n    break;\n  case 3:\n    addLeadingZero = false;\n    goto LAB_08008300;\n  case 4:\n    addLeadingZero = true;\n    break;\n  case 5:\n    addLeadingZero = true;\nLAB_08008300:\n    maxFractionDigits = outputLength + minFractionDigits;\n    exponentLength = maxFractionDigits + 1;\n    uVar18 = exponentLength;\n    if ((int)exponentLength < 1) {\n      uVar18 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    pcVar10 = (char *)FUN_080090c0(value,0);\n    maxFractionDigits = 0xffffffff;\n    exponentLength = 0xffffffff;\n    minFractionDigits = 0;\n    *(char **)(value + 0x40) = pcVar10;\n    addLeadingZero = true;\n    goto LAB_08007e36;\n  }\n  if ((int)minFractionDigits < 1) {\n    maxFractionDigits = 1;\n    minFractionDigits = 1;\n    exponentLength = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    uVar11 = maxFractionDigits;\n  }\n  else {\n    maxFractionDigits = minFractionDigits;\n    exponentLength = minFractionDigits;\n    uVar18 = minFractionDigits;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    uVar11 = exponentLength;\n    if (0x17 < (int)uVar18) {\n      leadingZeros = 4;\n      minSignificantDigits = 1;\n      do {\n        trailingZeroIndex = minSignificantDigits;\n        leadingZeros = leadingZeros * 2;\n        minSignificantDigits = trailingZeroIndex + 1;\n      } while (leadingZeros + 0x14U <= uVar18);\n      *(int *)(value + 0x44) = trailingZeroIndex;\n    }\n  }\n  pcVar10 = (char *)FUN_080090c0(value);\n  *(char **)(value + 0x40) = pcVar10;\n  if ((uVar11 < 0xf) && (isInfinity)) {\n    if ((int)outputLength < 1) {\n      if (outputLength == 0) {\n        minSignificantDigits = 2;\n        integerString = significand;\n      }\n      else {\n        minSignificantDigits = (-outputLength & 0xf) * 8;\n        uVar26 = FUN_080004c8(significand,exponentString,*(undefined4 *)(&DAT_08009fa8 + minSignificantDigits),\n                              *(undefined4 *)(&DAT_08009fac + minSignificantDigits));\n        exponentString = (uint)((ulonglong)uVar26 >> 0x20);\n        integerString = (uint)uVar26;\n        leadingZeros = (int)-outputLength >> 4;\n        if (leadingZeros == 0) {\n          minSignificantDigits = 2;\n        }\n        else {\n          isInfinity = false;\n          minSignificantDigits = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (leadingZeros << 0x1f < 0) {\n              uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]\n                                   );\n              isInfinity = true;\n              minSignificantDigits = minSignificantDigits + 1;\n            }\n            leadingZeros = leadingZeros >> 1;\n            puVar22 = puVar22 + 2;\n          } while (leadingZeros != 0);\n          if (isInfinity) {\n            integerString = (uint)uVar26;\n            exponentString = (uint)((ulonglong)uVar26 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar18 = (int)outputLength >> 4;\n      uVar27 = *(undefined8 *)(&DAT_08009fa8 + (outputLength & 0xf) * 8);\n      uVar26 = *(undefined8 *)(&DAT_08009fa8 + (outputLength & 0xf) * 8);\n      if ((int)(uVar18 << 0x1b) < 0) {\n        uVar28 = FUN_0800071c(significand,exponentString,0x7f73bf3c,0x75154fdd);\n        previousDigit = (uint)((ulonglong)uVar28 >> 0x20);\n        currentDigit = (uint)uVar28;\n        minSignificantDigits = 3;\n        uVar18 = uVar18 & 0xf;\n      }\n      else {\n        minSignificantDigits = 2;\n        previousDigit = exponentString;\n        currentDigit = significand;\n      }\n      if (uVar18 != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(uVar18 << 0x1f) < 0) {\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]);\n            minSignificantDigits = minSignificantDigits + 1;\n          }\n          uVar18 = (int)uVar18 >> 1;\n          puVar22 = puVar22 + 2;\n          uVar27 = uVar26;\n        } while (uVar18 != 0);\n      }\n      exponentString = (uint)((ulonglong)uVar27 >> 0x20);\n      integerString = (uint)uVar27;\n      uVar26 = FUN_0800071c(currentDigit,previousDigit,integerString,exponentString);\n      integerString = (uint)uVar26;\n      exponentString = (uint)((ulonglong)uVar26 >> 0x20);\n    }\n    uVar26 = CONCAT44(exponentString,integerString);\n    if ((useExponentialNotation) && (leadingZeros = FUN_080009ac(integerString,exponentString,0,0x3ff00000), leadingZeros != 0)) {\n      if (exponentLength == 0) {\n        uVar26 = FUN_080003f4(minSignificantDigits);\n        uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),integerString,exponentString);\n        uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar26;\n        minSignificantDigits = (int)((ulonglong)uVar26 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)maxFractionDigits) {\n        uVar26 = FUN_080004c8(integerString,exponentString,0,0x40240000);\n        uVar27 = FUN_080003f4(minSignificantDigits + 1);\n        uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                              (int)((ulonglong)uVar26 >> 0x20));\n        uVar27 = FUN_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar27;\n        currentDigit = maxFractionDigits;\n        expNeutralMinFixedDigits = outputLength - 1;\n        minSignificantDigits = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar27 = FUN_080003f4(minSignificantDigits);\n    uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),integerString,exponentString);\n    uVar27 = FUN_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n    uVar13 = (undefined4)uVar27;\n    minSignificantDigits = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n    if (exponentLength != 0) {\n      expNeutralMinFixedDigits = outputLength;\n      currentDigit = exponentLength;\nLAB_08007cfa:\n      exponentString = (uint)((ulonglong)uVar26 >> 0x20);\n      integerString = (uint)uVar26;\n      digit = FUN_0800119c(integerString,exponentString);\n      digit = digit + '0';\n      uVar16 = (&DAT_08009fa0)[currentDigit * 2];\n      uVar12 = (&DAT_08009fa4)[currentDigit * 2];\n      uVar26 = FUN_080003f4();\n      uVar26 = FUN_08000158(integerString,exponentString,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n      uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (addLeadingZero) {\n        uVar27 = FUN_0800071c(0,0x3fe00000,uVar16,uVar12);\n        uVar27 = FUN_08000158((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,minSignificantDigits);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = digit;\n        minSignificantDigits = FUN_080009e8((int)uVar27,uVar13,(int)uVar26,uVar23);\n        if (minSignificantDigits != 0) {\nLAB_08008784:\n          outputLength = expNeutralMinFixedDigits;\n          goto LAB_08008294;\n        }\n        uVar28 = FUN_08000158(0,0x3ff00000,(int)uVar26,uVar23);\n        minSignificantDigits = FUN_080009e8((int)uVar27,uVar13,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n        if (minSignificantDigits == 0) {\n          if (currentDigit != 1) {\n            pcVar20 = pcVar21;\n            do {\n              uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x40240000);\n              uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n              uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n              digit = FUN_0800119c();\n              uVar28 = FUN_080003f4();\n              uVar26 = FUN_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                    (int)((ulonglong)uVar28 >> 0x20));\n              uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              digit = digit + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = digit;\n              minSignificantDigits = FUN_080009ac((int)uVar26,uVar16,(int)uVar27,uVar13);\n              if (minSignificantDigits != 0) {\n                outputLength = expNeutralMinFixedDigits;\n                goto LAB_08008294;\n              }\n              uVar28 = FUN_08000158(0,0x3ff00000,(int)uVar26,uVar16);\n              minSignificantDigits = FUN_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar27,uVar13)\n              ;\n              if (minSignificantDigits != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + currentDigit);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        outputLength = expNeutralMinFixedDigits;\n      }\n      else {\n        uVar27 = FUN_080004c8(uVar13,minSignificantDigits,uVar16,uVar12);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = digit;\n        if (currentDigit != 1) {\n          pcVar20 = pcVar21;\n          do {\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            digit = FUN_0800119c();\n            uVar28 = FUN_080003f4();\n            uVar26 = FUN_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                  (int)((ulonglong)uVar28 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = digit + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + currentDigit);\n        }\n        uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        uVar28 = FUN_0800015c((int)uVar27,uVar13,0,0x3fe00000);\n        minSignificantDigits = FUN_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar26,uVar16);\n        if (minSignificantDigits == 0) {\n          uVar27 = FUN_08000158(0,0x3fe00000,(int)uVar27,uVar13);\n          minSignificantDigits = FUN_080009e8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar16);\n          pcVar20 = pcVar21;\n          if (minSignificantDigits == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        outputLength = expNeutralMinFixedDigits;\n        digit = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar26 = FUN_08000158(integerString,exponentString,0,0x40140000);\n    uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    leadingZeros = FUN_080009e8((int)uVar26,uVar16,uVar13,minSignificantDigits);\n    if (leadingZeros == 0) {\n      minSignificantDigits = FUN_080009ac((int)uVar26,uVar16,uVar13,minSignificantDigits + -0x80000000);\n      if (minSignificantDigits == 0) goto LAB_08007e36;\n      leadingZeros = 0;\n      minSignificantDigits = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    maxSignificantDigits = 0;\n    trailingZeroIndex = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    outputLength = outputLength + 1;\n    pcVar21 = pcVar10 + 1;\n    leadingZeros = trailingZeroIndex;\n    minSignificantDigits = maxSignificantDigits;\nLAB_08008416:\n    FUN_0800910c(value,minSignificantDigits);\n    if (leadingZeros == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < bufferIndices[0]) && ((int)outputLength < 0xf)) {\n      uVar13 = *(undefined4 *)(&DAT_08009fa8 + outputLength * 8);\n      uVar16 = *(undefined4 *)(&DAT_08009fac + outputLength * 8);\n      if ((-1 < (int)minFractionDigits) || (0 < (int)exponentLength)) {\n        FUN_0800071c(significand,uVar17,uVar13,uVar16);\n        mulBy10 = FUN_0800119c();\n        uVar26 = FUN_080003f4();\n        uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar13,uVar16);\n        uVar26 = FUN_08000158(significand,uVar17,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        *pcVar10 = mulBy10 + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (exponentLength != 1) {\n          uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n          minSignificantDigits = FUN_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          while (minSignificantDigits == 0) {\n            uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            FUN_0800071c((int)uVar26,uVar23,uVar13,uVar16);\n            mulBy10 = FUN_0800119c();\n            uVar27 = FUN_080003f4();\n            uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,uVar16);\n            uVar26 = FUN_08000158((int)uVar26,uVar23,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = mulBy10 + 0x30;\n            pcVar21 = pcVar20;\n            if (exponentLength == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            minSignificantDigits = FUN_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        minSignificantDigits = FUN_080009e8((int)uVar26,uVar23,uVar13,uVar16);\n        if ((minSignificantDigits == 0) &&\n           ((minSignificantDigits = FUN_08000998((int)uVar26,uVar23,uVar13,uVar16), minSignificantDigits == 0 ||\n            ((mulBy10 & 1) == 0)))) goto LAB_08008294;\n        digit = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, digit == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            digit = pcVar21[-1];\n            outputLength = outputLength + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          digit = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (exponentLength == 0) {\n        uVar26 = FUN_080004c8(uVar13,uVar16,0,0x40140000);\n        exponentBias = FUN_080009d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),significand,uVar17);\n        leadingZeros = 0;\n        maxSignificantDigits = 0;\n        trailingZeroIndex = 0;\n        minSignificantDigits = 0;\n        if (exponentBias == 0) goto LAB_08008406;\n      }\n      else {\n        leadingZeros = 0;\n        minSignificantDigits = 0;\n      }\nLAB_080084f0:\n      outputLength = ~minFractionDigits;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    minSignificantDigits = leadingZeros;\n    if (addLeadingZero) {\n      if ((int)minIntegerDigits < 2) {\n        if (useExponentialNotation5) {\n          trailingZeros = integerLength;\n          integerLength = integerLength + bufferIndices[0] + 0x433;\n          maxSignificantDigits = maxSignificantDigits + bufferIndices[0] + 0x433;\n        }\n        else {\n          trailingZeros = integerLength;\n          integerLength = integerLength + (0x36 - numLeadingDigits);\n          maxSignificantDigits = maxSignificantDigits + (0x36 - numLeadingDigits);\n        }\n      }\n      else {\n        leadingZeros = exponentLength - 1;\n        if (leadingZeros < leadingZeros) {\n          fractionDigits = fractionDigits + (leadingZeros - leadingZeros);\n          minSignificantDigits = 0;\n          leadingZeros = leadingZeros;\n        }\n        else {\n          minSignificantDigits = leadingZeros - leadingZeros;\n        }\n        if ((int)exponentLength < 0) {\n          trailingZeros = integerLength - exponentLength;\n        }\n        else {\n          maxSignificantDigits = maxSignificantDigits + exponentLength;\n          trailingZeros = integerLength;\n          integerLength = integerLength + exponentLength;\n        }\n      }\n      leadingZeros = FUN_08009244(value,1);\n    }\n    else {\n      trailingZeros = integerLength;\n      leadingZeros = 0;\n    }\n    if ((0 < trailingZeros) && (0 < maxSignificantDigits)) {\n      trailingZeroIndex = trailingZeros;\n      if (maxSignificantDigits <= trailingZeros) {\n        trailingZeroIndex = maxSignificantDigits;\n      }\n      maxSignificantDigits = maxSignificantDigits - trailingZeroIndex;\n      integerLength = integerLength - trailingZeroIndex;\n      trailingZeros = trailingZeros - trailingZeroIndex;\n    }\n    if (leadingZeros != 0) {\n      if (addLeadingZero) {\n        uVar13 = decimalValue;\n        if (minSignificantDigits != 0) {\n          leadingZeros = FUN_080093a4(value,leadingZeros,minSignificantDigits);\n          uVar13 = FUN_08009258(value,leadingZeros,decimalValue);\n          FUN_0800910c(value,decimalValue);\n          decimalValue = uVar13;\n          if (leadingZeros - minSignificantDigits == 0) goto LAB_08008062;\n        }\n        decimalValue = FUN_080093a4(value,uVar13,leadingZeros - minSignificantDigits);\n      }\n      else {\n        decimalValue = FUN_080093a4(value,decimalValue,leadingZeros);\n      }\n    }\nLAB_08008062:\n    minSignificantDigits = FUN_08009244(value,1);\n    if (fractionDigits == 0) {\n      if (((int)minIntegerDigits < 2) && (significand == 0)) {\nLAB_0800835a:\n        if ((uVar17 & 0xfffff) == 0) {\n          uVar17 = uVar17 & 0x7ff00000;\n          if (uVar17 != 0) {\n            maxSignificantDigits = maxSignificantDigits + 1;\n            integerLength = integerLength + 1;\n            uVar17 = 1;\n          }\n        }\n        else {\n          uVar17 = 0;\n        }\n        useExponentialNotation5 = fractionDigits != 0;\n        uVar18 = significand;\n        fractionDigits = uVar17;\n        if (useExponentialNotation5) goto LAB_080082d4;\n      }\n      trailingZeroIndex = 1;\n    }\n    else {\n      uVar26 = FUN_080093a4(value,minSignificantDigits);\n      minSignificantDigits = (int)uVar26;\n      if (((int)minIntegerDigits < 2) && (significand == 0)) goto LAB_0800835a;\n      fractionDigits = 0;\n      uVar18 = (uint)((ulonglong)uVar26 >> 0x20);\nLAB_080082d4:\n      trailingZeroIndex = FUN_080091a4(*(undefined4 *)(minSignificantDigits + *(int *)(minSignificantDigits + 0x10) * 4 + 0x10),uVar18);\n      trailingZeroIndex = 0x20 - trailingZeroIndex;\n    }\n    uVar18 = trailingZeroIndex + maxSignificantDigits & 0x1f;\n    if (uVar18 == 0) {\n      trailingZeroIndex = 0x1c;\nLAB_08008096:\n      maxSignificantDigits = maxSignificantDigits + trailingZeroIndex;\n      integerLength = integerLength + trailingZeroIndex;\n      trailingZeros = trailingZeros + trailingZeroIndex;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar18)) {\n        trailingZeroIndex = 0x1c - uVar18;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar18 != 4) {\n        trailingZeroIndex = 0x3c - uVar18;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < integerLength) {\n      decimalValue = FUN_08009444(value,decimalValue,integerLength);\n    }\n    if (0 < maxSignificantDigits) {\n      minSignificantDigits = FUN_08009444(value,minSignificantDigits,maxSignificantDigits);\n    }\n    pcVar20 = pcVar10;\n    if ((useExponentialNotation) && (maxSignificantDigits = FUN_080094f8(decimalValue,minSignificantDigits), maxSignificantDigits < 0)) {\n      outputLength = outputLength - 1;\n      decimalValue = FUN_08009120(value,decimalValue,10,0);\n      if (addLeadingZero) {\n        leadingZeros = FUN_08009120(value,leadingZeros,10,0);\n        if ((0 < (int)maxFractionDigits) || ((int)minIntegerDigits < 3)) {\n          exponentLength = maxFractionDigits;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)maxFractionDigits) || ((int)minIntegerDigits < 3)) {\n        exponentLength = maxFractionDigits;\n        goto LAB_0800820a;\n      }\n      exponentLength = maxFractionDigits;\nLAB_080084e8:\n      if (exponentLength == 0) {\n        maxSignificantDigits = FUN_08009120(value,minSignificantDigits,5);\n        exponentBias = FUN_080094f8(decimalValue,maxSignificantDigits);\n        trailingZeroIndex = leadingZeros;\n        minSignificantDigits = maxSignificantDigits;\n        if (0 < exponentBias) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)exponentLength < 1) && (2 < (int)minIntegerDigits)) goto LAB_080084e8;\n    if (addLeadingZero) {\nLAB_080080de:\n      integerString = leadingZeros;\n      if (0 < trailingZeros) {\n        integerString = FUN_08009444(value,leadingZeros,trailingZeros);\n      }\n      leadingZeros = integerString;\n      if (fractionDigits != 0) {\n        leadingZeros = FUN_080090c0(value,*(undefined4 *)(integerString + 4));\n        FUN_08001084(leadingZeros + 0xc,integerString + 0xc,(*(int *)(integerString + 0x10) + 2) * 4);\n        leadingZeros = FUN_08009444(value,leadingZeros,1);\n      }\nLAB_08008108:\n      maxSignificantDigits = FUN_080078c0(decimalValue,minSignificantDigits);\n      trailingZeroIndex = FUN_080094f8(decimalValue,integerString);\n      exponentBias = FUN_08009530(value,minSignificantDigits,leadingZeros);\n      leadingZeroIndex = maxSignificantDigits + 0x30;\n      if (*(int *)(exponentBias + 0xc) == 0) {\n        zeroLength = FUN_080094f8(decimalValue);\n        FUN_0800910c(value,exponentBias);\n        if ((zeroLength != 0) || (minIntegerDigits != 0)) goto LAB_0800815a;\n        if ((significand & 1) != 0) {\n          zeroLength = 0;\n          goto LAB_0800815a;\n        }\n        if (leadingZeroIndex != 0x39) {\n          if (0 < trailingZeroIndex) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        digit = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(value,exponentBias);\n      zeroLength = 1;\nLAB_0800815a:\n      if ((trailingZeroIndex < 0) || (((trailingZeroIndex == 0 && (minIntegerDigits == 0)) && ((significand & 1) == 0)))) {\n        if (0 < zeroLength) {\n          decimalValue = FUN_08009444(value,decimalValue,1);\n          trailingZeroIndex = FUN_080094f8(decimalValue,minSignificantDigits);\n          if ((0 < trailingZeroIndex) || ((trailingZeroIndex == 0 && (maxSignificantDigits << 0x1f < 0)))) {\n            if (leadingZeroIndex == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            leadingZeroIndex = maxSignificantDigits + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)leadingZeroIndex;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < zeroLength) {\n        if (leadingZeroIndex == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)maxSignificantDigits + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)leadingZeroIndex;\n      if (pcVar10 + (exponentLength - 1) != pcVar20) {\n        decimalValue = FUN_08009120(value,decimalValue,10,0);\n        pcVar20 = pcVar21;\n        if (integerString == leadingZeros) {\n          integerString = FUN_08009120(value,integerString,10,0);\n          leadingZeros = integerString;\n        }\n        else {\n          integerString = FUN_08009120(value,integerString,10,0);\n          leadingZeros = FUN_08009120(value,leadingZeros,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        leadingZeroIndex = FUN_080078c0(decimalValue,minSignificantDigits);\n        leadingZeroIndex = leadingZeroIndex + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)leadingZeroIndex;\n        if ((int)exponentLength <= (int)pcVar21 - (int)pcVar10) break;\n        decimalValue = FUN_08009120(value,decimalValue,10,0);\n        pcVar20 = pcVar21;\n      }\n      integerString = 0;\n    }\n    decimalValue = FUN_08009444(value,decimalValue,1);\n    maxSignificantDigits = FUN_080094f8(decimalValue,minSignificantDigits);\n    digit = pcVar21[-1];\n    if ((0 < maxSignificantDigits) || ((maxSignificantDigits == 0 && (leadingZeroIndex << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          outputLength = outputLength + 1;\n          goto LAB_08008274;\n        }\n        digit = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(value,minSignificantDigits);\n    if (leadingZeros == 0) goto LAB_08008294;\n    if ((integerString != 0) && (integerString != leadingZeros)) {\n      FUN_0800910c(value);\n    }\n  }\n  FUN_0800910c(value,leadingZeros);\nLAB_08008294:\n  FUN_0800910c(value,decimalValue);\n  *pcVar21 = '\\0';\n  *numDigits = outputLength + 1;\n  if (outputString == (char **)0x0) {\n    return pcVar10;\n  }\n  *outputString = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "parse_float_to_string_080079e8",
                "param_1": "value",
                "param_2": "flags",
                "param_3": "significand",
                "param_4": "exponent",
                "param_5": "minIntegerDigits",
                "param_6": "minFractionDigits",
                "param_7": "numDigits",
                "param_8": "isNegative",
                "param_9": "outputString",
                "bVar1": "isInfinity",
                "bVar2": "useExponentialNotation",
                "bVar3": "addLeadingZero",
                "cVar4": "digit",
                "bVar5": "mulBy10",
                "uVar6": "decimalValue",
                "iVar7": "trailingZeroIndex",
                "iVar8": "zeroLength",
                "iVar9": "exponentBias",
                "iVar14": "minSignificantDigits",
                "iVar15": "maxSignificantDigits",
                "iVar19": "leadingZeros",
                "iVar24": "leadingZeroIndex",
                "local_80": "integerString",
                "local_7c": "exponentString",
                "local_74": "outputLength",
                "local_70": "integerLength",
                "local_68": "exponentLength",
                "local_60": "trailingZeros",
                "local_5c": "leadingZeros",
                "local_58": "fractionDigits",
                "local_48": "currentDigit",
                "uStack_44": "previousDigit",
                "local_38": "maxFractionDigits",
                "local_34": "expNeutralMinFixedDigits",
                "local_30": "numLeadingDigits",
                "local_2c": "bufferIndices"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "allocate_memory_block_0800884c",
            "code": "\nundefined4 allocate_memory_block_0800884c(undefined4 memory_block_ptr,int size_to_allocate)\n\n{\n  int result;\n  int adjusted_address;\n  uint initial_size;\n  \n  FUN_080090a8();\n  initial_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_address = ((0xfef - size_to_allocate) + initial_size & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_address) {\n    result = FUN_08009744(memory_block_ptr,0);\n    if (result == DAT_20000454 + initial_size) {\n      result = FUN_08009744(memory_block_ptr,-adjusted_address);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_address;\n        *(uint *)(DAT_20000454 + 4) = initial_size - adjusted_address | 1;\n        FUN_080090b4(memory_block_ptr);\n        return 1;\n      }\n      adjusted_address = FUN_08009744(memory_block_ptr,0);\n      if (0xf < adjusted_address - DAT_20000454) {\n        DAT_20000a14 = adjusted_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(memory_block_ptr);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "param_1": "memory_block_ptr",
                "param_2": "size_to_allocate",
                "iVar1": "result",
                "iVar2": "adjusted_address",
                "uVar3": "initial_size"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "decompress_memory_block_080088ec",
            "code": "\nvoid decompressMemoryBlock_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *currentPtr;\n  uint *nextPtr;\n  undefined *tempPtr;\n  uint size;\n  uint blockSize;\n  undefined *ptr;\n  undefined *prevPtr;\n  undefined4 *nextBlock;\n  int numBlocks;\n  uint flag;\n  uint offset;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  flag = *(uint *)(param2 + -4);\n  currentPtr = (uint *)(param2 + -8);\n  size = flag & 0xfffffffe;\n  nextPtr = (uint *)((int)currentPtr + size);\n  blockSize = nextPtr[1] & 0xfffffffc;\n  if (DAT_20000454 == nextPtr) {\n    size = size + blockSize;\n    if ((flag & 1) == 0) {\n      currentPtr = (uint *)((int)currentPtr - *(int *)(param2 + -8));\n      blockSize = currentPtr[2];\n      flag = currentPtr[3];\n      size = size + *(int *)(param2 + -8);\n      *(uint *)(blockSize + 0xc) = flag;\n      *(uint *)(flag + 8) = blockSize;\n    }\n    blockSize = DAT_20000858;\n    currentPtr[1] = size | 1;\n    DAT_20000454 = currentPtr;\n    if (blockSize <= size) {\n      FUN_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(param1);\n    return;\n  }\n  nextPtr[1] = blockSize;\n  if ((flag & 1) == 0) {\n    currentPtr = (uint *)((int)currentPtr - *(int *)(param2 + -8));\n    nextBlock = (undefined4 *)currentPtr[2];\n    size = size + *(int *)(param2 + -8);\n    flag = *(uint *)((int)nextPtr + blockSize + 4) & 1;\n    if ((uint **)nextBlock == &DAT_20000454) {\n      if (flag == 0) {\n        flag = nextPtr[2];\n        offset = nextPtr[3];\n        size = size + blockSize;\n        *(uint *)(flag + 0xc) = offset;\n        *(uint *)(offset + 8) = flag;\n        currentPtr[1] = size | 1;\n        *(uint *)((int)currentPtr + size) = size;\n      }\n      else {\n        currentPtr[1] = size | 1;\n        *nextPtr = size;\n      }\n      goto LAB_080089f0;\n    }\n    offset = currentPtr[3];\n    nextBlock[3] = offset;\n    *(undefined4 **)(offset + 8) = nextBlock;\n  }\n  else {\n    flag = *(uint *)((int)nextPtr + blockSize + 4) & 1;\n  }\n  if (flag == 0) {\n    nextBlock = (undefined4 *)nextPtr[2];\n    size = size + blockSize;\n    if ((uint **)nextBlock == &DAT_20000454) {\n      DAT_2000045c = currentPtr;\n      DAT_20000460 = currentPtr;\n      currentPtr[2] = (uint)&DAT_20000454;\n      currentPtr[3] = (uint)&DAT_20000454;\n      currentPtr[1] = size | 1;\n      *(uint *)((int)currentPtr + size) = size;\n      goto LAB_080089f0;\n    }\n    blockSize = nextPtr[3];\n    nextBlock[3] = blockSize;\n    *(undefined4 **)(blockSize + 8) = nextBlock;\n    currentPtr[1] = size | 1;\n    *(uint *)((int)currentPtr + size) = size;\n  }\n  else {\n    currentPtr[1] = size | 1;\n    *(uint *)((int)currentPtr + size) = size;\n  }\n  if (size < 0x200) {\n    numBlocks = (size >> 3) + 1;\n    size = 1 << ((int)(size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    blockSize = *(uint *)(&DAT_2000044c + numBlocks * 8);\n    currentPtr[2] = blockSize;\n    currentPtr[3] = (uint)(&DAT_20000444 + numBlocks * 8);\n    DAT_20000450 = (undefined *)size;\n    *(uint **)(&DAT_2000044c + numBlocks * 8) = currentPtr;\n    *(uint **)(blockSize + 0xc) = currentPtr;\n    FUN_080090b4(param1,currentPtr,size,param4);\n    return;\n  }\n  blockSize = size >> 9;\n  if (blockSize < 5) {\n    numBlocks = ((size >> 6) + 0x39) * 8;\n    index = (size >> 6) + 0x38;\n  }\n  else if (blockSize < 0x15) {\n    numBlocks = (blockSize + 0x5c) * 8;\n    index = blockSize + 0x5b;\n  }\n  else if (blockSize < 0x55) {\n    numBlocks = ((size >> 0xc) + 0x6f) * 8;\n    index = (size >> 0xc) + 0x6e;\n  }\n  else if (blockSize < 0x155) {\n    numBlocks = ((size >> 0xf) + 0x78) * 8;\n    index = (size >> 0xf) + 0x77;\n  }\n  else if (blockSize < 0x555) {\n    numBlocks = ((size >> 0x12) + 0x7d) * 8;\n    index = (size >> 0x12) + 0x7c;\n  }\n  else {\n    numBlocks = 0x3f8;\n    index = 0x7e;\n  }\n  tempPtr = *(undefined **)(&DAT_2000044c + numBlocks);\n  ptr = &DAT_20000444 + numBlocks;\n  if (ptr == tempPtr) {\n    tempPtr = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    prevPtr = ptr;\n    DAT_20000450 = tempPtr;\n  }\n  else {\n    do {\n      prevPtr = tempPtr;\n      if ((*(uint *)(tempPtr + 4) & 0xfffffffc) <= size) break;\n      tempPtr = *(undefined **)(tempPtr + 8);\n      prevPtr = ptr;\n    } while (ptr != tempPtr);\n    ptr = *(undefined **)(prevPtr + 0xc);\n  }\n  currentPtr[2] = (uint)prevPtr;\n  currentPtr[3] = (uint)ptr;\n  *(uint **)(ptr + 8) = currentPtr;\n  *(uint **)(prevPtr + 0xc) = currentPtr;\n  FUN_080090b4(param1,currentPtr,tempPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "decompress_memory_block_080088ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "puVar2": "currentPtr",
                "puVar3": "nextPtr",
                "puVar4": "tempPtr",
                "uVar5": "size",
                "uVar6": "blockSize",
                "puVar7": "ptr",
                "puVar8": "prevPtr",
                "puVar9": "nextBlock",
                "iVar10": "numBlocks",
                "uVar11": "flag",
                "uVar12": "offset"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_updated_value_08008ad4",
            "code": "\nint get_updated_value_08008ad4(void)\n\n{\n  int value;\n  \n  value = *(int *)(DAT_2000001c + 0x34);\n  if (value == 0) {\n    value = 0x2000085c;\n  }\n  return value + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_updated_value_08008ad4",
                "iVar1": "value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *output_address,uint size)\n\n{\n  undefined *ptr1;\n  uint value1;\n  uint value2;\n  int index1;\n  undefined *ptr2;\n  uint index2;\n  uint index3;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  undefined4 *temp_ptr1;\n  undefined4 *temp_ptr2;\n  \n  temp1 = size + 0xb;\n  if (temp1 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    temp2 = 0x10;\n    index1 = 0x18;\n    temp1 = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index1);\n    if ((ptr5 != &DAT_20000444 + index1) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index1), &DAT_2000044c + index1 != ptr5)) {\n      index1 = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      temp1 = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      temp3 = *(int *)(ptr5 + 8);\n      *(int *)(temp3 + 0xc) = index1;\n      *(int *)(index1 + 8) = temp3;\n      *(uint *)(ptr2 + 4) = temp1 | 1;\n      FUN_080090b4(output_address);\n      return (int *)(ptr5 + 8);\n    }\n    temp1 = temp1 + 2;\n  }\n  else {\n    temp2 = temp1 & 0xfffffff8;\n    if (((int)temp2 < 0) || (temp2 < size)) {\nLAB_08008c7a:\n      *output_address = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (temp2 < 0x1f8) {\n      temp1 = temp1 >> 3;\n      index1 = temp2 + 8;\n      goto LAB_08008b18;\n    }\n    value1 = temp1 >> 9;\n    if (value1 == 0) {\n      index1 = 0x200;\n      index2 = 0x40;\n      value1 = 0x3f;\n    }\n    else if (value1 < 5) {\n      index2 = (temp1 >> 6) + 0x39;\n      value1 = (temp1 >> 6) + 0x38;\n      index1 = index2 * 8;\n    }\n    else if (value1 < 0x15) {\n      index2 = value1 + 0x5c;\n      value1 = value1 + 0x5b;\n      index1 = index2 * 8;\n    }\n    else if (value1 < 0x55) {\n      index2 = (temp1 >> 0xc) + 0x6f;\n      value1 = (temp1 >> 0xc) + 0x6e;\n      index1 = index2 * 8;\n    }\n    else if (value1 < 0x155) {\n      index2 = (temp1 >> 0xf) + 0x78;\n      value1 = (temp1 >> 0xf) + 0x77;\n      index1 = index2 * 8;\n    }\n    else if (value1 < 0x555) {\n      index2 = (temp1 >> 0x12) + 0x7d;\n      value1 = (temp1 >> 0x12) + 0x7c;\n      index1 = index2 * 8;\n    }\n    else {\n      index1 = 0x3f8;\n      index2 = 0x7f;\n      value1 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index1); temp1 = index2,\n        &DAT_20000444 + index1 != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      temp3 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - temp2;\n      temp1 = value1;\n      if (0xf < temp3) break;\n      if (-1 < temp3) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        temp1 = *(uint *)(ptr2 + 4);\n        index1 = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  temp_ptr1 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    index2 = 1 << ((int)temp1 >> 2 & 0xffU);\n    value1 = DAT_20000450;\n    if (index2 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    index2 = DAT_2000045c[1];\n    index3 = index2 & 0xfffffffc;\n    value1 = index3 - temp2;\n    if (0xf < (int)value1) {\n      temp_ptr2 = (undefined4 *)(temp2 + (int)DAT_2000045c);\n      DAT_2000045c[1] = temp2 | 1;\n      DAT_2000045c = temp_ptr2;\n      DAT_20000460 = temp_ptr2;\n      temp_ptr2[2] = &DAT_20000454;\n      temp_ptr2[3] = &DAT_20000454;\n      temp_ptr2[1] = value1 | 1;\n      *(uint *)((int)temp_ptr1 + index3) = value1;\n      FUN_080090b4(output_address);\n      return temp_ptr1 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)value1) {\n      *(uint *)((int)temp_ptr1 + index3 + 4) = *(uint *)((int)temp_ptr1 + index3 + 4) | 1;\n      FUN_080090b4(output_address);\n      return temp_ptr1 + 2;\n    }\n    if (index3 < 0x200) {\n      index1 = (index2 >> 3) + 1;\n      temp3 = *(int *)(&DAT_2000044c + index1 * 8);\n      value1 = 1 << ((int)(index2 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      temp_ptr1[2] = temp3;\n      temp_ptr1[3] = &DAT_20000444 + index1 * 8;\n      DAT_20000450 = value1;\n      *(undefined4 **)(&DAT_2000044c + index1 * 8) = temp_ptr1;\n      *(undefined4 **)(temp3 + 0xc) = temp_ptr1;\n    }\n    else {\n      value1 = index2 >> 9;\n      if (value1 < 5) {\n        index1 = ((index2 >> 6) + 0x39) * 8;\n        temp3 = (index2 >> 6) + 0x38;\n      }\n      else if (value1 < 0x15) {\n        index1 = (value1 + 0x5c) * 8;\n        temp3 = value1 + 0x5b;\n      }\n      else if (value1 < 0x55) {\n        index1 = ((index2 >> 0xc) + 0x6f) * 8;\n        temp3 = (index2 >> 0xc) + 0x6e;\n      }\n      else if (value1 < 0x155) {\n        index1 = ((index2 >> 0xf) + 0x78) * 8;\n        temp3 = (index2 >> 0xf) + 0x77;\n      }\n      else if (value1 < 0x555) {\n        index1 = ((index2 >> 0x12) + 0x7d) * 8;\n        temp3 = (index2 >> 0x12) + 0x7c;\n      }\n      else {\n        index1 = 0x3f8;\n        temp3 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index1);\n      ptr2 = &DAT_20000444 + index1;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (temp3 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= index3) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      value1 = DAT_20000450;\n      temp_ptr1[2] = ptr5;\n      temp_ptr1[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = temp_ptr1;\n      *(undefined4 **)(ptr5 + 0xc) = temp_ptr1;\n    }\n    index2 = 1 << ((int)temp1 >> 2 & 0xffU);\n    if (index2 <= value1) {\nLAB_08008c06:\n      if ((index2 & value1) == 0) {\n        temp1 = temp1 & 0xfffffffc;\n        do {\n          index2 = index2 << 1;\n          temp1 = temp1 + 4;\n        } while ((index2 & value1) == 0);\n      }\n      do {\n        temp_ptr2 = (undefined4 *)(&DAT_2000044c + temp1 * 8);\n        value1 = temp1;\n        temp_ptr1 = temp_ptr2;\n        do {\n          for (ptr3 = (undefined4 *)temp_ptr1[3]; temp_ptr1 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            index3 = ptr3[1] & 0xfffffffc;\n            value2 = index3 - temp2;\n            if (0xf < (int)value2) {\n              temp3 = ptr3[2];\n              index1 = ptr3[3];\n              temp_ptr1 = (undefined4 *)(temp2 + (int)ptr3);\n              ptr3[1] = temp2 | 1;\n              *(int *)(temp3 + 0xc) = index1;\n              *(int *)(index1 + 8) = temp3;\n              DAT_2000045c = temp_ptr1;\n              DAT_20000460 = temp_ptr1;\n              temp_ptr1[2] = &DAT_20000454;\n              temp_ptr1[3] = &DAT_20000454;\n              temp_ptr1[1] = value2 | 1;\n              *(uint *)((int)ptr3 + index3) = value2;\n              FUN_080090b4(output_address);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)value2) {\n              index1 = ptr3[3];\n              temp3 = ptr3[2];\n              *(uint *)((int)ptr3 + index3 + 4) = *(uint *)((int)ptr3 + index3 + 4) | 1;\n              *(int *)(temp3 + 0xc) = index1;\n              *(int *)(index1 + 8) = temp3;\n              FUN_080090b4(output_address);\n              return ptr3 + 2;\n            }\n          }\n          value1 = value1 + 1;\n          temp_ptr1 = temp_ptr1 + 2;\n        } while ((value1 & 3) != 0);\n        do {\n          index3 = temp1 & 3;\n          temp_ptr1 = temp_ptr2 + -2;\n          temp1 = temp1 - 1;\n          if (index3 == 0) {\n            DAT_20000450 = DAT_20000450 & ~index2;\n            break;\n          }\n          temp_ptr2 = (undefined4 *)*temp_ptr2;\n        } while (temp_ptr2 == temp_ptr1);\n        index2 = index2 * 2;\n        if ((DAT_20000450 <= index2 && index2 - DAT_20000450 != 0) || (temp1 = value1, index2 == 0))\n        break;\n        for (; (index2 & DAT_20000450) == 0; index2 = index2 << 1) {\n          temp1 = temp1 + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  temp1 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((temp2 <= temp1) && (value1 = temp1 - temp2, 0xf < (int)value1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    value1 = temp2 + DAT_20000a44 + 0x10;\n  }\n  else {\n    value1 = temp2 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)FUN_08009744(output_address,value1);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    temp1 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + temp1;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + value1;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = temp1 + value1 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + value1;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      index2 = (uint)ptr2 & 7;\n      if (index2 == 0) {\n        index1 = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - index2);\n        index1 = 0x1008 - index2;\n      }\n      index1 = index1 - ((uint)(ptr2 + value1) & 0xfff);\n      temp3 = FUN_08009744(output_address,index1);\n      if (temp3 == -1) {\n        value1 = 1;\n        index1 = 0;\n      }\n      else {\n        value1 = (temp3 - (int)ptr2) + index1 | 1;\n      }\n      ptr4 = DAT_20000a14 + index1;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = value1;\n      if (ptr5 != &DAT_2000044c) {\n        if (temp1 < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        temp1 = temp1 - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | temp1;\n        *(undefined4 *)(ptr5 + temp1 + 4) = 5;\n        *(undefined4 *)(ptr5 + temp1 + 8) = 5;\n        if (0xf < temp1) {\n          FUN_080088ec(output_address,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    temp1 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  value1 = (temp1 & 0xfffffffc) - temp2;\n  if ((temp2 <= (temp1 & 0xfffffffc)) && (0xf < (int)value1)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + temp2;\n    *(uint *)(DAT_20000454 + 4) = temp2 | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = value1 | 1;\n    FUN_080090b4(output_address);\n    return result;\n  }\nLAB_08008eee:\n  FUN_080090b4(output_address);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_1": "output_address",
                "param_2": "size",
                "puVar1": "ptr1",
                "uVar2": "value1",
                "uVar3": "value2",
                "iVar4": "index1",
                "puVar5": "ptr2",
                "uVar6": "index2",
                "uVar7": "index3",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "piVar11": "result",
                "uVar12": "temp1",
                "uVar13": "temp2",
                "iVar14": "temp3",
                "puVar15": "temp_ptr1",
                "puVar16": "temp_ptr2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_first_byte_occurrence_0800901c",
            "code": "\nuint * find_first_byte_occurrence_0800901c(uint *byte_array,uint byte_to_find,uint length)\n\n{\n  uint xor_result;\n  uint concatenated_bytes;\n  uint *current_byte;\n  uint masked_value;\n  bool is_zero;\n  \n  masked_value = byte_to_find & 0xff;\n  if (((uint)byte_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < length) {\n      concatenated_bytes = (byte_to_find & 0xff) << 8 | masked_value;\n      current_byte = byte_array;\n      do {\n        xor_result = *current_byte ^ (concatenated_bytes | concatenated_bytes << 0x10);\n        byte_array = current_byte + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto LAB_08009050;\n        length = length - 4;\n        current_byte = byte_array;\n      } while (3 < length);\n    }\n    current_byte = byte_array;\n    if (length == 0) {\n      byte_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      byte_array = current_byte;\n      if (*(byte *)byte_array != masked_value) {\n        current_byte = (uint *)(length + (int)byte_array);\n        do {\n          byte_array = (uint *)((int)byte_array + 1);\n          if (current_byte == byte_array) goto LAB_0800906c;\n        } while (*(byte *)byte_array != masked_value);\n      }\n    }\n  }\n  else {\n    concatenated_bytes = length - 1;\n    if (length == 0) {\nLAB_0800906c:\n      byte_array = (uint *)0x0;\n    }\n    else if (*(byte *)byte_array != masked_value) {\n      current_byte = (uint *)((int)byte_array + 1);\n      do {\n        byte_array = current_byte;\n        length = concatenated_bytes;\n        if (((uint)byte_array & 3) == 0) goto LAB_0800904a;\n        is_zero = concatenated_bytes == 0;\n        concatenated_bytes = concatenated_bytes - 1;\n        if (is_zero) goto LAB_0800906c;\n        current_byte = (uint *)((int)byte_array + 1);\n      } while (*(byte *)byte_array != masked_value);\n    }\n  }\n  return byte_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_first_byte_occurrence_0800901c",
                "param_1": "byte_array",
                "param_2": "byte_to_find",
                "param_3": "length",
                "uVar1": "xor_result",
                "uVar2": "concatenated_bytes",
                "puVar3": "current_byte",
                "uVar4": "masked_value",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_structure_080090a8",
            "code": "\nvoid initialize_data_structure_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_structure_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "get_or_create_value_080090c0",
            "code": "\nundefined4 * getOrCreateValue_080090c0(int instance,uint index)\n\n{\n  undefined4 *valuePointer;\n  int valueArray;\n  \n  valueArray = *(int *)(instance + 0x4c);\n  if (valueArray == 0) {\n    valueArray = FUN_08009980(instance,4,0x21);\n    *(int *)(instance + 0x4c) = valueArray;\n    if (valueArray == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  valuePointer = *(undefined4 **)(valueArray + index * 4);\n  if (valuePointer == (undefined4 *)0x0) {\n    valueArray = 1 << (index & 0xff);\n    valuePointer = (undefined4 *)FUN_08009980(instance,1,(valueArray + 5) * 4);\n    if (valuePointer == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    valueIndex = index;\n    bitMaskValue = valueArray;\n  }\n  else {\n    *(undefined4 *)(valueArray + index * 4) = *valuePointer;\n  }\n  valueAttribute1 = 0;\n  valueAttribute2 = 0;\n  return valuePointer;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "get_or_create_value_080090c0",
                "param_1": "instance",
                "param_2": "index",
                "puVar1": "valuePointer",
                "iVar2": "valueArray",
                "puVar1[1]": "valueIndex",
                "puVar1[2]": "bitMaskValue",
                "puVar1[3]": "valueAttribute1",
                "puVar1[4]": "valueAttribute2"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_pointer_0800910c",
            "code": "\nvoid updatePointer_0800910c(int address,undefined4 *pointerArray)\n\n{\n  int offset;\n  \n  if (pointerArray != (undefined4 *)0x0) {\n    offset = *(int *)(address + 0x4c);\n    *pointerArray = *(undefined4 *)(offset + pointerArray[1] * 4);\n    *(undefined4 **)(offset + pointerArray[1] * 4) = pointerArray;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_pointer_0800910c",
                "param_1": "address",
                "param_2": "pointerArray",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_checksum_08009120",
            "code": "\nundefined4 * calculateChecksum_08009120(int data,undefined4 *checksumArray,int multiplier,uint checksum)\n\n{\n  undefined4 *resultArray;\n  uint tempValue;\n  int arraySize;\n  uint *arrayPointer;\n  int counter;\n  \n  counter = 0;\n  arraySize = checksumArray[4];\n  arrayPointer = checksumArray + 5;\n  do {\n    counter = counter + 1;\n    checksum = multiplier * (*arrayPointer & 0xffff) + checksum;\n    tempValue = multiplier * (*arrayPointer >> 0x10) + (checksum >> 0x10);\n    *arrayPointer = (checksum & 0xffff) + tempValue * 0x10000;\n    checksum = tempValue >> 0x10;\n    arrayPointer = arrayPointer + 1;\n  } while (counter < arraySize);\n  resultArray = checksumArray;\n  if (checksum != 0) {\n    if ((int)checksumArray[2] <= arraySize) {\n      resultArray = (undefined4 *)FUN_080090c0(data,checksumArray[1] + 1);\n      FUN_08001084(resultArray + 3,checksumArray + 3,(checksumArray[4] + 2) * 4);\n      counter = *(int *)(data + 0x4c);\n      *checksumArray = *(undefined4 *)(counter + checksumArray[1] * 4);\n      *(undefined4 **)(counter + checksumArray[1] * 4) = checksumArray;\n    }\n    resultArray[arraySize + 5] = checksum;\n    resultArray[4] = arraySize + 1;\n  }\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "param_1": "data",
                "param_2": "checksumArray",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "resultArray",
                "uVar2": "tempValue",
                "iVar3": "arraySize",
                "puVar4": "arrayPointer",
                "iVar5": "counter"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZeros = 0x10;\n  }\n  else {\n    leadingZeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZeros = leadingZeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZeros = leadingZeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZeros = leadingZeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZeros + 1;\n    }\n    leadingZeros = 0x20;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZeros"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint countLeadingZeros_080091e4(uint *num)\n\n{\n  int leadingZeros;\n  uint value;\n  \n  value = *num;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leadingZeros = 0x10;\n    }\n    else {\n      leadingZeros = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leadingZeros = leadingZeros + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leadingZeros = leadingZeros + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leadingZeros = leadingZeros + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leadingZeros = leadingZeros + 1;\n    }\n    *num = value;\n    return leadingZeros;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *num = value >> 2;\n    return 2;\n  }\n  *num = value >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "num",
                "iVar1": "leadingZeros",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_data_08009244",
            "code": "\nvoid initializeData_08009244(undefined4 dataPointer,undefined4 value)\n\n{\n  int dataOffset;\n  \n  dataOffset = FUN_080090c0(dataPointer,1);\n  *(undefined4 *)(dataOffset + 0x10) = 1;\n  *(undefined4 *)(dataOffset + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "dataPointer",
                "param_2": "value",
                "iVar1": "dataOffset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_array_08009258",
            "code": "\nvoid initializeArray_08009258(undefined4 param,int array1,int array2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int length;\n  uint tempVar1;\n  uint *ptr3;\n  uint startValue;\n  uint *ptr4;\n  uint tempVar2;\n  int length1;\n  int length2;\n  uint endValue;\n  int array1Length;\n  int array2Length;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  array1Length = *(int *)(array1 + 0x10);\n  length1 = *(int *)(array2 + 0x10);\n  length2 = length1;\n  array2Length = array1;\n  if (array1Length < length1) {\n    length2 = array1Length;\n    array1Length = length1;\n    array2Length = array2;\n    array2 = array1;\n  }\n  length1 = array1Length + length2;\n  length = *(int *)(array2Length + 4);\n  if (*(int *)(array2Length + 8) < length1) {\n    length = length + 1;\n  }\n  length = FUN_080090c0(param,length);\n  ptr9 = (uint *)(length + 0x14);\n  ptr8 = ptr9 + length1;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  startValue = array2 + 0x14;\n  endValue = startValue + length2 * 4;\n  ptr3 = (uint *)(array2Length + 0x14);\n  if (startValue < endValue) {\n    ptr4 = (uint *)(startValue + ((endValue - array2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(array2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        startValue = *ptr7 & 0xffff;\n        if (startValue != 0) break;\n        startValue = *ptr7 >> 0x10;\n        if (startValue == 0) goto LAB_080092d2;\nLAB_0800932c:\n        tempVar2 = *ptr9;\n        tempVar1 = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        endValue = tempVar2;\n        do {\n          ptr6 = ptr5;\n          tempVar1 = tempVar1 + startValue * *(ushort *)ptr1 + (endValue >> 0x10);\n          *ptr6 = tempVar2 & 0xffff | tempVar1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          endValue = ptr6[1];\n          tempVar2 = startValue * (*ptr1 >> 0x10) + (endValue & 0xffff) + (tempVar1 >> 0x10);\n          tempVar1 = tempVar2 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + array1Length);\n        ptr6[1] = tempVar2;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      endValue = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        tempVar2 = startValue * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + endValue;\n        tempVar1 = startValue * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (tempVar2 >> 0x10);\n        endValue = tempVar1 >> 0x10;\n        *ptr2 = tempVar2 & 0xffff | tempVar1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + array1Length);\n      ptr2[1] = endValue;\n      startValue = *ptr7 >> 0x10;\n      if (startValue != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < length1) {\n    startValue = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((startValue == 0 && (length1 = length1 + -1, length1 != 0))) {\n      ptr8 = ptr8 + -1;\n      startValue = *ptr8;\n    }\n  }\n  *(int *)(length + 0x10) = length1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_array_08009258",
                "param_1": "param",
                "param_2": "array1",
                "param_3": "array2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "length",
                "uVar4": "tempVar1",
                "puVar5": "ptr3",
                "uVar6": "startValue",
                "puVar7": "ptr4",
                "uVar8": "tempVar2",
                "iVar9": "length1",
                "iVar10": "length2",
                "uVar11": "endValue",
                "iVar12": "array1Length",
                "iVar13": "array2Length",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "expand_and_copy_array_080093a4",
            "code": "\nundefined4 * expandAndCopyArray_080093a4(int sourceArray,undefined4 *destinationArray,uint arrayLength)\n\n{\n  int index1;\n  int index2;\n  undefined4 *currentElement;\n  undefined4 *newElement;\n  \n  if ((arrayLength & 3) != 0) {\n    destinationArray = (undefined4 *)\n              FUN_08009120(sourceArray,destinationArray,*(undefined4 *)(&DAT_0800a070 + ((arrayLength & 3) - 1) * 4),\n                           0);\n  }\n  index2 = (int)arrayLength >> 2;\n  if (index2 != 0) {\n    newElement = *(undefined4 **)(sourceArray + 0x48);\n    if (newElement == (undefined4 *)0x0) {\n      newElement = (undefined4 *)FUN_080090c0(sourceArray,1);\n      newElement[4] = 1;\n      newElement[5] = 0x271;\n      *(undefined4 **)(sourceArray + 0x48) = newElement;\n      *newElement = 0;\n    }\n    currentElement = destinationArray;\n    if (index2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    index2 = index2 >> 1;\n    currentElement = newElement;\n    if (index2 != 0) {\n      while( true ) {\n        newElement = (undefined4 *)*currentElement;\n        if (newElement == (undefined4 *)0x0) {\n          newElement = (undefined4 *)FUN_08009258(sourceArray,currentElement,currentElement);\n          *currentElement = newElement;\n          *newElement = 0;\n        }\n        currentElement = destinationArray;\n        if (-1 < index2 << 0x1f) break;\nLAB_080093d2:\n        destinationArray = (undefined4 *)FUN_08009258(sourceArray,currentElement,newElement);\n        if (currentElement == (undefined4 *)0x0) break;\n        index1 = *(int *)(sourceArray + 0x4c);\n        index2 = index2 >> 1;\n        *currentElement = *(undefined4 *)(index1 + currentElement[1] * 4);\n        *(undefined4 **)(index1 + currentElement[1] * 4) = currentElement;\n        currentElement = newElement;\n        if (index2 == 0) {\n          return destinationArray;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return destinationArray;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "expand_and_copy_array_080093a4",
                "param_1": "sourceArray",
                "param_2": "destinationArray",
                "param_3": "arrayLength",
                "iVar1": "index1",
                "iVar2": "index2",
                "puVar3": "currentElement",
                "puVar4": "newElement"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "reverse_and_shift_bits_08009444",
            "code": "\nvoid reverseAndShiftBits_08009444(int input,undefined4 *params,uint numBits)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  undefined4 temp4;\n  int parameter5;\n  int temp6;\n  uint *pointer1;\n  uint *pointer2;\n  uint *pointer3;\n  uint *pointer4;\n  int shiftAmount;\n  int temp7;\n  uint temp8;\n  uint *pointer5;\n  \n  parameter5 = params[4];\n  shiftAmount = (int)numBits >> 5;\n  temp7 = shiftAmount + parameter5 + 1;\n  temp3 = params[1];\n  temp2 = params[2];\n  if ((int)params[2] < temp7) {\n    do {\n      temp6 = temp2 * 2;\n      temp1 = temp2 * -2;\n      temp3 = temp3 + 1;\n      temp2 = temp6;\n    } while (temp7 != temp6 && temp7 + temp1 < 0 == SBORROW4(temp7,temp6));\n  }\n  temp2 = FUN_080090c0(input,temp3);\n  pointer1 = (uint *)(temp2 + 0x14);\n  if (0 < shiftAmount) {\n    pointer4 = pointer1 + shiftAmount;\n    pointer2 = pointer1;\n    do {\n      pointer5 = pointer2 + 1;\n      *pointer2 = 0;\n      pointer1 = pointer4;\n      pointer2 = pointer5;\n    } while (pointer5 != pointer4);\n  }\n  temp3 = params[4];\n  pointer2 = params + 5;\n  numBits = numBits & 0x1f;\n  if (numBits == 0) {\n    pointer1 = pointer1 + -1;\n    pointer4 = pointer2;\n    do {\n      pointer5 = pointer4 + 1;\n      pointer1 = pointer1 + 1;\n      *pointer1 = *pointer4;\n      pointer4 = pointer5;\n    } while (pointer5 < pointer2 + temp3);\n  }\n  else {\n    temp8 = 0;\n    pointer4 = pointer2;\n    do {\n      pointer5 = pointer1;\n      *pointer5 = *pointer4 << numBits | temp8;\n      pointer3 = pointer4 + 1;\n      temp8 = *pointer4 >> (0x20 - numBits & 0xff);\n      pointer1 = pointer5 + 1;\n      pointer4 = pointer3;\n    } while (pointer3 < pointer2 + temp3);\n    pointer5[1] = temp8;\n    if (temp8 != 0) {\n      temp7 = shiftAmount + parameter5 + 2;\n    }\n  }\n  parameter5 = *(int *)(input + 0x4c);\n  temp3 = params[1];\n  temp4 = *(undefined4 *)(parameter5 + temp3 * 4);\n  *(int *)(temp2 + 0x10) = temp7 + -1;\n  *params = temp4;\n  *(undefined4 **)(parameter5 + temp3 * 4) = params;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "reverse_and_shift_bits_08009444",
                "param_1": "input",
                "param_2": "params",
                "param_3": "numBits",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "parameter5",
                "iVar6": "temp6",
                "puVar7": "pointer1",
                "puVar8": "pointer2",
                "puVar10": "pointer3",
                "puVar11": "pointer4",
                "iVar12": "shiftAmount",
                "iVar13": "temp7",
                "uVar14": "temp8",
                "puVar9": "pointer5"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1,int array2)\n\n{\n  int arrayDifference;\n  uint *array2Ptr;\n  int array2StartIndex;\n  uint *array1Ptr;\n  \n  array2StartIndex = *(int *)(array2 + 0x10);\n  arrayDifference = *(int *)(array1 + 0x10) - array2StartIndex;\n  if (arrayDifference == 0) {\n    array2Ptr = (uint *)(array2 + 0x14 + array2StartIndex * 4);\n    array1Ptr = (uint *)(array1 + 0x14) + array2StartIndex;\n    do {\n      array1Ptr = array1Ptr + -1;\n      array2Ptr = array2Ptr + -1;\n      if (*array1Ptr != *array2Ptr) {\n        if (*array2Ptr <= *array1Ptr) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < array1Ptr);\n  }\n  return arrayDifference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "arrayDifference",
                "puVar2": "array2Ptr",
                "iVar3": "array2StartIndex",
                "puVar4": "array1Ptr"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "check_data_equality_08009530",
            "code": "\nvoid checkDataEquality_08009530(undefined4 param1,uint *array1,uint *array2,undefined4 param4)\n\n{\n  int iVar1;\n  uint *ptr1;\n  uint uVar1;\n  uint uVar2;\n  undefined4 uVar3;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint *array1End;\n  int iVar2;\n  uint *array2Start;\n  uint uVar4;\n  uint *ptr6;\n  \n  ptr1 = (uint *)array2[4];\n  array1End = array1 + 5;\n  array2Start = array2 + 5;\n  ptr3 = array1End;\n  ptr4 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = array1End + (int)ptr1;\n    ptr1 = array2Start + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= array1End) {\n        iVar2 = FUN_080090c0(param1,0,ptr2,ptr1,param4);\n        *(undefined4 *)(iVar2 + 0x10) = 1;\n        *(undefined4 *)(iVar2 + 0x14) = 0;\n        return;\n      }\n    }\n    uVar3 = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    uVar3 = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  uVar3 = 1;\n  ptr2 = array1End;\n  ptr1 = array1;\n  ptr3 = array2Start;\n  ptr4 = array2;\n  array2 = array1;\n  array2Start = array1End;\nLAB_08009578:\n  iVar1 = FUN_080090c0(param1,ptr4[1],ptr2,ptr1,param4);\n  iVar2 = 0;\n  uVar4 = ptr4[4];\n  uVar1 = array2[4];\n  *(undefined4 *)(iVar1 + 0xc) = uVar3;\n  array1End = ptr3 + uVar4;\n  ptr1 = (uint *)(iVar1 + 0x14);\n  ptr4 = array2Start;\n  do {\n    ptr6 = ptr3 + 1;\n    ptr5 = ptr4 + 1;\n    uVar2 = ((*ptr3 & 0xffff) + iVar2) - (*ptr4 & 0xffff);\n    iVar2 = ((*ptr3 >> 0x10) - (*ptr4 >> 0x10)) + ((int)uVar2 >> 0x10);\n    uVar2 = uVar2 & 0xffff | iVar2 * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = uVar2;\n    iVar2 = iVar2 >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = ptr6;\n    ptr4 = ptr5;\n  } while (ptr5 < array2Start + uVar1);\n  ptr1 = ptr6;\n  ptr3 = ptr2;\n  if (ptr6 < array1End) {\n    do {\n      ptr4 = ptr1 + 1;\n      uVar1 = (*ptr1 & 0xffff) + iVar2;\n      iVar2 = ((int)uVar1 >> 0x10) + (*ptr1 >> 0x10);\n      uVar2 = uVar1 & 0xffff | iVar2 * 0x10000;\n      *ptr3 = uVar2;\n      iVar2 = iVar2 >> 0x10;\n      ptr1 = ptr4;\n      ptr3 = ptr3 + 1;\n    } while (ptr4 < array1End);\n    ptr2 = (uint *)((int)ptr2 + ((int)array1End + ~(uint)ptr6 & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (uVar2 == 0) {\n    ptr2 = ptr2 + -1;\n    uVar4 = uVar4 - 1;\n    uVar2 = *ptr2;\n  }\n  *(uint *)(iVar1 + 0x10) = uVar4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "check_data_equality_08009530",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "param4",
                "puVar2": "ptr1",
                "uVar3": "uVar1",
                "uVar4": "uVar2",
                "uVar5": "uVar3",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "puVar11": "array1End",
                "iVar12": "iVar2",
                "puVar13": "array2Start",
                "uVar14": "uVar4",
                "puVar8": "ptr6"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "decode_and_calculate_08009630",
            "code": "\nint decode_and_calculate_08009630(undefined4 input_param_1,undefined4 input_param_2,uint flags,uint value_1,int *result_1,\n                int *result_2)\n\n{\n  int result;\n  uint var1;\n  int var2;\n  int var3;\n  uint var4;\n  uint var5;\n  undefined8 var6;\n  uint param_3_temp;\n  uint flags_temp;\n  \n  result = FUN_080090c0(input_param_1,1);\n  var5 = (value_1 << 1) >> 0x15;\n  flags_temp = value_1 & 0xfffff;\n  if (var5 != 0) {\n    flags_temp = flags_temp | 0x100000;\n  }\n  if (flags == 0) {\n    var2 = FUN_080091e4(&flags_temp);\n    var3 = 1;\n    var1 = var2 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = flags_temp;\n  }\n  else {\n    param_3_temp = flags;\n    var1 = FUN_080091e4(&param_3_temp);\n    if (var1 == 0) {\n      *(uint *)(result + 0x14) = param_3_temp;\n    }\n    else {\n      var4 = flags_temp << (0x20 - var1 & 0xff);\n      flags_temp = flags_temp >> (var1 & 0xff);\n      *(uint *)(result + 0x14) = var4 | param_3_temp;\n    }\n    if (flags_temp == 0) {\n      var3 = 1;\n    }\n    else {\n      var3 = 2;\n    }\n    *(uint *)(result + 0x18) = flags_temp;\n    *(int *)(result + 0x10) = var3;\n  }\n  if (var5 == 0) {\n    *result_1 = var1 - 0x432;\n    var6 = FUN_080091a4(*(undefined4 *)(result + var3 * 4 + 0x10));\n    *result_2 = (int)((ulonglong)var6 >> 0x20) * 0x20 - (int)var6;\n    return result;\n  }\n  *result_1 = (var5 - 0x433) + var1;\n  *result_2 = 0x35 - var1;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009630": "decode_and_calculate_08009630",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "flags",
                "param_4": "value_1",
                "param_5": "result_1",
                "param_6": "result_2",
                "iVar1": "result",
                "uVar2": "var1",
                "iVar3": "var2",
                "iVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "local_20": "param_3_temp",
                "local_1c": "flags_temp"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "convert_float_to_fixed_point_080096e0",
            "code": "\nundefined8 convertFloatToFixedPoint_080096e0(uint floatPart,uint intPart,int *result,undefined4 otherParameter)\n\n{\n  int counter;\n  uint positiveIntPart;\n  undefined8 combinedValue;\n  \n  combinedValue = CONCAT44(intPart,floatPart);\n  counter = 0;\n  positiveIntPart = intPart & 0x7fffffff;\n  *result = 0;\n  if ((positiveIntPart < 0x7ff00000) && ((positiveIntPart | floatPart) != 0)) {\n    if (positiveIntPart < 0x100000) {\n      combinedValue = FUN_080004c8(floatPart,intPart,0,0x43500000,otherParameter);\n      counter = -0x36;\n      positiveIntPart = (uint)((ulonglong)combinedValue >> 0x20) & 0x7fffffff;\n    }\n    floatPart = (uint)combinedValue;\n    intPart = (uint)((ulonglong)combinedValue >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)positiveIntPart >> 0x14) + -0x3fe + counter;\n  }\n  return CONCAT44(intPart,floatPart);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "convert_float_to_fixed_point_080096e0",
                "param_1": "floatPart",
                "param_2": "intPart",
                "param_3": "result",
                "param_4": "otherParameter",
                "iVar1": "counter",
                "uVar2": "positiveIntPart",
                "uVar3": "combinedValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "check_return_value_and_update_08009744",
            "code": "\nvoid checkReturnValueAndUpdate_08009744(int *outputPointer,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20000c10 = 0;\n  returnValue = FUN_08005728(inputValue);\n  if ((returnValue == -1) && (DAT_20000c10 != 0)) {\n    *outputPointer = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "check_return_value_and_update_08009744",
                "param_1": "outputPointer",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_words_with_padding_08009768",
            "code": "\nvoid copy_words_with_padding_08009768(uint *destination,uint *source,uint num_words)\n\n{\n  char current_char;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_word;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) &&\n     (destination_ptr = destination, source_ptr = source, 3 < num_words)) {\n    do {\n      source = source_ptr + 1;\n      current_word = *source_ptr;\n      destination = destination_ptr;\n      if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_0800979c;\n      num_words = num_words - 4;\n      destination = destination_ptr + 1;\n      *destination_ptr = current_word;\n      destination_ptr = destination;\n      source_ptr = source;\n    } while (3 < num_words);\n  }\n  source_ptr = source;\n  if (num_words != 0) {\nLAB_0800979c:\n    current_char = *(char *)source_ptr;\n    *(char *)destination = current_char;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      num_words = num_words - 1;\n      if (current_char == '\\0') break;\n      if (num_words == 0) {\n        return;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_char = *(char *)source_ptr;\n      *(char *)destination = current_char;\n    }\n    if (num_words != 0) {\n      source_ptr = destination;\n      do {\n        destination_ptr = (uint *)((int)source_ptr + 1);\n        *(char *)source_ptr = '\\0';\n        source_ptr = destination_ptr;\n      } while (destination_ptr != (uint *)(num_words + (int)destination));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_words_with_padding_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "num_words",
                "cVar1": "current_char",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "uVar4": "current_word"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 process_data_080097cc(undefined4 *output_array,int *input_array,int *metadata)\n\n{\n  int array_start;\n  uint array_length;\n  int temp_var1;\n  int temp_var2;\n  uint max_length;\n  uint loop_counter;\n  undefined4 *current_array_element;\n  undefined4 *next_array_element;\n  undefined4 temp_var3;\n  \n  if (metadata[2] != 0) {\n    array_start = *input_array;\n    max_length = input_array[2];\n    next_array_element = (undefined4 *)*metadata;\n    do {\n      do {\n        current_array_element = next_array_element + 2;\n        temp_var3 = *next_array_element;\n        loop_counter = next_array_element[1];\n        next_array_element = current_array_element;\n      } while (loop_counter == 0);\n      array_length = loop_counter;\n      if ((max_length <= loop_counter) && (array_length = max_length, (*(ushort *)(input_array + 3) & 0x480) != 0)) {\n        temp_var2 = array_start - input_array[4];\n        max_length = (input_array[5] * 3) / 2;\n        array_length = loop_counter + 1 + temp_var2;\n        if (max_length < array_length) {\n          max_length = array_length;\n        }\n        if ((int)((uint)*(ushort *)(input_array + 3) << 0x15) < 0) {\n          temp_var1 = FUN_08008af8(output_array,max_length);\n          if (temp_var1 == 0) {\nLAB_08009896:\n            *output_array = 0xc;\n            *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x40;\n            metadata[1] = 0;\n            metadata[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(temp_var1,input_array[4],temp_var2);\n          *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          temp_var1 = FUN_08009adc(output_array);\n          if (temp_var1 == 0) {\n            FUN_080088ec(output_array,input_array[4]);\n            goto LAB_08009896;\n          }\n        }\n        array_start = temp_var1 + temp_var2;\n        input_array[5] = max_length;\n        input_array[4] = temp_var1;\n        *input_array = array_start;\n        input_array[2] = max_length - temp_var2;\n        array_length = loop_counter;\n      }\n      FUN_08009a18(array_start,temp_var3,array_length);\n      temp_var2 = metadata[2];\n      max_length = input_array[2] - array_length;\n      array_start = *input_array + array_length;\n      input_array[2] = max_length;\n      *input_array = array_start;\n      metadata[2] = temp_var2 - loop_counter;\n    } while (temp_var2 - loop_counter != 0);\n  }\n  metadata[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "metadata",
                "iVar1": "array_start",
                "uVar2": "array_length",
                "iVar3": "temp_var1",
                "iVar4": "temp_var2",
                "uVar5": "max_length",
                "uVar6": "loop_counter",
                "puVar7": "current_array_element",
                "puVar8": "next_array_element",
                "uVar9": "temp_var3"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int dataIndex,undefined4 newValue,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataPtr;\n  undefined4 result;\n  uint bitMask;\n  uint currentSize;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  currentSize = *(uint *)(DAT_20000168 + 4);\n  if ((int)currentSize < 0x20) {\n    if (dataIndex != 0) {\n      *(undefined4 *)(DAT_20000168 + currentSize * 4 + 0x88) = value1;\n      bitMask = 1 << (currentSize & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + currentSize * 4 + 0x108) = value2;\n      if (dataIndex == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    *(uint *)(dataPtr + 4) = currentSize + 1;\n    result = DAT_20000448;\n    *(undefined4 *)(dataPtr + (currentSize + 2) * 4) = newValue;\n    FUNC_08008af4(result);\n    result = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "dataIndex",
                "param_2": "newValue",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "bitMask",
                "uVar4": "currentSize"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 ptr,int size,int count)\n\n{\n  undefined4 *memoryBlock;\n  uint adjustedSize;\n  undefined4 *adjustedMemoryBlock;\n  \n  memoryBlock = (undefined4 *)FUN_08008af8(ptr,count * size);\n  if (memoryBlock == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjustedSize = (memoryBlock[-1] & 0xfffffffc) - 4;\n  if (adjustedSize < 0x25) {\n    adjustedMemoryBlock = memoryBlock;\n    if (0x13 < adjustedSize) {\n      *memoryBlock = 0;\n      memoryBlock[1] = 0;\n      if (0x1b < adjustedSize) {\n        memoryBlock[2] = 0;\n        memoryBlock[3] = 0;\n        if (adjustedSize == 0x24) {\n          memoryBlock[4] = 0;\n          memoryBlock[5] = 0;\n          adjustedMemoryBlock = memoryBlock + 6;\n        }\n        else {\n          adjustedMemoryBlock = memoryBlock + 4;\n        }\n        *adjustedMemoryBlock = 0;\n        adjustedMemoryBlock[1] = 0;\n        adjustedMemoryBlock[2] = 0;\n        return memoryBlock;\n      }\n      adjustedMemoryBlock = memoryBlock + 2;\n    }\n    *adjustedMemoryBlock = 0;\n    adjustedMemoryBlock[1] = 0;\n    adjustedMemoryBlock[2] = 0;\n    return memoryBlock;\n  }\n  FUN_08005d68(memoryBlock,0);\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "count",
                "puVar1": "memoryBlock",
                "uVar2": "adjustedSize",
                "puVar3": "adjustedMemoryBlock"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  int count;\n  undefined *dstEnd;\n  undefined4 *srcEnd;\n  uint remainingSize;\n  uint remainingSize;\n  \n  if ((source < destination) && (srcPtr = (undefined4 *)((int)source + size), destination < srcPtr)) {\n    dstEnd = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        srcPtr = (undefined4 *)((int)srcPtr + -1);\n        dstEnd = dstEnd + -1;\n        *dstEnd = *(undefined *)srcPtr;\n      } while (source != srcPtr);\n    }\n  }\n  else {\n    remainingSize = size;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      srcPtr = source + 4;\n      destPtr = destination + 4;\n      do {\n        srcEnd = srcPtr + 4;\n        destPtr[-4] = srcPtr[-4];\n        destPtr[-3] = srcPtr[-3];\n        destPtr[-2] = srcPtr[-2];\n        destPtr[-1] = srcPtr[-1];\n        srcPtr = srcEnd;\n        destPtr = destPtr + 4;\n      } while (srcEnd != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x20));\n      count = (size - 0x10 >> 4) + 1;\n      remainingSize = size & 0xf;\n      source = source + count * 4;\n      destination = destination + count * 4;\n      if (3 < remainingSize) {\n        srcPtr = destination + -1;\n        remainingSize = remainingSize;\n        destPtr = source;\n        do {\n          remainingSize = remainingSize - 4;\n          srcPtr = srcPtr + 1;\n          *srcPtr = *destPtr;\n          destPtr = destPtr + 1;\n        } while (3 < remainingSize);\n        count = (remainingSize - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + count);\n        source = (undefined4 *)((int)source + count);\n        remainingSize = size & 3;\n      }\n    }\n    size = remainingSize;\n    if (remainingSize != 0) {\nLAB_08009abc:\n      dstEnd = (undefined *)((int)destination + -1);\n      srcPtr = source;\n      do {\n        destPtr = (undefined4 *)((int)srcPtr + 1);\n        dstEnd = dstEnd + 1;\n        *dstEnd = *(undefined *)srcPtr;\n        srcPtr = destPtr;\n      } while (destPtr != (undefined4 *)(size + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "iVar3": "count",
                "puVar4": "dstEnd",
                "puVar5": "srcEnd",
                "uVar6": "remainingSize",
                "uVar7": "remainingSize"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_08009adc",
            "code": "\nint * allocate_memory_08009adc(undefined4 *ptr_param,int *ptr_buffer,uint size)\n\n{\n  int *ptr_temp;\n  int temp;\n  int *ptr_result;\n  uint temp1;\n  int temp2;\n  uint temp3;\n  int *ptr_data;\n  uint aligned_size;\n  uint aligned_buffer_size;\n  uint temp4;\n  int temp5;\n  \n  if (ptr_buffer == (int *)0x0) {\n    ptr_result = (int *)FUN_08008af8(ptr_param,size);\n    return ptr_result;\n  }\n  FUN_080090a8();\n  temp3 = ptr_buffer[-1];\n  aligned_buffer_size = temp3 & 0xfffffffc;\n  ptr_result = ptr_buffer + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < size) {\nLAB_08009b8e:\n    *ptr_param = 0xc;\n    return (int *)0x0;\n  }\n  temp5 = (int)ptr_result + aligned_buffer_size;\n  temp4 = aligned_buffer_size;\n  if ((int)aligned_buffer_size < (int)aligned_size) {\n    if (DAT_20000454 == temp5) {\n      temp5 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + aligned_buffer_size;\n      if ((int)(aligned_size + 0x10) <= temp5) {\n        DAT_20000454 = (int)ptr_result + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = temp5 - aligned_size | 1;\n        ptr_buffer[-1] = aligned_size | ptr_buffer[-1] & 1U;\n        FUN_080090b4(ptr_param);\n        return ptr_buffer;\n      }\n      if (-1 < (int)(temp3 << 0x1f)) {\n        ptr_temp = (int *)((int)ptr_result - ptr_buffer[-2]);\n        temp3 = ptr_temp[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(temp5 + temp3)) {\n          temp2 = ptr_temp[3];\n          ptr_result = ptr_temp + 2;\n          temp = *ptr_result;\n          aligned_buffer_size = aligned_buffer_size - 4;\n          *(int *)(temp + 0xc) = temp2;\n          *(int *)(temp2 + 8) = temp;\n          if (aligned_buffer_size < 0x25) {\n            temp = *ptr_buffer;\n            ptr_data = ptr_result;\n            if (0x13 < aligned_buffer_size) {\n              ptr_temp[2] = temp;\n              ptr_temp[3] = ptr_buffer[1];\n              temp = ptr_buffer[2];\n              if (aligned_buffer_size < 0x1c) {\n                ptr_buffer = ptr_buffer + 2;\n                ptr_data = ptr_temp + 4;\n              }\n              else {\n                ptr_temp[4] = temp;\n                ptr_temp[5] = ptr_buffer[3];\n                temp = ptr_buffer[4];\n                if (aligned_buffer_size == 0x24) {\n                  ptr_temp[6] = temp;\n                  ptr_temp[7] = ptr_buffer[5];\n                  temp = ptr_buffer[6];\n                  ptr_buffer = ptr_buffer + 6;\n                  ptr_data = ptr_temp + 8;\n                }\n                else {\n                  ptr_buffer = ptr_buffer + 4;\n                  ptr_data = ptr_temp + 6;\n                }\n              }\n            }\n            *ptr_data = temp;\n            ptr_data[1] = ptr_buffer[1];\n            ptr_data[2] = ptr_buffer[2];\n          }\n          else {\n            FUN_08009a18(ptr_result,ptr_buffer);\n          }\n          DAT_20000454 = (int)ptr_temp + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (temp5 + temp3) - aligned_size | 1;\n          ptr_temp[1] = aligned_size | ptr_temp[1] & 1U;\n          FUN_080090b4(ptr_param);\n          return ptr_result;\n        }\nLAB_08009bb0:\n        temp4 = aligned_buffer_size + temp3;\n        if ((int)aligned_size <= (int)temp4) {\n          temp2 = ptr_temp[3];\n          ptr_data = ptr_temp + 2;\n          temp = *ptr_data;\n          *(int *)(temp + 0xc) = temp2;\n          temp5 = (int)ptr_temp + temp4;\n          *(int *)(temp2 + 8) = temp;\n          ptr_result = ptr_temp;\n          if (aligned_buffer_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(ptr_data,ptr_buffer);\n          ptr_buffer = ptr_data;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp5 + 4) & 0xfffffffe) + temp5 + 4) << 0x1f) {\n        temp1 = *(uint *)(temp5 + 4) & 0xfffffffc;\n        temp4 = aligned_buffer_size + temp1;\n        if ((int)temp4 < (int)aligned_size) {\n          if ((int)(temp3 << 0x1f) < 0) goto LAB_08009b36;\n          ptr_temp = (int *)((int)ptr_result - ptr_buffer[-2]);\n          temp3 = ptr_temp[1] & 0xfffffffc;\n          temp4 = temp1 + temp3 + aligned_buffer_size;\n          if ((int)temp4 < (int)aligned_size) goto LAB_08009bb0;\n          temp = *(int *)(temp5 + 8);\n          temp5 = *(int *)(temp5 + 0xc);\n          *(int *)(temp + 0xc) = temp5;\n          *(int *)(temp5 + 8) = temp;\n          ptr_data = ptr_temp + 2;\n          temp = *ptr_data;\n          temp2 = ptr_temp[3];\n          *(int *)(temp + 0xc) = temp2;\n          temp5 = (int)ptr_temp + temp4;\n          *(int *)(temp2 + 8) = temp;\n          ptr_result = ptr_temp;\n          if (0x24 < aligned_buffer_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          aligned_buffer_size = aligned_buffer_size - 4;\n          temp = *ptr_buffer;\n          ptr_temp = ptr_data;\n          if (0x13 < aligned_buffer_size) {\n            ptr_result[2] = temp;\n            ptr_result[3] = ptr_buffer[1];\n            temp = ptr_buffer[2];\n            if (aligned_buffer_size < 0x1c) {\n              ptr_buffer = ptr_buffer + 2;\n              ptr_temp = ptr_result + 4;\n            }\n            else {\n              ptr_result[4] = temp;\n              ptr_result[5] = ptr_buffer[3];\n              temp = ptr_buffer[4];\n              if (aligned_buffer_size == 0x24) {\n                ptr_result[6] = temp;\n                ptr_result[7] = ptr_buffer[5];\n                temp = ptr_buffer[6];\n                ptr_buffer = ptr_buffer + 6;\n                ptr_temp = ptr_result + 8;\n              }\n              else {\n                ptr_buffer = ptr_buffer + 4;\n                ptr_temp = ptr_result + 6;\n              }\n            }\n          }\n          *ptr_temp = temp;\n          ptr_temp[1] = ptr_buffer[1];\n          ptr_temp[2] = ptr_buffer[2];\n          ptr_buffer = ptr_data;\n        }\n        else {\n          temp = *(int *)(temp5 + 8);\n          temp2 = *(int *)(temp5 + 0xc);\n          *(int *)(temp + 0xc) = temp2;\n          temp5 = (int)ptr_result + temp4;\n          *(int *)(temp2 + 8) = temp;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp3 << 0x1f)) {\n        ptr_temp = (int *)((int)ptr_result - ptr_buffer[-2]);\n        temp3 = ptr_temp[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    ptr_temp = (int *)FUN_08008af8(ptr_param,size);\n    if (ptr_temp != (int *)0x0) {\n      if ((int *)((ptr_buffer[-1] & 0xfffffffeU) + (int)ptr_result) == ptr_temp + -2) {\n        temp4 = aligned_buffer_size + (ptr_temp[-1] & 0xfffffffcU);\n        temp5 = (int)ptr_result + temp4;\n        goto LAB_08009c00;\n      }\n      aligned_buffer_size = aligned_buffer_size - 4;\n      if (aligned_buffer_size < 0x25) {\n        temp5 = *ptr_buffer;\n        ptr_result = ptr_buffer;\n        ptr_data = ptr_temp;\n        if (0x13 < aligned_buffer_size) {\n          *ptr_temp = temp5;\n          ptr_temp[1] = ptr_buffer[1];\n          if (aligned_buffer_size < 0x1c) {\n            temp5 = ptr_buffer[2];\n            ptr_result = ptr_buffer + 2;\n            ptr_data = ptr_temp + 2;\n          }\n          else {\n            ptr_temp[2] = ptr_buffer[2];\n            ptr_temp[3] = ptr_buffer[3];\n            if (aligned_buffer_size == 0x24) {\n              ptr_temp[4] = ptr_buffer[4];\n              ptr_temp[5] = ptr_buffer[5];\n              temp5 = ptr_buffer[6];\n              ptr_result = ptr_buffer + 6;\n              ptr_data = ptr_temp + 6;\n            }\n            else {\n              temp5 = ptr_buffer[4];\n              ptr_result = ptr_buffer + 4;\n              ptr_data = ptr_temp + 4;\n            }\n          }\n        }\n        *ptr_data = temp5;\n        ptr_data[1] = ptr_result[1];\n        ptr_data[2] = ptr_result[2];\n      }\n      else {\n        FUN_08009a18(ptr_temp,ptr_buffer);\n      }\n      FUN_080088ec(ptr_param,ptr_buffer);\n    }\n    FUN_080090b4(ptr_param);\n    ptr_buffer = ptr_temp;\n  }\n  else {\nLAB_08009c00:\n    if (temp4 - aligned_size < 0x10) {\n      ptr_result[1] = ptr_result[1] & 1U | temp4;\n      *(uint *)(temp5 + 4) = *(uint *)(temp5 + 4) | 1;\n    }\n    else {\n      ptr_result[1] = ptr_result[1] & 1U | aligned_size;\n      *(uint *)((int)ptr_result + aligned_size + 4) = temp4 - aligned_size | 1;\n      *(uint *)(temp5 + 4) = *(uint *)(temp5 + 4) | 1;\n      FUN_080088ec(ptr_param,(int)ptr_result + aligned_size + 8);\n    }\n    FUN_080090b4(ptr_param);\n  }\n  return ptr_buffer;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "param_1": "ptr_param",
                "param_2": "ptr_buffer",
                "param_3": "size",
                "piVar1": "ptr_temp",
                "iVar2": "temp",
                "piVar3": "ptr_result",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "uVar6": "temp3",
                "piVar7": "ptr_data",
                "uVar8": "aligned_size",
                "uVar9": "aligned_buffer_size",
                "uVar10": "temp4",
                "iVar11": "temp5"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 151410,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}