{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_null_terminator_08000178",
            "code": "\nchar * find_null_terminator_08000178(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_null_terminator_08000178",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "call_software_interrupt_08000188",
            "code": "\nvoid callSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "call_software_interrupt_08000188"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_interrupt_0800018c",
            "code": "\nundefined4 execute_Interrupt_0800018c(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = call_software_interrupt_08000188(1,value1,0,0,value4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_interrupt_0800018c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_parameter_08000214",
            "code": "\nvoid process_parameter_08000214(uint input_value,undefined4 output_value,undefined4 first_flag,undefined4 second_flag)\n\n{\n  bool is_valid;\n  int result;\n  \n  if (0x3b < (int)input_value) {\n    return;\n  }\n  result = get_memory_value_08002fa0(&DAT_200003d4,input_value,first_flag,second_flag,second_flag);\n  if (result == 3) {\n    if (input_value < 0x3c) {\n      if ((&DAT_0800a908)[input_value] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character_index_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character_index_080036ac((int)(char)(&DAT_0800a908)[input_value]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_character_match_0800738a((int)(char)(&DAT_0800a908)[input_value],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_character_080088e0(input_value,output_value);\n    }\n    store_value_08002fc2(&DAT_200003d4,input_value,output_value);\n  }\n  else if (result == 4) {\n    if (input_value < 0x3c) {\n      if ((&DAT_0800a908)[input_value] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = find_character_index_080036ac();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = find_character_index_080036ac((int)(char)(&DAT_0800a908)[input_value]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      update_array_value_and_interpolate_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[input_value] * 3,output_value);\n    }\n    store_value_08002fc2(&DAT_200003d4,input_value,output_value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_parameter_08000214",
                "param_1": "input_value",
                "param_2": "output_value",
                "param_3": "first_flag",
                "param_4": "second_flag",
                "bVar1": "is_valid",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "process_input_0800021a",
            "code": "\nvoid process_input_0800021a(uint input_index,undefined4 value,undefined4 param3,undefined4 param4)\n\n{\n  bool found_character;\n  int result;\n  \n  result = get_memory_value(&DAT_200003d4,input_index,param3,param4,param4);\n  if (result == 3) {\n    if (input_index < 0x3c) {\n      if ((&DAT_0800a908)[input_index] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character_index((int)(char)(&DAT_0800a908)[input_index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_character_match((int)(char)(&DAT_0800a908)[input_index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_character(input_index,value);\n    }\n    store_value(&DAT_200003d4,input_index,value);\n  }\n  else if (result == 4) {\n    if (input_index < 0x3c) {\n      if ((&DAT_0800a908)[input_index] == -1) {\n        found_character = false;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          found_character = false;\n        }\n        else {\n          result = find_character_index((int)(char)(&DAT_0800a908)[input_index]);\n          if (result == 1) {\n            found_character = false;\n          }\n          else {\n            found_character = true;\n          }\n        }\n      }\n    }\n    else {\n      found_character = false;\n    }\n    if (found_character) {\n      update_array_value_and_interpolate(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[input_index] * 3,value);\n    }\n    store_value(&DAT_200003d4,input_index,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "process_input_0800021a",
                "param_1": "input_index",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "found_character",
                "iVar2": "result",
                "get_memory_value_08002fa0": "get_memory_value",
                "find_character_index_080036ac": "find_character_index",
                "check_character_match_0800738a": "check_character_match",
                "process_character_080088e0": "process_character",
                "store_value_08002fc2": "store_value",
                "update_array_value_and_interpolate_080026b0": "update_array_value_and_interpolate"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid updateData_08000488(uint index,int flag)\n\n{\n  undefined4 result;\n  \n  if ((int)index < 0xe) {\n    if (flag == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      result = process_data_08008880();\n      execute_decoded_function_08002ef2(&DAT_200003d4,index,result);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "index",
                "param_2": "flag",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_collection_080004d4",
            "code": "\nvoid initialize_data_collection_080004d4(int condition,int value)\n\n{\n  int iteration;\n  undefined *data_ptr;\n  \n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    data_ptr = &DAT_2000022c;\n    for (iteration = 0xb; -1 < iteration; iteration = iteration + -1) {\n      initialize_data_08002580(data_ptr);\n      data_ptr = data_ptr + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_collection_080004d4",
                "param_1": "condition",
                "param_2": "value",
                "iVar1": "iteration",
                "puVar2": "data_ptr"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "initialize_servo_device_08000500",
            "code": "\nvoid initializeServoDevice_08000500(int servoIndex,int param2,int param3,undefined4 param4)\n\n{\n  if (0xb < DAT_200001ed) {\n    displayErrorMessage(&DAT_200003d4,\"Max servos attached\",param3,param4,param4);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < param2) && (0 < param3)) {\n    processAndInitDevice(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex,param2,param3);\n    return;\n  }\n  initDevice(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "initialize_servo_device_08000500",
                "param_1": "servoIndex",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "decoded_and_executed_function_08002f14": "displayErrorMessage",
                "process_and_initialize_device_080025ac": "processAndInitDevice",
                "initialize_device_08002634": "initDevice"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "initialize_flag_08000588",
            "code": "\nvoid initialize_flag_08000588(int flag_index)\n\n{\n  initialize_flag_08000588_check_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[flag_index] * 3);\n  if (((&DAT_200001f0)[flag_index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[flag_index];\n  }\n  (&DAT_200001f0)[flag_index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "initialize_flag_08000588",
                "param_1": "flag_index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "process_pin_080005f8",
            "code": "\nvoid processPin_080005f8(uint pin,int mode)\n\n{\n  int memoryValue;\n  char flag;\n  bool isValid;\n  uint shiftedValue;\n  \n  memoryValue = get_memory_value_08002fa0(&DAT_200003d4,pin);\n  if (memoryValue != 0x7f) {\n    memoryValue = get_memory_value_08002fa0(&DAT_200003d4,pin);\n    if (memoryValue == 6) {\n      if (DAT_20000170 == '\\0') {\n        flag = '\\0';\n      }\n      else {\n        flag = DAT_20000170;\n        if (mode == 6) {\n          flag = '\\0';\n        }\n      }\n    }\n    else {\n      flag = '\\0';\n    }\n    if (flag != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (pin < 0x3c) {\n      if ((&DAT_0800a908)[pin] == -1) {\n        isValid = false;\n      }\n      else {\n        memoryValue = find_character_index_080036ac();\n        if (memoryValue == 0) {\n          isValid = false;\n        }\n        else {\n          memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n          if (memoryValue == 1) {\n            isValid = false;\n          }\n          else if (mode == 4) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((byte)(&DAT_200001f0)[pin] < 0xc) {\n        memoryValue = bitwise_shift_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin] * 3);\n      }\n      else {\n        memoryValue = 0;\n      }\n      if (memoryValue != 0) {\n        initialize_flag_08000588(pin);\n      }\n    }\n    shiftedValue = pin - 0x2e & 0xff;\n    if (shiftedValue < 0xe) {\n      if (pin < 0x3c) {\n        memoryValue = (int)(char)(&DAT_0800a908)[pin];\n      }\n      else {\n        memoryValue = -1;\n      }\n      memoryValue = find_character_index_080036ac(memoryValue);\n      if (memoryValue == 0) {\n        isValid = false;\n      }\n      else {\n        if (pin < 0x3c) {\n          memoryValue = (int)(char)(&DAT_0800a908)[pin];\n        }\n        else {\n          memoryValue = -1;\n        }\n        memoryValue = find_character_index_080036ac(memoryValue);\n        if (memoryValue == 1) {\n          isValid = false;\n        }\n        else {\n          isValid = true;\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      update_data_08000488(shiftedValue,mode == 2);\n    }\n    if (pin < 0x3c) {\n      if ((&DAT_0800a908)[pin] == -1) {\n        isValid = false;\n      }\n      else {\n        memoryValue = find_character_index_080036ac();\n        if (memoryValue == 0) {\n          isValid = false;\n        }\n        else {\n          memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n          if (memoryValue == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pin >> 3] = (&DAT_20000174)[pin >> 3] | (byte)(1 << (pin & 7));\n      }\n      else {\n        (&DAT_20000174)[pin >> 3] = (&DAT_20000174)[pin >> 3] & ~(byte)(1 << (pin & 7));\n      }\n    }\n    store_value_08002fc2(&DAT_200003d4,pin,0);\n    switch(mode) {\n    case 0:\n      if (pin < 0x3c) {\n        if ((&DAT_0800a908)[pin] == -1) {\n          isValid = false;\n        }\n        else {\n          memoryValue = find_character_index_080036ac();\n          if (memoryValue == 0) {\n            isValid = false;\n          }\n          else {\n            memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n            if (memoryValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        process_devices_08008990(pin,0);\n        update_character_08002fa8(&DAT_200003d4,pin,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin < 0x3c) {\n        if ((&DAT_0800a908)[pin] == -1) {\n          isValid = false;\n        }\n        else {\n          memoryValue = find_character_index_080036ac();\n          if (memoryValue == 0) {\n            isValid = false;\n          }\n          else {\n            memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n            if (memoryValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        memoryValue = get_memory_value_08002fa0(&DAT_200003d4,pin);\n        if (memoryValue == 3) {\n          update_value_if_bit_set_08008a24(pin,0);\n        }\n        process_devices_08008990(pin,1);\n        update_character_08002fa8(&DAT_200003d4,pin,1);\n        return;\n      }\n      break;\n    case 2:\n      if (shiftedValue < 0xe) {\n        if (pin < 0x3c) {\n          memoryValue = (int)(char)(&DAT_0800a908)[pin];\n        }\n        else {\n          memoryValue = -1;\n        }\n        memoryValue = find_character_index_080036ac(memoryValue);\n        if (memoryValue == 0) {\n          isValid = false;\n        }\n        else {\n          if (pin < 0x3c) {\n            memoryValue = (int)(char)(&DAT_0800a908)[pin];\n          }\n          else {\n            memoryValue = -1;\n          }\n          memoryValue = find_character_index_080036ac(memoryValue);\n          if (memoryValue == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        if (pin < 0x3c) {\n          if ((&DAT_0800a908)[pin] == -1) {\n            isValid = false;\n          }\n          else {\n            memoryValue = find_character_index_080036ac();\n            if (memoryValue == 0) {\n              isValid = false;\n            }\n            else {\n              memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n              if (memoryValue == 1) {\n                isValid = false;\n              }\n            }\n          }\n        }\n        else {\n          isValid = false;\n        }\n        if (isValid) {\n          process_devices_08008990(pin,0);\n        }\n        update_character_08002fa8(&DAT_200003d4,pin,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin < 0x3c) {\n        if ((&DAT_0800a908)[pin] == -1) {\n          memoryValue = 0;\n        }\n        else {\n          memoryValue = find_character_index_080036ac();\n          if (memoryValue == 0) {\n            memoryValue = 0;\n          }\n          else {\n            memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n            if (memoryValue == 1) {\n              memoryValue = 0;\n            }\n            else {\n              memoryValue = check_character_match_0800738a((int)(char)(&DAT_0800a908)[pin],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        memoryValue = 0;\n      }\n      if (memoryValue != 0) {\n        process_devices_08008990(pin,1);\n        process_character_080088e0(pin,0);\n        update_character_08002fa8(&DAT_200003d4,pin,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin < 0x3c) {\n        if ((&DAT_0800a908)[pin] == -1) {\n          isValid = false;\n        }\n        else {\n          memoryValue = find_character_index_080036ac();\n          if (memoryValue == 0) {\n            isValid = false;\n          }\n          else {\n            memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n            if (memoryValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        update_character_08002fa8(&DAT_200003d4,pin,4);\n        if (((byte)(&DAT_200001f0)[pin] != 0xff) &&\n           (memoryValue = bitwise_shift_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin] * 3),\n           memoryValue != 0)) {\n          isValid = false;\n        }\n        if (isValid) {\n          initialize_servo_device_08000500(pin,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      decoded_and_executed_function_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pin < 0x3c) {\n        if ((&DAT_0800a908)[pin] == -1) {\n          memoryValue = 0;\n        }\n        else {\n          memoryValue = find_character_index_080036ac();\n          if (memoryValue == 0) {\n            memoryValue = 0;\n          }\n          else {\n            memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n            if (memoryValue == 1) {\n              memoryValue = 0;\n            }\n            else {\n              memoryValue = check_character_match_0800738a((int)(char)(&DAT_0800a908)[pin],&DAT_0800a69c);\n              if (memoryValue == 0) {\n                memoryValue = check_character_match_0800738a((int)(char)(&DAT_0800a908)[pin],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        memoryValue = 0;\n      }\n      if (memoryValue != 0) {\n        update_character_08002fa8(&DAT_200003d4,pin,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin < 0x3c) {\n        if ((&DAT_0800a908)[pin] == -1) {\n          isValid = false;\n        }\n        else {\n          memoryValue = find_character_index_080036ac();\n          if (memoryValue == 0) {\n            isValid = false;\n          }\n          else {\n            memoryValue = find_character_index_080036ac((int)(char)(&DAT_0800a908)[pin]);\n            if (memoryValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        process_devices_08008990(pin,2);\n        update_character_08002fa8(&DAT_200003d4,pin,0xb);\n        store_value_08002fc2(&DAT_200003d4,pin,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "process_pin_080005f8",
                "param_1": "pin",
                "param_2": "mode",
                "iVar1": "memoryValue",
                "cVar2": "flag",
                "bVar3": "isValid",
                "uVar4": "shiftedValue"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "process_pin_check_08000a64",
            "code": "\nvoid process_pin_check_08000a64(void)\n\n{\n  int index;\n  uint loop_counter;\n  \n  for (loop_counter = 0; loop_counter < 0x3c; loop_counter = loop_counter + 1 & 0xff) {\n    if (loop_counter < 0x3c) {\n      if ((&DAT_0800a908)[loop_counter] == -1) {\n        index = 0;\n      }\n      else {\n        index = find_character_index_080036ac();\n        if (index == 0) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[loop_counter]);\n          if (index == 1) {\n            index = 0;\n          }\n          else {\n            index = check_character_match_0800738a((int)(char)(&DAT_0800a908)[loop_counter],&DAT_0800a69c);\n            if (index == 0) {\n              index = check_character_match_0800738a((int)(char)(&DAT_0800a908)[loop_counter],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      index = 0;\n    }\n    if (index != 0) {\n      process_pin_080005f8(loop_counter,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_device_08002a26(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "process_pin_check_08000a64",
                "iVar1": "index",
                "uVar2": "loop_counter"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_pin_process_08000aec",
            "code": "\nvoid initializePinProcess_08000aec(void)\n\n{\n  bool isValidCharacter;\n  int characterIndex;\n  uint index;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data_080005e0();\n  }\n  for (index = 0; index < 5; index = index + 1 & 0xff) {\n    (&DAT_200001e8)[index] = 0;\n    (&DAT_20000174)[index] = 0;\n    (&DAT_20000180)[index] = 0;\n  }\n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if ((index - 0x2e & 0xff) < 0xe) {\n      if (index < 0x3c) {\n        characterIndex = (int)(char)(&DAT_0800a908)[index];\n      }\n      else {\n        characterIndex = -1;\n      }\n      characterIndex = find_character_index_080036ac(characterIndex);\n      if (characterIndex == 0) {\n        isValidCharacter = false;\n      }\n      else {\n        if (index < 0x3c) {\n          characterIndex = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          characterIndex = -1;\n        }\n        characterIndex = find_character_index_080036ac(characterIndex);\n        if (characterIndex == 1) {\n          isValidCharacter = false;\n        }\n        else {\n          isValidCharacter = true;\n        }\n      }\n    }\n    else {\n      isValidCharacter = false;\n    }\n    if (isValidCharacter) {\n      process_pin_080005f8(index,2);\n    }\n    else {\n      if ((((index < 0x3c) && ((&DAT_0800a908)[index] != -1)) &&\n          (characterIndex = find_character_index_080036ac(), characterIndex != 0)) &&\n         (characterIndex = find_character_index_080036ac((int)(char)(&DAT_0800a908)[index]), characterIndex != 1)) {\n        isValidCharacter = true;\n      }\n      if (isValidCharacter) {\n        process_pin_080005f8(index,1);\n      }\n    }\n    (&DAT_200001f0)[index] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_pin_process_08000aec",
                "bVar1": "isValidCharacter",
                "iVar2": "characterIndex",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "execute_operation_08000be8",
            "code": "\nvoid executeOperation_08000be8(int index,uint mask,int condition,undefined4 param)\n\n{\n  undefined1 *data1;\n  undefined1 *data2;\n  \n  data1 = &DAT_20000174;\n  data2 = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((condition != 0) ||\n     (data1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], data2 != data1)) {\n    decode_and_execute_08002efe(&DAT_200003d4,index,data2,data1,param);\n    (&DAT_20000180)[index] = (char)data2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "execute_operation_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "param",
                "puVar1": "data1",
                "puVar2": "data2"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "process_flags_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid processFlags_08000ef8(void)\n\n{\n  byte flagByte;\n  int index;\n  bool status;\n  byte result;\n  \n  flagByte = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(3);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_status_08008a6c(0);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(2);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(1);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(10);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(2);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x13);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(3);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x15);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(4);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x14);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(5);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x1a);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(6);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(8);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(7);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x80;\n    }\n    execute_operation_08000be8(0,result);\n  }\n  flagByte = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(9);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_status_08008a6c(8);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x27);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(9);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x16);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(10);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(7);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0xb);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(6);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0xc);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(5);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0xd);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x19);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0xe);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x18);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0xf);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x80;\n    }\n    execute_operation_08000be8(1,result,0);\n  }\n  flagByte = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(0x2a);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x10);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2c);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x11);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xd);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x13);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xe);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x14);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xf);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x15);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x17);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x16);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2d);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x17);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x80;\n    }\n    execute_operation_08000be8(2,result,0);\n  }\n  flagByte = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(0x2e);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x18);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2f);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x19);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x30);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x1a);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x31);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x1b);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x22);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x1c);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x23);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x1d);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2b);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x1e);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x32);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x1f);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x80;\n    }\n    execute_operation_08000be8(3,result,0);\n  }\n  flagByte = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(0x29);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x20);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x28);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x21);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x26);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x22);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x25);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x23);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xc);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x24);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xb);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x25);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x1c);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x26);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      status = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x1b);\n      if (index == 1) {\n        status = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        status = false;\n      }\n      else {\n        index = check_bit_status_08008a6c(0x27);\n        if (index == 0) {\n          status = false;\n        }\n        else {\n          status = true;\n        }\n      }\n    }\n    if (status) {\n      result = result | 0x80;\n    }\n    execute_operation_08000be8(4,result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "process_flags_08000ef8",
                "bVar1": "flagByte",
                "iVar2": "index",
                "bVar3": "status",
                "bVar4": "result"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  processFilePath(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,label1Address);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,label2Address);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,label3Address);\n  initializeData(&DAT_200003d4,0xf0,0x8001cd1);\n  updateData2(&DAT_200003d4,0xff,0x8000aed);\n  initializeAndProcessDevices(&DAT_200003d4,0xe100);\n  initializePinProcess();\n  executeInterrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "process_file_path_08002e44": "processFilePath",
                "&LAB_080002ec_1": "label1Address",
                "update_data_08002f2c": "updateData",
                "&LAB_08000c18_1": "label2Address",
                "&LAB_080001a8_1": "label3Address",
                "initialize_data_08002f94": "initializeData",
                "update_data_08002f84": "updateData2",
                "initialize_and_process_devices_08003048": "initializeAndProcessDevices",
                "initialize_pin_process_08000aec": "initializePinProcess",
                "execute_interrupt_0800018c": "executeInterrupt"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_and_process_data_08001bf8",
            "code": "\nvoid copy_and_process_data_08001bf8(undefined4 source_data,undefined4 param_2,undefined4 destination_data,undefined4 size)\n\n{\n  copy_and_process_data_08001bf8_0800288c(&DAT_20000314,source_data,destination_data,size,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_and_process_data_08001bf8",
                "param_1": "source_data",
                "param_3": "destination_data",
                "param_4": "size"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "get_next_byte_from_data_08001c08",
            "code": "\nundefined getNextByteFromData_08001c08(void)\n\n{\n  undefined nextByte;\n  \n  nextByte = getNextByteFunction(&DAT_20000314);\n  return nextByte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "get_next_byte_from_data_08001c08",
                "uVar1": "nextByte",
                "get_next_byte_08002720": "getNextByteFunction"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_received_data_08001c18",
            "code": "\nvoid processReceivedData_08001c18(undefined4 deviceId,uint byteCount,int expectedCount,undefined4 additionalParam)\n\n{\n  undefined nextByte;\n  int receivedCount;\n  int difference;\n  bool hasData;\n  \n  if (byteCount == 0xffffffff) {\n    byteCount = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,deviceId);\n    copy_and_process_data_08001bf8(byteCount & 0xff);\n    process_data_08002a58(&DAT_20000314,additionalParam);\n  }\n  process_data_08002c14(&DAT_20000314,deviceId,expectedCount);\n  receivedCount = calculate_difference_0800270c(&DAT_20000314);\n  if (expectedCount < receivedCount) {\n    decoded_and_executed_function_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    receivedCount = calculate_difference_0800270c(&DAT_20000314);\n    if (receivedCount < expectedCount) {\n      decoded_and_executed_function_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)deviceId;\n  DAT_20000131 = (undefined)byteCount;\n  receivedCount = 0;\n  while( true ) {\n    if (receivedCount < expectedCount) {\n      difference = calculate_difference_0800270c(&DAT_20000314);\n      if (difference == 0) {\n        hasData = false;\n      }\n      else {\n        hasData = true;\n      }\n    }\n    else {\n      hasData = false;\n    }\n    if (!hasData) break;\n    nextByte = get_next_byte_from_data_08001c08();\n    (&DAT_20000132)[receivedCount] = nextByte;\n    receivedCount = receivedCount + 1;\n  }\n  decode_and_execute_process_08002f0a(&DAT_200003d4,0x77,expectedCount + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "param_1": "deviceId",
                "param_2": "byteCount",
                "param_3": "expectedCount",
                "param_4": "additionalParam",
                "uVar1": "nextByte",
                "iVar2": "receivedCount",
                "iVar3": "difference",
                "bVar4": "hasData"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_command_08001cd0",
            "code": "\nvoid processCommand_08001cd0(undefined4 command,int length,byte *data,undefined4 param)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 result;\n  byte byte4;\n  char char1;\n  int index;\n  int index2;\n  uint num1;\n  uint num2;\n  int index3;\n  bool flag;\n  \n  switch(command) {\n  case 0x69:\n    execute_callback_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_08002f1e(&DAT_200003d4,0x6a);\n    for (num1 = 0; num1 < 0x3c; num1 = num1 + 1 & 0xff) {\n      num2 = num1 - 0x2e & 0xff;\n      if (num2 < 0xe) {\n        if (num1 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[num1];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index_080036ac(index);\n        if (index == 0) {\n          num2 = 0x7f;\n        }\n        else {\n          if (num1 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[num1];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index_080036ac(index);\n          if (index == 1) {\n            num2 = 0x7f;\n          }\n        }\n      }\n      else {\n        num2 = 0x7f;\n      }\n      execute_callback_08002f1e(&DAT_200003d4,num2);\n    }\n    execute_callback_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_callback_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_08002f1e(&DAT_200003d4,0x6c);\n    for (num1 = 0; num1 < 0x3c; num1 = num1 + 1 & 0xff) {\n      if (num1 < 0x3c) {\n        if ((&DAT_0800a908)[num1] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[num1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_08002f1e(&DAT_200003d4,0);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n        execute_callback_08002f1e(&DAT_200003d4,0xb);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n      }\n      if ((num1 - 0x2e & 0xff) < 0xe) {\n        if (num1 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[num1];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index_080036ac(index);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          if (num1 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[num1];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index_080036ac(index);\n          if (index == 1) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_08002f1e(&DAT_200003d4,2);\n        execute_callback_08002f1e(&DAT_200003d4,10);\n      }\n      if (num1 < 0x3c) {\n        if ((&DAT_0800a908)[num1] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[num1]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = check_character_match_0800738a((int)(char)(&DAT_0800a908)[num1],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_callback_08002f1e(&DAT_200003d4,3);\n        execute_callback_08002f1e(&DAT_200003d4,8);\n      }\n      if (num1 < 0x3c) {\n        if ((&DAT_0800a908)[num1] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[num1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_08002f1e(&DAT_200003d4,4);\n        execute_callback_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (num1 < 0x3c) {\n        if ((&DAT_0800a908)[num1] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[num1]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = check_character_match_0800738a((int)(char)(&DAT_0800a908)[num1],&DAT_0800a69c);\n              if (index == 0) {\n                index = check_character_match_0800738a((int)(char)(&DAT_0800a908)[num1],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_callback_08002f1e(&DAT_200003d4,6);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n      }\n      execute_callback_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_callback_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byte1 = *data;\n      execute_callback_08002f1e(&DAT_200003d4,0xf0);\n      execute_callback_08002f1e(&DAT_200003d4,0x6e);\n      execute_callback_08002f1e(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        result = get_memory_value_08002fa0(&DAT_200003d4,byte1);\n        execute_callback_08002f1e(&DAT_200003d4,result);\n        num1 = get_element_at_offset_08002fba(&DAT_200003d4,byte1);\n        execute_callback_08002f1e(&DAT_200003d4,num1 & 0x7f);\n        num1 = get_element_at_offset_08002fba(&DAT_200003d4,byte1);\n        if ((num1 & 0xff80) != 0) {\n          index = get_element_at_offset_08002fba(&DAT_200003d4,byte1);\n          execute_callback_08002f1e(&DAT_200003d4,(uint)(index << 0x12) >> 0x19);\n        }\n        num1 = get_element_at_offset_08002fba(&DAT_200003d4,byte1);\n        if ((num1 & 0xc000) != 0) {\n          index = get_element_at_offset_08002fba(&DAT_200003d4,byte1);\n          execute_callback_08002f1e(&DAT_200003d4,(uint)(index << 0xb) >> 0x19);\n        }\n      }\n      execute_callback_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      num1 = (uint)data[1];\n      if (2 < length) {\n        num1 = num1 | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        num1 = num1 | (uint)data[3] << 0xe;\n      }\n      process_parameter_08000214(*data,num1);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      num1 = (uint)*data;\n      byte1 = data[1];\n      byte4 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (num1 < 0x3c) {\n        if ((&DAT_0800a908)[num1] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[num1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        if ((byte)(&DAT_200001f0)[num1] < 0xc) {\n          index = bitwise_shift_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[num1] * 3);\n        }\n        else {\n          index = 0;\n        }\n        if (index != 0) {\n          initialize_flag_08000588(num1);\n        }\n        initialize_servo_device_08000500(num1,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        process_pin_080005f8(num1,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      decoded_and_executed_function_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,param);\n      return;\n    }\n    byte2 = *data;\n    flag = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,byte2);\n        for (num1 = 2; (int)num1 < length; num1 = num1 + 2 & 0xff) {\n          copy_and_process_data_08001bf8(data[num1 + 1] * -0x80 + data[num1]);\n        }\n        process_data_wrapper_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          index = (uint)data[2] + (uint)data[3] * 0x80;\n          char1 = data[4] + data[5] * -0x80;\n        }\n        else {\n          char1 = data[2] + data[3] * -0x80;\n          index = -1;\n        }\n        process_received_data_08001c18(byte2,index,char1);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            index = (uint)data[2] + (uint)data[3] * 0x80;\n            char1 = data[4] + data[5] * -0x80;\n          }\n          else {\n            char1 = data[2] + data[3] * -0x80;\n            index = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          index2 = (int)DAT_20000004;\n          index3 = index2 * 0xc;\n          (&DAT_20000188)[index3] = byte2;\n          (&DAT_2000018c)[index2 * 3] = index;\n          (&DAT_20000190)[index3] = char1;\n          (&DAT_20000191)[index3] = flag;\n          return;\n        }\n        decoded_and_executed_function_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,flag,param);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (num1 = 0; index = DAT_20000004 + 1, (int)num1 < index; num1 = num1 + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[num1 * 0xc]) goto LAB_08001e66;\n      }\n      num1 = 0;\nLAB_08001e66:\n      for (; (int)num1 < index; num1 = num1 + 1 & 0xff) {\n        if (num1 < 8) {\n          index2 = (num1 + 1) * 0xc;\n          index3 = num1 * 0xc;\n          (&DAT_20000188)[index3] = (&DAT_20000188)[index2];\n          (&DAT_2000018c)[num1 * 3] = (&DAT_2000018c)[(num1 + 1) * 3];\n          (&DAT_20000190)[index3] = (&DAT_20000190)[index2];\n          (&DAT_20000191)[index3] = (&DAT_20000191)[index2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    index = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (index != 0)) {\n      DAT_2000012c = index;\n    }\n    if (DAT_20000170 == '\\0') {\n      process_pin_check_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_command_08001cd0",
                "param_1": "command",
                "param_2": "length",
                "param_3": "data",
                "param_4": "param",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "result",
                "bVar5": "byte4",
                "cVar6": "char1",
                "iVar7": "index",
                "iVar8": "index2",
                "uVar9": "num1",
                "uVar10": "num2",
                "iVar11": "index3",
                "bVar12": "flag"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_data_080022f8",
            "code": "\nvoid processData_080022f8(void)\n\n{\n  bool isValid;\n  int returnValue;\n  undefined4 functionResult;\n  uint index;\n  uint shiftedIndex;\n  \n  process_flags_08000ef8();\n  while (returnValue = execute_function_08002ec4(&DAT_200003d4), returnValue != 0) {\n    process_and_handle_input_08002ed2(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_global_data_08008abc();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      shiftedIndex = index - 0x2e & 0xff;\n      if (shiftedIndex < 0xe) {\n        if (index < 0x3c) {\n          returnValue = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          returnValue = -1;\n        }\n        returnValue = find_character_index_080036ac(returnValue);\n        if (returnValue == 0) {\n          isValid = false;\n        }\n        else {\n          if (index < 0x3c) {\n            returnValue = (int)(char)(&DAT_0800a908)[index];\n          }\n          else {\n            returnValue = -1;\n          }\n          returnValue = find_character_index_080036ac(returnValue);\n          if (returnValue == 1) {\n            isValid = false;\n          }\n          else {\n            returnValue = get_memory_value_08002fa0(&DAT_200003d4,index);\n            if (returnValue == 2) {\n              isValid = true;\n            }\n            else {\n              isValid = false;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if ((isValid) && ((DAT_20000114 >> shiftedIndex & 1U) != 0)) {\n        functionResult = process_data_08008880(shiftedIndex);\n        execute_decoded_function_08002ef2(&DAT_200003d4,shiftedIndex,functionResult);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (index = 0; (int)index < DAT_20000004 + 1; index = index + 1 & 0xff) {\n        returnValue = index * 0xc;\n        process_received_data_08001c18((&DAT_20000188)[returnValue],(&DAT_2000018c)[index * 3],(&DAT_20000190)[returnValue],\n                     (&DAT_20000191)[returnValue]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "iVar2": "returnValue",
                "uVar3": "functionResult",
                "uVar4": "index",
                "uVar5": "shiftedIndex",
                "bVar1": "isValid"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_flag_set_08002400",
            "code": "\nundefined4 check_flag_set_08002400(int input)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(input * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_flag_set_08002400",
                "param_1": "input",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_settings_0800242c",
            "code": "\nvoid initialize_settings_0800242c(undefined4 config_param,undefined4 timeout_param,undefined4 value_param,undefined4 callback_param)\n\n{\n  init_settings_helper(config_param,60000,0x5dc,&label_param,callback_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_settings_0800242c",
                "param_1": "config_param",
                "param_2": "timeout_param",
                "param_3": "value_param",
                "param_4": "callback_param",
                "initialize_settings_08007648": "init_settings_helper",
                "LAB_08002444_1": "label_param"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_timer_08002578",
            "code": "\nvoid initialize_timer_08002578(void)\n\n{\n  initialize_timer_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_timer_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *dataPtr)\n\n{\n  char nextData;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *dataPtr = 0xff;\n    return;\n  }\n  nextData = DAT_20000250 + 1;\n  *dataPtr = DAT_20000250;\n  DAT_20000250 = nextData;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "dataPtr",
                "uVar2": "dataSize",
                "cVar1": "nextData"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "process_and_initialize_device_080025ac",
            "code": "\nbyte process_and_initialize_device_080025ac(byte *device_data,uint device_identifier,int parameter_1,int parameter_2)\n\n{\n  uint modified_device_data;\n  uint device_index;\n  uint division_result;\n  int temp_value;\n  \n  if (*device_data < 0xc) {\n    process_devices(device_identifier,1,parameter_1,*device_data,parameter_2);\n    device_index = (uint)*device_data;\n    modified_device_data = (byte)(&DAT_20000258)[device_index * 8] & 0xffffffc0 | device_identifier & 0x3f;\n    (&DAT_20000258)[device_index * 8] = (char)modified_device_data;\n    temp_value = -parameter_1 + 0x220;\n    if (temp_value < 0) {\n      temp_value = -parameter_1 + 0x223;\n    }\n    device_data[1] = (byte)((uint)(temp_value << 0x16) >> 0x18);\n    temp_value = -parameter_2 + 0x960;\n    if (temp_value < 0) {\n      temp_value = -parameter_2 + 0x963;\n    }\n    device_data[2] = (byte)((uint)(temp_value << 0x16) >> 0x18);\n    division_result = *device_data / 0xc;\n    temp_value = check_flag_set(division_result,modified_device_data,device_index,(uint)*device_data * -0x55555555);\n    if (temp_value == 0) {\n      DAT_200002fc = (undefined)division_result;\n      initialize_settings();\n    }\n    (&DAT_20000258)[(uint)*device_data * 8] = (&DAT_20000258)[(uint)*device_data * 8] | 0x40;\n  }\n  return *device_data;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "process_and_initialize_device_080025ac",
                "param_1": "device_data",
                "param_2": "device_identifier",
                "param_3": "parameter_1",
                "param_4": "parameter_2",
                "uVar1": "modified_device_data",
                "uVar2": "device_index",
                "uVar3": "division_result",
                "iVar4": "temp_value",
                "process_devices_08008990": "process_devices",
                "check_flag_set_08002400": "check_flag_set",
                "initialize_settings_0800242c": "initialize_settings"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "initialize_device_08002634",
            "code": "\nvoid initialize_device_08002634(undefined4 device_id,undefined4 device_type,undefined4 buffer_size,undefined4 buffer_address)\n\n{\n  initialize_device_08002634_process(device_id,device_type,0x220,0x960,buffer_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "initialize_device_08002634",
                "param_1": "device_id",
                "param_2": "device_type",
                "param_3": "buffer_size",
                "param_4": "buffer_address",
                "process_and_initialize_device_080025ac": "initialize_device_process"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "initialize_flag_check_08002644",
            "code": "\nvoid initialize_flag_check_08002644(byte *byte_array,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byte_value;\n  uint first_byte;\n  int result;\n  \n  first_byte = (uint)*byte_array;\n  byte_value = (&DAT_20000258)[first_byte * 8];\n  (&DAT_20000258)[first_byte * 8] = byte_value & 0xbf;\n  result = check_flag_set_08002400(first_byte / 0xc,param_2,byte_value & 0xbf,first_byte * -0x55555555,param_4);\n  if (result == 0) {\n    initialize_timer_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "initialize_flag_check_08002644",
                "param_1": "byte_array",
                "bVar1": "byte_value",
                "uVar2": "first_byte",
                "iVar3": "result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_array_value_0800267c",
            "code": "\nvoid updateArrayValue_0800267c(byte *arrayPointer,int value)\n\n{\n  int index;\n  \n  if (*arrayPointer < 0xc) {\n    index = (0x88 - (char)arrayPointer[1]) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - (char)arrayPointer[2]) * 4,\n       value == index || value + (600 - (char)arrayPointer[2]) * -4 < 0 != SBORROW4(value,index)))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*arrayPointer * 8) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_array_value_0800267c",
                "param_1": "arrayPointer",
                "param_2": "value",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "update_array_value_and_interpolate_080026b0",
            "code": "\nvoid updateArrayValueAndInterpolate_080026b0(int inputArray,int inputValue)\n\n{\n  if (inputValue < 0x220) {\n    if (inputValue < 0) {\n      inputValue = 0;\n    }\n    else if (0xb4 < inputValue) {\n      inputValue = 0xb4;\n    }\n    inputValue = calculateInterpolation(inputValue,0,0xb4,(0x88 - *(char *)(inputArray + 1)) * 4,\n                           (600 - *(char *)(inputArray + 2)) * 4);\n  }\n  updateArrayValue(inputArray,inputValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "update_array_value_and_interpolate_080026b0",
                "param_1": "inputArray",
                "param_2": "inputValue",
                "calculate_interpolation_08008ef4": "calculateInterpolation",
                "update_array_value_0800267c": "updateArrayValue"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "bitwise_shift_080026f8",
            "code": "\nuint bitwiseShift_080026f8(byte *byteArray)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*byteArray * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "bitwise_shift_080026f8",
                "param_1": "byteArray"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "get_next_byte_08002720",
            "code": "\nuint get_next_byte_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "process_data_080027f0",
            "code": "\nuint process_data_080027f0(int input_address,undefined4 data_address,uint data_length)\n\n{\n  int copy_result;\n  uint new_data_length;\n  \n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_and_increment_08007ede(input_address + 0x14,data_address,data_length & 0xffff);\n    if (copy_result == 0) {\n      return data_length;\n    }\n    return 0;\n  }\n  new_data_length = DAT_200003b8 + data_length;\n  if (DAT_200003c5 < new_data_length) {\n    if (new_data_length < 0x20) {\n      new_data_length = 0x20;\n    }\n    DAT_200003cc = process_data_080027f0_08009908(DAT_200003cc,new_data_length);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)new_data_length;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(input_address + 4) = 1;\n    return 0;\n  }\n  copy_data_080091b0((uint)DAT_200003b6 + DAT_200003cc,data_address,data_length);\n  DAT_200003b6 = DAT_200003b6 + (char)data_length;\n  DAT_200003b8 = DAT_200003b6;\n  return data_length;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "input_address",
                "param_2": "data_address",
                "param_3": "data_length",
                "iVar1": "copy_result",
                "uVar2": "new_data_length"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_and_process_data_0800288c",
            "code": "\nundefined4 copyAndProcessData_0800288c(int inputAddress,undefined inputValue)\n\n{\n  undefined4 returnValue;\n  int copyResult;\n  uint newDataSize;\n  undefined newData;\n  \n  newData = inputValue;\n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_and_increment_08007ede(inputAddress + 0x14,&newData,1);\n    if (copyResult == 0) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    newDataSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newDataSize) {\n      if (newDataSize < 0x20) {\n        newDataSize = 0x20;\n      }\n      DAT_200003cc = process_data_08009908(DAT_200003cc,newDataSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newDataSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(inputAddress + 4) = 1;\n      returnValue = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = newData;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      returnValue = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_and_process_data_0800288c",
                "param_1": "inputAddress",
                "param_2": "inputValue",
                "uVar1": "returnValue",
                "iVar2": "copyResult",
                "uVar3": "newDataSize",
                "local_11": "newData"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_param_0800291c",
            "code": "\nvoid initializeParam_0800291c(undefinedValue4 *paramArray)\n\n{\n  paramArray[1] = 0;\n  paramArray[2] = 1000;\n  *paramArray = &PTR_copy_and_process_data_0800288c_1_0800a5a0;\n  *(undefinedValue *)(paramArray + 0x1b) = 0x19;\n  *(undefinedValue *)((int)paramArray + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_param_0800291c",
                "param_1": "paramArray",
                "undefined": "undefinedValue"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_if_param1_equals_1_08002948",
            "code": "\nvoid initialize_if_param1_equals_1_08002948(int param1,int param2)\n\n{\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_param_vector(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_if_param1_equals_1_08002948",
                "param_1": "param1",
                "param_2": "param2",
                "initialize_param_0800291c": "initialize_param_vector"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_device_08002968",
            "code": "\nvoid initialize_device_08002968(int device_address,uint device_type)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  iVar1 = (device_type & 0x7f) << 1;\n  *(char *)(device_address + 0x10) = (char)iVar1;\n  if (device_type == 0x33) {\n    *(undefined *)(device_address + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(device_address + 0x11) = 0;\n  }\n  iVar2 = device_address + 0x14;\n  initialize_i2c(iVar2,100000,0x4000,iVar1,*(undefined *)(device_address + 0x11));\n  if (*(char *)(device_address + 0x11) == '\\0') {\n    update_param1(iVar2,&param1_label);\n    update_param2(iVar2,&param2_label);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_device_08002968",
                "param_1": "device_address",
                "param_2": "device_type",
                "fill_memory_080091c6": "fill_memory",
                "initialize_i2_c_080077b0": "initialize_i2c",
                "update_param_08007f8e": "update_param1",
                "LAB_08002774_1": "param1_label",
                "update_param_08007f7c": "update_param2",
                "LAB_08002b00_1": "param2_label"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_device_08002a1c",
            "code": "\nvoid initialize_device_08002a1c(undefined4 device_param_1,undefined device_param_2,undefined4 device_param_3,undefined4 device_param_4)\n\n{\n  initialize_device_08002a1c_08002968(device_param_1,device_param_2,device_param_3,device_param_4,device_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_device_08002a1c",
                "param_1": "device_param_1",
                "param_2": "device_param_2",
                "param_3": "device_param_3",
                "param_4": "device_param_4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_device_08002a26",
            "code": "\nvoid initialize_device_08002a26(undefined4 device,undefined4 unused,undefined4 param3,undefined4 param4)\n\n{\n  initialize_device_08002a26_08002a1c(device,0x33,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_device_08002a26",
                "param_1": "device",
                "param_2": "unused",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 status,int value)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(value << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "process_data_08002a58",
            "code": "\nundefined4 processData_08002a58(int data)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)(data + 0x11) == '\\0') {\n    returnValue = 4;\n  }\n  else {\n    result = check_and_initialize_values_08007e74(data + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (result == 0) {\n      returnValue = 0;\n    }\n    else if (result == 1) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "process_data_08002a58",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "process_data_wrapper_08002ac0",
            "code": "\nvoid process_data_wrapper_08002ac0(undefined4 input_data,undefined4 unused_parameter,undefined4 processing_flag,undefined4 data_pointer)\n\n{\n  process_data(input_data,1,processing_flag,data_pointer,data_pointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "process_data_wrapper_08002ac0",
                "param_1": "input_data",
                "param_2": "unused_parameter",
                "param_3": "processing_flag",
                "param_4": "data_pointer",
                "process_data_08002a58": "process_data"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "process_data_08002acc",
            "code": "\nvoid processData_08002acc(uint inputSize,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  if (DAT_200003c4 < inputSize) {\n    if (inputSize < 0x20) {\n      inputSize = 0x20;\n    }\n    DAT_200003c8 = process_data_08009908(DAT_200003c8,inputSize,param3,(uint)DAT_200003c4,param4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)inputSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "process_data_08002acc",
                "param_1": "inputSize",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_data_08002b68",
            "code": "\nundefined4\nprocess_data_08002b68(undefined4 *data_ptr,uint data_size,undefined4 data_value,uint input_value,byte byte_value)\n\n{\n  int result;\n  uint byte_count;\n  uint input_value_copy;\n  \n  byte_count = (uint)byte_value;\n  if (*(char *)((int)data_ptr + 0x11) == '\\0') {\n    return 0;\n  }\n  input_value_copy = input_value;\n  process_data_08002b68_08002acc(data_value);\n  if (DAT_200003c8 != 0) {\n    if (byte_count != 0) {\n      initialize_data_08002a30(data_ptr,data_size);\n      if (3 < byte_count) {\n        byte_count = 3;\n      }\n      while( true ) {\n        if (byte_count == 0) break;\n        (**(code **)*data_ptr)(data_ptr,input_value >> ((byte_count - 1 & 0x1f) << 3) & 0xff);\n        byte_count = byte_count - 1 & 0xff;\n      }\n      process_data_08002b68_08002a58(data_ptr,0);\n    }\n    result = process_and_check_values_08007f0e(data_ptr + 5,(data_size & 0x7f) << 1,DAT_200003c8,data_value,input_value_copy);\n    if (result != 0) {\n      data_value = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)data_value;\n    return data_value;\n  }\n  data_ptr[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_value",
                "param_4": "input_value",
                "param_5": "byte_value",
                "iVar1": "result",
                "uVar2": "byte_count",
                "uVar3": "input_value_copy"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "start_processing_data_08002c00",
            "code": "\nvoid startProcessingData_08002c00(void)\n\n{\n  processData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "start_processing_data_08002c00",
                "process_data_08002b68": "processData"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "process_data_08002c14",
            "code": "\nvoid process_data_08002c14(void)\n\n{\n  start_data_processing();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "process_data_08002c14",
                "start_processing_data_08002c00": "start_data_processing"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_with_params_08002c1e",
            "code": "\nvoid initializeWithParams_08002c1e(undefined4 flag,undefined4 constant,undefined4 param3,undefined4 param4)\n\n{\n  initialize_if_param1_equals_1_08002948(1,0xffff,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_with_params_08002c1e",
                "param_1": "flag",
                "param_2": "constant",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_function_08002c2c",
            "code": "\nvoid executeCallbackFunction_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_function_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_and_set_values_08002ce0",
            "code": "\nint initialize_and_set_values_08002ce0(int base_address)\n\n{\n  int offset;\n  \n  initialize_zero_pointer(base_address + 0x40);\n  offset = base_address + 0x44;\n  initialize_structure(offset,base_address,0x40);\n  *(undefined *)(base_address + 0xc4) = 0;\n  *(undefined4 *)(base_address + 200) = 0;\n  *(undefined *)(base_address + 0x1f8) = 0;\n  set_values_based_on_param(offset,0xe0,callback_function + 1,0);\n  set_values_based_on_param(offset,0x90,&label_1,0);\n  set_values_based_on_param(offset,0xc0,&label_2,0);\n  set_values_based_on_param(offset,0xd0,&label_3,0);\n  set_values_based_on_param(offset,0xf4,&label_4,0);\n  set_values_based_on_param(offset,0xf5,&label_5,0);\n  update_parameters(offset,0x71,&label_6,0);\n  initialize_parameters(offset,0xf0,&label_7,0);\n  update_data(offset,0x79,&label_8,base_address);\n  update_params(offset,0xf9,&label_9,base_address);\n  update_params(offset,0xff,&label_10,0);\n  return base_address;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_and_set_values_08002ce0",
                "param_1": "base_address",
                "iVar1": "offset",
                "initialize_pointer_to_zero_0800314e": "initialize_zero_pointer",
                "initialize_structure_080032bc": "initialize_structure",
                "set_values_based_on_param_08003306": "set_values_based_on_param",
                "execute_callback_function_08002c2c": "callback_function",
                "LAB_08002c40_1": "label_1",
                "LAB_08002c7c_1": "label_2",
                "LAB_08002c90_1": "label_3",
                "LAB_08002c54_1": "label_4",
                "LAB_08002c68_1": "label_5",
                "LAB_08002ca4_1": "label_6",
                "initialize_parameters_08003370": "initialize_parameters",
                "LAB_08002cb8_1": "label_7",
                "update_parameters_08003366": "update_parameters",
                "update_data_08003346": "update_data",
                "LAB_08002e1a_1": "label_8",
                "update_params_08003350": "update_params",
                "LAB_08002dea_1": "label_9",
                "LAB_08002cd0_1": "label_10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_and_set_values_if_condition_met_08002dbc",
            "code": "\nvoid initialize_and_set_values_if_condition_met_08002dbc(int condition_check,int value_check)\n\n{\n  if (condition_check != 1) {\n    return;\n  }\n  if (value_check == 0xffff) {\n    initialize_and_set_values_08002ce0(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_and_set_values_if_condition_met_08002dbc",
                "param_1": "condition_check",
                "param_2": "value_check"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_operations_08002ddc",
            "code": "\nvoid execute_operations_08002ddc(int input_param,undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3)\n\n{\n  execute_operations_08002ddc_0800322c(input_param + 0x40,2,5,unused_param3,unused_param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_operations_08002ddc",
                "param_1": "input_param",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "unused_param3"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "execute_data_transformations_08002df6",
            "code": "\nvoid execute_data_transformations_08002df6(int input_data)\n\n{\n  undefined *data_pointer;\n  \n  if (*(byte *)(input_data + 0xc4) == 0) {\n    return;\n  }\n  data_pointer = *(undefined **)(input_data + 200);\n  execute_data_transformations_08002df6_080031ce(input_data + 0x40,*data_pointer,data_pointer[1],*(byte *)(input_data + 0xc4) - 2,data_pointer + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "execute_data_transformations_08002df6",
                "param_1": "input_data",
                "puVar1": "data_pointer"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "execute_data_processing_08002e26",
            "code": "\nvoid execute_data_processing_08002e26(int input_ptr,undefined4 data_value)\n\n{\n  *(undefined4 *)(input_ptr + 0xc0) = data_value;\n  copy_value(input_ptr + 0x40);\n  execute_operations(input_ptr);\n  execute_transformations(input_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "execute_data_processing_08002e26",
                "param_1": "input_ptr",
                "param_2": "data_value",
                "copy_value_08003154": "copy_value",
                "execute_operations_08002ddc": "execute_operations",
                "execute_data_transformations_08002df6": "execute_transformations"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "process_file_path_08002e44",
            "code": "\nvoid processFilePath_08002e44(int filePathResult,int filePath,undefined param3,undefined param4)\n\n{\n  byte byteVar;\n  char charVar;\n  int commonPrefixLength;\n  int lastCharIndex;\n  undefined *memoryPtr;\n  \n  commonPrefixLength = find_common_prefix_080099a4(filePath,\".cpp\");\n  lastCharIndex = find_last_character_0800997e(filePath,0x2f);\n  if (lastCharIndex == 0) {\n    lastCharIndex = find_last_character_0800997e(filePath,0x5c);\n  }\n  if (lastCharIndex != 0) {\n    filePath = lastCharIndex + 1;\n  }\n  if (commonPrefixLength == 0) {\n    charVar = find_null_terminator_08000178(filePath);\n    *(char *)(filePathResult + 0xc4) = charVar + '\\x02';\n  }\n  else {\n    *(char *)(filePathResult + 0xc4) = ((char)commonPrefixLength - (char)filePath) + '\\x02';\n  }\n  rearrange_and_process_080091a0(*(undefined4 *)(filePathResult + 200));\n  byteVar = *(byte *)(filePathResult + 0xc4);\n  memoryPtr = (undefined *)allocate_and_init_memory_08009190(byteVar + 1);\n  *(undefined **)(filePathResult + 200) = memoryPtr;\n  memoryPtr[byteVar] = 0;\n  *memoryPtr = param3;\n  memoryPtr[1] = param4;\n  copy_string_with_length_08009954(memoryPtr + 2,filePath,*(byte *)(filePathResult + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "process_file_path_08002e44",
                "param_1": "filePathResult",
                "param_2": "filePath",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVar",
                "cVar2": "charVar",
                "iVar3": "commonPrefixLength",
                "iVar4": "lastCharIndex",
                "puVar5": "memoryPtr"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid executeFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_and_handle_input_08002ed2",
            "code": "\nvoid processAndHandleInput_08002ed2(int inputStruct)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(inputStruct + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    handleProcessedInput(inputStruct + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_and_handle_input_08002ed2",
                "param_1": "inputStruct",
                "uVar1": "result",
                "process_input_08003474": "handleProcessedInput"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "execute_decoded_function_08002ef2",
            "code": "\nvoid executeDecodedFunction_08002ef2(int inputValue,undefined4 arg1,undefined2 arg2,undefined4 arg3)\n\n{\n  decode_and_execute_08003158(inputValue + 0x40,arg1,arg2,arg3,arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "execute_decoded_function_08002ef2",
                "param_1": "inputValue",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "decode_and_execute_08002efe",
            "code": "\nvoid decode_and_execute_08002efe(int input,undefined4 config,undefined2 flags,undefined4 param)\n\n{\n  execute_decoding_process(input + 0x40,config,flags,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "decode_and_execute_08002efe",
                "param_1": "input",
                "param_2": "config",
                "param_3": "flags",
                "param_4": "param",
                "execute_decoding_process_0800319e": "execute_decoding_process"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "decode_and_execute_process_08002f0a",
            "code": "\nvoid decode_and_execute_process_08002f0a(int input_value)\n\n{\n  decode_and_execute(input_value + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "decode_and_execute_process_08002f0a",
                "param_1": "input_value",
                "execute_decoding_process_0800325a": "decode_and_execute"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "decoded_and_executed_function_08002f14",
            "code": "\nvoid decodedAndExecutedFunction_08002f14(int param)\n\n{\n  decodeAndExecute(param + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "decoded_and_executed_function_08002f14",
                "param_1": "param",
                "decode_and_execute_080032a2": "decodeAndExecute"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_callback_08002f1e",
            "code": "\nvoid executeCallback_08002f1e(int callbackPtr)\n\n{\n  (**(code **)**(undefined4 **)(callbackPtr + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_callback_08002f1e",
                "param_1": "callbackPtr"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 status,uint value,undefined4 data)\n\n{\n  undefined4 previousData;\n  \n  if (value == 0xd0) {\n    DAT_200005f0 = data;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      DAT_200005e0 = data;\n      return;\n    }\n    previousData = data;\n    if ((value != 0xf5) && (previousData = DAT_200005e4, value == 0xe0)) {\n      DAT_200005d4 = data;\n      return;\n    }\n    DAT_200005e4 = previousData;\n    return;\n  }\n  if (value == 0x90) {\n    DAT_200005dc = data;\n    return;\n  }\n  if (value != 0xc0) {\n    return;\n  }\n  DAT_200005ec = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "status",
                "param_2": "value",
                "param_3": "data",
                "uVar1": "previousData"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_data_08002f84",
            "code": "\nvoid updateData_08002f84(undefined4 param1,int condition,undefined4 data)\n\n{\n  if (condition == 0xff) {\n    DAT_200005e8 = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_data_08002f84",
                "param_1": "param1",
                "param_2": "condition",
                "param_3": "data"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "initialize_data_08002f94",
            "code": "\nvoid initializeData_08002f94(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  DAT_200005d0 = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "initialize_data_08002f94",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_memory_value_08002fa0",
            "code": "\nundefined getMemoryValue_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_memory_value_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_character_08002fa8",
            "code": "\nvoid updateCharacter_08002fa8(int baseAddress,int offset,undefined newValue)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_character_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_element_at_offset_08002fba",
            "code": "\nundefined4 get_element_at_offset_08002fba(int base_address,int offset)\n\n{\n  return *(undefined4 *)(base_address + (offset + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_element_at_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "store_value_08002fc2",
            "code": "\nvoid store_value_08002fc2(int array_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(array_address + (index + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "store_value_08002fc2",
                "param_1": "array_address",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "update_values_08002fca",
            "code": "\nvoid update_values_08002fca(undefined4 arg1,undefined4 arg2,int count,undefined4 arg4,\n                 undefined4 arg5)\n\n{\n  uint iteration;\n  \n  for (iteration = 0; (int)iteration < count; iteration = iteration + 1 & 0xff) {\n    FUNC_08008ac4(arg5);\n    update_value_based_on_bit(arg2,1);\n    FUNC_08008ac4(arg4);\n    update_value_based_on_bit(arg2,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "update_values_08002fca",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "count",
                "param_4": "arg4",
                "param_5": "arg5",
                "uVar1": "iteration",
                "update_value_if_bit_set_08008a24": "update_value_based_on_bit"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "process_device_update_08003002",
            "code": "\nvoid processDeviceUpdate_08003002(int deviceID)\n\n{\n  if (*(char *)(deviceID + 0x1f8) != '\\0') {\n    return;\n  }\n  process_devices_08008990(0xd,1);\n  updateDeviceValues(deviceID,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  updateDeviceValues(deviceID,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "process_device_update_08003002",
                "param_1": "deviceID",
                "update_values_08002fca": "updateDeviceValues"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_and_process_devices_08003048",
            "code": "\nvoid initialize_and_process_devices_08003048(undefined4 serial_data,undefined4 device_data,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_serial(&DAT_20000700,device_data,6,param_4,param_4);\n  process_device_update(serial_data);\n  execute_data_processing(serial_data,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_and_process_devices_08003048",
                "param_1": "serial_data",
                "param_2": "device_data",
                "initialize_serial_08008c44": "initialize_serial",
                "process_device_update_08003002": "process_device_update",
                "execute_data_processing_08002e26": "execute_data_processing"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_data_0800307a",
            "code": "\nvoid decodeData_0800307a(undefined4 *ptr,uint size,byte *data,uint limit)\n\n{\n  uint currentByte;\n  uint bitOffset;\n  uint decodedCount;\n  uint dataIndex;\n  \n  currentByte = (uint)*data;\n  if (limit == 0) {\n    limit = 0xffffffff;\n  }\n  dataIndex = 0;\n  bitOffset = 0;\n  decodedCount = 0;\n  while ((dataIndex < size && (decodedCount < limit))) {\n    (***(code ***)(undefined4 *)*ptr)\n              ((undefined4 *)*ptr,((uint)data[dataIndex] << (bitOffset & 0xff) | currentByte) & 0x7f);\n    currentByte = (int)(uint)data[dataIndex] >> (7 - bitOffset & 0xff) & 0xff;\n    bitOffset = bitOffset + 1;\n    while ((decodedCount = decodedCount + 1, 6 < bitOffset && (decodedCount < limit))) {\n      (***(code ***)(undefined4 *)*ptr)((undefined4 *)*ptr,currentByte & 0x7f);\n      currentByte = currentByte >> 7;\n      bitOffset = bitOffset - 7;\n    }\n    dataIndex = dataIndex + 1;\n  }\n  if ((bitOffset != 0) && (decodedCount < limit)) {\n    (***(code ***)(undefined4 *)*ptr)((undefined4 *)*ptr,(1 << (bitOffset & 0xff)) - 1U & currentByte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_data_0800307a",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "data",
                "param_4": "limit",
                "uVar1": "currentByte",
                "uVar2": "bitOffset",
                "uVar3": "decodedCount",
                "uVar4": "dataIndex"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "decode_and_execute_08003106",
            "code": "\nvoid decode_and_execute_08003106(undefined4 *input_ptr,undefined4 param_2_value,undefined4 param_3_value,undefined4 param_4_value)\n\n{\n  undefined4 *ptr_to_ptr;\n  \n  ptr_to_ptr = (undefined4 *)*input_ptr;\n  if (ptr_to_ptr != (undefined4 *)0x0) {\n    (**(code **)*ptr_to_ptr)(ptr_to_ptr,0xf0);\n    (***(code ***)(undefined4 *)*input_ptr)((undefined4 *)*input_ptr,0x6f);\n    (***(code ***)(undefined4 *)*input_ptr)((undefined4 *)*input_ptr,param_2_value);\n    decode_data(input_ptr,param_3_value,param_4_value,param_3_value);\n    (***(code ***)(undefined4 *)*input_ptr)((undefined4 *)*input_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "decode_and_execute_08003106",
                "param_1": "input_ptr",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "puVar1": "ptr_to_ptr",
                "decode_data_0800307a": "decode_data"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_pointer_to_zero_0800314e",
            "code": "\nvoid initializePointerToZero_0800314e(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_pointer_to_zero_0800314e",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_08003154",
            "code": "\nvoid copy_value_08003154(undefined4 *dest_ptr,undefined4 src_value)\n\n{\n  *dest_ptr = src_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_08003154",
                "param_1": "dest_ptr",
                "param_2": "src_value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "decode_and_execute_08003158",
            "code": "\nvoid decode_and_execute_08003158(undefined4 *data_ptr,uint size,ushort value)\n\n{\n  undefined4 *func_ptr;\n  ushort decoded_value;\n  \n  func_ptr = (undefined4 *)*data_ptr;\n  if (func_ptr != (undefined4 *)0x0) {\n    decoded_value = value;\n    if (((int)size < 0x10) && (value < 0x4000)) {\n      (**(code **)*func_ptr)(func_ptr,size | 0xe0);\n      decode_data_0800307a(data_ptr,2,&decoded_value);\n    }\n    else {\n      decode_and_execute_08003158_08003106(data_ptr,size,2,&decoded_value);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "decode_and_execute_08003158",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "value",
                "puVar1": "func_ptr",
                "local_a": "decoded_value"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_decoding_process_0800319e",
            "code": "\nvoid executeDecodingProcess_0800319e(undefined4 *inputData,uint flag,undefined2 additionalData)\n\n{\n  undefined4 *functionPointer;\n  undefined2 decodedData;\n  \n  functionPointer = (undefined4 *)*inputData;\n  if (functionPointer != (undefined4 *)0x0) {\n    decodedData = additionalData;\n    (**(code **)*functionPointer)(functionPointer,flag & 0xf | 0x90);\n    decode_data_0800307a(inputData,2,&decodedData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_decoding_process_0800319e",
                "param_1": "inputData",
                "param_2": "flag",
                "param_3": "additionalData",
                "puVar1": "functionPointer",
                "local_a": "decodedData"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "execute_data_transformations_080031ce",
            "code": "\nvoid execute_data_transformations_080031ce(undefined4 *data_pointer,undefined4 value_2,undefined4 value_3,uint size,int offset\n                 )\n\n{\n  undefined4 *function_pointer;\n  uint counter;\n  \n  function_pointer = (undefined4 *)*data_pointer;\n  if (function_pointer != (undefined4 *)0x0) {\n    (**(code **)*function_pointer)(function_pointer,0xf0,value_3,*(code **)*function_pointer,size);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0x79);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,value_2);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,value_3);\n    for (counter = 0; counter < size; counter = counter + 1) {\n      decode_data_0800307a(data_pointer,1,offset + counter,0);\n    }\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "execute_data_transformations_080031ce",
                "param_1": "data_pointer",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "size",
                "param_5": "offset",
                "puVar1": "function_pointer",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_operations_0800322c",
            "code": "\nvoid executeOperations_0800322c(undefined4 *operationPtr,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 *operationPtrValue;\n  \n  operationPtrValue = (undefined4 *)*operationPtr;\n  if (operationPtrValue != (undefined4 *)0x0) {\n    (**(code **)*operationPtrValue)(operationPtrValue,0xf9);\n    (***(code ***)(undefined4 *)*operationPtr)((undefined4 *)*operationPtr,param2);\n    (***(code ***)(undefined4 *)*operationPtr)((undefined4 *)*operationPtr,param3);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_operations_0800322c",
                "param_1": "operationPtr",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "operationPtrValue"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "execute_decoding_process_0800325a",
            "code": "\nvoid executeDecodingProcess_0800325a(undefined4 *inputPointer,undefined4 dataValue,uint numIterations,int startingIndex)\n\n{\n  undefined4 *decodedFunctionPtr;\n  uint iterationCount;\n  \n  decodedFunctionPtr = (undefined4 *)*inputPointer;\n  if (decodedFunctionPtr != (undefined4 *)0x0) {\n    (**(code **)*decodedFunctionPtr)(decodedFunctionPtr,0xf0);\n    (***(code ***)(undefined4 *)*inputPointer)((undefined4 *)*inputPointer,dataValue);\n    for (iterationCount = 0; iterationCount < numIterations; iterationCount = iterationCount + 1) {\n      decode_data_0800307a(inputPointer,1,startingIndex + iterationCount,0);\n    }\n    (***(code ***)(undefined4 *)*inputPointer)((undefined4 *)*inputPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "execute_decoding_process_0800325a",
                "param_1": "inputPointer",
                "param_2": "dataValue",
                "param_3": "numIterations",
                "param_4": "startingIndex",
                "puVar1": "decodedFunctionPtr",
                "uVar2": "iterationCount"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "decode_and_execute_080032a2",
            "code": "\nvoid decode_and_execute_080032a2(undefined4 decoding_parameter,undefined4 text_to_decode,undefined4 unused_parameter,undefined4 additional_parameter)\n\n{\n  undefined4 null_terminator_position;\n  \n  null_terminator_position = find_null_terminator_08000178(text_to_decode);\n  execute_decoding_process_0800325a(decoding_parameter,0x71,null_terminator_position,text_to_decode,additional_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "decode_and_execute_080032a2",
                "param_1": "decoding_parameter",
                "param_2": "text_to_decode",
                "param_3": "unused_parameter",
                "param_4": "additional_parameter",
                "uVar1": "null_terminator_position"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_structure_080032bc",
            "code": "\nvoid initializeStructure_080032bc(int structure,int value1,undefined4 value2)\n\n{\n  *(int *)(structure + 4) = value1;\n  *(undefined4 *)(structure + 8) = value2;\n  *(undefined *)(structure + 0xc) = 0;\n  *(undefined *)(structure + 0xd) = 0;\n  *(undefined4 *)(structure + 0x10) = 0;\n  *(undefined *)(structure + 0x14) = 0;\n  *(undefined4 *)(structure + 0x18) = 0;\n  *(undefined4 *)(structure + 0x1c) = 0;\n  *(undefined4 *)(structure + 0x20) = 0;\n  *(undefined4 *)(structure + 0x24) = 0;\n  *(undefined4 *)(structure + 0x28) = 0;\n  *(undefined4 *)(structure + 0x2c) = 0;\n  *(undefined4 *)(structure + 0x30) = 0;\n  *(undefined4 *)(structure + 0x34) = 0;\n  *(undefined4 *)(structure + 0x38) = 0;\n  *(undefined4 *)(structure + 0x3c) = 0;\n  *(undefined4 *)(structure + 0x40) = 0;\n  *(undefined4 *)(structure + 0x44) = 0;\n  *(undefined4 *)(structure + 0x48) = 0;\n  *(undefined4 *)(structure + 0x4c) = 0;\n  *(undefined4 *)(structure + 0x50) = 0;\n  *(undefined4 *)(structure + 0x54) = 0;\n  *(undefined4 *)(structure + 0x58) = 0;\n  *(undefined4 *)(structure + 0x5c) = 0;\n  *(undefined4 *)(structure + 0x60) = 0;\n  *(undefined4 *)(structure + 100) = 0;\n  *(undefined4 *)(structure + 0x68) = 0;\n  *(undefined4 *)(structure + 0x6c) = 0;\n  *(undefined4 *)(structure + 0x70) = 0;\n  *(undefined4 *)(structure + 0x74) = 0;\n  *(undefined4 *)(structure + 0x78) = 0;\n  *(bool *)structure = value1 == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_structure_080032bc",
                "param_1": "structure",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "set_values_based_on_param_08003306",
            "code": "\nvoid setValuesBasedOnParam_08003306(int baseAddress,uint paramValue,undefined4 value1,undefined4 value2)\n\n{\n  if (paramValue == 0xd0) {\n    *(undefined4 *)(baseAddress + 0x58) = value1;\n    *(undefined4 *)(baseAddress + 0x28) = value2;\n    return;\n  }\n  if (0xd0 < paramValue) {\n    if (paramValue == 0xf4) {\n      *(undefined4 *)(baseAddress + 0x5c) = value1;\n      *(undefined4 *)(baseAddress + 0x2c) = value2;\n      return;\n    }\n    if (paramValue == 0xf5) {\n      *(undefined4 *)(baseAddress + 0x60) = value1;\n      *(undefined4 *)(baseAddress + 0x30) = value2;\n    }\n    else if (paramValue == 0xe0) {\n      *(undefined4 *)(baseAddress + 0x4c) = value1;\n      *(undefined4 *)(baseAddress + 0x1c) = value2;\n      return;\n    }\n    return;\n  }\n  if (paramValue == 0x90) {\n    *(undefined4 *)(baseAddress + 0x50) = value1;\n    *(undefined4 *)(baseAddress + 0x20) = value2;\n    return;\n  }\n  if (paramValue == 0xc0) {\n    *(undefined4 *)(baseAddress + 0x54) = value1;\n    *(undefined4 *)(baseAddress + 0x24) = value2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "set_values_based_on_param_08003306",
                "param_1": "baseAddress",
                "param_2": "paramValue",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_data_08003346",
            "code": "\nvoid updateData_08003346(int baseAddress,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0x79) {\n    *(undefined4 *)(baseAddress + 0x70) = newValue1;\n    *(undefined4 *)(baseAddress + 0x34) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_params_08003350",
            "code": "\nvoid updateParams_08003350(int arg1,int arg2,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (arg2 == 0xf9) {\n    *(undefined4 *)(arg1 + 0x74) = newValue1;\n    *(undefined4 *)(arg1 + 0x38) = newValue2;\n    return;\n  }\n  if (arg2 != 0xff) {\n    return;\n  }\n  *(undefined4 *)(arg1 + 0x78) = newValue1;\n  *(undefined4 *)(arg1 + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_params_08003350",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_parameters_08003366",
            "code": "\nvoid updateParameters_08003366(int baseAddress,int conditionCode,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (conditionCode == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = newValue1;\n    *(undefined4 *)(baseAddress + 0x40) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_parameters_08003366",
                "param_1": "baseAddress",
                "param_2": "conditionCode",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "initialize_parameters_08003370",
            "code": "\nvoid initializeParameters_08003370(int baseAddress,undefined4 unusedParameter1,undefined4 parameter3,undefined4 parameter4)\n\n{\n  *(undefined4 *)(baseAddress + 0x6c) = parameter3;\n  *(undefined4 *)(baseAddress + 0x44) = parameter4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "initialize_parameters_08003370",
                "param_1": "baseAddress",
                "param_2": "unusedParameter1",
                "param_3": "parameter3",
                "param_4": "parameter4"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "copy_data_to_memory_08003376",
            "code": "\nvoid copyDataToMemory_08003376(undefined *buffer,undefined data,uint index)\n\n{\n  bool isInRange;\n  \n  if (index < *(uint *)(buffer + 8)) {\n    isInRange = false;\n  }\n  else {\n    isInRange = true;\n    if (*(code **)(buffer + 100) != (code *)0x0) {\n      *buffer = 1;\n      (**(code **)(buffer + 100))(*(undefined4 *)(buffer + 0x3c));\n      if (index < *(uint *)(buffer + 8)) {\n        isInRange = false;\n      }\n      else {\n        isInRange = true;\n      }\n    }\n  }\n  if (!isInRange) {\n    *(undefined *)(*(int *)(buffer + 4) + index) = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "copy_data_to_memory_08003376",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "index",
                "bVar1": "isInRange"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 srcSize,uint destSize,int buffer)\n\n{\n  byte currentByte;\n  int destIndex;\n  uint srcIndex;\n  \n  destIndex = 0;\n  for (srcIndex = 0; srcIndex < destSize; srcIndex = srcIndex + 2) {\n    currentByte = *(byte *)(buffer + srcIndex);\n    *(byte *)(buffer + destIndex) = currentByte;\n    *(byte *)(buffer + destIndex) = *(char *)(buffer + srcIndex + 1) << 7 | currentByte;\n    destIndex = destIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "srcSize",
                "param_2": "destSize",
                "param_3": "buffer",
                "bVar1": "currentByte",
                "iVar2": "destIndex",
                "uVar3": "srcIndex"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_input_080033cc",
            "code": "\nvoid processInput_080033cc(int inputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int shiftedIndex;\n  char *inputPtr;\n  \n  inputPtr = *(char **)(inputData + 4);\n  firstChar = *inputPtr;\n  if (firstChar == 'q') {\n    if (*(int *)(inputData + 0x68) != 0) {\n      shiftedIndex = copy_and_shift_bits_080033a8(inputData,*(int *)(inputData + 0x18) + -1,inputPtr + 1,inputPtr,param4);\n      copy_data_to_memory_08003376(inputData,0,shiftedIndex + 1);\n      (**(code **)(inputData + 0x68))(*(undefined4 *)(inputData + 0x40),*(int *)(inputData + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(inputData + 0x70) != (code *)0x0) {\n      if (*(uint *)(inputData + 0x18) < 3) {\n        (**(code **)(inputData + 0x70))(*(undefined4 *)(inputData + 0x34),0,0);\n        return;\n      }\n      shiftedIndex = copy_and_shift_bits_080033a8(inputData,*(uint *)(inputData + 0x18) - 3,inputPtr + 3,inputPtr,param4);\n      copy_data_to_memory_08003376(inputData,0,shiftedIndex + 3);\n      shiftedIndex = *(int *)(inputData + 4);\n      (**(code **)(inputData + 0x70))\n                (*(undefined4 *)(inputData + 0x34),*(undefined *)(shiftedIndex + 1),*(undefined *)(shiftedIndex + 2)\n                 ,shiftedIndex + 3);\n      return;\n    }\n  }\n  else if (*(code **)(inputData + 0x6c) != (code *)0x0) {\n    (**(code **)(inputData + 0x6c))\n              (*(undefined4 *)(inputData + 0x44),firstChar,*(int *)(inputData + 0x18) + -1,inputPtr + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "shiftedIndex",
                "pcVar3": "inputPtr"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_memory_0800344a",
            "code": "\nvoid initializeMemory_0800344a(int memoryAddress)\n\n{\n  uint iterator;\n  \n  *(undefined4 *)(memoryAddress + 0x10) = 0;\n  *(undefined *)(memoryAddress + 0xc) = 0;\n  *(undefined *)(memoryAddress + 0xd) = 0;\n  for (iterator = 0; iterator < *(uint *)(memoryAddress + 8); iterator = iterator + 1) {\n    *(undefined *)(*(int *)(memoryAddress + 4) + iterator) = 0;\n  }\n  *(undefined *)(memoryAddress + 0x14) = 0;\n  *(undefined4 *)(memoryAddress + 0x18) = 0;\n  if (*(code **)(memoryAddress + 0x78) != (code *)0x0) {\n    (**(code **)(memoryAddress + 0x78))(*(undefined4 *)(memoryAddress + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_memory_0800344a",
                "param_1": "memoryAddress",
                "uVar1": "iterator"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_input_08003474",
            "code": "\nvoid processInput_08003474(int dataPointer,uint inputValue)\n\n{\n  byte byteValue;\n  \n  if (*(char *)(dataPointer + 0x14) != '\\0') {\n    if (inputValue != 0xf7) {\n      copyDataToMemory(dataPointer,inputValue,*(undefined4 *)(dataPointer + 0x18));\n      *(int *)(dataPointer + 0x18) = *(int *)(dataPointer + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(dataPointer + 0x14) = 0;\n    processInput_08003474();\n    return;\n  }\n  if ((*(int *)(dataPointer + 0x10) == 0) || (0x7f < (int)inputValue)) {\n    if ((int)inputValue < 0xf0) {\n      *(byte *)(dataPointer + 0xd) = (byte)inputValue & 0xf;\n      inputValue = inputValue & 0xf0;\n    }\n    if (inputValue == 0xf0) {\n      *(undefined *)(dataPointer + 0x14) = 1;\n      *(undefined4 *)(dataPointer + 0x18) = 0;\n      return;\n    }\n    if (inputValue < 0xf1) {\n      if (inputValue != 0xc0) {\n        if (inputValue < 0xc1) {\n          if (inputValue != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (inputValue == 0xd0) goto LAB_0800359c;\n          if (inputValue != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(dataPointer + 0x10) = 2;\n        *(char *)(dataPointer + 0xc) = (char)inputValue;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(dataPointer + 0x10) = 1;\n      *(char *)(dataPointer + 0xc) = (char)inputValue;\n      return;\n    }\n    if (inputValue != 0xf9) {\n      if (0xf9 < inputValue) {\n        if (inputValue == 0xff) {\n          initializeMemory(dataPointer);\n          return;\n        }\n        return;\n      }\n      if (1 < inputValue - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(dataPointer + 0x74) != (code *)0x0) {\n      (**(code **)(dataPointer + 0x74))(*(undefined4 *)(dataPointer + 0x38));\n    }\n  }\n  else {\n    *(int *)(dataPointer + 0x10) = *(int *)(dataPointer + 0x10) + -1;\n    copyDataToMemory();\n    if ((*(int *)(dataPointer + 0x10) == 0) && (byteValue = *(byte *)(dataPointer + 0xc), byteValue != 0)) {\n      if (byteValue == 0xd0) {\n        if (*(code **)(dataPointer + 0x58) != (code *)0x0) {\n          (**(code **)(dataPointer + 0x58))\n                    (*(undefined4 *)(dataPointer + 0x28),*(undefined *)(dataPointer + 0xd),\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if (byteValue < 0xd1) {\n        if (byteValue == 0x90) {\n          if (*(code **)(dataPointer + 0x50) != (code *)0x0) {\n            (**(code **)(dataPointer + 0x50))\n                      (*(undefined4 *)(dataPointer + 0x20),*(undefined *)(dataPointer + 0xd),\n                       (uint)(*(byte **)(dataPointer + 4))[1] + (uint)**(byte **)(dataPointer + 4) * 0x80);\n          }\n        }\n        else if ((byteValue == 0xc0) && (*(code **)(dataPointer + 0x54) != (code *)0x0)) {\n          (**(code **)(dataPointer + 0x54))\n                    (*(undefined4 *)(dataPointer + 0x24),*(undefined *)(dataPointer + 0xd),\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if (byteValue == 0xf4) {\n        if (*(code **)(dataPointer + 0x5c) != (code *)0x0) {\n          (**(code **)(dataPointer + 0x5c))\n                    (*(undefined4 *)(dataPointer + 0x2c),(*(undefined **)(dataPointer + 4))[1],\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if (byteValue == 0xf5) {\n        if (*(code **)(dataPointer + 0x60) != (code *)0x0) {\n          (**(code **)(dataPointer + 0x60))\n                    (*(undefined4 *)(dataPointer + 0x30),(*(undefined **)(dataPointer + 4))[1],\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if ((byteValue == 0xe0) && (*(code **)(dataPointer + 0x4c) != (code *)0x0)) {\n        (**(code **)(dataPointer + 0x4c))\n                  (*(undefined4 *)(dataPointer + 0x1c),*(undefined *)(dataPointer + 0xd),\n                   (uint)(*(byte **)(dataPointer + 4))[1] + (uint)**(byte **)(dataPointer + 4) * 0x80);\n      }\n      *(undefined *)(dataPointer + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "dataPointer",
                "param_2": "inputValue",
                "bVar1": "byteValue",
                "copy_data_to_memory_08003376": "copyDataToMemory",
                "process_input_080033cc": "processInput",
                "initialize_memory_0800344a": "initializeMemory"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_and_apply_settings_080035b8",
            "code": "\nvoid initialize_and_apply_settings_080035b8(void)\n\n{\n  int result;\n  uint global_value;\n  undefined4 hardware_params [2];\n  undefined4 hardware_data;\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_3;\n  undefined4 data_4;\n  undefined4 data_5;\n  undefined4 flags [4];\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined4 value_5;\n  \n  flags[0] = 2;\n  value_1 = 1;\n  value_2 = 0x10;\n  value_3 = 2;\n  value_4 = 0;\n  value_5 = 0x380000;\n  result = process_flags_08005460(flags);\n  if (result != 0) {\n    do_nothing_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  data_1 = 0xf;\n  data_2 = 2;\n  data_3 = 0;\n  data_4 = 0x400;\n  data_5 = 0;\n  result = initialize_data_080058ac(&data_1);\n  if (result != 0) {\n    do_nothing_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  hardware_params[0] = 2;\n  hardware_data = 0x8000;\n  result = initialize_hardware_08005aa4(hardware_params);\n  if (result != 0) {\n    do_nothing_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  global_value = get_global_value_08005a1c();\n  set_data_values_08003fd8(global_value / 1000);\n  update_e000e010_08004024(4);\n  apply_bitwise_operation_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_and_apply_settings_080035b8",
                "local_30": "flags",
                "local_20": "value_1",
                "local_1c": "value_2",
                "local_14": "value_3",
                "local_10": "value_4",
                "local_c": "value_5",
                "iVar1": "result",
                "local_44": "data_1",
                "local_40": "data_2",
                "local_3c": "data_3",
                "local_38": "data_4",
                "local_34": "data_5",
                "local_54": "hardware_params",
                "local_4c": "hardware_data",
                "uVar2": "global_value"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_hardware_080073ec();\n  execute_functions_sequentially_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  process_data_loop_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_and_update_display_080036a2",
            "code": "\nvoid initialize_and_update_display_080036a2(void)\n\n{\n  initialize_and_update_display_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_and_update_display_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_character_index_080036ac",
            "code": "\nuint find_character_index_080036ac(int value)\n\n{\n  uint index;\n  \n  if ((uint)(value << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (value != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "initialize_data_080036d8",
            "code": "\nundefined4 initializeData_080036d8(uint inputParam)\n\n{\n  int result;\n  \n  result = setDataValues(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < inputParam) {\n    return 1;\n  }\n  applyBitwiseOperation(0xffffffff,inputParam,0);\n  DAT_20000010 = inputParam;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "initialize_data_080036d8",
                "param_1": "inputParam",
                "iVar1": "result",
                "set_data_values_08003fd8": "setDataValues",
                "apply_bitwise_operation_08003f30": "applyBitwiseOperation"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_and_update_display_08003724",
            "code": "\n\n\nundefined4 initialize_and_update_display_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_display(3);\n  initialize_data(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_and_update_display_08003724",
                "update_display_08003f0c": "update_display",
                "initialize_data_080036d8": "initialize_data"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "addition_08003748",
            "code": "\nvoid addition_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "addition_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_global_data_08003760",
            "code": "\nundefined4 getGlobalData_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_global_data_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "process_data_0800376c",
            "code": "\nundefined4 processData_0800376c(uint **dataPointer,uint limit)\n\n{\n  int globalData;\n  uint value;\n  int iteration;\n  undefined4 result;\n  uint *data;\n  uint calculation;\n  uint counter;\n  \n  counter = 0;\n  globalData = get_global_data_08003760();\n  calculation = DAT_20000018;\n  data = *dataPointer;\n  if ((data[2] & 0x100) == 0) {\n    if (((data[1] & 0x100) == 0) && ((data[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**dataPointer & 2) != 0) goto LAB_0800387e;\n      } while ((limit == 0xffffffff) ||\n              ((limit != 0 && (iteration = get_global_data_08003760(), (uint)(iteration - globalData) <= limit))));\n      dataPointer[10] = (uint *)((uint)dataPointer[10] | 4);\n      *(undefined *)(dataPointer + 9) = 0;\n      result = 3;\n    }\n    else {\n      value = calculate_value_08005bb8(2);\n      data = *dataPointer;\n      if (((data[4] & 0x24924924) == 0) && ((data[3] & 0x924924) == 0)) {\n        if ((data[4] & 0x12492492) == 0) {\n          if ((data[3] & 0x492492) == 0) {\n            iteration = 0x14;\n          }\n          else {\n            iteration = 0x29;\n          }\n        }\n        else {\n          iteration = 0x29;\n        }\n      }\n      else if (((data[4] & 0x12492492) == 0) && ((data[3] & 0x492492) == 0)) {\n        iteration = 0x54;\n      }\n      else if ((data[4] & 0x249249) == 0) {\n        if ((data[3] & 0x249249) == 0) {\n          iteration = 0x54;\n        }\n        else {\n          iteration = 0xfc;\n        }\n      }\n      else {\n        iteration = 0xfc;\n      }\n      calculation = (calculation / value) * iteration;\n      for (; counter <= calculation && calculation - counter != 0; counter = counter + 1) {\n        if ((limit != 0xffffffff) &&\n           ((limit == 0 || (iteration = get_global_data_08003760(), limit < (uint)(iteration - globalData))))) {\n          dataPointer[10] = (uint *)((uint)dataPointer[10] | 4);\n          *(undefined *)(dataPointer + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **dataPointer = 0xffffffed;\n      dataPointer[10] = (uint *)((uint)dataPointer[10] | 0x200);\n      if (((*dataPointer)[2] & 0xe0000) == 0xe0000) {\n        if (dataPointer[3] == (uint *)0x0) {\n          dataPointer[10] = (uint *)((uint)dataPointer[10] & 0xfffffeff);\n          if (((uint)dataPointer[10] & 0x1000) == 0) {\n            dataPointer[10] = (uint *)((uint)dataPointer[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    dataPointer[10] = (uint *)((uint)dataPointer[10] | 0x20);\n    *(undefined *)(dataPointer + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "process_data_0800376c",
                "param_1": "dataPointer",
                "param_2": "limit",
                "iVar1": "globalData",
                "uVar2": "value",
                "iVar3": "iteration",
                "uVar4": "result",
                "puVar5": "data",
                "uVar6": "calculation",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_080038dc",
            "code": "\nundefined4 getOffset_080038dc(int *offsetPtr)\n\n{\n  return *(undefined4 *)(*offsetPtr + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_080038dc",
                "param_1": "offsetPtr"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_value_080038e4",
            "code": "\nundefined4 updateValue_080038e4(int *deviceData,uint *values)\n\n{\n  undefined4 status;\n  uint valueIndex;\n  int loopCounter;\n  \n  if (*(char *)(deviceData + 9) == '\\x01') {\n    status = 2;\n  }\n  else {\n    *(undefined *)(deviceData + 9) = 1;\n    valueIndex = values[1];\n    if (valueIndex < 7) {\n      valueIndex = valueIndex * 5 - 5;\n      *(uint *)(*deviceData + 0x34) =\n           *values << (valueIndex & 0xff) | *(uint *)(*deviceData + 0x34) & ~(0x1f << (valueIndex & 0xff));\n    }\n    else if (valueIndex < 0xd) {\n      valueIndex = valueIndex * 5 - 0x23;\n      *(uint *)(*deviceData + 0x30) =\n           *values << (valueIndex & 0xff) | *(uint *)(*deviceData + 0x30) & ~(0x1f << (valueIndex & 0xff));\n    }\n    else {\n      valueIndex = valueIndex * 5 - 0x41;\n      *(uint *)(*deviceData + 0x2c) =\n           *values << (valueIndex & 0xff) | *(uint *)(*deviceData + 0x2c) & ~(0x1f << (valueIndex & 0xff));\n    }\n    valueIndex = *values;\n    if (valueIndex < 10) {\n      *(uint *)(*deviceData + 0x10) =\n           values[2] << (valueIndex * 3 & 0xff) |\n           *(uint *)(*deviceData + 0x10) & ~(7 << (valueIndex * 3 & 0xff));\n    }\n    else {\n      valueIndex = valueIndex * 3 - 0x1e;\n      *(uint *)(*deviceData + 0xc) =\n           values[2] << (valueIndex & 0xff) | *(uint *)(*deviceData + 0xc) & ~(7 << (valueIndex & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*deviceData == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (loopCounter = (DAT_20000018 / 1000000) * 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n            }\n            status = 0;\n          }\n          else {\n            status = 0;\n          }\n        }\n        else {\n          status = 0;\n        }\n      }\n      else {\n        deviceData[10] = deviceData[10] | 0x20;\n        status = 1;\n      }\n    }\n    else {\n      status = 0;\n    }\n    *(undefined *)(deviceData + 9) = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_value_080038e4",
                "param_1": "deviceData",
                "param_2": "values",
                "uVar1": "status",
                "uVar2": "valueIndex",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_memory_value_08003a1c",
            "code": "\nundefined4 getMemoryValue_08003a1c(int memoryAddress)\n\n{\n  return *(undefined4 *)(memoryAddress + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_memory_value_08003a1c",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "handle_data_processing_08003a20",
            "code": "\nundefined4 handleDataProcessing_08003a20(int *dataPointer,undefined4 paramValue)\n\n{\n  int currentValue;\n  undefined4 returnValue;\n  int dataValue;\n  uint loopCounter;\n  \n  dataValue = *dataPointer;\n  if ((*(uint *)(dataValue + 8) & 1) == 0) {\n    *(uint *)(dataValue + 8) = *(uint *)(dataValue + 8) | 1;\n    for (loopCounter = DAT_20000018 / 1000000; loopCounter != 0; loopCounter = loopCounter - 1) {\n    }\n    dataValue = get_global_data_08003760(dataPointer,paramValue,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPointer + 8) & 1) != 0) {\n        return 0;\n      }\n      currentValue = get_global_data_08003760();\n    } while ((uint)(currentValue - dataValue) < 3);\n    dataPointer[10] = dataPointer[10] | 0x10;\n    dataPointer[0xb] = dataPointer[0xb] | 1;\n    *(undefined *)(dataPointer + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "handle_data_processing_08003a20",
                "param_1": "dataPointer",
                "param_2": "paramValue",
                "iVar1": "currentValue",
                "iVar3": "dataValue",
                "uVar2": "returnValue",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "handle_data_08003aa0",
            "code": "\n\n\nint handle_data_08003aa0(int *data)\n\n{\n  int result;\n  undefined4 *ptr;\n  int address;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    result = handle_data_08003aa0_processing_08003a20();\n    if (result == 0) {\n      data[10] = data[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*data;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data[10] = data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data[10] = data[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000U) == 0) {\n        data[0xb] = 0;\n      }\n      else {\n        data[0xb] = data[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *ptr = 0xfffffffd;\n      address = *data;\n      if (((*(uint *)(address + 8) & 0xe0000) == 0xe0000) &&\n         ((address != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(address + 8) = *(uint *)(address + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(address + 8) = *(uint *)(address + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "handle_data_08003aa0",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "address"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "update_flag_and_status_08003b8c",
            "code": "\nundefined4 updateFlagAndStatus_08003b8c(int *dataPointer)\n\n{\n  int globalData1;\n  int globalData2;\n  \n  globalData2 = *dataPointer;\n  if ((*(uint *)(globalData2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(globalData2 + 8) = *(uint *)(globalData2 + 8) & 0xfffffffe;\n  globalData2 = get_global_data_08003760();\n  do {\n    if ((*(uint *)(*dataPointer + 8) & 1) == 0) {\n      return 0;\n    }\n    globalData1 = get_global_data_08003760();\n  } while ((uint)(globalData1 - globalData2) < 3);\n  dataPointer[10] = dataPointer[10] | 0x10;\n  dataPointer[0xb] = dataPointer[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "update_flag_and_status_08003b8c",
                "param_1": "dataPointer",
                "iVar1": "globalData1",
                "iVar2": "globalData2"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "validate_configuration_08003bd8",
            "code": "\nundefined4 validate_configuration_08003bd8(int *config)\n\n{\n  int update_status_result;\n  uint combined_flags;\n  uint updated_config;\n  \n  if (config == (int *)0x0) {\n    return 1;\n  }\n  if (config[10] == 0) {\n    config[0xb] = 0;\n    *(undefined *)(config + 9) = 0;\n    update_flag_and_config_08006ca8();\n  }\n  update_status_result = update_flag_and_status_08003b8c(config);\n  if (((config[10] & 0x10U) == 0) && (update_status_result == 0)) {\n    config[10] = config[10] & 0xffffeefdU | 2;\n    combined_flags = config[1] | config[7] | config[3] << 1;\n    if (config[2] == 0x100) {\n      updated_config = 0x100;\n    }\n    else {\n      updated_config = 0;\n      if (config[2] == 1) {\n        updated_config = 0x100;\n      }\n    }\n    if (config[5] == 1) {\n      if (config[3] == 0) {\n        updated_config = updated_config | (config[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        config[10] = config[10] | 0x20;\n        config[0xb] = config[0xb] | 1;\n      }\n    }\n    *(uint *)(*config + 4) = updated_config | *(uint *)(*config + 4) & 0xffff16ff;\n    *(uint *)(*config + 8) = *(uint *)(*config + 8) & 0xffe1f7fd | combined_flags;\n    if ((config[2] == 0x100) || (config[2] == 1)) {\n      updated_config = (config[4] + -1) * 0x100000;\n    }\n    else {\n      updated_config = 0;\n    }\n    *(uint *)(*config + 0x2c) = updated_config | *(uint *)(*config + 0x2c) & 0xff0fffff;\n    if (combined_flags != (*(uint *)(*config + 8) & 0xff1f0efe)) {\n      config[10] = config[10] & 0xffffffedU | 0x10;\n      config[0xb] = config[0xb] | 1;\n      return 1;\n    }\n    config[0xb] = 0;\n    config[10] = config[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  config[10] = config[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "validate_configuration_08003bd8",
                "param_1": "config",
                "iVar1": "update_status_result",
                "uVar2": "combined_flags",
                "uVar3": "updated_config"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "check_and_update_flags_08003ce8",
            "code": "\nint checkAndUpdateFlags_08003ce8(int *flagData)\n\n{\n  int result;\n  \n  if (flagData == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    flagData[10] = flagData[10] | 2;\n    result = updateFlagAndStatus();\n    if (result == 0) {\n      *(undefined4 *)*flagData = 0xffffffe0;\n      *(uint *)(*flagData + 4) = *(uint *)(*flagData + 4) & 0xff3f0000;\n      *(uint *)(*flagData + 8) = *(uint *)(*flagData + 8) & 0xff0106f0;\n      *(uint *)(*flagData + 0xc) = *(uint *)(*flagData + 0xc) & 0xff000000;\n      *(uint *)(*flagData + 0x10) = *(uint *)(*flagData + 0x10) & 0xc0000000;\n      *(uint *)(*flagData + 0x14) = *(uint *)(*flagData + 0x14) & 0xfffff000;\n      *(uint *)(*flagData + 0x18) = *(uint *)(*flagData + 0x18) & 0xfffff000;\n      *(uint *)(*flagData + 0x1c) = *(uint *)(*flagData + 0x1c) & 0xfffff000;\n      *(uint *)(*flagData + 0x20) = *(uint *)(*flagData + 0x20) & 0xfffff000;\n      *(uint *)(*flagData + 0x24) = *(uint *)(*flagData + 0x24) & 0xfffff000;\n      *(uint *)(*flagData + 0x28) = *(uint *)(*flagData + 0x28) & 0xfffff000;\n      *(uint *)(*flagData + 0x2c) = *(uint *)(*flagData + 0x2c) & 0xff000000;\n      *(uint *)(*flagData + 0x2c) = *(uint *)(*flagData + 0x2c) & 0xff000000;\n      *(uint *)(*flagData + 0x30) = *(uint *)(*flagData + 0x30) & 0xc0000000;\n      *(uint *)(*flagData + 0x34) = *(uint *)(*flagData + 0x34) & 0xc0000000;\n      *(uint *)(*flagData + 0x38) = *(uint *)(*flagData + 0x38) & 0xffc00000;\n      *(uint *)(*flagData + 0x38) = *(uint *)(*flagData + 0x38) & 0xffc00000;\n      updateRegisters(flagData);\n      flagData[0xb] = 0;\n      flagData[10] = 0;\n    }\n    *(undefined *)(flagData + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "check_and_update_flags_08003ce8",
                "param_1": "flagData",
                "iVar1": "result",
                "update_flag_and_status_08003b8c": "updateFlagAndStatus",
                "update_registers_08006d24": "updateRegisters"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "check_and_update_status_08003de4",
            "code": "\nint checkAndUpdateStatus_08003de4(int ptr)\n\n{\n  int result;\n  \n  if (*(char *)(ptr + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(ptr + 0x24) = 1;\n  result = update_flag_and_status_08003b8c();\n  if (result == 0) {\n    *(uint *)(ptr + 0x28) = *(uint *)(ptr + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(ptr + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "check_and_update_status_08003de4",
                "param_1": "ptr",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "process_data_08003e20",
            "code": "\nint processData_08003e20(int *data)\n\n{\n  uint divisor;\n  int result;\n  uint value;\n  int start;\n  int current;\n  int iteration;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_flag_and_status_08003b8c();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    divisor = DAT_20000018;\n    value = calculate_value_08005bb8(2);\n    for (iteration = divisor / value << 1; iteration != 0; iteration = iteration + -1) {\n    }\n    handle_data_processing_08003a20(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start = get_global_data_08003760();\n    while (current = *data, (*(uint *)(current + 8) & 8) != 0) {\n      current = get_global_data_08003760();\n      if (10 < (uint)(current - start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current + 8) = *(uint *)(current + 8) | 4;\n    start = get_global_data_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current = get_global_data_08003760();\n      if (10 < (uint)(current - start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "param_1": "data",
                "uVar1": "divisor",
                "iVar2": "result",
                "uVar3": "value",
                "iVar4": "start",
                "iVar5": "current",
                "local_14": "iteration"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_display_08003f0c",
            "code": "\n\n\nvoid updateDisplay_08003f0c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_display_08003f0c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "apply_bitwise_operation_08003f30",
            "code": "\n\n\nvoid applyBitwiseOperation_08003f30(uint inputIndex,uint bitMask,uint value)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitMask & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & value;\n  if ((int)inputIndex < 0) {\n    *(char *)((inputIndex & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(inputIndex + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "apply_bitwise_operation_08003f30",
                "param_1": "inputIndex",
                "param_2": "bitMask",
                "param_3": "value",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_at_index_08003f94",
            "code": "\nvoid setBitAtIndex_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "param_1": "index"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n    syncData(0xf);\n    syncInstructions(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitPosition",
                "DataSynchronizationBarrier": "syncData",
                "InstructionSynchronizationBarrier": "syncInstructions"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_data_values_08003fd8",
            "code": "\n\n\nundefined4 set_data_values_08003fd8(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_data_values_08003fd8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_08004004",
            "code": "\nvoid setBit_08004004(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_08004004",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_e000e010_08004024",
            "code": "\n\n\nvoid update_e000e010_08004024(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_e000e010_08004024",
                "param_1": "value"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "execute_initialization_08004046",
            "code": "\nvoid execute_initialization_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "execute_initialization_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "configure_device_08004050",
            "code": "\n\n\nundefined4 configure_device_08004050(uint **device_params)\n\n{\n  uint *param_value;\n  \n  if (*(char *)((int)device_params + 0x21) != '\\x02') {\n    device_params[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **device_params = **device_params & 0xfffffff1;\n  **device_params = **device_params & 0xfffffffe;\n  param_value = *device_params;\n  if (param_value == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (param_value == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (param_value == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (param_value == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (param_value == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (param_value == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)device_params + 0x21) = 1;\n  *(undefined *)(device_params + 8) = 0;\n  if (device_params[0xd] != (uint *)0x0) {\n    (*(code *)device_params[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "configure_device_08004050",
                "param_1": "device_params",
                "puVar1": "param_value"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_configuration_080040e8",
            "code": "\n\n\nvoid updateConfiguration_080040e8(uint *output,uint *input)\n\n{\n  uint *outputPtr;\n  uint bitMask;\n  uint inputBit;\n  uint bitPosition;\n  uint configValue;\n  uint newValue;\n  int configIndex;\n  int registerIndex;\n  \n  newValue = 0;\n  bitPosition = 0;\n  do {\n    if (0xf < bitPosition) {\n      return;\n    }\n    bitMask = 1 << (bitPosition & 0xff);\n    inputBit = *input & bitMask;\n    if (bitMask == inputBit) {\n      configValue = input[1];\n      if (configValue == 0x12) {\n        newValue = input[3] + 0xc;\n      }\n      else if (configValue < 0x13) {\n        if (configValue == 2) {\n          newValue = input[3] + 8;\n        }\n        else if (configValue < 3) {\n          if (configValue == 0) goto LAB_0800423a;\n          if (configValue == 1) {\n            newValue = input[3];\n          }\n        }\n        else if (configValue == 3) {\n          newValue = 0;\n        }\n        else if (configValue == 0x11) {\n          newValue = input[3] + 4;\n        }\n      }\n      else if (configValue == 0x10210000) {\nLAB_0800423a:\n        if (input[2] == 0) {\n          newValue = 4;\n        }\n        else if (input[2] == 1) {\n          output[4] = bitMask;\n          newValue = 8;\n        }\n        else {\n          output[5] = bitMask;\n          newValue = 8;\n        }\n      }\n      else if (configValue < 0x10210001) {\n        if ((configValue == 0x10110000) || (configValue == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((configValue == 0x10310000) || ((configValue == 0x10320000 || (configValue == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = bitPosition;\n      outputPtr = output;\n      if (0xff < inputBit) {\n        bitMask = bitPosition - 8;\n        outputPtr = output + 1;\n      }\n      *outputPtr = *outputPtr & ~(0xf << (bitMask << 2 & 0xff)) | newValue << (bitMask << 2 & 0xff);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        configIndex = (bitPosition & 3) << 2;\n        if (output == (uint *)0x40010800) {\n          registerIndex = 0;\n        }\n        else if (output == (uint *)0x40010c00) {\n          registerIndex = 1;\n        }\n        else if (output == (uint *)0x40011000) {\n          registerIndex = 2;\n        }\n        else if (output == (uint *)0x40011400) {\n          registerIndex = 3;\n        }\n        else {\n          registerIndex = 4;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) & ~(0xf << configIndex) | registerIndex << configIndex;\n        if ((input[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~inputBit;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | inputBit;\n        }\n        if ((input[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~inputBit;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | inputBit;\n        }\n        if ((input[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~inputBit;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | inputBit;\n        }\n        if ((input[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~inputBit;\n        }\n        else {\n          _DAT_4001040c = inputBit | _DAT_4001040c;\n        }\n      }\n    }\n    bitPosition = bitPosition + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_configuration_080040e8",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "outputPtr",
                "uVar2": "bitMask",
                "uVar3": "inputBit",
                "uVar4": "bitPosition",
                "uVar5": "configValue",
                "uVar6": "newValue",
                "iVar7": "configIndex",
                "iVar8": "registerIndex"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int input_value,uint mask)\n\n{\n  if ((mask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "input_value",
                "param_2": "mask"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "update_value_080042e2",
            "code": "\nvoid updateValue_080042e2(int baseAddress,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(baseAddress + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "update_value_080042e2",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_and_process_080042f0",
            "code": "\n\n\nvoid update_and_process_080042f0(uint input_parameter)\n\n{\n  if ((_DAT_40010414 & input_parameter) != 0) {\n    _DAT_40010414 = input_parameter;\n    validate_and_execute();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_and_process_080042f0",
                "param_1": "input_parameter",
                "check_and_process_08009094": "validate_and_execute"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_permission_0800430c",
            "code": "\nundefined4 updatePermission_0800430c(int *inputData)\n\n{\n  if (*(char *)((int)inputData + 0x3e) == '@') {\n    if (inputData[0x14] == 0) {\n      *(uint *)(*inputData + 0x10) = inputData[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*inputData + 0x10) = inputData[0x11] & 0xffU | 1;\n    }\n  }\n  else if (inputData[4] == 0x4000) {\n    if (*(char *)((int)inputData + 0x3d) == '!') {\n      *(uint *)(*inputData + 0x10) = inputData[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*inputData + 0x10) = inputData[0x11] & 0xffU | 1;\n    }\n  }\n  else if (inputData[0x14] == 0) {\n    *(uint *)(*inputData + 0x10) = (uint)(inputData[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (inputData[0x14] == 1) {\n    *(uint *)(*inputData + 0x10) = (uint)(inputData[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_permission_0800430c",
                "param_1": "inputData",
                "param_1[0x14]": "inputData[0x14]",
                "param_1[0x11]": "inputData[0x11]"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "set_first_byte_08004396",
            "code": "\nundefined4 setFirstByte_08004396(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0x10) = arrayValueAtIndex0x11 & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "set_first_byte_08004396",
                "param_1": "inputArray",
                "param_1[0x11]": "arrayValueAtIndex0x11"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_flags_080043a2",
            "code": "\nundefined4 updateFlags_080043a2(uint **parameters)\n\n{\n  uint *ptr1;\n  \n  ptr1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (ptr1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          ptr1 = *parameters;\n          if ((ptr1[1] & 0x800) == 0) {\n            *ptr1 = *ptr1 | 0x200;\n          }\n          else {\n            *ptr1 = *ptr1 & 0xfffffbff;\n          }\n        }\n        else if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        ptr1 = *parameters;\n        if ((ptr1[1] & 0x800) != 0) {\n          ptr1[1] = ptr1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        ptr1 = *parameters;\n        if ((ptr1[1] & 0x800) != 0) {\n          ptr1[1] = ptr1[1] | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_flags_080043a2",
                "param_1": "parameters",
                "puVar1": "ptr1"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_data_0800457c",
            "code": "\nundefined4 updateData_0800457c(int *dataArray)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)dataArray + 0x2a) != 0) {\n    bytePointer = (byte *)dataArray[9];\n    dataArray[9] = (int)(bytePointer + 1);\n    *(uint *)(*dataArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)dataArray + 0x2a) = *(short *)((int)dataArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_data_0800457c",
                "param_1": "dataArray",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_and_decrement_0800459c",
            "code": "\nundefined4 updateAndDecrement_0800459c(int *pointerToInt)\n\n{\n  undefined *undefinedPointer;\n  \n  if (*(short *)((int)pointerToInt + 0x2a) != 0) {\n    undefinedPointer = (undefined *)pointerToInt[9];\n    pointerToInt[9] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*pointerToInt + 0x10);\n    *(short *)((int)pointerToInt + 0x2a) = *(short *)((int)pointerToInt + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_and_decrement_0800459c",
                "param_1": "pointerToInt",
                "puVar1": "undefinedPointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "calculate_and_store_values_080045c0",
            "code": "\nundefined4 calculateAndStoreValues_080045c0(uint **param)\n\n{\n  bool isLessThanThreshold;\n  uint globalValue;\n  uint *pointerValue;\n  uint tempValue;\n  \n  if (param == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)param + 0x3d) == '\\0') {\n    *(undefined *)(param + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)param + 0x3d) = 0x24;\n  **param = **param & 0xfffffffe;\n  globalValue = get_shifted_global_value_08005a28();\n  if (param[1] < (uint *)0x186a1) {\n    if (globalValue < 2000000) {\n      isLessThanThreshold = true;\n    }\n    else {\n      isLessThanThreshold = false;\n    }\n  }\n  else {\n    isLessThanThreshold = globalValue < 4000000;\n  }\n  if (isLessThanThreshold) {\n    return 1;\n  }\n  tempValue = globalValue / 1000000;\n  (*param)[1] = tempValue;\n  if ((uint *)0x186a0 < param[1]) {\n    tempValue = (tempValue * 300) / 1000;\n  }\n  (*param)[8] = tempValue + 1;\n  pointerValue = param[1];\n  if (pointerValue < (uint *)0x186a1) {\n    globalValue = (globalValue - 1) / (uint)((int)pointerValue << 1) + 1 & 0xfff;\n    if (globalValue < 4) {\n      globalValue = 4;\n    }\n  }\n  else {\n    if (param[2] == (uint *)0x0) {\n      tempValue = (globalValue - 1) / (uint)((int)pointerValue * 3);\n    }\n    else {\n      tempValue = (globalValue - 1) / (uint)((int)pointerValue * 0x19);\n    }\n    if ((tempValue + 1 & 0xfff) == 0) {\n      globalValue = 1;\n    }\n    else if (param[2] == (uint *)0x0) {\n      globalValue = (globalValue - 1) / (uint)((int)pointerValue * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      globalValue = (globalValue - 1) / (uint)((int)pointerValue * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*param)[7] = globalValue;\n  **param = (uint)param[7] | (uint)param[8];\n  (*param)[2] = (uint)param[4] | (uint)param[3];\n  (*param)[3] = (uint)param[5] | (uint)param[6];\n  **param = **param | 1;\n  param[0x10] = (uint *)0x0;\n  *(undefined *)((int)param + 0x3d) = 0x20;\n  param[0xc] = (uint *)0x0;\n  *(undefined *)((int)param + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "calculate_and_store_values_080045c0",
                "param_1": "param",
                "bVar1": "isLessThanThreshold",
                "uVar2": "globalValue",
                "puVar3": "pointerValue",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "check_and_initialize_08004728",
            "code": "\nundefined4 checkAndInitialize_08004728(uint **inputParams,uint *param2,uint *param3,undefined2 param4)\n\n{\n  undefined4 returnValue;\n  uint *ptrToParam1;\n  int loopCounter;\n  \n  if (*(char *)((int)inputParams + 0x3d) == ' ') {\n    loopCounter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (loopCounter == 0) {\n        inputParams[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        *(undefined *)(inputParams + 0xf) = 0;\n        return 3;\n      }\n      ptrToParam1 = *inputParams;\n      loopCounter = loopCounter + -1;\n    } while ((ptrToParam1[6] & 2) != 0);\n    if (*(char *)(inputParams + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputParams + 0xf) = 1;\n      if ((*ptrToParam1 & 1) == 0) {\n        *ptrToParam1 = *ptrToParam1 | 1;\n      }\n      **inputParams = **inputParams & 0xfffff7ff;\n      *(undefined *)((int)inputParams + 0x3d) = 0x21;\n      *(undefined *)((int)inputParams + 0x3e) = 0x10;\n      returnValue = 0;\n      inputParams[0x10] = (uint *)0x0;\n      inputParams[9] = param3;\n      *(undefined2 *)((int)inputParams + 0x2a) = param4;\n      inputParams[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputParams + 10) = *(undefined2 *)((int)inputParams + 0x2a);\n      inputParams[0x11] = param2;\n      **inputParams = **inputParams | 0x100;\n      *(undefined *)(inputParams + 0xf) = 0;\n      (*inputParams)[1] = (*inputParams)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004728": "check_and_initialize_08004728",
                "param_1": "inputParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "returnValue",
                "puVar2": "ptrToParam1",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "process_parameters_080047f4",
            "code": "\nundefined4 processParameters_080047f4(uint **inputData,uint *outputBuffer,uint *statusBuffer,undefined2 flagValue)\n\n{\n  undefined4 result;\n  uint *pointer;\n  int counter;\n  \n  if (*(char *)((int)inputData + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        inputData[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputData + 0x3d) = 0x20;\n        *(undefined *)(inputData + 0xf) = 0;\n        return 3;\n      }\n      pointer = *inputData;\n      counter = counter + -1;\n    } while ((pointer[6] & 2) != 0);\n    if (*(char *)(inputData + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputData + 0xf) = 1;\n      if ((*pointer & 1) == 0) {\n        *pointer = *pointer | 1;\n      }\n      **inputData = **inputData & 0xfffff7ff;\n      *(undefined *)((int)inputData + 0x3d) = 0x22;\n      *(undefined *)((int)inputData + 0x3e) = 0x10;\n      result = 0;\n      inputData[0x10] = (uint *)0x0;\n      inputData[9] = statusBuffer;\n      *(undefined2 *)((int)inputData + 0x2a) = flagValue;\n      inputData[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputData + 10) = *(undefined2 *)((int)inputData + 0x2a);\n      inputData[0x11] = outputBuffer;\n      **inputData = **inputData | 0x400;\n      **inputData = **inputData | 0x100;\n      *(undefined *)(inputData + 0xf) = 0;\n      (*inputData)[1] = (*inputData)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "process_parameters_080047f4",
                "param_1": "inputData",
                "param_2": "outputBuffer",
                "param_3": "statusBuffer",
                "param_4": "flagValue",
                "uVar1": "result",
                "puVar2": "pointer",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "setup_parameters_080048c8",
            "code": "\nundefined4 setup_parameters_080048c8(uint **parameter_array,uint *result_array,int count,uint *data_array)\n\n{\n  undefined4 result;\n  uint *temp_ptr;\n  \n  if (*(char *)((int)parameter_array + 0x3d) == '(') {\n    if (result_array == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameter_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameter_array + 0xf) = 1;\n      temp_ptr = *parameter_array;\n      if ((*temp_ptr & 1) == 0) {\n        *temp_ptr = *temp_ptr | 1;\n      }\n      **parameter_array = **parameter_array & 0xfffff7ff;\n      *(undefined *)((int)parameter_array + 0x3d) = 0x29;\n      *(undefined *)((int)parameter_array + 0x3e) = 0x20;\n      result = 0;\n      parameter_array[0x10] = (uint *)0x0;\n      parameter_array[9] = result_array;\n      *(short *)((int)parameter_array + 0x2a) = (short)count;\n      parameter_array[0xb] = data_array;\n      *(undefined2 *)(parameter_array + 10) = *(undefined2 *)((int)parameter_array + 0x2a);\n      *(undefined *)(parameter_array + 0xf) = 0;\n      (*parameter_array)[1] = (*parameter_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "setup_parameters_080048c8",
                "param_1": "parameter_array",
                "param_2": "result_array",
                "param_3": "count",
                "param_4": "data_array",
                "uVar1": "result",
                "puVar2": "temp_ptr"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "validate_input_08004954",
            "code": "\nundefined4 validate_input_08004954(uint **input_structure,uint *input_data,int input_length,uint *output_buffer)\n\n{\n  undefined4 result;\n  uint *pointer;\n  \n  if (*(char *)((int)input_structure + 0x3d) == '(') {\n    if (input_data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_structure + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_structure + 0xf) = 1;\n      pointer = *input_structure;\n      if ((*pointer & 1) == 0) {\n        *pointer = *pointer | 1;\n      }\n      **input_structure = **input_structure & 0xfffff7ff;\n      *(undefined *)((int)input_structure + 0x3d) = 0x2a;\n      *(undefined *)((int)input_structure + 0x3e) = 0x20;\n      result = 0;\n      pointer_array_1 = (uint *)0x0;\n      pointer_array_2 = input_data;\n      *(short *)((int)input_structure + 0x2a) = (short)input_length;\n      pointer_array_3 = output_buffer;\n      *(undefined2 *)(input_structure + 10) = *(undefined2 *)((int)input_structure + 0x2a);\n      *(undefined *)(input_structure + 0xf) = 0;\n      (*input_structure)[1] = (*input_structure)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_structure",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "output_buffer",
                "uVar1": "result",
                "puVar2": "pointer",
                "param_1[0x10]": "pointer_array_1",
                "param_1[9]": "pointer_array_2",
                "param_1[0xb]": "pointer_array_3"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "set_flags_and_values_080049e0",
            "code": "\nundefined4 setFlagsAndValues_080049e0(uint **pointer)\n\n{\n  uint *firstElementPtr;\n  \n  if (*(char *)((int)pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)pointer + 0x3d) = 0x28;\n  firstElementPtr = *pointer;\n  if ((*firstElementPtr & 1) == 0) {\n    *firstElementPtr = *firstElementPtr | 1;\n  }\n  **pointer = **pointer | 0x400;\n  (*pointer)[1] = (*pointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "set_flags_and_values_080049e0",
                "param_1": "pointer",
                "puVar1": "firstElementPtr"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "process_data_08004a24",
            "code": "\nundefined4 processData_08004a24(int *data)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "process_input_08004a76",
            "code": "\nundefined4 processInput_08004a76(int *input)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)input + 0x3d);\n  if (*(short *)((int)input + 0x2a) != 0) {\n    ptr = (undefined *)input[9];\n    input[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*input + 0x10);\n    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    if ((*(short *)((int)input + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*input + 4) = *(uint *)(*input + 4) & 0xfffffbff;\n      input[0xc] = 0x22;\n      *(undefined *)((int)input + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "process_input_08004a76",
                "param_1": "input",
                "cVar1": "charValue",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_parameters_08004ac2",
            "code": "\nundefined4 process_parameters_08004ac2(int *input_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 selected_value;\n  uint flags;\n  \n  flags = *(uint *)(*input_ptr + 0x18);\n  if ((flags & 0x80) == 0) {\n    selected_value = *(undefined2 *)(input_ptr + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(input_ptr + 6);\n  }\n  process_parameters_08004ac2_08007fa0(input_ptr,(*(uint *)(*input_ptr + 0x18) & 4) == 0,selected_value,flags,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_parameters_08004ac2",
                "param_1": "input_ptr",
                "uVar1": "selected_value",
                "uVar2": "flags"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "process_param_08004aec",
            "code": "\nuint32_t process_param_08004aec(uint32_t **param_array)\n\n{\n  if (((param_array[11] == (uint32_t *)0x4) || (param_array[11] == (uint32_t *)0x8)) &&\n     (*(char *)((int)param_array + 0x3d) == '(')) {\n    param_array[11] = (uint32_t *)0xffff0000;\n    (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n    (*param_array)[5] = 0xfffffbff;\n    **param_array = **param_array & 0xfffffbff;\n    param_array[12] = (uint32_t *)0x0;\n    *(undefined *)((int)param_array + 0x3d) = 0x20;\n    *(undefined *)((int)param_array + 0x3e) = 0;\n    execute_function();\n  }\n  else if (*(char *)((int)param_array + 0x3d) == '!') {\n    param_array[11] = (uint32_t *)0xffff0000;\n    param_array[12] = (uint32_t *)0x21;\n    *(undefined *)((int)param_array + 0x3d) = 0x20;\n    *(undefined *)((int)param_array + 0x3e) = 0;\n    (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n    (*param_array)[5] = 0xfffffbff;\n    **param_array = **param_array & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*param_array)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "process_param_08004aec",
                "param_1": "param_array",
                "param_1[0xb]": "param_array[11]",
                "param_1[0xc]": "param_array[12]",
                "(int)param_1": "(int)param_array",
                "undefined4": "uint32_t",
                "uint": "uint32_t",
                "execute_function_08007ff0": "execute_function"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_data_08004b82",
            "code": "\nundefined4 processData_08004b82(uint **data)\n\n{\n  char charValue;\n  uint *ptrValue;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  ptrValue = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (charValue == '!')) {\n    if ((ptrValue == (uint *)0x4) || ((ptrValue == (uint *)0x8 || (ptrValue == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((charValue == '!') || ((*(char *)((int)data + 0x3e) == '@' && (charValue == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptrValue = data[9];\n          data[9] = (uint *)((int)ptrValue + 1);\n          (*data)[4] = (uint)*(byte *)ptrValue;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrValue = data[9];\n      data[9] = (uint *)((int)ptrValue + 1);\n      (*data)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_data_08004b82",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptrValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "update_status_and_perform_action_08004ccc",
            "code": "\nundefined4 updateStatusAndPerformAction_08004ccc(uint **inputParams)\n\n{\n  uint *ptrValue;\n  \n  ptrValue = inputParams[0xb];\n  if (*(char *)((int)inputParams + 0x3d) == '!') {\n    if (*(short *)((int)inputParams + 0x2a) == 0) {\n      if (((ptrValue == (uint *)0x4) || (ptrValue == (uint *)0x8)) || (ptrValue == (uint *)0xffff0000)) {\n        (*inputParams)[1] = (*inputParams)[1] & 0xfffff8ff;\n        **inputParams = **inputParams | 0x200;\n        inputParamsIndexC = (uint *)0x0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        if (*(char *)((int)inputParams + 0x3e) == '@') {\n          *(undefined *)((int)inputParams + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)inputParams + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*inputParams)[1] = (*inputParams)[1] & 0xfffff8ff;\n        inputParamsIndexC = (uint *)0x11;\n        *(undefined *)((int)inputParams + 0x3e) = 0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      ptrValue = inputParamsIndex9;\n      inputParamsIndex9 = (uint *)((int)ptrValue + 1);\n      (*inputParams)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "update_status_and_perform_action_08004ccc",
                "param_1": "inputParams",
                "puVar1": "ptrValue",
                "param_1[0xc]": "inputParamsIndexC",
                "param_1[9]": "inputParamsIndex9"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "check_and_update_bits_08004d6c",
            "code": "\nundefined4 checkAndUpdateBits_08004d6c(uint **parameters)\n\n{\n  uint *tempPointer;\n  \n  if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)parameters + 0x2a) < 4) {\n      if (*(ushort *)((int)parameters + 0x2a) - 2 < 2) {\n        if (paramB == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n      }\n      else {\n        if (paramB == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        tempPointer = param9;\n        param9 = (uint *)((int)tempPointer + 1);\n        *(char *)tempPointer = (char)(*parameters)[4];\n        *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        parameters[0xc] = (uint *)0x0;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      tempPointer = param9;\n      param9 = (uint *)((int)tempPointer + 1);\n      *(char *)tempPointer = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "check_and_update_bits_08004d6c",
                "param_1": "parameters",
                "puVar1": "tempPointer",
                "param_1[0xb]": "paramB",
                "param_1[9]": "param9"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_param_08004e3c",
            "code": "\nundefined4 process_param_08004e3c(uint **param_array)\n\n{\n  uint *current_value;\n  \n  current_value = param_array[0xb];\n  if (*(short *)((int)param_array + 0x2a) == 3) {\n    if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n      **param_array = **param_array & 0xfffffbff;\n    }\n    current_value = counter;\n    counter = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param_array + 0x2a) == 2) {\n    if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n      (*param_array)[1] = (*param_array)[1] & 0xfffffcff;\n      **param_array = **param_array | 0x200;\n    }\n    else {\n      if (current_value == (uint *)0x2) {\n        **param_array = **param_array | 0x400;\n      }\n      else {\n        **param_array = **param_array & 0xfffffbff;\n      }\n      (*param_array)[1] = (*param_array)[1] & 0xfffffcff;\n    }\n    current_value = counter;\n    counter = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    current_value = counter;\n    counter = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    *(undefined *)((int)param_array + 0x3d) = 0x20;\n    param_array[0xc] = (uint *)0x0;\n    if (*(char *)((int)param_array + 0x3e) == '@') {\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    current_value = counter;\n    counter = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_param_08004e3c",
                "param_1": "param_array",
                "puVar1": "current_value",
                "param_1[9]": "counter"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "configure_device_08004f3c",
            "code": "\nvoid configure_device_08004f3c(uint **config)\n\n{\n  int result;\n  uint *pointer_1;\n  uint *pointer_2;\n  \n  if (*(byte *)((int)config + 0x3d) - 0x29 < 2) {\n    config[0xc] = (uint *)0x0;\n    *(undefined *)((int)config + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)config + 0x3d) != '`') && (((*config)[1] & 0x800) == 0)) {\n      *(undefined *)((int)config + 0x3d) = 0x20;\n    }\n    config[0xc] = (uint *)0x0;\n    *(undefined *)((int)config + 0x3e) = 0;\n  }\n  **config = **config & 0xfffff7ff;\n  pointer_2 = *config;\n  if ((pointer_2[1] & 0x800) == 0) {\n    if (*(char *)((int)config + 0x3d) == '`') {\n      *(undefined *)((int)config + 0x3d) = 0x20;\n      config[0x10] = (uint *)0x0;\n      if ((pointer_2[5] & 0x40) != 0) {\n        pointer_1 = config[9];\n        config[9] = (uint *)((int)pointer_1 + 1);\n        *(char *)pointer_1 = (char)pointer_2[4];\n      }\n      **config = **config & 0xfffffffe;\n      FUNC_08004f3a(config);\n    }\n    else {\n      if ((pointer_2[5] & 0x40) != 0) {\n        pointer_1 = config[9];\n        config[9] = (uint *)((int)pointer_1 + 1);\n        *(char *)pointer_1 = (char)pointer_2[4];\n      }\n      check_and_set_values_08008020(config);\n    }\n  }\n  else {\n    pointer_2[1] = pointer_2[1] & 0xfffff7ff;\n    if (*(char *)((int)config[0xd] + 0x21) == '\\x01') {\n      config[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = configure_device_08004f3c_08004050(config[0xe]);\n      if (result != 0) {\n        if (((*config)[5] & 0x40) != 0) {\n          pointer_2 = config[9];\n          config[9] = (uint *)((int)pointer_2 + 1);\n          *(char *)pointer_2 = (char)(*config)[4];\n        }\n        **config = **config & 0xfffffffe;\n        *(undefined *)((int)config + 0x3d) = 0x20;\n        (*(code *)config[0xe][0xd])();\n      }\n    }\n    else {\n      config[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = configure_device_08004f3c_08004050(config[0xd]);\n      if (result != 0) {\n        **config = **config & 0xfffffffe;\n        *(undefined *)((int)config + 0x3d) = 0x20;\n        (*(code *)config[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)config + 0x3d) == '(') && (((uint)config[0x10] & 4) != 0)) {\n    config[0xb] = (uint *)0xffff0000;\n    config[0xc] = (uint *)0x0;\n    *(undefined *)((int)config + 0x3d) = 0x20;\n    *(undefined *)((int)config + 0x3e) = 0;\n    execute_function_08007ff0(config);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "configure_device_08004f3c",
                "param_1": "config",
                "iVar1": "result",
                "puVar2": "pointer_1",
                "puVar3": "pointer_2"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_param_08005084",
            "code": "\nundefined4 processParam_08005084(uint **param)\n\n{\n  char charValue;\n  uint *ptr1;\n  uint *ptr2;\n  \n  charValue = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  ptr1 = *param;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = param[9];\n      param[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      ptr1 = param[9];\n      param[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      execute_function_08007ff0();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    configure_device_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_param_08005084",
                "param_1": "param",
                "cVar1": "charValue",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_permissions_08005188",
            "code": "\nvoid process_permissions_08005188(int *data)\n\n{\n  int var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  \n  var1 = *data;\n  var4 = *(uint *)(var1 + 0x18);\n  var2 = *(uint *)(var1 + 0x14);\n  var3 = *(uint *)(var1 + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((var2 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n      if (((var2 & 0x10008) == 0) || ((var3 & 0x200) == 0)) {\n        if (((var2 & 0x10002) != 0) && ((var3 & 0x200) != 0)) {\n          update_flags_080043a2(data);\n        }\n      }\n      else {\n        set_first_byte_08004396(data);\n      }\n    }\n    else {\n      update_permission_0800430c(data);\n    }\n    if ((var4 & 0x100004) == 0) {\n      if ((((var2 & 0x10040) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        check_and_update_bits_08004d6c(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        process_param_08004e3c(data);\n        return;\n      }\n    }\n    else {\n      if ((((var2 & 0x10080) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        process_data_08004b82(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        update_status_and_perform_action_08004ccc(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((var2 & 0x10002) != 0) && ((var3 & 0x200) != 0)) {\n      process_parameters_08004ac2();\n      return;\n    }\n    if (((var2 & 0x10010) != 0) && ((var3 & 0x200) != 0)) {\n      process_param_08005084(data);\n      return;\n    }\n    if ((var4 & 0x100004) == 0) {\n      if ((((var2 & 0x10040) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        process_input_08004a76(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        update_and_decrement_0800459c(data);\n      }\n    }\n    else {\n      if ((((var2 & 0x10080) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        process_data_08004a24(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        update_data_0800457c(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_permissions_08005188",
                "param_1": "data",
                "iVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "configure_device_080052f0",
            "code": "\nvoid configure_device_080052f0(uint **device_params)\n\n{\n  char character;\n  uint *param_ptr;\n  uint flag1;\n  uint flag2;\n  \n  param_ptr = *device_params;\n  flag1 = param_ptr[5];\n  flag2 = param_ptr[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    device_params[0x10] = (uint *)((uint)device_params[0x10] | 1);\n    param_ptr[5] = 0xfffffeff;\n    **device_params = **device_params | 0x8000;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    device_params[0x10] = (uint *)((uint)device_params[0x10] | 2);\n    (*device_params)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)device_params + 0x3d);\n    if (((*(char *)((int)device_params + 0x3e) == ' ') && (*(short *)((int)device_params + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (device_params[0xc] == (uint *)0x21)))))) {\n      process_param_08004aec(device_params);\n    }\n    else {\n      device_params[0x10] = (uint *)((uint)device_params[0x10] | 4);\n      if (*(char *)((int)device_params + 0x3e) == '\\x10') {\n        **device_params = **device_params | 0x200;\n      }\n      (*device_params)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    device_params[0x10] = (uint *)((uint)device_params[0x10] | 8);\n    (*device_params)[5] = 0xfffff7ff;\n  }\n  if (device_params[0x10] != (uint *)0x0) {\n    configure_device_080052f0_08004f3c(device_params);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "configure_device_080052f0",
                "param_1": "device_params",
                "cVar1": "character",
                "puVar2": "param_ptr",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_value_0800542a",
            "code": "\nundefined get_byte_value_0800542a(int base_address)\n\n{\n  return *(undefined *)(base_address + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_value_0800542a",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_value_from_offset_08005430",
            "code": "\nundefined4 get_value_from_offset_08005430(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_value_from_offset_08005430",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int inputValue)\n\n{\n  bool checkValue;\n  int newValue;\n  \n  newValue = inputValue * (DAT_20000018 / 8000);\n  do {\n    checkValue = newValue != 0;\n    newValue = newValue + -1;\n  } while (checkValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "inputValue",
                "local_4": "newValue",
                "bVar1": "checkValue"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "process_flags_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 processFlags_08005460(uint *flags)\n\n{\n  int initialTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool isBitClear;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        initialTime = get_global_data_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_global_data_08003760();\n          if (100 < (uint)(currentTime - initialTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialTime = get_global_data_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_global_data_08003760();\n          if (100 < (uint)(currentTime - initialTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      initialTime = get_global_data_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialTime = get_global_data_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      initialTime = get_global_data_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialTime = get_global_data_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n      delay_function_08005434(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isBitClear = (_DAT_4002101c & 0x10000000) == 0;\n    if (isBitClear) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialTime = get_global_data_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_global_data_08003760();\n        if (100 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      initialTime = get_global_data_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_global_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialTime = get_global_data_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_global_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isBitClear) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    initialTime = get_global_data_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        initialTime = get_global_data_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_global_data_08003760();\n        } while ((uint)(currentTime - initialTime) < 3);\n        return 3;\n      }\n      currentTime = get_global_data_08003760();\n    } while ((uint)(currentTime - initialTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialTime = get_global_data_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_global_data_08003760();\n    } while ((uint)(currentTime - initialTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "process_flags_08005460",
                "param_1": "flags",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "isBitClear"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_execution_time_08005840",
            "code": "\n\n\nuint calculateExecutionTime_08005840(void)\n\n{\n  uint execution_time;\n  undefined2 param_a;\n  undefined4 param_b;\n  undefined4 param_c;\n  undefined4 param_d;\n  undefined4 param_e;\n  \n  param_e = 0x10100f0e;\n  param_d = 0xd0c0b0a;\n  param_c = 0x9080706;\n  param_b = 0x5040302;\n  param_a = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    execution_time = (uint)*(byte *)((int)&param_b + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      execution_time = execution_time * 4000000;\n    }\n    else {\n      execution_time = (execution_time * 8000000) /\n              (uint)*(byte *)((int)&param_a - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    execution_time = 8000000;\n  }\n  return execution_time;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_execution_time_08005840",
                "local_1c": "param_a",
                "uStack_18": "param_b",
                "uStack_14": "param_c",
                "uStack_10": "param_d",
                "uStack_c": "param_e",
                "uVar1": "execution_time"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_data_080058ac",
            "code": "\n\n\nundefined4 initialize_data_080058ac(uint *parameters,uint size)\n\n{\n  int start_time;\n  int current_time;\n  uint execution_time;\n  \n  if ((_DAT_40022000 & 7) < size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | parameters[2];\n  }\n  if ((*parameters & 1) != 0) {\n    execution_time = parameters[1];\n    if (execution_time == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((execution_time != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = execution_time | _DAT_40021004 & 0xfffffffc;\n    start_time = get_global_data_08003760();\n    if (parameters[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_global_data_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (parameters[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_global_data_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_global_data_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | parameters[3];\n  }\n  if ((*parameters & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | parameters[4] << 3;\n  }\n  execution_time = calculate_execution_time_08005840();\n  DAT_20000018 = execution_time >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_data_080058ac_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_data_080058ac",
                "param_1": "parameters",
                "param_2": "size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "execution_time"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_and_calculate_execution_time_080058d2",
            "code": "\n\n\nundefined4 initialize_and_calculate_execution_time_080058d2(uint *flags,uint value)\n\n{\n  int start_time;\n  int current_time;\n  uint execution_time;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    execution_time = flags[1];\n    if (execution_time == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((execution_time != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = execution_time | _DAT_40021004 & 0xfffffffc;\n    start_time = get_global_data_08003760();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_global_data_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_global_data_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_global_data_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  execution_time = calculate_execution_time_08005840();\n  DAT_20000018 = execution_time >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_data_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_and_calculate_execution_time_080058d2",
                "param_1": "flags",
                "param_2": "value",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "execution_time"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_global_value_08005a1c",
            "code": "\nundefined4 getGlobalValue_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_global_value_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_global_value_08005a28",
            "code": "\n\n\nuint get_shifted_global_value_08005a28(void)\n\n{\n  uint global_value;\n  \n  global_value = get_global_value();\n  return global_value >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_global_value_08005a28",
                "uVar1": "global_value",
                "get_global_value_08005a1c": "get_global_value"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_shifted_global_value_08005a48",
            "code": "\n\n\nuint get_shifted_global_value_08005a48(void)\n\n{\n  uint global_value;\n  \n  global_value = get_global_value();\n  return global_value >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_shifted_global_value_08005a48",
                "uVar1": "global_value",
                "get_global_value_08005a1c": "get_global_value"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_param_08005a68",
            "code": "\n\n\nvoid initializeParam_08005a68(undefined4 *outputArray,uint *flags)\n\n{\n  *outputArray = 0xf;\n  outputArray[1] = _DAT_40021004 & 3;\n  outputArray[2] = _DAT_40021004 & 0xf0;\n  outputArray[3] = _DAT_40021004 & 0x700;\n  outputArray[4] = _DAT_40021004 >> 3 & 0x700;\n  *flags = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_param_08005a68",
                "param_1": "outputArray",
                "param_2": "flags"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "initialize_hardware_08005aa4",
            "code": "\n\n\nundefined4 initializeHardware_08005aa4(uint *configParams)\n\n{\n  uint flag1;\n  uint flag2;\n  int startTime;\n  int currentTime;\n  bool isMutexEnabled;\n  \n  if ((*configParams & 1) != 0) {\n    isMutexEnabled = (_DAT_4002101c & 0x10000000) == 0;\n    if (isMutexEnabled) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_global_data_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_global_data_08003760();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (configParams[1] & 0x300))) {\n      flag2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      flag1 = _DAT_40021020 & 1;\n      _DAT_40021020 = flag2;\n      if (flag1 != 0) {\n        startTime = get_global_data_08003760();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentTime = get_global_data_08003760();\n          if (5000 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | configParams[1];\n    if (isMutexEnabled) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | configParams[2];\n  }\n  if ((*configParams & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | configParams[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "initialize_hardware_08005aa4",
                "param_1": "configParams",
                "uVar1": "flag1",
                "uVar2": "flag2",
                "iVar3": "startTime",
                "iVar4": "currentTime",
                "bVar5": "isMutexEnabled"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_value_08005bb8",
            "code": "\n\n\nuint calculateValue_08005bb8(int inputValue)\n\n{\n  uint resultValue;\n  undefined2 shiftedValue;\n  undefined4 multiplier1;\n  undefined4 multiplier2;\n  undefined4 multiplier3;\n  undefined4 multiplier4;\n  \n  multiplier4 = 0x10100f0e;\n  multiplier3 = 0xd0c0b0a;\n  multiplier2 = 0x9080706;\n  multiplier1 = 0x5040302;\n  shiftedValue = 0x201;\n  if (inputValue == 2) {\n    resultValue = get_shifted_global_value_08005a48();\n    resultValue = resultValue / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (inputValue == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      resultValue = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        resultValue = 4000000;\n      }\n      else {\n        resultValue = 8000000 / *(byte *)((int)&shiftedValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      resultValue = resultValue * *(byte *)((int)&multiplier1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        resultValue = (resultValue * 2) / 3;\n      }\n    }\n  }\n  else if (inputValue == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      resultValue = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      resultValue = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        resultValue = 0;\n      }\n      else {\n        resultValue = 0xf424;\n      }\n    }\n    else {\n      resultValue = 0;\n    }\n  }\n  else {\n    resultValue = 0;\n  }\n  return resultValue;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "inputValue",
                "uVar1": "resultValue",
                "local_24": "shiftedValue",
                "uStack_20": "multiplier1",
                "uStack_1c": "multiplier2",
                "uStack_18": "multiplier3",
                "uStack_14": "multiplier4"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "check_and_execute_callback_08005cb4",
            "code": "\n\n\nvoid check_and_execute_callback_08005cb4(uint **param)\n\n{\n  if (((**param & 2) != 0) && (((*param)[1] & 2) != 0)) {\n    execute_callback_080073c0();\n    (*param)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)param + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "check_and_execute_callback_08005cb4",
                "param_1": "param"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_parameters_08005cec",
            "code": "\nvoid updateParameters_08005cec(int address,uint *values)\n\n{\n  uint modifiedFlags;\n  uint currentValue;\n  uint newValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  currentValue = *(uint *)(address + 4);\n  newValue = *values;\n  modifiedFlags = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == 0x40012c00) {\n    modifiedFlags = (modifiedFlags & 0xfffffff7 | values[3]) & 0xfffffffb;\n    currentValue = currentValue & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = currentValue;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | newValue;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = modifiedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_parameters_08005cec",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "modifiedFlags",
                "uVar2": "currentValue",
                "uVar3": "newValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "modify_data_08005d48",
            "code": "\nvoid modifyData_08005d48(int address,uint *data)\n\n{\n  uint modifiedValue1;\n  uint modifiedValue2;\n  uint originalValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  modifiedValue2 = *(uint *)(address + 4);\n  originalValue = *data;\n  modifiedValue1 = *(uint *)(address + 0x20) & 0xfffffdff | data[2] << 8;\n  if (address == 0x40012c00) {\n    modifiedValue1 = (modifiedValue1 & 0xfffff7ff | data[3] << 8) & 0xfffffbff;\n    modifiedValue2 = modifiedValue2 & 0xffffcfff | data[5] << 4 | data[6] << 4;\n  }\n  *(uint *)(address + 4) = modifiedValue2;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffffff8c | originalValue;\n  *(uint *)(address + 0x3c) = data[1];\n  *(uint *)(address + 0x20) = modifiedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "modify_data_08005d48",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "modifiedValue1",
                "uVar2": "modifiedValue2",
                "uVar3": "originalValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_config_08005dac",
            "code": "\nvoid updateConfig_08005dac(int configAddress,int *configValues)\n\n{\n  uint data1;\n  int value1;\n  int value2;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffefff;\n  data1 = *(uint *)(configAddress + 4);\n  value1 = *configValues;\n  value2 = configValues[2];\n  if (configAddress == 0x40012c00) {\n    data1 = data1 & 0xffffbfff | configValues[5] << 6;\n  }\n  *(uint *)(configAddress + 4) = data1;\n  *(uint *)(configAddress + 0x1c) = *(uint *)(configAddress + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(configAddress + 0x40) = configValues[1];\n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_config_08005dac",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "data1",
                "iVar2": "value1",
                "iVar3": "value2"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "initialize_registers_08005df4",
            "code": "\nvoid initialize_registers_08005df4(uint **registers)\n\n{\n  uint *register_ptr;\n  \n  *(undefined *)((int)registers + 0x3d) = 2;\n  register_ptr = *registers;\n  if ((register_ptr[8] & 0x1111) == 0) {\n    if ((register_ptr[8] & 0x444) == 0) {\n      *register_ptr = *register_ptr & 0xfffffffe;\n    }\n  }\n  initialize_registers_08005df4_helper(registers);\n  *(undefined *)((int)registers + 0x3d) = 0;\n  *(undefined *)(registers + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "initialize_registers_08005df4",
                "param_1": "registers",
                "puVar1": "register_ptr",
                "initialize_registers_08007710": "initialize_registers_helper"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "initialize_registers_08005e2e",
            "code": "\nvoid initialize_registers_08005e2e(uint **registers)\n\n{\n  uint *first_register;\n  \n  *(undefined *)((int)registers + 0x3d) = 2;\n  first_register = *registers;\n  if ((first_register[8] & 0x1111) == 0) {\n    if ((first_register[8] & 0x444) == 0) {\n      *first_register = *first_register & 0xfffffffe;\n    }\n  }\n  initialize_registers_08005e2e_helper(registers);\n  *(undefined *)((int)registers + 0x3d) = 0;\n  *(undefined *)(registers + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "initialize_registers_08005e2e",
                "param_1": "registers",
                "puVar1": "first_register",
                "initialize_registers_08007110": "initialize_registers_helper"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "execute_callbacks_08005e6e",
            "code": "\nvoid executeCallbacks_08005e6e(int *callbackData)\n\n{\n  int callbackPtr;\n  \n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 2) != 0) && ((*(uint *)(callbackPtr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xfffffffd;\n    *(undefined *)(callbackData + 7) = 1;\n    if ((*(uint *)(*callbackData + 0x18) & 3) == 0) {\n      executeValidCallback();\n      FUNC_08005e6a(callbackData);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 4) != 0) && ((*(uint *)(callbackPtr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xfffffffb;\n    *(undefined *)(callbackData + 7) = 2;\n    if ((*(uint *)(*callbackData + 0x18) & 0x300) == 0) {\n      executeValidCallback(callbackData);\n      FUNC_08005e6a(callbackData);\n    }\n    else {\n      FUNC_08005e68(callbackData);\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 8) != 0) && ((*(uint *)(callbackPtr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xfffffff7;\n    *(undefined *)(callbackData + 7) = 4;\n    if ((*(uint *)(*callbackData + 0x1c) & 3) == 0) {\n      executeValidCallback(callbackData);\n      FUNC_08005e6a(callbackData);\n    }\n    else {\n      FUNC_08005e68(callbackData);\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 0x10) != 0) && ((*(uint *)(callbackPtr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xffffffef;\n    *(undefined *)(callbackData + 7) = 8;\n    if ((*(uint *)(*callbackData + 0x1c) & 0x300) == 0) {\n      executeValidCallback(callbackData);\n      FUNC_08005e6a(callbackData);\n    }\n    else {\n      FUNC_08005e68(callbackData);\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 1) != 0) && ((*(uint *)(callbackPtr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xfffffffe;\n    executeSubfunction(callbackData);\n  }\n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 0x80) != 0) && ((*(uint *)(callbackPtr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xffffff7f;\n    FUNC_080064ae(callbackData);\n  }\n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 0x40) != 0) && ((*(uint *)(callbackPtr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(callbackData);\n  }\n  callbackPtr = *callbackData;\n  if (((*(uint *)(callbackPtr + 0x10) & 0x20) != 0) && ((*(uint *)(callbackPtr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(callbackPtr + 0x10) = 0xffffffdf;\n    FUNC_080064ac(callbackData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "execute_callbacks_08005e6e",
                "param_1": "callbackData",
                "iVar1": "callbackPtr",
                "execute_if_valid_callback_0800771c": "executeValidCallback",
                "execute_subfunction_08007736": "executeSubfunction"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_values_08005fe8",
            "code": "\nvoid updateMemoryValues_08005fe8(uint *memoryArray,uint *valueArray)\n\n{\n  uint modifiedValue;\n  \n  modifiedValue = *memoryArray;\n  if ((((memoryArray == (uint *)0x40012c00) || (memoryArray == (uint *)0x40000000)) ||\n      (memoryArray == (uint *)0x40000400)) || (memoryArray == (uint *)0x40000800)) {\n    modifiedValue = modifiedValue & 0xffffff8f | valueArray[1];\n  }\n  if (((memoryArray == (uint *)0x40012c00) || (memoryArray == (uint *)0x40000000)) ||\n     ((memoryArray == (uint *)0x40000400 || (memoryArray == (uint *)0x40000800)))) {\n    modifiedValue = modifiedValue & 0xfffffcff | valueArray[3];\n  }\n  *memoryArray = modifiedValue & 0xffffff7f | valueArray[5];\n  memoryArray[0xb] = valueArray[2];\n  memoryArray[10] = *valueArray;\n  if (memoryArray == (uint *)0x40012c00) {\n    uRam40012c30 = valueArray[4];\n  }\n  memoryArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_values_08005fe8",
                "param_1": "memoryArray",
                "param_2": "valueArray",
                "uVar1": "modifiedValue"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_or_update_memory_08006060",
            "code": "\nundefined4 initialize_or_update_memory_08006060(undefined4 *memory_pointer)\n\n{\n  if (memory_pointer != (undefined4 *)0x0) {\n    if (*(char *)((int)memory_pointer + 0x3d) == '\\0') {\n      *(undefined *)(memory_pointer + 0xf) = 0;\n      initialize_data;\n    }\n    *(undefined *)((int)memory_pointer + 0x3d) = 2;\n    update_memory_values_08005fe8(*memory_pointer,memory_pointer + 1);\n    *(undefined *)((int)memory_pointer + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_or_update_memory_08006060",
                "param_1": "memory_pointer",
                "initialize_data_08007708()": "initialize_data"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_configuration_08006092",
            "code": "\nundefined4 initializeConfiguration_08006092(undefined4 *configuration)\n\n{\n  if (configuration != (undefined4 *)0x0) {\n    if (*(char *)((int)configuration + 0x3d) == '\\0') {\n      *(undefined *)(configuration + 0xf) = 0;\n      updateConfiguration();\n    }\n    *(undefined *)((int)configuration + 0x3d) = 2;\n    updateMemoryValues(*configuration,configuration + 1);\n    *(undefined *)((int)configuration + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_configuration_08006092",
                "param_1": "configuration",
                "update_configuration_08006e68": "updateConfiguration",
                "update_memory_values_08005fe8": "updateMemoryValues"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_parameters_080060c4",
            "code": "\nvoid updateParameters_080060c4(int baseAddress,int *parameters)\n\n{\n  uint modifiedValue1;\n  uint modifiedValue2;\n  int inputValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  modifiedValue2 = *(uint *)(baseAddress + 4);\n  inputValue = *parameters;\n  modifiedValue1 = *(uint *)(baseAddress + 0x20) & 0xffffffdf | parameters[2] << 4;\n  if (baseAddress == 0x40012c00) {\n    modifiedValue1 = (modifiedValue1 & 0xffffff7f | parameters[3] << 4) & 0xffffffbf;\n    modifiedValue2 = modifiedValue2 & 0xfffff3ff | parameters[5] << 2 | parameters[6] << 2;\n  }\n  *(uint *)(baseAddress + 4) = modifiedValue2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(baseAddress + 0x38) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = modifiedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_parameters_080060c4",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "modifiedValue1",
                "uVar2": "modifiedValue2",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "handle_binary_data_08006128",
            "code": "\nundefined4 handleBinaryData_08006128(undefined4 *data,undefined4 flag,undefined4 command)\n\n{\n  if (*(char *)(data + 0xf) != '\\x01') {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    switch(command) {\n    case 0:\n      updateParameters(*data);\n      break;\n    case 4:\n      updateParameters(*data);\n      break;\n    case 8:\n      modifyData(*data);\n      break;\n    case 0xc:\n      updateConfig(*data);\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "handle_binary_data_08006128",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "command",
                "update_parameters_08005cec": "updateParameters",
                "update_parameters_080060c4": "updateParameters",
                "modify_data_08005d48": "modifyData",
                "update_config_08005dac": "updateConfig"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_and_modify_parameters_08006186",
            "code": "\nundefined4 update_and_modify_parameters_08006186(int *parameters,int config_data,undefined4 operation_type)\n\n{\n  if (*(char *)(parameters + 0xf) != '\\x01') {\n    *(undefined *)(parameters + 0xf) = 1;\n    *(undefined *)((int)parameters + 0x3d) = 2;\n    switch(operation_type) {\n    case 0:\n      update_parameters(*parameters);\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) | 8;\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) & 0xfffffffb;\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) | *(uint *)(config_data + 0x10);\n      break;\n    case 4:\n      update_parameters_alt(*parameters);\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) | 0x800;\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) & 0xfffffbff;\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) | *(int *)(config_data + 0x10) << 8;\n      break;\n    case 8:\n      modify_data(*parameters);\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) | 8;\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) & 0xfffffffb;\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) | *(uint *)(config_data + 0x10);\n      break;\n    case 0xc:\n      update_config(*parameters);\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) | 0x800;\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) & 0xfffffbff;\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) | *(int *)(config_data + 0x10) << 8;\n    }\n    *(undefined *)((int)parameters + 0x3d) = 1;\n    *(undefined *)(parameters + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_and_modify_parameters_08006186",
                "param_1": "parameters",
                "param_2": "config_data",
                "param_3": "operation_type",
                "update_parameters_08005cec": "update_parameters",
                "update_parameters_080060c4": "update_parameters_alt",
                "modify_data_08005d48": "modify_data",
                "update_config_08005dac": "update_config"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bitwise_value_08006262",
            "code": "\nvoid updateBitwiseValue_08006262(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bitwise_value_08006262",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_and_set_flags_08006280",
            "code": "\nundefined4 updateAndSetFlags_08006280(uint **data,undefined4 flag)\n\n{\n  switch(flag) {\n  case 0:\n    (*data)[3] = (*data)[3] | 2;\n    break;\n  case 4:\n    (*data)[3] = (*data)[3] | 4;\n    break;\n  case 8:\n    (*data)[3] = (*data)[3] | 8;\n    break;\n  case 0xc:\n    (*data)[3] = (*data)[3] | 0x10;\n  }\n  update_bitwise_value_08006262(*data,flag,1);\n  if (*data == (uint *)0x40012c00) {\n    flagValue = flagValue | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_and_set_flags_08006280",
                "param_1": "data",
                "param_2": "flag",
                "uRam40012c44": "flagValue"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_bitwise_value_080062f4",
            "code": "\nundefined4 updateBitwiseValue_080062f4(uint **dataPtr,undefined4 value)\n\n{\n  uint *dataPtrCopy;\n  \n  switch(value) {\n  case 0:\n    (*dataPtr)[3] = (*dataPtr)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*dataPtr)[3] = (*dataPtr)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*dataPtr)[3] = (*dataPtr)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*dataPtr)[3] = (*dataPtr)[3] & 0xffffffef;\n  }\n  update_bitwise_value_08006262(*dataPtr,value,0);\n  if (((*dataPtr == (uint *)0x40012c00) && ((constantB & 0x1111) == 0)) &&\n     ((constantB & 0x444) == 0)) {\n    constantC = constantC & 0xffff7fff;\n  }\n  dataPtrCopy = *dataPtr;\n  if (((dataPtrCopy[8] & 0x1111) == 0) && ((dataPtrCopy[8] & 0x444) == 0)) {\n    *dataPtrCopy = *dataPtrCopy & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_bitwise_value_080062f4",
                "param_1": "dataPtr",
                "param_2": "value",
                "puVar1": "dataPtrCopy",
                "uRam40012c20": "constantB",
                "uRam40012c44": "constantC",
                "puVar1[8]": "dataPtrCopy[8]"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "update_and_set_bit_08006390",
            "code": "\nundefined4 updateAndSetBit_08006390(uint **bitPointer,undefined4 bitValue)\n\n{\n  updateBitwiseValue(*bitPointer,bitValue,1);\n  if (*bitPointer == (uint *)0x40012c00) {\n    dataRegister = dataRegister | 0x8000;\n  }\n  **bitPointer = **bitPointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "update_and_set_bit_08006390",
                "param_1": "bitPointer",
                "param_2": "bitValue",
                "uRam40012c44": "dataRegister",
                "update_bitwise_value_08006262": "updateBitwiseValue"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_bitwise_value_080063c0",
            "code": "\nundefined4 updateBitwiseValue_080063c0(uint **bitwiseArray,undefined4 bitwiseValue)\n\n{\n  uint *currentArray;\n  \n  update_bitwise_value_08006262(*bitwiseArray,bitwiseValue,0);\n  if (((*bitwiseArray == (uint *)0x40012c00) && ((constant4 & 0x1111) == 0)) &&\n     ((constant4 & 0x444) == 0)) {\n    constant3 = constant3 & 0xffff7fff;\n  }\n  currentArray = *bitwiseArray;\n  if (((currentArray[8] & 0x1111) == 0) && ((currentArray[8] & 0x444) == 0)) {\n    *currentArray = *currentArray & 0xfffffffe;\n  }\n  *(undefined *)((int)bitwiseArray + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_bitwise_value_080063c0",
                "param_1": "bitwiseArray",
                "param_2": "bitwiseValue",
                "puVar1": "currentArray",
                "uRam40012c20": "constant4",
                "uRam40012c44": "constant3"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_register_08006420",
            "code": "\nvoid updateRegister_08006420(int registerAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(registerAddress + 0x20) = *(uint *)(registerAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(registerAddress + 0x20) = *(uint *)(registerAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_register_08006420",
                "param_1": "registerAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_flag_and_register_value_0800643c",
            "code": "\nundefined4 setFlagAndRegisterValue_0800643c(uint **register,undefined4 value)\n\n{\n  updateRegisterValue(*register,value,4);\n  (*register)[0x11] = (*register)[0x11] | 0x8000;\n  **register = **register | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_flag_and_register_value_0800643c",
                "param_1": "register",
                "param_2": "value",
                "update_register_08006420": "updateRegisterValue"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_register_08006460",
            "code": "\nundefined4 updateRegister_08006460(uint **registerPtr,undefined4 param)\n\n{\n  uint *tempPtr;\n  \n  update_register_08006420(*registerPtr,param,0);\n  tempPtr = *registerPtr;\n  if (((tempPtr[8] & 0x1111) == 0) && ((tempPtr[8] & 0x444) == 0)) {\n    tempPtr[0x11] = tempPtr[0x11] & 0xffff7fff;\n  }\n  tempPtr = *registerPtr;\n  if (((tempPtr[8] & 0x1111) == 0) && ((tempPtr[8] & 0x444) == 0)) {\n    *tempPtr = *tempPtr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_register_08006460",
                "param_1": "registerPtr",
                "param_2": "param",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "set_bits_and_values_080064b0",
            "code": "\nvoid setBitsAndValues_080064b0(int *array1)\n\n{\n  *(uint *)(*array1 + 0xc) = *(uint *)(*array1 + 0xc) & 0xfffffedf;\n  *(uint *)(*array1 + 0x14) = *(uint *)(*array1 + 0x14) & 0xfffffffe;\n  *(undefined *)((int)array1 + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "set_bits_and_values_080064b0",
                "param_1": "array1"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "decode_and_update_data_080064cc",
            "code": "\nundefined4 decode_and_update_data_080064cc(int *array)\n\n{\n  short count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)array + 0x39) != '!') {\n    return 2;\n  }\n  if (array[2] == 0x1000) {\n    *(uint *)(*array + 4) = *(ushort *)array[8] & 0x1ff;\n    if (array[4] == 0) {\n      array[8] = array[8] + 2;\n    }\n    else {\n      array[8] = array[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)array[8];\n    array[8] = (int)(byte_ptr + 1);\n    *(uint *)(*array + 4) = (uint)*byte_ptr;\n  }\n  count = *(short *)((int)array + 0x26) + -1;\n  *(short *)((int)array + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) & 0xffffff7f;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "decode_and_update_data_080064cc",
                "param_1": "array",
                "sVar1": "count",
                "pbVar2": "byte_ptr",
                "param_1[2]": "array[2]",
                "param_1[4]": "array[4]",
                "param_1[8]": "array[8]"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "update_values_08006538",
            "code": "\nvoid updateValues_08006538(int *param)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int param1Value1;\n  int param1Value2;\n  int param1Value3;\n  int param1Value4;\n  int param1Value5;\n  \n  *(uint *)(*param + 0x10) = *(uint *)(*param + 0x10) & 0xffffcfff | param[3];\n  *(uint *)(*param + 0xc) =\n       param[2] | param[4] | param[5] | *(uint *)(*param + 0xc) & 0xffffe9f3;\n  *(uint *)(*param + 0x14) = *(uint *)(*param + 0x14) & 0xfffffcff | param[6];\n  param1Value5 = *param;\n  if (param1Value5 != 0x40013800) {\n    shiftedValue1 = get_shifted_global_value_08005a28();\n    param1Value1 = param[1];\n    shiftedValue2 = get_shifted_global_value_08005a28();\n    param1Value2 = param[1];\n    shiftedValue3 = get_shifted_global_value_08005a28();\n    param1Value3 = param[1];\n    shiftedValue4 = get_shifted_global_value_08005a28();\n    param1Value4 = param[1];\n    shiftedValue5 = get_shifted_global_value_08005a28();\n    *(uint *)(param1Value5 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(param[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n    return;\n  }\n  param1Value5 = get_shifted_global_value_08005a48();\n  shiftedValue5 = param[1];\n  shiftedValue1 = get_shifted_global_value_08005a48();\n  param1Value1 = param[1];\n  shiftedValue2 = get_shifted_global_value_08005a48();\n  param1Value2 = param[1];\n  shiftedValue3 = get_shifted_global_value_08005a48();\n  param1Value3 = param[1];\n  shiftedValue4 = get_shifted_global_value_08005a48();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedValue3 * 0x19) / (uint)(param1Value3 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedValue4 * 0x19) /\n                                      (ulonglong)(uint)(param[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedValue1 * 0x19) / (uint)(param1Value1 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(param1Value2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(param1Value5 * 0x19) / (ulonglong)(uint)(shiftedValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "update_values_08006538",
                "param_1": "param",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "param1Value1",
                "iVar7": "param1Value2",
                "iVar8": "param1Value3",
                "iVar9": "param1Value4",
                "iVar10": "param1Value5"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_and_modify_data_080066e8",
            "code": "\nundefined4 checkAndModifyData_080066e8(uint **inputData,uint checkValue,uint isMatch,int baseValue,uint maxDifference)\n\n{\n  int globalDataDiff;\n  \n  do {\n    if (((checkValue & ~**inputData) == 0) != isMatch) {\n      return 0;\n    }\n  } while ((maxDifference == 0xffffffff) ||\n          ((maxDifference != 0 && (globalDataDiff = getGlobalDataDiff(), (uint)(globalDataDiff - baseValue) <= maxDifference))));\n  (*inputData)[3] = (*inputData)[3] & 0xfffffe5f;\n  (*inputData)[5] = (*inputData)[5] & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x39) = 0x20;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  *(undefined *)(inputData + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_and_modify_data_080066e8",
                "param_1": "inputData",
                "param_2": "checkValue",
                "param_3": "isMatch",
                "param_4": "baseValue",
                "param_5": "maxDifference",
                "iVar1": "globalDataDiff",
                "get_global_data_08003760": "getGlobalDataDiff"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_data_0800674e",
            "code": "\nundefined4 initializeData_0800674e(int *dataPointer)\n\n{\n  if (dataPointer != (int *)0x0) {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 0x24;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    updateValues(dataPointer);\n    *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x20;\n    *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_data_0800674e",
                "param_1": "dataPointer",
                "update_values_08006538": "updateValues",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 processData_080067ac(int *dataPtr,ushort *inputPtr,int inputSize,undefined4 param_4)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if (inputPtr == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (inputSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      dataPtr[0xf] = 0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      returnValue = get_global_data_08003760();\n      *(short *)(dataPtr + 9) = (short)inputSize;\n      *(short *)((int)dataPtr + 0x26) = (short)inputSize;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == 0x1000) {\n          result = check_and_modify_data_080066e8(dataPtr,0x80,0,returnValue,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = *inputPtr & 0x1ff;\n          if (dataPtr[4] == 0) {\n            inputPtr = inputPtr + 1;\n          }\n          else {\n            inputPtr = (ushort *)((int)inputPtr + 1);\n          }\n        }\n        else {\n          result = check_and_modify_data_080066e8(dataPtr,0x80,0,returnValue,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = (uint)*(byte *)inputPtr;\n          inputPtr = (ushort *)((int)inputPtr + 1);\n        }\n      }\n      result = check_and_modify_data_080066e8(dataPtr,0x40,0,returnValue,param_4);\n      if (result == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "dataPtr",
                "param_2": "inputPtr",
                "param_3": "inputSize",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_input_0800688e",
            "code": "\nundefined4 validate_input_0800688e(int *input_ptr,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_ptr + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_ptr + 0xe) != '\\x01') {\n    input_ptr[8] = value_1;\n    *(short *)(input_ptr + 9) = (short)value_2;\n    *(short *)((int)input_ptr + 0x26) = (short)value_2;\n    input_ptr[15] = 0;\n    *(undefined *)((int)input_ptr + 0x39) = 0x21;\n    *(undefined *)(input_ptr + 0xe) = 0;\n    *(uint *)(*input_ptr + 0xc) = *(uint *)(*input_ptr + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_input_0800688e",
                "param_1": "input_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "input_ptr[8]",
                "param_1[0xf]": "input_ptr[15]"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_input_080068d6",
            "code": "\nundefined4 validate_input_080068d6(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value_1;\n    *(short *)(input_array + 0xb) = (short)value_2;\n    *(short *)((int)input_array + 0x2e) = (short)value_2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "update_data_08006932",
            "code": "\nundefined4 updateData_08006932(int *dataPointer)\n\n{\n  *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffffbf;\n  *(undefined *)(dataPointerInt + 0x39) = 0x20;\n  processData();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "update_data_08006932",
                "param_1": "dataPointer",
                "process_data_08008730": "processData",
                "(int)param_1": "dataPointerInt"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *data)\n\n{\n  byte *bytePointer;\n  short count;\n  undefined *bytePointer2;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    bytePointer2 = (undefined *)data[10];\n    data[10] = (int)(bytePointer2 + 1);\n    *bytePointer2 = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_conditional_function_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "count",
                "puVar3": "bytePointer2"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_data_080069ec",
            "code": "\nvoid process_data_080069ec(uint **input_data)\n\n{\n  int result;\n  uint value_1;\n  uint *ptr_data;\n  uint value_2;\n  uint value_3;\n  \n  ptr_data = *input_data;\n  value_3 = *ptr_data;\n  value_1 = ptr_data[3];\n  if ((((value_3 & 0xf) == 0) && ((value_3 & 0x20) != 0)) && ((value_1 & 0x20) != 0)) {\n    process_data_080069ec_0800694c(input_data);\n    return;\n  }\n  if (((value_3 & 0xf) == 0) || ((value_2 = ptr_data[5] & 1, value_2 == 0 && ((value_1 & 0x120) == 0)))) {\n    if (((value_3 & 0x80) != 0) && ((value_1 & 0x80) != 0)) {\n      decode_and_update_data_080064cc(input_data);\n      return;\n    }\n    if (((value_3 & 0x40) != 0) && ((value_1 & 0x40) != 0)) {\n      update_data_08006932(input_data);\n    }\n  }\n  else {\n    if (((value_3 & 1) != 0) && ((value_1 & 0x100) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if (((value_3 & 4) != 0) && (value_2 != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if (((value_3 & 2) != 0) && (value_2 != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if (((value_3 & 8) != 0) && (value_2 != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if (((value_3 & 0x20) != 0) && ((value_1 & 0x20) != 0)) {\n        process_data_080069ec_0800694c(input_data);\n      }\n      if ((((uint)input_data[0xf] & 8) == 0) && (((*input_data)[5] & 0x40) == 0)) {\n        FUNC_0800877c(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      set_bits_and_values_080064b0(input_data);\n      ptr_data = *input_data;\n      if ((ptr_data[5] & 0x40) == 0) {\n        FUNC_0800877c(input_data);\n        return;\n      }\n      ptr_data[5] = ptr_data[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        FUNC_0800877c(input_data);\n        return;\n      }\n      input_data[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      result = configure_device_08004050(input_data[0xd]);\n      if (result != 0) {\n        (*(code *)input_data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "value_1",
                "puVar3": "ptr_data",
                "uVar4": "value_2",
                "uVar5": "value_3"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "find_bit_at_position_08006b28",
            "code": "\nuint findBitAtPosition_08006b28(uint number,int arrayPointer)\n\n{\n  return *(uint *)(arrayPointer + ((number << 0x18) >> 0x1c) * 4) >> (number & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "find_bit_at_position_08006b28",
                "param_1": "number",
                "param_2": "arrayPointer"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "update_bit_08006b3e",
            "code": "\nvoid updateBit_08006b3e(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "update_bit_08006b3e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_bit_in_array_08006b5c",
            "code": "\nvoid updateBitInArray_08006b5c(uint index,int array)\n\n{\n  uint bitIndex;\n  \n  bitIndex = (index << 0x18) >> 0x1c;\n  *(uint *)(array + bitIndex * 4) = *(uint *)(array + bitIndex * 4) & ~(1 << (index & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_bit_in_array_08006b5c",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "bitIndex"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_memory_address_08006b7c",
            "code": "\nundefined4 getMemoryAddress_08006b7c(undefined4 inputValue)\n\n{\n  switch(inputValue) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_flag_and_return_address_08006bb8",
            "code": "\n\n\nundefined4 setFlagAndReturnAddress_08006bb8(undefined4 flag)\n\n{\n  undefined4 returnAddress;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnAddress = 0x40011800;\n    break;\n  default:\n    returnAddress = 0;\n  }\n  return returnAddress;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_flag_and_return_address_08006bb8",
                "param_1": "flag",
                "uVar1": "returnAddress"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "find_valid_index_08006c60",
            "code": "\nuint find_valid_index_08006c60(undefined4 input_value,undefined4 ptr_data,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint shifted_value;\n  \n  index = find_value_or_negative_08007376(input_value,&DAT_0800a5b8,param_3,param_4,param_4);\n  shifted_value = (uint)(index << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "find_valid_index_08006c60",
                "param_1": "input_value",
                "param_2": "ptr_data",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "find_value_and_return_offset_08006c7c",
            "code": "\nundefined4 find_value_and_return_offset_08006c7c(undefined4 value,undefined4 unknown,undefined4 base_address,undefined4 size)\n\n{\n  int offset;\n  uint bit_shifted_value;\n  \n  offset = find_value_or_negative_08007376(value,&DAT_0800a6cc,base_address,size,size);\n  bit_shifted_value = (uint)(offset << 0xc) >> 0x1b;\n  if (bit_shifted_value == 3) {\n    return 8;\n  }\n  if (bit_shifted_value != 4) {\n    if (bit_shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "find_value_and_return_offset_08006c7c",
                "param_1": "value",
                "param_2": "unknown",
                "param_3": "base_address",
                "param_4": "size",
                "iVar1": "offset",
                "uVar2": "bit_shifted_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_flag_and_config_08006ca8",
            "code": "\n\n\nvoid update_flag_and_config_08006ca8(int *config_ptr,undefined4 input_param)\n\n{\n  undefined4 flag_address;\n  uint flag_value;\n  int config_value;\n  uint bit_mask;\n  undefined4 config_option_1;\n  undefined4 config_option_2;\n  \n  config_value = *config_ptr;\n  if (config_value == 0x40012400) {\n    flag_value = _DAT_40021018 | 0x200;\n    config_value = 0x200;\n    _DAT_40021018 = flag_value;\n  }\n  else {\n    flag_value = 0x40012800;\n    if (config_value == 0x40012800) {\n      flag_value = _DAT_40021018 | 0x400;\n      config_value = 0x400;\n      _DAT_40021018 = flag_value;\n    }\n  }\n  flag_address = set_flag_and_return_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,input_param,flag_value,config_value);\n  bit_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  config_option_1 = 3;\n  config_option_2 = 0;\n  update_configuration_080040e8(flag_address,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_flag_and_config_08006ca8",
                "param_1": "config_ptr",
                "param_2": "input_param",
                "uVar1": "flag_address",
                "uVar2": "flag_value",
                "iVar3": "config_value",
                "local_18": "bit_mask",
                "local_14": "config_option_1",
                "local_10": "config_option_2"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_registers_08006d24",
            "code": "\n\n\nvoid updateRegisters_08006d24(int *registerValue)\n\n{\n  if (*registerValue != 0x40012400) {\n    if (*registerValue == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_registers_08006d24",
                "param_1": "registerValue"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "process_and_handle_data_08006d80",
            "code": "\nundefined2 process_and_handle_data_08006d80(undefined4 input_param)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint valid_index;\n  undefined4 update_result;\n  undefined4 update_status;\n  int value;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp9;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  \n  fill_memory_080091c6(&value,0,0x30);\n  valid_index = 0;\n  update_result = 0;\n  update_status = 0;\n  result = 0;\n  value = get_value_08007320(input_param,&DAT_0800a5b8);\n  if (value == 0) {\n    result = 0;\n  }\n  else {\n    temp1 = 0;\n    temp2 = 0;\n    temp3 = 0;\n    temp5 = 0;\n    temp7 = 0xe0000;\n    temp8 = 0;\n    temp9 = 1;\n    temp6 = 0;\n    DAT_20000014 = (undefined)input_param;\n    iVar1 = validate_configuration_08003bd8(&value);\n    if (iVar1 == 0) {\n      valid_index = find_valid_index_08006c60(input_param);\n      if (valid_index < 0x12) {\n        update_result = 1;\n        update_status = 2;\n        iVar1 = update_value_080038e4(&value,&valid_index);\n        if (iVar1 == 0) {\n          iVar1 = process_data_08003e20(&value);\n          if (iVar1 == 0) {\n            iVar1 = handle_data_08003aa0(&value);\n            if (iVar1 == 0) {\n              iVar1 = process_data_0800376c(&value,10);\n              if (iVar1 == 0) {\n                uVar2 = get_memory_value_08003a1c(&value);\n                if ((uVar2 & 0x200) != 0) {\n                  result = get_offset_080038dc(&value);\n                }\n                iVar1 = check_and_update_status_08003de4(&value);\n                if (iVar1 == 0) {\n                  iVar1 = check_and_update_flags_08003ce8(&value);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "process_and_handle_data_08006d80",
                "param_1": "input_param",
                "local_46": "result",
                "local_44": "valid_index",
                "local_40": "update_result",
                "local_3c": "update_status",
                "local_38": "value",
                "local_34": "temp1",
                "local_30": "temp2",
                "local_2c": "temp3",
                "local_28": "temp9",
                "local_24": "temp5",
                "local_20": "temp6",
                "local_1c": "temp7",
                "local_10": "temp8"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "update_configuration_08006e68",
            "code": "\n\n\nvoid update_configuration_08006e68(undefined4 input_value)\n\n{\n  int value_index;\n  undefined4 address;\n  uint configuration_bit;\n  undefined4 bit_2;\n  undefined4 bit_0;\n  undefined4 bit_3;\n  \n  value_index = find_value_or_negative_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  update_data_08007438(input_value);\n  address = set_flag_and_return_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  bit_2 = 2;\n  bit_0 = 0;\n  bit_3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(value_index << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  configuration_bit = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_configuration_08006e68_080040e8(address,&configuration_bit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "update_configuration_08006e68",
                "param_1": "input_value",
                "iVar1": "value_index",
                "uVar2": "address",
                "local_20": "configuration_bit",
                "local_1c": "bit_2",
                "local_18": "bit_0",
                "local_14": "bit_3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "initialize_registers_08007110",
            "code": "\nvoid initialize_registers_08007110(void)\n\n{\n  update_registers();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "initialize_registers_08007110",
                "update_registers_080074e0": "update_registers"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_and_update_parameters_08007118",
            "code": "\nvoid initialize_and_update_parameters_08007118(undefined4 device_address,uint timer_interval,int parameter_3,undefined4 param_4,char flag)\n\n{\n  uint timer_delay;\n  int value_offset;\n  int update_status;\n  undefined4 flag_1;\n  undefined4 flag_2;\n  undefined4 flag_3;\n  undefined4 flag_4;\n  undefined4 flag_5;\n  undefined4 flag_6;\n  undefined4 flag_7;\n  int initial_value;\n  int divided_value;\n  undefined4 flag_8;\n  int parameter_3_copy;\n  undefined4 flag_9;\n  undefined4 flag_10;\n  undefined flag_11;\n  \n  fill_memory_080091c6(&initial_value,0,0x40);\n  flag_1 = 0;\n  flag_2 = 0;\n  flag_3 = 0;\n  flag_4 = 0;\n  flag_5 = 0;\n  flag_6 = 0;\n  flag_7 = 0;\n  initial_value = get_value_08007320(device_address,&DAT_0800a6cc);\n  if (initial_value != 0) {\n    timer_delay = calculate_timer_delay_080075dc();\n    divided_value = timer_delay / timer_interval - 1;\n    parameter_3_copy = parameter_3 + -1;\n    flag_9 = 0;\n    flag_8 = 0;\n    flag_10 = 0;\n    flag_11 = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)device_address;\n      value_offset = initialize_configuration_08006092(&initial_value);\n      if (value_offset != 0) {\n        return;\n      }\n    }\n    value_offset = find_value_and_return_offset_08006c7c(device_address);\n    if ((((value_offset == 0) || (value_offset == 4)) || (value_offset == 8)) || ((value_offset == 0xc || (value_offset == 0x18)))) {\n      flag_1 = 0x60;\n      flag_3 = 0;\n      flag_5 = 0;\n      flag_4 = 0;\n      flag_7 = 0;\n      flag_6 = 0;\n      flag_2 = param_4;\n      update_status = update_and_modify_parameters_08006186(&initial_value,&flag_1,value_offset);\n      if (update_status == 0) {\n        timer_delay = find_value_or_negative_08007376(device_address,&DAT_0800a6cc);\n        if ((timer_delay & 0x100000) == 0) {\n          update_and_set_bit_08006390(&initial_value,value_offset);\n        }\n        else {\n          set_flag_and_register_value_0800643c(&initial_value,value_offset);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_and_update_parameters_08007118",
                "param_1": "device_address",
                "param_2": "timer_interval",
                "param_3": "parameter_3",
                "param_5": "flag",
                "uVar1": "timer_delay",
                "iVar2": "value_offset",
                "iVar3": "update_status",
                "local_74": "flag_1",
                "local_70": "flag_2",
                "local_6c": "flag_3",
                "local_68": "flag_4",
                "local_64": "flag_5",
                "local_60": "flag_6",
                "local_5c": "flag_7",
                "local_58": "initial_value",
                "local_54": "divided_value",
                "local_50": "flag_8",
                "local_4c": "parameter_3_copy",
                "local_48": "flag_9",
                "local_44": "flag_10",
                "local_1b": "flag_11"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "process_binary_function_080071e4",
            "code": "\nvoid processBinaryFunction_080071e4(undefined4 inputParameter)\n\n{\n  int offset;\n  uint value;\n  int registerArray [17];\n  \n  registerArray[0] = get_value_08007320(inputParameter,&DAT_0800a6cc);\n  if ((registerArray[0] != 0) &&\n     ((((offset = find_value_and_return_offset_08006c7c(inputParameter), offset == 0 || (offset == 4)) || (offset == 8)) ||\n      ((offset == 0xc || (offset == 0x18)))))) {\n    value = find_value_or_negative_08007376(inputParameter,&DAT_0800a6cc);\n    if ((value & 0x100000) == 0) {\n      update_bitwise_value_080063c0(registerArray,offset);\n    }\n    else {\n      update_register_08006460(registerArray,offset);\n    }\n    initialize_registers_08005e2e(registerArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "process_binary_function_080071e4",
                "param_1": "inputParameter",
                "iVar1": "offset",
                "uVar2": "value",
                "local_50": "registerArray"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_global_data_0800723c",
            "code": "\nvoid initialize_global_data_0800723c(void)\n\n{\n  fetch_global_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_global_data_0800723c",
                "get_global_data_08003760": "fetch_global_data"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "execute_initialization_and_addition_08007246",
            "code": "\nvoid execute_initialization_and_addition_08007246(void)\n\n{\n  perform_addition();\n  initialize_system();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "execute_initialization_and_addition_08007246",
                "addition_08003748": "perform_addition",
                "execute_initialization_08004046": "initialize_system"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "configure_device_08007258",
            "code": "\n\n\nvoid configureDevice_08007258(uint deviceType,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 flagAddress;\n  uint bitmask;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  flagAddress = set_flag_and_return_address_08006bb8((deviceType << 0x18) >> 0x1c);\n  bitmask = 1 << (deviceType & 0xf) & 0xffff;\n  localVar3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((deviceType - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((deviceType == 0xf) || (deviceType == 0x13)) || (deviceType == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localVar1 = param2;\n  localVar2 = param3;\n  update_configuration_080040e8(flagAddress,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "configure_device_08007258",
                "param_1": "deviceType",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "flagAddress",
                "local_20": "bitmask",
                "local_1c": "localVar1",
                "local_18": "localVar2",
                "local_14": "localVar3"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "update_value_based_on_param_080072d8",
            "code": "\nvoid update_value_based_on_param_080072d8(undefined4 value_1,undefined2 value_2,int param_flag,undefined4 param_value)\n\n{\n  if (param_flag == 0) {\n    update_value(value_1,value_2,0,param_value,param_value);\n    return;\n  }\n  update_value(value_1,value_2,1,param_value,param_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "update_value_based_on_param_080072d8",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "param_flag",
                "param_4": "param_value",
                "update_value_080042e2": "update_value"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "execute_bit_check_080072f0",
            "code": "\nvoid execute_bit_check_080072f0(undefined4 input_param_1,undefined2 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  check_bit_080042d4(input_param_1,input_param_2,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "execute_bit_check_080072f0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_and_update_display_080072fa",
            "code": "\nvoid initializeAndUpdateDisplay_080072fa(void)\n\n{\n  initializeAndUpdateDisplay_080072fa();\n  initializeAndApplySettings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_and_update_display_080072fa",
                "initialize_and_update_display_08003724": "initializeAndUpdateDisplay",
                "initialize_and_apply_settings_080035b8": "initializeAndApplySettings"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_by_index_08007306",
            "code": "\nundefined4 find_value_by_index_08007306(int target,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_by_index_08007306",
                "param_1": "target",
                "param_2": "array"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "get_value_08007320",
            "code": "\nundefined4 get_value_08007320(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_by_index_08007306();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "get_value_08007320",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_index_08007332",
            "code": "\nint find_index_08007332(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_index_08007332",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_index_or_default_0800734a",
            "code": "\nundefined4 find_index_or_default_0800734a(int input_value)\n\n{\n  undefined4 index;\n  \n  if (input_value != 0) {\n    index = find_index_08007332();\n    return index;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_index_or_default_0800734a",
                "param_1": "input_value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_in_array_0800735a",
            "code": "\nundefined4 find_value_in_array_0800735a(int target_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0xffffffff;\n    }\n    if (*array_ptr == target_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return *(undefined4 *)(array_ptr + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_in_array_0800735a",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_value_or_negative_08007376",
            "code": "\nundefined4 find_value_or_negative_08007376(int value)\n\n{\n  undefined4 found_value;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  found_value = find_value_in_array_0800735a();\n  return found_value;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_value_or_negative_08007376",
                "param_1": "value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_character_match_0800738a",
            "code": "\nundefined4 check_character_match_0800738a(int character_to_match,char *string_to_search)\n\n{\n  if (character_to_match == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*string_to_search == -1) {\n      return 0;\n    }\n    if (character_to_match == *string_to_search) break;\n    string_to_search = string_to_search + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_character_match_0800738a",
                "param_1": "character_to_match",
                "param_2": "string_to_search"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_smaller_080073ae",
            "code": "\nint compareAndReturnSmaller_080073ae(int number1,int number2)\n\n{\n  if (number1 != number2) {\n    if (number1 == 0) {\n      return number2;\n    }\n    if (number2 == 0) {\n      return number1;\n    }\n    number1 = 0;\n  }\n  return number1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_smaller_080073ae",
                "param_1": "number1",
                "param_2": "number2"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_080073c0",
            "code": "\nvoid executeCallback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "do_nothing_loop_080073e8",
            "code": "\nvoid do_nothing_loop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "do_nothing_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_hardware_080073ec",
            "code": "\n\n\nvoid initializeHardware_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_hardware_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_data_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateData_08007438(int *param_1)\n\n{\n  if (*param_1 == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = param_1;\n  }\n  if (*param_1 == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = param_1;\n  }\n  if (*param_1 == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = param_1;\n  }\n  if (*param_1 == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = param_1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_data_08007438"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_registers_080074e0",
            "code": "\n\n\nvoid updateRegisters_080074e0(int *input)\n\n{\n  if (*input == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*input == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*input == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*input == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_registers_080074e0",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "determine_timer_irq_number_08007544",
            "code": "\nundefined4 determineTimerIRQNumber_08007544(uint irqNumber)\n\n{\n  if (irqNumber == 0xffffffff) {\n    return 0;\n  }\n  if (irqNumber == 0x40000400) {\n    return 0x1d;\n  }\n  if (irqNumber < 0x40000401) {\n    if (irqNumber == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (irqNumber == 0x40000800) {\n      return 0x1e;\n    }\n    if (irqNumber == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  logUnknownTimerIRQn(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "determine_timer_irq_number_08007544",
                "param_1": "irqNumber",
                "initialize_and_process_data_080098d8": "logUnknownTimerIRQn"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "identify_timer_instance_08007594",
            "code": "\nundefined4 identifyTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initializeAndProcessData(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "identify_timer_instance_08007594",
                "param_1": "timerInstance",
                "initialize_and_process_data_080098d8": "initializeAndProcessData"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_timer_delay_080075dc",
            "code": "\nint calculateTimerDelay_080075dc(undefined4 timerConfig)\n\n{\n  uint temp1;\n  int shiftedValue;\n  uint temp2;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  uint localVar1;\n  uint localVar2;\n  \n  param2 = 0;\n  param3 = 0;\n  param4 = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  param1 = 0;\n  initialize_param_08005a68(&param2,&param1);\n  shiftedValue = identify_timer_instance_08007594(timerConfig);\n  temp1 = localVar2;\n  temp2 = localVar1;\n  if (shiftedValue == 1) {\n    shiftedValue = get_shifted_global_value_08005a28();\n  }\n  else if (shiftedValue == 2) {\n    shiftedValue = get_shifted_global_value_08005a48();\n    temp2 = temp1;\n  }\n  else {\n    initialize_and_process_data_080098d8(\"TIM: Unknown clock source\");\n    shiftedValue = 0;\n    temp2 = 0;\n  }\n  if (temp2 != 0x500) {\n    if (temp2 < 0x501) {\n      if (temp2 != 0x400) {\n        return shiftedValue;\n      }\n    }\n    else if ((temp2 != 0x600) && (temp2 != 0x700)) {\n      return shiftedValue;\n    }\n  }\n  return shiftedValue << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_timer_delay_080075dc",
                "param_1": "timerConfig",
                "uVar1": "temp1",
                "iVar2": "shiftedValue",
                "uVar3": "temp2",
                "local_20": "param1",
                "local_1c": "param2",
                "local_18": "param3",
                "local_14": "param4",
                "local_10": "localVar1",
                "local_c": "localVar2"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_settings_08007648",
            "code": "\nvoid initializeSettings_08007648(undefined4 *settings,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  char charVar;\n  uint timerDelay;\n  int result;\n  undefined4 *ptrToValue1;\n  undefined4 localValue1;\n  undefined4 localValue2;\n  undefined4 localValue3;\n  undefined4 localValue4;\n  undefined4 localValue5;\n  undefined4 localValue6;\n  undefined4 localValue7;\n  \n  localValue1 = 0;\n  localValue2 = 0;\n  localValue3 = 0;\n  localValue4 = 0;\n  localValue5 = 0;\n  localValue6 = 0;\n  localValue7 = 0;\n  ptrToValue1 = settings + 1;\n  *settings = 0x40000000;\n  settings[1] = 0x40000000;\n  settings[4] = value1;\n  timerDelay = calculate_timer_delay_080075dc();\n  settings[2] = timerDelay / 1000000 - 1;\n  settings[5] = 0;\n  settings[3] = 0;\n  settings[6] = 0;\n  settings[0x13] = value3;\n  localValue1 = 0;\n  localValue3 = 0;\n  localValue5 = 0;\n  localValue4 = 0;\n  localValue6 = 0;\n  localValue7 = 0;\n  localValue2 = value2;\n  charVar = determine_timer_irq_number_08007544(*settings);\n  apply_bitwise_operation_08003f30((int)charVar,0xe,0);\n  charVar = determine_timer_irq_number_08007544(*settings);\n  set_bit_at_index_08003f94((int)charVar);\n  result = initialize_or_update_memory_08006060(ptrToValue1);\n  if ((result == 0) && (result = handle_binary_data_08006128(ptrToValue1,&localValue1,0), result == 0)) {\n    update_and_set_flags_08006280(ptrToValue1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_settings_08007648",
                "param_1": "settings",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "cVar1": "charVar",
                "uVar2": "timerDelay",
                "iVar3": "result",
                "puVar4": "ptrToValue1",
                "local_34": "localValue1",
                "local_30": "localValue2",
                "local_2c": "localValue3",
                "local_28": "localValue4",
                "local_24": "localValue5",
                "local_20": "localValue6",
                "local_1c": "localValue7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "initialize_timer_080076e0",
            "code": "\nvoid initializeTimer_080076e0(undefined4 *timerData)\n\n{\n  char irqNumber;\n  int initializeResult;\n  \n  timerData[0x13] = 0;\n  irqNumber = determine_timer_irq_number_08007544(*timerData);\n  set_bit_in_memory_08003fb0((int)irqNumber);\n  initializeResult = initialize_registers_08005df4(timerData + 1);\n  if (initializeResult == 0) {\n    update_bitwise_value_080062f4(timerData + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "initialize_timer_080076e0",
                "param_1": "timerData",
                "cVar1": "irqNumber",
                "iVar2": "initializeResult"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_data_08007708",
            "code": "\nvoid initialize_data_08007708(void)\n\n{\n  update_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_data_08007708",
                "update_data_08007438": "update_data"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "initialize_registers_08007710",
            "code": "\nvoid initialize_registers_08007710(void)\n\n{\n  update_registers();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "initialize_registers_08007710",
                "update_registers_080074e0": "update_registers"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtractFour_08007718(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_if_valid_callback_0800771c",
            "code": "\nvoid executeIfValidCallback_0800771c(int input)\n\n{\n  int callbackResult;\n  \n  callbackResult = subtract_four_08007718();\n  if ((*(code **)(callbackResult + 0x4c) != (code *)0x0) && (*(char *)(input + 0x1c) == '\\x01')) {\n    (**(code **)(callbackResult + 0x4c))(callbackResult,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_if_valid_callback_0800771c",
                "param_1": "input",
                "iVar1": "callbackResult"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_subfunction_08007736",
            "code": "\nvoid executeSubfunction_08007736(void)\n\n{\n  int result;\n  \n  result = getSubfunctionPointer;\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_subfunction_08007736",
                "iVar1": "result",
                "subtract_four_08007718()": "getSubfunctionPointer"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_memory_value_08007744",
            "code": "\nundefined4 getMemoryValue_08007744(int memoryAddress)\n\n{\n  return *(undefined4 *)(*(int *)(memoryAddress + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_memory_value_08007744",
                "param_1": "memoryAddress"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "write_param_to_memory_0800774a",
            "code": "\nvoid writeParamToMemory_0800774a(int baseAddress,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(baseAddress + 4) + 0x24) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "write_param_to_memory_0800774a",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "set_param_value_08007750",
            "code": "\nvoid setParamValue_08007750(int ptr,int index,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(ptr + 4) + 0x34 + index * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "set_param_value_08007750",
                "param_1": "ptr",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n\nvoid initializeI2C_080077b0(int *pinConfiguration,int param2,int param3,int param4,undefined param5)\n\n{\n  int pinPeripheral1;\n  int pinPeripheral2;\n  undefined4 flag;\n  uint value1;\n  uint value2;\n  int *nextAddress;\n  uint bitMask1;\n  uint bitMask2;\n  uint value3;\n  undefined4 const3;\n  \n  if (pinConfiguration != (int *)0x0) {\n    nextAddress = pinConfiguration + 1;\n    pinPeripheral1 = get_value_08007320((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n    pinPeripheral2 = get_value_08007320((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n    if ((pinPeripheral1 == 0) || (pinPeripheral2 == 0)) {\n      initialize_and_process_data_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pinPeripheral1 = compare_and_return_smaller_080073ae(pinPeripheral1,pinPeripheral2);\n      *pinConfiguration = pinPeripheral1;\n      if (pinPeripheral1 == 0) {\n        initialize_and_process_data_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pinPeripheral1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)pinConfiguration + 0x5a) = 0x1f;\n          *(undefined *)((int)pinConfiguration + 0x5b) = 0x20;\n          DAT_20000668 = nextAddress;\n        }\n        if (*pinConfiguration == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)pinConfiguration + 0x5a) = 0x21;\n          *(undefined *)((int)pinConfiguration + 0x5b) = 0x22;\n          DAT_2000066c = nextAddress;\n        }\n        flag = set_flag_and_return_address_08006bb8((uint)((int)*(char *)((int)pinConfiguration + 0x59) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)((int)pinConfiguration + 0x59) & 0xfU) & 0xffff;\n        value1 = find_value_or_negative_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        value2 = find_value_or_negative_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        bitMask2 = (value1 >> 3 & 1) << 4 | value2 & 7;\n        const3 = 3;\n        pinPeripheral1 = find_value_or_negative_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        value3 = (uint)(pinPeripheral1 << 0x1a) >> 0x1e;\n        pinPeripheral1 = find_value_or_negative_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value2 = 1;\n        value1 = _DAT_40021018;\n        switch((uint)(pinPeripheral1 << 0x11) >> 0x19) {\n        case 1:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value2;\n          break;\n        case 2:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 3:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value2;\n          break;\n        case 4:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 5:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value2;\n          break;\n        case 6:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 7:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value2;\n          break;\n        case 8:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 9:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value2;\n          break;\n        case 10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value2;\n          break;\n        case 0xb:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xc:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value2;\n          break;\n        case 0xd:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value2;\n          break;\n        case 0xe:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xf:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value2;\n          break;\n        case 0x10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value2;\n          break;\n        case 0x11:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value2;\n          break;\n        case 0x12:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x13:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value2;\n          break;\n        case 0x14:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value2;\n          break;\n        case 0x15:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x16:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x17:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1b:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1c:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x21:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value2;\n          break;\n        case 0x22:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x23:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x24:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value2;\n        }\n        update_configuration_080040e8(flag,&bitMask1,value1,value2);\n        flag = set_flag_and_return_address_08006bb8((uint)((int)*(char *)(pinConfiguration + 0x16) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)(pinConfiguration + 0x16) & 0xfU) & 0xffff;\n        value1 = find_value_or_negative_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        value2 = find_value_or_negative_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        bitMask2 = (value1 >> 3 & 1) << 4 | value2 & 7;\n        const3 = 3;\n        pinPeripheral1 = find_value_or_negative_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        value3 = (uint)(pinPeripheral1 << 0x1a) >> 0x1e;\n        pinPeripheral1 = find_value_or_negative_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value2 = 1;\n        value1 = _DAT_40021018;\n        switch((uint)(pinPeripheral1 << 0x11) >> 0x19) {\n        case 1:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value2;\n          break;\n        case 2:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 3:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value2;\n          break;\n        case 4:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 5:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value2;\n          break;\n        case 6:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 7:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value2;\n          break;\n        case 8:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 9:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value2;\n          break;\n        case 10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value2;\n          break;\n        case 0xb:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xc:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value2;\n          break;\n        case 0xd:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value2;\n          break;\n        case 0xe:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xf:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value2;\n          break;\n        case 0x10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value2;\n          break;\n        case 0x11:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value2;\n          break;\n        case 0x12:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x13:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value2;\n          break;\n        case 0x14:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value2;\n          break;\n        case 0x15:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x16:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x17:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1b:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1c:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x21:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value2;\n          break;\n        case 0x22:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x23:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x24:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value2;\n        }\n        update_configuration_080040e8(flag,&bitMask1,value1,value2);\n        pinConfiguration[1] = *pinConfiguration;\n        pinConfiguration[2] = param2;\n        pinConfiguration[3] = 0;\n        pinConfiguration[4] = param4;\n        pinConfiguration[7] = 0xff;\n        pinConfiguration[5] = param3;\n        pinConfiguration[6] = 0;\n        pinConfiguration[8] = 0;\n        pinConfiguration[9] = 0;\n        *(undefined *)((int)pinConfiguration + 0x41) = 0;\n        apply_bitwise_operation_08003f30((int)*(char *)((int)pinConfiguration + 0x5a),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)pinConfiguration + 0x5a));\n        apply_bitwise_operation_08003f30((int)*(char *)((int)pinConfiguration + 0x5b),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)pinConfiguration + 0x5b));\n        calculate_and_store_values_080045c0(nextAddress);\n        *(undefined *)((int)pinConfiguration + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "param_1": "pinConfiguration",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "pinPeripheral1",
                "iVar2": "pinPeripheral2",
                "uVar3": "flag",
                "uVar4": "value1",
                "uVar5": "value2",
                "piVar6": "nextAddress",
                "local_38": "bitMask1",
                "local_34": "bitMask2",
                "local_30": "value3",
                "local_2c": "const3"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "check_and_initialize_values_08007e74",
            "code": "\nint checkAndInitializeValues_08007e74(int input,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int globalDataStart;\n  int returnValue;\n  uint difference;\n  int status;\n  int offset;\n  undefined4 param4;\n  \n  param4 = value3;\n  globalDataStart = get_global_data_08003760();\n  difference = 0;\n  status = 2;\n  do {\n    offset = input + 4;\n    returnValue = check_and_initialize_08004728(offset,value1,value2,value3,param4);\n    if (returnValue == 0) {\n      status = 0;\n      while ((returnValue = get_byte_value_0800542a(offset), returnValue != 0x20 && (status == 0))) {\n        returnValue = get_global_data_08003760();\n        difference = returnValue - globalDataStart;\n        if (difference < 0x65) {\n          returnValue = get_value_from_offset_08005430(offset);\n          if (returnValue != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    returnValue = get_value_from_offset_08005430(offset);\n  } while ((returnValue == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "check_and_initialize_values_08007e74",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "globalDataStart",
                "iVar2": "returnValue",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "offset",
                "uVar6": "param4"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_and_increment_08007ede",
            "code": "\nundefined4 copyAndIncrement_08007ede(int destination,int source,uint size)\n\n{\n  uint i;\n  \n  if (0x20 < size) {\n    return 2;\n  }\n  for (i = 0; i < size; i = i + 1 & 0xff) {\n    *(undefined *)(destination + i + 0x68) = *(undefined *)(source + i);\n    *(char *)(destination + 0x88) = *(char *)(destination + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_and_increment_08007ede",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "uVar1": "i"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "process_and_check_values_08007f0e",
            "code": "\nint processAndCheckValues_08007f0e(int inputValue,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int globalData;\n  int result;\n  uint difference;\n  int status;\n  int offset;\n  undefined4 additionalParam;\n  \n  additionalParam = param4;\n  globalData = get_global_data_08003760();\n  difference = 0;\n  status = 2;\n  do {\n    offset = inputValue + 4;\n    result = process_parameters_080047f4(offset,param2,param3,param4,additionalParam);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_byte_value_0800542a(offset), result != 0x20 && (status == 0))) {\n        result = get_global_data_08003760();\n        difference = result - globalData;\n        if (difference < 0x65) {\n          result = get_value_from_offset_08005430(offset);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_value_from_offset_08005430(offset);\n  } while ((result == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "process_and_check_values_08007f0e",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "globalData",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "offset",
                "uVar6": "additionalParam"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtract_four_08007f78(int input_number)\n\n{\n  return input_number + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "input_number"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_param_08007f7c",
            "code": "\nvoid updateParam_08007f7c(int param,int value)\n\n{\n  if (param != 0) {\n    if (value != 0) {\n      *(int *)(param + 0x60) = value;\n      set_flags_and_values_080049e0(param + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_param_08007f7c",
                "param_1": "param",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_param_08007f8e",
            "code": "\nvoid updateParam_08007f8e(int inputParam,int value)\n\n{\n  if (inputParam != 0) {\n    if (value != 0) {\n      *(int *)(inputParam + 100) = value;\n      updateFlagsAndValues(inputParam + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_param_08007f8e",
                "param_1": "inputParam",
                "param_2": "value",
                "set_flags_and_values_080049e0": "updateFlagsAndValues"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_parameters_08007fa0",
            "code": "\nvoid processParameters_08007fa0(int inputBuffer,int flag,int comparisonValue,undefined4 callbackFunction)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (comparisonValue == *(int *)(inputBuffer + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      setupParameters(inputBuffer,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validateInput(inputBuffer,result + 0x68,0x20,8,callbackFunction);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_parameters_08007fa0",
                "param_1": "inputBuffer",
                "param_2": "flag",
                "param_3": "comparisonValue",
                "param_4": "callbackFunction",
                "iVar1": "result",
                "subtract_four_08007f78": "subtractFour",
                "setup_parameters_080048c8": "setupParameters",
                "validate_input_08004954": "validateInput"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "execute_function_08007ff0",
            "code": "\nvoid executeFunction_08007ff0(undefined4 parameter)\n\n{\n  int result;\n  \n  result = getFunctionData();\n  if (((*(functionPointer **)(result + 0x60) != (functionPointer *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(functionPointer **)(result + 0x60))(result + 0x68);\n  }\n  setFlagsAndValues(parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "execute_function_08007ff0",
                "param_1": "parameter",
                "iVar1": "result",
                "subtract_four_08007f78": "getFunctionData",
                "code": "functionPointer",
                "set_flags_and_values_080049e0": "setFlagsAndValues"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "check_and_set_values_08008020",
            "code": "\nvoid checkAndSetValues_08008020(undefined4 input)\n\n{\n  int result;\n  \n  result = getOffset();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    updateValues(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "check_and_set_values_08008020",
                "param_1": "input",
                "iVar1": "result",
                "subtract_four_08007f78": "getOffset",
                "set_flags_and_values_080049e0": "updateValues"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_pins_08008078",
            "code": "\n\n\nvoid initializeUARTPins_08008078(int *uartPinConfig)\n\n{\n  int uartPinValue;\n  int uartPeripheral;\n  undefined4 flagAddress;\n  uint valueOrNegative;\n  uint pinMask;\n  uint pinOffset;\n  uint pinShift;\n  undefined4 configValue;\n  \n  if (uartPinConfig != (int *)0x0) {\n    uartPinValue = get_value_08007320((int)*(char *)(uartPinConfig + 0x16),&DAT_0800a864);\n    uartPeripheral = get_value_08007320((int)*(char *)((int)uartPinConfig + 0x59),&DAT_0800a81c);\n    if ((uartPeripheral == 0) || (uartPinValue == 0)) {\n      printErrorMessage(\"ERROR: at least one UART pin has no peripheral\\n\",uartPeripheral);\n    }\n    else {\n      uartPinValue = compareUARTPins(uartPinValue);\n      *uartPinConfig = uartPinValue;\n      if (uartPinValue == 0) {\n        printErrorMessage(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPinValue == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uartPinConfig + 0x11) = 0;\n          *(undefined *)((int)uartPinConfig + 0x5a) = 0x25;\n        }\n        else if (uartPinValue == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uartPinConfig + 0x11) = 1;\n          *(undefined *)((int)uartPinConfig + 0x5a) = 0x26;\n        }\n        else if (uartPinValue == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uartPinConfig + 0x11) = 2;\n          *(undefined *)((int)uartPinConfig + 0x5a) = 0x27;\n        }\n        flagAddress = setConfigFlag((uint)((int)*(char *)((int)uartPinConfig + 0x59) << 0x18) >> 0x1c);\n        valueOrNegative = findConfigurationValue((int)*(char *)((int)uartPinConfig + 0x59),&DAT_0800a81c);\n        pinMask = 1 << (*(byte *)((int)uartPinConfig + 0x59) & 0xf) & 0xffff;\n        pinOffset = (valueOrNegative >> 3 & 1) << 4 | valueOrNegative & 7;\n        pinShift = (valueOrNegative << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((valueOrNegative << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        configValue = 3;\n        updateConfiguration(flagAddress,&pinMask);\n        flagAddress = setConfigFlag((uint)((int)*(char *)(uartPinConfig + 0x16) << 0x18) >> 0x1c);\n        valueOrNegative = findConfigurationValue((int)*(char *)(uartPinConfig + 0x16),&DAT_0800a864);\n        pinMask = 1 << (*(byte *)(uartPinConfig + 0x16) & 0xf) & 0xffff;\n        pinOffset = (valueOrNegative >> 3 & 1) << 4 | valueOrNegative & 7;\n        pinShift = (valueOrNegative << 0x1a) >> 0x1e;\n        updateConfiguration(flagAddress,&pinMask);\n        (&DAT_200006c0)[*(byte *)(uartPinConfig + 0x11)] = uartPinConfig + 1;\n        uartPinConfig[1] = *uartPinConfig;\n        uartPinConfig[2] = uartPinConfig[0x12];\n        uartPinConfig[3] = uartPinConfig[0x13];\n        uartPinConfig[4] = uartPinConfig[0x14];\n        uartPinConfig[5] = uartPinConfig[0x15];\n        uartPinConfig[6] = 0xc;\n        uartPinConfig[7] = 0;\n        uartPinConfig[8] = 0;\n        initializeData(uartPinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "param_1": "uartPinConfig",
                "iVar1": "uartPinValue",
                "iVar2": "uartPeripheral",
                "uVar3": "flagAddress",
                "uVar4": "valueOrNegative",
                "local_20": "pinMask",
                "local_1c": "pinOffset",
                "local_18": "pinShift",
                "local_14": "configValue",
                "initialize_and_process_data_080098d8": "printErrorMessage",
                "compare_and_return_smaller_080073ae": "compareUARTPins",
                "set_flag_and_return_address_08006bb8": "setConfigFlag",
                "find_value_or_negative_08007376": "findConfigurationValue",
                "update_configuration_080040e8": "updateConfiguration",
                "initialize_data_0800674e": "initializeData"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_communication_080084b0",
            "code": "\nvoid initializeCommunication_080084b0(void)\n\n{\n  int value1;\n  undefined4 value2;\n  \n  value1 = get_value_08007320(2,&DAT_0800a864);\n  if (value1 != 0) {\n    value2 = get_value_08007320(2,&DAT_0800a864);\n    DAT_20000075 = find_index_or_default_0800734a(value2,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_uart_pins_08008078(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_communication_080084b0",
                "iVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_input_data_08008500",
            "code": "\nuint process_input_data_08008500(undefined4 input_value,uint param_flag)\n\n{\n  int global_data;\n  int value;\n  uint index;\n  \n  global_data = get_global_data_08003760();\n  value = get_value_08007320(2,&DAT_0800a864);\n  if (value == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (value = get_value_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != value))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_communication_080084b0(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    value = process_data_080067ac((&DAT_200006c0)[index],input_value,param_flag & 0xffff,1000);\n    if (value == 0) {\n      return param_flag;\n    }\n    value = get_global_data_08003760();\n  } while ((uint)(value - global_data) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_input_data_08008500",
                "param_1": "input_value",
                "param_2": "param_flag",
                "iVar1": "global_data",
                "iVar2": "value",
                "uVar3": "index"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "is_combination_valid_080085b8",
            "code": "\nbool is_combination_valid_080085b8(int input)\n\n{\n  uint combined_value;\n  \n  combined_value = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(input + 0x44)]);\n  return (combined_value & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "is_combination_valid_080085b8",
                "param_1": "input",
                "uVar1": "combined_value"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_combination_valid_080085dc",
            "code": "\nbool isCombinationValid_080085dc(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_combination_valid_080085dc",
                "param_1": "inputValue",
                "uVar1": "combinedBytes"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "check_combination_08008600",
            "code": "\nundefined4 check_combination_08008600(int input,undefined *output,undefined4 param_3,undefined4 param_4)\n\n{\n  int isValidCombination;\n  \n  if (input == 0) {\n    return 0xffffffff;\n  }\n  isValidCombination = is_combination_valid();\n  if (isValidCombination == 0) {\n    *output = *(undefined *)(input + 0x45);\n    validate_input((&DAT_200006c0)[*(byte *)(input + 0x44)],input + 0x45,1,&DAT_200006c0,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "check_combination_08008600",
                "param_1": "input",
                "param_2": "output",
                "iVar1": "isValidCombination",
                "is_combination_valid_080085b8": "is_combination_valid",
                "validate_input_080068d6": "validate_input"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "validate_and_store_combination_0800863c",
            "code": "\nvoid validateAndStoreCombination_0800863c(int combination,undefined4 value,undefined4 unused,undefined4 otherValue)\n\n{\n  int isValidCombination;\n  uint combinationIndex;\n  \n  if (combination != 0) {\n    isValidCombination = is_combination_valid_080085b8();\n    if (isValidCombination == 0) {\n      combinationIndex = (uint)*(byte *)(combination + 0x44);\n      *(undefined4 *)(&DAT_20000670 + combinationIndex * 4) = value;\n      *(int *)(&DAT_20000684 + combinationIndex * 4) = combination;\n      apply_bitwise_operation_08003f30((int)*(char *)(combination + 0x5a),0,1,combinationIndex,otherValue);\n      set_bit_at_index_08003f94((int)*(char *)(combination + 0x5a));\n      validate_input_080068d6((&DAT_200006c0)[*(byte *)(combination + 0x44)],combination + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "validate_and_store_combination_0800863c",
                "param_1": "combination",
                "param_2": "value",
                "param_3": "unused",
                "param_4": "otherValue",
                "iVar1": "isValidCombination",
                "uVar2": "combinationIndex"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_data_and_validate_08008694",
            "code": "\nvoid updateDataAndValidate_08008694(int dataPtr,undefined4 newValue)\n\n{\n  byte index;\n  \n  if (dataPtr != 0) {\n    index = *(byte *)(dataPtr + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)index * 4) = newValue;\n    *(int *)(&DAT_200006ac + (uint)index * 4) = dataPtr;\n    applyBitwiseOperation((int)*(char *)(dataPtr + 0x5a),0,2);\n    setBitAtIndex((int)*(char *)(dataPtr + 0x5a));\n    validateInput((&DAT_200006c0)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 100) + (uint)*(ushort *)(dataPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_data_and_validate_08008694",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "bVar1": "index",
                "apply_bitwise_operation_08003f30": "applyBitwiseOperation",
                "set_bit_at_index_08003f94": "setBitAtIndex",
                "validate_input_0800688e": "validateInput"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_index_080086e8",
            "code": "\nuint find_index_080086e8(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_conditional_function_0800870c",
            "code": "\nvoid executeConditionalFunction_0800870c(void)\n\n{\n  uint index;\n  \n  index = findIndex();\n  if (index < 5) {\n    (**(code **)(&DAT_20000670 + index * 4))(*(undefined4 *)(&DAT_20000684 + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_conditional_function_0800870c",
                "uVar1": "index",
                "find_index_080086e8": "findIndex"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "process_data_08008730",
            "code": "\nvoid processData_08008730(void)\n\n{\n  uint index;\n  int result;\n  int data;\n  \n  index = findIndex();\n  data = *(int *)(&DAT_200006ac + index * 4);\n  if ((index < 5) && (result = (**(code **)(&DAT_20000698 + index * 4))(data), result != -1)) {\n    validateInput((&DAT_200006c0)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "process_data_08008730",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "data",
                "find_index_080086e8": "findIndex",
                "validate_input_0800688e": "validateInput"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocateMemory_08008804(int size)\n\n{\n  undefined *allocationPtr;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocationPtr = DAT_200006d4;\n  if (DAT_200006d4 + size <= &stack0x00000000) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocationPtr;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocationPtr"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_default_value_08008840",
            "code": "\nundefined4 get_default_value_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_default_value_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "initialize_memory_08008846",
            "code": "\nundefined4 initializeMemory_08008846(undefined4 dataBuffer,int bufferSize)\n\n{\n  *(undefined4 *)(bufferSize + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "initialize_memory_08008846",
                "param_1": "dataBuffer",
                "param_2": "bufferSize"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "get_success_flag_08008850",
            "code": "\nbool getSuccessFlag_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "get_success_flag_08008850",
                "undefined4": "bool"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_08008854",
            "code": "\nundefined4 initialize_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_08008854"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "get_error_code_08008858",
            "code": "\nundefined4 getErrorCode_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "get_error_code_08008858"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_input_data_0800885c",
            "code": "\nvoid process_input_data_0800885c(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_input_data_0800885c_08008500(input_param_2,input_param_3,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_input_data_0800885c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "get_value_from_binary_0800887c",
            "code": "\nundefined4 get_value_from_binary_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "get_value_from_binary_0800887c"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "process_data_08008880",
            "code": "\nuint process_data_08008880(uint input_value)\n\n{\n  bool is_less_than_3c;\n  char char_value;\n  uint data_result;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_3c = true;\n    }\n    else {\n      is_less_than_3c = false;\n    }\n  }\n  else {\n    is_less_than_3c = input_value < 0x3c;\n  }\n  if (is_less_than_3c) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    char_value = (&DAT_0800a908)[input_value];\n  }\n  else {\n    char_value = -1;\n  }\n  if (char_value == -1) {\n    data_result = 0;\n  }\n  else {\n    data_result = process_and_handle_data_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return data_result >> (0xc - DAT_20000088 & 0xff);\n      }\n      return data_result << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return data_result;\n}\n\n",
            "renaming": {
                "FUN_08008880": "process_data_08008880",
                "param_1": "input_value",
                "bVar1": "is_less_than_3c",
                "cVar2": "char_value",
                "uVar3": "data_result"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_character_080088e0",
            "code": "\nvoid process_character_080088e0(uint character_index,uint character_value)\n\n{\n  int match_result;\n  int character_mapping;\n  \n  if (character_index < 0x3c) {\n    character_mapping = (int)(char)(&DAT_0800a908)[character_index];\n  }\n  else {\n    character_mapping = -1;\n  }\n  if (character_mapping != -1) {\n    match_result = check_character_match_0800738a(character_mapping,&DAT_0800a6cc);\n    if (match_result == 0) {\n      update_device_state(character_index,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          character_value = character_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          character_value = character_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (character_value < 0x80) {\n        update_value_based_on_bit(character_index,0);\n      }\n      else {\n        update_value_based_on_bit(character_index,1);\n      }\n    }\n    else {\n      match_result = check_bit_at_position(character_mapping,&DAT_200006d8);\n      if (match_result == 0) {\n        update_bit(character_mapping,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          character_value = character_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          character_value = character_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      initialize_and_update_parameters(character_mapping,0x3e418,0xff,character_value,match_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_character_080088e0",
                "param_1": "character_index",
                "param_2": "character_value",
                "iVar1": "match_result",
                "iVar2": "character_mapping",
                "process_devices_08008990": "update_device_state",
                "update_value_if_bit_set_08008a24": "update_value_based_on_bit",
                "find_bit_at_position_08006b28": "check_bit_at_position",
                "update_bit_08006b3e": "update_bit",
                "initialize_and_update_parameters_08007118": "initialize_and_update_parameters"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "process_devices_08008990",
            "code": "\nvoid process_devices_08008990(uint device_index,undefined4 configuration_type,undefined4 param_3,undefined1 *param_buffer)\n\n{\n  int bit_result;\n  undefined1 *data_array;\n  int current_value;\n  \n  if (device_index < 0x3c) {\n    current_value = (int)(char)(&DAT_0800a908)[device_index];\n    data_array = &DAT_0800a908;\n  }\n  else {\n    current_value = -1;\n    data_array = param_buffer;\n  }\n  if (current_value != -1) {\n    bit_result = find_bit_at_position(current_value,&DAT_200006d8,param_3,data_array,param_buffer);\n    if (bit_result != 0) {\n      bit_result = check_character_match(current_value,&DAT_0800a6cc);\n      if (bit_result != 0) {\n        process_binary_function(current_value);\n      }\n      update_bit_in_array(current_value,&DAT_200006d8);\n    }\n    switch(configuration_type) {\n    case 0:\n      configure_device(current_value,0);\n      break;\n    case 1:\n      configure_device(current_value,1,0);\n      break;\n    case 2:\n      configure_device(current_value,0,1);\n      break;\n    case 3:\n      configure_device(current_value,0,2);\n    }\n    update_bit(current_value,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "process_devices_08008990",
                "param_1": "device_index",
                "param_2": "configuration_type",
                "param_4": "param_buffer",
                "iVar1": "bit_result",
                "puVar2": "data_array",
                "iVar3": "current_value",
                "configure_device_08007258": "configure_device",
                "find_bit_at_position_08006b28": "find_bit_at_position",
                "check_character_match_0800738a": "check_character_match",
                "process_binary_function_080071e4": "process_binary_function",
                "update_bit_in_array_08006b5c": "update_bit_in_array",
                "update_bit_08006b3e": "update_bit"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "update_value_if_bit_set_08008a24",
            "code": "\nvoid update_value_if_bit_set_08008a24(uint position,undefined4 value,undefined4 mask,undefined1 *data)\n\n{\n  int bitFound;\n  undefined4 address;\n  undefined1 *lookupData;\n  uint bit;\n  \n  if (position < 0x3c) {\n    bit = (uint)(char)(&DAT_0800a908)[position];\n    lookupData = &DAT_0800a908;\n  }\n  else {\n    bit = 0xffffffff;\n    lookupData = data;\n  }\n  if ((bit != 0xffffffff) &&\n     (bitFound = find_bit_at_position_08006b28(bit,&DAT_200006ec,mask,lookupData,data), bitFound != 0)) {\n    address = get_memory_address_08006b7c((bit << 0x18) >> 0x1c);\n    update_value_based_on_param_080072d8(address,1 << (bit & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "update_value_if_bit_set_08008a24",
                "param_1": "position",
                "param_2": "value",
                "param_3": "mask",
                "param_4": "data",
                "iVar1": "bitFound",
                "uVar2": "address",
                "puVar3": "lookupData",
                "uVar4": "bit"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_bit_status_08008a6c",
            "code": "\nchar checkBitStatus_08008a6c(uint input)\n\n{\n  char bitStatus;\n  int bitPosition;\n  undefined4 memoryAddress;\n  uint bitValue;\n  \n  if (input < 0x3c) {\n    bitValue = (uint)(char)(&DAT_0800a908)[input];\n  }\n  else {\n    bitValue = 0xffffffff;\n  }\n  if (bitValue == 0xffffffff) {\n    bitStatus = '\\0';\n  }\n  else {\n    bitPosition = find_bit_at_position_08006b28(bitValue,&DAT_200006ec);\n    if (bitPosition == 0) {\n      bitStatus = '\\0';\n    }\n    else {\n      memoryAddress = get_memory_address_08006b7c((bitValue << 0x18) >> 0x1c);\n      bitStatus = execute_bit_check_080072f0(memoryAddress,1 << (bitValue & 0xf) & 0xffff);\n    }\n  }\n  if (bitStatus != '\\0') {\n    bitStatus = '\\x01';\n  }\n  return bitStatus;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_bit_status_08008a6c",
                "param_1": "input",
                "cVar1": "bitStatus",
                "iVar2": "bitPosition",
                "uVar3": "memoryAddress",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_global_data_08008abc",
            "code": "\nvoid initialize_global_data_08008abc(void)\n\n{\n  initialize_global_data_08008abc_0800723c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_global_data_08008abc"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_shift_value_08008afa",
            "code": "\nushort calculate_shift_value_08008afa(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_shift_value_08008afa",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "update_combination_08008b66",
            "code": "\nvoid updateCombination_08008b66(int combination)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = check_combination_08008600(combination,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(combination + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(combination + 0x62))) {\n    *(undefined *)(*(int *)(combination + 0x5c) + (uint)*(ushort *)(combination + 0x60)) = newValue;\n    *(ushort *)(combination + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "update_combination_08008b66",
                "param_1": "combination",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_user_data_08008c20",
            "code": "\nvoid initializeUserData_08008c20(int userData)\n\n{\n  *(int *)(userData + 0x130) = userData + 0x11;\n  *(undefined2 *)(userData + 0x134) = 0;\n  *(undefined2 *)(userData + 0x136) = 0;\n  *(int *)(userData + 0x138) = userData + 0x51;\n  *(undefined2 *)(userData + 0x13c) = 0;\n  *(undefined2 *)(userData + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_user_data_08008c20",
                "param_1": "userData"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_08008c44",
            "code": "\nvoid initializeSerial_08008c44(int serialBuffer,undefined4 baudRate,byte serialConfig)\n\n{\n  uint combinationIndex;\n  byte configMask;\n  int configValue;\n  code *customJumpTable;\n  \n  *(undefined4 *)(serialBuffer + 0x11c) = baudRate;\n  *(byte *)(serialBuffer + 0x140) = serialConfig;\n  configMask = serialConfig & 7;\n  if (configMask == 4) {\n    configValue = 7;\n  }\n  else if (configMask == 6) {\n    configValue = 8;\n  }\n  else if (configMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((serialConfig & 0x30) == 0x30) {\n    *(undefined4 *)(serialBuffer + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((serialConfig & 0x20) == 0) {\n    *(undefined4 *)(serialBuffer + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialBuffer + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((serialConfig & 8) == 0) {\n    *(undefined4 *)(serialBuffer + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialBuffer + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialBuffer + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialBuffer + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    initialize_uart_pins_08008078(serialBuffer + 0xd4);\n    validate_and_store_combination_0800863c(serialBuffer + 0xd4,0x8008b67);\n    return;\n  }\n  customJumpTable = (code *)0x8008cee;\n  assertion_failed_message_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (combinationIndex < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[combinationIndex];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*customJumpTable)(0,combinationIndex,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_08008c44",
                "param_1": "serialBuffer",
                "param_2": "baudRate",
                "param_3": "serialConfig",
                "extraout_r1": "combinationIndex",
                "bVar1": "configMask",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "customJumpTable"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_byte_value_and_jump_08008d00",
            "code": "\nvoid setByteValueAndJump_08008d00(int memoryAddress,uint index)\n\n{\n  undefined byteValue;\n  code *jumpTable;\n  \n  if (index < 0x3c) {\n    byteValue = (&DAT_0800a908)[index];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(memoryAddress + 0x12d) = byteValue;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_byte_value_and_jump_08008d00",
                "param_1": "memoryAddress",
                "param_2": "index",
                "uVar1": "byteValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "initialize_value_08008d18",
            "code": "\nvoid initializeValue_08008d18(int targetAddress,uint valueIndex)\n\n{\n  undefined newValue;\n  \n  if (valueIndex < 0x3c) {\n    newValue = (&DAT_0800a908)[valueIndex];\n  }\n  else {\n    newValue = 0xff;\n  }\n  *(undefined *)(targetAddress + 300) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "initialize_value_08008d18",
                "param_1": "targetAddress",
                "param_2": "valueIndex",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_user_data_08008d30",
            "code": "\nundefined4 *\ninitialize_user_data_08008d30(undefined4 *data,undefined4 index,undefined4 value,undefined4 jump)\n\n{\n  undefined defaultIndex;\n  \n  data[1] = 0;\n  data[2] = 1000;\n  *data = &PTR_LAB_08008ba4_1_0800aab8;\n  if (data == (undefined4 *)&DAT_20000700) {\n    setByteValueAndJump(&DAT_20000700,0,value,&DAT_20000700,jump);\n    initializeValue(&DAT_20000700,1);\n  }\n  else {\n    defaultIndex = findIndexOrDefault(index,&DAT_0800a81c);\n    *(undefined *)((int)data + 0x12d) = defaultIndex;\n    defaultIndex = findIndexOrDefault(index,&DAT_0800a864);\n    *(undefined *)(data + 0x4b) = defaultIndex;\n  }\n  initializeUserData(data);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_user_data_08008d30",
                "param_1": "data",
                "param_2": "index",
                "param_3": "value",
                "param_4": "jump",
                "uVar1": "defaultIndex",
                "set_byte_value_and_jump_08008d00": "setByteValueAndJump",
                "initialize_value_08008d18": "initializeValue",
                "find_index_or_default_0800734a": "findIndexOrDefault",
                "initialize_user_data_08008c20": "initializeUserData"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_user_data_if_needed_08008d8c",
            "code": "\nvoid initialize_user_data_if_needed_08008d8c(int is_user_data_initialized,int user_data_value,undefined4 param_3,undefined4 param_4)\n\n{\n  if (is_user_data_initialized != 1) {\n    return;\n  }\n  if (user_data_value == 0xffff) {\n    initialize_user_data_08008d30(&DAT_20000700,0x40004400,param_3,0xffff,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_user_data_if_needed_08008d8c",
                "param_1": "is_user_data_initialized",
                "param_2": "user_data_value"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_0800ab0c;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_if_params_valid_08008e14",
            "code": "\nvoid initialize_data_if_params_valid_08008e14(int is_param1_valid,int is_param2_valid)\n\n{\n  if ((is_param1_valid == 1) && (is_param2_valid == 0xffff)) {\n    initialize_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_if_params_valid_08008e14",
                "param_1": "is_param1_valid",
                "param_2": "is_param2_valid"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_interpolation_08008ef4",
            "code": "\nint calculate_interpolation_08008ef4(int value1,int value2,int value3,int value4,int value5)\n\n{\n  return (uint)((value5 - value4) * (value1 - value2)) / (uint)(value3 - value2) + value4;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_interpolation_08008ef4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_display_08008f0e",
            "code": "\nvoid initialize_display_08008f0e(void)\n\n{\n  update_display(3);\n  initialize_and_update_display();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_display_08008f0e",
                "update_display_08003f0c": "update_display",
                "initialize_and_update_display_080036a2": "initialize_and_update_display"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "process_data_loop_08008f1c",
            "code": "\nvoid process_data_loop_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_gateway();\n  do {\n    process_data();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "process_data_loop_08008f1c",
                "initialize_gateway_08001b48": "initialize_gateway",
                "process_data_080022f8": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_bits_set_08008f3c",
            "code": "\nchar count_bits_set_08008f3c(uint input_number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; input_number != 1; input_number = input_number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "input_number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_data_08008f78",
            "code": "\nvoid initializeData_08008f78(int condition,int value,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shift_left_by32_bits_080090c2(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,unusedParam2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_function_08009084",
            "code": "\nvoid processFunction_08009084(int inputParameter)\n\n{\n  int bitCount;\n  \n  if (*(int *)(inputParameter + 8) != 0) {\n    (**(code **)(inputParameter + 0xc))();\n    return;\n  }\n  executeProcess();\n  bitCount = countSetBits();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processFunction_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_function_08009084",
                "param_1": "inputParameter",
                "iVar1": "bitCount",
                "process_and_jump_0800a18c": "executeProcess",
                "count_bits_set_08008f3c": "countSetBits"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_08009094",
            "code": "\nvoid check_and_process_08009094(void)\n\n{\n  int bit_count;\n  \n  bit_count = count_bits_set_08008f3c();\n  if ((&DAT_20000858)[bit_count * 5] != 0) {\n    process_function_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_08009094",
                "iVar1": "bit_count"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_left_by32_bits_080090c2",
            "code": "\nvoid shiftLeftBy32Bits_080090c2(undefined4 input1,undefined4 input2)\n\n{\n  shift_left_by32_bits_08009108(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_left_by32_bits_080090c2",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "assertion_failed_message_080090cc",
            "code": "\nvoid assertionFailedMessage_080090cc(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 assertionMessage;\n  char *additionalMessage;\n  undefined8 result;\n  undefined4 additionalFunctionParam;\n  \n  assertionMessage = *(undefined4 *)(DAT_20000090 + 0xc);\n  additionalFunctionParam = function;\n  if (assertion == (char *)0x0) goto LAB_080090f0;\n  additionalMessage = \", function: \";\n  do {\n    process_input_and_update_08009124(assertionMessage,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,additionalMessage,assertion,additionalFunctionParam);\n    result = process_data_08009b5c();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    assertionMessage = (undefined4)result;\nLAB_080090f0:\n    assertion = \"\";\n    additionalMessage = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "assertion_failed_message_080090cc",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "assertionMessage",
                "pcVar2": "additionalMessage",
                "uVar3": "result",
                "uVar4": "additionalFunctionParam"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_left_by32_bits_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftLeftBy32Bits_08009108(undefined4 parameter1,uint parameter2)\n\n{\n  return (ulonglong)parameter2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_left_by32_bits_08009108",
                "param_1": "parameter1",
                "param_2": "parameter2"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "process_input_and_update_08009124",
            "code": "\nvoid process_input_and_update_08009124(undefined4 input_param_1,undefined4 input_param_2,undefined4 output_param_1,undefined4 output_param_2)\n\n{\n  undefined4 output_data_1;\n  undefined4 output_data_2;\n  \n  output_data_1 = output_param_1;\n  output_data_2 = output_param_2;\n  process_input_data_0800937c(DAT_20000090,input_param_1,input_param_2,&output_data_1,input_param_1,&output_data_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "process_input_and_update_08009124",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "output_param_1",
                "param_4": "output_param_2",
                "uStack_8": "output_data_1",
                "uStack_4": "output_data_2"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_sequentially_08009148",
            "code": "\nvoid executeFunctionsSequentially_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_sequentially_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_and_init_memory_08009190",
            "code": "\nvoid allocate_and_init_memory_08009190(undefined4 memory_size)\n\n{\n  allocate_memory_08009270(DAT_20000090,memory_size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_and_init_memory_08009190",
                "param_1": "memory_size"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "rearrange_and_process_080091a0",
            "code": "\nvoid rearrangeAndProcess_080091a0(undefined4 data)\n\n{\n  rearrange_and_process_080091d8(DAT_20000090,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "rearrange_and_process_080091a0",
                "param_1": "data"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copyData_080091b0(int copyOffset,undefined *source,int length)\n\n{\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  destPtr = (undefined *)(copyOffset + -1);\n  endPtr = source + length;\n  for (; source != endPtr; source = source + 1) {\n    destPtr = destPtr + 1;\n    *destPtr = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "copyOffset",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "endPtr",
                "puVar2": "destPtr"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *destination,undefined value,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = destination + length;\n  for (; destination != endPtr; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "rearrange_and_process_080091d8",
            "code": "\nvoid rearrangeAndProcess_080091d8(undefined4 *outputPtr,int inputSize,undefined4 arg3,undefined4 arg4)\n\n{\n  int **result;\n  int **currentPtr;\n  int **nextPtr;\n  int *tempPtr;\n  int **previousPtr;\n  int **adjustedPtr;\n  \n  if (inputSize == 0) {\n    return;\n  }\n  adjustedPtr = (int **)(inputSize + -4);\n  if (*(int *)(inputSize + -4) < 0) {\n    adjustedPtr = (int **)((int)adjustedPtr + *(int *)(inputSize + -4));\n  }\n  FUNC_08009f48();\n  nextPtr = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    adjustedPtr[1] = (int *)0x0;\n    currentPtr = result;\n    DAT_2000098c = adjustedPtr;\n  }\n  else {\n    nextPtr = DAT_2000098c;\n    if (adjustedPtr < DAT_2000098c) {\n      currentPtr = (int **)*adjustedPtr;\n      nextPtr = (int **)((int)adjustedPtr + (int)currentPtr);\n      if (DAT_2000098c == nextPtr) {\n        tempPtr = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        nextPtr = (int **)((int)tempPtr + (int)currentPtr);\n        *adjustedPtr = (int *)nextPtr;\n      }\n      adjustedPtr[1] = (int *)DAT_2000098c;\n      DAT_2000098c = adjustedPtr;\n    }\n    else {\n      do {\n        previousPtr = nextPtr;\n        nextPtr = (int **)previousPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= adjustedPtr);\n      currentPtr = (int **)*previousPtr;\n      if ((int **)((int)previousPtr + (int)currentPtr) == adjustedPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*adjustedPtr);\n        *previousPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)previousPtr + (int)currentPtr)) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempPtr);\n          *previousPtr = (int *)currentPtr;\n          previousPtr[1] = (int *)nextPtr;\n        }\n      }\n      else if (adjustedPtr < (int **)((int)previousPtr + (int)currentPtr)) {\n        *outputPtr = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)adjustedPtr + (int)*adjustedPtr);\n        if (nextPtr == currentPtr) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)tempPtr + (int)*adjustedPtr);\n          *adjustedPtr = (int *)currentPtr;\n        }\n        adjustedPtr[1] = (int *)nextPtr;\n        previousPtr[1] = (int *)adjustedPtr;\n      }\n    }\n  }\n  FUNC_08009f4a(outputPtr,currentPtr,nextPtr,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "rearrange_and_process_080091d8",
                "param_1": "outputPtr",
                "param_2": "inputSize",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "result",
                "ppiVar1": "currentPtr",
                "ppiVar2": "nextPtr",
                "piVar3": "tempPtr",
                "ppiVar4": "previousPtr",
                "ppiVar5": "adjustedPtr"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *result,uint size)\n\n{\n  uint *current_pointer;\n  int offset;\n  uint *temp_pointer;\n  uint difference;\n  uint *previous_pointer;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_pointer = DAT_2000098c;\n    previous_pointer = DAT_2000098c;\n    while (temp_pointer = current_pointer, temp_pointer != (uint *)0x0) {\n      difference = *temp_pointer - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_pointer == temp_pointer) {\n            current_pointer = (uint *)previous_pointer[1];\n            DAT_2000098c = current_pointer;\n          }\n          else {\n            current_pointer = (uint *)temp_pointer[1];\n          }\n          if (previous_pointer != temp_pointer) {\n            previous_pointer[1] = (uint)current_pointer;\n            previous_pointer = temp_pointer;\n          }\n        }\n        else {\n          *temp_pointer = difference;\n          *(uint *)((int)temp_pointer + difference) = allocated_size;\n          previous_pointer = (uint *)((int)temp_pointer + difference);\n        }\n        goto LAB_080092d4;\n      }\n      previous_pointer = temp_pointer;\n      current_pointer = (uint *)temp_pointer[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = initialize_memory_allocation(result);\n    }\n    current_pointer = (uint *)initialize_memory_allocation(result,allocated_size);\n    if ((current_pointer != (uint *)0xffffffff) &&\n       ((previous_pointer = (uint *)((int)current_pointer + 3U & 0xfffffffc), current_pointer == previous_pointer ||\n        (offset = initialize_memory_allocation(result,(int)previous_pointer - (int)current_pointer), offset != -1)))) {\n      *previous_pointer = allocated_size;\nLAB_080092d4:\n      FUNC_08009f4a(result);\n      allocated_size = (int)previous_pointer + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(previous_pointer + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_pointer + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08009f4a(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_pointer",
                "iVar2": "offset",
                "puVar3": "temp_pointer",
                "uVar4": "difference",
                "puVar5": "previous_pointer",
                "uVar6": "allocated_size",
                "initialize_memory_allocation_08009918": "initialize_memory_allocation"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_byte_0800932c",
            "code": "\nuint processByte_0800932c(int dataStructure,byte byteValue,byte **bytePointer)\n\n{\n  int tempInt;\n  byte *bytePtr2;\n  byte *bytePtr3;\n  uint returnValue;\n  \n  bytePtr2 = bytePointer[2] + -1;\n  bytePointer[2] = bytePtr2;\n  if ((-1 < (int)bytePtr2) ||\n     (((int)bytePointer[6] <= (int)bytePtr2 && (bytePtr2 = (byte *)(uint)byteValue, bytePtr2 != (byte *)0xa))))\n  {\n    bytePtr2 = *bytePointer;\n    *bytePointer = bytePtr2 + 1;\n    *bytePtr2 = byteValue;\n    return (uint)byteValue;\n  }\n  if ((dataStructure != 0) && (*(int *)(dataStructure + 0x18) == 0)) {\n    initialize_memory_and_data_structure_08009d50();\n  }\n  if (bytePointer == (byte **)&DAT_0800aba4) {\n    bytePointer = *(byte ***)(dataStructure + 4);\n  }\n  else if (bytePointer == (byte **)&DAT_0800abc4) {\n    bytePointer = *(byte ***)(dataStructure + 8);\n  }\n  else if (bytePointer == (byte **)&DAT_0800ab84) {\n    bytePointer = *(byte ***)(dataStructure + 0xc);\n  }\n  bytePointer[2] = bytePointer[6];\n  bytePtr3 = (byte *)(uint)*(ushort *)(bytePointer + 3);\n  tempInt = (int)bytePtr3 << 0x1c;\n  if (((tempInt < 0) && (bytePtr3 = bytePointer[4], bytePtr3 != (byte *)0x0)) ||\n     (tempInt = process_data_08009a80(dataStructure,bytePointer,tempInt,bytePtr3,bytePtr2), tempInt == 0)) {\n    returnValue = (uint)byteValue;\n    tempInt = (int)*bytePointer - (int)bytePointer[4];\n    if ((tempInt < (int)bytePointer[5]) || (tempInt = process_data_08009c7c(dataStructure,bytePointer), tempInt == 0)) {\n      bytePointer[2] = bytePointer[2] + -1;\n      bytePtr2 = *bytePointer;\n      *bytePointer = bytePtr2 + 1;\n      *bytePtr2 = byteValue;\n      if ((byte *)(tempInt + 1) != bytePointer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(bytePointer + 3) << 0x1f)) {\n          return returnValue;\n        }\n        if (returnValue != 10) {\n          return returnValue;\n        }\n      }\n      tempInt = process_data_08009c7c(dataStructure,bytePointer);\n      if (tempInt == 0) {\n        return returnValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_byte_0800932c",
                "param_1": "dataStructure",
                "param_2": "byteValue",
                "param_3": "bytePointer",
                "iVar1": "tempInt",
                "pbVar2": "bytePtr2",
                "pbVar3": "bytePtr3",
                "uVar4": "returnValue"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_and_increment_08009358",
            "code": "\nint processAndIncrement_08009358(undefined4 arg1,undefined4 arg2,undefined *data,int length)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentLength;\n  \n  endPtr = data + length;\n  currentLength = length;\n  do {\n    if (data == endPtr) {\n      return 0;\n    }\n    result = process_byte_0800932c(arg1,*data,arg2,length,currentLength);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_and_increment_08009358",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentLength"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "process_input_data_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint process_input_data_0800937c(int input_data,undefined4 *header_data,byte *input_string,int *result_count)\n\n{\n  int result;\n  int *temp_ptr;\n  bool found_digit;\n  byte *current_char;\n  byte *next_char;\n  int data_length;\n  int index;\n  int *result_ptr;\n  uint flags;\n  int precision;\n  undefined4 format;\n  int width;\n  int total_length;\n  byte conversion_char;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined zero_flag;\n  undefined4 size_modifier;\n  \n  result_ptr = result_count;\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_memory_and_data_structure_08009d50();\n  }\n  if (header_data == &DAT_0800aba4) {\n    header_data = *(undefined4 **)(input_data + 4);\n  }\n  else if (header_data == (undefined4 *)&DAT_0800abc4) {\n    header_data = *(undefined4 **)(input_data + 8);\n  }\n  else if (header_data == (undefined4 *)&DAT_0800ab84) {\n    header_data = *(undefined4 **)(input_data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(header_data + 3) << 0x1c)) || (header_data[4] == 0)) &&\n     (index = process_data_08009a80(input_data,header_data), index != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = input_string;\nLAB_080093be:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  index = (int)next_char - (int)input_string;\n  if (index != 0) {\n    result = process_and_increment_08009358(input_data,header_data,input_string,index);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(header_data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + index;\n  }\n  if (*next_char == 0) goto LAB_08009568;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  format = 0;\n  zero_flag = 0;\n  size_modifier = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    index = find_character_08009f2c(\"#-0+ \",*current_char);\n    input_string = current_char + 1;\n    if (index == 0) break;\n    flags = 1 << (index + 0xf7ff54b0U & 0xff) | flags;\n    current_char = input_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    zero_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    zero_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    temp_ptr = result_ptr + 1;\n    index = *result_ptr;\n    result_ptr = temp_ptr;\n    if (index < 0) {\n      width = -index;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    found_digit = false;\n    index = width;\n    input_string = current_char;\n    while( true ) {\n      if (9 < *input_string - 0x30) break;\n      index = index * 10 + (*input_string - 0x30);\n      found_digit = true;\n      input_string = input_string + 1;\n    }\n    if (!found_digit) goto LAB_080094a6;\n  }\n  width = index;\nLAB_080094a6:\n  if (*input_string == 0x2e) {\n    if (input_string[1] == 0x2a) {\n      input_string = input_string + 2;\n      temp_ptr = result_ptr + 1;\n      precision = *result_ptr;\n      result_ptr = temp_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      found_digit = false;\n      index = 0;\n      precision = 0;\n      while( true ) {\n        input_string = input_string + 1;\n        if (9 < *input_string - 0x30) break;\n        index = index * 10 + (*input_string - 0x30);\n        found_digit = true;\n      }\n      if (found_digit) {\n        precision = index;\n      }\n    }\n  }\n  index = find_character_08009f2c(&DAT_0800ab56,*input_string,3);\n  if (index != 0) {\n    input_string = input_string + 1;\n    flags = flags | 0x40 << (index + 0xf7ff54aaU & 0xff);\n  }\n  conversion_char = *input_string;\n  input_string = input_string + 1;\n  index = find_character_08009f2c(\"efgEFG\",conversion_char,6);\n  if (index == 0) {\n    data_length = decode_and_process_data_08009698(input_data,&flags,header_data,0x8009359,&result_ptr);\n    if (data_length == -1) goto LAB_08009568;\n  }\n  else {\n    result_ptr = (int *)(((int)result_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + data_length;\n  current_char = input_string;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "process_input_data_0800937c",
                "param_1": "input_data",
                "param_2": "header_data",
                "param_3": "input_string",
                "param_4": "result_count",
                "iVar1": "result",
                "piVar2": "temp_ptr",
                "bVar3": "found_digit",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "unaff_r9": "data_length",
                "iVar6": "index",
                "local_8c": "result_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "format",
                "local_7c": "width",
                "local_74": "total_length",
                "local_70": "conversion_char",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "zero_flag",
                "local_30": "size_modifier"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocessData_080095a8(undefined4 input,uint *data,uint *output,undefined4 param,code *func)\n\n{\n  int index;\n  int result;\n  uint maxValue;\n  uint extraValue;\n  bool isTrue;\n  \n  maxValue = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxValue = data[2];\n  }\n  *output = maxValue;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxValue + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*func)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)data + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  extraValue = maxValue;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxValue + 0x43) = 0x30;\n    extraValue = maxValue + 2;\n    *(undefined *)((int)data + maxValue + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*func)(input,param,(int)data + 0x43,extraValue);\n  if (index != -1) {\n    maxValue = data[3];\n    isTrue = (*data & 6) != 4;\n    if (isTrue) {\n      maxValue = 0;\n    }\n    extraValue = 0;\n    if (!isTrue) {\n      maxValue = maxValue - *output;\n    }\n    if (!isTrue) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxValue = maxValue + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxValue == extraValue) {\n        return 0;\n      }\n      index = (*func)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      extraValue = extraValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "func",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "maxValue",
                "uVar4": "extraValue",
                "bVar5": "isTrue"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "decode_and_process_data_08009698",
            "code": "\nuint decode_and_process_data_08009698(undefined4 input_parameter,uint *data_array,undefined4 param_3,code *callback_function,uint **array_of_pointers)\n\n{\n  byte first_byte;\n  int index;\n  uint *ptr;\n  int temp_index;\n  char *hex_chars;\n  uint temp_value;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint return_value;\n  uint second_value;\n  char *new_pcVar;\n  char *str_ptr;\n  uint local_array [2];\n  \n  first_byte = *(byte *)(data_array + 6);\n  str_ptr = (char *)((int)data_array + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_08009852;\n          if (first_byte != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)data_array + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_080097e2:\n          temp_value = *data_array;\n          ptr = *array_of_pointers;\n          *array_of_pointers = ptr + 1;\n          if (((temp_value & 0x80) == 0) && ((int)(temp_value << 0x19) < 0)) {\n            return_value = (uint)*(ushort *)ptr;\n          }\n          else {\n            return_value = *ptr;\n          }\n          if ((int)(temp_value << 0x1f) < 0) {\n            *data_array = temp_value | 0x20;\n          }\n          if (return_value == 0) {\n            *data_array = *data_array & 0xffffffdf;\n          }\n          temp_value = 0x10;\nLAB_08009778:\n          *(undefined *)((int)data_array + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_080096c8;\n          return_value = *data_array;\n          ptr = *array_of_pointers;\n          if ((return_value & 0x80) == 0) {\n            *array_of_pointers = ptr + 1;\n            if ((return_value & 0x40) == 0) goto LAB_080096e8;\n            return_value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *array_of_pointers = ptr + 1;\nLAB_080096e8:\n            return_value = *ptr;\n          }\n          if ((int)return_value < 0) {\n            return_value = -return_value;\n            *(undefined *)((int)data_array + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          temp_value = 10;\n        }\n        second_value = data_array[1];\n        data_array[2] = second_value;\n        new_pcVar = str_ptr;\n        if ((int)second_value < 0) {\n          if (return_value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)data_array + 0x42) = *hex_chars;\n          new_pcVar = (char *)((int)data_array + 0x42);\n        }\n        else {\n          *data_array = *data_array & 0xfffffffb;\n          if (return_value == 0) {\n            if (second_value != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              second_value = return_value / temp_value;\n              new_pcVar = new_pcVar + -1;\n              *new_pcVar = hex_chars[return_value - temp_value * second_value];\n              return_value = second_value;\n            } while (second_value != 0);\n          }\n        }\n        if (((temp_value == 8) && ((int)(*data_array << 0x1f) < 0)) && ((int)data_array[1] <= (int)data_array[4]))\n        {\n          new_pcVar[-1] = '0';\n          new_pcVar = new_pcVar + -1;\n        }\n        data_array[4] = (int)str_ptr - (int)new_pcVar;\n        str_ptr = new_pcVar;\n        goto LAB_080097be;\n      }\n      ptr = *array_of_pointers;\n      *array_of_pointers = ptr + 1;\n      *(char *)((int)data_array + 0x42) = (char)*ptr;\nLAB_08009728:\n      str_ptr = (char *)((int)data_array + 0x42);\n      return_value = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_0800974e:\n            return_value = *data_array;\n            ptr = *array_of_pointers;\n            if ((return_value & 0x80) == 0) {\n              *array_of_pointers = ptr + 1;\n              if ((return_value & 0x40) == 0) goto LAB_0800975c;\n              return_value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *array_of_pointers = ptr + 1;\nLAB_0800975c:\n              return_value = *ptr;\n            }\n            if (first_byte == 0x6f) {\n              temp_value = 8;\n            }\n            else {\n              temp_value = 10;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (first_byte == 0x70) {\n            *data_array = *data_array | 0x20;\nLAB_0800970e:\n            hex_chars = \"0123456789abcdef\";\n            *(undefined *)((int)data_array + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_0800974e;\n          if (first_byte == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)data_array + 0x42) = first_byte;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*array_of_pointers;\n      *array_of_pointers = (uint *)(ppcVar8 + 1);\n      str_ptr = *ppcVar8;\n      index = find_character_08009f2c(str_ptr,0,data_array[1]);\n      if (index != 0) {\n        data_array[1] = index - (int)str_ptr;\n      }\n      return_value = data_array[1];\n    }\n    data_array[4] = return_value;\n    *(undefined *)((int)data_array + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  return_value = *data_array;\n  ppuVar7 = (uint **)*array_of_pointers;\n  temp_value = data_array[5];\n  if ((return_value & 0x80) == 0) {\n    *array_of_pointers = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((return_value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr = (short)temp_value;\n  }\n  else {\n    *array_of_pointers = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800983e:\n    *ptr = temp_value;\n  }\nLAB_08009852:\n  data_array[4] = 0;\nLAB_080097be:\n  index = process_data_080095a8(input_parameter,data_array,local_array,param_3,callback_function);\n  if ((index == -1) || (index = (*callback_function)(input_parameter,param_3,str_ptr,data_array[4]), index == -1)) {\nLAB_080097d2:\n    return_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_array << 0x1e) < 0) {\n      for (index = 0; index < (int)(data_array[3] - local_array[0]); index = index + 1) {\n        temp_index = (*callback_function)(input_parameter,param_3,(int)data_array + 0x19,1);\n        if (temp_index == -1) goto LAB_080097d2;\n      }\n    }\n    return_value = data_array[3];\n    if ((int)data_array[3] < (int)local_array[0]) {\n      return_value = local_array[0];\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08009698": "decode_and_process_data_08009698",
                "param_1": "input_parameter",
                "param_2": "data_array",
                "param_4": "callback_function",
                "param_5": "array_of_pointers",
                "bVar1": "first_byte",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "temp_index",
                "pcVar5": "hex_chars",
                "uVar6": "temp_value",
                "uVar9": "return_value",
                "uVar10": "second_value",
                "pcVar11": "new_pcVar",
                "pcVar12": "str_ptr",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "initialize_and_process_data_080098d8",
            "code": "\nvoid initializeAndProcessData_080098d8(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataAddress;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  dataAddress = DAT_20000090;\n  param1Copy = param1;\n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_and_data_structure_08009d50(DAT_20000090);\n  }\n  process_input_data_0800937c(dataAddress,*(undefined4 *)(dataAddress + 8),param1,&param2Copy,param1Copy,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "initialize_and_process_data_080098d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataAddress",
                "uVar2": "param1Copy",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "process_data_08009908",
            "code": "\nint processData_08009908(int inputData,uint size)\n\n{\n  undefined4 dataPointer;\n  int result;\n  uint calculatedResult;\n  \n  dataPointer = DAT_20000090;\n  if (inputData != 0) {\n    if (size == 0) {\n      rearrange_and_process_080091d8();\n      result = 0;\n    }\n    else {\n      calculatedResult = calculate_result_0800a154();\n      result = inputData;\n      if ((calculatedResult < size) && (result = allocate_memory_08009270(dataPointer,size), result != 0)) {\n        copy_data_080091b0(result,inputData,size);\n        rearrange_and_process_080091d8(dataPointer,inputData);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_08009270(DAT_20000090,size,size,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "process_data_08009908",
                "param_1": "inputData",
                "param_2": "size",
                "uVar1": "dataPointer",
                "iVar2": "result",
                "uVar3": "calculatedResult"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "initialize_memory_allocation_08009918",
            "code": "\nvoid initialize_memory_allocation_08009918(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000a38 = 0;\n  allocation_result = allocate_memory_08008804(size);\n  if ((allocation_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "initialize_memory_allocation_08009918",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_with_length_08009954",
            "code": "\nvoid copyStringWithLength_08009954(char *destination,char *source,int length)\n\n{\n  char currentChar;\n  int remainingLength;\n  char *destPtr;\n  \n  do {\n    destPtr = destination;\n    remainingLength = length;\n    if (remainingLength == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = destPtr + 1;\n    *destPtr = currentChar;\n    source = source + 1;\n    length = remainingLength + -1;\n  } while (currentChar != '\\0');\n  for (; destination != destPtr + remainingLength; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_with_length_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "iVar2": "remainingLength",
                "pcVar3": "destPtr"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_character_0800997e",
            "code": "\nint find_last_character_0800997e(int input_string,int string_length,undefined4 character,undefined4 extra_data)\n\n{\n  int last_character_index;\n  int last_character_index_found;\n  \n  if (string_length != 0) {\n    last_character_index_found = 0;\n    while (last_character_index = find_character_08009938(input_string,string_length,character,input_string,extra_data), last_character_index != 0) {\n      input_string = last_character_index + 1;\n      last_character_index_found = last_character_index;\n    }\n    return last_character_index_found;\n  }\n  last_character_index_found = find_character_08009938();\n  return last_character_index_found;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_character_0800997e",
                "param_1": "input_string",
                "param_2": "string_length",
                "param_3": "character",
                "param_4": "extra_data",
                "iVar1": "last_character_index",
                "iVar2": "last_character_index_found"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_common_prefix_080099a4",
            "code": "\nchar * find_common_prefix_080099a4(char *string1,char *string2)\n\n{\n  char *current_char1;\n  char *current_char2;\n  char *temp_char;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    current_char1 = string1;\n    if (*current_char1 == '\\0') {\n      return (char *)0x0;\n    }\n    temp_char = string2 + -1;\n    current_char2 = current_char1 + -1;\n    do {\n      temp_char = temp_char + 1;\n      if (*temp_char == '\\0') {\n        return current_char1;\n      }\n      current_char2 = current_char2 + 1;\n      string1 = current_char1 + 1;\n    } while (*current_char2 == *temp_char);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_common_prefix_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "current_char1",
                "pcVar2": "current_char2",
                "pcVar3": "temp_char"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint processData_08009a80(undefined4 *output,undefined4 *input)\n\n{\n  int dataStruct;\n  uint result;\n  ushort flags;\n  \n  dataStruct = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_and_data_structure_08009d50(DAT_20000090);\n  }\n  if (input == &DAT_0800aba4) {\n    input = *(undefined4 **)(dataStruct + 4);\n  }\n  else if (input == (undefined4 *)&DAT_0800abc4) {\n    input = *(undefined4 **)(dataStruct + 8);\n  }\n  else if (input == (undefined4 *)&DAT_0800ab84) {\n    input = *(undefined4 **)(dataStruct + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          rearrangeAndProcess(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    initAndAllocateMemory(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "dataStruct",
                "uVar2": "result",
                "uVar3": "flags",
                "initialize_and_allocate_memory_08009eac": "initAndAllocateMemory",
                "rearrange_and_process_080091d8": "rearrangeAndProcess"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          rearrange_and_process_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_and_allocate_memory_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_data_08009b5c",
            "code": "\nvoid processData_08009b5c(void)\n\n{\n  uint *pointer1;\n  int count;\n  int *pointer2;\n  int *pointer3;\n  uint value;\n  ushort flag;\n  int tempVar1;\n  code *functionPointer;\n  int tempVar2;\n  uint tempVar3;\n  code *jumpTable;\n  bool isTrue;\n  undefined8 result;\n  \n  update_data_and_call_function_08009fe8(6);\n  jumpTable = (code *)0x8009b6b;\n  result = infinite_loop_08008868(1);\n  pointer2 = (int *)((ulonglong)result >> 0x20);\n  pointer1 = (uint *)result;\n  flag = *(ushort *)(pointer2 + 3);\n  value = (uint)flag;\n  if ((int)(value << 0x1c) < 0) {\n    count = pointer2[4];\n    if (count != 0) {\n      tempVar1 = value << 0x1e;\n      isTrue = tempVar1 != 0;\n      if (isTrue) {\n        tempVar1 = 0;\n      }\n      tempVar2 = *pointer2;\n      if (!isTrue) {\n        tempVar1 = pointer2[5];\n      }\n      *pointer2 = count;\n      pointer2[2] = tempVar1;\n      for (tempVar2 = tempVar2 - count; 0 < tempVar2; tempVar2 = tempVar2 - tempVar1) {\n        tempVar1 = (*(code *)pointer2[10])(pointer1,pointer2[8],count,tempVar2);\n        if (tempVar1 < 1) {\n          flag = *(ushort *)(pointer2 + 3);\n          goto LAB_08009c62;\n        }\n        count = count + tempVar1;\n      }\n    }\n  }\n  else if (((0 < pointer2[1]) || (0 < pointer2[0x10])) &&\n          (functionPointer = (code *)pointer2[0xb], functionPointer != (code *)0x0)) {\n    tempVar3 = *pointer1;\n    *pointer1 = 0;\n    if ((flag & 0x1000) == 0) {\n      count = (*functionPointer)(pointer1,pointer2[8],value & 0x1000,1);\n      if ((count == -1) && (value = *pointer1, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *pointer1 = tempVar3;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      count = pointer2[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer2 + 3) << 0x1d) < 0) &&\n       (count = count - pointer2[1], pointer2[0xd] != 0)) {\n      count = count - pointer2[0x10];\n    }\n    count = (*(code *)pointer2[0xb])(pointer1,pointer2[8],count,0);\n    flag = *(ushort *)(pointer2 + 3);\n    if ((count == -1) &&\n       ((0x1d < *pointer1 || (-1 < (int)((0x20400001U >> (*pointer1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(pointer2 + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    pointer2[1] = 0;\n    *pointer2 = pointer2[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((count != -1 || (*pointer1 == 0)))) {\n      pointer2[0x15] = count;\n    }\n    pointer3 = (int *)pointer2[0xd];\n    *pointer1 = tempVar3;\n    if (pointer3 != (int *)0x0) {\n      if (pointer3 != pointer2 + 0x11) {\n        rearrange_and_process_080091d8(pointer1);\n      }\n      pointer2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "puVar1": "pointer1",
                "iVar2": "count",
                "piVar3": "pointer2",
                "piVar4": "pointer3",
                "uVar5": "value",
                "uVar6": "flag",
                "iVar7": "tempVar1",
                "pcVar8": "functionPointer",
                "iVar9": "tempVar2",
                "uVar10": "tempVar3",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isTrue",
                "uVar12": "result"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 processData_08009c7c(uint *dataArray,int *infoArray)\n\n{\n  undefined4 returnValue;\n  int var1;\n  int *pointerVar;\n  uint var2;\n  ushort var3;\n  int var4;\n  undefined4 unaffectedVar1;\n  undefined4 unaffectedVar2;\n  code *functionPtr;\n  int var5;\n  uint var6;\n  code *jumpTable;\n  bool bVar10;\n  \n  if (infoArray[4] != 0) {\n    if ((dataArray != (uint *)0x0) && (dataArray[6] == 0)) {\n      initialize_memory_and_data_structure_08009d50();\n    }\n    if (infoArray == &DAT_0800aba4) {\n      infoArray = (int *)dataArray[1];\n    }\n    else if (infoArray == (int *)&DAT_0800abc4) {\n      infoArray = (int *)dataArray[2];\n    }\n    else if (infoArray == (int *)&DAT_0800ab84) {\n      infoArray = (int *)dataArray[3];\n    }\n    if (*(short *)(infoArray + 3) != 0) {\n      var3 = *(ushort *)(infoArray + 3);\n      var2 = (uint)var3;\n      if ((int)(var2 << 0x1c) < 0) {\n        var1 = infoArray[4];\n        if (var1 != 0) {\n          var4 = var2 << 0x1e;\n          bVar10 = var4 != 0;\n          if (bVar10) {\n            var4 = 0;\n          }\n          var5 = *infoArray;\n          if (!bVar10) {\n            var4 = infoArray[5];\n          }\n          *infoArray = var1;\n          infoArray[2] = var4;\n          for (var5 = var5 - var1; 0 < var5; var5 = var5 - var4) {\n            var4 = (*(code *)infoArray[10])(dataArray,infoArray[8],var1,var5,unaffectedVar1,unaffectedVar2);\n            if (var4 < 1) {\n              var3 = *(ushort *)(infoArray + 3);\n              goto LAB_08009c62;\n            }\n            var1 = var1 + var4;\n          }\n        }\n      }\n      else if (((0 < infoArray[1]) || (0 < infoArray[0x10])) &&\n              (functionPtr = (code *)infoArray[0xb], functionPtr != (code *)0x0)) {\n        var6 = *dataArray;\n        *dataArray = 0;\n        if ((var3 & 0x1000) == 0) {\n          var1 = (*functionPtr)(dataArray,infoArray[8],var2 & 0x1000,1);\n          if ((var1 == -1) && (var2 = *dataArray, var2 != 0)) {\n            if ((var2 != 0x1d) && (var2 != 0x16)) {\n              *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataArray = var6;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          var1 = infoArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoArray + 3) << 0x1d) < 0) &&\n           (var1 = var1 - infoArray[1], infoArray[0xd] != 0)) {\n          var1 = var1 - infoArray[0x10];\n        }\n        var1 = (*(code *)infoArray[0xb])(dataArray,infoArray[8],var1,0);\n        var3 = *(ushort *)(infoArray + 3);\n        if ((var1 == -1) &&\n           ((0x1d < *dataArray || (-1 < (int)((0x20400001U >> (*dataArray & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(infoArray + 3) = var3 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        infoArray[1] = 0;\n        *infoArray = infoArray[4];\n        if (((int)((uint)var3 << 0x13) < 0) && ((var1 != -1 || (*dataArray == 0)))) {\n          infoArray[0x15] = var1;\n        }\n        pointerVar = (int *)infoArray[0xd];\n        *dataArray = var6;\n        if (pointerVar != (int *)0x0) {\n          if (pointerVar != infoArray + 0x11) {\n            rearrange_and_process_080091d8(dataArray);\n          }\n          infoArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "dataArray",
                "param_2": "infoArray",
                "uVar1": "returnValue",
                "iVar2": "var1",
                "piVar3": "pointerVar",
                "uVar4": "var2",
                "uVar5": "var3",
                "iVar6": "var4",
                "unaff_r4": "unaffectedVar1",
                "unaff_r5": "unaffectedVar2",
                "pcVar7": "functionPtr",
                "iVar8": "var5",
                "uVar9": "var6",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            rearrange_and_process_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_structure_08009cdc",
            "code": "\nvoid initializeDataStructure_08009cdc(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  fill_memory_080091c6(dataStructure + 0x17,0,8);\n  dataStructure[8] = dataStructure;\n  dataStructure[9] = 0x800a021;\n  dataStructure[10] = 0x800a043;\n  dataStructure[0xb] = 0x800a07b;\n  dataStructure[0xc] = &LAB_0800a09e_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "initialize_memory_08009d24",
            "code": "\nundefined4 * initializeMemory_08009d24(undefined4 address,int size)\n\n{\n  undefined4 *allocatedMemory;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  allocatedMemory = (undefined4 *)allocate_memory_08009270(address,offset + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = size;\n    allocatedMemory[2] = allocatedMemory + 3;\n    fill_memory_080091c6(allocatedMemory + 3,0,offset + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "initialize_memory_08009d24",
                "param_1": "address",
                "param_2": "size",
                "puVar1": "allocatedMemory",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_memory_and_data_structure_08009d50",
            "code": "\nvoid initializeMemoryAndDataStructure_08009d50(undefined4 *memoryArray)\n\n{\n  undefined4 returnValue;\n  undefined4 *tempPointer;\n  \n  if (memoryArray[6] == 0) {\n    memoryArray[0x12] = 0;\n    memoryArray[0x13] = 0;\n    memoryArray[0x14] = 0;\n    tempPointer = &DAT_20000094;\n    memoryArray[10] = &LAB_08009cd0_1;\n    if (memoryArray == &DAT_20000094) {\n      tempPointer = (undefined4 *)0x1;\n    }\n    if (memoryArray == &DAT_20000094) {\n      memoryArray[6] = tempPointer;\n    }\n    returnValue = initialize_and_fill_memory_08009db0();\n    memoryArray[1] = returnValue;\n    returnValue = initialize_and_fill_memory_08009db0(memoryArray);\n    memoryArray[2] = returnValue;\n    returnValue = initialize_and_fill_memory_08009db0(memoryArray);\n    memoryArray[3] = returnValue;\n    initialize_data_structure_08009cdc(memoryArray[1],4,0);\n    initialize_data_structure_08009cdc(memoryArray[2],9,1);\n    initialize_data_structure_08009cdc(memoryArray[3],0x12,2);\n    memoryArray[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_memory_and_data_structure_08009d50",
                "param_1": "memoryArray",
                "uVar1": "returnValue",
                "puVar2": "tempPointer"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_and_fill_memory_08009db0",
            "code": "\nint * initialize_and_fill_memory_08009db0(undefined4 *error_code_ptr,undefined4 param_2,undefined4 param_3,undefined4 num_bytes)\n\n{\n  int *new_ptr;\n  int *current_ptr;\n  int **prev_ptr_ptr;\n  \n  if (DAT_200000ac == 0) {\n    initialize_memory_and_data_structure_08009d50(&DAT_20000094);\n  }\n  prev_ptr_ptr = (int **)&DAT_200000dc;\n  do {\n    current_ptr = prev_ptr_ptr[2];\n    new_ptr = prev_ptr_ptr[1];\n    while (new_ptr = (int *)((int)new_ptr + -1), -1 < (int)new_ptr) {\n      if (*(short *)(current_ptr + 3) == 0) {\n        *(undefined2 *)((int)current_ptr + 0xe) = 0xffff;\n        current_ptr[0x19] = 0;\n        *(undefined2 *)(current_ptr + 3) = 1;\n        *current_ptr = 0;\n        current_ptr[2] = 0;\n        current_ptr[1] = 0;\n        current_ptr[4] = 0;\n        current_ptr[5] = 0;\n        current_ptr[6] = 0;\n        fill_memory_080091c6(current_ptr + 0x17,0,8,1,num_bytes);\n        current_ptr[0xd] = 0;\n        current_ptr[0xe] = 0;\n        current_ptr[0x12] = 0;\n        current_ptr[0x13] = 0;\n        return current_ptr;\n      }\n      current_ptr = current_ptr + 0x1a;\n    }\n    if (*prev_ptr_ptr == (int *)0x0) {\n      new_ptr = (int *)initialize_memory_08009d24(error_code_ptr,4);\n      *prev_ptr_ptr = new_ptr;\n      if (new_ptr == (int *)0x0) {\n        *error_code_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    prev_ptr_ptr = (int **)*prev_ptr_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_and_fill_memory_08009db0",
                "param_1": "error_code_ptr",
                "param_4": "num_bytes",
                "piVar1": "new_ptr",
                "piVar2": "current_ptr",
                "ppiVar3": "prev_ptr_ptr"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "initialize_memory_08009e64",
            "code": "\nundefined4 initializeMemory_08009e64(undefined4 param1,int param2,undefined4 *param3,uint *param4)\n\n{\n  int status;\n  undefined4 result;\n  undefined tmpStack [4];\n  uint localVar;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (status = initialize_and_check_memory_0800a0ec(param1,(int)*(short *)(param2 + 0xe),tmpStack), status < 0)) {\n    *param4 = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      result = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *param4 = (uint)((localVar & 0xf000) == 0x2000);\n  }\n  result = 0x400;\nLAB_08009ea4:\n  *param3 = result;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "initialize_memory_08009e64",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "status",
                "uVar2": "result",
                "auStack_4c": "tmpStack",
                "local_48": "localVar"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_and_allocate_memory_08009eac",
            "code": "\nvoid initialize_and_allocate_memory_08009eac(int memory_address,int *memory_block)\n\n{\n  ushort memory_initialized;\n  int allocated_memory;\n  int size;\n  int *temp_memory;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n    size = memory_address;\n    temp_memory = memory_block;\n    memory_initialized = initialize_memory(memory_address,memory_block,&size,&temp_memory);\n    allocated_memory = allocate_memory(memory_address,size);\n    if (allocated_memory != 0) {\n      *(undefined **)(memory_address + 0x28) = success_flag;\n      *memory_block = allocated_memory;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[4] = allocated_memory;\n      memory_block[5] = size;\n      if ((temp_memory != (int *)0x0) &&\n         (allocated_memory = update_success_flag(memory_address,(int)*(short *)((int)memory_block + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = memory_initialized | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_and_allocate_memory_08009eac",
                "param_1": "memory_address",
                "param_2": "memory_block",
                "uVar1": "memory_initialized",
                "iVar2": "allocated_memory",
                "local_18": "size",
                "local_14": "temp_memory",
                "&LAB_08009cd0_1": "success_flag",
                "initialize_memory_08009e64": "initialize_memory",
                "allocate_memory_08009270": "allocate_memory",
                "update_success_flag_0800a110": "update_success_flag"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_08009f2c",
            "code": "\nchar * find_character_08009f2c(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "update_data_and_call_function_08009fe8",
            "code": "\nint update_data_and_call_function_08009fe8(uint data_index)\n\n{\n  int *data_array;\n  undefined4 value;\n  int entry_point;\n  code *function_ptr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 return_address;\n  undefined4 *data_array_ptr;\n  \n  data_array = DAT_20000090;\n  data_array_ptr = &DAT_20000090;\n  if (0x1f < data_index) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  entry_point = DAT_20000090[0x11];\n  if ((entry_point != 0) && (function_ptr = *(code **)(entry_point + data_index * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(entry_point + data_index * 4) = 0;\n      (*function_ptr)(data_index);\n    }\n    return 0;\n  }\n  value = thunk_get_value_from_binary_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  entry_point = initialize_data_0800886c(value,data_index,data_index,0,data_array_ptr,unaff_r4,unaff_r5,return_address);\n  if ((entry_point == -1) && (DAT_20000a38 != 0)) {\n    *data_array = DAT_20000a38;\n  }\n  return entry_point;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "update_data_and_call_function_08009fe8",
                "param_1": "data_index",
                "piVar1": "data_array",
                "uVar2": "value",
                "iVar3": "entry_point",
                "pcVar4": "function_ptr",
                "in_lr": "return_address",
                "puVar5": "data_array_ptr"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "check_return_value_thunk_0800887c",
            "code": "\nint check_return_value_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "check_return_value_thunk_0800887c",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_error_code_0800a020",
            "code": "\nvoid updateErrorCode_0800a020(undefined4 errorCode,int dataPtr)\n\n{\n  int result;\n  uint value;\n  bool isSuccess;\n  \n  result = check_and_set_error_code_0800a168(errorCode,(int)*(short *)(dataPtr + 0xe));\n  isSuccess = -1 < result;\n  if (isSuccess) {\n    value = *(int *)(dataPtr + 0x54) + result;\n  }\n  else {\n    value = *(ushort *)(dataPtr + 0xc) & 0xffffefff;\n  }\n  if (isSuccess) {\n    *(uint *)(dataPtr + 0x54) = value;\n  }\n  if (!isSuccess) {\n    *(short *)(dataPtr + 0xc) = (short)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_error_code_0800a020",
                "param_1": "errorCode",
                "param_2": "dataPtr",
                "iVar1": "result",
                "uVar2": "value",
                "bVar3": "isSuccess"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "process_binary_data_0800a042",
            "code": "\nvoid processBinaryData_0800a042(int *outputArray,int binaryDataAddress,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(binaryDataAddress + 0xc) << 0x17) < 0) {\n    initialize_and_set_param_0800a130(outputArray,(int)*(short *)(binaryDataAddress + 0xe),0,2);\n  }\n  *(ushort *)(binaryDataAddress + 0xc) = *(ushort *)(binaryDataAddress + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  result = process_input_data_0800885c((int)*(short *)(binaryDataAddress + 0xe),param3,param4,param4,param4,unused1,\n                       unused2,unused3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *outputArray = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "process_binary_data_0800a042",
                "param_1": "outputArray",
                "param_2": "binaryDataAddress",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "initialize_param_status_0800a07a",
            "code": "\nvoid initializeParamStatus_0800a07a(undefined4 param1,int param2)\n\n{\n  int initializedParam;\n  ushort updatedParam;\n  bool isInitialized;\n  \n  initializedParam = initialize_and_set_param_0800a130(param1,(int)*(short *)(param2 + 0xe));\n  isInitialized = initializedParam == -1;\n  if (isInitialized) {\n    updatedParam = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = initializedParam;\n    updatedParam = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isInitialized) {\n    *(ushort *)(param2 + 0xc) = updatedParam;\n  }\n  if (!isInitialized) {\n    *(ushort *)(param2 + 0xc) = updatedParam;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "initialize_param_status_0800a07a",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initializedParam",
                "uVar2": "updatedParam",
                "bVar3": "isInitialized"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "initialize_and_check_memory_0800a0ec",
            "code": "\nvoid initializeAndCheckMemory_0800a0ec(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int memoryInitializationResult;\n  \n  DAT_20000a38 = 0;\n  memoryInitializationResult = initialize_memory_08008846(arg1,arg2,arg2,0,arg3);\n  if ((memoryInitializationResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "initialize_and_check_memory_0800a0ec",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "memoryInitializationResult"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "update_success_flag_0800a110",
            "code": "\nvoid update_success_flag_0800a110(int *result,undefined4 value)\n\n{\n  int success_flag_check;\n  \n  DAT_20000a38 = 0;\n  success_flag_check = get_success_flag_08008850(value);\n  if ((success_flag_check == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "update_success_flag_0800a110",
                "param_1": "result",
                "param_2": "value",
                "iVar1": "success_flag_check"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "initialize_and_set_param_0800a130",
            "code": "\nvoid initializeAndSetParam_0800a130(int *result,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initResult;\n  \n  DAT_20000a38 = 0;\n  initResult = initialize_08008854(param2,param3,param4,param4,param4);\n  if ((initResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "initialize_and_set_param_0800a130",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_result_0800a154",
            "code": "\nint calculateResult_0800a154(undefined4 input1,int input2)\n\n{\n  int calculatedValue;\n  \n  calculatedValue = *(int *)(input2 + -4) + -4;\n  if (*(int *)(input2 + -4) < 0) {\n    calculatedValue = calculatedValue + *(int *)(input2 + calculatedValue);\n  }\n  return calculatedValue;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_result_0800a154",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "calculatedValue"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "check_and_set_error_code_0800a168",
            "code": "\nvoid checkAndSetErrorCode_0800a168(int *errorPointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = get_error_code_08008858(arg1,arg2,arg3,arg3,arg3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *errorPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "check_and_set_error_code_0800a168",
                "param_1": "errorPointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "process_and_jump_0800a18c",
            "code": "\nvoid process_and_jump_0800a18c(void)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  \n  UNRECOVERED_JUMPTABLE = process_and_jump_0800a18c;\n  process_data_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "process_and_jump_0800a18c"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 205206,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}