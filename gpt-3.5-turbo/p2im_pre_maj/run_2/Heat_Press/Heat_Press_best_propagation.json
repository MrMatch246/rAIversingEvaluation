{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_hardware_00080164",
            "code": "\nvoid initializeHardware_00080164(int **hardwareData)\n\n{\n  int returnValue;\n  \n  *hardwareData = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)hardwareData + 6)) {\n    pinMode(*(byte *)((int)hardwareData + 6),1);\n    digitalWrite(*(undefined *)((int)hardwareData + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**hardwareData + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)hardwareData + 0x49) = 0;\n  *(undefined *)((int)hardwareData + 0x4a) = 0;\n  *(undefined2 *)(hardwareData + 0x15) = 0;\n  *(undefined2 *)((int)hardwareData + 0x52) = 0;\n  *(undefined2 *)(hardwareData + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_hardware_00080164",
                "param_1": "hardwareData",
                "iVar1": "returnValue"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "handle_data_000801b0",
            "code": "\nint handleData_000801b0(int **data)\n\n{\n  bool overflow;\n  undefined result;\n  char count;\n  int returnValue;\n  byte index;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),0);\n  }\n  overflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      index = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      count = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + index + 9) = result;\n      index = count + 1;\n      *(byte *)((int)data + 0x49) = index;\n      if (0x3f < index) {\n        overflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (overflow) {\n    count = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    count = *(char *)((int)data + 0x49);\n  }\n  return (int)count;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "handle_data_000801b0",
                "param_1": "data",
                "bVar1": "overflow",
                "uVar2": "result",
                "cVar3": "count",
                "iVar4": "returnValue",
                "bVar5": "index"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataAddress,uint dataLength)\n\n{\n  int currentAddress;\n  uint checksum;\n  char bitCounter;\n  uint bit1;\n  \n  checksum = 0xffff;\n  for (currentAddress = dataAddress; (currentAddress - dataAddress & 0xffU) < dataLength; currentAddress = currentAddress + 1) {\n    checksum = checksum ^ *(byte *)(currentAddress + 9);\n    bitCounter = '\\b';\n    do {\n      bit1 = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit1 != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCounter = bitCounter + -1;\n    } while (bitCounter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "iVar1": "currentAddress",
                "uVar2": "checksum",
                "cVar3": "bitCounter",
                "uVar4": "bit1"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "calculate_checksum_00080258",
            "code": "\nvoid calculateChecksum_00080258(int **checksumData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte checksumByte;\n  undefined2 calculatedCrc;\n  int loopVariable;\n  uint byteValue;\n  \n  checksumByte = *(byte *)((int)checksumData + 0x49);\n  byteValue = (uint)checksumByte;\n  calculatedCrc = calcCRC(checksumData,byteValue,param3,param4,param4);\n  *(char *)((int)checksumData + byteValue + 9) = (char)((ushort)calculatedCrc >> 8);\n  *(char *)((int)checksumData + (byteValue + 1 & 0xff) + 9) = (char)calculatedCrc;\n  *(byte *)((int)checksumData + 0x49) = checksumByte + 2;\n  if (1 < *(byte *)((int)checksumData + 6)) {\n    setDigitalOutput(*(byte *)((int)checksumData + 6),1);\n  }\n  if (*(byte *)((int)checksumData + 5) < 4) {\n    (**(code **)(**checksumData + 4))(*checksumData,(int)checksumData + 9,*(undefined *)((int)checksumData + 0x49));\n  }\n  if (1 < *(byte *)((int)checksumData + 6)) {\n    setDigitalOutput(*(byte *)((int)checksumData + 6),0);\n  }\n  if (*(byte *)((int)checksumData + 5) < 4) {\n    do {\n      loopVariable = (**(code **)(**checksumData + 0xc))();\n    } while (-1 < loopVariable);\n  }\n  *(undefined *)((int)checksumData + 0x49) = 0;\n  loopVariable = getMilliseconds();\n  checksumData[0x17] = (int *)(loopVariable + (uint)*(ushort *)((int)checksumData + 0x56));\n  *(short *)((int)checksumData + 0x52) = *(short *)((int)checksumData + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "calculate_checksum_00080258",
                "param_1": "checksumData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "checksumByte",
                "uVar2": "calculatedCrc",
                "iVar3": "loopVariable",
                "uVar4": "byteValue",
                "digitalWrite": "setDigitalOutput",
                "millis": "getMilliseconds"
            },
            "calling": [
                "query"
            ],
            "called": [
                "millis",
                "calcCRC",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "process_data_000802da",
            "code": "\nint processData_000802da(int inputBuffer,uint flag,uint code,ushort *data)\n\n{\n  char status;\n  byte tempByte;\n  undefined tempByte2;\n  ushort tempShort;\n  uint tempInt;\n  ushort *tempPtr;\n  undefined flagByte1;\n  undefined flagByte2;\n  ushort codeShort;\n  \n  flagByte1 = (undefined)flag;\n  flagByte2 = (undefined)(flag >> 8);\n  codeShort = (ushort)code;\n  tempInt = code & 0xffff;\n  if (*(char *)(inputBuffer + 4) != '\\0') {\n    status = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(inputBuffer + 7) != '\\0') {\n    status = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flag & 0xff) - 1 & 0xff)) {\n    status = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(inputBuffer + 9) = flagByte1;\n  *(undefined *)(inputBuffer + 10) = flagByte2;\n  *(ushort **)(inputBuffer + 0x4c) = data;\n  *(char *)(inputBuffer + 0xb) = (char)(flag >> 0x18);\n  *(char *)(inputBuffer + 0xc) = (char)(flag >> 0x10);\n  tempByte2 = (undefined)(code >> 8);\n  switch(flagByte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(inputBuffer + 0xd) = tempByte2;\n    break;\n  case 5:\n    tempShort = *data;\n    if (tempShort != 0) {\n      tempShort = 1;\n    }\n    *(char *)(inputBuffer + 0xd) = -(char)tempShort;\n    tempInt = 0;\n    break;\n  case 6:\n    *(char *)(inputBuffer + 0xd) = (char)(*data >> 8);\n    tempInt = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    tempByte = (byte)(codeShort >> 3) & 0xfe;\n    if ((code & 0xf) != 0) {\n      tempByte = tempByte + 1;\n    }\n    *(char *)(inputBuffer + 0xe) = (char)code;\n    *(undefined *)(inputBuffer + 0xd) = tempByte2;\n    *(byte *)(inputBuffer + 0xf) = tempByte;\n    tempByte2 = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(inputBuffer + 0xd) = tempByte2;\n    *(char *)(inputBuffer + 0xe) = (char)code;\n    data = data + -1;\n    *(char *)(inputBuffer + 0xf) = (char)tempInt * '\\x02';\n    *(undefined *)(inputBuffer + 0x49) = 7;\n    tempPtr = data + tempInt;\n    while (data != tempPtr) {\n      tempByte = *(byte *)(inputBuffer + 0x49);\n      *(char *)(inputBuffer + (uint)tempByte + 9) = (char)(data[1] >> 8);\n      tempInt = tempByte + 1 & 0xff;\n      *(char *)(inputBuffer + 0x49) = (char)tempInt;\n      data = data + 1;\n      *(char *)(tempInt + inputBuffer + 9) = (char)*data;\n      *(byte *)(inputBuffer + 0x49) = tempByte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(inputBuffer + 0xe) = (char)tempInt;\n  tempByte2 = 6;\nLAB_0008034a:\n  *(undefined *)(inputBuffer + 0x49) = tempByte2;\nswitchD_0008031e_caseD_7:\n  sendTxBuffer(inputBuffer);\n  *(undefined *)(inputBuffer + 7) = 1;\n  status = '\\0';\nLAB_000803cc:\n  return (int)status;\n}\n\n",
            "renaming": {
                "FUN_000802da": "process_data_000802da",
                "param_1": "inputBuffer",
                "param_2": "flag",
                "param_3": "code",
                "param_4": "data",
                "cVar1": "status",
                "bVar2": "tempByte",
                "uVar3": "tempByte2",
                "uVar4": "tempShort",
                "uVar5": "tempInt",
                "puVar6": "tempPtr",
                "local_1c": "flagByte1",
                "local_1b": "flagByte2",
                "local_18": "codeShort"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_byte_and_increase_short_000803d4",
            "code": "\nundefined4 check_byte_and_increase_short_000803d4(int input_value)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input_value + 10) << 0x18) < 0) {\n    *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input_value + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_byte_and_increase_short_000803d4",
                "param_1": "input_value",
                "iVar1": "index"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "extract_data_00080410",
            "code": "\nvoid extractData_00080410(int dataPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 wordValue;\n  int computedValue;\n  byte counter;\n  uint convertedCounter;\n  int arrayOffset;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPtr + 0xb) >> 1 <= convertedCounter) break;\n    computedValue = (convertedCounter * 2 + 3 & 0xff) + dataPtr;\n    arrayOffset = *(int *)(dataPtr + 0x4c);\n    wordValue = makeWord(*(undefined *)(computedValue + 9),*(undefined *)(computedValue + 10),computedValue,\n                     *(byte *)(dataPtr + 0xb),param4);\n    *(undefined2 *)(arrayOffset + convertedCounter * 2) = wordValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "extract_data_00080410",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "wordValue",
                "iVar2": "computedValue",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "arrayOffset"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_process_data_0008043e",
            "code": "\nint checkAndProcessData_0008043e(int **dataPtr)\n\n{\n  char result;\n  uint returnValue;\n  int *currentMillis;\n  int validationResult;\n  uint conditionCheck;\n  \n  if (*(byte *)((int)dataPtr + 5) < 4) {\n    returnValue = (**(code **)(**dataPtr + 8))();\n    conditionCheck = returnValue & 0xff;\n  }\n  currentMillis = (int *)millis();\n  if (dataPtr[0x17] < currentMillis) {\n    *(undefined *)(dataPtr + 2) = 0xff;\n    *(undefined *)((int)dataPtr + 7) = 0;\n    *(short *)(dataPtr + 0x15) = *(short *)(dataPtr + 0x15) + 1;\n  }\n  else if (7 < conditionCheck) {\n    readDataFromBuffer(dataPtr);\n    validationResult = validateData(dataPtr);\n    if (validationResult == 0) {\n      if (*(byte *)((int)dataPtr + 10) - 3 < 2) {\n        processData(dataPtr);\n      }\n      *(undefined *)((int)dataPtr + 7) = 0;\n      result = *(char *)((int)dataPtr + 0x49);\n    }\n    else {\n      *(undefined *)((int)dataPtr + 7) = 0;\n      result = (char)validationResult;\n    }\n    goto endLabel;\n  }\n  result = '\\0';\nendLabel:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_process_data_0008043e",
                "param_1": "dataPtr",
                "cVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "currentMillis",
                "iVar4": "validationResult",
                "unaff_r6": "conditionCheck",
                "getRxBuffer": "readDataFromBuffer",
                "validateAnswer": "validateData",
                "get_FC3": "processData",
                "LAB_000804a2": "endLabel"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "millis",
                "getRxBuffer",
                "get_FC3",
                "validateAnswer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_hardware_000804a8",
            "code": "\nundefined8 initializeHardware_000804a8(void)\n\n{\n  int currentTime;\n  \n  pinMode(1,0);\n  pinMode(6,1);\n  pinMode(0,1);\n  pinMode(1,1);\n  digitalWrite(0,0);\n  digitalWrite(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initializeHardware_000804a8(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = millis();\n  currentTime = millis();\n  DAT_200709e0 = currentTime + 1000;\n  currentTime = millis();\n  DAT_20070a48 = currentTime + 1000;\n  currentTime = millis();\n  DAT_20070934 = currentTime + 1000;\n  currentTime = millis();\n  DAT_200708c0 = currentTime + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    triggerSoftwareInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_hardware_000804a8",
                "iVar1": "currentTime",
                "initialize_hardware_00080164": "initializeHardware",
                "software_interrupt(0x3f)": "triggerSoftwareInterrupt(0x3f)"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "pinMode",
                "digitalWrite",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "poll_device_000805d0",
            "code": "\n\n\nvoid poll_device_000805d0(void)\n\n{\n  uint current_time;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  int temp_var5;\n  uint *ptr_var1;\n  undefined4 *ptr_var2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    current_time = millis();\n    if (DAT_200708c8 < current_time) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = __floatunsisf(DAT_200708d8);\n      DAT_2007094c = __floatsisf(DAT_200708da / 10);\n      DAT_200709c4 = __floatunsisf(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n    }\n    break;\n  case '\\x03':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr_var2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      query(&DAT_200709e4,*ptr_var2,ptr_var2[1],ptr_var2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    poll(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr_var2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = millis();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr_var1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr_var1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (current_time = millis(), DAT_200708c0 < current_time)) {\n      DAT_20070960 = DAT_20070960 + 1;\n      temp_var5 = millis();\n      DAT_200708c0 = temp_var5 + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      current_time = millis();\n      if (DAT_200708c0 < current_time) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var5 = millis();\n        DAT_200708c0 = temp_var5 + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr_var1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      current_time = millis();\n      if (DAT_200708c0 < current_time) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var5 = millis();\n        DAT_200708c0 = temp_var5 + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  current_time = millis();\n  if (DAT_200709e0 < current_time) {\n    temp_var1 = __floatsisf(DAT_20070940);\n    temp_var2 = __aeabi_fsub(temp_var1,DAT_200709c8);\n    temp_var1 = DAT_200708c4;\n    DAT_20070930 = temp_var2;\n    temp_var3 = __addsf3(temp_var2,DAT_200708c4);\n    temp_var3 = __aeabi_fmul(temp_var3,DAT_2007094c);\n    temp_var3 = __addsf3(temp_var3,DAT_20070914);\n    DAT_2007094c = temp_var3;\n    temp_var1 = __aeabi_fsub(temp_var2,temp_var1);\n    temp_var1 = __aeabi_fmul(temp_var1,DAT_200709c4);\n    temp_var1 = __aeabi_fsub(temp_var1,DAT_2007096c);\n    DAT_200709c4 = temp_var1;\n    temp_var4 = __aeabi_fmul(temp_var2,DAT_20070a4c);\n    temp_var4 = __addsf3(temp_var4,temp_var3);\n    __addsf3(temp_var4,temp_var1);\n    DAT_20070910 = __aeabi_f2iz();\n    DAT_2007091c = __floatsisf();\n    DAT_2007092c = 0;\n    DAT_200708c4 = temp_var2;\n    DAT_20070914 = temp_var3;\n    DAT_2007096c = temp_var1;\n    temp_var5 = millis();\n    DAT_200709e0 = temp_var5 + DAT_20070970;\n  }\n  temp_var1 = __floatsisf(DAT_20070970);\n  temp_var5 = __aeabi_fcmpge(DAT_2007091c,temp_var1);\n  if (temp_var5 != 0) {\n    DAT_2007091c = temp_var1;\n  }\n  temp_var5 = __aeabi_fcmple(DAT_2007091c,0);\n  if (temp_var5 != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = __fixunssfsi(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "poll_device_000805d0",
                "uVar1": "current_time",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "iVar6": "temp_var5",
                "puVar7": "ptr_var1",
                "puVar8": "ptr_var2"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "query",
                "__aeabi_f2iz",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_fcmple",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "poll",
                "__floatsisf",
                "__fixunssfsi",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_function_00080a68",
            "code": "\nvoid initializeFunction_00080a68(void)\n\n{\n  String(&DAT_20070954,\"\");\n  __aeabi_atexit(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_function_00080a68"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  SystemInit();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  initializeLibraries();\n  iVar1 = 0;\n  do {\n    iVar2 = iVar1 + 1;\n    setDigitalOutput(iVar1,0);\n    iVar1 = iVar2;\n  } while (iVar2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  configurePIO(0x400e0e00,1,0x300,0);\n  setDigitalOutput(0,1);\n  configurePIO(0x400e0e00,1,0xc00,0);\n  configurePIO(0x400e0e00,1,0x3000,0);\n  configurePIO(0x400e1400,2,0x30,0);\n  configurePIO(0x400e1000,1,0xc00,0);\n  configurePIO(0x400e0e00,1,3,0);\n  configurePIO(0x400e1000,1,0xc000,0);\n  enablePeripheralClock(0x25);\n  initializeADC(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  configureADCTiming(0x400c0000,0,0x300000,1);\n  configureADCTrigger(0x400c0000,0,0);\n  disableADCInterrupt(0x400c0000,0xffffffff);\n  disableAllADCChannels(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "__libc_init_array": "initializeLibraries",
                "digitalWrite": "setDigitalOutput",
                "PIO_Configure": "configurePIO",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "adc_init": "initializeADC",
                "adc_configure_timing": "configureADCTiming",
                "adc_configure_trigger": "configureADCTrigger",
                "adc_disable_interrupt": "disableADCInterrupt",
                "adc_disable_all_channel": "disableAllADCChannels"
            },
            "calling": [
                "main"
            ],
            "called": [
                "adc_init",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "digitalWrite",
                "adc_disable_interrupt",
                "adc_configure_trigger",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_communication_00080c0c",
            "code": "\nvoid initializeCommunication_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initializeRingBuffer(&DAT_20070b84);\n  initializeRingBuffer(&DAT_20070ad8);\n  initializeUART(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initializeRingBuffer(&DAT_20070de4);\n  initializeRingBuffer(&DAT_20070e6c);\n  initializeRingBuffer(&DAT_20070ef4);\n  initializeRingBuffer(&DAT_20070a50);\n  initializeRingBuffer(&DAT_20070c84);\n  initializeRingBuffer(&DAT_20070d0c);\n  initializeUSART(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initializeUSART(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initializeUSART(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_communication_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "RingBuffer": "initializeRingBuffer",
                "UARTClass": "initializeUART",
                "USARTClass": "initializeUSART"
            },
            "calling": [],
            "called": [
                "RingBuffer",
                "UARTClass",
                "USARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_serial_events_00080ce0",
            "code": "\nvoid checkSerialEvents_00080ce0(void)\n\n{\n  int result;\n  \n  result = isAvailable(&DAT_20070b60);\n  if (result != 0) {\n    processSerialEvent();\n  }\n  result = isAvailable(&DAT_20070c0c);\n  if (result != 0) {\n    processSerialEvent1();\n  }\n  result = isAvailable(&DAT_20070c34);\n  if (result != 0) {\n    processSerialEvent2();\n  }\n  result = isAvailable(&DAT_20070c5c);\n  if (result != 0) {\n    processSerialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_serial_events_00080ce0",
                "iVar1": "result",
                "available": "isAvailable",
                "serialEvent": "processSerialEvent",
                "serialEvent1": "processSerialEvent1",
                "serialEvent2": "processSerialEvent2",
                "serialEvent3": "processSerialEvent3"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent2",
                "serialEvent1",
                "available",
                "serialEvent3",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_00080d2e",
            "code": "\nvoid updateParameter_00080d2e(int data,undefined4 mode,uint value)\n\n{\n  uint result;\n  \n  *(uint *)(data + 0x44) = value;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(data + 0x70) & *(uint *)(data + 0x70) & ~value;\n    break;\n  case 2:\n    result = *(uint *)(data + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(data + 0x70) = result;\nswitchD_00080d34_caseD_6:\n  *(uint *)(data + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_00080d2e",
                "param_1": "data",
                "param_2": "mode",
                "param_3": "value",
                "uVar1": "result"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_parameters_00080d54",
            "code": "\nvoid setParameters_00080d54(undefined4 *result,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  result[0x11] = value;\n  if (isNegative) {\n    result[0x19] = value;\n  }\n  if (!isNegative) {\n    result[0x18] = value;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    result[8] = value;\n  }\n  if (!isNegative) {\n    result[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    result[0x20] = value;\n  }\n  result[5] = value;\n  *result = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_parameters_00080d54",
                "param_1": "result",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "initialize_parameters_00080d7a",
            "code": "\nvoid initializeParameters_00080d7a(undefined4 *parameterArray,undefined4 newValue,int flag1,int flag2,int flag3)\n\n{\n  parameterArray[0x11] = newValue;\n  if (flag3 == 0) {\n    parameterArray[0x18] = newValue;\n  }\n  else {\n    parameterArray[0x19] = newValue;\n  }\n  if (flag2 == 0) {\n    parameterArray[0x15] = newValue;\n  }\n  else {\n    parameterArray[0x14] = newValue;\n  }\n  if (flag1 == 0) {\n    parameterArray[0xd] = newValue;\n  }\n  else {\n    parameterArray[0xc] = newValue;\n  }\n  parameterArray[4] = newValue;\n  *parameterArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "initialize_parameters_00080d7a",
                "param_1": "parameterArray",
                "param_2": "newValue",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3"
            },
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "set_peripheral_00080da0",
            "code": "\nundefined4 setPeripheral_00080da0(int deviceAddress,int peripheralType,undefined4 peripheralConfig,uint peripheralFlags)\n\n{\n  bool isNegativeFlag;\n  \n  switch(peripheralType) {\n  case 1:\n  case 2:\n    setPeripheral_00080da0(deviceAddress,peripheralType,peripheralConfig);\n    isNegativeFlag = (int)(peripheralFlags << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = peripheralConfig;\n    if (isNegativeFlag) {\n      *(undefined4 *)(deviceAddress + 100) = peripheralConfig;\n    }\n    if (!isNegativeFlag) {\n      *(undefined4 *)(deviceAddress + 0x60) = peripheralConfig;\n    }\n    break;\n  case 3:\n    setInput(deviceAddress,peripheralConfig,peripheralFlags,0x80d55,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    setOutput(deviceAddress,peripheralConfig,peripheralType == 5,(peripheralFlags << 0x1d) >> 0x1f,peripheralFlags & 1,peripheralType,peripheralConfig\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "set_peripheral_00080da0",
                "param_1": "deviceAddress",
                "param_2": "peripheralType",
                "param_3": "peripheralConfig",
                "param_4": "peripheralFlags",
                "bVar1": "isNegativeFlag",
                "PIO_SetPeripheral": "setPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint check_bitwise_intersection_00080e04(int input_ptr,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_ptr + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "input_ptr",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "init",
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f24": {
            "entrypoint": "0x00080f24",
            "current_name": "initialize_binary_00080f24",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid initializeBinary_00080f24(void)\n\n{\n  int index;\n  undefined4 *pointer;\n  \n  for (index = 0; (undefined4 *)((int)&relocationEntries[0].offset + index) < &DAT_2007089c\n      ; index = index + 4) {\n    *(undefined4 *)((int)&relocationEntries[0].offset + index) =\n         *(undefined4 *)(&DAT_0008588c + index);\n  }\n  for (pointer = &DAT_2007089c; pointer < (undefined4 *)0x200711c0; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080f24": "initialize_binary_00080f24",
                "iVar1": "index",
                "puVar2": "pointer",
                "Elf32_Rel_ARRAY_20070000": "relocationEntries",
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": "&relocationEntries[0].offset"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "find_config_00080f9c",
            "code": "\nundefined4 findConfig_00080f9c(undefined4 *configArray,uint inputValue,int factor1,int factor2)\n\n{\n  uint divisor;\n  uint index;\n  uint thresholdArray [16];\n  \n  thresholdArray[0] = 0;\n  thresholdArray[1] = 8;\n  thresholdArray[2] = 0x10;\n  thresholdArray[3] = 0x18;\n  thresholdArray[4] = 0x40;\n  thresholdArray[5] = 0x50;\n  thresholdArray[6] = 0x60;\n  thresholdArray[7] = 0x70;\n  thresholdArray[8] = 0x200;\n  thresholdArray[9] = 0x240;\n  thresholdArray[10] = 0x280;\n  thresholdArray[11] = 0x2c0;\n  thresholdArray[12] = 0x300;\n  thresholdArray[13] = 0x340;\n  thresholdArray[14] = 0x380;\n  thresholdArray[15] = 0x3c0;\n  *configArray = 1;\n  configArray[1] = 0;\n  configArray[0x48] = 0x202;\n  configArray[0x41] = 0;\n  configArray[0x45] = 0;\n  divisor = inputValue / (uint)(factor1 * 2);\n  if (inputValue == factor1 * 2 * divisor) {\n    divisor = divisor - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(factor2 * (int)(((ulonglong)inputValue / (ulonglong)((divisor + 1) * 2)) / 1000000)) <=\n        thresholdArray[index]) {\n      configArray[1] = (index & 0xf) << 0x10 | (divisor & 0xff) << 8 | configArray[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "find_config_00080f9c",
                "param_1": "configArray",
                "param_2": "inputValue",
                "param_3": "factor1",
                "param_4": "factor2",
                "local_58": "thresholdArray",
                "uVar1": "divisor",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "set_flag_in_memory_00081034",
            "code": "\nvoid setFlagInMemory_00081034(int memoryAddress,uint flagValue,uint bitNumber)\n\n{\n  *(uint *)(memoryAddress + 4) = flagValue | *(uint *)(memoryAddress + 4) | (bitNumber & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "set_flag_in_memory_00081034",
                "param_1": "memoryAddress",
                "param_2": "flagValue",
                "param_3": "bitNumber"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "set_configuration_00081042",
            "code": "\nvoid setConfiguration_00081042(int configStruct,uint bitmask1,uint bitmask2,uint bitmask3)\n\n{\n  *(uint *)(configStruct + 4) =\n       bitmask2 | *(uint *)(configStruct + 4) | (bitmask1 & 0xf) << 0x18 | (bitmask3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "set_configuration_00081042",
                "param_1": "configStruct",
                "param_2": "bitmask1",
                "param_3": "bitmask2",
                "param_4": "bitmask3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int address,uint bitIndex)\n\n{\n  *(int *)(address + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "address",
                "param_2": "bitIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_param_00081066",
            "code": "\nvoid initializeParam_00081066(int param)\n\n{\n  *(undefined4 *)(param + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_param_00081066",
                "param_1": "param"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nundefined4 initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputNum)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = inputNum + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputNum",
                "iVar1": "previousSum"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_value_000811ae",
            "code": "\nuint32_t get_default_value_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_value_000811ae",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_memory_value_000811b4",
            "code": "\nundefined4 setMemoryValue_000811b4(undefined4 result,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_memory_value_000811b4",
                "param_1": "result",
                "param_2": "address"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "determine_return_value_000811be",
            "code": "\nundefined4 determineReturnValue_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "determine_return_value_000811be"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nundefined4 initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_zero_000811c6",
            "code": "\nundefined4 get_zero_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_zero_000811c6"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_to_memory_000811cc",
            "code": "\n\n\nuint copy_bytes_to_memory_000811cc(undefined4 param_1,int source_address,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source_address + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_memory_000811cc",
                "param_2": "source_address",
                "param_3": "num_bytes",
                "iVar1": "index"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081208": {
            "entrypoint": "0x00081208",
            "current_name": "FUN_00081208",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop",
                "setup",
                "sendTxBuffer",
                "poll"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "configure_peripheral_00081210",
            "code": "\n\n\nint configurePeripheral_00081210(int channelIndex,int configType)\n\n{\n  int result;\n  uint value;\n  undefined4 mode;\n  uint mask;\n  byte channelType;\n  byte configMask;\n  int configIndex;\n  int configValue;\n  \n  result = channelIndex;\n  if ((&DAT_00084d24)[channelIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[channelIndex] & 0xf) == 4) {\n      result = adc_disable_channel(0x400c0000,(&DAT_00084d31)[channelIndex * 0x1c]);\n    }\n    configMask = (&DAT_20070d94)[channelIndex];\n    channelType = configMask & 0xf;\n    if ((channelType < 3) && (configMask != 0)) {\n      if (channelType == 2) {\n        if (configType == 0) {\n          return result;\n        }\n      }\n      else if (channelType == 1) {\n        if (configType == 2) {\n          return result;\n        }\n      }\n      else if (channelType == 3) {\n        if (configType == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (configType != 1) {\nLAB_0008126c:\n      if (configType == 0) {\n        result = channelIndex * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084d20 + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),0);\n        configMask = (&DAT_20070d94)[channelIndex] & 0xf0 | 2;\n      }\n      else {\n        if (configType != 2) {\n          return result;\n        }\n        result = channelIndex * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084d20 + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),1);\n        configMask = (&DAT_20070d94)[channelIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[channelIndex] = configMask;\n      return result;\n    }\n    configIndex = channelIndex * 0x1c;\n    configValue = *(int *)(&DAT_00084d18 + configIndex);\n    if (configMask >> 4 == 0) {\n      mode = 4;\n    }\n    else {\n      mode = 5;\n    }\n    result = PIO_Configure(configValue,mode,*(undefined4 *)(&DAT_00084d1c + configIndex),\n                          *(undefined4 *)(&DAT_00084d28 + configIndex));\n    (&DAT_20070d94)[channelIndex] = (&DAT_20070d94)[channelIndex] & 0xf0 | 3;\n    if (*(int *)(configValue + 0x18) == -1) {\n      value = *(uint *)(&DAT_00084d20 + configIndex);\n      if (0x2c < value) {\n        return 1;\n      }\n      if (value < 0x20) {\n        value = 1 << (value & 0xff);\n        mask = _DAT_400e0618 & value;\n        if (mask == value) {\n          _DAT_400e0614 = mask;\n        }\n      }\n      else {\n        value = 1 << (value - 0x20 & 0xff);\n        mask = _DAT_400e0708 & value;\n        if (mask == value) {\n          _DAT_400e0704 = mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "configure_peripheral_00081210",
                "param_1": "channelIndex",
                "param_2": "configType",
                "iVar1": "result",
                "uVar2": "value",
                "uVar3": "mode",
                "uVar4": "mask",
                "bVar5": "channelType",
                "bVar6": "configMask",
                "iVar7": "configIndex",
                "iVar8": "configValue"
            },
            "calling": [
                "setup",
                "digitalWrite",
                "FUN_00080164"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "configure_pin_mode_00081318",
            "code": "\nvoid configurePinMode_00081318(int pin,int mode,undefined4 param)\n\n{\n  int statusVal;\n  undefined4 outputVal;\n  int pioAddr;\n  \n  if ((&DAT_00084d24)[pin * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[pin] & 0xf) == 5) {\n      pinMode(pin,1,param,5,pin,mode,param);\n    }\n    (&DAT_20070d94)[pin] = (&DAT_20070d94)[pin] & 0xf | (byte)(mode << 4);\n    pioAddr = *(int *)(&DAT_00084d18 + pin * 0x1c);\n    outputVal = *(undefined4 *)(&DAT_00084d1c + pin * 0x1c);\n    statusVal = PIO_GetOutputDataStatus(pioAddr,outputVal);\n    if (statusVal == 0) {\n      if (mode != 0) {\n        *(undefined4 *)(pioAddr + 100) = outputVal;\n        return;\n      }\n      *(undefined4 *)(pioAddr + 0x60) = outputVal;\n      return;\n    }\n    PIO_SetOutput(pioAddr,outputVal,mode,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "configure_pin_mode_00081318",
                "param_1": "pin",
                "param_2": "mode",
                "param_3": "param",
                "iVar1": "statusVal",
                "uVar2": "outputVal",
                "iVar3": "pioAddr"
            },
            "calling": [
                "getRxBuffer",
                "setup",
                "FUN_00080ae4",
                "sendTxBuffer",
                "FUN_00080164"
            ],
            "called": [
                "pinMode",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_relocation_index_is_zero_00081388",
            "code": "\nvoid executeIfRelocationIndexIsZero_00081388(void)\n\n{\n  if ((relocationEntries[6].relocationInfo != 0xffffffff) &&\n     (relocationEntries[6].relocationInfo = relocationEntries[6].relocationInfo - 1,\n     relocationEntries[6].relocationInfo == 0)) {\n    (*(code *)((int)&relocationEntries[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_relocation_index_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "relocationEntries",
                "r_info": "relocationInfo",
                "r_offset": "relocationOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initialize_memory_000813a8(int memory_buffer)\n\n{\n  memset(memory_buffer,0,0x80);\n  *(undefined4 *)(memory_buffer + 0x80) = 0;\n  *(undefined4 *)(memory_buffer + 0x84) = 0;\n  return memory_buffer;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memory_buffer"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_and_increment_pointer_000813c2",
            "code": "\nvoid updateAndIncrementPointer_000813c2(int inputPointer,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(inputPointer + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(inputPointer + 0x84)) {\n    *(undefined *)(inputPointer + *(int *)(inputPointer + 0x80)) = newValue;\n    *(uint *)(inputPointer + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_and_increment_pointer_000813c2",
                "param_1": "inputPointer",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataStruct,undefined4 newValue)\n\n{\n  int ptrData;\n  uint updatedValue;\n  \n  ptrData = *(int *)(dataStruct + 0x14);\n  if ((*(int *)(*(int *)(dataStruct + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrData + 0x84) == *(int *)(ptrData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptrData + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrData + 0x84) == updatedValue);\n    *(char *)(ptrData + *(int *)(ptrData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataStruct + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "iVar1": "ptrData",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_params_000814e4",
            "code": "\nvoid initializeParams_000814e4(undefined4 *parameterArray,undefined4 param2Value,undefined param3Value,undefined4 param4Value,\n                 undefined4 param5Value,undefined4 param6Value)\n\n{\n  parameterArray[1] = 0;\n  parameterArray[2] = 1000;\n  parameterArray[6] = param2Value;\n  *parameterArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameterArray + 7) = param3Value;\n  parameterArray[4] = param5Value;\n  parameterArray[8] = param4Value;\n  parameterArray[5] = param6Value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "parameterArray",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "param_6": "param6Value"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_peripheral_00081508",
            "code": "\nvoid initializePeripheral_00081508(int peripheralAddress,uint divisionFactor,undefined4 unknownParameter)\n\n{\n  int tempVar1;\n  undefined4 *peripheralData;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(peripheralAddress + 0x20));\n  peripheralData = *(undefined4 **)(peripheralAddress + 0x18);\n  peripheralData[0x48] = 0x202;\n  *peripheralData = 0xac;\n  peripheralData[1] = unknownParameter;\n  peripheralData[8] = elfRelocationArray[6].r_offset / divisionFactor >> 4;\n  peripheralData[3] = 0xffffffff;\n  peripheralData[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheralAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheralAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(peripheralAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(peripheralAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *peripheralData = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_peripheral_00081508",
                "param_1": "peripheralAddress",
                "param_2": "divisionFactor",
                "param_3": "unknownParameter",
                "iVar1": "tempVar1",
                "puVar2": "peripheralData",
                "Elf32_Rel_ARRAY_20070000": "elfRelocationArray"
            },
            "calling": [],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_uart_000815d4",
            "code": "\nundefined4 * initializeUART_000815d4(undefined4 *uartInstance,undefined4 configValue)\n\n{\n  UARTClass();\n  *uartInstance = &PTR_FUN_00081454_1_000857d8;\n  uartInstancePtr[9] = configValue;\n  return uartInstance;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_uart_000815d4",
                "param_1": "uartInstance",
                "param_2": "configValue",
                "param_1[9]": "uartInstancePtr[9]"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "get_FC3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "free_memory_000815fe",
            "code": "\nundefined4 * freeMemory_000815fe(undefined4 *memoryPointer)\n\n{\n  free(*memoryPointer);\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "free_memory_000815fe",
                "param_1": "memoryPointer"
            },
            "calling": [],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_parameter_0008160c",
            "code": "\nvoid resetParameter_0008160c(int *parameter)\n\n{\n  if (*parameter != 0) {\n    free();\n  }\n  *parameter = 0;\n  parameterIndex2 = 0;\n  parameterIndex1 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_parameter_0008160c",
                "param_1": "parameter",
                "param_1[1]": "parameterIndex1",
                "param_1[2]": "parameterIndex2"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "resize_array_00081622",
            "code": "\nint resizeArray_00081622(int *arrayPointer,int newSize,undefined4 blockSize,undefined4 alignment)\n\n{\n  int newArrayPointer;\n  \n  newArrayPointer = realloc(*arrayPointer,newSize + 1,blockSize,alignment,alignment);\n  if (newArrayPointer != 0) {\n    *arrayPointer = newArrayPointer;\n    arrayPointer[1] = newSize;\n    newArrayPointer = 1;\n  }\n  return newArrayPointer;\n}\n\n",
            "renaming": {
                "FUN_00081622": "resize_array_00081622",
                "param_1": "arrayPointer",
                "param_2": "newSize",
                "param_3": "blockSize",
                "param_4": "alignment",
                "iVar1": "newArrayPointer"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_buffer_and_reset_0008163a",
            "code": "\nundefined4 checkBufferAndReset_0008163a(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < size)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_buffer_and_reset_0008163a",
                "param_1": "buffer",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "validate_and_copy_0008165c",
            "code": "\nundefined4 * validate_and_copy_0008165c(undefined4 *output_buffer,undefined4 input_string,undefined4 buffer_size)\n\n{\n  int reservation_status;\n  \n  reservation_status = reserve(output_buffer,buffer_size);\n  if (reservation_status == 0) {\n    invalidate(output_buffer);\n  }\n  else {\n    output_buffer[2] = buffer_size;\n    strcpy(*output_buffer,input_string);\n  }\n  return output_buffer;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "validate_and_copy_0008165c",
                "param_1": "output_buffer",
                "param_2": "input_string",
                "param_3": "buffer_size",
                "iVar1": "reservation_status"
            },
            "calling": [
                "String"
            ],
            "called": [
                "invalidate",
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_data_00081682",
            "code": "\nundefined4 * initializeData_00081682(undefined4 *dataPointer,int sourceString)\n\n{\n  undefined4 sourceLength;\n  \n  *dataPointer = 0;\n  dataPointer[1] = 0;\n  dataPointer[2] = 0;\n  if (sourceString != 0) {\n    sourceLength = strlen(sourceString);\n    copy(dataPointer,sourceString,sourceLength);\n  }\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_data_00081682",
                "param_1": "dataPointer",
                "param_2": "sourceString",
                "uVar1": "sourceLength"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_system_000816a8",
            "code": "\nvoid runSystem_000816a8(void)\n\n{\n  _watchdogDefaultSetup();\n  initializeSystem();\n  initializeVariant();\n  delay(1);\n  setup();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_system_000816a8",
                "initialize_system_00080ae4": "initializeSystem",
                "initVariant": "initializeVariant",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "loop",
                "delay",
                "FUN_00080ae4",
                "setup",
                "initVariant",
                "_watchdogDefaultSetup",
                "serialEventRun"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_000816d4",
            "code": "\n\n\nvoid initializeMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_000816d4"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_data_00081714",
            "code": "\nundefined4 getGlobalData_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_data_00081714"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "perform_calculation_00081730",
            "code": "\nuint performCalculation_00081730(uint input1,uint input2,undefined4 input3,uint result)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint xorResult1;\n  uint xorResult2;\n  uint shiftedInput1;\n  uint shiftedInput2;\n  uint difference;\n  bool isEqual;\n  \n  xorResult1 = input2 ^ 0x80000000;\n  shiftedInput1 = input1 << 1;\n  isEqual = shiftedInput1 == 0;\n  if (!isEqual) {\n    result = input2 << 1;\n    isEqual = result == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedInput1 == result;\n  }\n  shiftedInput1 = (int)shiftedInput1 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)result >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      shiftedInput1 = xorResult1;\n      if (shiftedInput1 == -1) {\n        shiftedInput1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        xorResult1 = shiftedInput1;\n      }\n      isEqual = (shiftedInput1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (xorResult1 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedInput1 == xorResult1;\n      }\n      if (!isEqual) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ xorResult1) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = xorResult1;\n      }\n      return input1;\n    }\n    if (input1 != xorResult1) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      xorResult1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        xorResult1 = xorResult1 | 0x80000000;\n      }\n      return xorResult1;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  result = result >> 0x18;\n  difference = result - shiftedInput1;\n  isEqual = difference != 0;\n  shiftedInput2 = shiftedInput1;\n  if (isEqual && shiftedInput1 <= result) {\n    shiftedInput2 = shiftedInput1 + difference;\n  }\n  if (isEqual && shiftedInput1 <= result) {\n    xorResult1 = xorResult1 ^ input1;\n  }\n  if (isEqual && shiftedInput1 <= result) {\n    input1 = input1 ^ xorResult1;\n  }\n  if (isEqual && shiftedInput1 <= result) {\n    xorResult1 = xorResult1 ^ input1;\n  }\n  if (result < shiftedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  xorResult2 = xorResult1 & 0xffffff | 0x800000;\n  if ((xorResult1 & 0x80000000) != 0) {\n    xorResult2 = -xorResult2;\n  }\n  if (shiftedInput2 == difference) {\n    xorResult2 = xorResult2 ^ 0x800000;\n    if (shiftedInput2 == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      shiftedInput2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)xorResult2 >> (difference & 0xff));\n  xorResult2 = xorResult2 << (0x20 - difference & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isEqual = xorResult2 != 0;\n    xorResult2 = -xorResult2;\n    shiftedInput1 = -shiftedInput1 - (uint)isEqual;\n  }\n  if (shiftedInput1 < 0x800000) {\n    xorResult1 = xorResult2 & 0x80000000;\n    xorResult2 = xorResult2 << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(xorResult1 != 0);\n    xorResult1 = shiftedInput2 - 2;\n    if ((shiftedInput1 & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (difference & 0xff);\n      if ((int)xorResult1 < (int)difference) {\n        shiftedInput1 = shiftedInput1 >> (-(xorResult1 - difference) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (xorResult1 - difference) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    xorResult1 = shiftedInput2 - 1;\n    if (0xffffff < shiftedInput1) {\n      xorResult1 = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      xorResult2 = (uint)(xorResult1 != 0) << 0x1f | xorResult2 >> 1;\n      xorResult1 = shiftedInput2;\n      if (0xfd < shiftedInput2) goto LAB_0008186a;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + xorResult1 * 0x800000 + (uint)(0x7fffffff < xorResult2);\n  if (xorResult2 == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "perform_calculation_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "result",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "xorResult1",
                "uVar4": "xorResult2",
                "uVar5": "shiftedInput1",
                "uVar6": "shiftedInput2",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint value1,uint value2,undefined4 flags,uint result)\n\n{\n  int exponent1;\n  int exponent2;\n  uint fraction1;\n  uint fraction2;\n  uint fraction;\n  uint difference;\n  bool isEqual;\n  \n  fraction2 = value1 << 1;\n  isEqual = fraction2 == 0;\n  if (!isEqual) {\n    result = value2 << 1;\n    isEqual = result == 0;\n  }\n  if (!isEqual) {\n    isEqual = fraction2 == result;\n  }\n  exponent1 = (int)fraction2 >> 0x18;\n  if (!isEqual) {\n    isEqual = exponent1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)result >> 0x18 == -1;\n  }\n  if (isEqual) {\n    exponent2 = (int)(value2 << 1) >> 0x18;\n    if (exponent1 == -1 || exponent2 == -1) {\n      fraction2 = value2;\n      if (exponent1 == -1) {\n        fraction2 = value1;\n      }\n      if (exponent1 != -1 || exponent2 != -1) {\n        value2 = fraction2;\n      }\n      isEqual = (fraction2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (value2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = fraction2 == value2;\n      }\n      if (!isEqual) {\n        fraction2 = fraction2 | 0x400000;\n      }\n      return fraction2;\n    }\n    if (((value1 ^ value2) & 0x7fffffff) != 0) {\n      if (fraction2 == 0) {\n        value1 = value2;\n      }\n      return value1;\n    }\n    if (value1 != value2) {\n      return 0;\n    }\n    if ((fraction2 & 0xff000000) == 0) {\n      fraction2 = value1 << 1;\n      if ((value1 & 0x80000000) != 0) {\n        fraction2 = fraction2 | 0x80000000;\n      }\n      return fraction2;\n    }\n    if (fraction2 < 0xfe000000) {\n      return value1 + 0x800000;\n    }\n    value1 = value1 & 0x80000000;\nLAB_0008186a:\n    return value1 | 0x7f800000;\n  }\n  fraction2 = fraction2 >> 0x18;\n  result = result >> 0x18;\n  difference = result - fraction2;\n  isEqual = difference != 0;\n  fraction = fraction2;\n  if (isEqual && fraction2 <= result) {\n    fraction = fraction2 + difference;\n  }\n  if (isEqual && fraction2 <= result) {\n    value2 = value2 ^ value1;\n  }\n  if (isEqual && fraction2 <= result) {\n    value1 = value1 ^ value2;\n  }\n  if (isEqual && fraction2 <= result) {\n    value2 = value2 ^ value1;\n  }\n  if (result < fraction2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return value1;\n  }\n  fraction2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    fraction2 = -fraction2;\n  }\n  fraction1 = value2 & 0xffffff | 0x800000;\n  if ((value2 & 0x80000000) != 0) {\n    fraction1 = -fraction1;\n  }\n  if (fraction == difference) {\n    fraction1 = fraction1 ^ 0x800000;\n    if (fraction == 0) {\n      fraction2 = fraction2 ^ 0x800000;\n      fraction = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  fraction2 = fraction2 + ((int)fraction1 >> (difference & 0xff));\n  fraction1 = fraction1 << (0x20 - difference & 0xff);\n  value1 = fraction2 & 0x80000000;\n  if ((int)fraction2 < 0) {\n    isEqual = fraction1 != 0;\n    fraction1 = -fraction1;\n    fraction2 = -fraction2 - (uint)isEqual;\n  }\n  if (fraction2 < 0x800000) {\n    difference = fraction1 & 0x80000000;\n    fraction1 = fraction1 << 1;\n    fraction2 = fraction2 * 2 + (uint)(difference != 0);\n    difference = fraction - 2;\n    if ((fraction2 & 0x800000) == 0) {\n      fraction = LZCOUNT(fraction2) - 8;\n      fraction2 = fraction2 << (fraction & 0xff);\n      if ((int)difference < (int)fraction) {\n        fraction2 = fraction2 >> (-(difference - fraction) & 0xff);\n      }\n      else {\n        fraction2 = fraction2 + (difference - fraction) * 0x800000;\n      }\n      return fraction2 | value1;\n    }\n  }\n  else {\n    difference = fraction - 1;\n    if (0xffffff < fraction2) {\n      difference = fraction2 & 1;\n      fraction2 = fraction2 >> 1;\n      fraction1 = (uint)(difference != 0) << 0x1f | fraction1 >> 1;\n      difference = fraction;\n      if (0xfd < fraction) goto LAB_0008186a;\n    }\n  }\n  fraction2 = fraction2 + difference * 0x800000 + (uint)(0x7fffffff < fraction1);\n  if (fraction1 == 0x80000000) {\n    fraction2 = fraction2 & 0xfffffffe;\n  }\n  return fraction2 | value1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "flags",
                "param_4": "result",
                "iVar1": "exponent1",
                "iVar2": "exponent2",
                "uVar3": "fraction1",
                "uVar4": "fraction2",
                "uVar5": "fraction",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_value_00081894",
            "code": "\nuint calculateValue_00081894(uint inputValue)\n\n{\n  uint calculation1;\n  uint calculation5;\n  int constant;\n  uint additionalValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  calculation1 = LZCOUNT(inputValue);\n  calculation5 = calculation1 - 8;\n  constant = calculation5 * -0x800000 + 0x4a800000;\n  if (7 < calculation1) {\n    additionalValue = 0 << (calculation5 & 0xff);\n    calculation1 = constant + (inputValue << (calculation5 & 0xff)) +\n            (0U >> (0x20 - calculation5 & 0xff)) + (uint)(0x7fffffff < additionalValue);\n    if (additionalValue == 0x80000000) {\n      calculation1 = calculation1 & 0xfffffffe;\n    }\n    return calculation1;\n  }\n  calculation5 = inputValue << calculation1 + 0x18;\n  calculation1 = constant + ((inputValue >> (0x20 - (calculation1 + 0x18) & 0xff)) - ((int)calculation5 >> 0x1f));\n  if ((calculation5 & 0x7fffffff) == 0) {\n    calculation1 = calculation1 & ~(calculation5 >> 0x1f);\n  }\n  return calculation1;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_value_00081894",
                "param_1": "inputValue",
                "uVar1": "calculation1",
                "uVar2": "calculation5",
                "iVar3": "constant",
                "uVar4": "additionalValue"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_result_0008189c",
            "code": "\nuint calculateResult_0008189c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint isNegative;\n  int result;\n  \n  isNegative = inputValue & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftValue = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    isNegative = result + (inputValue << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftValue = inputValue << leadingZeros + 0x18;\n  isNegative = result + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftValue >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_result_0008189c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "isNegative",
                "iVar4": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "float_bitwise_operation_00081944",
            "code": "\nuint floatBitwiseOperation_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong lVar1;\n  uint result1;\n  uint input1Shifted;\n  int sumShiftedInputs;\n  int subtractedSum;\n  uint inputProduct;\n  int subtractedShiftedSum;\n  uint result2;\n  bool isZero;\n  bool isOverflow;\n  \n  input1Shifted = input1 >> 0x17 & 0xff;\n  isZero = input1Shifted == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = input1Shifted == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (input1Shifted == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result1 = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result1 = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      result2 = result1;\n      if (((isZero) || ((input1Shifted == 0xff && ((result1 & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (result2 = input2, (input2 & 0x7fffff) != 0)))) {\n        return result2 | 0x7fc00000;\n      }\n      result1 = result1 ^ input2;\n      goto LAB_00081a94;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = input1Shifted == 0;\n    result1 = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input1Shifted = input1Shifted - 1;\n    }\n    input1 = input1 | result1;\n    isZero = param4 == 0;\n    result1 = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result1;\n  }\n  sumShiftedInputs = input1Shifted + param4;\n  result2 = input1 ^ input2;\n  input1Shifted = input1 << 9;\n  isZero = input1Shifted == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (input1Shifted == 0) {\n      input2 = input2 << 9;\n    }\n    result1 = result2 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isOverflow = SBORROW4(sumShiftedInputs,0x7f);\n    subtractedSum = sumShiftedInputs + -0x7f;\n    isZero = subtractedSum == 0;\n    subtractedShiftedSum = subtractedSum;\n    if (!isZero && 0x7e < sumShiftedInputs) {\n      isOverflow = SBORROW4(0xff,subtractedSum);\n      subtractedShiftedSum = 0xff - subtractedSum;\n      isZero = subtractedSum == 0xff;\n    }\n    if (!isZero && subtractedShiftedSum < 0 == isOverflow) {\n      result1 = result1 | subtractedSum * 0x800000;\n    }\n    if (!isZero && subtractedShiftedSum < 0 == isOverflow) {\n      return result1;\n    }\n    result1 = result1 | 0x800000;\n    inputProduct = 0;\n    isOverflow = SBORROW4(subtractedSum,1);\n    result2 = sumShiftedInputs - 0x80;\n    isZero = result2 == 0;\n    input1Shifted = result2;\n  }\n  else {\n    lVar1 = (ulonglong)(input1Shifted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    inputProduct = (uint)lVar1;\n    result1 = (uint)((ulonglong)lVar1 >> 0x20);\n    isZero = result1 < 0x800000;\n    if (isZero) {\n      result1 = result1 << 1;\n    }\n    if (isZero) {\n      result1 = result1 | inputProduct >> 0x1f;\n      inputProduct = inputProduct << 1;\n    }\n    result1 = result2 & 0x80000000 | result1;\n    result2 = (sumShiftedInputs + -0x7f) - (uint)isZero;\n    isOverflow = SBORROW4(result2,0xfd);\n    isZero = result2 == 0xfd;\n    input1Shifted = result2 - 0xfd;\n    if (result2 < 0xfe) {\n      result1 = result1 + result2 * 0x800000 + (uint)(0x7fffffff < inputProduct);\n      if (inputProduct == 0x80000000) {\n        result1 = result1 & 0xfffffffe;\n      }\n      return result1;\n    }\n  }\n  if (isZero || (int)input1Shifted < 0 != isOverflow) {\n    isZero = (int)(result2 + 0x19) < 0;\n    if (result2 == 0xffffffe7 || isZero != SCARRY4(result2,0x19)) {\n      result1 = result1 & 0x80000000;\n    }\n    if (result2 != 0xffffffe7 && isZero == SCARRY4(result2,0x19)) {\n      input1Shifted = (result1 << 1) >> (-result2 & 0xff);\n      result2 = result1 << (result2 + 0x20 & 0xff);\n      input1Shifted = ((uint)((result1 & 0x80000000) != 0) << 0x1f | input1Shifted >> 1) + (uint)((byte)input1Shifted & 1);\n      if ((inputProduct | result2 << 1) == 0) {\n        input1Shifted = input1Shifted & ~(result2 >> 0x1f);\n      }\n      return input1Shifted;\n    }\n    return result1;\n  }\nLAB_00081a94:\n  return result1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "float_bitwise_operation_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result1",
                "uVar3": "input1Shifted",
                "iVar4": "sumShiftedInputs",
                "iVar5": "subtractedSum",
                "uVar6": "inputProduct",
                "iVar7": "subtractedShiftedSum",
                "uVar8": "result2",
                "bVar9": "isZero",
                "bVar10": "isOverflow"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "determine_result_00081bf4",
            "code": "\nuint determine_result_00081bf4(uint input_value_1,uint input_value_2)\n\n{\n  bool is_negative_result;\n  uint doubled_input_value_1;\n  uint doubled_input_value_2;\n  uint combined_values;\n  bool is_combined_zero;\n  \n  doubled_input_value_1 = input_value_1 * 2;\n  doubled_input_value_2 = input_value_2 * 2;\n  if (((int)doubled_input_value_1 >> 0x18 == -1 || (int)doubled_input_value_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_value_1 >> 0x18 == -1 && ((input_value_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_value_2 >> 0x18 == -1 && ((input_value_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_values = doubled_input_value_1 | input_value_2 & 0x7fffffff;\n  is_combined_zero = combined_values == 0;\n  if (!is_combined_zero) {\n    combined_values = input_value_1 ^ input_value_2;\n    is_combined_zero = combined_values == 0;\n  }\n  is_negative_result = -1 < (int)combined_values;\n  if (is_negative_result) {\n    input_value_1 = doubled_input_value_1 + input_value_2 * -2;\n    is_combined_zero = input_value_1 == 0;\n  }\n  if ((is_negative_result && doubled_input_value_2 <= doubled_input_value_1) && !is_combined_zero) {\n    input_value_1 = (int)input_value_2 >> 0x1f;\n  }\n  if (!is_negative_result || doubled_input_value_2 > doubled_input_value_1) {\n    input_value_1 = ~((int)input_value_2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input_value_1 = input_value_1 | 1;\n  }\n  return input_value_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "determine_result_00081bf4",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "bVar1": "is_negative_result",
                "uVar2": "doubled_input_value_1",
                "uVar3": "doubled_input_value_2",
                "uVar4": "combined_values",
                "bVar5": "is_combined_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "compare_floats_00081c54",
            "code": "\nvoid compareFloats_00081c54(undefined4 firstFloat,undefined4 secondFloat)\n\n{\n  __aeabi_cfcmpeq(secondFloat,firstFloat);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "firstFloat",
                "param_2": "secondFloat"
            },
            "calling": [
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_parameters_00081c5c",
            "code": "\nundefined8 concatenateParameters_00081c5c(undefined4 input1,undefined4 input2)\n\n{\n  __cmpsf2();\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_parameters_00081c5c",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmple"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "is_comparison_equal_00081c94",
            "code": "\nbool isComparisonEqual_00081c94(void)\n\n{\n  undefined comparisonResultZero;\n  undefined comparisonResultCarry;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)comparisonResultCarry || (bool)comparisonResultZero;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "is_comparison_equal_00081c94",
                "in_ZR": "comparisonResultZero",
                "in_CY": "comparisonResultCarry"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_zero_or_negative_00081ca8",
            "code": "\nbool checkZeroOrNegative_00081ca8(void)\n\n{\n  undefined isZero;\n  undefined isNegative;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isNegative || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_zero_or_negative_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "isNegative"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extract_integer_from_param_00081cd0",
            "code": "\nuint extractIntegerFromParam_00081cd0(uint inputValue_4)\n\n{\n  uint shiftedValue_2;\n  uint difference;\n  \n  if (inputValue_4 << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue_2 = (inputValue_4 << 1) >> 0x18;\n  difference = 0x9e - shiftedValue_2;\n  if (shiftedValue_2 < 0x9f && difference != 0) {\n    shiftedValue_2 = (inputValue_4 << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue_4 & 0x80000000) != 0) {\n      shiftedValue_2 = -shiftedValue_2;\n    }\n    return shiftedValue_2;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue_4 & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue_4 = inputValue_4 & 0x80000000;\n  if (inputValue_4 == 0) {\n    inputValue_4 = 0x7fffffff;\n  }\n  return inputValue_4;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extract_integer_from_param_00081cd0",
                "param_1": "inputValue_4",
                "uVar1": "shiftedValue_2",
                "uVar2": "difference"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_parameter_00081d1c",
            "code": "\nuint checkParameter_00081d1c(uint inputValue)\n\n{\n  uint result;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (inputValue << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_parameter_00081d1c",
                "param_1": "inputValue",
                "uVar1": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_table_entry_00081d5c",
            "code": "\nundefined4 updateRelocationTableEntry_00081d5c(dword newValue,dword param2,dword newValue2)\n\n{\n  dword *entry;\n  uint index;\n  uint bitMask;\n  \n  if (relocationTable[48].r_offset == 0) {\n    relocationTable[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocationTable[48].r_offset + 4);\n  entry = (dword *)relocationTable[48].r_offset;\n  if (0x1f < (int)index) {\n    entry = (dword *)malloc(400);\n    if (entry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *entry = relocationTable[48].r_offset;\n    entry[1] = 0;\n    index = 0;\n    relocationTable[48].r_offset = (dword)entry;\n    entry[0x62] = 0;\n    entry[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  entry[index + 0x22] = newValue;\n  entry[0x62] = entry[0x62] | bitMask;\n  entry[index + 0x42] = newValue2;\n  entry[99] = bitMask | entry[99];\n  entry[1] = index + 1;\n  entry[index + 2] = param2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_table_entry_00081d5c",
                "param_1": "newValue",
                "param_2": "param2",
                "param_3": "newValue2",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "pdVar1": "entry",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "initialize_and_execute_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid initialize_and_execute_00081d7c(void)\n\n{\n  int loop_count;\n  code **function_array;\n  \n  _init();\n  function_array = (code **)0x85860;\n  loop_count = 0;\n  do {\n    loop_count = loop_count + 1;\n    function_array = function_array + 1;\n    (**function_array)();\n  } while (loop_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "initialize_and_execute_00081d7c",
                "iVar1": "loop_count",
                "ppcVar2": "function_array"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "allocate_memory_00081df4",
            "code": "\nvoid allocateMemory_00081df4(undefined4 size)\n\n{\n  _malloc_r(relArray[140].offset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "param_1": "size",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "free_elf32_rel_offset_00081e04",
            "code": "\nvoid free_elf32_rel_offset_00081e04(undefined4 param)\n\n{\n  _free_r(ELF32_Rel_Array[140].offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "free_elf32_rel_offset_00081e04",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "ELF32_Rel_Array",
                "r_offset": "offset"
            },
            "calling": [
                "invalidate",
                "~String"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081e14(undefined4 *lock,uint size)\n\n{\n  dword relEntry1;\n  int temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint nextAddress;\n  dword relEntry2;\n  uint nextSize;\n  int temp7;\n  undefined *ptr1;\n  dword startRelEntry;\n  dword previousRelEntry;\n  int temp8;\n  dword *ptr2;\n  uint alignment;\n  undefined *ptr3;\n  dword *ptr4;\n  uint bucketIndex;\n  \n  if (size + 0xb < 0x17) {\n    alignment = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    alignment = size + 0xb & 0xfffffff8;\n    if (((int)alignment < 0) || (alignment < size)) {\nLAB_00081e7a:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  relEntry1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignment < 0x1f8) {\n    temp8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignment);\n    if ((temp8 != alignment + 0x20070464) ||\n       (temp1 = temp8 + 8, temp8 = *(int *)(temp8 + 0x14), temp1 != temp8)) {\n      temp4 = *(int *)(temp8 + 0xc);\n      temp7 = (*(uint *)(temp8 + 4) & 0xfffffffc) + temp8;\n      alignment = *(uint *)(temp7 + 4);\n      temp1 = *(int *)(temp8 + 8);\n      *(int *)(temp1 + 0xc) = temp4;\n      *(int *)(temp4 + 8) = temp1;\n      *(uint *)(temp7 + 4) = alignment | 1;\n      __malloc_unlock(lock);\n      return (int *)(temp8 + 8);\n    }\n    bucketIndex = (alignment >> 3) + 2;\n  }\n  else {\n    bucketIndex = alignment >> 9;\n    if (bucketIndex == 0) {\n      temp1 = 0x7e;\n      temp8 = 0x3f;\n    }\n    else if (bucketIndex < 5) {\n      temp8 = (alignment >> 6) + 0x38;\n      temp1 = temp8 * 2;\n    }\n    else if (bucketIndex < 0x15) {\n      temp8 = bucketIndex + 0x5b;\n      temp1 = temp8 * 2;\n    }\n    else if (bucketIndex < 0x55) {\n      temp8 = (alignment >> 0xc) + 0x6e;\n      temp1 = temp8 * 2;\n    }\n    else if (bucketIndex < 0x155) {\n      temp8 = (alignment >> 0xf) + 0x77;\n      temp1 = temp8 * 2;\n    }\n    else if (bucketIndex < 0x555) {\n      temp8 = (alignment >> 0x12) + 0x7c;\n      temp1 = temp8 * 2;\n    }\n    else {\n      temp1 = 0xfc;\n      temp8 = 0x7e;\n    }\n    for (relEntry2 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp1]; temp1 * 4 + 0x20070464U != relEntry2\n        ; relEntry2 = *(dword *)(relEntry2 + 0xc)) {\n      bucketIndex = *(uint *)(relEntry2 + 4) & 0xfffffffc;\n      temp4 = bucketIndex - alignment;\n      if (0xf < temp4) {\n        temp8 = temp8 + -1;\n        break;\n      }\n      if (-1 < temp4) {\n        temp1 = bucketIndex + relEntry2;\n        alignment = *(uint *)(temp1 + 4);\n        temp4 = *(int *)(relEntry2 + 0xc);\n        temp8 = *(int *)(relEntry2 + 8);\n        *(int *)(temp8 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp8;\n        *(uint *)(temp1 + 4) = alignment | 1;\n        __malloc_unlock(lock);\n        return (int *)(relEntry2 + 8);\n      }\n    }\n    bucketIndex = temp8 + 1;\n  }\n  relEntry2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp3 = temp2 & 0xfffffffc;\n    nextAddress = temp3 - alignment;\n    if (0xf < (int)nextAddress) {\n      relEntry2 = alignment + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignment | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = relEntry2;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = relEntry2;\n      *(undefined4 *)(relEntry2 + 0xc) = 0x2007046c;\n      *(undefined4 *)(relEntry2 + 8) = 0x2007046c;\n      *(uint *)(relEntry2 + 4) = nextAddress | 1;\n      *(uint *)(relEntry2 + nextAddress) = nextAddress;\n      __malloc_unlock(lock);\n      return (int *)(relEntry1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)nextAddress) {\n      *(uint *)(temp3 + relEntry1 + 4) = *(uint *)(temp3 + relEntry1 + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(relEntry1 + 8);\n    }\n    if (temp3 < 0x200) {\n      temp3 = temp2 & 0xfffffff8;\n      temp8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3);\n      relEntry2 = 1 << ((int)(temp2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relEntry1 + 8) = temp8;\n      *(uint *)(relEntry1 + 0xc) = temp3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = relEntry2;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3) = relEntry1;\n      *(dword *)(temp8 + 0xc) = relEntry1;\n    }\n    else {\n      nextAddress = temp2 >> 9;\n      if (nextAddress < 5) {\n        temp1 = (temp2 >> 6) + 0x38;\n        temp8 = temp1 * 2;\n      }\n      else if (nextAddress < 0x15) {\n        temp1 = nextAddress + 0x5b;\n        temp8 = temp1 * 2;\n      }\n      else if (nextAddress < 0x55) {\n        temp1 = (temp2 >> 0xc) + 0x6e;\n        temp8 = temp1 * 2;\n      }\n      else if (nextAddress < 0x155) {\n        temp1 = (temp2 >> 0xf) + 0x77;\n        temp8 = temp1 * 2;\n      }\n      else if (nextAddress < 0x555) {\n        temp1 = (temp2 >> 0x12) + 0x7c;\n        temp8 = temp1 * 2;\n      }\n      else {\n        temp8 = 0xfc;\n        temp1 = 0x7e;\n      }\n      relEntry2 = temp8 * 4 + 0x20070464;\n      startRelEntry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp8];\n      if (startRelEntry == relEntry2) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp1 >> 2 & 0xffU);\n        previousRelEntry = startRelEntry;\n      }\n      else {\n        do {\n          previousRelEntry = startRelEntry;\n          if ((*(uint *)(startRelEntry + 4) & 0xfffffffc) <= temp3) break;\n          startRelEntry = *(dword *)(startRelEntry + 8);\n          previousRelEntry = startRelEntry;\n        } while (relEntry2 != startRelEntry);\n        startRelEntry = *(dword *)(previousRelEntry + 0xc);\n      }\n      relEntry2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relEntry1 + 0xc) = startRelEntry;\n      *(dword *)(relEntry1 + 8) = previousRelEntry;\n      *(dword *)(startRelEntry + 8) = relEntry1;\n      *(dword *)(previousRelEntry + 0xc) = relEntry1;\n    }\n  }\n  relEntry1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp2 = 1 << ((int)bucketIndex >> 2 & 0xffU);\n  if (temp2 <= relEntry2) {\n    if ((relEntry2 & temp2) == 0) {\n      bucketIndex = bucketIndex & 0xfffffffc;\n      do {\n        temp2 = temp2 << 1;\n        bucketIndex = bucketIndex + 4;\n      } while ((relEntry2 & temp2) == 0);\n    }\n    do {\n      ptr4 = &Elf32_Rel_ARRAY_20070000[bucketIndex + 0x8c].r_info;\n      ptr2 = ptr4;\n      temp3 = bucketIndex;\n      do {\n        for (ptr1 = (undefined *)ptr2[3]; ptr2 != (dword *)ptr1;\n            ptr1 = *(undefined **)(ptr1 + 0xc)) {\n          nextAddress = *(uint *)(ptr1 + 4) & 0xfffffffc;\n          nextSize = nextAddress - alignment;\n          if (0xf < (int)nextSize) {\n            temp1 = *(int *)(ptr1 + 8);\n            temp8 = *(int *)(ptr1 + 0xc);\n            ptr3 = ptr1 + alignment;\n            *(uint *)(ptr1 + 4) = alignment | 1;\n            *(int *)(temp1 + 0xc) = temp8;\n            *(int *)(temp8 + 8) = temp1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)ptr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)ptr3;\n            *(undefined4 *)(ptr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr3 + 8) = 0x2007046c;\n            *(uint *)(ptr3 + 4) = nextSize | 1;\n            *(uint *)(ptr3 + nextSize) = nextSize;\n            __malloc_unlock(lock);\n            return (int *)(ptr1 + 8);\n          }\n          if (-1 < (int)nextSize) {\n            temp8 = *(int *)(ptr1 + 8);\n            temp1 = *(int *)(ptr1 + 0xc);\n            *(uint *)(ptr1 + nextAddress + 4) = *(uint *)(ptr1 + nextAddress + 4) | 1;\n            *(int *)(temp8 + 0xc) = temp1;\n            *(int *)(temp1 + 8) = temp8;\n            __malloc_unlock(lock);\n            return (int *)(ptr1 + 8);\n          }\n        }\n        temp3 = temp3 + 1;\n        ptr2 = ptr2 + 2;\n      } while ((temp3 & 3) != 0);\n      do {\n        nextAddress = bucketIndex & 3;\n        ptr1 = (undefined *)(ptr4 + -2);\n        bucketIndex = bucketIndex - 1;\n        if (nextAddress == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp2;\n          break;\n        }\n        ptr4 = (dword *)*ptr4;\n      } while (ptr4 == (dword *)ptr1);\n      temp2 = temp2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp2 &&\n           temp2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (bucketIndex = temp3, temp2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp2) == 0; temp2 = temp2 << 1) {\n        bucketIndex = bucketIndex + 4;\n      }\n    } while( true );\n  }\n  bucketIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignment <= bucketIndex) &&\n     (temp2 = bucketIndex - alignment, relEntry2 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp2))\n  goto LAB_0008211e;\n  temp2 = Elf32_Rel_ARRAY_20070000[141].r_info + bucketIndex;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp3 = alignment + DAT_20071190 + 0x10;\n  }\n  else {\n    temp3 = alignment + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  relEntry2 = _sbrk_r(lock,temp3);\n  if ((relEntry2 == 0xffffffff) || ((relEntry2 < temp2 && (relEntry1 != 0x20070464)))) {\n    bucketIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    relEntry2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    nextAddress = DAT_20071194 + temp3;\n    DAT_20071194 = nextAddress;\n    if ((temp2 == relEntry2) && ((temp2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 + bucketIndex | 1;\n    }\n    else {\n      startRelEntry = relEntry2;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        startRelEntry = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = nextAddress + (relEntry2 - temp2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = startRelEntry;\n      temp2 = relEntry2 & 7;\n      if (temp2 == 0) {\n        temp8 = 0x1000;\n      }\n      else {\n        relEntry2 = relEntry2 + (8 - temp2);\n        temp8 = 0x1008 - temp2;\n      }\n      temp8 = temp8 - (temp3 + relEntry2 & 0xfff);\n      temp1 = _sbrk_r(lock,temp8);\n      if (temp1 == -1) {\n        temp2 = 1;\n        temp8 = 0;\n      }\n      else {\n        temp2 = (temp1 - relEntry2) + temp8 | 1;\n      }\n      nextAddress = DAT_20071194 + temp8;\n      Elf32_Rel_ARRAY_20070000[141].r_info = relEntry2;\n      DAT_20071194 = nextAddress;\n      *(uint *)(relEntry2 + 4) = temp2;\n      if (relEntry1 != 0x20070464) {\n        if (bucketIndex < 0x10) {\n          *(undefined4 *)(relEntry2 + 4) = 1;\n          bucketIndex = 0;\n          goto LAB_00082108;\n        }\n        bucketIndex = bucketIndex - 0xc & 0xfffffff8;\n        *(uint *)(relEntry1 + 4) = bucketIndex | *(uint *)(relEntry1 + 4) & 1;\n        *(undefined4 *)(relEntry1 + bucketIndex + 4) = 5;\n        *(undefined4 *)(relEntry1 + bucketIndex + 8) = 5;\n        if (0xf < bucketIndex) {\n          _free_r(lock,relEntry1 + 8);\n          nextAddress = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < nextAddress) {\n      DAT_2007118c = nextAddress;\n    }\n    if (DAT_20071188 < nextAddress) {\n      DAT_20071188 = nextAddress;\n    }\n    bucketIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    relEntry2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  temp2 = bucketIndex - alignment;\n  if ((bucketIndex < alignment) || ((int)temp2 < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignment + relEntry2;\n  *(uint *)(relEntry2 + 4) = alignment | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp2 | 1;\n  __malloc_unlock(lock);\n  return (int *)(relEntry2 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "lock",
                "param_2": "size",
                "dVar1": "relEntry1",
                "iVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "nextAddress",
                "dVar7": "relEntry2",
                "uVar8": "nextSize",
                "iVar9": "temp7",
                "puVar10": "ptr1",
                "dVar11": "startRelEntry",
                "dVar12": "previousRelEntry",
                "iVar13": "temp8",
                "pdVar14": "ptr2",
                "uVar15": "alignment",
                "puVar16": "ptr3",
                "pdVar17": "ptr4",
                "uVar18": "bucketIndex"
            },
            "calling": [
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r",
                "malloc"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destEnd;\n  undefined4 *srcPtr;\n  uint remainingLength;\n  uint copyLength;\n  bool isCopyPossible;\n  \n  destEnd = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      copyLength = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          srcPtr = destEnd;\n          isCopyPossible = copyLength != 0;\n          copyLength = copyLength - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destEnd = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isCopyPossible);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copyLength = 4 - ((uint)destination & 3);\n      length = length - copyLength;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destEnd = destPtr;\n      source = srcPtr;\n      if ((copyLength & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destEnd = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destEnd = *source;\n    destEnd[1] = source[1];\n    destEnd[2] = source[2];\n    destEnd[3] = source[3];\n    destEnd[4] = source[4];\n    destEnd[5] = source[5];\n    destEnd[6] = source[6];\n    destEnd[7] = source[7];\n    destEnd[8] = source[8];\n    destEnd[9] = source[9];\n    destEnd[10] = source[10];\n    destEnd[0xb] = source[0xb];\n    destEnd[0xc] = source[0xc];\n    destEnd[0xd] = source[0xd];\n    destEnd[0xe] = source[0xe];\n    destEnd[0xf] = source[0xf];\n    destEnd = destEnd + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destEnd = *source;\n      destEnd[1] = source[1];\n      destEnd[2] = source[2];\n      destEnd[3] = source[3];\n      destEnd = destEnd + 4;\n      source = source + 4;\n      isCopyPossible = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (isCopyPossible);\n  }\n  copyLength = remainingLength + 0xc;\n  srcPtr = destEnd;\n  destPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      isCopyPossible = 3 < copyLength;\n      copyLength = copyLength - 4;\n      destEnd = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (isCopyPossible);\n  }\nLAB_000823d0:\n  if (copyLength + 4 != 0) {\n    destPtr = destEnd;\n    srcPtr = source;\n    if ((copyLength & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destEnd + 1);\n      *(undefined *)destEnd = *(undefined *)source;\n    }\n    if ((copyLength + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "destEnd",
                "puVar3": "srcPtr",
                "uVar4": "remainingLength",
                "uVar5": "copyLength",
                "bVar6": "isCopyPossible"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_and_reverse_00082438",
            "code": "\nvoid copyAndReverse_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *destEndPtr;\n  uint tempSize;\n  undefined *tempPtr;\n  uint remainderSize;\n  \n  if ((src < dest) && (destEndPtr = (undefined4 *)((int)src + size), dest < destEndPtr)) {\n    tempPtr = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        destEndPtr = (undefined4 *)((int)destEndPtr + -1);\n        index = index + -1;\n        tempPtr = tempPtr + -1;\n        *tempPtr = *(undefined *)destEndPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    destEndPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = destEndPtr + 4;\n      *destEndPtr = *srcPtr;\n      destEndPtr[1] = srcPtr[1];\n      destEndPtr[2] = srcPtr[2];\n      destEndPtr[3] = srcPtr[3];\n      destEndPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainderSize = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    tempSize = remainderSize;\n    destEndPtr = dest;\n    srcPtr = src;\n    if (3 < remainderSize) {\n      do {\n        tempSize = tempSize - 4;\n        *destEndPtr = *srcPtr;\n        destEndPtr = destEndPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempSize);\n      index = (remainderSize - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainderSize = size & 3;\n    }\n    size = remainderSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  destEndPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)destEndPtr + 1);\n    *(undefined *)destEndPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    destEndPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_and_reverse_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "destEndPtr",
                "uVar5": "tempSize",
                "puVar6": "tempPtr",
                "uVar7": "remainderSize"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "clear_memory_00082504",
            "code": "\nvoid clearMemory_00082504(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  undefined4 fillValue;\n  uint remainingSize;\n  bool isSizeZero;\n  \n  if (((uint)destination & 3) != 0) {\n    isSizeZero = size == 0;\n    destPtr = destination;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)destination & 3) == 0) break;\n      isSizeZero = size == 0;\n      destPtr = destination;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fillValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    destPtr = destination;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *destPtr = fillValue;\n        destPtr[1] = fillValue;\n        destPtr[2] = fillValue;\n        destPtr[3] = fillValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      destPtr = destination;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *destination = fillValue;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)destPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    destPtr = destination;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "clear_memory_00082504",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "fillValue",
                "uVar4": "remainingSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "resize_relocation_table_000825a0",
            "code": "\nvoid resizeRelocationTable_000825a0(undefined4 relocationTable,undefined4 newSize)\n\n{\n  resizeMemoryBlock(relocationTableArray[140].r_offset,relocationTable,newSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "resize_relocation_table_000825a0",
                "param_1": "relocationTable",
                "param_2": "newSize",
                "_realloc_r": "resizeMemoryBlock",
                "Elf32_Rel_ARRAY_20070000": "relocationTableArray"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_000825b0",
            "code": "\nint * allocateMemory_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  dword temp1;\n  int *result;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp6;\n  uint temp7;\n  uint temp8;\n  int *temp9;\n  \n  if (param_2 == (int *)0x0) {\n    result = (int *)_malloc_r(param_1,param_3);\n    return result;\n  }\n  __malloc_lock();\n  temp4 = param_2[-1];\n  temp7 = temp4 & 0xfffffffc;\n  result = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    temp8 = 0x10;\n  }\n  else {\n    temp8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)temp8 < 0) goto LAB_0008267c;\n  }\n  if (temp8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp7 < (int)temp8) {\n    temp1 = (int)result + temp7;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp1) {\n      temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(temp8 + 0x10) <= (int)(temp2 + temp7)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)result + temp8;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + temp7) - temp8 | 1;\n        param_2[-1] = temp8 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)temp8 <= (int)(temp2 + temp7)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp2 + temp7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp9 = (int *)((int)result - param_2[-2]);\n      temp4 = (temp9[1] & 0xfffffffcU) + temp7;\n      if (temp1 != 0) {\n        if (temp1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(temp8 + 0x10) <= (int)(temp2 + temp4)) {\n            result = temp9 + 2;\n            temp3 = *result;\n            temp5 = temp9[3];\n            temp7 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (temp7 < 0x25) {\n              temp6 = result;\n              if (0x13 < temp7) {\n                temp9[2] = *param_2;\n                temp9[3] = param_2[1];\n                if (temp7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  temp6 = temp9 + 4;\n                }\n                else {\n                  temp9[4] = param_2[2];\n                  temp9[5] = param_2[3];\n                  if (temp7 == 0x24) {\n                    temp9[6] = param_2[4];\n                    temp6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    temp9[7] = *temp6;\n                    temp6 = temp9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    temp6 = temp9 + 6;\n                  }\n                }\n              }\n              *temp6 = *param_2;\n              temp6[1] = param_2[1];\n              temp6[2] = param_2[2];\n            }\n            else {\n              memmove(result,param_2);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp9 + temp8;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + temp4) - temp8 | 1;\n            temp9[1] = temp8 | temp9[1] & 1U;\n            __malloc_unlock(param_1);\n            return result;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)temp8 <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp6 = temp9 + 2;\n            temp3 = *temp6;\n            temp5 = temp9[3];\n            temp4 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp7 = temp2;\n            if (temp4 < 0x25) {\n              result = temp6;\n              if (0x13 < temp4) {\n                temp9[2] = *param_2;\n                temp9[3] = param_2[1];\n                if (temp4 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  result = temp9 + 4;\n                }\n                else {\n                  temp9[4] = param_2[2];\n                  temp9[5] = param_2[3];\n                  if (temp4 == 0x24) {\n                    temp9[6] = param_2[4];\n                    result = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    temp9[7] = *result;\n                    result = temp9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    result = temp9 + 6;\n                  }\n                }\n              }\n              *result = *param_2;\n              result[1] = param_2[1];\n              result[2] = param_2[2];\n              temp4 = temp9[1];\n              result = temp9;\n              param_2 = temp6;\n            }\n            else {\n              memmove(temp6,param_2);\n              temp4 = temp9[1];\n              result = temp9;\n              param_2 = temp6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)temp8 <= (int)temp4) {\n        temp6 = temp9 + 2;\n        temp3 = *temp6;\n        temp5 = temp9[3];\n        temp2 = temp7 - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp4;\n        if (temp2 < 0x25) {\n          result = temp6;\n          if (0x13 < temp2) {\n            temp9[2] = *param_2;\n            temp9[3] = param_2[1];\n            if (temp2 < 0x1c) {\n              param_2 = param_2 + 2;\n              result = temp9 + 4;\n            }\n            else {\n              temp9[4] = param_2[2];\n              temp9[5] = param_2[3];\n              if (temp2 == 0x24) {\n                temp9[6] = param_2[4];\n                result = param_2 + 5;\n                param_2 = param_2 + 6;\n                temp9[7] = *result;\n                result = temp9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                result = temp9 + 6;\n              }\n            }\n          }\n          *result = *param_2;\n          result[1] = param_2[1];\n          result[2] = param_2[2];\n          temp4 = temp9[1];\n          result = temp9;\n          param_2 = temp6;\n        }\n        else {\n          memmove(temp6,param_2);\n          temp4 = temp9[1];\n          result = temp9;\n          param_2 = temp6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp9 = (int *)_malloc_r(param_1,param_3);\n    if (temp9 == (int *)0x0) goto LAB_000826a4;\n    temp4 = param_2[-1];\n    if (temp9 + -2 != (int *)((temp4 & 0xfffffffe) + (int)result)) {\n      temp7 = temp7 - 4;\n      if (temp7 < 0x25) {\n        result = param_2;\n        temp6 = temp9;\n        if (0x13 < temp7) {\n          *temp9 = *param_2;\n          temp9[1] = param_2[1];\n          if (temp7 < 0x1c) {\n            result = param_2 + 2;\n            temp6 = temp9 + 2;\n          }\n          else {\n            temp9[2] = param_2[2];\n            temp9[3] = param_2[3];\n            if (temp7 == 0x24) {\n              temp9[4] = param_2[4];\n              temp9[5] = param_2[5];\n              result = param_2 + 6;\n              temp6 = temp9 + 6;\n            }\n            else {\n              result = param_2 + 4;\n              temp6 = temp9 + 4;\n            }\n          }\n        }\n        *temp6 = *result;\n        temp6[1] = result[1];\n        temp6[2] = result[2];\n      }\n      else {\n        memmove(temp9,param_2);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    temp7 = temp7 + (temp9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = temp7 - temp8;\n  temp9 = param_2;\n  if (temp2 < 0x10) {\n    result[1] = temp4 & 1 | temp7;\n    *(uint *)((int)result + temp7 + 4) = *(uint *)((int)result + temp7 + 4) | 1;\n  }\n  else {\n    result[1] = temp4 & 1 | temp8;\n    *(uint *)((int)result + temp8 + 4) = temp2 | 1;\n    *(uint *)((int)result + temp2 + temp8 + 4) = *(uint *)((int)result + temp2 + temp8 + 4) | 1;\n    _free_r(param_1,(int)result + temp8 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_1);\n  return temp9;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_000825b0",
                "dVar1": "temp1",
                "piVar2": "result",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "piVar10": "temp9"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "memmove",
                "__malloc_lock",
                "__malloc_unlock",
                "_free_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "allocate_memory_00082970",
            "code": "\nvoid allocateMemory_00082970(int *outputPointer,undefined4 size)\n\n{\n  int allocatedAddress;\n  \n  DAT_200711bc = 0;\n  allocatedAddress = _sbrk(size);\n  if ((allocatedAddress == -1) && (DAT_200711bc != 0)) {\n    *outputPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocatedAddress"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_check_00082994",
            "code": "\nvoid copyStringWithAlignmentCheck_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *sourcePtr;\n  uint *alignedSourcePtr;\n  uint currentWord;\n  uint rotatedWord;\n  uint *destinationPtr;\n  bool isAligned;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    alignedSourcePtr = source;\n    if (((uint)source & 1) != 0) {\n      alignedSourcePtr = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = alignedSourcePtr;\n    if (((uint)alignedSourcePtr & 2) != 0) {\n      source = (uint *)((int)alignedSourcePtr + 2);\n      currentShort = *(ushort *)alignedSourcePtr;\n      isAligned = (currentShort & 0xff) == 0;\n      if (isAligned) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isAligned = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isAligned) {\n        return;\n      }\n    }\n  }\n  currentWord = *source;\n  alignedSourcePtr = source + 1;\n  destinationPtr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_000829f8;\n    destinationPtr = destination + 1;\n    *destination = currentWord;\n    alignedSourcePtr = source + 2;\n    currentWord = source[1];\n  }\n  while( true ) {\n    sourcePtr = alignedSourcePtr + 1;\n    rotatedWord = *alignedSourcePtr;\n    destination = destinationPtr;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    destination = destinationPtr + 1;\n    *destinationPtr = currentWord;\n    currentWord = rotatedWord;\n    if ((rotatedWord + 0xfefefeff & ~rotatedWord & 0x80808080) != 0) break;\n    alignedSourcePtr = alignedSourcePtr + 2;\n    currentWord = *sourcePtr;\n    destinationPtr = destinationPtr + 2;\n    *destination = rotatedWord;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentWord;\n    rotatedWord = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (rotatedWord != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "sourcePtr",
                "puVar4": "alignedSourcePtr",
                "uVar5": "currentWord",
                "uVar6": "rotatedWord",
                "puVar7": "destinationPtr",
                "bVar8": "isAligned"
            },
            "calling": [
                "copy"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "find_first_nonzero_byte_index_00082a50",
            "code": "\nint find_first_nonzero_byte_index_00082a50(uint input)\n\n{\n  int index;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  index = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((index + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    index = index + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    index = index + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    index = index + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    index = index + 1;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "find_first_nonzero_byte_index_00082a50",
                "param_1": "input",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "write_data_to_file_00082ac0",
            "code": "\nint writeDataToFile_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *ptrData;\n  int result;\n  int *ptrRemaining;\n  uint writeResult;\n  undefined4 *ptrNext;\n  uint dataLength;\n  uint numIterations;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = __sfvwrite_r();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  ptrRemaining = param3[2];\n  ptrData = *param3;\n  while (ptrRemaining != (int *)0x0) {\n    dataLength = ptrData[1];\n    numIterations = dataLength >> 2;\n    if (numIterations != 0) {\n      ptrNext = (undefined4 *)(*ptrData + -4);\n      writeResult = 0;\n      do {\n        ptrNext = ptrNext + 1;\n        result = _fputwc_r(param1,*ptrNext,param2);\n        writeResult = writeResult + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (numIterations != writeResult);\n      ptrRemaining = param3[2];\n    }\n    ptrRemaining = (int *)((int)ptrRemaining - (dataLength & 0xfffffffc));\n    param3[2] = ptrRemaining;\n    ptrData = ptrData + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "write_data_to_file_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "ptrData",
                "iVar2": "result",
                "piVar3": "ptrRemaining",
                "uVar4": "writeResult",
                "puVar5": "ptrNext",
                "uVar6": "dataLength",
                "uVar7": "numIterations"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "print_formatted_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint printFormattedString_00082b38(int buffer,int format,int *******args,int **argsPtr)\n\n{\n  bool isLeftJustified;\n  bool isZeroPadded;\n  bool isAlternateForm;\n  char numericFormatCode;\n  bool hasSpacePrefix;\n  int ********argBuffer;\n  int *argValue;\n  int result;\n  char leadingChar;\n  int *******currentSpecifier;\n  uint digitValue;\n  int **formatArg;\n  uint formatFlags;\n  uint nextByte;\n  int argIndex;\n  int ********specifierBuffer;\n  int numArgsProcessed;\n  int *******remainingSpecifier;\n  int *tempPointer1;\n  int *******starArgValue;\n  uint argWidth;\n  int *piVar22;\n  int *******remainingSpecifier;\n  undefined4 tempValue1;\n  int ********tempBuffer;\n  bool isNegative;\n  longlong numericValue;\n  int *******bufferLength;\n  int *******specifierLength;\n  int **argPointers;\n  int numCharsWritten;\n  char *hexCharacters;\n  char currentChar;\n  undefined leadingZero;\n  undefined prefixSign;\n  int ********currentSpecifierBuffer;\n  int numSpecifiers;\n  int *******specifierBuffers;\n  undefined tempBuffer;\n  char singleCharBuffer;\n  undefined alignmentBuffer;\n  undefined pointerBuffer [4];\n  int *******specifierBuffers [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  formatFlags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    formatFlags = formatFlags | 0x2000;\n    *(short *)(format + 0xc) = (short)formatFlags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(formatFlags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((formatFlags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = __swsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = __sbprintf(buffer,format,args,argsPtr);\n    return result;\n  }\nLAB_00082b8a:\n  hexCharacters = (char *)0x0;\n  specifierBuffers = (int *******)0x0;\n  numSpecifiers = 0;\n  numCharsWritten = 0;\n  argBuffer = (int ********)pointerBuffer;\n  argPointers = argsPtr;\n  currentSpecifierBuffer = (int ********)pointerBuffer;\nLAB_00082b9e:\n  currentSpecifier = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      currentSpecifier = (int *******)((int)currentSpecifier + 1);\n      if (*(char *)currentSpecifier == '\\0') break;\n    } while (*(char *)currentSpecifier != '%');\n    starArgValue = (int *******)((int)currentSpecifier - (int)args);\n    if (starArgValue != (int *******)0x0) {\n      numSpecifiers = numSpecifiers + 1;\n      specifierBuffers = (int *******)((int)specifierBuffers + (int)starArgValue);\n      *argBuffer = args;\n      argBuffer[1] = starArgValue;\n      if (numSpecifiers < 8) {\n        argBuffer = argBuffer + 2;\n      }\n      else {\n        if (specifierBuffers == (int *******)0x0) {\n          numCharsWritten = numCharsWritten + (int)starArgValue;\n          numSpecifiers = 0;\n          argBuffer = (int ********)pointerBuffer;\n          goto LAB_00082bee;\n        }\n        result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n        argBuffer = (int ********)pointerBuffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      numCharsWritten = numCharsWritten + (int)starArgValue;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)currentSpecifier != '\\0') {\n    currentChar = '\\0';\n    nextByte = (uint)*(byte *)((int)currentSpecifier + 1);\n    formatFlags = 0;\n    hasSpacePrefix = false;\n    isZeroPadded = false;\n    isLeftJustified = false;\n    isAlternateForm = false;\n    isNegative = false;\n    starArgValue = (int *******)0x0;\n    specifierLength = (int *******)0xffffffff;\n    args = (int *******)((int)currentSpecifier + 1);\nLAB_00082c12:\n    args = (int *******)((int)args + 1);\nLAB_00082c16:\n    switch(nextByte) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (nextByte != 0) {\n        bufferLength = (int *******)0x1;\n        specifierLength = (int *******)0x1;\n        tempBuffer = (int ********)&tempBuffer;\n        tempBuffer = (char)nextByte;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isAlternateForm = true;\n      nextByte = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2a:\n      starArgValue = (int *******)*argPointers;\n      argPointers = argPointers + 1;\n      if ((int)starArgValue < 0) {\n        starArgValue = (int *******)-(int)starArgValue;\n        goto switchD_00082c20_caseD_2d;\n      }\n      nextByte = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2b:\n      nextByte = (uint)*(byte *)args;\n      currentChar = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      formatFlags = formatFlags | 4;\n      nextByte = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2e:\n      nextByte = (uint)*(byte *)args;\n      currentSpecifier = (int *******)((int)args + 1);\n      if (nextByte == 0x2a) {\n        nextByte = (uint)*(byte *)((int)args + 1);\n        specifierLength = (int *******)*argPointers;\n        argPointers = argPointers + 1;\n        args = currentSpecifier;\n        if ((int)specifierLength < 0) {\n          specifierLength = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digitValue = nextByte - 0x30;\n      if (digitValue < 10) {\n        argWidth = 0;\n        do {\n          args = (int *******)((int)currentSpecifier + 1);\n          nextByte = (uint)*(byte *)currentSpecifier;\n          argWidth = digitValue + argWidth * 10;\n          digitValue = nextByte - 0x30;\n          currentSpecifier = args;\n        } while (digitValue < 10);\n        specifierLength = (int *******)(argWidth | (int)argWidth >> 0x1f);\n      }\n      else {\n        specifierLength = (int *******)0x0;\n        args = currentSpecifier;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      formatFlags = formatFlags | 0x80;\n      nextByte = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isZeroPadded = true;\n      if (isLeftJustified == false) goto LAB_00083028;\nLAB_00082e98:\n      argPointers = (int **)((int)argPointers + 7U & 0xfffffff8);\n      tempPointer1 = *argPointers;\n      piVar22 = argPointers[1];\n      argPointers = argPointers + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isZeroPadded = true;\n      if (isLeftJustified != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isZeroPadded << 4;\n      argIndex = (uint)isLeftJustified << 5;\n      if ((isZeroPadded == 0) && (argIndex = (uint)isNegative << 6, isNegative != 0)) {\n        tempPointer1 = (int *)(uint)*(ushort *)argPointers;\n        argPointers = argPointers + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        result = argIndex;\n        tempPointer1 = *argPointers;\n        argPointers = argPointers + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isZeroPadded = true;\n      if (isLeftJustified != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isZeroPadded) || (isNegative == false)) {\n        result = 1;\n        tempPointer1 = *argPointers;\n        argPointers = argPointers + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        tempPointer1 = (int *)(uint)*(ushort *)argPointers;\n        argPointers = argPointers + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexCharacters = \"0123456789ABCDEF\";\n      if (isLeftJustified == false) goto LAB_00083196;\nLAB_00082fb6:\n      formatArg = (int **)((int)argPointers + 7U & 0xfffffff8);\n      argPointers = formatArg + 2;\n      tempPointer1 = *formatArg;\n      piVar22 = formatArg[1];\n      goto LAB_00082fca;\n    case 99:\n      tempPointer1 = *argPointers;\n      argPointers = argPointers + 1;\n      bufferLength = (int *******)0x1;\n      tempBuffer = SUB41(tempPointer1,0);\n      specifierLength = (int *******)0x1;\n      tempBuffer = (int ********)&tempBuffer;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLeftJustified != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isZeroPadded == false) && (isNegative != false)) {\n        tempPointer1 = (int *)(int)*(short *)argPointers;\n        argPointers = argPointers + 1;\n        piVar22 = (int *)((int)tempPointer1 >> 0x1f);\n      }\n      else {\n        tempPointer1 = *argPointers;\n        argPointers = argPointers + 1;\n        piVar22 = (int *)((int)tempPointer1 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        isNegative = tempPointer1 != (int *)0x0;\n        tempPointer1 = (int *)-(int)tempPointer1;\n        piVar22 = (int *)(-(int)piVar22 - (uint)isNegative);\n        currentChar = '-';\n        numericFormatCode = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)specifierLength) {\n        formatFlags = formatFlags & 0xffffff7f;\n      }\n      hasSpacePrefix = false;\n      nextByte = (uint)tempPointer1 | (uint)piVar22;\n      result = 1;\n      numericFormatCode = currentChar;\n      goto joined_r0x00082d78;\n    case 0x68:\n      isNegative = true;\n      nextByte = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x6c:\n      nextByte = (uint)*(byte *)args;\n      if (nextByte == 0x6c) {\n        isLeftJustified = true;\n        nextByte = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        isZeroPadded = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLeftJustified == false) {\n        if (isZeroPadded == false) {\n          if (isNegative) {\n            tempPointer1 = *argPointers;\n            argPointers = argPointers + 1;\n            *(short *)tempPointer1 = (short)numCharsWritten;\n          }\n          else {\n            tempPointer1 = *argPointers;\n            argPointers = argPointers + 1;\n            *tempPointer1 = numCharsWritten;\n          }\n        }\n        else {\n          tempPointer1 = *argPointers;\n          argPointers = argPointers + 1;\n          *tempPointer1 = numCharsWritten;\n        }\n      }\n      else {\n        tempPointer1 = *argPointers;\n        argPointers = argPointers + 1;\n        *tempPointer1 = numCharsWritten;\n        tempPointer1[1] = numCharsWritten >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLeftJustified == false) goto LAB_00082f2a;\nLAB_00082d42:\n      formatArg = (int **)((int)argPointers + 7U & 0xfffffff8);\n      argPointers = formatArg + 2;\n      tempPointer1 = *formatArg;\n      piVar22 = formatArg[1];\n      result = 0;\n      break;\n    case 0x70:\n      tempPointer1 = *argPointers;\n      argPointers = argPointers + 1;\n      prefixSign = 0x78;\n      hasSpacePrefix = true;\n      piVar22 = (int *)0x0;\n      leadingZero = 0x30;\n      hexCharacters = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLeftJustified = true;\n      nextByte = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x73:\n      tempBuffer = (int ********)*argPointers;\n      currentChar = '\\0';\n      argPointers = argPointers + 1;\n      if (tempBuffer != (int ********)0x0) {\n        if ((int)specifierLength < 0) {\n          specifierLength = (int *******)strlen(tempBuffer);\n          currentSpecifier = (int *******)0x0;\n          numericFormatCode = currentChar;\n        }\n        else {\n          result = memchr(tempBuffer,0,specifierLength);\n          numericFormatCode = currentChar;\n          if (result == 0) {\n            currentSpecifier = (int *******)0x0;\n          }\n          else {\n            remainingSpecifier = (int *******)(result - (int)tempBuffer);\n            if ((int)specifierLength <= (int)(int *******)(result - (int)tempBuffer)) {\n              remainingSpecifier = specifierLength;\n            }\n            currentSpecifier = (int *******)0x0;\n            specifierLength = remainingSpecifier;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < specifierLength) {\n        specifierLength = (int *******)0x6;\n      }\n      bufferLength = (int *******)((uint)specifierLength & ~((int)specifierLength >> 0x1f));\n      tempBuffer = (int ********)&UNK_00085840;\nLAB_00083012:\n      currentChar = '\\0';\n      currentSpecifier = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLeftJustified) goto LAB_00082f7c;\nLAB_00082e62:\n      formatArg = (int **)((int)argPointers + 7U & 0xfffffff8);\n      argPointers = formatArg + 2;\n      tempPointer1 = *formatArg;\n      piVar22 = formatArg[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexCharacters = \"0123456789abcdef\";\n      if (isLeftJustified != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isZeroPadded == false) && (isNegative != false)) {\n        piVar22 = (int *)0x0;\n        tempPointer1 = (int *)(uint)*(ushort *)argPointers;\n        argPointers = argPointers + 1;\n      }\n      else {\n        tempPointer1 = *argPointers;\n        argPointers = argPointers + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isAlternateForm) && (((uint)tempPointer1 | (uint)piVar22) != 0)) {\n        hasSpacePrefix = true;\n        leadingZero = 0x30;\n        result = 2;\n        prefixSign = (char)nextByte;\n      }\n      else {\n        result = 2;\n      }\n    }\n    currentChar = '\\0';\n    numericFormatCode = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)specifierLength) {\n      formatFlags = formatFlags & 0xffffff7f;\n    }\n    nextByte = (uint)tempPointer1 | (uint)piVar22;\njoined_r0x00082d78:\n    numericValue = CONCAT44(piVar22,tempPointer1);\n    currentSpecifier = specifierLength;\n    if ((nextByte == 0) && (specifierLength == (int *******)0x0)) {\n      tempBuffer = (int ********)pointerBuffer;\n      if ((result != 0) || (!isAlternateForm)) goto LAB_00082da0;\n      tempBuffer = (int ********)(&singleCharBuffer + 1);\n      alignmentBuffer = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < tempPointer1) {\n        specifierBuffer = (int ********)(&singleCharBuffer + 1);\n        do {\n          tempBuffer = specifierBuffer;\n          tempValue1 = (undefined4)((ulonglong)numericValue >> 0x20);\n          leadingChar = '\\n';\n          __aeabi_uldivmod((int)numericValue,tempValue1,10,0);\n          *(char *)tempBuffer = leadingChar + '0';\n          numericValue = __aeabi_uldivmod((int)numericValue,tempValue1,10,0);\n          specifierBuffer = (int ********)((int)tempBuffer + -1);\n        } while (numericValue != 0);\n        specifierLength = (int *******)((int)pointerBuffer - (int)tempBuffer);\n        goto LAB_00082da0;\n      }\n      alignmentBuffer = (char)tempPointer1 + '0';\n      tempBuffer = (int ********)(&singleCharBuffer + 1);\n      goto LAB_0008351e;\n    }\n    specifierBuffer = (int ********)(&singleCharBuffer + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      tempBuffer = specifierBuffer;\n      nextByte = (uint)tempPointer1 & 0xf;\n      tempPointer1 = (int *)((uint)tempPointer1 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)tempBuffer = hexCharacters[nextByte];\n      specifierBuffer = (int ********)((int)tempBuffer + -1);\n    } while (((uint)tempPointer1 | (uint)piVar22) != 0);\n    specifierLength = (int *******)((int)pointerBuffer - (int)tempBuffer);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (specifierBuffers != (int *******)0x0) {\n    __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return numCharsWritten;\nLAB_0008337e:\n  do {\n    tempBuffer = specifierBuffer;\n    argValue = (int *)((uint)tempPointer1 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    result = ((uint)tempPointer1 & 7) + 0x30;\n    *(char *)tempBuffer = (char)result;\n    specifierBuffer = (int ********)((int)tempBuffer + -1);\n    tempPointer1 = argValue;\n  } while (((uint)argValue | (uint)piVar22) != 0);\n  if (isAlternateForm) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      specifierLength = (int *******)((int)pointerBuffer - (int)tempBuffer);\n    }\n    else {\n      *(undefined *)((int)tempBuffer + -1) = 0x30;\n      tempBuffer = specifierBuffer;\n      specifierLength = (int *******)((int)pointerBuffer - (int)specifierBuffer);\n    }\n  }\n  else {\nLAB_0008351e:\n    specifierLength = (int *******)((int)pointerBuffer - (int)tempBuffer);\n  }\nLAB_00082da0:\n  bufferLength = specifierLength;\n  if ((int)specifierLength < (int)currentSpecifier) {\n    bufferLength = currentSpecifier;\n  }\n  if (numericFormatCode != '\\0') {\n    bufferLength = (int *******)((int)bufferLength + 1);\n  }\nLAB_00082dba:\n  if (hasSpacePrefix) {\n    bufferLength = (int *******)((int)bufferLength + 2);\n  }\n  if ((formatFlags == 0) &&\n     (remainingSpecifier = (int *******)((int)starArgValue - (int)bufferLength), 0 < (int)remainingSpecifier)) {\n    if ((int)remainingSpecifier < 0x11) {\n      numSpecifiers = numSpecifiers + 1;\n    }\n    else {\n      do {\n        remainingSpecifier = remainingSpecifier;\n        result = numSpecifiers + 1;\n        specifierBuffers = specifierBuffers + 4;\n        *argBuffer = (int *******)0x85808;\n        argBuffer[1] = (int *******)0x10;\n        if (result < 8) {\n          argIndex = numSpecifiers + 2;\n          argBuffer = argBuffer + 2;\n          numSpecifiers = result;\n        }\n        else if (specifierBuffers == (int *******)0x0) {\n          argIndex = 1;\n          argBuffer = (int ********)pointerBuffer;\n          numSpecifiers = 0;\n        }\n        else {\n          numSpecifiers = result;\n          result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n          if (result != 0) goto LAB_000833de;\n          argIndex = numSpecifiers + 1;\n          argBuffer = (int ********)pointerBuffer;\n        }\n        remainingSpecifier = remainingSpecifier + -4;\n      } while (0x10 < (int)remainingSpecifier);\n      remainingSpecifier = remainingSpecifier + -4;\n      numSpecifiers = argIndex;\n    }\n    specifierBuffers = (int *******)((int)specifierBuffers + (int)remainingSpecifier);\n    *argBuffer = (int *******)0x85808;\n    argBuffer[1] = remainingSpecifier;\n    if (numSpecifiers < 8) {\n      result = numSpecifiers + 1;\n      argBuffer = argBuffer + 2;\n    }\n    else if (specifierBuffers == (int *******)0x0) {\n      result = 1;\n      numSpecifiers = 0;\n      argBuffer = (int ********)pointerBuffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n      if (result != 0) goto LAB_000833de;\n      result = numSpecifiers + 1;\n      argBuffer = (int ********)pointerBuffer;\n    }\n  }\n  else {\n    result = numSpecifiers + 1;\n  }\n  argIndex = result;\n  if (currentChar != '\\0') {\n    specifierBuffers = (int *******)((int)specifierBuffers + 1);\n    argIndex = 1;\n    *argBuffer = (int *******)&currentChar;\n    argBuffer[1] = (int *******)0x1;\n    numSpecifiers = result;\n    if (result < 8) {\n      argIndex = result + 1;\n      argBuffer = argBuffer + 2;\n    }\n    else if (specifierBuffers == (int *******)0x0) {\n      numSpecifiers = 0;\n      argBuffer = (int ********)pointerBuffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n      if (result != 0) goto LAB_000833de;\n      argIndex = numSpecifiers + 1;\n      argBuffer = (int ********)pointerBuffer;\n    }\n  }\n  result = argIndex;\n  numArgsProcessed = numSpecifiers;\n  if (hasSpacePrefix) {\n    specifierBuffers = (int *******)((int)specifierBuffers + 2);\n    *argBuffer = (int *******)&leadingZero;\n    argBuffer[1] = (int *******)0x2;\n    if (argIndex < 8) {\n      result = argIndex + 1;\n      numArgsProcessed = argIndex;\n      argBuffer = argBuffer + 2;\n    }\n    else if (specifierBuffers == (int *******)0x0) {\n      result = 1;\n      numArgsProcessed = 0;\n      argBuffer = (int ********)pointerBuffer;\n    }\n    else {\n      numSpecifiers = argIndex;\n      result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n      if (result != 0) goto LAB_000833de;\n      result = numSpecifiers + 1;\n      numArgsProcessed = numSpecifiers;\n      argBuffer = (int ********)pointerBuffer;\n    }\n  }\n  numSpecifiers = numArgsProcessed;\n  if ((formatFlags == 0x80) &&\n     (remainingSpecifier = (int *******)((int)starArgValue - (int)bufferLength), 0 < (int)remainingSpecifier)) {\n    if (0x10 < (int)remainingSpecifier) {\n      do {\n        while( true ) {\n          remainingSpecifier = remainingSpecifier;\n          numSpecifiers = numArgsProcessed + 1;\n          specifierBuffers = specifierBuffers + 4;\n          *argBuffer = (int *******)&DAT_00085848;\n          argBuffer[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          result = numArgsProcessed + 2;\n          argBuffer = argBuffer + 2;\nLAB_0008348e:\n          numArgsProcessed = numSpecifiers;\n          remainingSpecifier = remainingSpecifier + -4;\n          if ((int)(remainingSpecifier + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (specifierBuffers != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n          if (result == 0) {\n            result = numSpecifiers + 1;\n            argBuffer = (int ********)pointerBuffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        numArgsProcessed = 0;\n        remainingSpecifier = remainingSpecifier + -4;\n        argBuffer = (int ********)pointerBuffer;\n      } while (0x10 < (int)(remainingSpecifier + -4));\nLAB_000834b4:\n      remainingSpecifier = remainingSpecifier + -4;\n    }\n    specifierBuffers = (int *******)((int)specifierBuffers + (int)remainingSpecifier);\n    *argBuffer = (int *******)&DAT_00085848;\n    argBuffer[1] = remainingSpecifier;\n    numSpecifiers = result;\n    if (result < 8) {\n      result = result + 1;\n      argBuffer = argBuffer + 2;\n    }\n    else if (specifierBuffers == (int *******)0x0) {\n      result = 1;\n      numSpecifiers = 0;\n      argBuffer = (int ********)pointerBuffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n      if (result != 0) goto LAB_000833de;\n      result = numSpecifiers + 1;\n      argBuffer = (int ********)pointerBuffer;\n    }\n  }\n  currentSpecifier = (int *******)((int)currentSpecifier - (int)specifierLength);\n  specifierBuffer = (int ********)pointerBuffer;\n  if ((int)currentSpecifier < 1) {\nLAB_000832c6:\n    specifierBuffers = (int *******)((int)specifierBuffers + (int)specifierLength);\n    *argBuffer = (int *******)tempBuffer;\n    argBuffer[1] = specifierLength;\n    specifierLength = specifierBuffers;\n    numSpecifiers = result;\n    if (result < 8) goto LAB_0008345a;\n    if (specifierBuffers == (int *******)0x0) {\n      numSpecifiers = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    argIndex = numSpecifiers;\n    if (0x10 < (int)currentSpecifier) {\n      do {\n        while( true ) {\n          remainingSpecifier = currentSpecifier;\n          numSpecifiers = argIndex + 1;\n          specifierBuffers = specifierBuffers + 4;\n          *argBuffer = (int *******)&DAT_00085848;\n          argBuffer[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          result = argIndex + 2;\n          argBuffer = argBuffer + 2;\nLAB_00083282:\n          argIndex = numSpecifiers;\n          currentSpecifier = remainingSpecifier + -4;\n          if ((int)(remainingSpecifier + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (specifierBuffers != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n          if (result == 0) {\n            result = numSpecifiers + 1;\n            argBuffer = (int ********)pointerBuffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        argBuffer = (int ********)pointerBuffer;\n        argIndex = 0;\n        currentSpecifier = remainingSpecifier + -4;\n      } while (0x10 < (int)(remainingSpecifier + -4));\nLAB_000832aa:\n      currentSpecifier = remainingSpecifier + -4;\n    }\n    specifierBuffers = (int *******)((int)specifierBuffers + (int)currentSpecifier);\n    *argBuffer = (int *******)&DAT_00085848;\n    argBuffer[1] = currentSpecifier;\n    if (result < 8) {\n      result = result + 1;\n      argBuffer = argBuffer + 2;\n      goto LAB_000832c6;\n    }\n    if (specifierBuffers != (int *******)0x0) {\n      numSpecifiers = result;\n      result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n      if (result != 0) goto LAB_000833de;\n      result = numSpecifiers + 1;\n      argBuffer = (int ********)pointerBuffer;\n      goto LAB_000832c6;\n    }\n    specifierBuffers[0] = specifierLength;\n    numSpecifiers = 1;\n    argBuffer = (int ********)pointerBuffer;\n    pointerBuffer = (undefined  [4])tempBuffer;\nLAB_0008345a:\n    specifierBuffer = argBuffer + 2;\n    specifierBuffers = specifierLength;\n  }\n  if (((formatFlags & 4) != 0) &&\n     (currentSpecifier = (int *******)((int)starArgValue - (int)bufferLength), 0 < (int)currentSpecifier)) {\n    result = numSpecifiers;\n    if ((int)currentSpecifier < 0x11) {\n      argIndex = numSpecifiers + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numSpecifiers = result + 1;\n          specifierBuffers = specifierBuffers + 4;\n          *specifierBuffer = (int *******)0x85808;\n          specifierBuffer[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          argIndex = result + 2;\n          specifierBuffer = specifierBuffer + 2;\nLAB_00083316:\n          currentSpecifier = currentSpecifier + -4;\n          result = numSpecifiers;\n          if ((int)currentSpecifier < 0x11) goto LAB_0008333e;\n        }\n        if (specifierBuffers != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n          if (result == 0) {\n            argIndex = numSpecifiers + 1;\n            specifierBuffer = (int ********)pointerBuffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        currentSpecifier = currentSpecifier + -4;\n        argIndex = 1;\n        result = 0;\n        specifierBuffer = (int ********)pointerBuffer;\n      } while (0x10 < (int)currentSpecifier);\n    }\nLAB_0008333e:\n    specifierBuffers = (int *******)((int)specifierBuffers + (int)currentSpecifier);\n    *specifierBuffer = (int *******)0x85808;\n    specifierBuffer[1] = currentSpecifier;\n    numSpecifiers = argIndex;\n    if (7 < argIndex) {\n      if (specifierBuffers == (int *******)0x0) {\n        if ((int)bufferLength < (int)starArgValue) {\n          bufferLength = starArgValue;\n        }\n        numCharsWritten = numCharsWritten + (int)bufferLength;\n        goto LAB_00083422;\n      }\n      result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)bufferLength < (int)starArgValue) {\n    bufferLength = starArgValue;\n  }\n  numCharsWritten = numCharsWritten + (int)bufferLength;\n  if ((specifierBuffers != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,format,&currentSpecifierBuffer), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  numSpecifiers = 0;\n  argBuffer = (int ********)pointerBuffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digitValue = nextByte - 0x30;\n  starArgValue = (int *******)0x0;\n  currentSpecifier = args;\n  do {\n    args = (int *******)((int)currentSpecifier + 1);\n    nextByte = (uint)*(byte *)currentSpecifier;\n    starArgValue = (int *******)(digitValue + (int)starArgValue * 10);\n    digitValue = nextByte - 0x30;\n    currentSpecifier = args;\n  } while (digitValue < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  nextByte = (uint)*(byte *)args;\n  if (currentChar == '\\0') {\n    currentChar = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "print_formatted_string_00082b38",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "args",
                "param_4": "argsPtr",
                "bVar1": "isLeftJustified",
                "bVar2": "isZeroPadded",
                "bVar3": "isAlternateForm",
                "cVar4": "numericFormatCode",
                "bVar5": "hasSpacePrefix",
                "ppppppppiVar6": "argBuffer",
                "piVar7": "argValue",
                "iVar8": "result",
                "cVar9": "leadingChar",
                "pppppppiVar10": "currentSpecifier",
                "uVar11": "digitValue",
                "ppiVar12": "formatArg",
                "uVar13": "formatFlags",
                "uVar14": "nextByte",
                "iVar15": "argIndex",
                "ppppppppiVar16": "specifierBuffer",
                "iVar17": "numArgsProcessed",
                "pppppppiVar18": "remainingSpecifier",
                "piVar19": "tempPointer1",
                "pppppppiVar20": "starArgValue",
                "uVar21": "argWidth",
                "pppppppiVar23": "remainingSpecifier",
                "uVar24": "tempValue1",
                "ppppppppiVar25": "tempBuffer",
                "bVar26": "isNegative",
                "lVar27": "numericValue",
                "local_dc": "bufferLength",
                "local_d4": "specifierLength",
                "local_c8": "argPointers",
                "local_c4": "numCharsWritten",
                "local_c0": "hexCharacters",
                "local_a1": "currentChar",
                "local_a0": "leadingZero",
                "local_9f": "prefixSign",
                "local_9c": "currentSpecifierBuffer",
                "local_98": "numSpecifiers",
                "local_94": "specifierBuffers",
                "local_90": "tempBuffer",
                "cStack_6a": "singleCharBuffer",
                "local_69": "alignmentBuffer",
                "local_68": "pointerBuffer",
                "local_64": "specifierBuffers"
            },
            "calling": [
                "__sbprintf"
            ],
            "called": [
                "__sprint_r.part.0",
                "strlen",
                "__sbprintf",
                "memchr",
                "__aeabi_uldivmod",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "print_and_flush_0008378c",
            "code": "\nint printAndFlush_0008378c(undefined4 outputStream,int data)\n\n{\n  int printResult;\n  int flushResult;\n  undefined *buffer [2];\n  undefined4 bufferSize;\n  ushort dataFlag;\n  undefined2 dataValue;\n  undefined *formattedString;\n  undefined4 flushBufferSize;\n  undefined4 flushMode;\n  undefined4 additionalData;\n  undefined4 extraData;\n  undefined4 stackBuffer;\n  undefined auxiliaryStack [1024];\n  \n  stackBuffer = *(undefined4 *)(data + 100);\n  additionalData = *(undefined4 *)(data + 0x1c);\n  dataValue = *(undefined2 *)(data + 0xe);\n  extraData = *(undefined4 *)(data + 0x24);\n  buffer[0] = auxiliaryStack;\n  dataFlag = *(ushort *)(data + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  flushBufferSize = 0x400;\n  flushMode = 0;\n  formattedString = buffer[0];\n  printResult = _vfiprintf_r(outputStream,buffer);\n  if ((-1 < printResult) && (flushResult = _fflush_r(outputStream,buffer), flushResult != 0)) {\n    printResult = -1;\n  }\n  if ((int)((uint)dataFlag << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return printResult;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "print_and_flush_0008378c",
                "param_1": "outputStream",
                "param_2": "data",
                "iVar1": "printResult",
                "iVar2": "flushResult",
                "local_488": "buffer",
                "local_480": "bufferSize",
                "local_47c": "dataFlag",
                "local_47a": "dataValue",
                "local_478": "formattedString",
                "local_474": "flushBufferSize",
                "local_470": "flushMode",
                "local_46c": "additionalData",
                "local_464": "extraData",
                "local_424": "stackBuffer",
                "auStack_420": "auxiliaryStack"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "check_and_initialize_00083808",
            "code": "\nundefined4 check_and_initialize_00083808(undefined4 *result,int *data)\n\n{\n  int temp1;\n  int temp2;\n  uint value;\n  ushort flag;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  flag = *(ushort *)(data + 3);\n  value = (uint)flag;\n  if ((int)(value << 0x1c) < 0) {\n    temp2 = data[4];\n  }\n  else {\n    if (-1 < (int)(value << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          _free_r(result);\n          flag = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      temp2 = data[4];\n      flag = flag & 0xffdb;\n      *data = temp2;\n      data[1] = 0;\n    }\n    else {\n      temp2 = data[4];\n    }\n    *(ushort *)(data + 3) = flag | 8;\n    value = (uint)(flag | 8);\n  }\n  if ((temp2 == 0) && ((value & 0x280) != 0x200)) {\n    __smakebuf_r(result,data);\n    value = (uint)*(ushort *)(data + 3);\n    temp2 = data[4];\n  }\n  if ((value & 1) == 0) {\n    temp1 = 0;\n    if (-1 < (int)(value << 0x1e)) {\n      temp1 = data[5];\n    }\n    data[2] = temp1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((temp2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "check_and_initialize_00083808",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "value",
                "uVar4": "flag"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "initialize_and_process_data_00083adc",
            "code": "\nundefined4 initializeAndProcessData_00083adc(int *inputData,int *outputData)\n\n{\n  int *tempPtr;\n  int offset;\n  ushort flag;\n  uint flag2;\n  int tempVar;\n  code *functionPtr;\n  undefined4 returnValue;\n  int tempVar2;\n  \n  if ((inputData != (int *)0x0) && (inputData[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(outputData + 3) == 0) {\n    return 0;\n  }\n  flag = *(ushort *)(outputData + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    tempVar2 = outputData[4];\n    if (tempVar2 == 0) {\n      return 0;\n    }\n    offset = *outputData;\n    if ((flag & 3) == 0) {\n      tempVar = outputData[5];\n    }\n    else {\n      tempVar = 0;\n    }\n    *outputData = tempVar2;\n    offset = offset - tempVar2;\n    outputData[2] = tempVar;\n    do {\n      if (offset < 1) {\n        return 0;\n      }\n      tempVar = (*(code *)outputData[9])(inputData,outputData[7],tempVar2,offset,returnValue);\n      offset = offset - tempVar;\n      tempVar2 = tempVar2 + tempVar;\n    } while (0 < tempVar);\nLAB_00083a54:\n    *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(outputData + 3) = flag | 0x800;\n  if ((outputData[1] < 1) && (outputData[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)outputData[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  flag2 = (uint)(flag | 0x800);\n  tempVar2 = *inputData;\n  *inputData = 0;\n  if ((flag & 0x1000) == 0) {\n    offset = (*functionPtr)(inputData,outputData[7],flag2 & 0x1000,1);\n    if ((offset == -1) && (tempVar = *inputData, tempVar != 0)) {\n      if ((tempVar == 0x1d) || (tempVar == 0x16)) {\n        *inputData = tempVar2;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    flag2 = (uint)*(ushort *)(outputData + 3);\n    functionPtr = (code *)outputData[10];\n  }\n  else {\n    offset = outputData[0x14];\n  }\n  if (((int)(flag2 << 0x1d) < 0) && (offset = offset - outputData[1], outputData[0xc] != 0)) {\n    offset = offset - outputData[0xf];\n  }\n  offset = (*functionPtr)(inputData,outputData[7],offset,0);\n  if (offset == -1) {\n    tempVar = *inputData;\n    if (tempVar != 0) {\n      if ((tempVar != 0x1d) && (tempVar != 0x16)) {\n        *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) & 0xf7ff;\n      *outputData = outputData[4];\n      outputData[1] = 0;\n      goto LAB_00083a00;\n    }\n    flag = *(ushort *)(outputData + 3) & 0xf7ff;\n    outputData[1] = 0;\n    *(ushort *)(outputData + 3) = flag;\n    *outputData = outputData[4];\n  }\n  else {\n    flag = *(ushort *)(outputData + 3) & 0xf7ff;\n    *outputData = outputData[4];\n    *(ushort *)(outputData + 3) = flag;\n    outputData[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    outputData[0x14] = offset;\n  }\nLAB_00083a00:\n  tempPtr = (int *)outputData[0xc];\n  *inputData = tempVar2;\n  if (tempPtr == (int *)0x0) {\n    return 0;\n  }\n  if (tempPtr != outputData + 0x10) {\n    _free_r(inputData);\n  }\n  outputData[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "initialize_and_process_data_00083adc",
                "param_1": "inputData",
                "param_2": "outputData",
                "piVar1": "tempPtr",
                "iVar2": "offset",
                "uVar3": "flag",
                "uVar4": "flag2",
                "iVar5": "tempVar",
                "pcVar6": "functionPtr",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar2"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructures)\n\n{\n  undefined4 *ptrStruct1;\n  undefined4 *ptrStruct2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptrStruct1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptrStruct1 + 3) = 4;\n    *ptrStruct1 = 0;\n    ptrStruct1[1] = 0;\n    ptrStruct1[2] = 0;\n    ptrStruct1[0x19] = 0;\n    *(undefined2 *)((int)ptrStruct1 + 0xe) = 0;\n    ptrStruct1[4] = 0;\n    ptrStruct1[5] = 0;\n    ptrStruct1[6] = 0;\n    memset(ptrStruct1 + 0x17,0,8);\n    ptrStruct2 = *(undefined4 **)(dataStructures + 8);\n    ptrStruct1[7] = ptrStruct1;\n    ptrStruct1[8] = &LAB_00084440_1;\n    ptrStruct1[9] = 0x84465;\n    ptrStruct1[10] = 0x8449d;\n    ptrStruct1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptrStruct2 + 0xe) = 1;\n    *(undefined2 *)(ptrStruct2 + 3) = 9;\n    *ptrStruct2 = 0;\n    ptrStruct2[1] = 0;\n    ptrStruct2[2] = 0;\n    ptrStruct2[0x19] = 0;\n    ptrStruct2[4] = 0;\n    ptrStruct2[5] = 0;\n    ptrStruct2[6] = 0;\n    memset(ptrStruct2 + 0x17,0,8);\n    ptrStruct1 = *(undefined4 **)(dataStructures + 0xc);\n    ptrStruct2[7] = ptrStruct2;\n    ptrStruct2[8] = &LAB_00084440_1;\n    ptrStruct2[9] = 0x84465;\n    ptrStruct2[10] = 0x8449d;\n    ptrStruct2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptrStruct1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrStruct1 + 0xe) = 2;\n    *ptrStruct1 = 0;\n    ptrStruct1[1] = 0;\n    ptrStruct1[2] = 0;\n    ptrStruct1[0x19] = 0;\n    ptrStruct1[4] = 0;\n    ptrStruct1[5] = 0;\n    ptrStruct1[6] = 0;\n    memset(ptrStruct1 + 0x17,0,8);\n    ptrStruct1[7] = ptrStruct1;\n    ptrStruct1[8] = &LAB_00084440_1;\n    ptrStruct1[9] = 0x84465;\n    ptrStruct1[10] = 0x8449d;\n    ptrStruct1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructures",
                "puVar1": "ptrStruct1",
                "puVar2": "ptrStruct2"
            },
            "calling": [
                "fclose",
                "_fflush_r",
                "__swbuf_r",
                "_vfiprintf_r",
                "__swsetup_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "convert_and_write_to_stream_00083c40",
            "code": "\nuint convert_and_write_to_stream_00083c40(undefined4 stream_handler,uint value,byte **stream_buffer_ptr)\n\n{\n  int max_bytes;\n  uint conversion_bytes;\n  uint converted_value;\n  byte *stream_ptr;\n  uint byte_index;\n  byte byte_value;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(stream_buffer_ptr + 3) << 0x12)) {\n    *(ushort *)(stream_buffer_ptr + 3) = *(ushort *)(stream_buffer_ptr + 3) | 0x2000;\n    stream_buffer_ptr[0x19] = (byte *)((uint)stream_buffer_ptr[0x19] | 0x2000);\n  }\n  max_bytes = __locale_mb_cur_max();\n  if ((max_bytes == 1) && (value - 1 < 0xff)) {\n    converted_value = value & 0xff;\n    byte_value = (byte)converted_value;\n    conversion_bytes = 1;\n  }\n  else {\n    conversion_bytes = _wcrtomb_r(stream_handler,&byte_value,value,stream_buffer_ptr + 0x17);\n    if (conversion_bytes == 0xffffffff) {\n      *(ushort *)(stream_buffer_ptr + 3) = *(ushort *)(stream_buffer_ptr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (conversion_bytes == 0) {\n      return value;\n    }\n    converted_value = (uint)byte_value;\n  }\n  byte_index = 0;\n  do {\n    stream_ptr = stream_buffer_ptr[2] + -1;\n    stream_buffer_ptr[2] = stream_ptr;\n    if ((int)stream_ptr < 0) {\n      if ((int)stream_buffer_ptr[6] <= (int)stream_ptr) {\n        **stream_buffer_ptr = (byte)converted_value;\n        stream_ptr = *stream_buffer_ptr;\n        converted_value = (uint)*stream_ptr;\n        if (converted_value != 10) goto LAB_00083c90;\n      }\n      max_bytes = __swbuf_r(stream_handler,converted_value,stream_buffer_ptr);\n      if (max_bytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **stream_buffer_ptr = (byte)converted_value;\n      stream_ptr = *stream_buffer_ptr;\nLAB_00083c90:\n      *stream_buffer_ptr = stream_ptr + 1;\n    }\n    if (conversion_bytes <= byte_index + 1) {\n      return value;\n    }\n    converted_value = (uint)byte_array[byte_index];\n    byte_index = byte_index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "convert_and_write_to_stream_00083c40",
                "param_1": "stream_handler",
                "param_2": "value",
                "param_3": "stream_buffer_ptr",
                "iVar1": "max_bytes",
                "uVar2": "conversion_bytes",
                "uVar3": "converted_value",
                "pbVar4": "stream_ptr",
                "uVar5": "byte_index",
                "local_1c": "byte_value",
                "abStack_1b": "byte_array"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_memory_allocation_00083d00",
            "code": "\nundefined4 updateMemoryAllocation_00083d00(undefined4 param1,int param2)\n\n{\n  int result;\n  uint info;\n  int adjustedOffset;\n  \n  __malloc_lock();\n  info = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((info - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = _sbrk_r(param1,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + info) {\n      result = _sbrk_r(param1,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = info - adjustedOffset | 1;\n        __malloc_unlock(param1);\n        return 1;\n      }\n      adjustedOffset = _sbrk_r(param1,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  __malloc_unlock(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_memory_allocation_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "info",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_entry_00083d9c",
            "code": "\nvoid updateRelocationEntry_00083d9c(undefined4 lock,int relocationEntry)\n\n{\n  int prevNodeOffset;\n  bool isHeadNode;\n  uint entryFlags;\n  dword prevNode;\n  int nextNodeOffset;\n  uint entrySize;\n  dword currentNode;\n  uint nextNodeSize;\n  dword nextNode;\n  \n  if (relocationEntry == 0) {\n    return;\n  }\n  __malloc_lock();\n  entryFlags = *(uint *)(relocationEntry + -4);\n  currentNode = relocationEntry - 8;\n  entrySize = entryFlags & 0xfffffffe;\n  prevNode = currentNode + entrySize;\n  nextNodeSize = *(uint *)(prevNode + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == prevNode) {\n    nextNodeSize = nextNodeSize + entrySize;\n    if (-1 < (int)(entryFlags << 0x1f)) {\n      currentNode = currentNode - *(int *)(relocationEntry + -8);\n      nextNodeOffset = *(int *)(currentNode + 0xc);\n      prevNodeOffset = *(int *)(currentNode + 8);\n      nextNodeSize = nextNodeSize + *(int *)(relocationEntry + -8);\n      *(int *)(prevNodeOffset + 0xc) = nextNodeOffset;\n      *(int *)(nextNodeOffset + 8) = prevNodeOffset;\n    }\n    prevNode = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(currentNode + 4) = nextNodeSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = currentNode;\n    if (prevNode <= nextNodeSize) {\n      _malloc_trim_r(lock,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(prevNode + 4) = nextNodeSize;\n    if ((entryFlags & 1) == 0) {\n      currentNode = currentNode - *(int *)(relocationEntry + -8);\n      prevNodeOffset = *(int *)(currentNode + 8);\n      entrySize = entrySize + *(int *)(relocationEntry + -8);\n      if (prevNodeOffset == 0x2007046c) {\n        isHeadNode = true;\n      }\n      else {\n        nextNodeOffset = *(int *)(currentNode + 0xc);\n        *(int *)(prevNodeOffset + 0xc) = nextNodeOffset;\n        *(int *)(nextNodeOffset + 8) = prevNodeOffset;\n        isHeadNode = false;\n      }\n    }\n    else {\n      isHeadNode = false;\n    }\n    if (-1 < *(int *)(prevNode + nextNodeSize + 4) << 0x1f) {\n      entrySize = entrySize + nextNodeSize;\n      prevNodeOffset = *(int *)(prevNode + 8);\n      if ((!isHeadNode) && (prevNodeOffset == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = currentNode;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = currentNode;\n        *(undefined4 *)(currentNode + 0xc) = 0x2007046c;\n        *(undefined4 *)(currentNode + 8) = 0x2007046c;\n        *(uint *)(currentNode + 4) = entrySize | 1;\n        *(uint *)(currentNode + entrySize) = entrySize;\n        goto LAB_00083e30;\n      }\n      nextNodeOffset = *(int *)(prevNode + 0xc);\n      *(int *)(prevNodeOffset + 0xc) = nextNodeOffset;\n      *(int *)(nextNodeOffset + 8) = prevNodeOffset;\n    }\n    *(uint *)(currentNode + 4) = entrySize | 1;\n    *(uint *)(currentNode + entrySize) = entrySize;\n    if (!isHeadNode) {\n      if (entrySize < 0x200) {\n        entryFlags = entrySize & 0xfffffff8;\n        prevNodeOffset = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryFlags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(entrySize >> 3) >> 2 & 0xffU);\n        *(int *)(currentNode + 8) = prevNodeOffset;\n        *(uint *)(currentNode + 0xc) = entryFlags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryFlags) = currentNode;\n        *(dword *)(prevNodeOffset + 0xc) = currentNode;\n        __malloc_unlock(lock);\n        return;\n      }\n      entryFlags = entrySize >> 9;\n      if (entryFlags < 5) {\n        prevNodeOffset = (entrySize >> 6) + 0x38;\n        nextNodeOffset = prevNodeOffset * 2;\n      }\n      else if (entryFlags < 0x15) {\n        prevNodeOffset = entryFlags + 0x5b;\n        nextNodeOffset = prevNodeOffset * 2;\n      }\n      else if (entryFlags < 0x55) {\n        prevNodeOffset = (entrySize >> 0xc) + 0x6e;\n        nextNodeOffset = prevNodeOffset * 2;\n      }\n      else if (entryFlags < 0x155) {\n        prevNodeOffset = (entrySize >> 0xf) + 0x77;\n        nextNodeOffset = prevNodeOffset * 2;\n      }\n      else if (entryFlags < 0x555) {\n        prevNodeOffset = (entrySize >> 0x12) + 0x7c;\n        nextNodeOffset = prevNodeOffset * 2;\n      }\n      else {\n        nextNodeOffset = 0xfc;\n        prevNodeOffset = 0x7e;\n      }\n      nextNode = nextNodeOffset * 4 + 0x20070464;\n      prevNode = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextNodeOffset];\n      if (prevNode == nextNode) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (prevNodeOffset >> 2 & 0xffU);\n        nextNode = prevNode;\n      }\n      else {\n        do {\n          if ((*(uint *)(prevNode + 4) & 0xfffffffc) <= entrySize) break;\n          prevNode = *(dword *)(prevNode + 8);\n        } while (nextNode != prevNode);\n        nextNode = *(dword *)(prevNode + 0xc);\n      }\n      *(dword *)(currentNode + 0xc) = nextNode;\n      *(dword *)(currentNode + 8) = prevNode;\n      *(dword *)(nextNode + 8) = currentNode;\n      *(dword *)(prevNode + 0xc) = currentNode;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_entry_00083d9c",
                "param_1": "lock",
                "param_2": "relocationEntry",
                "iVar1": "prevNodeOffset",
                "bVar2": "isHeadNode",
                "uVar3": "entryFlags",
                "dVar4": "prevNode",
                "iVar5": "nextNodeOffset",
                "uVar6": "entrySize",
                "dVar7": "currentNode",
                "uVar8": "nextNodeSize",
                "dVar9": "nextNode"
            },
            "calling": [
                "free",
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "copy_and_flush_data_00083f34",
            "code": "\nundefined4 copyAndFlushData_00083f34(undefined4 *output,uint *input,uint **buffer)\n\n{\n  int result;\n  uint data1;\n  uint data2;\n  ushort flag;\n  uint size1;\n  uint *pointer1;\n  uint *pointer2;\n  uint size2;\n  uint size3;\n  uint tempSize;\n  uint tempSize2;\n  uint tempSize3;\n  \n  if (buffer[2] != (uint *)0x0) {\n    flag = *(ushort *)(input + 3);\n    size1 = (uint)flag;\n    if (((int)(size1 << 0x1c) < 0) && (input[4] != 0)) {\n      pointer2 = *buffer;\n    }\n    else {\n      result = __swsetup_r(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input + 3);\n      size1 = (uint)flag;\n      pointer2 = *buffer;\n    }\n    if ((flag & 2) == 0) {\n      data1 = size1 & 2;\n      tempSize = data1;\n      size2 = data1;\n      tempSize3 = data1;\n      if ((size1 & 1) == 0) {\n        data1 = 0;\n        tempSize = 0;\n        while( true ) {\n          while (data1 == 0) {\n            tempSize = *pointer2;\n            pointer1 = pointer2 + 1;\n            pointer2 = pointer2 + 2;\n            data1 = *pointer1;\n          }\n          size2 = input[2];\n          if ((int)(size1 << 0x16) < 0) {\n            if (data1 < size2) {\n              size1 = *input;\n              size2 = data1;\n            }\n            else if ((size1 & 0x480) == 0) {\n              size1 = *input;\n            }\n            else {\n              result = *input - input[4];\n              size2 = result + 1 + data1;\n              size3 = (int)(input[5] * 3) / 2;\n              if (size2 <= size3) {\n                size2 = size3;\n              }\n              if ((int)(size1 << 0x15) < 0) {\n                size3 = _malloc_r(output,size2);\n                if (size3 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(input + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(size3,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size3 = _realloc_r(output);\n                if (size3 == 0) {\n                  _free_r(output,input[4]);\n                  flag = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              size1 = size3 + result;\n              input[4] = size3;\n              input[5] = size2;\n              *input = size1;\n              input[2] = size2 - result;\n              size2 = data1;\n            }\n            memmove(size1,tempSize,size2);\n            input[2] = input[2] - size2;\n            *input = *input + size2;\n            size2 = data1;\n          }\n          else if ((input[4] < *input) || (size1 = input[5], data1 < size1)) {\n            if (data1 < size2) {\n              size2 = data1;\n            }\n            memmove(*input,tempSize,size2);\n            size1 = input[2];\n            input[2] = size1 - size2;\n            *input = *input + size2;\n            if ((size1 - size2 == 0) && (result = _fflush_r(output,input), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            size2 = 0x7fffffff;\n            if (data1 < 0x7fffffff) {\n              size2 = data1;\n            }\n            size2 = (*(code *)input[9])(output,input[7],tempSize,(size2 / size1) * size1);\n            if ((int)size2 < 1) goto LAB_0008402e;\n          }\n          pointer1 = buffer[2];\n          tempSize = tempSize + size2;\n          data1 = data1 - size2;\n          buffer[2] = (uint *)((int)pointer1 - size2);\n          if ((uint *)((int)pointer1 - size2) == (uint *)0x0) break;\n          size1 = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (data1 == 0) {\n            size2 = *pointer2;\n            data1 = pointer2[1];\n            tempSize3 = 0;\n            pointer2 = pointer2 + 2;\n          }\n          if (tempSize3 == 0) {\n            result = memchr(size2,10,data1);\n            if (result == 0) {\n              tempSize = data1 + 1;\n              tempSize3 = 1;\n            }\n            else {\n              tempSize = (result + 1) - size2;\n              tempSize3 = 1;\n            }\n          }\n          size3 = *input;\n          size1 = tempSize;\n          if (data1 <= tempSize) {\n            size1 = data1;\n          }\n          data2 = input[5];\n          if ((input[4] < size3) && (tempSize2 = input[2] + data2, (int)tempSize2 < (int)size1)) {\n            memmove(size3,size2,tempSize2);\n            *input = *input + tempSize2;\n            result = _fflush_r(output,input);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)size1 < (int)data2) {\n            memmove(size3,size2,size1);\n            input[2] = input[2] - size1;\n            *input = size1 + *input;\n            tempSize2 = size1;\n          }\n          else {\n            tempSize2 = (*(code *)input[9])(output,input[7],size2,data2);\n            if ((int)tempSize2 < 1) goto LAB_0008402e;\n          }\n          tempSize = tempSize - tempSize2;\n          if (tempSize == 0) {\n            result = _fflush_r(output,input);\n            if (result != 0) goto LAB_0008402e;\n            tempSize3 = 0;\n          }\n          pointer1 = buffer[2];\n          size2 = size2 + tempSize2;\n          data1 = data1 - tempSize2;\n          buffer[2] = (uint *)((int)pointer1 - tempSize2);\n        } while ((uint *)((int)pointer1 - tempSize2) != (uint *)0x0);\n      }\n    }\n    else {\n      data1 = 0;\n      size1 = 0;\n      do {\n        while( true ) {\n          tempSize = size1;\n          if (0x7ffffbff < size1) {\n            tempSize = 0x7ffffc00;\n          }\n          if (size1 != 0) break;\n          data1 = *pointer2;\n          size1 = pointer2[1];\n          pointer2 = pointer2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],data1,tempSize);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(input + 3);\nLAB_00084030:\n          *(ushort *)(input + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        pointer1 = buffer[2];\n        data1 = data1 + result;\n        size1 = size1 - result;\n        buffer[2] = (uint *)((int)pointer1 - result);\n      } while ((uint *)((int)pointer1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "copy_and_flush_data_00083f34",
                "param_1": "output",
                "param_2": "input",
                "param_3": "buffer",
                "iVar1": "result",
                "uVar2": "data1",
                "uVar3": "data2",
                "uVar4": "flag",
                "uVar5": "size1",
                "puVar6": "pointer1",
                "puVar7": "pointer2",
                "uVar8": "size2",
                "uVar9": "size3",
                "uVar10": "tempSize",
                "uVar11": "tempSize2",
                "local_2c": "tempSize3"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memmove",
                "_realloc_r",
                "memchr",
                "_free_r",
                "memcpy",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_elf_relocation_info_00084298",
            "code": "\ndword getElfRelocationInfo_00084298(void)\n\n{\n  return relArray[274].relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_elf_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "relocationInfo"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_file_000842a4",
            "code": "\nvoid processFile_000842a4(int fileDescriptor,int *fileData)\n\n{\n  ushort fileFlags;\n  int fileStatus;\n  int allocationResult;\n  uint temp;\n  bool isExecutable;\n  undefined buffer [4];\n  uint localFlags;\n  \n  fileFlags = *(ushort *)(fileData + 3);\n  temp = (uint)fileFlags;\n  if ((int)(temp << 0x1e) < 0) {\n    *fileData = (int)fileData + 0x43;\n    fileData[4] = (int)fileData + 0x43;\n    fileData[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileData + 0xe)) {\n    fileStatus = _fstat_r(fileDescriptor,(int)*(short *)((int)fileData + 0xe),buffer);\n    if (-1 < fileStatus) {\n      isExecutable = (localFlags & 0xf000) == 0x2000;\n      if (((localFlags & 0xf000) == 0x8000) && (fileData[10] == 0x8449d)) {\n        fileStatus = 0x400;\n        *(ushort *)(fileData + 3) = *(ushort *)(fileData + 3) | 0x400;\n        fileData[0x13] = 0x400;\n      }\n      else {\n        fileStatus = 0x400;\n        *(ushort *)(fileData + 3) = *(ushort *)(fileData + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    fileFlags = *(ushort *)(fileData + 3);\n    temp = (uint)fileFlags;\n  }\n  *(ushort *)(fileData + 3) = fileFlags | 0x800;\n  if ((temp & 0x80) == 0) {\n    fileStatus = 0x400;\n  }\n  else {\n    fileStatus = 0x40;\n  }\n  isExecutable = false;\nLAB_00084300:\n  allocationResult = _malloc_r(fileDescriptor,fileStatus);\n  fileFlags = *(ushort *)(fileData + 3);\n  if (allocationResult == 0) {\n    if (-1 < (int)((uint)fileFlags << 0x16)) {\n      *(ushort *)(fileData + 3) = fileFlags | 2;\n      *fileData = (int)fileData + 0x43;\n      fileData[4] = (int)fileData + 0x43;\n      fileData[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(fileDescriptor + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(fileData + 3) = fileFlags | 0x80;\n    *fileData = allocationResult;\n    fileData[4] = allocationResult;\n    fileData[5] = fileStatus;\n    if ((isExecutable) && (fileStatus = _isatty_r(fileDescriptor,(int)*(short *)((int)fileData + 0xe)), fileStatus != 0)) {\n      *(ushort *)(fileData + 3) = *(ushort *)(fileData + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_file_000842a4",
                "param_1": "fileDescriptor",
                "param_2": "fileData",
                "uVar1": "fileFlags",
                "iVar2": "fileStatus",
                "iVar3": "allocationResult",
                "uVar4": "temp",
                "bVar5": "isExecutable",
                "auStack_54": "buffer",
                "local_50": "localFlags"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_next_occurrence_00084384",
            "code": "\nuint * find_next_occurrence_00084384(uint *array,char target,uint length)\n\n{\n  uint result;\n  int index;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = array;\n      do {\n        result = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_next_occurrence_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "found"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "write_to_file_00084464",
            "code": "\nvoid writeToFile_00084464(int *fileDescriptor,int fileInfo,undefined4 buffer,undefined4 size)\n\n{\n  int writeResult;\n  ushort permissions;\n  undefined4 unusedParam1;\n  undefined4 unusedParam2;\n  undefined4 unusedParam3;\n  undefined4 unusedParam4;\n  \n  permissions = *(ushort *)(fileInfo + 0xc);\n  if ((int)((uint)permissions << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(fileInfo + 0xe),0,2);\n    permissions = *(ushort *)(fileInfo + 0xc);\n  }\n  *(ushort *)(fileInfo + 0xc) = permissions & 0xefff;\n  DAT_200711bc = 0;\n  writeResult = _write((int)*(short *)(fileInfo + 0xe),buffer,size,size,unusedParam1,unusedParam2,unusedParam3,\n                 unusedParam4);\n  if ((writeResult == -1) && (DAT_200711bc != 0)) {\n    *fileDescriptor = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "write_to_file_00084464",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "param_3": "buffer",
                "param_4": "size",
                "unaff_r4": "unusedParam1",
                "unaff_r5": "unusedParam2",
                "unaff_r6": "unusedParam3",
                "in_lr": "unusedParam4",
                "uVar2": "permissions",
                "iVar1": "writeResult"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_file_position_0008449c",
            "code": "\nvoid updateFilePosition_0008449c(undefined4 fileDescriptor,int structAddress)\n\n{\n  int seekResult;\n  ushort updatedFlag;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(structAddress + 0xe));\n  if (seekResult == -1) {\n    updatedFlag = *(ushort *)(structAddress + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(structAddress + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(structAddress + 0x50) = seekResult;\n  }\n  *(ushort *)(structAddress + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_file_position_0008449c",
                "param_1": "fileDescriptor",
                "param_2": "structAddress",
                "iVar1": "seekResult",
                "uVar2": "updatedFlag"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "decode_and_write_000844c4",
            "code": "\nuint decode_and_write_000844c4(int input_buffer,uint character,undefined4 *stream,undefined4 flag)\n\n{\n  ushort buffer_length;\n  uint buffer_length_casted;\n  undefined *current_position;\n  int offset;\n  \n  if ((input_buffer != 0) && (*(int *)(input_buffer + 0x38) == 0)) {\n    __initialize_stream();\n  }\n  buffer_length = *(ushort *)(stream + 3);\n  buffer_length_casted = (uint)buffer_length;\n  stream[2] = stream[6];\n  if ((-1 < (int)(buffer_length_casted << 0x1c)) || (offset = stream[4], offset == 0)) {\n    offset = __setup_stream_read(input_buffer,stream,buffer_length,buffer_length_casted,flag);\n    if (offset != 0) {\n      return 0xffffffff;\n    }\n    buffer_length = *(ushort *)(stream + 3);\n    offset = stream[4];\n    buffer_length_casted = (uint)buffer_length;\n  }\n  character = character & 0xff;\n  if ((int)(buffer_length_casted << 0x12) < 0) {\n    current_position = (undefined *)*stream;\n    offset = (int)current_position - offset;\n    if (offset < (int)stream[5]) {\nLAB_000844f6:\n      offset = offset + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    stream[0x19] = stream[0x19] & 0xffffdfff;\n    current_position = (undefined *)*stream;\n    *(ushort *)(stream + 3) = buffer_length | 0x2000;\n    offset = (int)current_position - offset;\n    if (offset < (int)stream[5]) goto LAB_000844f6;\n  }\n  offset = __flush_stream(input_buffer,stream);\n  if (offset != 0) {\n    return 0xffffffff;\n  }\n  current_position = (undefined *)*stream;\n  offset = 1;\nLAB_000844f8:\n  stream[2] = stream[2] + -1;\n  *stream = current_position + 1;\n  *current_position = (char)character;\n  if (((stream[5] == offset) ||\n      (((int)((uint)*(ushort *)(stream + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (offset = __flush_stream(input_buffer,stream), offset != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "decode_and_write_000844c4",
                "param_1": "input_buffer",
                "param_2": "character",
                "param_3": "stream",
                "param_4": "flag",
                "uVar1": "buffer_length",
                "uVar2": "buffer_length_casted",
                "puVar3": "current_position",
                "iVar4": "offset",
                "__sinit": "__initialize_stream",
                "__swsetup_r": "__setup_stream_read",
                "_fflush_r": "__flush_stream"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "_fflush_r",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "convert_encoding_0008456c",
            "code": "\nvoid convertEncoding_0008456c(undefined4 *outputBuffer,int inputSize,undefined4 unknownParam,undefined4 *status)\n\n{\n  code *conversionFunction;\n  undefined4 charset;\n  int result;\n  undefined stackBuffer [12];\n  \n  conversionFunction = DAT_20070898;\n  if (inputSize == 0) {\n    charset = __locale_charset();\n    result = (*conversionFunction)(outputBuffer,stackBuffer,0,charset,status);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*conversionFunction)(outputBuffer,inputSize,unknownParam,charset,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "convert_encoding_0008456c",
                "param_1": "outputBuffer",
                "param_2": "inputSize",
                "param_3": "unknownParam",
                "param_4": "status",
                "pcVar1": "conversionFunction",
                "uVar2": "charset",
                "iVar3": "result",
                "auStack_24": "stackBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "copy_byte_to_pointer_000845bc",
            "code": "\nundefined4 copy_byte_to_pointer_000845bc(undefined4 *output_pointer,undefined *input_pointer,uint value)\n\n{\n  if (input_pointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *input_pointer = (char)value;\n    return 1;\n  }\n  *output_pointer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "copy_byte_to_pointer_000845bc",
                "param_1": "output_pointer",
                "param_2": "input_pointer",
                "param_3": "value"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "cleanup_and_flush_000846a4",
            "code": "\nundefined4 cleanupAndFlush_000846a4(int state)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (state != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(state + 0xc) != 0) {\n      result = _fflush_r(offset,state);\n      if ((*(code **)(state + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(state + 0x2c))(offset,*(undefined4 *)(state + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(state + 0xc) << 0x18) < 0) {\n        _free_r(offset,*(undefined4 *)(state + 0x10));\n      }\n      if (*(int *)(state + 0x30) != 0) {\n        if (*(int *)(state + 0x30) != state + 0x40) {\n          _free_r(offset);\n        }\n        *(undefined4 *)(state + 0x30) = 0;\n      }\n      if (*(int *)(state + 0x44) != 0) {\n        _free_r(offset);\n        *(undefined4 *)(state + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(state + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "cleanup_and_flush_000846a4",
                "param_1": "state",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_file_status_000846b4",
            "code": "\nvoid checkFileStatus_000846b4(int *result,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 bufferLength)\n\n{\n  int statResult;\n  \n  DAT_200711bc = 0;\n  statResult = _fstat(fileDescriptor,statBuffer,statBuffer,0,bufferLength);\n  if ((statResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_file_status_000846b4",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "bufferLength",
                "iVar1": "statResult"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_and_set_terminal_width_000846dc",
            "code": "\nvoid checkAndSetTerminalWidth_000846dc(int *outputValue,undefined4 fileDescriptor)\n\n{\n  int isTerminal;\n  \n  DAT_200711bc = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_and_set_terminal_width_000846dc",
                "param_1": "outputValue",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "seek_and_set_00084700",
            "code": "\nvoid seekAndSet_00084700(int *result,undefined4 fileDescriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seekResult;\n  \n  DAT_200711bc = 0;\n  seekResult = _lseek(fileDescriptor,offset,whence);\n  if ((seekResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "seek_and_set_00084700",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seekResult"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "read_and_check_error_00084728",
            "code": "\nvoid read_and_check_error_00084728(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_200711bc = 0;\n  read_result = _read(file_descriptor,buffer,count);\n  if ((read_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "read_and_check_error_00084728",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "read_result"
            },
            "calling": [],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "divide_and_mod_00084750",
            "code": "\nint divideAndMod_00084750(int dividend,int divisor,int remainder,int quotient)\n\n{\n  int result;\n  \n  if ((quotient == 0) && (remainder == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    return dividend;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "divide_and_mod_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient",
                "iVar1": "result"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_store_result_0008477c",
            "code": "\nvoid subtractAndStoreResult_0008477c(uint inputData,int paramLength,undefined4 lowerPart,undefined4 upperPart,int *outputData)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __divdi3();\n  product = product * CONCAT44(upperPart,lowerPart);\n  result = (uint)product;\n  *outputData = inputData - result;\n  outputData[1] = (paramLength - (int)((ulonglong)product >> 0x20)) - (uint)(inputData < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_store_result_0008477c",
                "param_1": "inputData",
                "param_2": "paramLength",
                "param_3": "lowerPart",
                "param_4": "upperPart",
                "param_5": "outputData",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_store_000847ac",
            "code": "\nvoid subtractAndStore_000847ac(uint input_value,int param_2,undefined4 param_3,undefined4 param_4,int *output_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(param_4,param_3);\n  result = (uint)product;\n  *output_array = input_value - result;\n  output_array[1] = (param_2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_store_000847ac",
                "param_1": "input_value",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "division_with_remainder_000847e0",
            "code": "\nundefined8 division_with_remainder_000847e0(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper)\n\n{\n  longlong temporary_long;\n  uint quotient;\n  uint quotient_upper;\n  uint temp;\n  uint temp2;\n  int shift_amount;\n  uint carry_over;\n  uint temp3;\n  uint is_negative_dividend;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  bool boolean_flag;\n  \n  if ((int)dividend_upper < 0) {\n    boolean_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_upper = -dividend_upper - (uint)boolean_flag;\n    is_negative_dividend = 0xffffffff;\n  }\n  else {\n    is_negative_dividend = 0;\n  }\n  if ((int)divisor_upper < 0) {\n    is_negative_dividend = ~is_negative_dividend;\n    boolean_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_upper = -divisor_upper - (uint)boolean_flag;\n  }\n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_upper = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_upper = dividend_upper << shift_amount | quotient_upper;\n      }\n      quotient = divisor >> 0x10;\n      temp = dividend_upper / quotient;\n      carry_over = (divisor & 0xffff) * temp;\n      temp4 = dividend >> 0x10 | (dividend_upper - quotient * temp) * 0x10000;\n      quotient_upper = temp;\n      if (temp4 <= carry_over && carry_over - temp4 != 0) {\n        boolean_flag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        quotient_upper = temp - 1;\n        if ((boolean_flag == false) && (temp4 <= carry_over && carry_over - temp4 != 0)) {\n          quotient_upper = temp - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp3 = (temp4 - carry_over) / quotient;\n      temp = (divisor & 0xffff) * temp3;\n      carry_over = dividend & 0xffff | ((temp4 - carry_over) - quotient * temp3) * 0x10000;\n      quotient = temp3;\n      if (carry_over <= temp && temp - carry_over != 0) {\n        quotient = temp3 - 1;\n        if ((CARRY4(carry_over,divisor) == false) &&\n           (carry_over + divisor <= temp && temp - (carry_over + divisor) != 0)) {\n          quotient = temp3 - 2;\n        }\n      }\n      quotient = quotient | quotient_upper << 0x10;\n      quotient_upper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_upper = dividend_upper - divisor;\n        temp = divisor >> 0x10;\n        temp6 = divisor & 0xffff;\n        quotient_upper = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_upper = dividend_upper >> (0x20U - shift_amount & 0xff);\n        temp = divisor >> 0x10;\n        temp4 = quotient_upper / temp;\n        temp6 = divisor & 0xffff;\n        carry_over = temp6 * temp4;\n        temp3 = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        quotient_upper = temp3 >> 0x10 | (quotient_upper - temp * temp4) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = temp4;\n        if (quotient_upper <= carry_over && carry_over - quotient_upper != 0) {\n          boolean_flag = CARRY4(quotient_upper,divisor);\n          quotient_upper = quotient_upper + divisor;\n          quotient = temp4 - 1;\n          if ((boolean_flag == false) && (quotient_upper <= carry_over && carry_over - quotient_upper != 0)) {\n            quotient = temp4 - 2;\n            quotient_upper = quotient_upper + divisor;\n          }\n        }\n        temp2 = (quotient_upper - carry_over) / temp;\n        temp4 = temp6 * temp2;\n        dividend_upper = temp3 & 0xffff | ((quotient_upper - carry_over) - temp * temp2) * 0x10000;\n        quotient_upper = temp2;\n        if (dividend_upper <= temp4 && temp4 - dividend_upper != 0) {\n          boolean_flag = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          quotient_upper = temp2 - 1;\n          if ((boolean_flag == false) && (dividend_upper <= temp4 && temp4 - dividend_upper != 0)) {\n            quotient_upper = temp2 - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - temp4;\n        quotient_upper = quotient_upper | quotient << 0x10;\n      }\n      quotient = dividend_upper / temp;\n      temp4 = temp6 * quotient;\n      temp3 = dividend >> 0x10 | (dividend_upper - temp * quotient) * 0x10000;\n      carry_over = quotient;\n      if (temp3 <= temp4 && temp4 - temp3 != 0) {\n        boolean_flag = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        carry_over = quotient - 1;\n        if ((boolean_flag == false) && (temp3 <= temp4 && temp4 - temp3 != 0)) {\n          carry_over = quotient - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp2 = (temp3 - temp4) / temp;\n      temp6 = temp6 * temp2;\n      temp = dividend & 0xffff | ((temp3 - temp4) - temp * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp <= temp6 && temp6 - temp != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp,divisor) == false) &&\n           (temp + divisor <= temp6 && temp6 - (temp + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | carry_over << 0x10;\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    quotient_upper = 0;\n    quotient = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_upper);\n    if (shift_amount == 0) {\n      if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n        quotient_upper = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_upper = 0;\n      }\n    }\n    else {\n      quotient_upper = 0x20 - shift_amount;\n      temp = dividend_upper >> (quotient_upper & 0xff);\n      temp6 = divisor >> (quotient_upper & 0xff) | divisor_upper << shift_amount;\n      temp4 = temp6 >> 0x10;\n      quotient = temp / temp4;\n      temp3 = (temp6 & 0xffff) * quotient;\n      carry_over = dividend_upper << shift_amount | dividend >> (quotient_upper & 0xff);\n      temp = carry_over >> 0x10 | (temp - temp4 * quotient) * 0x10000;\n      quotient_upper = quotient;\n      if (temp <= temp3 && temp3 - temp != 0) {\n        boolean_flag = CARRY4(temp,temp6);\n        temp = temp + temp6;\n        quotient_upper = quotient - 1;\n        if ((boolean_flag == false) && (temp <= temp3 && temp3 - temp != 0)) {\n          quotient_upper = quotient - 2;\n          temp = temp + temp6;\n        }\n      }\n      temp2 = (temp - temp3) / temp4;\n      temp5 = (temp6 & 0xffff) * temp2;\n      temp = carry_over & 0xffff | ((temp - temp3) - temp4 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp <= temp5 && temp5 - temp != 0) {\n        boolean_flag = CARRY4(temp,temp6);\n        temp = temp + temp6;\n        quotient = temp2 - 1;\n        if ((boolean_flag == false) && (temp <= temp5 && temp5 - temp != 0)) {\n          quotient = temp2 - 2;\n          temp = temp + temp6;\n        }\n      }\n      quotient = quotient | quotient_upper << 0x10;\n      temporary_long = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n      carry_over = (uint)((ulonglong)temporary_long >> 0x20);\n      quotient_upper = 0;\n      if ((temp - temp5 < carry_over) ||\n         ((temp - temp5 == carry_over && (dividend << shift_amount < (uint)temporary_long)))) {\n        quotient = quotient - 1;\n        quotient_upper = 0;\n      }\n    }\n  }\n  if (is_negative_dividend != 0) {\n    boolean_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_upper = -quotient_upper - (uint)boolean_flag;\n  }\n  return CONCAT44(quotient_upper,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "division_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "lVar1": "temporary_long",
                "uVar2": "quotient",
                "uVar3": "quotient_upper",
                "uVar4": "temp",
                "uVar5": "temp2",
                "iVar6": "shift_amount",
                "uVar7": "carry_over",
                "uVar8": "temp3",
                "uVar9": "is_negative_dividend",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "bVar13": "boolean_flag"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "div_mod_00084a80",
            "code": "\nulonglong divMod_00084a80(uint dividend,uint divisor,uint quotientHigh,uint quotientLow)\n\n{\n  longlong product;\n  uint divisorHigh;\n  uint quotient1;\n  uint remainder1;\n  uint product1;\n  uint dividendHigh;\n  uint remainder2;\n  uint quotient2;\n  uint product2;\n  int shift;\n  bool carry;\n  \n  if (quotientLow == 0) {\n    if (quotientHigh <= divisor) {\n      if (quotientHigh == 0) {\n        quotientHigh = 1 / 0;\n      }\n      shift = LZCOUNT(quotientHigh);\n      if (shift == 0) {\n        divisor = divisor - quotientHigh;\n        quotient1 = quotientHigh >> 0x10;\n        product1 = quotientHigh & 0xffff;\n        divisorHigh = 1;\n      }\n      else {\n        quotientHigh = quotientHigh << shift;\n        quotient2 = divisor >> (0x20U - shift & 0xff);\n        quotient1 = quotientHigh >> 0x10;\n        product2 = quotient2 / quotient1;\n        product1 = quotientHigh & 0xffff;\n        divisorHigh = product1 * product2;\n        dividendHigh = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        remainder1 = dividendHigh >> 0x10 | (quotient2 - quotient1 * product2) * 0x10000;\n        dividend = dividend << shift;\n        quotient2 = product2;\n        if (remainder1 <= divisorHigh && divisorHigh - remainder1 != 0) {\n          carry = CARRY4(remainder1,quotientHigh);\n          remainder1 = remainder1 + quotientHigh;\n          quotient2 = product2 - 1;\n          if ((carry == false) && (remainder1 <= divisorHigh && divisorHigh - remainder1 != 0)) {\n            quotient2 = product2 - 2;\n            remainder1 = remainder1 + quotientHigh;\n          }\n        }\n        remainder2 = (remainder1 - divisorHigh) / quotient1;\n        product2 = product1 * remainder2;\n        divisor = dividendHigh & 0xffff | ((remainder1 - divisorHigh) - quotient1 * remainder2) * 0x10000;\n        divisorHigh = remainder2;\n        if (divisor <= product2 && product2 - divisor != 0) {\n          carry = CARRY4(divisor,quotientHigh);\n          divisor = divisor + quotientHigh;\n          divisorHigh = remainder2 - 1;\n          if ((carry == false) && (divisor <= product2 && product2 - divisor != 0)) {\n            divisorHigh = remainder2 - 2;\n            divisor = divisor + quotientHigh;\n          }\n        }\n        divisor = divisor - product2;\n        divisorHigh = divisorHigh | quotient2 << 0x10;\n      }\n      product2 = divisor / quotient1;\n      remainder1 = product1 * product2;\n      dividendHigh = dividend >> 0x10 | (divisor - quotient1 * product2) * 0x10000;\n      quotient2 = product2;\n      if (dividendHigh <= remainder1 && remainder1 - dividendHigh != 0) {\n        carry = CARRY4(dividendHigh,quotientHigh);\n        dividendHigh = dividendHigh + quotientHigh;\n        quotient2 = product2 - 1;\n        if ((carry == false) && (dividendHigh <= remainder1 && remainder1 - dividendHigh != 0)) {\n          quotient2 = product2 - 2;\n          dividendHigh = dividendHigh + quotientHigh;\n        }\n      }\n      product2 = (dividendHigh - remainder1) / quotient1;\n      product1 = product1 * product2;\n      dividendHigh = dividend & 0xffff | ((dividendHigh - remainder1) - quotient1 * product2) * 0x10000;\n      quotient1 = product2;\n      if (dividendHigh <= product1 && product1 - dividendHigh != 0) {\n        quotient1 = product2 - 1;\n        if ((CARRY4(dividendHigh,quotientHigh) == false) &&\n           (dividendHigh + quotientHigh <= product1 && product1 - (dividendHigh + quotientHigh) != 0)) {\n          quotient1 = product2 - 2;\n        }\n      }\n      return CONCAT44(divisorHigh,quotient1 | quotient2 << 0x10);\n    }\n    shift = LZCOUNT(quotientHigh);\n    if (shift != 0) {\n      quotient2 = dividend >> (0x20U - shift & 0xff);\n      quotientHigh = quotientHigh << shift;\n      dividend = dividend << shift;\n      divisor = quotient2 | divisor << shift;\n    }\n    divisorHigh = quotientHigh >> 0x10;\n    quotient1 = divisor / divisorHigh;\n    product1 = (quotientHigh & 0xffff) * quotient1;\n    product2 = dividend >> 0x10 | (divisor - divisorHigh * quotient1) * 0x10000;\n    quotient2 = quotient1;\n    if (product2 <= product1 && product1 - product2 != 0) {\n      carry = CARRY4(product2,quotientHigh);\n      product2 = product2 + quotientHigh;\n      quotient2 = quotient1 - 1;\n      if ((carry == false) && (product2 <= product1 && product1 - product2 != 0)) {\n        quotient2 = quotient1 - 2;\n        product2 = product2 + quotientHigh;\n      }\n    }\n    dividendHigh = (product2 - product1) / divisorHigh;\n    quotient1 = (quotientHigh & 0xffff) * dividendHigh;\n    product1 = dividend & 0xffff | ((product2 - product1) - divisorHigh * dividendHigh) * 0x10000;\n    divisorHigh = dividendHigh;\n    if (product1 <= quotient1 && quotient1 - product1 != 0) {\n      divisorHigh = dividendHigh - 1;\n      if ((CARRY4(product1,quotientHigh) == false) &&\n         (product1 + quotientHigh <= quotient1 && quotient1 - (product1 + quotientHigh) != 0)) {\n        divisorHigh = dividendHigh - 2;\n      }\n    }\n    divisorHigh = divisorHigh | quotient2 << 0x10;\n  }\n  else {\n    if (divisor < quotientLow) {\n      return 0;\n    }\n    shift = LZCOUNT(quotientLow);\n    if (shift == 0) {\n      if ((quotientLow < divisor) || (quotientHigh <= dividend)) {\n        return 1;\n      }\n      divisorHigh = 0;\n    }\n    else {\n      divisorHigh = 0x20 - shift;\n      quotient2 = divisor >> (divisorHigh & 0xff);\n      quotient1 = quotientLow << shift | quotientHigh >> (divisorHigh & 0xff);\n      product1 = quotient1 >> 0x10;\n      remainder1 = quotient2 / product1;\n      product2 = (quotient1 & 0xffff) * remainder1;\n      dividendHigh = dividend >> (divisorHigh & 0xff) | divisor << shift;\n      divisorHigh = dividendHigh >> 0x10 | (quotient2 - product1 * remainder1) * 0x10000;\n      quotient2 = remainder1;\n      if (divisorHigh <= product2 && product2 - divisorHigh != 0) {\n        carry = CARRY4(divisorHigh,quotient1);\n        divisorHigh = divisorHigh + quotient1;\n        quotient2 = remainder1 - 1;\n        if ((carry == false) && (divisorHigh <= product2 && product2 - divisorHigh != 0)) {\n          quotient2 = remainder1 - 2;\n          divisorHigh = divisorHigh + quotient1;\n        }\n      }\n      remainder1 = (divisorHigh - product2) / product1;\n      remainder2 = (quotient1 & 0xffff) * remainder1;\n      product1 = dividendHigh & 0xffff | ((divisorHigh - product2) - product1 * remainder1) * 0x10000;\n      divisorHigh = remainder1;\n      if (product1 <= remainder2 && remainder2 - product1 != 0) {\n        carry = CARRY4(product1,quotient1);\n        product1 = product1 + quotient1;\n        divisorHigh = remainder1 - 1;\n        if ((carry == false) && (product1 <= remainder2 && remainder2 - product1 != 0)) {\n          divisorHigh = remainder1 - 2;\n          product1 = product1 + quotient1;\n        }\n      }\n      divisorHigh = divisorHigh | quotient2 << 0x10;\n      product = (ulonglong)divisorHigh * (ulonglong)(quotientHigh << shift);\n      quotient2 = (uint)((ulonglong)product >> 0x20);\n      if ((product1 - remainder2 < quotient2) || ((product1 - remainder2 == quotient2 && (dividend << shift < (uint)product)))\n         ) {\n        divisorHigh = divisorHigh - 1;\n      }\n    }\n  }\n  return (ulonglong)divisorHigh;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "div_mod_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotientHigh",
                "param_4": "quotientLow",
                "lVar1": "product",
                "uVar2": "divisorHigh",
                "uVar3": "quotient1",
                "uVar4": "remainder1",
                "uVar5": "product1",
                "uVar6": "dividendHigh",
                "uVar7": "remainder2",
                "uVar8": "quotient2",
                "uVar9": "product2",
                "iVar10": "shift",
                "bVar11": "carry"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 100326,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_000804a8",
            "FUN_000816a8"
        ]
    ],
    "locked_functions": []
}