{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "update_flag_if_zero_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 updateFlagIfZero_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "update_flag_if_zero_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPointer)\n\n{\n  int returnValue;\n  \n  *dataPointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    update_parameter_value_00081210(*(byte *)((int)dataPointer + 6),1);\n    update_parameter_value_00081318(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_parameters_000801b0",
            "code": "\nint processParameters_000801b0(int **parameters)\n\n{\n  bool isExceeded;\n  undefined parameterValue;\n  char counter;\n  int returnValue;\n  byte currentIndex;\n  \n  if (1 < *(byte *)((int)parameters + 6)) {\n    update_parameter_value_00081318(*(byte *)((int)parameters + 6),0);\n  }\n  isExceeded = false;\n  *(undefined *)((int)parameters + 0x49) = 0;\n  if (*(byte *)((int)parameters + 5) < 4) {\n    while (returnValue = (**(code **)(**parameters + 8))(), returnValue != 0) {\n      currentIndex = *(byte *)((int)parameters + 0x49);\n      parameterValue = (**(code **)(**parameters + 0xc))();\n      counter = *(char *)((int)parameters + 0x49);\n      *(undefined *)((int)parameters + currentIndex + 9) = parameterValue;\n      currentIndex = counter + 1;\n      *(byte *)((int)parameters + 0x49) = currentIndex;\n      if (0x3f < currentIndex) {\n        isExceeded = true;\n      }\n    }\n  }\n  *(short *)(parameters + 0x14) = *(short *)(parameters + 0x14) + 1;\n  if (isExceeded) {\n    counter = -3;\n    *(short *)(parameters + 0x15) = *(short *)(parameters + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)parameters + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_parameters_000801b0",
                "param_1": "parameters",
                "bVar1": "isExceeded",
                "uVar2": "parameterValue",
                "cVar3": "counter",
                "iVar4": "returnValue",
                "bVar5": "currentIndex"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int inputAddress,uint length)\n\n{\n  int currentAddress;\n  uint checksum;\n  char bitCounter;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentAddress = inputAddress; (currentAddress - inputAddress & 0xffU) < length; currentAddress = currentAddress + 1) {\n    checksum = checksum ^ *(byte *)(currentAddress + 9);\n    bitCounter = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCounter = bitCounter + -1;\n    } while (bitCounter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "inputAddress",
                "param_2": "length",
                "iVar1": "currentAddress",
                "uVar2": "checksum",
                "cVar3": "bitCounter",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_parameters_00080258",
            "code": "\nvoid updateChecksumAndParameters_00080258(int **arguments,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  byte byteValue;\n  undefined2 checksum;\n  int loopCounter;\n  uint byteValueAsUInt;\n  \n  byteValue = *(byte *)((int)arguments + 0x49);\n  byteValueAsUInt = (uint)byteValue;\n  checksum = calculate_checksum_0008021c(arguments,byteValueAsUInt,param2,param3,param3);\n  *(char *)((int)arguments + byteValueAsUInt + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)arguments + (byteValueAsUInt + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)arguments + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)arguments + 6)) {\n    update_parameter_value_00081318(*(byte *)((int)arguments + 6),1);\n  }\n  if (*(byte *)((int)arguments + 5) < 4) {\n    (**(code **)(**arguments + 4))(*arguments,(int)arguments + 9,*(undefined *)((int)arguments + 0x49));\n  }\n  if (1 < *(byte *)((int)arguments + 6)) {\n    update_parameter_value_00081318(*(byte *)((int)arguments + 6),0);\n  }\n  if (*(byte *)((int)arguments + 5) < 4) {\n    do {\n      loopCounter = (**(code **)(**arguments + 0xc))();\n    } while (-1 < loopCounter);\n  }\n  *(undefined *)((int)arguments + 0x49) = 0;\n  loopCounter = get_global_data_thunk_00081714();\n  arguments[0x17] = (int *)(loopCounter + (uint)*(ushort *)((int)arguments + 0x56));\n  *(short *)((int)arguments + 0x52) = *(short *)((int)arguments + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_parameters_00080258",
                "param_1": "arguments",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "bVar1": "byteValue",
                "uVar2": "checksum",
                "iVar3": "loopCounter",
                "uVar4": "byteValueAsUInt"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_input_and_store_data_000802da",
            "code": "\nint validateInputAndStoreData_000802da(int inputData,uint param1,uint param2,ushort *dataArray)\n\n{\n  char result;\n  byte byteVar;\n  undefined temp;\n  ushort ushortVar;\n  uint uintVar;\n  ushort *ptr;\n  undefined tempVar1;\n  undefined tempVar2;\n  ushort ushortVar2;\n  \n  tempVar1 = (undefined)param1;\n  tempVar2 = (undefined)(param1 >> 8);\n  ushortVar2 = (ushort)param2;\n  uintVar = param2 & 0xffff;\n  if (*(char *)(inputData + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(inputData + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((param1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(inputData + 9) = tempVar1;\n  *(undefined *)(inputData + 10) = tempVar2;\n  *(ushort **)(inputData + 0x4c) = dataArray;\n  *(char *)(inputData + 0xb) = (char)(param1 >> 0x18);\n  *(char *)(inputData + 0xc) = (char)(param1 >> 0x10);\n  temp = (undefined)(param2 >> 8);\n  switch(tempVar2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(inputData + 0xd) = temp;\n    break;\n  case 5:\n    ushortVar = *dataArray;\n    if (ushortVar != 0) {\n      ushortVar = 1;\n    }\n    *(char *)(inputData + 0xd) = -(char)ushortVar;\n    uintVar = 0;\n    break;\n  case 6:\n    *(char *)(inputData + 0xd) = (char)(*dataArray >> 8);\n    uintVar = (uint)*dataArray;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(ushortVar2 >> 3) & 0xfe;\n    if ((param2 & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(inputData + 0xe) = (char)param2;\n    *(undefined *)(inputData + 0xd) = temp;\n    *(byte *)(inputData + 0xf) = byteVar;\n    temp = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(inputData + 0xd) = temp;\n    *(char *)(inputData + 0xe) = (char)param2;\n    dataArray = dataArray + -1;\n    *(char *)(inputData + 0xf) = (char)uintVar * '\\x02';\n    *(undefined *)(inputData + 0x49) = 7;\n    ptr = dataArray + uintVar;\n    while (dataArray != ptr) {\n      byteVar = *(byte *)(inputData + 0x49);\n      *(char *)(inputData + (uint)byteVar + 9) = (char)(dataArray[1] >> 8);\n      uintVar = byteVar + 1 & 0xff;\n      *(char *)(inputData + 0x49) = (char)uintVar;\n      dataArray = dataArray + 1;\n      *(char *)(uintVar + inputData + 9) = (char)*dataArray;\n      *(byte *)(inputData + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(inputData + 0xe) = (char)uintVar;\n  temp = 6;\nLAB_0008034a:\n  *(undefined *)(inputData + 0x49) = temp;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_parameters_00080258(inputData);\n  *(undefined *)(inputData + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_input_and_store_data_000802da",
                "param_1": "inputData",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "dataArray",
                "cVar1": "result",
                "bVar2": "byteVar",
                "uVar3": "temp",
                "uVar4": "ushortVar",
                "uVar5": "uintVar",
                "puVar6": "ptr",
                "local_1c": "tempVar1",
                "local_1b": "tempVar2",
                "local_18": "ushortVar2"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_value_and_increment_000803d4",
            "code": "\nundefined4 checkValueAndIncrement_000803d4(int input)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input + 10) << 0x18) < 0) {\n    *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_value_and_increment_000803d4",
                "param_1": "input",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "byte_to_word_conversion_00080410",
            "code": "\nvoid byteToWordConversion_00080410(int data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combinedParams;\n  int offset;\n  byte byteIndex;\n  uint convertedByte;\n  int outputOffset;\n  \n  byteIndex = 0;\n  while( true ) {\n    convertedByte = (uint)byteIndex;\n    byteIndex = byteIndex + 1;\n    if (*(byte *)(data + 0xb) >> 1 <= convertedByte) break;\n    offset = (convertedByte * 2 + 3 & 0xff) + data;\n    outputOffset = *(int *)(data + 0x4c);\n    combinedParams = combine_params_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(data + 0xb),param4);\n    *(undefined2 *)(outputOffset + convertedByte * 2) = combinedParams;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "byte_to_word_conversion_00080410",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedParams",
                "iVar2": "offset",
                "bVar3": "byteIndex",
                "uVar4": "convertedByte",
                "iVar5": "outputOffset"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint processData_0008043e(int **dataPtr)\n\n{\n  char result;\n  uint callbackResult;\n  int *globalDataPtr;\n  int valueCheckResult;\n  uint unaff_r6;\n  \n  if (*(byte *)((int)dataPtr + 5) < 4) {\n    callbackResult = (**(code **)(**dataPtr + 8))();\n    unaff_r6 = callbackResult & 0xff;\n  }\n  globalDataPtr = (int *)get_global_data_thunk_00081714();\n  if (dataPtr[0x17] < globalDataPtr) {\n    *(undefined *)(dataPtr + 2) = 0xff;\n    *(undefined *)((int)dataPtr + 7) = 0;\n    *(short *)(dataPtr + 0x15) = *(short *)(dataPtr + 0x15) + 1;\n  }\n  else if (7 < unaff_r6) {\n    process_parameters_000801b0(dataPtr);\n    valueCheckResult = check_value_and_increment_000803d4(dataPtr);\n    if (valueCheckResult == 0) {\n      if (*(byte *)((int)dataPtr + 10) - 3 < 2) {\n        byte_to_word_conversion_00080410(dataPtr);\n      }\n      *(undefined *)((int)dataPtr + 7) = 0;\n      result = *(char *)((int)dataPtr + 0x49);\n    }\n    else {\n      *(undefined *)((int)dataPtr + 7) = 0;\n      result = (char)valueCheckResult;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "dataPtr",
                "cVar1": "result",
                "uVar2": "callbackResult",
                "piVar3": "globalDataPtr",
                "iVar4": "valueCheckResult"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_parameters_000804a8",
            "code": "\nundefined8 initialize_system_parameters_000804a8(void)\n\n{\n  int iVar1;\n  \n  update_parameter_value(1,0);\n  update_parameter_value(6,1);\n  update_parameter_value(0,1);\n  update_parameter_value(1,1);\n  update_other_parameter_value(0,0);\n  update_other_parameter_value(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_data(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_data();\n  iVar1 = get_global_data();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = get_global_data();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = get_global_data();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = get_global_data();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_parameters_000804a8",
                "update_parameter_value_00081210": "update_parameter_value",
                "update_parameter_value_00081318": "update_other_parameter_value",
                "initialize_data_00080164": "initialize_data",
                "get_global_data_thunk_00081714": "get_global_data"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint globalDataValue;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int tempVar;\n  uint *ptrVar;\n  undefined4 *ptrVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    globalDataValue = get_global_data_thunk_00081714();\n    if (DAT_200708c8 < globalDataValue) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_input_and_store_data_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = calculate_unsigned_hash_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_unsigned_value_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = calculate_unsigned_hash_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_input_and_store_data_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptrVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_input_and_store_data_000802da(&DAT_200709e4,*ptrVar2,ptrVar2[1],ptrVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_data_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptrVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_input_and_store_data_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_data_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrVar = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrVar = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (globalDataValue = get_global_data_thunk_00081714(), DAT_200708c0 < globalDataValue))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      tempVar = get_global_data_thunk_00081714();\n      DAT_200708c0 = tempVar + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      globalDataValue = get_global_data_thunk_00081714();\n      if (DAT_200708c0 < globalDataValue) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_global_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrVar = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      globalDataValue = get_global_data_thunk_00081714();\n      if (DAT_200708c0 < globalDataValue) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_global_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  globalDataValue = get_global_data_thunk_00081714();\n  if (DAT_200709e0 < globalDataValue) {\n    result1 = calculate_unsigned_value_0008189c(DAT_20070940);\n    result2 = calculate_floating_point_00081730(result1,DAT_200709c8);\n    result1 = DAT_200708c4;\n    DAT_20070930 = result2;\n    result3 = calculate_floating_point_00081734(result2,DAT_200708c4);\n    result3 = floating_point_arithmetic_00081944(result3,DAT_2007094c);\n    result3 = calculate_floating_point_00081734(result3,DAT_20070914);\n    DAT_2007094c = result3;\n    result1 = calculate_floating_point_00081730(result2,result1);\n    result1 = floating_point_arithmetic_00081944(result1,DAT_200709c4);\n    result1 = calculate_floating_point_00081730(result1,DAT_2007096c);\n    DAT_200709c4 = result1;\n    result4 = floating_point_arithmetic_00081944(result2,DAT_20070a4c);\n    result4 = calculate_floating_point_00081734(result4,result3);\n    calculate_floating_point_00081734(result4,result1);\n    DAT_20070910 = convert_unsigned_to_signed_00081cd0();\n    DAT_2007091c = calculate_unsigned_value_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = result2;\n    DAT_20070914 = result3;\n    DAT_2007096c = result1;\n    tempVar = get_global_data_thunk_00081714();\n    DAT_200709e0 = tempVar + DAT_20070970;\n  }\n  result1 = calculate_unsigned_value_0008189c(DAT_20070970);\n  tempVar = check_concatenation_validity_00081ca8(DAT_2007091c,result1);\n  if (tempVar != 0) {\n    DAT_2007091c = result1;\n  }\n  tempVar = check_concatenation_result_00081c94(DAT_2007091c,0);\n  if (tempVar != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = mask_function_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "globalDataValue",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "iVar6": "tempVar",
                "puVar7": "ptrVar",
                "puVar8": "ptrVar2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_and_setup_00080a68",
            "code": "\nvoid initializeAndSetup_00080a68(void)\n\n{\n  initializeMemoryAndCopyString(&DAT_20070954,\"\");\n  initiateRelocation(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_and_setup_00080a68",
                "initialize_memory_and_copy_string_00081682": "initializeMemoryAndCopyString",
                "initiate_relocation_00081d5c": "initiateRelocation"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_and_update_parameters_00080ae4",
            "code": "\n\n\nvoid initialize_and_update_parameters_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  initialize_memory_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_functions_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    update_parameter_value_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter_00080da0(0x400e0e00,1,0x300,0);\n  update_parameter_value_00081318(0,1);\n  update_parameter_00080da0(0x400e0e00,1,0xc00,0);\n  update_parameter_00080da0(0x400e0e00,1,0x3000,0);\n  update_parameter_00080da0(0x400e1400,2,0x30,0);\n  update_parameter_00080da0(0x400e1000,1,0xc00,0);\n  update_parameter_00080da0(0x400e0e00,1,3,0);\n  update_parameter_00080da0(0x400e1000,1,0xc000,0);\n  check_and_update_bit_00080e18(0x25);\n  calculate_threshold_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  update_flags_00081042(0x400c0000,0,0x300000,1);\n  update_parameters_00081034(0x400c0000,0,0);\n  set_param_value_0008106e(0x400c0000,0xffffffff);\n  initialize_memory_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_and_update_parameters_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_memory_00080c0c",
            "code": "\nvoid initialize_memory_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory_00080c0c_000813a8(&DAT_20070b84);\n  initialize_memory_00080c0c_000813a8(&DAT_20070ad8);\n  initialize_function(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initialize_memory_00080c0c_000813a8(&DAT_20070de4);\n  initialize_memory_00080c0c_000813a8(&DAT_20070e6c);\n  initialize_memory_00080c0c_000813a8(&DAT_20070ef4);\n  initialize_memory_00080c0c_000813a8(&DAT_20070a50);\n  initialize_memory_00080c0c_000813a8(&DAT_20070c84);\n  initialize_memory_00080c0c_000813a8(&DAT_20070d0c);\n  initialize_and_assign_value(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_assign_value(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_assign_value(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_memory_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "initialize_function_000814e4": "initialize_function",
                "initialize_and_assign_value_000815d4": "initialize_and_assign_value"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_difference_calculations_00080ce0",
            "code": "\nvoid checkAndExecuteDifferenceCalculations_00080ce0(void)\n\n{\n  int iVar1;\n  \n  iVar1 = calculateDifference(&DAT_20070b60);\n  if (iVar1 != 0) {\n    FUNC_00080aa8();\n  }\n  iVar1 = calculateDifference(&DAT_20070c0c);\n  if (iVar1 != 0) {\n    FUNC_00080ab8();\n  }\n  iVar1 = calculateDifference(&DAT_20070c34);\n  if (iVar1 != 0) {\n    FUNC_00080aba();\n  }\n  iVar1 = calculateDifference(&DAT_20070c5c);\n  if (iVar1 != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_difference_calculations_00080ce0",
                "calculate_difference_000813e4": "calculateDifference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_value_00080d2e",
            "code": "\nvoid updateParameterValue_00080d2e(int baseAddress,undefined4 option,uint newParamValue)\n\n{\n  uint tempValue;\n  \n  *(uint *)(baseAddress + 0x44) = newParamValue;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    tempValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newParamValue;\n    break;\n  case 2:\n    tempValue = *(uint *)(baseAddress + 0x70) | newParamValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = tempValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = newParamValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "option",
                "param_3": "newParamValue",
                "uVar1": "tempValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_data_00080d54",
            "code": "\nvoid updateData_00080d54(undefined4 *array,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flag << 0x1f) < 0;\n  array[0x11] = value;\n  if (isNegative) {\n    array[0x19] = value;\n  }\n  if (!isNegative) {\n    array[0x18] = value;\n  }\n  isNegative = (flag & 10) != 0;\n  if (isNegative) {\n    array[8] = value;\n  }\n  if (!isNegative) {\n    array[9] = value;\n  }\n  if (((int)(flag << 0x1e) < 0) || ((int)(flag << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_data_00080d54",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_params_00080d7a",
            "code": "\nvoid setParams_00080d7a(undefined4 *params,undefined4 value,int flag1,int flag2,int flag3)\n\n{\n  params[0x11] = value;\n  if (flag3 == 0) {\n    params[0x18] = value;\n  }\n  else {\n    params[0x19] = value;\n  }\n  if (flag2 == 0) {\n    params[0x15] = value;\n  }\n  else {\n    params[0x14] = value;\n  }\n  if (flag1 == 0) {\n    params[0xd] = value;\n  }\n  else {\n    params[0xc] = value;\n  }\n  params[4] = value;\n  *params = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_params_00080d7a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameter_00080da0",
            "code": "\nundefined4 updateParameter_00080da0(int paramAddress,int paramType,undefined4 paramValue,uint paramFlag)\n\n{\n  bool isNegative;\n  \n  switch(paramType) {\n  case 1:\n  case 2:\n    updateParameter_00080da0Value(paramAddress,paramType,paramValue);\n    isNegative = (int)(paramFlag << 0x1f) < 0;\n    *(undefined4 *)(paramAddress + 0x44) = paramValue;\n    if (isNegative) {\n      *(undefined4 *)(paramAddress + 100) = paramValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(paramAddress + 0x60) = paramValue;\n    }\n    break;\n  case 3:\n    updateData(paramAddress,paramValue,paramFlag,0x80d55,paramAddress);\n    break;\n  case 4:\n  case 5:\n    setParameters(paramAddress,paramValue,paramType == 5,(paramFlag << 0x1d) >> 0x1f,paramFlag & 1,paramType,paramValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameter_00080da0",
                "param_1": "paramAddress",
                "param_2": "paramType",
                "param_3": "paramValue",
                "param_4": "paramFlag",
                "bVar1": "isNegative",
                "update_parameter_value_00080d2e": "updateParameterValue",
                "update_data_00080d54": "updateData",
                "set_params_00080d7a": "setParameters"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_intersection_00080e04",
            "code": "\nuint checkIntersection_00080e04(int objectAddress,uint bitmask)\n\n{\n  uint result;\n  \n  result = *(uint *)(objectAddress + 8) & bitmask;\n  if (result != 0) {\n    if ((bitmask & *(uint *)(objectAddress + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_intersection_00080e04",
                "param_1": "objectAddress",
                "param_2": "bitmask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_update_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_update_bit_00080e18(uint input_value)\n\n{\n  uint bit_mask;\n  \n  if (input_value < 0x2d) {\n    if (input_value < 0x20) {\n      bit_mask = 1 << (input_value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (input_value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_update_bit_00080e18",
                "param_1": "input_value",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  variableArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "variableArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  process_data_loop_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *output,uint total_packets,int packet_size,int time_interval)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[72] = 0x202;\n  output[65] = 0;\n  output[69] = 0;\n  quotient = total_packets / (uint)(packet_size * 2);\n  if (total_packets == packet_size * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(time_interval * (int)(((ulonglong)total_packets / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "output",
                "param_2": "total_packets",
                "param_3": "packet_size",
                "param_4": "time_interval",
                "local_58": "thresholds",
                "param_1[1]": "output[1]",
                "param_1[0x48]": "output[72]",
                "param_1[0x41]": "output[65]",
                "param_1[0x45]": "output[69]",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_parameters_00081034",
            "code": "\nvoid updateParameters_00081034(int ptr,uint data1,uint data2)\n\n{\n  *(uint *)(ptr + 4) = data1 | *(uint *)(ptr + 4) | (data2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_parameters_00081034",
                "param_1": "ptr",
                "param_2": "data1",
                "param_3": "data2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid updateFlags_00081042(int dataAddress,uint mask,uint flag1,uint flag2)\n\n{\n  *(uint *)(dataAddress + 4) =\n       flag1 | *(uint *)(dataAddress + 4) | (mask & 0xf) << 0x18 | (flag2 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "dataAddress",
                "param_2": "mask",
                "param_3": "flag1",
                "param_4": "flag2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_memory_00081066",
            "code": "\nvoid initializeMemory_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_memory_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "terminate_program_00081184",
            "code": "\nresult terminateProgram_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "terminate_program_00081184",
                "undefined4": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_offset_0008118c",
            "code": "\nint calculateOffset_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_offset_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_value_000811ae",
            "code": "\nundefined4 get_default_value_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_value_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_000811be",
            "code": "\nint initialize_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_000811be",
                "undefined4": "int"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_default_000811c2",
            "code": "\nundefined4 initializeDefault_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_default_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_default_value_000811c6",
            "code": "\nundefined4 getDefaultValue_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_default_value_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "convert_bytes_to_uint_000811cc",
            "code": "\n\n\nuint convertBytesToUint_000811cc(undefined4 param1,int param2,uint param3)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)param3; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(param2 + index);\n  }\n  return param3 & ~((int)param3 >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "convert_bytes_to_uint_000811cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_data_thunk_00081714",
            "code": "\nundefined4 getGlobalData_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_data_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_parameter_value_00081210",
            "code": "\n\n\nint updateParameterValue_00081210(int parameterIndex,int newParameter)\n\n{\n  int returnValue;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte bitVar1;\n  byte bitVar2;\n  int tempVar4;\n  int tempVar5;\n  \n  returnValue = parameterIndex;\n  if ((&DAT_00084d24)[parameterIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[parameterIndex] & 0xf) == 4) {\n      returnValue = set_bit_0008105c(0x400c0000,(&DAT_00084d31)[parameterIndex * 0x1c]);\n    }\n    bitVar2 = (&DAT_20070d94)[parameterIndex];\n    bitVar1 = bitVar2 & 0xf;\n    if ((bitVar1 < 3) && (bitVar2 != 0)) {\n      if (bitVar1 == 2) {\n        if (newParameter == 0) {\n          return returnValue;\n        }\n      }\n      else if (bitVar1 == 1) {\n        if (newParameter == 2) {\n          return returnValue;\n        }\n      }\n      else if (bitVar1 == 3) {\n        if (newParameter == 1) {\n          return returnValue;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (newParameter != 1) {\nLAB_0008126c:\n      if (newParameter == 0) {\n        returnValue = parameterIndex * 0x1c;\n        check_and_update_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),0);\n        bitVar2 = (&DAT_20070d94)[parameterIndex] & 0xf0 | 2;\n      }\n      else {\n        if (newParameter != 2) {\n          return returnValue;\n        }\n        returnValue = parameterIndex * 0x1c;\n        check_and_update_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),1);\n        bitVar2 = (&DAT_20070d94)[parameterIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[parameterIndex] = bitVar2;\n      return returnValue;\n    }\n    tempVar4 = parameterIndex * 0x1c;\n    tempVar5 = *(int *)(&DAT_00084d18 + tempVar4);\n    if (bitVar2 >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    returnValue = update_parameter_00080da0(tempVar5,tempVar2,*(undefined4 *)(&DAT_00084d1c + tempVar4),\n                         *(undefined4 *)(&DAT_00084d28 + tempVar4));\n    (&DAT_20070d94)[parameterIndex] = (&DAT_20070d94)[parameterIndex] & 0xf0 | 3;\n    if (*(int *)(tempVar5 + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084d20 + tempVar4);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_parameter_value_00081210",
                "param_1": "parameterIndex",
                "param_2": "newParameter",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "bitVar1",
                "bVar6": "bitVar2",
                "iVar7": "tempVar4",
                "iVar8": "tempVar5"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_parameter_value_00081318",
            "code": "\nvoid updateParameterValue_00081318(int index,int value,undefined4 param)\n\n{\n  int intersectionResult;\n  undefined4 updatedValue;\n  int paramAddress;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      update_parameter_value_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    paramAddress = *(int *)(&DAT_00084d18 + index * 0x1c);\n    updatedValue = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    intersectionResult = check_intersection_00080e04(paramAddress,updatedValue);\n    if (intersectionResult == 0) {\n      if (value != 0) {\n        *(undefined4 *)(paramAddress + 100) = updatedValue;\n        return;\n      }\n      *(undefined4 *)(paramAddress + 0x60) = updatedValue;\n      return;\n    }\n    set_params_00080d7a(paramAddress,updatedValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_parameter_value_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "intersectionResult",
                "uVar2": "updatedValue",
                "iVar3": "paramAddress"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_rel_info_zero_00081388",
            "code": "\nvoid execute_if_rel_info_zero_00081388(void)\n\n{\n  if ((rel_info != 0xffffffff) &&\n     (rel_info = rel_info - 1,\n     rel_info == 0)) {\n    (*(function_ptr *)((int)&rel_array[0].r_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_rel_info_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "rel_info",
                "code": "function_ptr"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  clearMemory(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress",
                "memset_00082504": "clearMemory"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_and_store_value_000813c2",
            "code": "\nvoid updateAndStoreValue_000813c2(int baseAddress,undefined newValue)\n\n{\n  uint currentOffset;\n  \n  currentOffset = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (currentOffset != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = currentOffset;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_and_store_value_000813c2",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "currentOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculate_difference_000813e4(int input_param)\n\n{\n  return *(int *)(*(int *)(input_param + 0x10) + 0x80) - *(int *)(*(int *)(input_param + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_value_00081454",
            "code": "\nundefined4 updateValue_00081454(int arg1,undefined4 arg2)\n\n{\n  int var1;\n  uint var2;\n  \n  var1 = *(int *)(arg1 + 0x14);\n  if ((*(int *)(*(int *)(arg1 + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(var1 + 0x84) == *(int *)(var1 + 0x80))) {\n    *(undefined4 *)(*(int *)(arg1 + 0x18) + 0x1c) = arg2;\n  }\n  else {\n    var2 = *(int *)(var1 + 0x80) + 1U & 0x8000007f;\n    if ((int)var2 < 0) {\n      var2 = (var2 - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(var1 + 0x84) == var2);\n    *(char *)(var1 + *(int *)(var1 + 0x80)) = (char)arg2;\n    *(uint *)(*(int *)(arg1 + 0x14) + 0x80) = var2;\n    *(undefined4 *)(*(int *)(arg1 + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_value_00081454",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "var1",
                "uVar2": "var2"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *outputArray,undefined4 inputValue,undefined parameter1,undefined4 parameter2,\n                 undefined4 parameter3,undefined4 parameter4)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue;\n  *outputArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(outputArray + 7) = parameter1;\n  outputArray[4] = parameter3;\n  outputArray[8] = parameter2;\n  outputArray[5] = parameter4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "parameter1",
                "param_4": "parameter2",
                "param_5": "parameter3",
                "param_6": "parameter4"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "update_data_and_bit_00081508",
            "code": "\nvoid updateDataAndBit_00081508(int dataPointer,uint paramMultiplier,undefined4 paramValue)\n\n{\n  int offset;\n  undefined4 *data;\n  \n  check_and_update_bit_00080e18(*(undefined4 *)(dataPointer + 0x20));\n  data = *(undefined4 **)(dataPointer + 0x18);\n  data[0x48] = 0x202;\n  *data = 0xac;\n  data[1] = paramValue;\n  data[8] = relocations[6].relOffset / paramMultiplier >> 4;\n  data[3] = 0xffffffff;\n  data[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(dataPointer + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(dataPointer + 0x1c) & 0x1f);\n  offset = *(int *)(dataPointer + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(dataPointer + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *data = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "update_data_and_bit_00081508",
                "param_1": "dataPointer",
                "param_2": "paramMultiplier",
                "param_3": "paramValue",
                "iVar1": "offset",
                "puVar2": "data",
                "Elf32_Rel_ARRAY_20070000": "relocations",
                "r_offset": "relOffset"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_assign_value_000815d4",
            "code": "\nundefined4 * initializeAndAssignValue_000815d4(undefined4 *resultArray,undefined4 newValue)\n\n{\n  initialize_function_000814e4();\n  *resultArray = &PTR_update_value_00081454_1_000857d8;\n  resultArray[9] = newValue;\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_assign_value_000815d4",
                "param_1": "resultArray",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_params_000815f8",
            "code": "\nuint combineParams_000815f8(int inputValue,uint bitMask)\n\n{\n  return bitMask | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_params_000815f8",
                "param_1": "inputValue",
                "param_2": "bitMask"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "update_relocation_entry_000815fe",
            "code": "\nundefined4 * update_relocation_entry_000815fe(undefined4 *relocation_entry)\n\n{\n  update_relocation_entry_000815fe_00081e04(*relocation_entry);\n  return relocation_entry;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "update_relocation_entry_000815fe",
                "param_1": "relocation_entry"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_param_0008160c",
            "code": "\nvoid reset_param_0008160c(int *param_array)\n\n{\n  if (*param_array != 0) {\n    update_relocation_entry();\n  }\n  *param_array = 0;\n  param_array[2] = 0;\n  param_array[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_param_0008160c",
                "param_1": "param_array",
                "update_relocation_entry_00081e04": "update_relocation_entry"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_memory_and_return_status_00081622",
            "code": "\nint updateMemoryAndReturnStatus_00081622(int *memoryArray,int size,undefined4 value1,undefined4 value2)\n\n{\n  int status;\n  \n  status = update_memory_000825a0(*memoryArray,size + 1,value1,value2,value2);\n  if (status != 0) {\n    *memoryArray = status;\n    memoryArray[1] = size;\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_memory_and_return_status_00081622",
                "param_1": "memoryArray",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "status"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_memory_0008163a",
            "code": "\nundefined4 checkAndUpdateMemory_0008163a(int *memoryPointer,uint requiredSize)\n\n{\n  int updateStatus;\n  \n  if ((*memoryPointer == 0) || ((uint)memoryPointer[1] < requiredSize)) {\n    updateStatus = update_memory_and_return_status_00081622(memoryPointer);\n    if (updateStatus == 0) {\n      return 0;\n    }\n    if (memoryPointer[2] == 0) {\n      *(undefined *)*memoryPointer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_memory_0008163a",
                "param_1": "memoryPointer",
                "param_2": "requiredSize",
                "iVar1": "updateStatus"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_memory_and_copy_string_0008165c",
            "code": "\nundefined4 * update_memory_and_copy_string_0008165c(undefined4 *memory_buffer,undefined4 source_string,undefined4 new_memory_value)\n\n{\n  int memory_update_status;\n  \n  memory_update_status = check_and_update_memory_0008163a(memory_buffer,new_memory_value);\n  if (memory_update_status == 0) {\n    reset_param_0008160c(memory_buffer);\n  }\n  else {\n    memory_buffer[2] = new_memory_value;\n    copy_string_with_alignment_check_00082994(*memory_buffer,source_string);\n  }\n  return memory_buffer;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_memory_and_copy_string_0008165c",
                "param_1": "memory_buffer",
                "param_2": "source_string",
                "param_3": "new_memory_value",
                "iVar1": "memory_update_status"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_memory_and_copy_string_00081682",
            "code": "\nundefined4 * initializeMemoryAndCopyString_00081682(undefined4 *memoryArray,int inputValue)\n\n{\n  undefined4 leadingZerosCount;\n  \n  *memoryArray = 0;\n  memoryArray[1] = 0;\n  memoryArray[2] = 0;\n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082a50(inputValue);\n    update_memory_and_copy_string_0008165c(memoryArray,inputValue,leadingZerosCount);\n  }\n  return memoryArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_memory_and_copy_string_00081682",
                "param_1": "memoryArray",
                "param_2": "inputValue",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "process_data_loop_000816a8",
            "code": "\nvoid processDataLoop_000816a8(void)\n\n{\n  initializeDataMemory();\n  initializeAndUpdateParameters();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initializeSystemParameters();\n  do {\n    processData();\n    checkAndExecuteDifferenceCalculations();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "process_data_loop_000816a8",
                "initialize_data_memory_000816d4": "initializeDataMemory",
                "initialize_and_update_parameters_00080ae4": "initializeAndUpdateParameters",
                "initialize_system_parameters_000804a8": "initializeSystemParameters",
                "process_data_000805d0": "processData",
                "check_and_execute_difference_calculations_00080ce0": "checkAndExecuteDifferenceCalculations"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_memory_000816d4",
            "code": "\n\n\nvoid initializeDataMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_memory_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_variable_00081714",
            "code": "\nundefined4 get_global_variable_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_variable_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftAmount1;\n  int shiftAmount2;\n  uint value1;\n  uint value2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool isConditionTrue;\n  \n  value1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  isConditionTrue = result1 == 0;\n  if (!isConditionTrue) {\n    input4 = input2 << 1;\n    isConditionTrue = input4 == 0;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = result1 == input4;\n  }\n  shiftAmount1 = (int)result1 >> 0x18;\n  if (!isConditionTrue) {\n    isConditionTrue = shiftAmount1 == -1;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = (int)input4 >> 0x18 == -1;\n  }\n  if (isConditionTrue) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount1 == -1 || shiftAmount2 == -1) {\n      result1 = value1;\n      if (shiftAmount1 == -1) {\n        result1 = input1;\n      }\n      if (shiftAmount1 != -1 || shiftAmount2 != -1) {\n        value1 = result1;\n      }\n      isConditionTrue = (result1 & 0x7fffff) == 0;\n      if (isConditionTrue) {\n        isConditionTrue = (value1 & 0x7fffff) == 0;\n      }\n      if (isConditionTrue) {\n        isConditionTrue = result1 == value1;\n      }\n      if (!isConditionTrue) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ value1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = value1;\n      }\n      return input1;\n    }\n    if (input1 != value1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      value1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        value1 = value1 | 0x80000000;\n      }\n      return value1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  isConditionTrue = difference != 0;\n  result2 = result1;\n  if (isConditionTrue && result1 <= input4) {\n    result2 = result1 + difference;\n  }\n  if (isConditionTrue && result1 <= input4) {\n    value1 = value1 ^ input1;\n  }\n  if (isConditionTrue && result1 <= input4) {\n    input1 = input1 ^ value1;\n  }\n  if (isConditionTrue && result1 <= input4) {\n    value1 = value1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  value2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    value2 = -value2;\n  }\n  if (result2 == difference) {\n    value2 = value2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)value2 >> (difference & 0xff));\n  value2 = value2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    isConditionTrue = value2 != 0;\n    value2 = -value2;\n    result1 = -result1 - (uint)isConditionTrue;\n  }\n  if (result1 < 0x800000) {\n    value1 = value2 & 0x80000000;\n    value2 = value2 << 1;\n    result1 = result1 * 2 + (uint)(value1 != 0);\n    value1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)value1 < (int)difference) {\n        result1 = result1 >> (-(value1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (value1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    value1 = result2 - 1;\n    if (0xffffff < result1) {\n      value1 = result1 & 1;\n      result1 = result1 >> 1;\n      value2 = (uint)(value1 != 0) << 0x1f | value2 >> 1;\n      value1 = result2;\n      if (0xfd < result2) goto LAB_0008186a;\n    }\n  }\n  result1 = result1 + value1 * 0x800000 + (uint)(0x7fffffff < value2);\n  if (value2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftAmount1",
                "iVar2": "shiftAmount2",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "isConditionTrue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint input1,uint input2,undefined4 roundingMode,uint status)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint adjustedInput1;\n  uint adjustedResult;\n  uint numOfBitsShifted;\n  uint difference;\n  bool isZero;\n  \n  adjustedResult = input1 << 1;\n  isZero = adjustedResult == 0;\n  if (!isZero) {\n    status = input2 << 1;\n    isZero = status == 0;\n  }\n  if (!isZero) {\n    isZero = adjustedResult == status;\n  }\n  shiftedInput1 = (int)adjustedResult >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)status >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      adjustedResult = input2;\n      if (shiftedInput1 == -1) {\n        adjustedResult = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = adjustedResult;\n      }\n      isZero = (adjustedResult & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = adjustedResult == input2;\n      }\n      if (!isZero) {\n        adjustedResult = adjustedResult | 0x400000;\n      }\n      return adjustedResult;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (adjustedResult == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((adjustedResult & 0xff000000) == 0) {\n      adjustedResult = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        adjustedResult = adjustedResult | 0x80000000;\n      }\n      return adjustedResult;\n    }\n    if (adjustedResult < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  adjustedResult = adjustedResult >> 0x18;\n  status = status >> 0x18;\n  difference = status - adjustedResult;\n  isZero = difference != 0;\n  numOfBitsShifted = adjustedResult;\n  if (isZero && adjustedResult <= status) {\n    numOfBitsShifted = adjustedResult + difference;\n  }\n  if (isZero && adjustedResult <= status) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && adjustedResult <= status) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && adjustedResult <= status) {\n    input2 = input2 ^ input1;\n  }\n  if (status < adjustedResult) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  adjustedResult = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    adjustedResult = -adjustedResult;\n  }\n  adjustedInput1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    adjustedInput1 = -adjustedInput1;\n  }\n  if (numOfBitsShifted == difference) {\n    adjustedInput1 = adjustedInput1 ^ 0x800000;\n    if (numOfBitsShifted == 0) {\n      adjustedResult = adjustedResult ^ 0x800000;\n      numOfBitsShifted = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  adjustedResult = adjustedResult + ((int)adjustedInput1 >> (difference & 0xff));\n  adjustedInput1 = adjustedInput1 << (0x20 - difference & 0xff);\n  input1 = adjustedResult & 0x80000000;\n  if ((int)adjustedResult < 0) {\n    isZero = adjustedInput1 != 0;\n    adjustedInput1 = -adjustedInput1;\n    adjustedResult = -adjustedResult - (uint)isZero;\n  }\n  if (adjustedResult < 0x800000) {\n    difference = adjustedInput1 & 0x80000000;\n    adjustedInput1 = adjustedInput1 << 1;\n    adjustedResult = adjustedResult * 2 + (uint)(difference != 0);\n    difference = numOfBitsShifted - 2;\n    if ((adjustedResult & 0x800000) == 0) {\n      numOfBitsShifted = leadingZeroesCount(adjustedResult) - 8;\n      adjustedResult = adjustedResult << (numOfBitsShifted & 0xff);\n      if ((int)difference < (int)numOfBitsShifted) {\n        adjustedResult = adjustedResult >> (-(difference - numOfBitsShifted) & 0xff);\n      }\n      else {\n        adjustedResult = adjustedResult + (difference - numOfBitsShifted) * 0x800000;\n      }\n      return adjustedResult | input1;\n    }\n  }\n  else {\n    difference = numOfBitsShifted - 1;\n    if (0xffffff < adjustedResult) {\n      difference = adjustedResult & 1;\n      adjustedResult = adjustedResult >> 1;\n      adjustedInput1 = (uint)(difference != 0) << 0x1f | adjustedInput1 >> 1;\n      difference = numOfBitsShifted;\n      if (0xfd < numOfBitsShifted) goto LAB_0008186a;\n    }\n  }\n  adjustedResult = adjustedResult + difference * 0x800000 + (uint)(0x7fffffff < adjustedInput1);\n  if (adjustedInput1 == 0x80000000) {\n    adjustedResult = adjustedResult & 0xfffffffe;\n  }\n  return adjustedResult | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "roundingMode",
                "param_4": "status",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "adjustedInput1",
                "uVar4": "adjustedResult",
                "uVar5": "numOfBitsShifted",
                "uVar6": "difference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroesCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_unsigned_hash_00081894",
            "code": "\nuint calculateUnsignedHash_00081894(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constant;\n  uint bitMask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    bitMask = 0 << (shiftAmount & 0xff);\n    leadingZeros = constant + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < bitMask);\n    if (bitMask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constant + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_unsigned_hash_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "bitMask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_unsigned_value_0008189c",
            "code": "\nuint calculateUnsignedValue_0008189c(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  uint isNegative;\n  int result;\n  \n  isNegative = inputValue & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = countLeadingZeroes(inputValue);\n  shiftAmount = leadingZeroes - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeroes) {\n    leadingZeroes = 0 << (shiftAmount & 0xff);\n    isNegative = result + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeroes);\n    if (leadingZeroes == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = inputValue << leadingZeroes + 0x18;\n  isNegative = result + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_unsigned_value_0008189c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeroes"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "floating_point_arithmetic_00081944",
            "code": "\nuint floatingPointArithmetic_00081944(uint input1,uint input2,undefined4 constant1,uint constant2)\n\n{\n  longlong productCombined;\n  uint result;\n  uint exponent1;\n  int exponentSum;\n  int exponentDiff;\n  uint productLow32;\n  int temp;\n  uint productHigh32;\n  bool isZero1;\n  bool isNegative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  isZero1 = exponent1 == 0;\n  if (!isZero1) {\n    constant2 = input2 >> 0x17 & 0xff;\n    isZero1 = constant2 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = exponent1 == 0xff;\n  }\n  if (!isZero1) {\n    isZero1 = constant2 == 0xff;\n  }\n  if (isZero1) {\n    constant2 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || constant2 == 0xff) {\n      isZero1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero1 = input2 == 0;\n        result = input1;\n      }\n      if (!isZero1) {\n        isZero1 = input2 == 0x80000000;\n      }\n      productHigh32 = result;\n      if (((isZero1) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((constant2 == 0xff && (productHigh32 = input2, (input2 & 0x7fffff) != 0)))) {\n        return productHigh32 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    isZero1 = (input1 & 0x7fffffff) == 0;\n    if (!isZero1) {\n      isZero1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero1 = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input1 = input1 << 1;\n        isZero1 = (input1 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    isZero1 = constant2 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input2 = input2 << 1;\n        isZero1 = (input2 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      constant2 = constant2 - 1;\n    }\n    input2 = input2 | result;\n  }\n  exponentSum = exponent1 + constant2;\n  productHigh32 = input1 ^ input2;\n  exponent1 = input1 << 9;\n  isZero1 = exponent1 == 0;\n  if (!isZero1) {\n    input2 = input2 << 9;\n    isZero1 = input2 == 0;\n  }\n  if (isZero1) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = productHigh32 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(exponentSum,0x7f);\n    exponentDiff = exponentSum + -0x7f;\n    isZero1 = exponentDiff == 0;\n    temp = exponentDiff;\n    if (!isZero1 && 0x7e < exponentSum) {\n      isNegative = SBORROW4(0xff,exponentDiff);\n      temp = 0xff - exponentDiff;\n      isZero1 = exponentDiff == 0xff;\n    }\n    if (!isZero1 && temp < 0 == isNegative) {\n      result = result | exponentDiff * 0x800000;\n    }\n    if (!isZero1 && temp < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    productLow32 = 0;\n    isNegative = SBORROW4(exponentDiff,1);\n    productHigh32 = exponentSum - 0x80;\n    isZero1 = productHigh32 == 0;\n    exponent1 = productHigh32;\n  }\n  else {\n    productCombined = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    productLow32 = (uint)productCombined;\n    result = (uint)((ulonglong)productCombined >> 0x20);\n    isZero1 = result < 0x800000;\n    if (isZero1) {\n      result = result << 1;\n    }\n    if (isZero1) {\n      result = result | productLow32 >> 0x1f;\n      productLow32 = productLow32 << 1;\n    }\n    result = productHigh32 & 0x80000000 | result;\n    productHigh32 = (exponentSum + -0x7f) - (uint)isZero1;\n    isNegative = SBORROW4(productHigh32,0xfd);\n    isZero1 = productHigh32 == 0xfd;\n    exponent1 = productHigh32 - 0xfd;\n    if (productHigh32 < 0xfe) {\n      result = result + productHigh32 * 0x800000 + (uint)(0x7fffffff < productLow32);\n      if (productLow32 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero1 || (int)exponent1 < 0 != isNegative) {\n    isZero1 = (int)(productHigh32 + 0x19) < 0;\n    if (productHigh32 == 0xffffffe7 || isZero1 != SCARRY4(productHigh32,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (productHigh32 != 0xffffffe7 && isZero1 == SCARRY4(productHigh32,0x19)) {\n      exponent1 = (result << 1) >> (-productHigh32 & 0xff);\n      productHigh32 = result << (productHigh32 + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((productLow32 | productHigh32 << 1) == 0) {\n        exponent1 = exponent1 & ~(productHigh32 >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "floating_point_arithmetic_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "productLow32",
                "uVar8": "productHigh32",
                "iVar4": "exponentSum",
                "iVar5": "exponentDiff",
                "iVar7": "temp",
                "bVar9": "isZero1",
                "bVar10": "isNegative",
                "lVar1": "productCombined"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_and_xor_00081bf4",
            "code": "\nuint check_overflow_and_xor_00081bf4(uint input1,uint input2)\n\n{\n  bool isOverflow;\n  uint input1Shifted;\n  uint input2Shifted;\n  uint combinedInputs;\n  bool isCombinedZero;\n  \n  input1Shifted = input1 * 2;\n  input2Shifted = input2 * 2;\n  if (((int)input1Shifted >> 0x18 == -1 || (int)input2Shifted >> 0x18 == -1) &&\n     ((((int)input1Shifted >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2Shifted >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedInputs = input1Shifted | input2 & 0x7fffffff;\n  isCombinedZero = combinedInputs == 0;\n  if (!isCombinedZero) {\n    combinedInputs = input1 ^ input2;\n    isCombinedZero = combinedInputs == 0;\n  }\n  isOverflow = -1 < (int)combinedInputs;\n  if (isOverflow) {\n    input1 = input1Shifted + input2 * -2;\n    isCombinedZero = input1 == 0;\n  }\n  if ((isOverflow && input2Shifted <= input1Shifted) && !isCombinedZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isOverflow || input2Shifted > input1Shifted) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isCombinedZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_and_xor_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "isOverflow",
                "uVar2": "input1Shifted",
                "uVar3": "input2Shifted",
                "uVar4": "combinedInputs",
                "bVar5": "isCombinedZero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_parameters_00081c54",
            "code": "\nvoid concatenateParameters_00081c54(undefined4 dest,undefined4 src)\n\n{\n  concatenate_params_00081c5c(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_parameters_00081c54",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenateParams_00081c5c(undefined4 value1,undefined4 value2)\n\n{\n  check_overflow_and_xor_00081bf4();\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_concatenation_result_00081c94",
            "code": "\nbool check_concatenation_result_00081c94(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  concatenate_params_00081c5c();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_concatenation_result_00081c94",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_concatenation_validity_00081ca8",
            "code": "\nbool checkConcatenationValidity_00081ca8(void)\n\n{\n  undefined secondCondition;\n  undefined firstCondition;\n  \n  concatenate_parameters_00081c54();\n  return !(bool)firstCondition || (bool)secondCondition;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_concatenation_validity_00081ca8",
                "in_CY": "firstCondition",
                "in_ZR": "secondCondition"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_unsigned_to_signed_00081cd0",
            "code": "\nuint convertUnsignedToSigned_00081cd0(uint inputValue)\n\n{\n  uint shiftedInput;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedInput = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedInput;\n  if (shiftedInput < 0x9f && difference != 0) {\n    shiftedInput = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedInput = -shiftedInput;\n    }\n    return shiftedInput;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_unsigned_to_signed_00081cd0",
                "param_1": "inputValue",
                "uVar1": "shiftedInput",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "mask_function_00081d1c",
            "code": "\nuint mask_function_00081d1c(uint input_value)\n\n{\n  uint shifted_value;\n  \n  if (((input_value bitwise_and 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shifted_value = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shifted_value) {\n    return (input_value << 8 | 0x80000000) >> (shifted_value bitwise_and 0xff);\n  }\n  if ((shifted_value equal_to 0xffffff9f) bitwise_andbitwise_and ((input_value bitwise_and 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "mask_function_00081d1c",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "&": "bitwise_and",
                "==": "equal_to"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "initiate_relocation_00081d5c",
            "code": "\nundefined4 initiateRelocation_00081d5c(dword relocationAddress,dword value,dword extraData)\n\n{\n  dword *relocationEntry;\n  uint relocationIndex;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  relocationIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)relocationIndex) {\n    relocationEntry = (dword *)allocate_memory_from_rel_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    relocationIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (relocationIndex & 0xff);\n  relocationEntry[relocationIndex + 0x22] = relocationAddress;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[relocationIndex + 0x42] = extraData;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = relocationIndex + 1;\n  relocationEntry[relocationIndex + 2] = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "initiate_relocation_00081d5c",
                "param_1": "relocationAddress",
                "param_2": "value",
                "param_3": "extraData",
                "pdVar1": "relocationEntry",
                "uVar2": "relocationIndex",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctions_00081d7c(void)\n\n{\n  int iteration;\n  code **functionPointers;\n  \n  FUNC_00085858();\n  functionPointers = (code **)0x85860;\n  iteration = 0;\n  do {\n    iteration = iteration + 1;\n    functionPointers = functionPointers + 1;\n    (**functionPointers)();\n  } while (iteration != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar1": "iteration",
                "ppcVar2": "functionPointers"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "allocate_memory_from_rel_00081df4",
            "code": "\nvoid allocate_memory_from_rel_00081df4(undefined4 input_param)\n\n{\n  allocate_memory_00081e14(rel_array[140].offset,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "allocate_memory_from_rel_00081df4",
                "param_1": "input_param",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "update_relocation_entry_00081e04",
            "code": "\nvoid update_relocation_entry_00081e04(undefined4 relocation_offset)\n\n{\n  update_relocation_entry_00081e04_00083d9c(relocation_array[140].r_offset,relocation_offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "update_relocation_entry_00081e04",
                "param_1": "relocation_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081e14(undefined4 *ptr_output,uint size)\n\n{\n  dword rel_info;\n  int start_index;\n  uint aligned_size;\n  uint size_mask;\n  int next_index;\n  uint entry_size;\n  dword rel_offset;\n  uint link_offset;\n  int prev_index;\n  undefined *entry_ptr;\n  dword next_offset;\n  dword prev_offset;\n  int index;\n  dword *rel_array;\n  uint required_size;\n  undefined *new_entry_ptr;\n  dword *prel_offset_1;\n  uint uVar18;\n  \n  if (size + 0xb < 0x17) {\n    required_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    required_size = size + 0xb & 0xfffffff8;\n    if (((int)required_size < 0) || (required_size < size)) {\nLAB_00081e7a:\n      *ptr_output = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(ptr_output);\n  rel_info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (required_size < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + required_size);\n    if ((index != required_size + 0x20070464) ||\n       (start_index = index + 8, index = *(int *)(index + 0x14), start_index != index)) {\n      next_index = *(int *)(index + 0xc);\n      prev_index = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      required_size = *(uint *)(prev_index + 4);\n      start_index = *(int *)(index + 8);\n      *(int *)(start_index + 0xc) = next_index;\n      *(int *)(next_index + 8) = start_index;\n      *(uint *)(prev_index + 4) = required_size | 1;\n      FUNC_0008259c(ptr_output);\n      return (int *)(index + 8);\n    }\n    uVar18 = (required_size >> 3) + 2;\n  }\n  else {\n    uVar18 = required_size >> 9;\n    if (uVar18 == 0) {\n      start_index = 0x7e;\n      index = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      index = (required_size >> 6) + 0x38;\n      start_index = index * 2;\n    }\n    else if (uVar18 < 0x15) {\n      index = uVar18 + 0x5b;\n      start_index = index * 2;\n    }\n    else if (uVar18 < 0x55) {\n      index = (required_size >> 0xc) + 0x6e;\n      start_index = index * 2;\n    }\n    else if (uVar18 < 0x155) {\n      index = (required_size >> 0xf) + 0x77;\n      start_index = index * 2;\n    }\n    else if (uVar18 < 0x555) {\n      index = (required_size >> 0x12) + 0x7c;\n      start_index = index * 2;\n    }\n    else {\n      start_index = 0xfc;\n      index = 0x7e;\n    }\n    for (rel_offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[start_index]; start_index * 4 + 0x20070464U != rel_offset\n        ; rel_offset = *(dword *)(rel_offset + 0xc)) {\n      uVar18 = *(uint *)(rel_offset + 4) & 0xfffffffc;\n      next_index = uVar18 - required_size;\n      if (0xf < next_index) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < next_index) {\n        start_index = uVar18 + rel_offset;\n        required_size = *(uint *)(start_index + 4);\n        next_index = *(int *)(rel_offset + 0xc);\n        index = *(int *)(rel_offset + 8);\n        *(int *)(index + 0xc) = next_index;\n        *(int *)(next_index + 8) = index;\n        *(uint *)(start_index + 4) = required_size | 1;\n        FUNC_0008259c(ptr_output);\n        return (int *)(rel_offset + 8);\n      }\n    }\n    uVar18 = index + 1;\n  }\n  rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    aligned_size = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    size_mask = aligned_size & 0xfffffffc;\n    entry_size = size_mask - required_size;\n    if (0xf < (int)entry_size) {\n      rel_offset = required_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = required_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = rel_offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = rel_offset;\n      *(undefined4 *)(rel_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(rel_offset + 8) = 0x2007046c;\n      *(uint *)(rel_offset + 4) = entry_size | 1;\n      *(uint *)(rel_offset + entry_size) = entry_size;\n      FUNC_0008259c(ptr_output);\n      return (int *)(rel_info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)entry_size) {\n      *(uint *)(size_mask + rel_info + 4) = *(uint *)(size_mask + rel_info + 4) | 1;\n      FUNC_0008259c(ptr_output);\n      return (int *)(rel_info + 8);\n    }\n    if (size_mask < 0x200) {\n      size_mask = aligned_size & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + size_mask);\n      rel_offset = 1 << ((int)(aligned_size >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(rel_info + 8) = index;\n      *(uint *)(rel_info + 0xc) = size_mask + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = rel_offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + size_mask) = rel_info;\n      *(dword *)(index + 0xc) = rel_info;\n    }\n    else {\n      entry_size = aligned_size >> 9;\n      if (entry_size < 5) {\n        start_index = (aligned_size >> 6) + 0x38;\n        index = start_index * 2;\n      }\n      else if (entry_size < 0x15) {\n        start_index = entry_size + 0x5b;\n        index = start_index * 2;\n      }\n      else if (entry_size < 0x55) {\n        start_index = (aligned_size >> 0xc) + 0x6e;\n        index = start_index * 2;\n      }\n      else if (entry_size < 0x155) {\n        start_index = (aligned_size >> 0xf) + 0x77;\n        index = start_index * 2;\n      }\n      else if (entry_size < 0x555) {\n        start_index = (aligned_size >> 0x12) + 0x7c;\n        index = start_index * 2;\n      }\n      else {\n        index = 0xfc;\n        start_index = 0x7e;\n      }\n      rel_offset = index * 4 + 0x20070464;\n      next_offset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (next_offset == rel_offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (start_index >> 2 & 0xffU);\n        prev_offset = next_offset;\n      }\n      else {\n        do {\n          prev_offset = next_offset;\n          if ((*(uint *)(next_offset + 4) & 0xfffffffc) <= size_mask) break;\n          next_offset = *(dword *)(next_offset + 8);\n          prev_offset = next_offset;\n        } while (rel_offset != next_offset);\n        next_offset = *(dword *)(prev_offset + 0xc);\n      }\n      rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(rel_info + 0xc) = next_offset;\n      *(dword *)(rel_info + 8) = prev_offset;\n      *(dword *)(next_offset + 8) = rel_info;\n      *(dword *)(prev_offset + 0xc) = rel_info;\n    }\n  }\n  rel_info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  aligned_size = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (aligned_size <= rel_offset) {\n    if ((rel_offset & aligned_size) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        aligned_size = aligned_size << 1;\n        uVar18 = uVar18 + 4;\n      } while ((rel_offset & aligned_size) == 0);\n    }\n    do {\n      prel_offset_1 = &Elf32_Rel_ARRAY_20070000[uVar18 + 0x8c].r_info;\n      rel_array = prel_offset_1;\n      size_mask = uVar18;\n      do {\n        for (entry_ptr = (undefined *)rel_array[3]; rel_array != (dword *)entry_ptr;\n            entry_ptr = *(undefined **)(entry_ptr + 0xc)) {\n          entry_size = *(uint *)(entry_ptr + 4) & 0xfffffffc;\n          link_offset = entry_size - required_size;\n          if (0xf < (int)link_offset) {\n            start_index = *(int *)(entry_ptr + 8);\n            index = *(int *)(entry_ptr + 0xc);\n            new_entry_ptr = entry_ptr + required_size;\n            *(uint *)(entry_ptr + 4) = required_size | 1;\n            *(int *)(start_index + 0xc) = index;\n            *(int *)(index + 8) = start_index;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)new_entry_ptr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)new_entry_ptr;\n            *(undefined4 *)(new_entry_ptr + 0xc) = 0x2007046c;\n            *(undefined4 *)(new_entry_ptr + 8) = 0x2007046c;\n            *(uint *)(new_entry_ptr + 4) = link_offset | 1;\n            *(uint *)(new_entry_ptr + link_offset) = link_offset;\n            FUNC_0008259c(ptr_output);\n            return (int *)(entry_ptr + 8);\n          }\n          if (-1 < (int)link_offset) {\n            index = *(int *)(entry_ptr + 8);\n            start_index = *(int *)(entry_ptr + 0xc);\n            *(uint *)(entry_ptr + entry_size + 4) = *(uint *)(entry_ptr + entry_size + 4) | 1;\n            *(int *)(index + 0xc) = start_index;\n            *(int *)(start_index + 8) = index;\n            FUNC_0008259c(ptr_output);\n            return (int *)(entry_ptr + 8);\n          }\n        }\n        size_mask = size_mask + 1;\n        rel_array = rel_array + 2;\n      } while ((size_mask & 3) != 0);\n      do {\n        entry_size = uVar18 & 3;\n        entry_ptr = (undefined *)(prel_offset_1 + -2);\n        uVar18 = uVar18 - 1;\n        if (entry_size == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~aligned_size;\n          break;\n        }\n        prel_offset_1 = (dword *)*prel_offset_1;\n      } while (prel_offset_1 == (dword *)entry_ptr);\n      aligned_size = aligned_size * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= aligned_size &&\n           aligned_size - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (uVar18 = size_mask, aligned_size == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & aligned_size) == 0; aligned_size = aligned_size << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((required_size <= uVar18) &&\n     (aligned_size = uVar18 - required_size, rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)aligned_size))\n  goto LAB_0008211e;\n  aligned_size = Elf32_Rel_ARRAY_20070000[141].r_info + uVar18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    size_mask = required_size + DAT_20071190 + 0x10;\n  }\n  else {\n    size_mask = required_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  rel_offset = find_valid_offset_00082970(ptr_output,size_mask);\n  if ((rel_offset == 0xffffffff) || ((rel_offset < aligned_size && (rel_info != 0x20070464)))) {\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    entry_size = DAT_20071194 + size_mask;\n    DAT_20071194 = entry_size;\n    if ((aligned_size == rel_offset) && ((aligned_size & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = size_mask + uVar18 | 1;\n    }\n    else {\n      next_offset = rel_offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        next_offset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = entry_size + (rel_offset - aligned_size);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = next_offset;\n      aligned_size = rel_offset & 7;\n      if (aligned_size == 0) {\n        index = 0x1000;\n      }\n      else {\n        rel_offset = rel_offset + (8 - aligned_size);\n        index = 0x1008 - aligned_size;\n      }\n      index = index - (size_mask + rel_offset & 0xfff);\n      start_index = find_valid_offset_00082970(ptr_output,index);\n      if (start_index == -1) {\n        aligned_size = 1;\n        index = 0;\n      }\n      else {\n        aligned_size = (start_index - rel_offset) + index | 1;\n      }\n      entry_size = DAT_20071194 + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = rel_offset;\n      DAT_20071194 = entry_size;\n      *(uint *)(rel_offset + 4) = aligned_size;\n      if (rel_info != 0x20070464) {\n        if (uVar18 < 0x10) {\n          *(undefined4 *)(rel_offset + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar18 = uVar18 - 0xc & 0xfffffff8;\n        *(uint *)(rel_info + 4) = uVar18 | *(uint *)(rel_info + 4) & 1;\n        *(undefined4 *)(rel_info + uVar18 + 4) = 5;\n        *(undefined4 *)(rel_info + uVar18 + 8) = 5;\n        if (0xf < uVar18) {\n          update_relocation_entry_00083d9c(ptr_output,rel_info + 8);\n          entry_size = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < entry_size) {\n      DAT_2007118c = entry_size;\n    }\n    if (DAT_20071188 < entry_size) {\n      DAT_20071188 = entry_size;\n    }\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  aligned_size = uVar18 - required_size;\n  if ((uVar18 < required_size) || ((int)aligned_size < 0x10)) {\n    FUNC_0008259c(ptr_output);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = required_size + rel_offset;\n  *(uint *)(rel_offset + 4) = required_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = aligned_size | 1;\n  FUNC_0008259c(ptr_output);\n  return (int *)(rel_offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "ptr_output",
                "param_2": "size",
                "dVar1": "rel_info",
                "iVar2": "start_index",
                "uVar3": "aligned_size",
                "uVar4": "size_mask",
                "iVar5": "next_index",
                "uVar6": "entry_size",
                "dVar7": "rel_offset",
                "uVar8": "link_offset",
                "iVar9": "prev_index",
                "puVar10": "entry_ptr",
                "dVar11": "next_offset",
                "dVar12": "prev_offset",
                "iVar13": "index",
                "pdVar14": "rel_array",
                "uVar15": "required_size",
                "puVar16": "new_entry_ptr",
                "dVar17": "rel_offset_1"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *dstPtr;\n  undefined4 *dst;\n  undefined4 *src;\n  uint remaining;\n  uint bytesToCopy;\n  bool copyCondition;\n  \n  dst = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      bytesToCopy = length - 4;\n      if (3 < length) {\n        do {\n          dstPtr = source;\n          src = dst;\n          copyCondition = bytesToCopy != 0;\n          bytesToCopy = bytesToCopy - 1;\n          *(undefined *)src = *(undefined *)dstPtr;\n          dst = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)dstPtr + 1);\n        } while (copyCondition);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)dstPtr + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)dstPtr + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)dstPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      bytesToCopy = 4 - ((uint)destination & 3);\n      length = length - bytesToCopy;\n      dstPtr = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        dstPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dst = dstPtr;\n      source = src;\n      if ((bytesToCopy & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dst = (undefined4 *)((int)dstPtr + 2);\n        *(undefined2 *)dstPtr = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *dst = *source;\n    dst[1] = source[1];\n    dst[2] = source[2];\n    dst[3] = source[3];\n    dst[4] = source[4];\n    dst[5] = source[5];\n    dst[6] = source[6];\n    dst[7] = source[7];\n    dst[8] = source[8];\n    dst[9] = source[9];\n    dst[10] = source[10];\n    dst[0xb] = source[0xb];\n    dst[0xc] = source[0xc];\n    dst[0xd] = source[0xd];\n    dst[0xe] = source[0xe];\n    dst[0xf] = source[0xf];\n    dst = dst + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remaining = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *dst = *source;\n      dst[1] = source[1];\n      dst[2] = source[2];\n      dst[3] = source[3];\n      dst = dst + 4;\n      source = source + 4;\n      copyCondition = 0xf < remaining;\n      remaining = remaining - 0x10;\n    } while (copyCondition);\n  }\n  bytesToCopy = remaining + 0xc;\n  src = dst;\n  dstPtr = source;\n  if (0xfffffff3 < remaining) {\n    do {\n      source = dstPtr + 1;\n      *src = *dstPtr;\n      copyCondition = 3 < bytesToCopy;\n      bytesToCopy = bytesToCopy - 4;\n      dst = src + 1;\n      src = src + 1;\n      dstPtr = source;\n    } while (copyCondition);\n  }\nLAB_000823d0:\n  if (bytesToCopy + 4 != 0) {\n    dstPtr = dst;\n    src = source;\n    if ((bytesToCopy & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      dstPtr = (undefined4 *)((int)dst + 1);\n      *(undefined *)dst = *(undefined *)source;\n    }\n    if ((bytesToCopy + 4 & 2) != 0) {\n      *(undefined2 *)dstPtr = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dstPtr",
                "puVar2": "dst",
                "puVar3": "src",
                "uVar4": "remaining",
                "uVar5": "bytesToCopy",
                "bVar6": "copyCondition"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "memcpy_reverse_00082438",
            "code": "\nvoid memcpy_reverse_00082438(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int i;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_end_ptr;\n  uint count;\n  undefined *dest_end_ptr;\n  uint remainder;\n  \n  if ((src < dest) && (src_end_ptr = (undefined4 *)((int)src + length), dest < src_end_ptr)) {\n    dest_end_ptr = (undefined *)((int)dest + length);\n    i = length - 1;\n    if (length != 0) {\n      do {\n        src_end_ptr = (undefined4 *)((int)src_end_ptr + -1);\n        i = i + -1;\n        dest_end_ptr = dest_end_ptr + -1;\n        *dest_end_ptr = *(undefined *)src_end_ptr;\n      } while (i != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    src_end_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = src_end_ptr + 4;\n      *src_end_ptr = *src_ptr;\n      src_end_ptr[1] = src_ptr[1];\n      src_end_ptr[2] = src_ptr[2];\n      src_end_ptr[3] = src_ptr[3];\n      src_end_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    i = (length - 0x10 >> 4) + 1;\n    remainder = length & 0xf;\n    src = src + i * 4;\n    dest = dest + i * 4;\n    count = remainder;\n    src_end_ptr = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        count = count - 4;\n        *src_end_ptr = *src_ptr;\n        src_end_ptr = src_end_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < count);\n      i = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + i);\n      src = (undefined4 *)((int)src + i);\n      remainder = length & 3;\n    }\n    length = remainder;\n    if (length == 0) {\n      return;\n    }\n  }\n  src_end_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)src_end_ptr + 1);\n    *(undefined *)src_end_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    src_end_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "memcpy_reverse_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "src_end_ptr",
                "uVar5": "count",
                "puVar6": "dest_end_ptr",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "memset_00082504",
            "code": "\nvoid memset_00082504(undefined4 *dest,undefined value,uint num_bytes)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value_32;\n  uint remaining_bytes;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = num_bytes == 0;\n    dest_ptr = dest;\n    num_bytes = num_bytes - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = num_bytes == 0;\n      dest_ptr = dest;\n      num_bytes = num_bytes - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < num_bytes) {\n    value_32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_bytes = num_bytes;\n    dest_ptr = dest;\n    if (0xf < num_bytes) {\n      remaining_bytes = num_bytes - 0x10;\n      do {\n        *dest_ptr = value_32;\n        dest_ptr[1] = value_32;\n        dest_ptr[2] = value_32;\n        dest_ptr[3] = value_32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_bytes & 0xfffffff0) + 0x10));\n      num_bytes = num_bytes & 0xf;\n      dest = dest + ((remaining_bytes >> 4) + 1) * 4;\n      remaining_bytes = num_bytes;\n      dest_ptr = dest;\n      if (num_bytes < 4) goto LAB_00082580;\n    }\n    do {\n      num_bytes = num_bytes - 4;\n      *dest = value_32;\n      dest = dest + 1;\n    } while (3 < num_bytes);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_bytes - 4 & 0xfffffffc) + 4);\n    num_bytes = remaining_bytes & 3;\n  }\nLAB_00082580:\n  if (num_bytes != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(num_bytes + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "memset_00082504",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "num_bytes",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value_32",
                "uVar4": "remaining_bytes",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "update_memory_000825a0",
            "code": "\nvoid updateMemory_000825a0(undefined4 offset,undefined4 param)\n\n{\n  allocate_or_update_memory_000825b0(relArray[140].r_offset,offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "update_memory_000825a0",
                "param_1": "offset",
                "param_2": "param",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_or_update_memory_000825b0",
            "code": "\nint * allocate_or_update_memory_000825b0(undefined4 *input_data,int *memory_block,uint block_size)\n\n{\n  dword temp_dword;\n  int *result_ptr;\n  uint temp_uint1;\n  int temp_int1;\n  uint temp_uint2;\n  int temp_int2;\n  int *temp_ptr1;\n  uint temp_uint3;\n  uint temp_uint4;\n  int *temp_ptr2;\n  \n  if (memory_block == (int *)0x0) {\n    result_ptr = (int *)allocate_memory_00081e14(input_data,block_size);\n    return result_ptr;\n  }\n  FUNC_00082598();\n  temp_uint2 = memory_block[-1];\n  temp_uint3 = temp_uint2 & 0xfffffffc;\n  result_ptr = memory_block + -2;\n  if (block_size + 0xb < 0x17) {\n    temp_uint4 = 0x10;\n  }\n  else {\n    temp_uint4 = block_size + 0xb & 0xfffffff8;\n    if ((int)temp_uint4 < 0) goto LAB_0008267c;\n  }\n  if (temp_uint4 < block_size) {\nLAB_0008267c:\n    *input_data = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_uint3 < (int)temp_uint4) {\n    temp_dword = (int)result_ptr + temp_uint3;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_dword) {\n      temp_uint1 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_dword = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(temp_uint4 + 0x10) <= (int)(temp_uint1 + temp_uint3)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)result_ptr + temp_uint4;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uint1 + temp_uint3) - temp_uint4 | 1;\n        memory_block[-1] = temp_uint4 | memory_block[-1] & 1U;\n        FUNC_0008259c(input_data);\n        return memory_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_dword + 4) & 0xfffffffe) + temp_dword + 4) & 1) == 0) {\n      temp_uint1 = *(uint *)(temp_dword + 4) & 0xfffffffc;\n      if ((int)temp_uint4 <= (int)(temp_uint1 + temp_uint3)) {\n        temp_int2 = *(int *)(temp_dword + 0xc);\n        temp_int1 = *(int *)(temp_dword + 8);\n        *(int *)(temp_int1 + 0xc) = temp_int2;\n        *(int *)(temp_int2 + 8) = temp_int1;\n        temp_uint3 = temp_uint1 + temp_uint3;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_uint1 = 0;\n      temp_dword = 0;\n    }\n    if (-1 < (int)(temp_uint2 << 0x1f)) {\n      temp_ptr2 = (int *)((int)result_ptr - memory_block[-2]);\n      temp_uint2 = (temp_ptr2[1] & 0xfffffffcU) + temp_uint3;\n      if (temp_dword != 0) {\n        if (temp_dword == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(temp_uint4 + 0x10) <= (int)(temp_uint1 + temp_uint2)) {\n            result_ptr = temp_ptr2 + 2;\n            temp_int1 = *result_ptr;\n            temp_int2 = temp_ptr2[3];\n            temp_uint3 = temp_uint3 - 4;\n            *(int *)(temp_int1 + 0xc) = temp_int2;\n            *(int *)(temp_int2 + 8) = temp_int1;\n            if (temp_uint3 < 0x25) {\n              temp_ptr1 = result_ptr;\n              if (0x13 < temp_uint3) {\n                temp_ptr2[2] = *memory_block;\n                temp_ptr2[3] = memory_block[1];\n                if (temp_uint3 < 0x1c) {\n                  memory_block = memory_block + 2;\n                  temp_ptr1 = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_block[2];\n                  temp_ptr2[5] = memory_block[3];\n                  if (temp_uint3 == 0x24) {\n                    temp_ptr2[6] = memory_block[4];\n                    temp_ptr1 = memory_block + 5;\n                    memory_block = memory_block + 6;\n                    temp_ptr2[7] = *temp_ptr1;\n                    temp_ptr1 = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_block = memory_block + 4;\n                    temp_ptr1 = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *memory_block;\n              temp_ptr1[1] = memory_block[1];\n              temp_ptr1[2] = memory_block[2];\n            }\n            else {\n              memcpy_reverse_00082438(result_ptr,memory_block);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_ptr2 + temp_uint4;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uint1 + temp_uint2) - temp_uint4 | 1;\n            temp_ptr2[1] = temp_uint4 | temp_ptr2[1] & 1U;\n            FUNC_0008259c(input_data);\n            return result_ptr;\n          }\n        }\n        else {\n          temp_uint1 = temp_uint1 + temp_uint2;\n          if ((int)temp_uint4 <= (int)temp_uint1) {\n            temp_int2 = *(int *)(temp_dword + 0xc);\n            temp_int1 = *(int *)(temp_dword + 8);\n            *(int *)(temp_int1 + 0xc) = temp_int2;\n            *(int *)(temp_int2 + 8) = temp_int1;\n            temp_ptr1 = temp_ptr2 + 2;\n            temp_int1 = *temp_ptr1;\n            temp_int2 = temp_ptr2[3];\n            temp_uint2 = temp_uint3 - 4;\n            *(int *)(temp_int1 + 0xc) = temp_int2;\n            *(int *)(temp_int2 + 8) = temp_int1;\n            temp_uint3 = temp_uint1;\n            if (temp_uint2 < 0x25) {\n              result_ptr = temp_ptr1;\n              if (0x13 < temp_uint2) {\n                temp_ptr2[2] = *memory_block;\n                temp_ptr2[3] = memory_block[1];\n                if (temp_uint2 < 0x1c) {\n                  memory_block = memory_block + 2;\n                  result_ptr = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_block[2];\n                  temp_ptr2[5] = memory_block[3];\n                  if (temp_uint2 == 0x24) {\n                    temp_ptr2[6] = memory_block[4];\n                    result_ptr = memory_block + 5;\n                    memory_block = memory_block + 6;\n                    temp_ptr2[7] = *result_ptr;\n                    result_ptr = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_block = memory_block + 4;\n                    result_ptr = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *result_ptr = *memory_block;\n              result_ptr[1] = memory_block[1];\n              result_ptr[2] = memory_block[2];\n              temp_uint2 = temp_ptr2[1];\n              result_ptr = temp_ptr2;\n              memory_block = temp_ptr1;\n            }\n            else {\n              memcpy_reverse_00082438(temp_ptr1,memory_block);\n              temp_uint2 = temp_ptr2[1];\n              result_ptr = temp_ptr2;\n              memory_block = temp_ptr1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)temp_uint4 <= (int)temp_uint2) {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp_int1 = *temp_ptr1;\n        temp_int2 = temp_ptr2[3];\n        temp_uint1 = temp_uint3 - 4;\n        *(int *)(temp_int1 + 0xc) = temp_int2;\n        *(int *)(temp_int2 + 8) = temp_int1;\n        temp_uint3 = temp_uint2;\n        if (temp_uint1 < 0x25) {\n          result_ptr = temp_ptr1;\n          if (0x13 < temp_uint1) {\n            temp_ptr2[2] = *memory_block;\n            temp_ptr2[3] = memory_block[1];\n            if (temp_uint1 < 0x1c) {\n              memory_block = memory_block + 2;\n              result_ptr = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = memory_block[2];\n              temp_ptr2[5] = memory_block[3];\n              if (temp_uint1 == 0x24) {\n                temp_ptr2[6] = memory_block[4];\n                result_ptr = memory_block + 5;\n                memory_block = memory_block + 6;\n                temp_ptr2[7] = *result_ptr;\n                result_ptr = temp_ptr2 + 8;\n              }\n              else {\n                memory_block = memory_block + 4;\n                result_ptr = temp_ptr2 + 6;\n              }\n            }\n          }\n          *result_ptr = *memory_block;\n          result_ptr[1] = memory_block[1];\n          result_ptr[2] = memory_block[2];\n          temp_uint2 = temp_ptr2[1];\n          result_ptr = temp_ptr2;\n          memory_block = temp_ptr1;\n        }\n        else {\n          memcpy_reverse_00082438(temp_ptr1,memory_block);\n          temp_uint2 = temp_ptr2[1];\n          result_ptr = temp_ptr2;\n          memory_block = temp_ptr1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr2 = (int *)allocate_memory_00081e14(input_data,block_size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000826a4;\n    temp_uint2 = memory_block[-1];\n    if (temp_ptr2 + -2 != (int *)((temp_uint2 & 0xfffffffe) + (int)result_ptr)) {\n      temp_uint3 = temp_uint3 - 4;\n      if (temp_uint3 < 0x25) {\n        result_ptr = memory_block;\n        temp_ptr1 = temp_ptr2;\n        if (0x13 < temp_uint3) {\n          *temp_ptr2 = *memory_block;\n          temp_ptr2[1] = memory_block[1];\n          if (temp_uint3 < 0x1c) {\n            result_ptr = memory_block + 2;\n            temp_ptr1 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = memory_block[2];\n            temp_ptr2[3] = memory_block[3];\n            if (temp_uint3 == 0x24) {\n              temp_ptr2[4] = memory_block[4];\n              temp_ptr2[5] = memory_block[5];\n              result_ptr = memory_block + 6;\n              temp_ptr1 = temp_ptr2 + 6;\n            }\n            else {\n              result_ptr = memory_block + 4;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *result_ptr;\n        temp_ptr1[1] = result_ptr[1];\n        temp_ptr1[2] = result_ptr[2];\n      }\n      else {\n        memcpy_reverse_00082438(temp_ptr2,memory_block);\n      }\n      update_relocation_entry_00083d9c(input_data,memory_block);\n      goto LAB_000826a4;\n    }\n    temp_uint3 = temp_uint3 + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_uint1 = temp_uint3 - temp_uint4;\n  temp_ptr2 = memory_block;\n  if (temp_uint1 < 0x10) {\n    result_ptr[1] = temp_uint2 & 1 | temp_uint3;\n    *(uint *)((int)result_ptr + temp_uint3 + 4) = *(uint *)((int)result_ptr + temp_uint3 + 4) | 1;\n  }\n  else {\n    result_ptr[1] = temp_uint2 & 1 | temp_uint4;\n    *(uint *)((int)result_ptr + temp_uint4 + 4) = temp_uint1 | 1;\n    *(uint *)((int)result_ptr + temp_uint1 + temp_uint4 + 4) = *(uint *)((int)result_ptr + temp_uint1 + temp_uint4 + 4) | 1;\n    update_relocation_entry_00083d9c(input_data,(int)result_ptr + temp_uint4 + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(input_data);\n  return temp_ptr2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_or_update_memory_000825b0",
                "param_1": "input_data",
                "param_2": "memory_block",
                "param_3": "block_size",
                "dVar1": "temp_dword",
                "piVar2": "result_ptr",
                "uVar3": "temp_uint1",
                "iVar4": "temp_int1",
                "uVar5": "temp_uint2",
                "iVar6": "temp_int2",
                "piVar7": "temp_ptr1",
                "uVar8": "temp_uint3",
                "uVar9": "temp_uint4",
                "piVar10": "temp_ptr2"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "find_valid_offset_00082970",
            "code": "\nvoid findValidOffset_00082970(int *result,undefined4 inputValue)\n\n{\n  int offset;\n  \n  DAT_200711bc = 0;\n  offset = calculate_offset_0008118c(inputValue);\n  if ((offset == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "find_valid_offset_00082970",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_check_00082994",
            "code": "\nvoid copyStringWithAlignmentCheck_00082994(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *alignedSrc;\n  uint currentWord;\n  uint nextWord;\n  uint *currentDest;\n  bool isZeroCharacter;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    alignedSrc = src;\n    if (((uint)src & 1) != 0) {\n      alignedSrc = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = alignedSrc;\n    if (((uint)alignedSrc & 2) != 0) {\n      src = (uint *)((int)alignedSrc + 2);\n      currentShort = *(ushort *)alignedSrc;\n      isZeroCharacter = (currentShort & 0xff) == 0;\n      if (isZeroCharacter) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZeroCharacter = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZeroCharacter) {\n        return;\n      }\n    }\n  }\n  currentWord = *src;\n  alignedSrc = src + 1;\n  currentDest = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_000829f8;\n    currentDest = dest + 1;\n    *dest = currentWord;\n    alignedSrc = src + 2;\n    currentWord = src[1];\n  }\n  while( true ) {\n    nextPointer = alignedSrc + 1;\n    nextWord = *alignedSrc;\n    dest = currentDest;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    dest = currentDest + 1;\n    *currentDest = currentWord;\n    currentWord = nextWord;\n    if ((nextWord + 0xfefefeff & ~nextWord & 0x80808080) != 0) break;\n    alignedSrc = alignedSrc + 2;\n    currentWord = *nextPointer;\n    currentDest = currentDest + 2;\n    *dest = nextWord;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)currentWord;\n    nextWord = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (nextWord != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "alignedSrc",
                "uVar5": "currentWord",
                "uVar6": "nextWord",
                "puVar7": "currentDest",
                "bVar8": "isZeroCharacter"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *ptrInput;\n  uint value;\n  bool isZero;\n  \n  ptrInput = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptrInput;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptrInput = ptrInput + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptrInput;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptrInput",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr3;\n  uint count;\n  undefined4 *ptr5;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = process_data_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  ptr3 = param3[2];\n  ptr1 = *param3;\n  while (ptr3 != (int *)0x0) {\n    value1 = ptr1[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr5 = (undefined4 *)(*ptr1 + -4);\n      count = 0;\n      do {\n        ptr5 = ptr5 + 1;\n        result = process_data_00083c40(param1,*ptr5,param2);\n        count = count + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (value2 != count);\n      ptr3 = param3[2];\n    }\n    ptr3 = (int *)((int)ptr3 - (value1 & 0xfffffffc));\n    param3[2] = ptr3;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr3",
                "uVar4": "count",
                "puVar5": "ptr5",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = initialize_and_update_relocation_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_command_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_character_sequence_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          compute_result_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = compute_result_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_command_0008378c",
            "code": "\nint processCommand_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int executeResult;\n  undefined *buffer [2];\n  undefined4 bufferSize1;\n  ushort flag1;\n  undefined2 flag2;\n  undefined *pointer;\n  undefined4 bufferSize2;\n  undefined4 value;\n  undefined4 variable1;\n  undefined4 variable2;\n  undefined4 variable3;\n  undefined stackBuffer [1024];\n  \n  variable3 = *(undefined4 *)(param2 + 100);\n  variable1 = *(undefined4 *)(param2 + 0x1c);\n  flag2 = *(undefined2 *)(param2 + 0xe);\n  variable2 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = stackBuffer;\n  flag1 = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  value = 0;\n  pointer = buffer[0];\n  result = FUNC_00082b38(param1,buffer);\n  if ((-1 < result) && (executeResult = execute_command_00083adc(param1,buffer), executeResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag1 << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_command_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "executeResult",
                "local_488": "buffer",
                "local_480": "bufferSize1",
                "local_47c": "flag1",
                "local_47a": "flag2",
                "local_478": "pointer",
                "local_474": "bufferSize2",
                "local_470": "value",
                "local_46c": "variable1",
                "local_464": "variable2",
                "local_424": "variable3",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = execute_command_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "initialize_and_update_relocation_00083808",
            "code": "\nundefined4 initialize_and_update_relocation_00083808(undefined4 *p_result,int *p_data)\n\n{\n  int data_segment;\n  int initial_value;\n  uint flag;\n  ushort param_2[3];\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_00083b14();\n  }\n  param_2[3] = *(ushort *)(p_data + 3);\n  flag = (uint)param_2[3];\n  if ((int)(flag << 0x1c) < 0) {\n    initial_value = p_data[4];\n  }\n  else {\n    if (-1 < (int)(flag << 0x1b)) {\n      *p_result = 9;\n      *(ushort *)(p_data + 3) = param_2[3] | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(flag << 0x1d) < 0) {\n      if ((int *)p_data[0xc] != (int *)0x0) {\n        if ((int *)p_data[0xc] != p_data + 0x10) {\n          update_relocation_entry_00083d9c(p_result);\n          param_2[3] = *(ushort *)(p_data + 3);\n        }\n        p_data[0xc] = 0;\n      }\n      initial_value = p_data[4];\n      param_2[3] = param_2[3] & 0xffdb;\n      *p_data = initial_value;\n      p_data[1] = 0;\n    }\n    else {\n      initial_value = p_data[4];\n    }\n    *(ushort *)(p_data + 3) = param_2[3] | 8;\n    flag = (uint)(param_2[3] | 8);\n  }\n  if ((initial_value == 0) && ((flag & 0x280) != 0x200)) {\n    initialize_memory_000842a4(p_result,p_data);\n    flag = (uint)*(ushort *)(p_data + 3);\n    initial_value = p_data[4];\n  }\n  if ((flag & 1) == 0) {\n    data_segment = 0;\n    if (-1 < (int)(flag << 0x1e)) {\n      data_segment = p_data[5];\n    }\n    p_data[2] = data_segment;\n  }\n  else {\n    p_data[6] = -p_data[5];\n    p_data[2] = 0;\n  }\n  if ((initial_value == 0) && ((int)((uint)*(ushort *)(p_data + 3) << 0x18) < 0)) {\n    *(ushort *)(p_data + 3) = *(ushort *)(p_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "initialize_and_update_relocation_00083808",
                "param_1": "p_result",
                "param_2": "p_data",
                "iVar1": "data_segment",
                "iVar2": "initial_value",
                "uVar3": "flag",
                "uVar4": "param_2[3]"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "return_original_value_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 return_original_value_00083974(undefined4 value)\n\n{\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00083974": "return_original_value_00083974",
                "param_1": "value"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "execute_command_00083adc",
            "code": "\nundefined4 executeCommand_00083adc(int *commandData,int *commandResult)\n\n{\n  int *relocationEntry;\n  int remainingSize;\n  ushort commandStatus;\n  uint tempVar;\n  int bytesProcessed;\n  code *commandHandler;\n  undefined4 returnValue;\n  int savedValue;\n  \n  if ((commandData != (int *)0x0) && (commandData[0xe] == 0)) {\n    initialize_data_00083b14();\n  }\n  if (*(short *)(commandResult + 3) == 0) {\n    return 0;\n  }\n  commandStatus = *(ushort *)(commandResult + 3);\n  if ((int)((uint)commandStatus << 0x1c) < 0) {\n    savedValue = commandResult[4];\n    if (savedValue == 0) {\n      return 0;\n    }\n    remainingSize = *commandResult;\n    if ((commandStatus & 3) == 0) {\n      bytesProcessed = commandResult[5];\n    }\n    else {\n      bytesProcessed = 0;\n    }\n    *commandResult = savedValue;\n    remainingSize = remainingSize - savedValue;\n    commandResult[2] = bytesProcessed;\n    do {\n      if (remainingSize < 1) {\n        return 0;\n      }\n      bytesProcessed = (*(code *)commandResult[9])(commandData,commandResult[7],savedValue,remainingSize,returnValue);\n      remainingSize = remainingSize - bytesProcessed;\n      savedValue = savedValue + bytesProcessed;\n    } while (0 < bytesProcessed);\nLAB_00083a54:\n    *(ushort *)(commandResult + 3) = *(ushort *)(commandResult + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(commandResult + 3) = commandStatus | 0x800;\n  if ((commandResult[1] < 1) && (commandResult[0xf] < 1)) {\n    return 0;\n  }\n  commandHandler = (code *)commandResult[10];\n  if (commandHandler == (code *)0x0) {\n    return 0;\n  }\n  tempVar = (uint)(commandStatus | 0x800);\n  savedValue = *commandData;\n  *commandData = 0;\n  if ((commandStatus & 0x1000) == 0) {\n    remainingSize = (*commandHandler)(commandData,commandResult[7],tempVar & 0x1000,1);\n    if ((remainingSize == -1) && (bytesProcessed = *commandData, bytesProcessed != 0)) {\n      if ((bytesProcessed == 0x1d) || (bytesProcessed == 0x16)) {\n        *commandData = savedValue;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    tempVar = (uint)*(ushort *)(commandResult + 3);\n    commandHandler = (code *)commandResult[10];\n  }\n  else {\n    remainingSize = commandResult[0x14];\n  }\n  if (((int)(tempVar << 0x1d) < 0) && (remainingSize = remainingSize - commandResult[1], commandResult[0xc] != 0)) {\n    remainingSize = remainingSize - commandResult[0xf];\n  }\n  remainingSize = (*commandHandler)(commandData,commandResult[7],remainingSize,0);\n  if (remainingSize == -1) {\n    bytesProcessed = *commandData;\n    if (bytesProcessed != 0) {\n      if ((bytesProcessed != 0x1d) && (bytesProcessed != 0x16)) {\n        *(ushort *)(commandResult + 3) = *(ushort *)(commandResult + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(commandResult + 3) = *(ushort *)(commandResult + 3) & 0xf7ff;\n      *commandResult = commandResult[4];\n      commandResult[1] = 0;\n      goto LAB_00083a00;\n    }\n    commandStatus = *(ushort *)(commandResult + 3) & 0xf7ff;\n    commandResult[1] = 0;\n    *(ushort *)(commandResult + 3) = commandStatus;\n    *commandResult = commandResult[4];\n  }\n  else {\n    commandStatus = *(ushort *)(commandResult + 3) & 0xf7ff;\n    *commandResult = commandResult[4];\n    *(ushort *)(commandResult + 3) = commandStatus;\n    commandResult[1] = 0;\n  }\n  if ((int)((uint)commandStatus << 0x13) < 0) {\n    commandResult[0x14] = remainingSize;\n  }\nLAB_00083a00:\n  relocationEntry = (int *)commandResult[0xc];\n  *commandData = savedValue;\n  if (relocationEntry == (int *)0x0) {\n    return 0;\n  }\n  if (relocationEntry != commandResult + 0x10) {\n    update_relocation_entry_00083d9c(commandData);\n  }\n  commandResult[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "execute_command_00083adc",
                "param_1": "commandData",
                "param_2": "commandResult",
                "piVar1": "relocationEntry",
                "iVar2": "remainingSize",
                "uVar3": "commandStatus",
                "uVar4": "tempVar",
                "iVar5": "bytesProcessed",
                "pcVar6": "commandHandler",
                "unaff_r4": "returnValue",
                "iVar7": "savedValue"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_00083b14",
            "code": "\nvoid initializeData_00083b14(int dataPointer)\n\n{\n  undefined4 *pointer1;\n  undefined4 *pointer2;\n  \n  if (*(int *)(dataPointer + 0x38) == 0) {\n    pointer1 = *(undefined4 **)(dataPointer + 4);\n    *(undefined **)(dataPointer + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataPointer + 0x2e4) = 3;\n    *(int *)(dataPointer + 0x2e8) = dataPointer + 0x2ec;\n    *(undefined4 *)(dataPointer + 0x2e0) = 0;\n    *(undefined2 *)(pointer1 + 3) = 4;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    *(undefined2 *)((int)pointer1 + 0xe) = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    memset_00082504(pointer1 + 0x17,0,8);\n    pointer2 = *(undefined4 **)(dataPointer + 8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)pointer2 + 0xe) = 1;\n    *(undefined2 *)(pointer2 + 3) = 9;\n    *pointer2 = 0;\n    pointer2[1] = 0;\n    pointer2[2] = 0;\n    pointer2[0x19] = 0;\n    pointer2[4] = 0;\n    pointer2[5] = 0;\n    pointer2[6] = 0;\n    memset_00082504(pointer2 + 0x17,0,8);\n    pointer1 = *(undefined4 **)(dataPointer + 0xc);\n    pointer2[7] = pointer2;\n    pointer2[8] = &LAB_00084440_1;\n    pointer2[9] = 0x84465;\n    pointer2[10] = 0x8449d;\n    pointer2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(pointer1 + 3) = 0x12;\n    *(undefined2 *)((int)pointer1 + 0xe) = 2;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    memset_00082504(pointer1 + 0x17,0,8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataPointer + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_00083b14",
                "param_1": "dataPointer",
                "puVar1": "pointer1",
                "puVar2": "pointer2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 arg1,uint arg2,byte **arg3)\n\n{\n  int relocationInfo;\n  uint returnValue;\n  uint byteValue;\n  byte *bytePointer;\n  uint loopCounter;\n  byte localByte;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(arg3 + 3) << 0x12)) {\n    *(ushort *)(arg3 + 3) = *(ushort *)(arg3 + 3) | 0x2000;\n    arg3[0x19] = (byte *)((uint)arg3[0x19] | 0x2000);\n  }\n  relocationInfo = get_relocation_info_00084298();\n  if ((relocationInfo == 1) && (arg2 - 1 < 0xff)) {\n    byteValue = arg2 & 0xff;\n    localByte = (byte)byteValue;\n    returnValue = 1;\n  }\n  else {\n    returnValue = process_data_0008456c(arg1,&localByte,arg2,arg3 + 0x17);\n    if (returnValue == 0xffffffff) {\n      *(ushort *)(arg3 + 3) = *(ushort *)(arg3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (returnValue == 0) {\n      return arg2;\n    }\n    byteValue = (uint)localByte;\n  }\n  loopCounter = 0;\n  do {\n    bytePointer = arg3[2] + -1;\n    arg3[2] = bytePointer;\n    if ((int)bytePointer < 0) {\n      if ((int)arg3[6] <= (int)bytePointer) {\n        **arg3 = (byte)byteValue;\n        bytePointer = *arg3;\n        byteValue = (uint)*bytePointer;\n        if (byteValue != 10) goto LAB_00083c90;\n      }\n      relocationInfo = execute_command_000844c4(arg1,byteValue,arg3);\n      if (relocationInfo == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **arg3 = (byte)byteValue;\n      bytePointer = *arg3;\nLAB_00083c90:\n      *arg3 = bytePointer + 1;\n    }\n    if (returnValue <= loopCounter + 1) {\n      return arg2;\n    }\n    byteValue = (uint)byteArray[loopCounter];\n    loopCounter = loopCounter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "iVar1": "relocationInfo",
                "uVar2": "returnValue",
                "uVar3": "byteValue",
                "pbVar4": "bytePointer",
                "uVar5": "loopCounter",
                "local_1c": "localByte",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_relocation_entry_00083d00",
            "code": "\nundefined4 updateRelocationEntry_00083d00(undefined4 baseAddress,int currentOffset)\n\n{\n  int validOffset1;\n  uint relInfo;\n  int newOffset;\n  \n  FUNC_00082598();\n  relInfo = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((relInfo - currentOffset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    validOffset1 = find_valid_offset_00082970(baseAddress,0);\n    if (validOffset1 == Elf32_Rel_ARRAY_20070000[141].r_info + relInfo) {\n      validOffset1 = find_valid_offset_00082970(baseAddress,-newOffset);\n      if (validOffset1 != -1) {\n        DAT_20071194 = DAT_20071194 - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relInfo - newOffset | 1;\n        FUNC_0008259c(baseAddress);\n        return 1;\n      }\n      newOffset = find_valid_offset_00082970(baseAddress,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(baseAddress);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_relocation_entry_00083d00",
                "param_1": "baseAddress",
                "param_2": "currentOffset",
                "iVar1": "validOffset1",
                "uVar2": "relInfo",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_entry_00083d9c",
            "code": "\nvoid updateRelocationEntry_00083d9c(undefined4 param,int relocationEntryPtr)\n\n{\n  int index1;\n  bool isSpecialCase1;\n  uint flags;\n  dword entryPtr1;\n  int index2;\n  uint offset;\n  dword entryPtr2;\n  uint size;\n  dword entryPtr3;\n  \n  if (relocationEntryPtr == 0) {\n    return;\n  }\n  FUNC_00082598();\n  flags = *(uint *)(relocationEntryPtr + -4);\n  entryPtr2 = relocationEntryPtr - 8;\n  offset = flags & 0xfffffffe;\n  entryPtr1 = entryPtr2 + offset;\n  size = *(uint *)(entryPtr1 + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == entryPtr1) {\n    size = size + offset;\n    if (-1 < (int)(flags << 0x1f)) {\n      entryPtr2 = entryPtr2 - *(int *)(relocationEntryPtr + -8);\n      index2 = *(int *)(entryPtr2 + 0xc);\n      index1 = *(int *)(entryPtr2 + 8);\n      size = size + *(int *)(relocationEntryPtr + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    entryPtr1 = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(entryPtr2 + 4) = size | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = entryPtr2;\n    if (entryPtr1 <= size) {\n      update_relocation_entry_00083d00(param,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(entryPtr1 + 4) = size;\n    if ((flags & 1) == 0) {\n      entryPtr2 = entryPtr2 - *(int *)(relocationEntryPtr + -8);\n      index1 = *(int *)(entryPtr2 + 8);\n      offset = offset + *(int *)(relocationEntryPtr + -8);\n      if (index1 == 0x2007046c) {\n        isSpecialCase1 = true;\n      }\n      else {\n        index2 = *(int *)(entryPtr2 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isSpecialCase1 = false;\n      }\n    }\n    else {\n      isSpecialCase1 = false;\n    }\n    if (-1 < *(int *)(entryPtr1 + size + 4) << 0x1f) {\n      offset = offset + size;\n      index1 = *(int *)(entryPtr1 + 8);\n      if ((!isSpecialCase1) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = entryPtr2;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = entryPtr2;\n        *(undefined4 *)(entryPtr2 + 0xc) = 0x2007046c;\n        *(undefined4 *)(entryPtr2 + 8) = 0x2007046c;\n        *(uint *)(entryPtr2 + 4) = offset | 1;\n        *(uint *)(entryPtr2 + offset) = offset;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(entryPtr1 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(entryPtr2 + 4) = offset | 1;\n    *(uint *)(entryPtr2 + offset) = offset;\n    if (!isSpecialCase1) {\n      if (offset < 0x200) {\n        flags = offset & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(entryPtr2 + 8) = index1;\n        *(uint *)(entryPtr2 + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags) = entryPtr2;\n        *(dword *)(index1 + 0xc) = entryPtr2;\n        FUNC_0008259c(param);\n        return;\n      }\n      flags = offset >> 9;\n      if (flags < 5) {\n        index1 = (offset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x15) {\n        index1 = flags + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x55) {\n        index1 = (offset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x155) {\n        index1 = (offset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x555) {\n        index1 = (offset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      entryPtr3 = index2 * 4 + 0x20070464;\n      entryPtr1 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (entryPtr1 == entryPtr3) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        entryPtr3 = entryPtr1;\n      }\n      else {\n        do {\n          if ((*(uint *)(entryPtr1 + 4) & 0xfffffffc) <= offset) break;\n          entryPtr1 = *(dword *)(entryPtr1 + 8);\n        } while (entryPtr3 != entryPtr1);\n        entryPtr3 = *(dword *)(entryPtr1 + 0xc);\n      }\n      *(dword *)(entryPtr2 + 0xc) = entryPtr3;\n      *(dword *)(entryPtr2 + 8) = entryPtr1;\n      *(dword *)(entryPtr3 + 8) = entryPtr2;\n      *(dword *)(entryPtr1 + 0xc) = entryPtr2;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_entry_00083d9c",
                "param_1": "param",
                "param_2": "relocationEntryPtr",
                "iVar1": "index1",
                "bVar2": "isSpecialCase1",
                "uVar3": "flags",
                "dVar4": "entryPtr1",
                "iVar5": "index2",
                "uVar6": "offset",
                "dVar7": "entryPtr2",
                "uVar8": "size",
                "dVar9": "entryPtr3"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *inputData,uint **relocationData)\n\n{\n  int result;\n  uint temp1;\n  uint temp2;\n  ushort flag1;\n  uint flag2;\n  uint *ptr1;\n  uint *ptr2;\n  uint length;\n  uint size;\n  uint counter;\n  uint retval;\n  uint offset;\n  \n  if (relocationData[2] != (uint *)0x0) {\n    flag1 = *(ushort *)(inputData + 3);\n    flag2 = (uint)flag1;\n    if (((int)(flag2 << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *relocationData;\n    }\n    else {\n      result = initialize_and_update_relocation_00083808(output,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag1 = *(ushort *)(inputData + 3);\n      flag2 = (uint)flag1;\n      ptr2 = *relocationData;\n    }\n    if ((flag1 & 2) == 0) {\n      temp1 = flag2 & 2;\n      counter = temp1;\n      length = temp1;\n      offset = temp1;\n      if ((flag2 & 1) == 0) {\n        temp1 = 0;\n        counter = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            counter = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp1 = *ptr1;\n          }\n          length = inputData[2];\n          if ((int)(flag2 << 0x16) < 0) {\n            if (temp1 < length) {\n              flag2 = *inputData;\n              length = temp1;\n            }\n            else if ((flag2 & 0x480) == 0) {\n              flag2 = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              length = result + 1 + temp1;\n              size = (int)(inputData[5] * 3) / 2;\n              if (length <= size) {\n                length = size;\n              }\n              if ((int)(flag2 << 0x15) < 0) {\n                size = allocate_memory_00081e14(output,length);\n                if (size == 0) {\n                  *output = 0xc;\n                  flag1 = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(size,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = allocate_or_update_memory_000825b0(output);\n                if (size == 0) {\n                  update_relocation_entry_00083d9c(output,inputData[4]);\n                  flag1 = *(ushort *)(inputData + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              flag2 = size + result;\n              inputData[4] = size;\n              inputData[5] = length;\n              *inputData = flag2;\n              inputData[2] = length - result;\n              length = temp1;\n            }\n            memcpy_reverse_00082438(flag2,counter,length);\n            inputData[2] = inputData[2] - length;\n            *inputData = *inputData + length;\n            length = temp1;\n          }\n          else if ((inputData[4] < *inputData) || (flag2 = inputData[5], temp1 < flag2)) {\n            if (temp1 < length) {\n              length = temp1;\n            }\n            memcpy_reverse_00082438(*inputData,counter,length);\n            flag2 = inputData[2];\n            inputData[2] = flag2 - length;\n            *inputData = *inputData + length;\n            if ((flag2 - length == 0) && (result = execute_command_00083adc(output,inputData), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            length = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              length = temp1;\n            }\n            length = (*(code *)inputData[9])(output,inputData[7],counter,(length / flag2) * flag2);\n            if ((int)length < 1) goto LAB_0008402e;\n          }\n          ptr1 = relocationData[2];\n          counter = counter + length;\n          temp1 = temp1 - length;\n          relocationData[2] = (uint *)((int)ptr1 - length);\n          if ((uint *)((int)ptr1 - length) == (uint *)0x0) break;\n          flag2 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            length = *ptr2;\n            temp1 = ptr2[1];\n            offset = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (offset == 0) {\n            result = find_character_sequence_00084384(length,10,temp1);\n            if (result == 0) {\n              counter = temp1 + 1;\n              offset = 1;\n            }\n            else {\n              counter = (result + 1) - length;\n              offset = 1;\n            }\n          }\n          size = *inputData;\n          flag2 = counter;\n          if (temp1 <= counter) {\n            flag2 = temp1;\n          }\n          temp2 = inputData[5];\n          if ((inputData[4] < size) && (retval = inputData[2] + temp2, (int)retval < (int)flag2)) {\n            memcpy_reverse_00082438(size,length,retval);\n            *inputData = *inputData + retval;\n            result = execute_command_00083adc(output,inputData);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)flag2 < (int)temp2) {\n            memcpy_reverse_00082438(size,length,flag2);\n            inputData[2] = inputData[2] - flag2;\n            *inputData = flag2 + *inputData;\n            retval = flag2;\n          }\n          else {\n            retval = (*(code *)inputData[9])(output,inputData[7],length,temp2);\n            if ((int)retval < 1) goto LAB_0008402e;\n          }\n          counter = counter - retval;\n          if (counter == 0) {\n            result = execute_command_00083adc(output,inputData);\n            if (result != 0) goto LAB_0008402e;\n            offset = 0;\n          }\n          ptr1 = relocationData[2];\n          length = length + retval;\n          temp1 = temp1 - retval;\n          relocationData[2] = (uint *)((int)ptr1 - retval);\n        } while ((uint *)((int)ptr1 - retval) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      flag2 = 0;\n      do {\n        while( true ) {\n          counter = flag2;\n          if (0x7ffffbff < flag2) {\n            counter = 0x7ffffc00;\n          }\n          if (flag2 != 0) break;\n          temp1 = *ptr2;\n          flag2 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(output,inputData[7],temp1,counter);\n        if (result < 1) {\nLAB_0008402e:\n          flag1 = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = flag1 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = relocationData[2];\n        temp1 = temp1 + result;\n        flag2 = flag2 - result;\n        relocationData[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "inputData",
                "param_3": "relocationData",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "flag1",
                "uVar5": "flag2",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "length",
                "uVar9": "size",
                "uVar10": "counter",
                "uVar11": "retval",
                "local_2c": "offset"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationTable[274].relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_info": "relocationInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_memory_000842a4",
            "code": "\nvoid initializeMemory_000842a4(int inputParam,int *outputParam)\n\n{\n  ushort value;\n  int memorySize;\n  int allocatedMemory;\n  uint tempValue;\n  bool isSpecialCase;\n  undefined memoryBuffer [4];\n  uint localValue;\n  \n  value = *(ushort *)(outputParam + 3);\n  tempValue = (uint)value;\n  if ((int)(tempValue << 0x1e) < 0) {\n    *outputParam = (int)outputParam + 0x43;\n    outputParam[4] = (int)outputParam + 0x43;\n    outputParam[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)outputParam + 0xe)) {\n    memorySize = initialize_memory_and_return_000846b4(inputParam,(int)*(short *)((int)outputParam + 0xe),memoryBuffer);\n    if (-1 < memorySize) {\n      isSpecialCase = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (outputParam[10] == 0x8449d)) {\n        memorySize = 0x400;\n        *(ushort *)(outputParam + 3) = *(ushort *)(outputParam + 3) | 0x400;\n        outputParam[0x13] = 0x400;\n      }\n      else {\n        memorySize = 0x400;\n        *(ushort *)(outputParam + 3) = *(ushort *)(outputParam + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value = *(ushort *)(outputParam + 3);\n    tempValue = (uint)value;\n  }\n  *(ushort *)(outputParam + 3) = value | 0x800;\n  if ((tempValue & 0x80) == 0) {\n    memorySize = 0x400;\n  }\n  else {\n    memorySize = 0x40;\n  }\n  isSpecialCase = false;\nLAB_00084300:\n  allocatedMemory = allocate_memory_00081e14(inputParam,memorySize);\n  value = *(ushort *)(outputParam + 3);\n  if (allocatedMemory == 0) {\n    if (-1 < (int)((uint)value << 0x16)) {\n      *(ushort *)(outputParam + 3) = value | 2;\n      *outputParam = (int)outputParam + 0x43;\n      outputParam[4] = (int)outputParam + 0x43;\n      outputParam[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(inputParam + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(outputParam + 3) = value | 0x80;\n    *outputParam = allocatedMemory;\n    outputParam[4] = allocatedMemory;\n    outputParam[5] = memorySize;\n    if ((isSpecialCase) && (memorySize = initialize_and_check_000846dc(inputParam,(int)*(short *)((int)outputParam + 0xe)), memorySize != 0))\n    {\n      *(ushort *)(outputParam + 3) = *(ushort *)(outputParam + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_memory_000842a4",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "uVar1": "value",
                "iVar2": "memorySize",
                "iVar3": "allocatedMemory",
                "uVar4": "tempValue",
                "bVar5": "isSpecialCase",
                "auStack_54": "memoryBuffer",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_character_sequence_00084384",
            "code": "\nuint * find_character_sequence_00084384(uint *input_array,char target_character,uint array_length)\n\n{\n  uint result;\n  int index;\n  uint *current_ptr;\n  bool is_last_element;\n  \n  if (((uint)input_array & 3) == 0) {\nLAB_000843b4:\n    if (3 < array_length) {\n      current_ptr = input_array;\n      do {\n        result = *current_ptr ^ CONCAT22(CONCAT11(target_character,target_character),CONCAT11(target_character,target_character));\n        input_array = current_ptr;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        input_array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else if (*(char *)input_array != target_character) {\n      index = 0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        is_last_element = index == array_length - 1;\n        index = index + 1;\n        if (is_last_element) goto LAB_000843dc;\n      } while (*(char *)input_array != target_character);\n    }\n  }\n  else if (array_length == 0) {\nLAB_000843dc:\n    input_array = (uint *)0x0;\n  }\n  else if (*(char *)input_array != target_character) {\n    current_ptr = (uint *)((int)input_array + 1);\n    array_length = array_length - 1;\n    do {\n      input_array = current_ptr;\n      if (((uint)input_array & 3) == 0) goto LAB_000843b4;\n      if (array_length == 0) goto LAB_000843dc;\n      current_ptr = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)input_array != target_character);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_character_sequence_00084384",
                "param_1": "input_array",
                "param_2": "target_character",
                "param_3": "array_length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_last_element"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *result,int dataPtr,undefined4 arg1,undefined4 arg2)\n\n{\n  int iVar1;\n  ushort ushortVal;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 returnAddress;\n  \n  ushortVal = *(ushort *)(dataPtr + 0xc);\n  if ((int)((uint)ushortVal << 0x17) < 0) {\n    initializeAndCheckError(result,(int)*(short *)(dataPtr + 0xe),0,2);\n    ushortVal = *(ushort *)(dataPtr + 0xc);\n  }\n  *(ushort *)(dataPtr + 0xc) = ushortVal & 0xefff;\n  DAT_200711bc = 0;\n  iVar1 = convertBytesToUInt((int)*(short *)(dataPtr + 0xe),arg1,arg2,arg2,temp1,temp2,\n                       temp3,returnAddress);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "dataPtr",
                "param_3": "arg1",
                "param_4": "arg2",
                "unaff_r4": "temp1",
                "unaff_r5": "temp2",
                "unaff_r6": "temp3",
                "in_lr": "returnAddress",
                "uVar2": "ushortVal",
                "initialize_and_check_error_00084700": "initializeAndCheckError",
                "convert_bytes_to_uint_000811cc": "convertBytesToUInt"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_error_status_0008449c",
            "code": "\nvoid updateErrorStatus_0008449c(undefined4 status,int data)\n\n{\n  int error;\n  ushort flag;\n  \n  error = initialize_and_check_error_00084700(status,(int)*(short *)(data + 0xe));\n  if (error == -1) {\n    flag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (error != -1) {\n    *(int *)(data + 0x50) = error;\n  }\n  *(ushort *)(data + 0xc) = flag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_error_status_0008449c",
                "param_1": "status",
                "param_2": "data",
                "iVar1": "error",
                "uVar2": "flag"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "execute_command_000844c4",
            "code": "\nuint execute_command_000844c4(int input_data,uint command,undefined4 *output_data,undefined4 flag)\n\n{\n  ushort value;\n  uint value_uint;\n  undefined *ptr;\n  int result;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x38) == 0)) {\n    initialize_data_00083b14();\n  }\n  value = *(ushort *)(output_data + 3);\n  value_uint = (uint)value;\n  output_data[2] = output_data[6];\n  if ((-1 < (int)(value_uint << 0x1c)) || (result = output_data[4], result == 0)) {\n    result = initialize_and_update_relocation_00083808(input_data,output_data,value,value_uint,flag);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    value = *(ushort *)(output_data + 3);\n    result = output_data[4];\n    value_uint = (uint)value;\n  }\n  command = command & 0xff;\n  if ((int)(value_uint << 0x12) < 0) {\n    ptr = (undefined *)*output_data;\n    result = (int)ptr - result;\n    if (result < (int)output_data[5]) {\nLAB_000844f6:\n      result = result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    output_data[0x19] = output_data[0x19] & 0xffffdfff;\n    ptr = (undefined *)*output_data;\n    *(ushort *)(output_data + 3) = value | 0x2000;\n    result = (int)ptr - result;\n    if (result < (int)output_data[5]) goto LAB_000844f6;\n  }\n  result = execute_command_000844c4_00083adc(input_data,output_data);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*output_data;\n  result = 1;\nLAB_000844f8:\n  output_data[2] = output_data[2] + -1;\n  *output_data = ptr + 1;\n  *ptr = (char)command;\n  if (((output_data[5] == result) ||\n      (((int)((uint)*(ushort *)(output_data + 3) << 0x1f) < 0 && (command == 10)))) &&\n     (result = execute_command_000844c4_00083adc(input_data,output_data), result != 0)) {\n    return 0xffffffff;\n  }\n  return command;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "execute_command_000844c4",
                "param_1": "input_data",
                "param_2": "command",
                "param_3": "output_data",
                "param_4": "flag",
                "uVar1": "value",
                "uVar2": "value_uint",
                "puVar3": "ptr",
                "iVar4": "result"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *outputPtr,int inputSize,undefined4 inputValue,undefined4 *resultPtr)\n\n{\n  code *functionPtr;\n  undefined4 memoryAddr;\n  int returnValue;\n  undefined auStack_24 [12];\n  \n  functionPtr = DAT_20070898;\n  if (inputSize == 0) {\n    memoryAddr = get_memory_address_00084290();\n    returnValue = (*functionPtr)(outputPtr,auStack_24,0,memoryAddr,resultPtr);\n  }\n  else {\n    memoryAddr = get_memory_address_00084290();\n    returnValue = (*functionPtr)(outputPtr,inputSize,inputValue,memoryAddr,resultPtr);\n  }\n  if (returnValue == -1) {\n    *resultPtr = 0;\n    *outputPtr = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "outputPtr",
                "param_2": "inputSize",
                "param_3": "inputValue",
                "param_4": "resultPtr",
                "pcVar1": "functionPtr",
                "uVar2": "memoryAddr",
                "iVar3": "returnValue"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "store_char_if_valid_000845bc",
            "code": "\nundefined4 store_char_if_valid_000845bc(undefined4 *output_ptr,undefined *input_ptr,uint character)\n\n{\n  if (input_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (character < 0x100) {\n    *input_ptr = (char)character;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "store_char_if_valid_000845bc",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "param_3": "character"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_parameter_000846a4",
            "code": "\nundefined4 processParameter_000846a4(int input)\n\n{\n  dword relocationOffset;\n  undefined4 returnValue;\n  int result;\n  \n  relocationOffset = relocationArray[140].r_offset;\n  if (input != 0) {\n    if ((relocationArray[140].r_offset != 0) &&\n       (*(int *)(relocationArray[140].r_offset + 0x38) == 0)) {\n      initialize_data_00083b14();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      returnValue = execute_command_00083adc(relocationOffset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(input + 0x2c))(relocationOffset,*(undefined4 *)(input + 0x1c)), result < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        update_relocation_entry_00083d9c(relocationOffset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          update_relocation_entry_00083d9c(relocationOffset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        update_relocation_entry_00083d9c(relocationOffset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083c0c();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_parameter_000846a4",
                "param_1": "input",
                "dVar1": "relocationOffset",
                "uVar2": "returnValue",
                "iVar3": "result",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_memory_and_return_000846b4",
            "code": "\nvoid initializeMemoryAndReturn_000846b4(int *outputPointer,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int initResult;\n  \n  DAT_200711bc = 0;\n  initResult = initialize_memory_000811b4(paramA,paramB,paramB,0,paramC);\n  if ((initResult == -1) && (DAT_200711bc != 0)) {\n    *outputPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_memory_and_return_000846b4",
                "param_1": "outputPointer",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "initialize_and_check_000846dc",
            "code": "\nvoid initializeAndCheck_000846dc(int *resultPtr,undefined4 inputValue)\n\n{\n  int initResult;\n  \n  DAT_200711bc = 0;\n  initResult = initialize_000811be(inputValue);\n  if ((initResult == -1) && (DAT_200711bc != 0)) {\n    *resultPtr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "initialize_and_check_000846dc",
                "param_1": "resultPtr",
                "param_2": "inputValue",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "initialize_and_check_error_00084700",
            "code": "\nvoid initialize_and_check_error_00084700(int *output_value,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int iVar1;\n  \n  DAT_200711bc = 0;\n  iVar1 = initialize_default(input_1,input_2,input_3);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *output_value = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "initialize_and_check_error_00084700",
                "param_1": "output_value",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "initialize_default_000811c2": "initialize_default"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "update_parameter_value_00084728",
            "code": "\nvoid updateParameterValue_00084728(int *output,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int iVar1;\n  \n  DAT_200711bc = 0;\n  iVar1 = get_default_value_000811c6(value1,value2,value3);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "update_parameter_value_00084728",
                "param_1": "output",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "compute_result_00084750",
            "code": "\nint computeResult_00084750(int input1,int input2,int condition1,int condition2)\n\n{\n  int result;\n  \n  if ((condition2 == 0) && (condition1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = subtract_and_store_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "compute_result_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition1",
                "param_4": "condition2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_store_result_0008477c",
            "code": "\nvoid subtractAndStoreResult_0008477c(uint inputValue,int intValue,undefined4 lowerValue,undefined4 upperValue,int *resultArray)\n\n{\n  uint conversionResult;\n  longlong product;\n  \n  product = division_with_carry_000847e0();\n  product = product * CONCAT44(upperValue,lowerValue);\n  conversionResult = (uint)product;\n  *resultArray = inputValue - conversionResult;\n  adjustedValue = (intValue - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < conversionResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_store_result_0008477c",
                "param_1": "inputValue",
                "param_2": "intValue",
                "param_3": "lowerValue",
                "param_4": "upperValue",
                "param_5": "resultArray",
                "uVar1": "conversionResult",
                "lVar2": "product",
                "param_5[1]": "adjustedValue"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_store_000847ac",
            "code": "\nvoid subtractAndStore_000847ac(uint inputValue,int param,undefined4 paramA,undefined4 paramB,int *outputValues)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide_and_carry_00084a80();\n  product = product * CONCAT44(paramB,paramA);\n  result = (uint)product;\n  *outputValues = inputValue - result;\n  outputValues[1] = (param - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_store_000847ac",
                "param_1": "inputValue",
                "param_2": "param",
                "param_3": "paramA",
                "param_4": "paramB",
                "param_5": "outputValues",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "division_with_carry_000847e0",
            "code": "\nundefined8 divisionWithCarry_000847e0(uint dividend,uint dividendRemainderHigh,uint divisor,uint divisorRemainderHigh)\n\n{\n  longlong quotientLow;\n  uint quotientHigh;\n  uint numIterations;\n  uint tmp1;\n  uint tmp2;\n  int shiftAmount;\n  uint tmp3;\n  uint tmp4;\n  uint isNegativeDividend;\n  uint tmp5;\n  uint tmp6;\n  uint tmp7;\n  bool isNegativeDivisor;\n  \n  if ((int)dividendRemainderHigh < 0) {\n    isNegativeDivisor = dividend != 0;\n    dividend = -dividend;\n    dividendRemainderHigh = -dividendRemainderHigh - (uint)isNegativeDivisor;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)divisorRemainderHigh < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    isNegativeDivisor = divisor != 0;\n    divisor = -divisor;\n    divisorRemainderHigh = -divisorRemainderHigh - (uint)isNegativeDivisor;\n  }\n  if (divisorRemainderHigh == 0) {\n    if (dividendRemainderHigh < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        numIterations = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendRemainderHigh = dividendRemainderHigh << shiftAmount | numIterations;\n      }\n      quotientHigh = divisor >> 0x10;\n      tmp1 = dividendRemainderHigh / quotientHigh;\n      tmp3 = (divisor & 0xffff) * tmp1;\n      tmp5 = dividend >> 0x10 | (dividendRemainderHigh - quotientHigh * tmp1) * 0x10000;\n      numIterations = tmp1;\n      if (tmp5 <= tmp3 && tmp3 - tmp5 != 0) {\n        isNegativeDivisor = CARRY4(tmp5,divisor);\n        tmp5 = tmp5 + divisor;\n        numIterations = tmp1 - 1;\n        if ((isNegativeDivisor == false) && (tmp5 <= tmp3 && tmp3 - tmp5 != 0)) {\n          numIterations = tmp1 - 2;\n          tmp5 = tmp5 + divisor;\n        }\n      }\n      tmp4 = (tmp5 - tmp3) / quotientHigh;\n      tmp1 = (divisor & 0xffff) * tmp4;\n      tmp3 = dividend & 0xffff | ((tmp5 - tmp3) - quotientHigh * tmp4) * 0x10000;\n      quotientHigh = tmp4;\n      if (tmp3 <= tmp1 && tmp1 - tmp3 != 0) {\n        quotientHigh = tmp4 - 1;\n        if ((CARRY4(tmp3,divisor) == false) &&\n           (tmp3 + divisor <= tmp1 && tmp1 - (tmp3 + divisor) != 0)) {\n          quotientHigh = tmp4 - 2;\n        }\n      }\n      quotientHigh = quotientHigh | numIterations << 0x10;\n      numIterations = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendRemainderHigh = dividendRemainderHigh - divisor;\n        tmp1 = divisor >> 0x10;\n        tmp7 = divisor & 0xffff;\n        numIterations = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        numIterations = dividendRemainderHigh >> (0x20U - shiftAmount & 0xff);\n        tmp1 = divisor >> 0x10;\n        tmp5 = numIterations / tmp1;\n        tmp7 = divisor & 0xffff;\n        tmp3 = tmp7 * tmp5;\n        tmp4 = dividend >> (0x20U - shiftAmount & 0xff) | dividendRemainderHigh << shiftAmount;\n        numIterations = tmp4 >> 0x10 | (numIterations - tmp1 * tmp5) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotientHigh = tmp5;\n        if (numIterations <= tmp3 && tmp3 - numIterations != 0) {\n          isNegativeDivisor = CARRY4(numIterations,divisor);\n          numIterations = numIterations + divisor;\n          quotientHigh = tmp5 - 1;\n          if ((isNegativeDivisor == false) && (numIterations <= tmp3 && tmp3 - numIterations != 0)) {\n            quotientHigh = tmp5 - 2;\n            numIterations = numIterations + divisor;\n          }\n        }\n        tmp2 = (numIterations - tmp3) / tmp1;\n        tmp5 = tmp7 * tmp2;\n        dividendRemainderHigh = tmp4 & 0xffff | ((numIterations - tmp3) - tmp1 * tmp2) * 0x10000;\n        numIterations = tmp2;\n        if (dividendRemainderHigh <= tmp5 && tmp5 - dividendRemainderHigh != 0) {\n          isNegativeDivisor = CARRY4(dividendRemainderHigh,divisor);\n          dividendRemainderHigh = dividendRemainderHigh + divisor;\n          numIterations = tmp2 - 1;\n          if ((isNegativeDivisor == false) && (dividendRemainderHigh <= tmp5 && tmp5 - dividendRemainderHigh != 0)) {\n            numIterations = tmp2 - 2;\n            dividendRemainderHigh = dividendRemainderHigh + divisor;\n          }\n        }\n        dividendRemainderHigh = dividendRemainderHigh - tmp5;\n        numIterations = numIterations | quotientHigh << 0x10;\n      }\n      quotientHigh = dividendRemainderHigh / tmp1;\n      tmp5 = tmp7 * quotientHigh;\n      tmp4 = dividend >> 0x10 | (dividendRemainderHigh - tmp1 * quotientHigh) * 0x10000;\n      tmp3 = quotientHigh;\n      if (tmp4 <= tmp5 && tmp5 - tmp4 != 0) {\n        isNegativeDivisor = CARRY4(tmp4,divisor);\n        tmp4 = tmp4 + divisor;\n        tmp3 = quotientHigh - 1;\n        if ((isNegativeDivisor == false) && (tmp4 <= tmp5 && tmp5 - tmp4 != 0)) {\n          tmp3 = quotientHigh - 2;\n          tmp4 = tmp4 + divisor;\n        }\n      }\n      tmp2 = (tmp4 - tmp5) / tmp1;\n      tmp7 = tmp7 * tmp2;\n      tmp1 = dividend & 0xffff | ((tmp4 - tmp5) - tmp1 * tmp2) * 0x10000;\n      quotientHigh = tmp2;\n      if (tmp1 <= tmp7 && tmp7 - tmp1 != 0) {\n        quotientHigh = tmp2 - 1;\n        if ((CARRY4(tmp1,divisor) == false) &&\n           (tmp1 + divisor <= tmp7 && tmp7 - (tmp1 + divisor) != 0)) {\n          quotientHigh = tmp2 - 2;\n        }\n      }\n      quotientHigh = quotientHigh | tmp3 << 0x10;\n    }\n  }\n  else if (dividendRemainderHigh < divisorRemainderHigh) {\n    numIterations = 0;\n    quotientHigh = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisorRemainderHigh);\n    if (shiftAmount == 0) {\n      if ((divisorRemainderHigh < dividendRemainderHigh) || (divisor <= dividend)) {\n        numIterations = 0;\n        quotientHigh = 1;\n      }\n      else {\n        quotientHigh = 0;\n        numIterations = 0;\n      }\n    }\n    else {\n      numIterations = 0x20 - shiftAmount;\n      tmp1 = dividendRemainderHigh >> (numIterations & 0xff);\n      tmp7 = divisor >> (numIterations & 0xff) | divisorRemainderHigh << shiftAmount;\n      tmp5 = tmp7 >> 0x10;\n      quotientHigh = tmp1 / tmp5;\n      tmp4 = (tmp7 & 0xffff) * quotientHigh;\n      tmp3 = dividendRemainderHigh << shiftAmount | dividend >> (numIterations & 0xff);\n      tmp1 = tmp3 >> 0x10 | (tmp1 - tmp5 * quotientHigh) * 0x10000;\n      numIterations = quotientHigh;\n      if (tmp1 <= tmp4 && tmp4 - tmp1 != 0) {\n        isNegativeDivisor = CARRY4(tmp1,tmp7);\n        tmp1 = tmp1 + tmp7;\n        numIterations = quotientHigh - 1;\n        if ((isNegativeDivisor == false) && (tmp1 <= tmp4 && tmp4 - tmp1 != 0)) {\n          numIterations = quotientHigh - 2;\n          tmp1 = tmp1 + tmp7;\n        }\n      }\n      tmp2 = (tmp1 - tmp4) / tmp5;\n      tmp6 = (tmp7 & 0xffff) * tmp2;\n      tmp1 = tmp3 & 0xffff | ((tmp1 - tmp4) - tmp5 * tmp2) * 0x10000;\n      quotientHigh = tmp2;\n      if (tmp1 <= tmp6 && tmp6 - tmp1 != 0) {\n        isNegativeDivisor = CARRY4(tmp1,tmp7);\n        tmp1 = tmp1 + tmp7;\n        quotientHigh = tmp2 - 1;\n        if ((isNegativeDivisor == false) && (tmp1 <= tmp6 && tmp6 - tmp1 != 0)) {\n          quotientHigh = tmp2 - 2;\n          tmp1 = tmp1 + tmp7;\n        }\n      }\n      quotientHigh = quotientHigh | numIterations << 0x10;\n      quotientLow = (ulonglong)quotientHigh * (ulonglong)(divisor << shiftAmount);\n      tmp3 = (uint)((ulonglong)quotientLow >> 0x20);\n      numIterations = 0;\n      if ((tmp1 - tmp6 < tmp3) ||\n         ((tmp1 - tmp6 == tmp3 && (dividend << shiftAmount < (uint)quotientLow)))) {\n        quotientHigh = quotientHigh - 1;\n        numIterations = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    isNegativeDivisor = quotientHigh != 0;\n    quotientHigh = -quotientHigh;\n    numIterations = -numIterations - (uint)isNegativeDivisor;\n  }\n  return CONCAT44(numIterations,quotientHigh);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "division_with_carry_000847e0",
                "param_1": "dividend",
                "param_2": "dividendRemainderHigh",
                "param_3": "divisor",
                "param_4": "divisorRemainderHigh",
                "lVar1": "quotientLow",
                "uVar2": "quotientHigh",
                "uVar3": "numIterations",
                "uVar4": "tmp1",
                "uVar5": "tmp2",
                "iVar6": "shiftAmount",
                "uVar7": "tmp3",
                "uVar8": "tmp4",
                "uVar9": "isNegativeDividend",
                "uVar10": "tmp5",
                "uVar11": "tmp6",
                "uVar12": "tmp7",
                "bVar13": "isNegativeDivisor"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "divide_and_carry_00084a80",
            "code": "\nulonglong divide_and_carry_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp_result;\n  uint result_high;\n  uint temp_quotient_high;\n  uint temp_quotient_low;\n  uint temp_product_low;\n  uint dividend_high;\n  uint temp_product_high;\n  uint divisor_quotient_high;\n  uint divisor_quotient_low;\n  int leading_zero_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      leading_zero_count = LZCOUNT(quotient);\n      if (leading_zero_count == 0) {\n        divisor = divisor - quotient;\n        temp_quotient_high = quotient >> 0x10;\n        temp_product_low = quotient & 0xffff;\n        result_high = 1;\n      }\n      else {\n        quotient = quotient << leading_zero_count;\n        divisor_quotient_high = divisor >> (0x20U - leading_zero_count & 0xff);\n        temp_quotient_high = quotient >> 0x10;\n        divisor_quotient_low = divisor_quotient_high / temp_quotient_high;\n        temp_product_low = quotient & 0xffff;\n        result_high = temp_product_low * divisor_quotient_low;\n        dividend_high = dividend >> (0x20U - leading_zero_count & 0xff) | divisor << leading_zero_count;\n        temp_quotient_low = dividend_high >> 0x10 | (divisor_quotient_high - temp_quotient_high * divisor_quotient_low) * 0x10000;\n        dividend = dividend << leading_zero_count;\n        divisor_quotient_high = divisor_quotient_low;\n        if (temp_quotient_low <= result_high && result_high - temp_quotient_low != 0) {\n          carry_flag = CARRY4(temp_quotient_low,quotient);\n          temp_quotient_low = temp_quotient_low + quotient;\n          divisor_quotient_high = divisor_quotient_low - 1;\n          if ((carry_flag == false) && (temp_quotient_low <= result_high && result_high - temp_quotient_low != 0)) {\n            divisor_quotient_high = divisor_quotient_low - 2;\n            temp_quotient_low = temp_quotient_low + quotient;\n          }\n        }\n        temp_product_high = (temp_quotient_low - result_high) / temp_quotient_high;\n        divisor_quotient_low = temp_product_low * temp_product_high;\n        divisor = dividend_high & 0xffff | ((temp_quotient_low - result_high) - temp_quotient_high * temp_product_high) * 0x10000;\n        result_high = temp_product_high;\n        if (divisor <= divisor_quotient_low && divisor_quotient_low - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          result_high = temp_product_high - 1;\n          if ((carry_flag == false) && (divisor <= divisor_quotient_low && divisor_quotient_low - divisor != 0)) {\n            result_high = temp_product_high - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - divisor_quotient_low;\n        result_high = result_high | divisor_quotient_high << 0x10;\n      }\n      divisor_quotient_low = divisor / temp_quotient_high;\n      temp_quotient_low = temp_product_low * divisor_quotient_low;\n      dividend_high = dividend >> 0x10 | (divisor - temp_quotient_high * divisor_quotient_low) * 0x10000;\n      divisor_quotient_high = divisor_quotient_low;\n      if (dividend_high <= temp_quotient_low && temp_quotient_low - dividend_high != 0) {\n        carry_flag = CARRY4(dividend_high,quotient);\n        dividend_high = dividend_high + quotient;\n        divisor_quotient_high = divisor_quotient_low - 1;\n        if ((carry_flag == false) && (dividend_high <= temp_quotient_low && temp_quotient_low - dividend_high != 0)) {\n          divisor_quotient_high = divisor_quotient_low - 2;\n          dividend_high = dividend_high + quotient;\n        }\n      }\n      divisor_quotient_low = (dividend_high - temp_quotient_low) / temp_quotient_high;\n      temp_product_low = temp_product_low * divisor_quotient_low;\n      dividend_high = dividend & 0xffff | ((dividend_high - temp_quotient_low) - temp_quotient_high * divisor_quotient_low) * 0x10000;\n      temp_quotient_high = divisor_quotient_low;\n      if (dividend_high <= temp_product_low && temp_product_low - dividend_high != 0) {\n        temp_quotient_high = divisor_quotient_low - 1;\n        if ((CARRY4(dividend_high,quotient) == false) &&\n           (dividend_high + quotient <= temp_product_low && temp_product_low - (dividend_high + quotient) != 0)) {\n          temp_quotient_high = divisor_quotient_low - 2;\n        }\n      }\n      return CONCAT44(result_high,temp_quotient_high | divisor_quotient_high << 0x10);\n    }\n    leading_zero_count = LZCOUNT(quotient);\n    if (leading_zero_count != 0) {\n      divisor_quotient_high = dividend >> (0x20U - leading_zero_count & 0xff);\n      quotient = quotient << leading_zero_count;\n      dividend = dividend << leading_zero_count;\n      divisor = divisor_quotient_high | divisor << leading_zero_count;\n    }\n    result_high = quotient >> 0x10;\n    temp_quotient_high = divisor / result_high;\n    temp_product_low = (quotient & 0xffff) * temp_quotient_high;\n    divisor_quotient_low = dividend >> 0x10 | (divisor - result_high * temp_quotient_high) * 0x10000;\n    divisor_quotient_high = temp_quotient_high;\n    if (divisor_quotient_low <= temp_product_low && temp_product_low - divisor_quotient_low != 0) {\n      carry_flag = CARRY4(divisor_quotient_low,quotient);\n      divisor_quotient_low = divisor_quotient_low + quotient;\n      divisor_quotient_high = temp_quotient_high - 1;\n      if ((carry_flag == false) && (divisor_quotient_low <= temp_product_low && temp_product_low - divisor_quotient_low != 0)) {\n        divisor_quotient_high = temp_quotient_high - 2;\n        divisor_quotient_low = divisor_quotient_low + quotient;\n      }\n    }\n    dividend_high = (divisor_quotient_low - temp_product_low) / result_high;\n    temp_quotient_high = (quotient & 0xffff) * dividend_high;\n    temp_product_low = dividend & 0xffff | ((divisor_quotient_low - temp_product_low) - result_high * dividend_high) * 0x10000;\n    result_high = dividend_high;\n    if (temp_product_low <= temp_quotient_high && temp_quotient_high - temp_product_low != 0) {\n      result_high = dividend_high - 1;\n      if ((CARRY4(temp_product_low,quotient) == false) &&\n         (temp_product_low + quotient <= temp_quotient_high && temp_quotient_high - (temp_product_low + quotient) != 0)) {\n        result_high = dividend_high - 2;\n      }\n    }\n    result_high = result_high | divisor_quotient_high << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    leading_zero_count = LZCOUNT(remainder);\n    if (leading_zero_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result_high = 0;\n    }\n    else {\n      result_high = 0x20 - leading_zero_count;\n      divisor_quotient_high = divisor >> (result_high & 0xff);\n      temp_quotient_high = remainder << leading_zero_count | quotient >> (result_high & 0xff);\n      temp_product_low = temp_quotient_high >> 0x10;\n      temp_quotient_low = divisor_quotient_high / temp_product_low;\n      divisor_quotient_low = (temp_quotient_high & 0xffff) * temp_quotient_low;\n      dividend_high = dividend >> (result_high & 0xff) | divisor << leading_zero_count;\n      result_high = dividend_high >> 0x10 | (divisor_quotient_high - temp_product_low * temp_quotient_low) * 0x10000;\n      divisor_quotient_high = temp_quotient_low;\n      if (result_high <= divisor_quotient_low && divisor_quotient_low - result_high != 0) {\n        carry_flag = CARRY4(result_high,temp_quotient_high);\n        result_high = result_high + temp_quotient_high;\n        divisor_quotient_high = temp_quotient_low - 1;\n        if ((carry_flag == false) && (result_high <= divisor_quotient_low && divisor_quotient_low - result_high != 0)) {\n          divisor_quotient_high = temp_quotient_low - 2;\n          result_high = result_high + temp_quotient_high;\n        }\n      }\n      temp_quotient_low = (result_high - divisor_quotient_low) / temp_product_low;\n      temp_product_high = (temp_quotient_high & 0xffff) * temp_quotient_low;\n      temp_product_low = dividend_high & 0xffff | ((result_high - divisor_quotient_low) - temp_product_low * temp_quotient_low) * 0x10000;\n      result_high = temp_quotient_low;\n      if (temp_product_low <= temp_product_high && temp_product_high - temp_product_low != 0) {\n        carry_flag = CARRY4(temp_product_low,temp_quotient_high);\n        temp_product_low = temp_product_low + temp_quotient_high;\n        result_high = temp_quotient_low - 1;\n        if ((carry_flag == false) && (temp_product_low <= temp_product_high && temp_product_high - temp_product_low != 0)) {\n          result_high = temp_quotient_low - 2;\n          temp_product_low = temp_product_low + temp_quotient_high;\n        }\n      }\n      result_high = result_high | divisor_quotient_high << 0x10;\n      temp_result = (ulonglong)result_high * (ulonglong)(quotient << leading_zero_count);\n      divisor_quotient_high = (uint)((ulonglong)temp_result >> 0x20);\n      if ((temp_product_low - temp_product_high < divisor_quotient_high) || ((temp_product_low - temp_product_high == divisor_quotient_high && (dividend << leading_zero_count < (uint)temp_result)))\n         ) {\n        result_high = result_high - 1;\n      }\n    }\n  }\n  return (ulonglong)result_high;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "divide_and_carry_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp_result",
                "uVar2": "result_high",
                "uVar3": "temp_quotient_high",
                "uVar4": "temp_quotient_low",
                "uVar5": "temp_product_low",
                "uVar6": "dividend_high",
                "uVar7": "temp_product_high",
                "uVar8": "divisor_quotient_high",
                "uVar9": "divisor_quotient_low",
                "iVar10": "leading_zero_count",
                "bVar11": "carry_flag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 87175,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}