{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_zero_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfZero_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_zero_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_function_00080164",
            "code": "\nvoid initializeFunction_00080164(int **memoryPointer)\n\n{\n  int returnValue;\n  \n  *memoryPointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)memoryPointer + 6)) {\n    FUN_00081210(*(byte *)((int)memoryPointer + 6),1);\n    FUN_00081318(*(undefined *)((int)memoryPointer + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**memoryPointer + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)memoryPointer + 0x49) = 0;\n  *(undefined *)((int)memoryPointer + 0x4a) = 0;\n  *(undefined2 *)(memoryPointer + 0x15) = 0;\n  *(undefined2 *)((int)memoryPointer + 0x52) = 0;\n  *(undefined2 *)(memoryPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_function_00080164",
                "param_1": "memoryPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_entries_000801b0",
            "code": "\nint processEntries_000801b0(int **entries)\n\n{\n  bool isOverflow;\n  undefined result;\n  char count;\n  int returnValue;\n  byte byteCount;\n  \n  if (1 < *(byte *)((int)entries + 6)) {\n    FUN_00081318(*(byte *)((int)entries + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)entries + 0x49) = 0;\n  if (*(byte *)((int)entries + 5) < 4) {\n    while (returnValue = (**(code **)(**entries + 8))(), returnValue != 0) {\n      byteCount = *(byte *)((int)entries + 0x49);\n      result = (**(code **)(**entries + 0xc))();\n      count = *(char *)((int)entries + 0x49);\n      *(undefined *)((int)entries + byteCount + 9) = result;\n      byteCount = count + 1;\n      *(byte *)((int)entries + 0x49) = byteCount;\n      if (0x3f < byteCount) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(entries + 0x14) = *(short *)(entries + 0x14) + 1;\n  if (isOverflow) {\n    count = -3;\n    *(short *)(entries + 0x15) = *(short *)(entries + 0x15) + 1;\n  }\n  else {\n    count = *(char *)((int)entries + 0x49);\n  }\n  return (int)count;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_entries_000801b0",
                "param_1": "entries",
                "bVar1": "isOverflow",
                "uVar2": "result",
                "cVar3": "count",
                "iVar4": "returnValue",
                "bVar5": "byteCount"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int startAddress,uint length)\n\n{\n  int currentAddress;\n  uint checksum;\n  char bitCount;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentAddress = startAddress; (currentAddress - startAddress & 0xffU) < length; currentAddress = currentAddress + 1) {\n    checksum = checksum ^ *(byte *)(currentAddress + 9);\n    bitCount = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCount = bitCount + -1;\n    } while (bitCount != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "startAddress",
                "param_2": "length",
                "iVar1": "currentAddress",
                "uVar2": "checksum",
                "cVar3": "bitCount",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_parameter_values_00080258",
            "code": "\nvoid updateParameterValues_00080258(int **parameter,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte byteValue;\n  undefined2 result;\n  int iteration;\n  uint convertedValue;\n  \n  byteValue = *(byte *)((int)parameter + 0x49);\n  convertedValue = (uint)byteValue;\n  result = FUN_0008021c(parameter,convertedValue,value2,value3,value3);\n  *(char *)((int)parameter + convertedValue + 9) = (char)((ushort)result >> 8);\n  *(char *)((int)parameter + (convertedValue + 1 & 0xff) + 9) = (char)result;\n  *(byte *)((int)parameter + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)parameter + 6)) {\n    FUN_00081318(*(byte *)((int)parameter + 6),1);\n  }\n  if (*(byte *)((int)parameter + 5) < 4) {\n    (**(code **)(**parameter + 4))(*parameter,(int)parameter + 9,*(undefined *)((int)parameter + 0x49));\n  }\n  if (1 < *(byte *)((int)parameter + 6)) {\n    FUN_00081318(*(byte *)((int)parameter + 6),0);\n  }\n  if (*(byte *)((int)parameter + 5) < 4) {\n    do {\n      iteration = (**(code **)(**parameter + 0xc))();\n    } while (-1 < iteration);\n  }\n  *(undefined *)((int)parameter + 0x49) = 0;\n  iteration = thunk_FUN_00081714();\n  parameter[0x17] = (int *)(iteration + (uint)*(ushort *)((int)parameter + 0x56));\n  *(short *)((int)parameter + 0x52) = *(short *)((int)parameter + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_parameter_values_00080258",
                "param_1": "parameter",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "byteValue",
                "uVar2": "result",
                "iVar3": "iteration",
                "uVar4": "convertedValue"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "decode_and_initialize_000802da",
            "code": "\nint decode_and_initialize_000802da(int input_ptr,uint flags,uint value,ushort *data_ptr)\n\n{\n  char result;\n  byte byte_var;\n  undefined undefined_var;\n  ushort ushort_var;\n  uint uint_var;\n  ushort *data_ptr_var;\n  undefined var_1c;\n  undefined var_1b;\n  ushort var_18;\n  \n  var_1c = (undefined)flags;\n  var_1b = (undefined)(flags >> 8);\n  var_18 = (ushort)value;\n  uint_var = value & 0xffff;\n  if (*(char *)(input_ptr + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(input_ptr + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flags & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(input_ptr + 9) = var_1c;\n  *(undefined *)(input_ptr + 10) = var_1b;\n  *(ushort **)(input_ptr + 0x4c) = data_ptr;\n  *(char *)(input_ptr + 0xb) = (char)(flags >> 0x18);\n  *(char *)(input_ptr + 0xc) = (char)(flags >> 0x10);\n  undefined_var = (undefined)(value >> 8);\n  switch(var_1b) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(input_ptr + 0xd) = undefined_var;\n    break;\n  case 5:\n    ushort_var = *data_ptr;\n    if (ushort_var != 0) {\n      ushort_var = 1;\n    }\n    *(char *)(input_ptr + 0xd) = -(char)ushort_var;\n    uint_var = 0;\n    break;\n  case 6:\n    *(char *)(input_ptr + 0xd) = (char)(*data_ptr >> 8);\n    uint_var = (uint)*data_ptr;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_var = (byte)(var_18 >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      byte_var = byte_var + 1;\n    }\n    *(char *)(input_ptr + 0xe) = (char)value;\n    *(undefined *)(input_ptr + 0xd) = undefined_var;\n    *(byte *)(input_ptr + 0xf) = byte_var;\n    undefined_var = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(input_ptr + 0xd) = undefined_var;\n    *(char *)(input_ptr + 0xe) = (char)value;\n    data_ptr = data_ptr + -1;\n    *(char *)(input_ptr + 0xf) = (char)uint_var * '\\x02';\n    *(undefined *)(input_ptr + 0x49) = 7;\n    data_ptr_var = data_ptr + uint_var;\n    while (data_ptr != data_ptr_var) {\n      byte_var = *(byte *)(input_ptr + 0x49);\n      *(char *)(input_ptr + (uint)byte_var + 9) = (char)(data_ptr[1] >> 8);\n      uint_var = byte_var + 1 & 0xff;\n      *(char *)(input_ptr + 0x49) = (char)uint_var;\n      data_ptr = data_ptr + 1;\n      *(char *)(uint_var + input_ptr + 9) = (char)*data_ptr;\n      *(byte *)(input_ptr + 0x49) = byte_var + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(input_ptr + 0xe) = (char)uint_var;\n  undefined_var = 6;\nLAB_0008034a:\n  *(undefined *)(input_ptr + 0x49) = undefined_var;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(input_ptr);\n  *(undefined *)(input_ptr + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "decode_and_initialize_000802da",
                "param_1": "input_ptr",
                "param_2": "flags",
                "param_3": "value",
                "param_4": "data_ptr",
                "cVar1": "result",
                "bVar2": "byte_var",
                "uVar3": "undefined_var",
                "uVar4": "ushort_var",
                "uVar5": "uint_var",
                "puVar6": "data_ptr_var",
                "local_1c": "var_1c",
                "local_1b": "var_1b",
                "local_18": "var_18"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "increment_counter_if_not_present_000803d4",
            "code": "\nundefined4 incrementCounterIfNotPresent_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "increment_counter_if_not_present_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "update_data_00080410",
            "code": "\nvoid updateData_00080410(int dataPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int computedIndex;\n  byte counter;\n  uint convertedCounter;\n  int dataIndex;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPtr + 0xb) >> 1 <= convertedCounter) break;\n    computedIndex = (convertedCounter * 2 + 3 & 0xff) + dataPtr;\n    dataIndex = *(int *)(dataPtr + 0x4c);\n    result = FUN_000815f8(*(undefined *)(computedIndex + 9),*(undefined *)(computedIndex + 10),computedIndex,\n                         *(byte *)(dataPtr + 0xb),param4);\n    *(undefined2 *)(dataIndex + convertedCounter * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "update_data_00080410",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "computedIndex",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "dataIndex"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_update_status_0008043e",
            "code": "\nint checkAndUpdateStatus_0008043e(int **inputData)\n\n{\n  char status;\n  uint result;\n  int *ptrReturnValue;\n  int returnValue;\n  uint value;\n  \n  if (*(byte *)((int)inputData + 5) < 4) {\n    result = (**(code **)(**inputData + 8))();\n    value = result & 0xff;\n  }\n  ptrReturnValue = (int *)thunk_FUN_00081714();\n  if (inputData[0x17] < ptrReturnValue) {\n    *(undefined *)(inputData + 2) = 0xff;\n    *(undefined *)((int)inputData + 7) = 0;\n    *(short *)(inputData + 0x15) = *(short *)(inputData + 0x15) + 1;\n  }\n  else if (7 < value) {\n    FUN_000801b0(inputData);\n    returnValue = FUN_000803d4(inputData);\n    if (returnValue == 0) {\n      if (*(byte *)((int)inputData + 10) - 3 < 2) {\n        FUN_00080410(inputData);\n      }\n      *(undefined *)((int)inputData + 7) = 0;\n      status = *(char *)((int)inputData + 0x49);\n    }\n    else {\n      *(undefined *)((int)inputData + 7) = 0;\n      status = (char)returnValue;\n    }\n    goto LAB_000804a2;\n  }\n  status = '\\0';\nLAB_000804a2:\n  return (int)status;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_update_status_0008043e",
                "param_1": "inputData",
                "cVar1": "status",
                "uVar2": "result",
                "piVar3": "ptrReturnValue",
                "iVar4": "returnValue",
                "unaff_r6": "value"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int iVar1;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  iVar1 = thunk_FUN_00081714();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = thunk_FUN_00081714();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = thunk_FUN_00081714();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = thunk_FUN_00081714();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint threshold;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  int counter;\n  uint *pointer1;\n  undefined4 *pointer2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    threshold = thunk_FUN_00081714();\n    if (DAT_200708c8 < threshold) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      pointer2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*pointer2,pointer2[1],pointer2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      pointer2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointer1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointer1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (threshold = thunk_FUN_00081714(), DAT_200708c0 < threshold))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      counter = thunk_FUN_00081714();\n      DAT_200708c0 = counter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      threshold = thunk_FUN_00081714();\n      if (DAT_200708c0 < threshold) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointer1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      threshold = thunk_FUN_00081714();\n      if (DAT_200708c0 < threshold) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  threshold = thunk_FUN_00081714();\n  if (DAT_200709e0 < threshold) {\n    value1 = FUN_0008189c(DAT_20070940);\n    value2 = FUN_00081730(value1,DAT_200709c8);\n    value1 = DAT_200708c4;\n    DAT_20070930 = value2;\n    value3 = FUN_00081734(value2,DAT_200708c4);\n    value3 = FUN_00081944(value3,DAT_2007094c);\n    value3 = FUN_00081734(value3,DAT_20070914);\n    DAT_2007094c = value3;\n    value1 = FUN_00081730(value2,value1);\n    value1 = FUN_00081944(value1,DAT_200709c4);\n    value1 = FUN_00081730(value1,DAT_2007096c);\n    DAT_200709c4 = value1;\n    value4 = FUN_00081944(value2,DAT_20070a4c);\n    value4 = FUN_00081734(value4,value3);\n    FUN_00081734(value4,value1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = value2;\n    DAT_20070914 = value3;\n    DAT_2007096c = value1;\n    counter = thunk_FUN_00081714();\n    DAT_200709e0 = counter + DAT_20070970;\n  }\n  value1 = FUN_0008189c(DAT_20070970);\n  counter = FUN_00081ca8(DAT_2007091c,value1);\n  if (counter != 0) {\n    DAT_2007091c = value1;\n  }\n  counter = FUN_00081c94(DAT_2007091c,0);\n  if (counter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "threshold",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "uVar5": "value4",
                "iVar6": "counter",
                "puVar7": "pointer1",
                "puVar8": "pointer2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int count1;\n  int count2;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  count1 = 0;\n  do {\n    count2 = count1 + 1;\n    FUN_00081318(count1,0);\n    count1 = count2;\n  } while (count2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "count1",
                "iVar2": "count2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_data_structures_00080c0c",
            "code": "\nvoid initializeDataStructures_00080c0c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,arg3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_data_structures_00080c0c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid checkAndExecuteFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_00080d2e",
            "code": "\nvoid updateParameter_00080d2e(int baseAddress,undefined4 switchCase,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(switchCase) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto caseDefault;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\ncaseDefault:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_00080d2e",
                "param_1": "baseAddress",
                "param_2": "switchCase",
                "param_3": "newValue",
                "uVar1": "updatedValue",
                "switchD_00080d34_caseD_6": "caseDefault"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_parameters_00080d54",
            "code": "\nvoid updateParameters_00080d54(undefined4 *parameters,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  parameters[17] = newValue;\n  if (isNegative) {\n    parameters[25] = newValue;\n  }\n  if (!isNegative) {\n    parameters[24] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    parameters[8] = newValue;\n  }\n  if (!isNegative) {\n    parameters[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    parameters[32] = newValue;\n  }\n  parameters[5] = newValue;\n  *parameters = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "parameters",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative",
                "param_1[0x11]": "parameters[17]",
                "param_1[0x19]": "parameters[25]",
                "param_1[0x18]": "parameters[24]",
                "param_1[8]": "parameters[8]",
                "param_1[9]": "parameters[9]",
                "param_1[0x20]": "parameters[32]",
                "param_1[5]": "parameters[5]"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_parameters_00080d7a",
            "code": "\nvoid updateParameters_00080d7a(undefined4 *ptrArray,undefined4 newValue,int check1,int check2,int check3)\n\n{\n  ptrArray[0x11] = newValue;\n  if (check3 == 0) {\n    ptrArray[0x18] = newValue;\n  }\n  else {\n    ptrArray[0x19] = newValue;\n  }\n  if (check2 == 0) {\n    ptrArray[0x15] = newValue;\n  }\n  else {\n    ptrArray[0x14] = newValue;\n  }\n  if (check1 == 0) {\n    ptrArray[0xd] = newValue;\n  }\n  else {\n    ptrArray[0xc] = newValue;\n  }\n  ptrArray[4] = newValue;\n  *ptrArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1": "ptrArray",
                "param_2": "newValue",
                "param_3": "check1",
                "param_4": "check2",
                "param_5": "check3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_param_values_00080da0",
            "code": "\nundefined4 updateParamValues_00080da0(int baseAddress,int paramType,undefined4 newValue,uint bitmask)\n\n{\n  bool isNegative;\n  \n  switch(paramType) {\n  case 1:\n  case 2:\n    FUN_00080d2e(baseAddress,paramType,newValue);\n    isNegative = (int)(bitmask << 0x1f) < 0;\n    *(undefined4 *)(baseAddress + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(baseAddress + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(baseAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_00080d54(baseAddress,newValue,bitmask,0x80d55,baseAddress);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(baseAddress,newValue,paramType == 5,(bitmask << 0x1d) >> 0x1f,bitmask & 1,paramType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_param_values_00080da0",
                "param_1": "baseAddress",
                "param_2": "paramType",
                "param_3": "newValue",
                "param_4": "bitmask",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_conditions_00080e04",
            "code": "\nuint checkConditions_00080e04(int input1,uint input2)\n\n{\n  uint result;\n  \n  result = *(uint *)(input1 + 8) & input2;\n  if (result != 0) {\n    if ((input2 & *(uint *)(input1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_conditions_00080e04",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_update_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_update_bit_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_update_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfRelocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "elfRelocationArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_value_00080f9c",
            "code": "\nundefined4 calculate_threshold_value_00080f9c(undefined4 *output_array,uint input_value,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint threshold_values [16];\n  \n  threshold_values[0] = 0;\n  threshold_values[1] = 8;\n  threshold_values[2] = 0x10;\n  threshold_values[3] = 0x18;\n  threshold_values[4] = 0x40;\n  threshold_values[5] = 0x50;\n  threshold_values[6] = 0x60;\n  threshold_values[7] = 0x70;\n  threshold_values[8] = 0x200;\n  threshold_values[9] = 0x240;\n  threshold_values[10] = 0x280;\n  threshold_values[11] = 0x2c0;\n  threshold_values[12] = 0x300;\n  threshold_values[13] = 0x340;\n  threshold_values[14] = 0x380;\n  threshold_values[15] = 0x3c0;\n  *output_array = 1;\n  output_array[1] = 0;\n  output_array[0x48] = 0x202;\n  output_array[0x41] = 0;\n  output_array[0x45] = 0;\n  quotient = input_value / (uint)(divisor * 2);\n  if (input_value == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_value / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        threshold_values[index]) {\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_value_00080f9c",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "multiplier",
                "local_58": "threshold_values",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_bitwise_00081034",
            "code": "\nvoid updateBitwise_00081034(int address,uint value,uint flag)\n\n{\n  *(uint *)(address + 4) = value | *(uint *)(address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_bitwise_00081034",
                "param_1": "address",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "merge_params_00081042",
            "code": "\nvoid mergeParams_00081042(int ptr,uint input1,uint input2,uint input3)\n\n{\n  *(uint *)(ptr + 4) =\n       input2 | *(uint *)(ptr + 4) | (input1 & 0xf) << 0x18 | (input3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "merge_params_00081042",
                "param_1": "ptr",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_value_0008105c",
            "code": "\nvoid setBitValue_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_value_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_default_value_00081066",
            "code": "\nvoid setDefaultValue_00081066(int ptr)\n\n{\n  *(undefined4 *)(ptr + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "store_data_0008106e",
            "code": "\nvoid storeData_0008106e(int inputPtr,undefined4 data)\n\n{\n  *(undefined4 *)(inputPtr + 0x28) = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "store_data_0008106e",
                "param_1": "inputPtr",
                "param_2": "data"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nundefined4 initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int input)\n\n{\n  int currentSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  currentSum = DAT_20071180;\n  DAT_20071180 = input + DAT_20071180;\n  return currentSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input",
                "iVar1": "currentSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_negative_one_000811ae",
            "code": "\nint32 getNegativeOne_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_negative_one_000811ae",
                "undefined4": "int32"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_000811be",
            "code": "\nundefined4 initialize_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nvoid initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2",
                "undefined4": "void"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_function_000811c6",
            "code": "\nundefined4 initialize_function_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_function_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param1,int sourceArray,uint numBytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)numBytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(sourceArray + index);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param1",
                "param_2": "sourceArray",
                "param_3": "numBytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_variable_thunk_00081714",
            "code": "\nundefined4 get_global_variable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_function_00081210",
            "code": "\n\n\nint processFunction_00081210(int input1,int input2)\n\n{\n  int result;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte byteVar1;\n  byte byteVar2;\n  int tempVar4;\n  int tempVar5;\n  \n  result = input1;\n  if ((&DAT_00084d24)[input1 * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[input1] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[input1 * 0x1c]);\n    }\n    byteVar2 = (&DAT_20070d94)[input1];\n    byteVar1 = byteVar2 & 0xf;\n    if ((byteVar1 < 3) && (byteVar2 != 0)) {\n      if (byteVar1 == 2) {\n        if (input2 == 0) {\n          return result;\n        }\n      }\n      else if (byteVar1 == 1) {\n        if (input2 == 2) {\n          return result;\n        }\n      }\n      else if (byteVar1 == 3) {\n        if (input2 == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (input2 != 1) {\nLAB_0008126c:\n      if (input2 == 0) {\n        result = input1 * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        byteVar2 = (&DAT_20070d94)[input1] & 0xf0 | 2;\n      }\n      else {\n        if (input2 != 2) {\n          return result;\n        }\n        result = input1 * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        byteVar2 = (&DAT_20070d94)[input1] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[input1] = byteVar2;\n      return result;\n    }\n    tempVar4 = input1 * 0x1c;\n    tempVar5 = *(int *)(&DAT_00084d18 + tempVar4);\n    if (byteVar2 >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    result = FUN_00080da0(tempVar5,tempVar2,*(undefined4 *)(&DAT_00084d1c + tempVar4),\n                         *(undefined4 *)(&DAT_00084d28 + tempVar4));\n    (&DAT_20070d94)[input1] = (&DAT_20070d94)[input1] & 0xf0 | 3;\n    if (*(int *)(tempVar5 + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084d20 + tempVar4);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "process_function_00081210",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "byteVar1",
                "bVar6": "byteVar2",
                "iVar7": "tempVar4",
                "iVar8": "tempVar5"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_data_00081318",
            "code": "\nvoid updateData_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int ptr;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084d18 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(ptr,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = data;\n      return;\n    }\n    FUN_00080d7a(ptr,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "ptr"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_conditional_code_00081388",
            "code": "\nvoid executeConditionalCode_00081388(void)\n\n{\n  if ((relInfo != 0xffffffff) &&\n     (relInfo = relInfo - 1,\n     relInfo == 0)) {\n    (*(code *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_conditional_code_00081388",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "relInfo"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_data_000813a8",
            "code": "\nint initializeData_000813a8(int dataPointer)\n\n{\n  FUN_00082504(dataPointer,0,0x80);\n  *(undefined4 *)(dataPointer + 0x80) = 0;\n  *(undefined4 *)(dataPointer + 0x84) = 0;\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_data_000813a8",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_param_000813c2",
            "code": "\nvoid updateParam_000813c2(int paramAddr,undefined paramValue)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(paramAddr + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(paramAddr + 0x84)) {\n    *(undefined *)(paramAddr + *(int *)(paramAddr + 0x80)) = paramValue;\n    *(uint *)(paramAddr + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_param_000813c2",
                "param_1": "paramAddr",
                "param_2": "paramValue",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPtr,undefined4 newValue)\n\n{\n  int ptrToData;\n  uint updatedValue;\n  \n  ptrToData = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrToData + 0x84) == *(int *)(ptrToData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptrToData + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrToData + 0x84) == updatedValue);\n    *(char *)(ptrToData + *(int *)(ptrToData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "ptrToData",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initializeParameters_000814e4(undefined4 *outputArray,undefined4 inputValue1,undefined inputFlag,undefined4 inputValue2,\n                 undefined4 inputValue3,undefined4 inputValue4)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue1;\n  *outputArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(outputArray + 7) = inputFlag;\n  outputArray[4] = inputValue3;\n  outputArray[8] = inputValue2;\n  outputArray[5] = inputValue4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "outputArray",
                "param_2": "inputValue1",
                "param_3": "inputFlag",
                "param_4": "inputValue2",
                "param_5": "inputValue3",
                "param_6": "inputValue4",
                "param_1[1]": "outputArray[1]",
                "param_1[2]": "outputArray[2]",
                "param_1[6]": "outputArray[6]",
                "param_1[4]": "outputArray[4]",
                "param_1[8]": "outputArray[8]",
                "param_1[5]": "outputArray[5]"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_module_00081508",
            "code": "\nvoid initializeModule_00081508(int moduleAddress,uint moduleSize,undefined4 paramValue)\n\n{\n  int var1;\n  undefined4 *pointerVar;\n  \n  FUN_00080e18(*(undefined4 *)(moduleAddress + 0x20));\n  pointerVar = *(undefined4 **)(moduleAddress + 0x18);\n  pointerVar[0x48] = 0x202;\n  *pointerVar = 0xac;\n  pointerVar[1] = paramValue;\n  pointerVar[8] = relArray[6].offset / moduleSize >> 4;\n  pointerVar[3] = 0xffffffff;\n  pointerVar[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(moduleAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(moduleAddress + 0x1c) & 0x1f);\n  var1 = *(int *)(moduleAddress + 0x10);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  var1 = *(int *)(moduleAddress + 0x14);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  *pointerVar = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_module_00081508",
                "param_1": "moduleAddress",
                "param_2": "moduleSize",
                "param_3": "paramValue",
                "iVar1": "var1",
                "puVar2": "pointerVar",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_data_000815d4",
            "code": "\nundefined4 * initializeData_000815d4(undefined4 *outputArray,undefined4 inputValue)\n\n{\n  FUN_000814e4();\n  *outputArray = &PTR_FUN_00081454_1_000857d8;\n  outputArray[9] = inputValue;\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_data_000815d4",
                "param_1": "outputArray",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_params_000815f8",
            "code": "\nuint combineParams_000815f8(int bitShiftedValue,uint bitwiseOrValue)\n\n{\n  return bitwiseOrValue | bitShiftedValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_params_000815f8",
                "param_1": "bitShiftedValue",
                "param_2": "bitwiseOrValue"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "execute_function_000815fe",
            "code": "\nundefined4 * executeFunction_000815fe(undefined4 *inputArray)\n\n{\n  FUN_00081e04(*inputArray);\n  return inputArray;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "execute_function_000815fe",
                "param_1": "inputArray"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_data_0008160c",
            "code": "\nvoid resetData_0008160c(int *dataPtr)\n\n{\n  if (*dataPtr != 0) {\n    FUN_00081e04();\n  }\n  *dataPtr = 0;\n  dataPtr[2] = 0;\n  dataPtr[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_data_0008160c",
                "param_1": "dataPtr",
                "param_1[2]": "dataPtr[2]",
                "param_1[1]": "dataPtr[1]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_and_check_value_00081622",
            "code": "\nint updateAndCheckValue_00081622(int *valuePtr,int index,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*valuePtr,index + 1,param3,param4,param4);\n  if (result != 0) {\n    *valuePtr = result;\n    valuePtr[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_and_check_value_00081622",
                "param_1": "valuePtr",
                "param_2": "index",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_value_0008163a",
            "code": "\nundefined4 checkAndUpdateValue_0008163a(int *valueArray,uint inputValue)\n\n{\n  int result;\n  \n  if ((*valueArray == 0) || ((uint)valueArray[1] < inputValue)) {\n    result = FUN_00081622(valueArray);\n    if (result == 0) {\n      return 0;\n    }\n    if (valueArray[2] == 0) {\n      *(undefined *)*valueArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_value_0008163a",
                "param_1": "valueArray",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "check_and_process_data_0008165c",
            "code": "\nundefined4 * checkAndProcessData_0008165c(undefined4 *dataPointer,undefined4 value1,undefined4 value2)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_0008163a(dataPointer,value2);\n  if (returnValue == 0) {\n    FUN_0008160c(dataPointer);\n  }\n  else {\n    dataPointer[2] = value2;\n    FUN_00082994(*dataPointer,value1);\n  }\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "check_and_process_data_0008165c",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_data_00081682",
            "code": "\nundefined4 * initializeData_00081682(undefined4 *outputArray,int inputValue)\n\n{\n  undefined4 result;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputValue != 0) {\n    result = FUN_00082a50(inputValue);\n    FUN_0008165c(outputArray,inputValue,result);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_data_00081682",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_infinite_loop_000816a8",
            "code": "\nvoid runInfiniteLoop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_infinite_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_000816d4",
            "code": "\n\n\nvoid initializeMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "retrieve_config_value_00081714",
            "code": "\nundefined4 retrieveConfigValue_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "retrieve_config_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculateFloat_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shift1;\n  int shift2;\n  uint bitwiseXor1;\n  uint bitwiseXor2;\n  uint shiftedInput1;\n  uint shiftedResult;\n  uint difference;\n  bool isConditionMet;\n  \n  bitwiseXor1 = input2 ^ 0x80000000;\n  shiftedInput1 = input1 << 1;\n  isConditionMet = shiftedInput1 == 0;\n  if (!isConditionMet) {\n    input4 = input2 << 1;\n    isConditionMet = input4 == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = shiftedInput1 == input4;\n  }\n  shift1 = (int)shiftedInput1 >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shift1 == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)input4 >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shift2 = (int)(input2 << 1) >> 0x18;\n    if (shift1 == -1 || shift2 == -1) {\n      shiftedInput1 = bitwiseXor1;\n      if (shift1 == -1) {\n        shiftedInput1 = input1;\n      }\n      if (shift1 != -1 || shift2 != -1) {\n        bitwiseXor1 = shiftedInput1;\n      }\n      isConditionMet = (shiftedInput1 & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (bitwiseXor1 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = shiftedInput1 == bitwiseXor1;\n      }\n      if (!isConditionMet) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ bitwiseXor1) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = bitwiseXor1;\n      }\n      return input1;\n    }\n    if (input1 != bitwiseXor1) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      bitwiseXor1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        bitwiseXor1 = bitwiseXor1 | 0x80000000;\n      }\n      return bitwiseXor1;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shiftedInput1;\n  isConditionMet = difference != 0;\n  shiftedResult = shiftedInput1;\n  if (isConditionMet && shiftedInput1 <= input4) {\n    shiftedResult = shiftedInput1 + difference;\n  }\n  if (isConditionMet && shiftedInput1 <= input4) {\n    bitwiseXor1 = bitwiseXor1 ^ input1;\n  }\n  if (isConditionMet && shiftedInput1 <= input4) {\n    input1 = input1 ^ bitwiseXor1;\n  }\n  if (isConditionMet && shiftedInput1 <= input4) {\n    bitwiseXor1 = bitwiseXor1 ^ input1;\n  }\n  if (input4 < shiftedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  bitwiseXor2 = bitwiseXor1 & 0xffffff | 0x800000;\n  if ((bitwiseXor1 & 0x80000000) != 0) {\n    bitwiseXor2 = -bitwiseXor2;\n  }\n  if (shiftedResult == difference) {\n    bitwiseXor2 = bitwiseXor2 ^ 0x800000;\n    if (shiftedResult == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      shiftedResult = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)bitwiseXor2 >> (difference & 0xff));\n  bitwiseXor2 = bitwiseXor2 << (0x20 - difference & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isConditionMet = bitwiseXor2 != 0;\n    bitwiseXor2 = -bitwiseXor2;\n    shiftedInput1 = -shiftedInput1 - (uint)isConditionMet;\n  }\n  if (shiftedInput1 < 0x800000) {\n    bitwiseXor1 = bitwiseXor2 & 0x80000000;\n    bitwiseXor2 = bitwiseXor2 << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(bitwiseXor1 != 0);\n    bitwiseXor1 = shiftedResult - 2;\n    if ((shiftedInput1 & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (difference & 0xff);\n      if ((int)bitwiseXor1 < (int)difference) {\n        shiftedInput1 = shiftedInput1 >> (-(bitwiseXor1 - difference) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (bitwiseXor1 - difference) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    bitwiseXor1 = shiftedResult - 1;\n    if (0xffffff < shiftedInput1) {\n      bitwiseXor1 = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      bitwiseXor2 = (uint)(bitwiseXor1 != 0) << 0x1f | bitwiseXor2 >> 1;\n      bitwiseXor1 = shiftedResult;\n      if (0xfd < shiftedResult) goto LAB_0008186a;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + bitwiseXor1 * 0x800000 + (uint)(0x7fffffff < bitwiseXor2);\n  if (bitwiseXor2 == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "iVar2": "shift2",
                "uVar3": "bitwiseXor1",
                "uVar4": "bitwiseXor2",
                "uVar5": "shiftedInput1",
                "uVar6": "shiftedResult",
                "uVar7": "difference",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_new_float_00081734",
            "code": "\nuint calculateNewFloat_00081734(uint inputFloatA,uint inputFloatB,undefined4 inputIntA,uint inputIntB)\n\n{\n  int shiftedFloatA;\n  int shiftedFloatB;\n  uint mantissaA;\n  uint mantissaB;\n  uint shiftAmount;\n  uint difference;\n  bool isConditionTrue;\n  \n  mantissaB = inputFloatA << 1;\n  isConditionTrue = mantissaB == 0;\n  if (!isConditionTrue) {\n    inputIntB = inputFloatB << 1;\n    isConditionTrue = inputIntB == 0;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = mantissaB == inputIntB;\n  }\n  shiftedFloatA = (int)mantissaB >> 0x18;\n  if (!isConditionTrue) {\n    isConditionTrue = shiftedFloatA == -1;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = (int)inputIntB >> 0x18 == -1;\n  }\n  if (isConditionTrue) {\n    shiftedFloatB = (int)(inputFloatB << 1) >> 0x18;\n    if (shiftedFloatA == -1 || shiftedFloatB == -1) {\n      mantissaB = inputFloatB;\n      if (shiftedFloatA == -1) {\n        mantissaB = inputFloatA;\n      }\n      if (shiftedFloatA != -1 || shiftedFloatB != -1) {\n        inputFloatB = mantissaB;\n      }\n      isConditionTrue = (mantissaB & 0x7fffff) == 0;\n      if (isConditionTrue) {\n        isConditionTrue = (inputFloatB & 0x7fffff) == 0;\n      }\n      if (isConditionTrue) {\n        isConditionTrue = mantissaB == inputFloatB;\n      }\n      if (!isConditionTrue) {\n        mantissaB = mantissaB | 0x400000;\n      }\n      return mantissaB;\n    }\n    if (((inputFloatA ^ inputFloatB) & 0x7fffffff) != 0) {\n      if (mantissaB == 0) {\n        inputFloatA = inputFloatB;\n      }\n      return inputFloatA;\n    }\n    if (inputFloatA != inputFloatB) {\n      return 0;\n    }\n    if ((mantissaB & 0xff000000) == 0) {\n      mantissaB = inputFloatA << 1;\n      if ((inputFloatA & 0x80000000) != 0) {\n        mantissaB = mantissaB | 0x80000000;\n      }\n      return mantissaB;\n    }\n    if (mantissaB < 0xfe000000) {\n      return inputFloatA + 0x800000;\n    }\n    inputFloatA = inputFloatA & 0x80000000;\nLAB_0008186a:\n    return inputFloatA | 0x7f800000;\n  }\n  mantissaB = mantissaB >> 0x18;\n  inputIntB = inputIntB >> 0x18;\n  difference = inputIntB - mantissaB;\n  isConditionTrue = difference != 0;\n  shiftAmount = mantissaB;\n  if (isConditionTrue && mantissaB <= inputIntB) {\n    shiftAmount = mantissaB + difference;\n  }\n  if (isConditionTrue && mantissaB <= inputIntB) {\n    inputFloatB = inputFloatB ^ inputFloatA;\n  }\n  if (isConditionTrue && mantissaB <= inputIntB) {\n    inputFloatA = inputFloatA ^ inputFloatB;\n  }\n  if (isConditionTrue && mantissaB <= inputIntB) {\n    inputFloatB = inputFloatB ^ inputFloatA;\n  }\n  if (inputIntB < mantissaB) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputFloatA;\n  }\n  mantissaB = inputFloatA & 0xffffff | 0x800000;\n  if ((inputFloatA & 0x80000000) != 0) {\n    mantissaB = -mantissaB;\n  }\n  mantissaA = inputFloatB & 0xffffff | 0x800000;\n  if ((inputFloatB & 0x80000000) != 0) {\n    mantissaA = -mantissaA;\n  }\n  if (shiftAmount == difference) {\n    mantissaA = mantissaA ^ 0x800000;\n    if (shiftAmount == 0) {\n      mantissaB = mantissaB ^ 0x800000;\n      shiftAmount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mantissaB = mantissaB + ((int)mantissaA >> (difference & 0xff));\n  mantissaA = mantissaA << (0x20 - difference & 0xff);\n  inputFloatA = mantissaB & 0x80000000;\n  if ((int)mantissaB < 0) {\n    isConditionTrue = mantissaA != 0;\n    mantissaA = -mantissaA;\n    mantissaB = -mantissaB - (uint)isConditionTrue;\n  }\n  if (mantissaB < 0x800000) {\n    difference = mantissaA & 0x80000000;\n    mantissaA = mantissaA << 1;\n    mantissaB = mantissaB * 2 + (uint)(difference != 0);\n    difference = shiftAmount - 2;\n    if ((mantissaB & 0x800000) == 0) {\n      shiftAmount = LZCOUNT(mantissaB) - 8;\n      mantissaB = mantissaB << (shiftAmount & 0xff);\n      if ((int)difference < (int)shiftAmount) {\n        mantissaB = mantissaB >> (-(difference - shiftAmount) & 0xff);\n      }\n      else {\n        mantissaB = mantissaB + (difference - shiftAmount) * 0x800000;\n      }\n      return mantissaB | inputFloatA;\n    }\n  }\n  else {\n    difference = shiftAmount - 1;\n    if (0xffffff < mantissaB) {\n      difference = mantissaB & 1;\n      mantissaB = mantissaB >> 1;\n      mantissaA = (uint)(difference != 0) << 0x1f | mantissaA >> 1;\n      difference = shiftAmount;\n      if (0xfd < shiftAmount) goto LAB_0008186a;\n    }\n  }\n  mantissaB = mantissaB + difference * 0x800000 + (uint)(0x7fffffff < mantissaA);\n  if (mantissaA == 0x80000000) {\n    mantissaB = mantissaB & 0xfffffffe;\n  }\n  return mantissaB | inputFloatA;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_new_float_00081734",
                "param_1": "inputFloatA",
                "param_2": "inputFloatB",
                "param_3": "inputIntA",
                "param_4": "inputIntB",
                "iVar1": "shiftedFloatA",
                "iVar2": "shiftedFloatB",
                "uVar3": "mantissaA",
                "uVar4": "mantissaB",
                "uVar5": "shiftAmount",
                "uVar6": "difference",
                "bVar7": "isConditionTrue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_result_00081894",
            "code": "\nuint calculateResult_00081894(uint inputNumber)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constantValue;\n  uint conditionalValue;\n  \n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputNumber);\n  shiftAmount = leadingZeros - 8;\n  constantValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    conditionalValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = constantValue + (inputNumber << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < conditionalValue);\n    if (conditionalValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputNumber << leadingZeros + 0x18;\n  leadingZeros = constantValue + ((inputNumber >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_result_00081894",
                "param_1": "inputNumber",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constantValue",
                "uVar4": "conditionalValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "compute_modified_value_0008189c",
            "code": "\nuint computeModifiedValue_0008189c(uint value)\n\n{\n  uint leadingZeroCount;\n  uint shiftCount;\n  uint signBit;\n  int modifiedValue;\n  \n  signBit = value & 0x80000000;\n  if ((int)signBit < 0) {\n    value = -value;\n  }\n  if (value == 0) {\n    return 0;\n  }\n  leadingZeroCount = countLeadingZeros(value);\n  shiftCount = leadingZeroCount - 8;\n  modifiedValue = ((signBit | 0x4b000000) - 0x800000) + shiftCount * -0x800000;\n  if (7 < leadingZeroCount) {\n    leadingZeroCount = 0 << (shiftCount & 0xff);\n    signBit = modifiedValue + (value << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < leadingZeroCount);\n    if (leadingZeroCount == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftCount = value << leadingZeroCount + 0x18;\n  signBit = modifiedValue + ((value >> (0x20 - (leadingZeroCount + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftCount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "compute_modified_value_0008189c",
                "param_1": "value",
                "uVar1": "leadingZeroCount",
                "uVar2": "shiftCount",
                "uVar3": "signBit",
                "iVar4": "modifiedValue",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_value_00081944",
            "code": "\nuint calculateFloatValue_00081944(uint input1,uint input2,undefined4 unused,uint input3)\n\n{\n  longlong product;\n  uint result;\n  uint shiftBits1;\n  int sum;\n  int offset;\n  uint temp;\n  int shiftBits2;\n  uint maskedInput;\n  bool isZero;\n  bool isNegativeOrZero;\n  \n  shiftBits1 = input1 >> 0x17 & 0xff;\n  isZero = shiftBits1 == 0;\n  if (!isZero) {\n    input3 = input2 >> 0x17 & 0xff;\n    isZero = input3 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftBits1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input3 == 0xff;\n  }\n  if (isZero) {\n    input3 = input2 >> 0x17 & 0xff;\n    if (shiftBits1 == 0xff || input3 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      maskedInput = result;\n      if (((isZero) || ((shiftBits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input3 == 0xff && (maskedInput = input2, (input2 & 0x7fffff) != 0)))) {\n        return maskedInput | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = shiftBits1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      shiftBits1 = shiftBits1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = input3 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input3 = input3 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shiftBits1 + input3;\n  maskedInput = input1 ^ input2;\n  shiftBits1 = input1 << 9;\n  isZero = shiftBits1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (shiftBits1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = maskedInput & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegativeOrZero = SBORROW4(sum,0x7f);\n    offset = sum + -0x7f;\n    isZero = offset == 0;\n    shiftBits2 = offset;\n    if (!isZero && 0x7e < sum) {\n      isNegativeOrZero = SBORROW4(0xff,offset);\n      shiftBits2 = 0xff - offset;\n      isZero = offset == 0xff;\n    }\n    if (!isZero && shiftBits2 < 0 == isNegativeOrZero) {\n      result = result | offset * 0x800000;\n    }\n    if (!isZero && shiftBits2 < 0 == isNegativeOrZero) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp = 0;\n    isNegativeOrZero = SBORROW4(offset,1);\n    maskedInput = sum - 0x80;\n    isZero = maskedInput == 0;\n    shiftBits1 = maskedInput;\n  }\n  else {\n    product = (ulonglong)(shiftBits1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | temp >> 0x1f;\n      temp = temp << 1;\n    }\n    result = maskedInput & 0x80000000 | result;\n    maskedInput = (sum + -0x7f) - (uint)isZero;\n    isNegativeOrZero = SBORROW4(maskedInput,0xfd);\n    isZero = maskedInput == 0xfd;\n    shiftBits1 = maskedInput - 0xfd;\n    if (maskedInput < 0xfe) {\n      result = result + maskedInput * 0x800000 + (uint)(0x7fffffff < temp);\n      if (temp == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)shiftBits1 < 0 != isNegativeOrZero) {\n    isZero = (int)(maskedInput + 0x19) < 0;\n    if (maskedInput == 0xffffffe7 || isZero != SCARRY4(maskedInput,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (maskedInput != 0xffffffe7 && isZero == SCARRY4(maskedInput,0x19)) {\n      shiftBits1 = (result << 1) >> (-maskedInput & 0xff);\n      maskedInput = result << (maskedInput + 0x20 & 0xff);\n      shiftBits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftBits1 >> 1) + (uint)((byte)shiftBits1 & 1);\n      if ((temp | maskedInput << 1) == 0) {\n        shiftBits1 = shiftBits1 & ~(maskedInput >> 0x1f);\n      }\n      return shiftBits1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_value_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused",
                "param_4": "input3",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shiftBits1",
                "iVar4": "sum",
                "iVar5": "offset",
                "uVar6": "temp",
                "iVar7": "shiftBits2",
                "uVar8": "maskedInput",
                "bVar9": "isZero",
                "bVar10": "isNegativeOrZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_00081bf4",
            "code": "\nuint checkOverflow_00081bf4(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint input1Doubled;\n  uint input2Doubled;\n  uint combinedVars;\n  bool isZero;\n  \n  input1Doubled = input1 * 2;\n  input2Doubled = input2 * 2;\n  if (((int)input1Doubled >> 0x18 == -1 || (int)input2Doubled >> 0x18 == -1) &&\n     ((((int)input1Doubled >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2Doubled >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedVars = input1Doubled | input2 & 0x7fffffff;\n  isZero = combinedVars == 0;\n  if (!isZero) {\n    combinedVars = input1 ^ input2;\n    isZero = combinedVars == 0;\n  }\n  isNegative = -1 < (int)combinedVars;\n  if (isNegative) {\n    input1 = input1Doubled + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && input2Doubled <= input1Doubled) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || input2Doubled > input1Doubled) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "input1Doubled",
                "uVar3": "input2Doubled",
                "uVar4": "combinedVars",
                "bVar1": "isNegative",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "call_functions_00081c54",
            "code": "\nvoid callFunctions_00081c54(undefined4 functionPointer,undefined4 argument)\n\n{\n  FUN_00081c5c(argument,functionPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "call_functions_00081c54",
                "param_1": "functionPointer",
                "param_2": "argument"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_and_return_result_00081c5c",
            "code": "\nundefined8 concatenateAndReturnResult_00081c5c(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_and_return_result_00081c5c",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_carry_and_zero_00081c94",
            "code": "\nbool check_carry_and_zero_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c5c();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_carry_and_zero_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_zero_or_one_00081ca8",
            "code": "\nbool checkZeroOrOne_00081ca8(void)\n\n{\n  undefined isZero;\n  undefined isOne;\n  \n  FUN_00081c54();\n  return !(bool)isOne || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_zero_or_one_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "isOne"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_unsigned_to_signed_00081cd0",
            "code": "\nuint convertUnsignedToSigned_00081cd0(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_unsigned_to_signed_00081cd0",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_param_00081d1c",
            "code": "\nuint check_param_00081d1c(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_param_00081d1c",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword targetAddress,dword newValue,dword flag)\n\n{\n  dword *currentEntry;\n  uint entryIndex;\n  uint flagBitmask;\n  \n  if (relocationEntries[48].r_offset == 0) {\n    relocationEntries[48].r_offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(relocationEntries[48].r_offset + 4);\n  currentEntry = (dword *)relocationEntries[48].r_offset;\n  if (0x1f < (int)entryIndex) {\n    currentEntry = (dword *)FUN_00081df4(400);\n    if (currentEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *currentEntry = relocationEntries[48].r_offset;\n    currentEntry[1] = 0;\n    entryIndex = 0;\n    relocationEntries[48].r_offset = (dword)currentEntry;\n    currentEntry[0x62] = 0;\n    currentEntry[99] = 0;\n  }\n  flagBitmask = 1 << (entryIndex & 0xff);\n  currentEntry[entryIndex + 0x22] = targetAddress;\n  currentEntry[0x62] = currentEntry[0x62] | flagBitmask;\n  currentEntry[entryIndex + 0x42] = flag;\n  currentEntry[99] = flagBitmask | currentEntry[99];\n  currentEntry[1] = entryIndex + 1;\n  currentEntry[entryIndex + 2] = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "targetAddress",
                "param_2": "newValue",
                "param_3": "flag",
                "Elf32_Rel_ARRAY_20070000": "relocationEntries",
                "pdVar1": "currentEntry",
                "uVar2": "entryIndex",
                "uVar3": "flagBitmask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_set_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctionSet_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionArray;\n  \n  FUNC_00085858();\n  functionArray = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionArray = functionArray + 1;\n    (**functionArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "iVar1": "iterationCount",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "execute_relocation_00081df4",
            "code": "\nvoid executeRelocation_00081df4(undefined4 parameter)\n\n{\n  FUN_00081e14(relocationArray[140].offset,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "execute_relocation_00081df4",
                "param_1": "parameter",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "execute_relocation_00081e04",
            "code": "\nvoid executeRelocation_00081e04(undefined4 data)\n\n{\n  FUN_00083d9c(relocationTable[140].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "execute_relocation_00081e04",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081e14(undefined4 *ptr_param,uint size)\n\n{\n  dword relInfo;\n  int currOffset;\n  uint alignedSize;\n  uint tempSize;\n  int tempOffset;\n  uint tempSize2;\n  dword nextRelInfo;\n  uint tempValue;\n  int tempOffset2;\n  undefined *tempPtr;\n  dword tempRelInfo;\n  dword prevRelInfo;\n  int blockIndex;\n  dword *prevRelInfoPtr;\n  uint alignment;\n  undefined *tempPtr2;\n  dword *currRelInfoPtr;\n  uint blockSize;\n  \n  if (size + 0xb < 0x17) {\n    alignment = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    alignment = size + 0xb & 0xfffffff8;\n    if (((int)alignment < 0) || (alignment < size)) {\nLAB_00081e7a:\n      *ptr_param = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(ptr_param);\n  relInfo = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignment < 0x1f8) {\n    blockIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignment);\n    if ((blockIndex != alignment + 0x20070464) ||\n       (currOffset = blockIndex + 8, blockIndex = *(int *)(blockIndex + 0x14), currOffset != blockIndex)) {\n      tempOffset = *(int *)(blockIndex + 0xc);\n      tempOffset2 = (*(uint *)(blockIndex + 4) & 0xfffffffc) + blockIndex;\n      alignment = *(uint *)(tempOffset2 + 4);\n      currOffset = *(int *)(blockIndex + 8);\n      *(int *)(currOffset + 0xc) = tempOffset;\n      *(int *)(tempOffset + 8) = currOffset;\n      *(uint *)(tempOffset2 + 4) = alignment | 1;\n      FUNC_0008259c(ptr_param);\n      return (int *)(blockIndex + 8);\n    }\n    blockSize = (alignment >> 3) + 2;\n  }\n  else {\n    blockSize = alignment >> 9;\n    if (blockSize == 0) {\n      currOffset = 0x7e;\n      blockIndex = 0x3f;\n    }\n    else if (blockSize < 5) {\n      blockIndex = (alignment >> 6) + 0x38;\n      currOffset = blockIndex * 2;\n    }\n    else if (blockSize < 0x15) {\n      blockIndex = blockSize + 0x5b;\n      currOffset = blockIndex * 2;\n    }\n    else if (blockSize < 0x55) {\n      blockIndex = (alignment >> 0xc) + 0x6e;\n      currOffset = blockIndex * 2;\n    }\n    else if (blockSize < 0x155) {\n      blockIndex = (alignment >> 0xf) + 0x77;\n      currOffset = blockIndex * 2;\n    }\n    else if (blockSize < 0x555) {\n      blockIndex = (alignment >> 0x12) + 0x7c;\n      currOffset = blockIndex * 2;\n    }\n    else {\n      currOffset = 0xfc;\n      blockIndex = 0x7e;\n    }\n    for (nextRelInfo = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[currOffset]; currOffset * 4 + 0x20070464U != nextRelInfo\n        ; nextRelInfo = *(dword *)(nextRelInfo + 0xc)) {\n      blockSize = *(uint *)(nextRelInfo + 4) & 0xfffffffc;\n      tempOffset = blockSize - alignment;\n      if (0xf < tempOffset) {\n        blockIndex = blockIndex + -1;\n        break;\n      }\n      if (-1 < tempOffset) {\n        currOffset = blockSize + nextRelInfo;\n        alignment = *(uint *)(currOffset + 4);\n        tempOffset = *(int *)(nextRelInfo + 0xc);\n        blockIndex = *(int *)(nextRelInfo + 8);\n        *(int *)(blockIndex + 0xc) = tempOffset;\n        *(int *)(tempOffset + 8) = blockIndex;\n        *(uint *)(currOffset + 4) = alignment | 1;\n        FUNC_0008259c(ptr_param);\n        return (int *)(nextRelInfo + 8);\n      }\n    }\n    blockSize = blockIndex + 1;\n  }\n  nextRelInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    alignedSize = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    tempSize = alignedSize & 0xfffffffc;\n    tempSize2 = tempSize - alignment;\n    if (0xf < (int)tempSize2) {\n      nextRelInfo = alignment + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignment | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = nextRelInfo;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = nextRelInfo;\n      *(undefined4 *)(nextRelInfo + 0xc) = 0x2007046c;\n      *(undefined4 *)(nextRelInfo + 8) = 0x2007046c;\n      *(uint *)(nextRelInfo + 4) = tempSize2 | 1;\n      *(uint *)(nextRelInfo + tempSize2) = tempSize2;\n      FUNC_0008259c(ptr_param);\n      return (int *)(relInfo + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)tempSize2) {\n      *(uint *)(tempSize + relInfo + 4) = *(uint *)(tempSize + relInfo + 4) | 1;\n      FUNC_0008259c(ptr_param);\n      return (int *)(relInfo + 8);\n    }\n    if (tempSize < 0x200) {\n      tempSize = alignedSize & 0xfffffff8;\n      blockIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + tempSize);\n      nextRelInfo = 1 << ((int)(alignedSize >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relInfo + 8) = blockIndex;\n      *(uint *)(relInfo + 0xc) = tempSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = nextRelInfo;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + tempSize) = relInfo;\n      *(dword *)(blockIndex + 0xc) = relInfo;\n    }\n    else {\n      tempSize2 = alignedSize >> 9;\n      if (tempSize2 < 5) {\n        currOffset = (alignedSize >> 6) + 0x38;\n        blockIndex = currOffset * 2;\n      }\n      else if (tempSize2 < 0x15) {\n        currOffset = tempSize2 + 0x5b;\n        blockIndex = currOffset * 2;\n      }\n      else if (tempSize2 < 0x55) {\n        currOffset = (alignedSize >> 0xc) + 0x6e;\n        blockIndex = currOffset * 2;\n      }\n      else if (tempSize2 < 0x155) {\n        currOffset = (alignedSize >> 0xf) + 0x77;\n        blockIndex = currOffset * 2;\n      }\n      else if (tempSize2 < 0x555) {\n        currOffset = (alignedSize >> 0x12) + 0x7c;\n        blockIndex = currOffset * 2;\n      }\n      else {\n        blockIndex = 0xfc;\n        currOffset = 0x7e;\n      }\n      nextRelInfo = blockIndex * 4 + 0x20070464;\n      tempRelInfo = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[blockIndex];\n      if (tempRelInfo == nextRelInfo) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (currOffset >> 2 & 0xffU);\n        prevRelInfo = tempRelInfo;\n      }\n      else {\n        do {\n          prevRelInfo = tempRelInfo;\n          if ((*(uint *)(tempRelInfo + 4) & 0xfffffffc) <= tempSize) break;\n          tempRelInfo = *(dword *)(tempRelInfo + 8);\n          prevRelInfo = tempRelInfo;\n        } while (nextRelInfo != tempRelInfo);\n        tempRelInfo = *(dword *)(prevRelInfo + 0xc);\n      }\n      nextRelInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relInfo + 0xc) = tempRelInfo;\n      *(dword *)(relInfo + 8) = prevRelInfo;\n      *(dword *)(tempRelInfo + 8) = relInfo;\n      *(dword *)(prevRelInfo + 0xc) = relInfo;\n    }\n  }\n  relInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  alignedSize = 1 << ((int)blockSize >> 2 & 0xffU);\n  if (alignedSize <= nextRelInfo) {\n    if ((nextRelInfo & alignedSize) == 0) {\n      blockSize = blockSize & 0xfffffffc;\n      do {\n        alignedSize = alignedSize << 1;\n        blockSize = blockSize + 4;\n      } while ((nextRelInfo & alignedSize) == 0);\n    }\n    do {\n      currRelInfoPtr = &Elf32_Rel_ARRAY_20070000[blockSize + 0x8c].r_info;\n      prevRelInfoPtr = currRelInfoPtr;\n      tempSize = blockSize;\n      do {\n        for (tempPtr = (undefined *)prevRelInfoPtr[3]; prevRelInfoPtr != (dword *)tempPtr;\n            tempPtr = *(undefined **)(tempPtr + 0xc)) {\n          tempSize2 = *(uint *)(tempPtr + 4) & 0xfffffffc;\n          tempValue = tempSize2 - alignment;\n          if (0xf < (int)tempValue) {\n            currOffset = *(int *)(tempPtr + 8);\n            blockIndex = *(int *)(tempPtr + 0xc);\n            tempPtr2 = tempPtr + alignment;\n            *(uint *)(tempPtr + 4) = alignment | 1;\n            *(int *)(currOffset + 0xc) = blockIndex;\n            *(int *)(blockIndex + 8) = currOffset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)tempPtr2;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)tempPtr2;\n            *(undefined4 *)(tempPtr2 + 0xc) = 0x2007046c;\n            *(undefined4 *)(tempPtr2 + 8) = 0x2007046c;\n            *(uint *)(tempPtr2 + 4) = tempValue | 1;\n            *(uint *)(tempPtr2 + tempValue) = tempValue;\n            FUNC_0008259c(ptr_param);\n            return (int *)(tempPtr + 8);\n          }\n          if (-1 < (int)tempValue) {\n            blockIndex = *(int *)(tempPtr + 8);\n            currOffset = *(int *)(tempPtr + 0xc);\n            *(uint *)(tempPtr + tempSize2 + 4) = *(uint *)(tempPtr + tempSize2 + 4) | 1;\n            *(int *)(blockIndex + 0xc) = currOffset;\n            *(int *)(currOffset + 8) = blockIndex;\n            FUNC_0008259c(ptr_param);\n            return (int *)(tempPtr + 8);\n          }\n        }\n        tempSize = tempSize + 1;\n        prevRelInfoPtr = prevRelInfoPtr + 2;\n      } while ((tempSize & 3) != 0);\n      do {\n        tempSize2 = blockSize & 3;\n        tempPtr = (undefined *)(currRelInfoPtr + -2);\n        blockSize = blockSize - 1;\n        if (tempSize2 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~alignedSize;\n          break;\n        }\n        currRelInfoPtr = (dword *)*currRelInfoPtr;\n      } while (currRelInfoPtr == (dword *)tempPtr);\n      alignedSize = alignedSize * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= alignedSize &&\n           alignedSize - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (blockSize = tempSize, alignedSize == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & alignedSize) == 0; alignedSize = alignedSize << 1) {\n        blockSize = blockSize + 4;\n      }\n    } while( true );\n  }\n  blockSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignment <= blockSize) &&\n     (alignedSize = blockSize - alignment, nextRelInfo = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)alignedSize))\n  goto LAB_0008211e;\n  alignedSize = Elf32_Rel_ARRAY_20070000[141].r_info + blockSize;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    tempSize = alignment + DAT_20071190 + 0x10;\n  }\n  else {\n    tempSize = alignment + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  nextRelInfo = FUN_00082970(ptr_param,tempSize);\n  if ((nextRelInfo == 0xffffffff) || ((nextRelInfo < alignedSize && (relInfo != 0x20070464)))) {\n    blockSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    nextRelInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    tempSize2 = DAT_20071194 + tempSize;\n    DAT_20071194 = tempSize2;\n    if ((alignedSize == nextRelInfo) && ((alignedSize & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = tempSize + blockSize | 1;\n    }\n    else {\n      tempRelInfo = nextRelInfo;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        tempRelInfo = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = tempSize2 + (nextRelInfo - alignedSize);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = tempRelInfo;\n      alignedSize = nextRelInfo & 7;\n      if (alignedSize == 0) {\n        blockIndex = 0x1000;\n      }\n      else {\n        nextRelInfo = nextRelInfo + (8 - alignedSize);\n        blockIndex = 0x1008 - alignedSize;\n      }\n      blockIndex = blockIndex - (tempSize + nextRelInfo & 0xfff);\n      currOffset = FUN_00082970(ptr_param,blockIndex);\n      if (currOffset == -1) {\n        alignedSize = 1;\n        blockIndex = 0;\n      }\n      else {\n        alignedSize = (currOffset - nextRelInfo) + blockIndex | 1;\n      }\n      tempSize2 = DAT_20071194 + blockIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = nextRelInfo;\n      DAT_20071194 = tempSize2;\n      *(uint *)(nextRelInfo + 4) = alignedSize;\n      if (relInfo != 0x20070464) {\n        if (blockSize < 0x10) {\n          *(undefined4 *)(nextRelInfo + 4) = 1;\n          blockSize = 0;\n          goto LAB_00082108;\n        }\n        blockSize = blockSize - 0xc & 0xfffffff8;\n        *(uint *)(relInfo + 4) = blockSize | *(uint *)(relInfo + 4) & 1;\n        *(undefined4 *)(relInfo + blockSize + 4) = 5;\n        *(undefined4 *)(relInfo + blockSize + 8) = 5;\n        if (0xf < blockSize) {\n          FUN_00083d9c(ptr_param,relInfo + 8);\n          tempSize2 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < tempSize2) {\n      DAT_2007118c = tempSize2;\n    }\n    if (DAT_20071188 < tempSize2) {\n      DAT_20071188 = tempSize2;\n    }\n    blockSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    nextRelInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  alignedSize = blockSize - alignment;\n  if ((blockSize < alignment) || ((int)alignedSize < 0x10)) {\n    FUNC_0008259c(ptr_param);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignment + nextRelInfo;\n  *(uint *)(nextRelInfo + 4) = alignment | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignedSize | 1;\n  FUNC_0008259c(ptr_param);\n  return (int *)(nextRelInfo + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "ptr_param",
                "param_2": "size",
                "dVar1": "relInfo",
                "iVar2": "currOffset",
                "uVar3": "alignedSize",
                "uVar4": "tempSize",
                "iVar5": "tempOffset",
                "uVar6": "tempSize2",
                "dVar7": "nextRelInfo",
                "uVar8": "tempValue",
                "iVar9": "tempOffset2",
                "puVar10": "tempPtr",
                "dVar11": "tempRelInfo",
                "dVar12": "prevRelInfo",
                "iVar13": "blockIndex",
                "pdVar14": "prevRelInfoPtr",
                "uVar15": "alignment",
                "puVar16": "tempPtr2",
                "pdVar17": "currRelInfoPtr",
                "uVar18": "blockSize"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destEndPtr;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint copySize;\n  bool isRemaining;\n  \n  destEndPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copySize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          srcPtr = destEndPtr;\n          isRemaining = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destEndPtr = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemaining);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copySize = 4 - ((uint)destination & 3);\n      size = size - copySize;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destEndPtr = destPtr;\n      source = srcPtr;\n      if ((copySize & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destEndPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destEndPtr = *source;\n    destEndPtr[1] = source[1];\n    destEndPtr[2] = source[2];\n    destEndPtr[3] = source[3];\n    destEndPtr[4] = source[4];\n    destEndPtr[5] = source[5];\n    destEndPtr[6] = source[6];\n    destEndPtr[7] = source[7];\n    destEndPtr[8] = source[8];\n    destEndPtr[9] = source[9];\n    destEndPtr[10] = source[10];\n    destEndPtr[0xb] = source[0xb];\n    destEndPtr[0xc] = source[0xc];\n    destEndPtr[0xd] = source[0xd];\n    destEndPtr[0xe] = source[0xe];\n    destEndPtr[0xf] = source[0xf];\n    destEndPtr = destEndPtr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destEndPtr = *source;\n      destEndPtr[1] = source[1];\n      destEndPtr[2] = source[2];\n      destEndPtr[3] = source[3];\n      destEndPtr = destEndPtr + 4;\n      source = source + 4;\n      isRemaining = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemaining);\n  }\n  copySize = remainingSize + 0xc;\n  srcPtr = destEndPtr;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      isRemaining = 3 < copySize;\n      copySize = copySize - 4;\n      destEndPtr = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (isRemaining);\n  }\nLAB_000823d0:\n  if (copySize + 4 != 0) {\n    destPtr = destEndPtr;\n    srcPtr = source;\n    if ((copySize & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destEndPtr + 1);\n      *(undefined *)destEndPtr = *(undefined *)source;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destEndPtr",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "copySize",
                "bVar6": "isRemaining"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *tmp_ptr;\n  uint tmp_size;\n  undefined *tmp_buf;\n  uint tmp_remainder;\n  \n  if ((src < dest) && (tmp_ptr = (undefined4 *)((int)src + size), dest < tmp_ptr)) {\n    tmp_buf = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        tmp_ptr = (undefined4 *)((int)tmp_ptr + -1);\n        index = index + -1;\n        tmp_buf = tmp_buf + -1;\n        *tmp_buf = *(undefined *)tmp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tmp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = tmp_ptr + 4;\n      *tmp_ptr = *src_ptr;\n      tmp_ptr[1] = src_ptr[1];\n      tmp_ptr[2] = src_ptr[2];\n      tmp_ptr[3] = src_ptr[3];\n      tmp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    tmp_remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    tmp_size = tmp_remainder;\n    tmp_ptr = dest;\n    src_ptr = src;\n    if (3 < tmp_remainder) {\n      do {\n        tmp_size = tmp_size - 4;\n        *tmp_ptr = *src_ptr;\n        tmp_ptr = tmp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < tmp_size);\n      index = (tmp_remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      tmp_remainder = size & 3;\n    }\n    size = tmp_remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  tmp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)tmp_ptr + 1);\n    *(undefined *)tmp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tmp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "tmp_ptr",
                "uVar5": "tmp_size",
                "puVar6": "tmp_buf",
                "uVar7": "tmp_remainder"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "memset_00082504",
            "code": "\nvoid memset_00082504(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_ptr;\n  undefined4 value_32;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = value_32;\n        dest_ptr[1] = value_32;\n        dest_ptr[2] = value_32;\n        dest_ptr[3] = value_32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_cleanup_label;\n    }\n    do {\n      size = size - 4;\n      *dest = value_32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_cleanup_label:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_ptr;\n    } while (next_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "memset_00082504",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_ptr",
                "uVar3": "value_32",
                "uVar4": "remaining_size",
                "bVar5": "is_zero",
                "LAB_00082580": "end_cleanup_label"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "process_elf32_relocation_000825a0",
            "code": "\nvoid processElf32Relocation_000825a0(undefined4 offset,undefined4 param_2)\n\n{\n  FUN_000825b0(relocationTable[140].r_offset,offset,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "process_elf32_relocation_000825a0",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_block_000825b0",
            "code": "\nint * allocateMemoryBlock_000825b0(undefined4 *ptr_parameter,int *existing_block,uint size)\n\n{\n  dword temp_dword;\n  int *new_block;\n  uint temp_uint;\n  int temp_int;\n  uint existing_block_size;\n  int temp_int_2;\n  int *temp_pointer;\n  uint block_to_keep_size;\n  uint aligned_size;\n  int *temp_ptr;\n  \n  if (existing_block == (int *)0x0) {\n    new_block = (int *)FUN_00081e14(ptr_parameter,size);\n    return new_block;\n  }\n  FUNC_00082598();\n  existing_block_size = existing_block[-1];\n  block_to_keep_size = existing_block_size & 0xfffffffc;\n  new_block = existing_block + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *ptr_parameter = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)block_to_keep_size < (int)aligned_size) {\n    temp_dword = (int)new_block + block_to_keep_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_dword) {\n      temp_uint = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_dword = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp_uint + block_to_keep_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_block + aligned_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uint + block_to_keep_size) - aligned_size | 1;\n        existing_block[-1] = aligned_size | existing_block[-1] & 1U;\n        FUNC_0008259c(ptr_parameter);\n        return existing_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_dword + 4) & 0xfffffffe) + temp_dword + 4) & 1) == 0) {\n      temp_uint = *(uint *)(temp_dword + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp_uint + block_to_keep_size)) {\n        temp_int_2 = *(int *)(temp_dword + 0xc);\n        temp_int = *(int *)(temp_dword + 8);\n        *(int *)(temp_int + 0xc) = temp_int_2;\n        *(int *)(temp_int_2 + 8) = temp_int;\n        block_to_keep_size = temp_uint + block_to_keep_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_uint = 0;\n      temp_dword = 0;\n    }\n    if (-1 < (int)(existing_block_size << 0x1f)) {\n      temp_ptr = (int *)((int)new_block - existing_block[-2]);\n      existing_block_size = (temp_ptr[1] & 0xfffffffcU) + block_to_keep_size;\n      if (temp_dword != 0) {\n        if (temp_dword == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp_uint + existing_block_size)) {\n            new_block = temp_ptr + 2;\n            temp_int = *new_block;\n            temp_int_2 = temp_ptr[3];\n            block_to_keep_size = block_to_keep_size - 4;\n            *(int *)(temp_int + 0xc) = temp_int_2;\n            *(int *)(temp_int_2 + 8) = temp_int;\n            if (block_to_keep_size < 0x25) {\n              temp_pointer = new_block;\n              if (0x13 < block_to_keep_size) {\n                temp_ptr[2] = *existing_block;\n                temp_ptr[3] = existing_block[1];\n                if (block_to_keep_size < 0x1c) {\n                  existing_block = existing_block + 2;\n                  temp_pointer = temp_ptr + 4;\n                }\n                else {\n                  temp_ptr[4] = existing_block[2];\n                  temp_ptr[5] = existing_block[3];\n                  if (block_to_keep_size == 0x24) {\n                    temp_ptr[6] = existing_block[4];\n                    temp_pointer = existing_block + 5;\n                    existing_block = existing_block + 6;\n                    temp_ptr[7] = *temp_pointer;\n                    temp_pointer = temp_ptr + 8;\n                  }\n                  else {\n                    existing_block = existing_block + 4;\n                    temp_pointer = temp_ptr + 6;\n                  }\n                }\n              }\n              *temp_pointer = *existing_block;\n              temp_pointer[1] = existing_block[1];\n              temp_pointer[2] = existing_block[2];\n            }\n            else {\n              FUN_00082438(new_block,existing_block);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_ptr + aligned_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uint + existing_block_size) - aligned_size | 1;\n            temp_ptr[1] = aligned_size | temp_ptr[1] & 1U;\n            FUNC_0008259c(ptr_parameter);\n            return new_block;\n          }\n        }\n        else {\n          temp_uint = temp_uint + existing_block_size;\n          if ((int)aligned_size <= (int)temp_uint) {\n            temp_int_2 = *(int *)(temp_dword + 0xc);\n            temp_int = *(int *)(temp_dword + 8);\n            *(int *)(temp_int + 0xc) = temp_int_2;\n            *(int *)(temp_int_2 + 8) = temp_int;\n            temp_pointer = temp_ptr + 2;\n            temp_int = *temp_pointer;\n            temp_int_2 = temp_ptr[3];\n            existing_block_size = block_to_keep_size - 4;\n            *(int *)(temp_int + 0xc) = temp_int_2;\n            *(int *)(temp_int_2 + 8) = temp_int;\n            block_to_keep_size = temp_uint;\n            if (existing_block_size < 0x25) {\n              new_block = temp_pointer;\n              if (0x13 < existing_block_size) {\n                temp_ptr[2] = *existing_block;\n                temp_ptr[3] = existing_block[1];\n                if (existing_block_size < 0x1c) {\n                  existing_block = existing_block + 2;\n                  new_block = temp_ptr + 4;\n                }\n                else {\n                  temp_ptr[4] = existing_block[2];\n                  temp_ptr[5] = existing_block[3];\n                  if (existing_block_size == 0x24) {\n                    temp_ptr[6] = existing_block[4];\n                    new_block = existing_block + 5;\n                    existing_block = existing_block + 6;\n                    temp_ptr[7] = *new_block;\n                    new_block = temp_ptr + 8;\n                  }\n                  else {\n                    existing_block = existing_block + 4;\n                    new_block = temp_ptr + 6;\n                  }\n                }\n              }\n              *new_block = *existing_block;\n              new_block[1] = existing_block[1];\n              new_block[2] = existing_block[2];\n              existing_block_size = temp_ptr[1];\n              new_block = temp_ptr;\n              existing_block = temp_pointer;\n            }\n            else {\n              FUN_00082438(temp_pointer,existing_block);\n              existing_block_size = temp_ptr[1];\n              new_block = temp_ptr;\n              existing_block = temp_pointer;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)existing_block_size) {\n        temp_pointer = temp_ptr + 2;\n        temp_int = *temp_pointer;\n        temp_int_2 = temp_ptr[3];\n        temp_uint = block_to_keep_size - 4;\n        *(int *)(temp_int + 0xc) = temp_int_2;\n        *(int *)(temp_int_2 + 8) = temp_int;\n        block_to_keep_size = existing_block_size;\n        if (temp_uint < 0x25) {\n          new_block = temp_pointer;\n          if (0x13 < temp_uint) {\n            temp_ptr[2] = *existing_block;\n            temp_ptr[3] = existing_block[1];\n            if (temp_uint < 0x1c) {\n              existing_block = existing_block + 2;\n              new_block = temp_ptr + 4;\n            }\n            else {\n              temp_ptr[4] = existing_block[2];\n              temp_ptr[5] = existing_block[3];\n              if (temp_uint == 0x24) {\n                temp_ptr[6] = existing_block[4];\n                new_block = existing_block + 5;\n                existing_block = existing_block + 6;\n                temp_ptr[7] = *new_block;\n                new_block = temp_ptr + 8;\n              }\n              else {\n                existing_block = existing_block + 4;\n                new_block = temp_ptr + 6;\n              }\n            }\n          }\n          *new_block = *existing_block;\n          new_block[1] = existing_block[1];\n          new_block[2] = existing_block[2];\n          existing_block_size = temp_ptr[1];\n          new_block = temp_ptr;\n          existing_block = temp_pointer;\n        }\n        else {\n          FUN_00082438(temp_pointer,existing_block);\n          existing_block_size = temp_ptr[1];\n          new_block = temp_ptr;\n          existing_block = temp_pointer;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr = (int *)FUN_00081e14(ptr_parameter,size);\n    if (temp_ptr == (int *)0x0) goto LAB_000826a4;\n    existing_block_size = existing_block[-1];\n    if (temp_ptr + -2 != (int *)((existing_block_size & 0xfffffffe) + (int)new_block)) {\n      block_to_keep_size = block_to_keep_size - 4;\n      if (block_to_keep_size < 0x25) {\n        new_block = existing_block;\n        temp_pointer = temp_ptr;\n        if (0x13 < block_to_keep_size) {\n          *temp_ptr = *existing_block;\n          temp_ptr[1] = existing_block[1];\n          if (block_to_keep_size < 0x1c) {\n            new_block = existing_block + 2;\n            temp_pointer = temp_ptr + 2;\n          }\n          else {\n            temp_ptr[2] = existing_block[2];\n            temp_ptr[3] = existing_block[3];\n            if (block_to_keep_size == 0x24) {\n              temp_ptr[4] = existing_block[4];\n              temp_ptr[5] = existing_block[5];\n              new_block = existing_block + 6;\n              temp_pointer = temp_ptr + 6;\n            }\n            else {\n              new_block = existing_block + 4;\n              temp_pointer = temp_ptr + 4;\n            }\n          }\n        }\n        *temp_pointer = *new_block;\n        temp_pointer[1] = new_block[1];\n        temp_pointer[2] = new_block[2];\n      }\n      else {\n        FUN_00082438(temp_ptr,existing_block);\n      }\n      FUN_00083d9c(ptr_parameter,existing_block);\n      goto LAB_000826a4;\n    }\n    block_to_keep_size = block_to_keep_size + (temp_ptr[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_uint = block_to_keep_size - aligned_size;\n  temp_ptr = existing_block;\n  if (temp_uint < 0x10) {\n    new_block[1] = existing_block_size & 1 | block_to_keep_size;\n    *(uint *)((int)new_block + block_to_keep_size + 4) = *(uint *)((int)new_block + block_to_keep_size + 4) | 1;\n  }\n  else {\n    new_block[1] = existing_block_size & 1 | aligned_size;\n    *(uint *)((int)new_block + aligned_size + 4) = temp_uint | 1;\n    *(uint *)((int)new_block + temp_uint + aligned_size + 4) = *(uint *)((int)new_block + temp_uint + aligned_size + 4) | 1;\n    FUN_00083d9c(ptr_parameter,(int)new_block + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(ptr_parameter);\n  return temp_ptr;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_block_000825b0",
                "param_1": "ptr_parameter",
                "param_2": "existing_block",
                "param_3": "size",
                "dVar1": "temp_dword",
                "piVar2": "new_block",
                "uVar3": "temp_uint",
                "iVar4": "temp_int",
                "uVar5": "existing_block_size",
                "iVar6": "temp_int_2",
                "piVar7": "temp_pointer",
                "uVar8": "block_to_keep_size",
                "uVar9": "aligned_size",
                "piVar10": "temp_ptr"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_error_and_assign_00082970",
            "code": "\nvoid checkErrorAndAssign_00082970(int *result,undefined4 input)\n\n{\n  int errorCode;\n  \n  DAT_200711bc = 0;\n  errorCode = FUN_0008118c(input);\n  if ((errorCode == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_error_and_assign_00082970",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_check_00082994",
            "code": "\nvoid copyStringWithAlignmentCheck_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort shortValue;\n  uint *pointer1;\n  uint *pointer2;\n  uint value1;\n  uint value2;\n  uint *destPointer;\n  bool isZeroByte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    pointer2 = source;\n    if (((uint)source & 1) != 0) {\n      pointer2 = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = pointer2;\n    if (((uint)pointer2 & 2) != 0) {\n      source = (uint *)((int)pointer2 + 2);\n      shortValue = *(ushort *)pointer2;\n      isZeroByte = (shortValue & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)destination = (char)shortValue;\n      }\n      else {\n        *(ushort *)destination = shortValue;\n        isZeroByte = (shortValue & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  value1 = *source;\n  pointer2 = source + 1;\n  destPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((value1 + 0xfefefeff & ~value1 & 0x80808080) != 0) goto LAB_000829f8;\n    destPointer = destination + 1;\n    *destination = value1;\n    pointer2 = source + 2;\n    value1 = source[1];\n  }\n  while( true ) {\n    pointer1 = pointer2 + 1;\n    value2 = *pointer2;\n    destination = destPointer;\n    if ((value1 + 0xfefefeff & ~value1 & 0x80808080) != 0) break;\n    destination = destPointer + 1;\n    *destPointer = value1;\n    value1 = value2;\n    if ((value2 + 0xfefefeff & ~value2 & 0x80808080) != 0) break;\n    pointer2 = pointer2 + 2;\n    value1 = *pointer1;\n    destPointer = destPointer + 2;\n    *destination = value2;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)value1;\n    value2 = value1 & 0xff;\n    value1 = value1 >> 8 | value1 << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (value2 != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "shortValue",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "uVar5": "value1",
                "uVar6": "value2",
                "puVar7": "destPointer",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr3;\n  uint count;\n  undefined4 *ptr5;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = FUN_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  ptr3 = param3[2];\n  ptr1 = *param3;\n  while (ptr3 != (int *)0x0) {\n    value1 = ptr1[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr5 = (undefined4 *)(*ptr1 + -4);\n      count = 0;\n      do {\n        ptr5 = ptr5 + 1;\n        result = FUN_00083c40(param1,*ptr5,param2);\n        count = count + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (value2 != count);\n      ptr3 = param3[2];\n    }\n    ptr3 = (int *)((int)ptr3 - (value1 & 0xfffffffc));\n    param3[2] = ptr3;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr3",
                "uVar4": "count",
                "puVar5": "ptr5",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_00082b38(int arg1,int arg2,int *******formatString,int **args)\n\n{\n  bool isFormatting;\n  bool isSigned;\n  bool isAlternate;\n  char fillChar;\n  bool isZeroPadded;\n  int ********formatArg;\n  int *argPtr;\n  int result;\n  char digitChar;\n  int *******remainingFormat;\n  uint digit;\n  int **argPtrArray;\n  uint flags;\n  uint ch;\n  int digitWidth;\n  int ********plocalFormatArg;\n  int localArgIndex;\n  int *******remainingArgs;\n  int *argValue;\n  int *******widthArg;\n  uint argIndex;\n  int *argIndex;\n  int *******remainingArgs;\n  undefined4 digitValue;\n  int ********pformattedValuePtr;\n  bool isNonzeroArg;\n  longlong argBits;\n  int *******maxArgIndex;\n  int *******minArgIndex;\n  int **argPtrPtr;\n  int result;\n  char *digits;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((arg1 != 0) && (*(int *)(arg1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  flags = (uint)*(ushort *)(arg2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(arg2 + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(arg2 + 0xc) = (short)flags;\n    *(uint *)(arg2 + 100) = *(uint *)(arg2 + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(arg2 + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(arg1,arg2);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(arg2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(arg2 + 0xe)) {\n    result = FUN_0008378c(arg1,arg2,formatString,args);\n    return result;\n  }\nLAB_00082b8a:\n  digits = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  result = 0;\n  formatArg = (int ********)local_68;\n  argPtrPtr = args;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  remainingFormat = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      remainingFormat = (int *******)((int)remainingFormat + 1);\n      if (*(char *)remainingFormat == '\\0') break;\n    } while (*(char *)remainingFormat != '%');\n    widthArg = (int *******)((int)remainingFormat - (int)formatString);\n    if (widthArg != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)widthArg);\n      *formatArg = formatString;\n      formatArg[1] = widthArg;\n      if (local_98 < 8) {\n        formatArg = formatArg + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          result = result + (int)widthArg;\n          local_98 = 0;\n          formatArg = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(arg1,arg2,&local_9c);\n        formatArg = (int ********)local_68;\n        if (result != 0) goto LAB_000833de;\n      }\n      result = result + (int)widthArg;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)remainingFormat != '\\0') {\n    local_a1 = '\\0';\n    ch = (uint)*(byte *)((int)remainingFormat + 1);\n    flags = 0;\n    isZeroPadded = false;\n    isSigned = false;\n    isFormatting = false;\n    isAlternate = false;\n    isNonzeroArg = false;\n    widthArg = (int *******)0x0;\n    minArgIndex = (int *******)0xffffffff;\n    formatString = (int *******)((int)remainingFormat + 1);\nLAB_00082c12:\n    formatString = (int *******)((int)formatString + 1);\nLAB_00082c16:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (ch != 0) {\n        maxArgIndex = (int *******)0x1;\n        minArgIndex = (int *******)0x1;\n        pformattedValuePtr = (int ********)&local_90;\n        local_90 = (char)ch;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isAlternate = true;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2a:\n      widthArg = (int *******)*argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      if ((int)widthArg < 0) {\n        widthArg = (int *******)-(int)widthArg;\n        goto switchD_00082c20_caseD_2d;\n      }\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2b:\n      ch = (uint)*(byte *)formatString;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2e:\n      ch = (uint)*(byte *)formatString;\n      remainingFormat = (int *******)((int)formatString + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)formatString + 1);\n        minArgIndex = (int *******)*argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        formatString = remainingFormat;\n        if ((int)minArgIndex < 0) {\n          minArgIndex = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        argIndex = 0;\n        do {\n          formatString = (int *******)((int)remainingFormat + 1);\n          ch = (uint)*(byte *)remainingFormat;\n          argIndex = digit + argIndex * 10;\n          digit = ch - 0x30;\n          remainingFormat = formatString;\n        } while (digit < 10);\n        minArgIndex = (int *******)(argIndex | (int)argIndex >> 0x1f);\n      }\n      else {\n        minArgIndex = (int *******)0x0;\n        formatString = remainingFormat;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isSigned = true;\n      if (isFormatting == false) goto LAB_00083028;\nLAB_00082e98:\n      argPtrPtr = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argValue = *argPtrPtr;\n      argIndex = argPtrPtr[1];\n      argPtrPtr = argPtrPtr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isSigned = true;\n      if (isFormatting != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isSigned << 4;\n      digitWidth = (uint)isFormatting << 5;\n      if ((isSigned == 0) && (digitWidth = (uint)isNonzeroArg << 6, isNonzeroArg != 0)) {\n        argValue = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argIndex = (int *)0x0;\n      }\n      else {\n        result = digitWidth;\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argIndex = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isSigned = true;\n      if (isFormatting != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isSigned) || (isNonzeroArg == false)) {\n        result = 1;\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argIndex = (int *)0x0;\n      }\n      else {\n        argIndex = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (isFormatting == false) goto LAB_00083196;\nLAB_00082fb6:\n      argPtrArray = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrArray + 2;\n      argValue = *argPtrArray;\n      argIndex = argPtrArray[1];\n      goto LAB_00082fca;\n    case 99:\n      argValue = *argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      maxArgIndex = (int *******)0x1;\n      local_90 = SUB41(argValue,0);\n      minArgIndex = (int *******)0x1;\n      pformattedValuePtr = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isFormatting != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isSigned == false) && (isNonzeroArg != false)) {\n        argValue = (int *)(int)*(short *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argIndex = (int *)((int)argValue >> 0x1f);\n      }\n      else {\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argIndex = (int *)((int)argValue >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)argIndex < 0) {\n        isNonzeroArg = argValue != (int *)0x0;\n        argValue = (int *)-(int)argValue;\n        argIndex = (int *)(-(int)argIndex - (uint)isNonzeroArg);\n        local_a1 = '-';\n        fillChar = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)minArgIndex) {\n        flags = flags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      ch = (uint)argValue | (uint)argIndex;\n      result = 1;\n      fillChar = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      isNonzeroArg = true;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x6c:\n      ch = (uint)*(byte *)formatString;\n      if (ch == 0x6c) {\n        isFormatting = true;\n        ch = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        isSigned = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isFormatting == false) {\n        if (isSigned == false) {\n          if (isNonzeroArg) {\n            argValue = *argPtrPtr;\n            argPtrPtr = argPtrPtr + 1;\n            *(short *)argValue = (short)result;\n          }\n          else {\n            argValue = *argPtrPtr;\n            argPtrPtr = argPtrPtr + 1;\n            *argValue = result;\n          }\n        }\n        else {\n          argValue = *argPtrPtr;\n          argPtrPtr = argPtrPtr + 1;\n          *argValue = result;\n        }\n      }\n      else {\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        *argValue = result;\n        argValue[1] = result >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isFormatting == false) goto LAB_00082f2a;\nLAB_00082d42:\n      argPtrArray = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrArray + 2;\n      argValue = *argPtrArray;\n      argIndex = argPtrArray[1];\n      result = 0;\n      break;\n    case 0x70:\n      argValue = *argPtrPtr;\n      argPtrPtr = argPtrPtr + 1;\n      local_9f = 0x78;\n      isZeroPadded = true;\n      argIndex = (int *)0x0;\n      local_a0 = 0x30;\n      digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isFormatting = true;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x73:\n      pformattedValuePtr = (int ********)*argPtrPtr;\n      local_a1 = '\\0';\n      argPtrPtr = argPtrPtr + 1;\n      if (pformattedValuePtr != (int ********)0x0) {\n        if ((int)minArgIndex < 0) {\n          minArgIndex = (int *******)FUN_00082a50(pformattedValuePtr);\n          remainingFormat = (int *******)0x0;\n          fillChar = local_a1;\n        }\n        else {\n          result = FUN_00084384(pformattedValuePtr,0,minArgIndex);\n          fillChar = local_a1;\n          if (result == 0) {\n            remainingFormat = (int *******)0x0;\n          }\n          else {\n            remainingArgs = (int *******)(result - (int)pformattedValuePtr);\n            if ((int)minArgIndex <= (int)(int *******)(result - (int)pformattedValuePtr)) {\n              remainingArgs = minArgIndex;\n            }\n            remainingFormat = (int *******)0x0;\n            minArgIndex = remainingArgs;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < minArgIndex) {\n        minArgIndex = (int *******)0x6;\n      }\n      maxArgIndex = (int *******)((uint)minArgIndex & ~((int)minArgIndex >> 0x1f));\n      pformattedValuePtr = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      remainingFormat = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isFormatting) goto LAB_00082f7c;\nLAB_00082e62:\n      argPtrArray = (int **)((int)argPtrPtr + 7U & 0xfffffff8);\n      argPtrPtr = argPtrArray + 2;\n      argValue = *argPtrArray;\n      argIndex = argPtrArray[1];\n      result = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (isFormatting != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isSigned == false) && (isNonzeroArg != false)) {\n        argIndex = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n      }\n      else {\n        argValue = *argPtrPtr;\n        argPtrPtr = argPtrPtr + 1;\n        argIndex = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isAlternate) && (((uint)argValue | (uint)argIndex) != 0)) {\n        isZeroPadded = true;\n        local_a0 = 0x30;\n        result = 2;\n        local_9f = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    local_a1 = '\\0';\n    fillChar = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)minArgIndex) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)argValue | (uint)argIndex;\njoined_r0x00082d78:\n    argBits = CONCAT44(argIndex,argValue);\n    remainingFormat = minArgIndex;\n    if ((ch == 0) && (minArgIndex == (int *******)0x0)) {\n      pformattedValuePtr = (int ********)local_68;\n      if ((result != 0) || (!isAlternate)) goto LAB_00082da0;\n      pformattedValuePtr = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (argIndex != (int *)0x0 || (int *)0x9 < argValue) {\n        plocalFormatArg = (int ********)(&cStack_6a + 1);\n        do {\n          pformattedValuePtr = plocalFormatArg;\n          digitValue = (undefined4)((ulonglong)argBits >> 0x20);\n          digitChar = '\\n';\n          FUN_00084750((int)argBits,digitValue,10,0);\n          *(char *)pformattedValuePtr = digitChar + '0';\n          argBits = FUN_00084750((int)argBits,digitValue,10,0);\n          plocalFormatArg = (int ********)((int)pformattedValuePtr + -1);\n        } while (argBits != 0);\n        minArgIndex = (int *******)((int)local_68 - (int)pformattedValuePtr);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)argValue + '0';\n      pformattedValuePtr = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    plocalFormatArg = (int ********)(&cStack_6a + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      pformattedValuePtr = plocalFormatArg;\n      ch = (uint)argValue & 0xf;\n      argValue = (int *)((uint)argValue >> 4 | (int)argIndex << 0x1c);\n      argIndex = (int *)((uint)argIndex >> 4);\n      *(char *)pformattedValuePtr = digits[ch];\n      plocalFormatArg = (int ********)((int)pformattedValuePtr + -1);\n    } while (((uint)argValue | (uint)argIndex) != 0);\n    minArgIndex = (int *******)((int)local_68 - (int)pformattedValuePtr);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    FUN_00082ac0(arg1,arg2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_0008337e:\n  do {\n    pformattedValuePtr = plocalFormatArg;\n    argPtr = (int *)((uint)argValue >> 3 | (int)argIndex << 0x1d);\n    argIndex = (int *)((uint)argIndex >> 3);\n    result = ((uint)argValue & 7) + 0x30;\n    *(char *)pformattedValuePtr = (char)result;\n    plocalFormatArg = (int ********)((int)pformattedValuePtr + -1);\n    argValue = argPtr;\n  } while (((uint)argPtr | (uint)argIndex) != 0);\n  if (isAlternate) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      minArgIndex = (int *******)((int)local_68 - (int)pformattedValuePtr);\n    }\n    else {\n      *(undefined *)((int)pformattedValuePtr + -1) = 0x30;\n      pformattedValuePtr = plocalFormatArg;\n      minArgIndex = (int *******)((int)local_68 - (int)plocalFormatArg);\n    }\n  }\n  else {\nLAB_0008351e:\n    minArgIndex = (int *******)((int)local_68 - (int)pformattedValuePtr);\n  }\nLAB_00082da0:\n  maxArgIndex = minArgIndex;\n  if ((int)minArgIndex < (int)remainingFormat) {\n    maxArgIndex = remainingFormat;\n  }\n  if (fillChar != '\\0') {\n    maxArgIndex = (int *******)((int)maxArgIndex + 1);\n  }\nLAB_00082dba:\n  if (isZeroPadded) {\n    maxArgIndex = (int *******)((int)maxArgIndex + 2);\n  }\n  if ((flags == 0) &&\n     (remainingArgs = (int *******)((int)widthArg - (int)maxArgIndex), 0 < (int)remainingArgs)) {\n    if ((int)remainingArgs < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        remainingArgs = remainingArgs;\n        result = local_98 + 1;\n        local_94 = local_94 + 4;\n        *formatArg = (int *******)0x85808;\n        formatArg[1] = (int *******)0x10;\n        if (result < 8) {\n          digitWidth = local_98 + 2;\n          formatArg = formatArg + 2;\n          local_98 = result;\n        }\n        else if (local_94 == (int *******)0x0) {\n          digitWidth = 1;\n          formatArg = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = result;\n          result = FUN_00082ac0(arg1,arg2,&local_9c);\n          if (result != 0) goto LAB_000833de;\n          digitWidth = local_98 + 1;\n          formatArg = (int ********)local_68;\n        }\n        remainingArgs = remainingArgs + -4;\n      } while (0x10 < (int)remainingArgs);\n      remainingArgs = remainingArgs + -4;\n      local_98 = digitWidth;\n    }\n    local_94 = (int *******)((int)local_94 + (int)remainingArgs);\n    *formatArg = (int *******)0x85808;\n    formatArg[1] = remainingArgs;\n    if (local_98 < 8) {\n      result = local_98 + 1;\n      formatArg = formatArg + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      formatArg = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082ac0(arg1,arg2,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      formatArg = (int ********)local_68;\n    }\n  }\n  else {\n    result = local_98 + 1;\n  }\n  digitWidth = result;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    digitWidth = 1;\n    *formatArg = (int *******)&local_a1;\n    formatArg[1] = (int *******)0x1;\n    local_98 = result;\n    if (result < 8) {\n      digitWidth = result + 1;\n      formatArg = formatArg + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      formatArg = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082ac0(arg1,arg2,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      digitWidth = local_98 + 1;\n      formatArg = (int ********)local_68;\n    }\n  }\n  result = digitWidth;\n  localArgIndex = local_98;\n  if (isZeroPadded) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *formatArg = (int *******)&local_a0;\n    formatArg[1] = (int *******)0x2;\n    if (digitWidth < 8) {\n      result = digitWidth + 1;\n      localArgIndex = digitWidth;\n      formatArg = formatArg + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      localArgIndex = 0;\n      formatArg = (int ********)local_68;\n    }\n    else {\n      local_98 = digitWidth;\n      result = FUN_00082ac0(arg1,arg2,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      localArgIndex = local_98;\n      formatArg = (int ********)local_68;\n    }\n  }\n  local_98 = localArgIndex;\n  if ((flags == 0x80) &&\n     (remainingArgs = (int *******)((int)widthArg - (int)maxArgIndex), 0 < (int)remainingArgs)) {\n    if (0x10 < (int)remainingArgs) {\n      do {\n        while( true ) {\n          remainingArgs = remainingArgs;\n          local_98 = localArgIndex + 1;\n          local_94 = local_94 + 4;\n          *formatArg = (int *******)&DAT_00085848;\n          formatArg[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = localArgIndex + 2;\n          formatArg = formatArg + 2;\nLAB_0008348e:\n          localArgIndex = local_98;\n          remainingArgs = remainingArgs + -4;\n          if ((int)(remainingArgs + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = FUN_00082ac0(arg1,arg2,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            formatArg = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        localArgIndex = 0;\n        remainingArgs = remainingArgs + -4;\n        formatArg = (int ********)local_68;\n      } while (0x10 < (int)(remainingArgs + -4));\nLAB_000834b4:\n      remainingArgs = remainingArgs + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)remainingArgs);\n    *formatArg = (int *******)&DAT_00085848;\n    formatArg[1] = remainingArgs;\n    local_98 = result;\n    if (result < 8) {\n      result = result + 1;\n      formatArg = formatArg + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      formatArg = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082ac0(arg1,arg2,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      formatArg = (int ********)local_68;\n    }\n  }\n  remainingFormat = (int *******)((int)remainingFormat - (int)minArgIndex);\n  plocalFormatArg = (int ********)local_68;\n  if ((int)remainingFormat < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)minArgIndex);\n    *formatArg = (int *******)pformattedValuePtr;\n    formatArg[1] = minArgIndex;\n    minArgIndex = local_94;\n    local_98 = result;\n    if (result < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      result = FUN_00082ac0(arg1,arg2,&local_9c);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    digitWidth = local_98;\n    if (0x10 < (int)remainingFormat) {\n      do {\n        while( true ) {\n          remainingArgs = remainingFormat;\n          local_98 = digitWidth + 1;\n          local_94 = local_94 + 4;\n          *formatArg = (int *******)&DAT_00085848;\n          formatArg[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = digitWidth + 2;\n          formatArg = formatArg + 2;\nLAB_00083282:\n          digitWidth = local_98;\n          remainingFormat = remainingArgs + -4;\n          if ((int)(remainingArgs + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = FUN_00082ac0(arg1,arg2,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            formatArg = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formatArg = (int ********)local_68;\n        digitWidth = 0;\n        remainingFormat = remainingArgs + -4;\n      } while (0x10 < (int)(remainingArgs + -4));\nLAB_000832aa:\n      remainingFormat = remainingArgs + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)remainingFormat);\n    *formatArg = (int *******)&DAT_00085848;\n    formatArg[1] = remainingFormat;\n    if (result < 8) {\n      result = result + 1;\n      formatArg = formatArg + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = result;\n      result = FUN_00082ac0(arg1,arg2,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      formatArg = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = minArgIndex;\n    local_98 = 1;\n    formatArg = (int ********)local_68;\n    local_68 = (undefined  [4])pformattedValuePtr;\nLAB_0008345a:\n    plocalFormatArg = formatArg + 2;\n    local_94 = minArgIndex;\n  }\n  if (((flags & 4) != 0) &&\n     (remainingFormat = (int *******)((int)widthArg - (int)maxArgIndex), 0 < (int)remainingFormat)) {\n    result = local_98;\n    if ((int)remainingFormat < 0x11) {\n      digitWidth = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = result + 1;\n          local_94 = local_94 + 4;\n          *plocalFormatArg = (int *******)0x85808;\n          plocalFormatArg[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          digitWidth = result + 2;\n          plocalFormatArg = plocalFormatArg + 2;\nLAB_00083316:\n          remainingFormat = remainingFormat + -4;\n          result = local_98;\n          if ((int)remainingFormat < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = FUN_00082ac0(arg1,arg2,&local_9c);\n          if (result == 0) {\n            digitWidth = local_98 + 1;\n            plocalFormatArg = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        remainingFormat = remainingFormat + -4;\n        digitWidth = 1;\n        result = 0;\n        plocalFormatArg = (int ********)local_68;\n      } while (0x10 < (int)remainingFormat);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)remainingFormat);\n    *plocalFormatArg = (int *******)0x85808;\n    plocalFormatArg[1] = remainingFormat;\n    local_98 = digitWidth;\n    if (7 < digitWidth) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)maxArgIndex < (int)widthArg) {\n          maxArgIndex = widthArg;\n        }\n        result = result + (int)maxArgIndex;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(arg1,arg2,&local_9c);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)maxArgIndex < (int)widthArg) {\n    maxArgIndex = widthArg;\n  }\n  result = result + (int)maxArgIndex;\n  if ((local_94 != (int *******)0x0) &&\n     (result = FUN_00082ac0(arg1,arg2,&local_9c), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  formatArg = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = ch - 0x30;\n  widthArg = (int *******)0x0;\n  remainingFormat = formatString;\n  do {\n    formatString = (int *******)((int)remainingFormat + 1);\n    ch = (uint)*(byte *)remainingFormat;\n    widthArg = (int *******)(digit + (int)widthArg * 10);\n    digit = ch - 0x30;\n    remainingFormat = formatString;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  ch = (uint)*(byte *)formatString;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "formatString",
                "param_4": "args",
                "bVar1": "isFormatting",
                "bVar2": "isSigned",
                "bVar3": "isAlternate",
                "cVar4": "fillChar",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "formatArg",
                "piVar7": "argPtr",
                "iVar8": "result",
                "cVar9": "digitChar",
                "uVar11": "digit",
                "ppiVar12": "argPtrArray",
                "uVar13": "flags",
                "uVar14": "ch",
                "iVar15": "digitWidth",
                "pppppppiVar16": "localFormatArg",
                "iVar17": "localArgIndex",
                "pppppppiVar18": "remainingArgs",
                "piVar19": "argValue",
                "piVar22": "argIndex",
                "pppppppiVar10": "remainingFormat",
                "pppppppiVar20": "widthArg",
                "uVar21": "argIndex",
                "pppppppiVar23": "remainingArgs",
                "uVar24": "digitValue",
                "pppppppiVar25": "formattedValuePtr",
                "bVar26": "isNonzeroArg",
                "lVar27": "argBits",
                "local_dc": "maxArgIndex",
                "local_d4": "minArgIndex",
                "local_c8": "argPtrPtr",
                "local_c4": "result",
                "local_c0": "digits"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "decode_and_update_parameters_0008378c",
            "code": "\nint decode_and_update_parameters_0008378c(undefined4 config_ptr,int data_ptr)\n\n{\n  int result;\n  int check_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort flag;\n  undefined2 offset;\n  undefined *buffer_ptr;\n  undefined4 buffer_size_copy;\n  undefined4 value;\n  undefined4 constant;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined data_buffer [1024];\n  \n  constant3 = *(undefined4 *)(data_ptr + 100);\n  constant = *(undefined4 *)(data_ptr + 0x1c);\n  offset = *(undefined2 *)(data_ptr + 0xe);\n  constant2 = *(undefined4 *)(data_ptr + 0x24);\n  buffer_array[0] = data_buffer;\n  flag = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_copy = 0x400;\n  value = 0;\n  buffer_ptr = buffer_array[0];\n  result = FUN_00082b38(config_ptr,buffer_array);\n  if ((-1 < result) && (check_result = FUN_00083adc(config_ptr,buffer_array), check_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "decode_and_update_parameters_0008378c",
                "param_1": "config_ptr",
                "param_2": "data_ptr",
                "iVar1": "result",
                "iVar2": "check_result",
                "local_488": "buffer_array",
                "local_480": "buffer_size",
                "local_47c": "flag",
                "local_47a": "offset",
                "local_478": "buffer_ptr",
                "local_474": "buffer_size_copy",
                "local_470": "value",
                "local_46c": "constant",
                "local_464": "constant2",
                "local_424": "constant3",
                "auStack_420": "data_buffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "validate_and_modify_data_00083808",
            "code": "\nundefined4 validate_and_modify_data_00083808(undefined4 *output_value,int *input_data)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_unsigned_var1;\n  ushort temp_unsigned_var2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  temp_unsigned_var2 = *(ushort *)(input_data + 3);\n  temp_unsigned_var1 = (uint)temp_unsigned_var2;\n  if ((int)(temp_unsigned_var1 << 0x1c) < 0) {\n    temp_var2 = input_data[4];\n  }\n  else {\n    if (-1 < (int)(temp_unsigned_var1 << 0x1b)) {\n      *output_value = 9;\n      *(ushort *)(input_data + 3) = temp_unsigned_var2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_unsigned_var1 << 0x1d) < 0) {\n      if ((int *)input_data[0xc] != (int *)0x0) {\n        if ((int *)input_data[0xc] != input_data + 0x10) {\n          FUN_00083d9c(output_value);\n          temp_unsigned_var2 = *(ushort *)(input_data + 3);\n        }\n        input_data[0xc] = 0;\n      }\n      temp_var2 = input_data[4];\n      temp_unsigned_var2 = temp_unsigned_var2 & 0xffdb;\n      *input_data = temp_var2;\n      input_data[1] = 0;\n    }\n    else {\n      temp_var2 = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = temp_unsigned_var2 | 8;\n    temp_unsigned_var1 = (uint)(temp_unsigned_var2 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_unsigned_var1 & 0x280) != 0x200)) {\n    FUN_000842a4(output_value,input_data);\n    temp_unsigned_var1 = (uint)*(ushort *)(input_data + 3);\n    temp_var2 = input_data[4];\n  }\n  if ((temp_unsigned_var1 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_unsigned_var1 << 0x1e)) {\n      temp_var1 = input_data[5];\n    }\n    input_data[2] = temp_var1;\n  }\n  else {\n    input_data[6] = -input_data[5];\n    input_data[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "validate_and_modify_data_00083808",
                "param_1": "output_value",
                "param_2": "input_data",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "temp_unsigned_var1",
                "uVar4": "temp_unsigned_var2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *dataBuffer,int *infoData)\n\n{\n  int *tempPtr;\n  int tempVar;\n  ushort infoFlag;\n  uint tempFlag;\n  int tempVar2;\n  code *callbackFunc;\n  undefined4 returnValue;\n  int tempVar3;\n  \n  if ((dataBuffer != (int *)0x0) && (dataBuffer[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(infoData + 3) == 0) {\n    return 0;\n  }\n  infoFlag = *(ushort *)(infoData + 3);\n  if ((int)((uint)infoFlag << 0x1c) < 0) {\n    tempVar3 = infoData[4];\n    if (tempVar3 == 0) {\n      return 0;\n    }\n    tempVar = *infoData;\n    if ((infoFlag & 3) == 0) {\n      tempVar2 = infoData[5];\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *infoData = tempVar3;\n    tempVar = tempVar - tempVar3;\n    infoData[2] = tempVar2;\n    do {\n      if (tempVar < 1) {\n        return 0;\n      }\n      tempVar2 = (*(code *)infoData[9])(dataBuffer,infoData[7],tempVar3,tempVar,returnValue);\n      tempVar = tempVar - tempVar2;\n      tempVar3 = tempVar3 + tempVar2;\n    } while (0 < tempVar2);\nLAB_00083a54:\n    *(ushort *)(infoData + 3) = *(ushort *)(infoData + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoData + 3) = infoFlag | 0x800;\n  if ((infoData[1] < 1) && (infoData[0xf] < 1)) {\n    return 0;\n  }\n  callbackFunc = (code *)infoData[10];\n  if (callbackFunc == (code *)0x0) {\n    return 0;\n  }\n  tempFlag = (uint)(infoFlag | 0x800);\n  tempVar3 = *dataBuffer;\n  *dataBuffer = 0;\n  if ((infoFlag & 0x1000) == 0) {\n    tempVar = (*callbackFunc)(dataBuffer,infoData[7],tempFlag & 0x1000,1);\n    if ((tempVar == -1) && (tempVar2 = *dataBuffer, tempVar2 != 0)) {\n      if ((tempVar2 == 0x1d) || (tempVar2 == 0x16)) {\n        *dataBuffer = tempVar3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    tempFlag = (uint)*(ushort *)(infoData + 3);\n    callbackFunc = (code *)infoData[10];\n  }\n  else {\n    tempVar = infoData[0x14];\n  }\n  if (((int)(tempFlag << 0x1d) < 0) && (tempVar = tempVar - infoData[1], infoData[0xc] != 0)) {\n    tempVar = tempVar - infoData[0xf];\n  }\n  tempVar = (*callbackFunc)(dataBuffer,infoData[7],tempVar,0);\n  if (tempVar == -1) {\n    tempVar2 = *dataBuffer;\n    if (tempVar2 != 0) {\n      if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n        *(ushort *)(infoData + 3) = *(ushort *)(infoData + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoData + 3) = *(ushort *)(infoData + 3) & 0xf7ff;\n      *infoData = infoData[4];\n      infoData[1] = 0;\n      goto LAB_00083a00;\n    }\n    infoFlag = *(ushort *)(infoData + 3) & 0xf7ff;\n    infoData[1] = 0;\n    *(ushort *)(infoData + 3) = infoFlag;\n    *infoData = infoData[4];\n  }\n  else {\n    infoFlag = *(ushort *)(infoData + 3) & 0xf7ff;\n    *infoData = infoData[4];\n    *(ushort *)(infoData + 3) = infoFlag;\n    infoData[1] = 0;\n  }\n  if ((int)((uint)infoFlag << 0x13) < 0) {\n    infoData[0x14] = tempVar;\n  }\nLAB_00083a00:\n  tempPtr = (int *)infoData[0xc];\n  *dataBuffer = tempVar3;\n  if (tempPtr == (int *)0x0) {\n    return 0;\n  }\n  if (tempPtr != infoData + 0x10) {\n    FUN_00083d9c(dataBuffer);\n  }\n  infoData[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "dataBuffer",
                "param_2": "infoData",
                "piVar1": "tempPtr",
                "iVar2": "tempVar",
                "uVar3": "infoFlag",
                "uVar4": "tempFlag",
                "iVar5": "tempVar2",
                "pcVar6": "callbackFunc",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar3"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructures)\n\n{\n  undefined4 *ptrDataStructure1;\n  undefined4 *ptrDataStructure2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptrDataStructure1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptrDataStructure1 + 3) = 4;\n    *ptrDataStructure1 = 0;\n    ptrDataStructure1[1] = 0;\n    ptrDataStructure1[2] = 0;\n    ptrDataStructure1[0x19] = 0;\n    *(undefined2 *)((int)ptrDataStructure1 + 0xe) = 0;\n    ptrDataStructure1[4] = 0;\n    ptrDataStructure1[5] = 0;\n    ptrDataStructure1[6] = 0;\n    FUN_00082504(ptrDataStructure1 + 0x17,0,8);\n    ptrDataStructure2 = *(undefined4 **)(dataStructures + 8);\n    ptrDataStructure1[7] = ptrDataStructure1;\n    ptrDataStructure1[8] = &LAB_00084440_1;\n    ptrDataStructure1[9] = 0x84465;\n    ptrDataStructure1[10] = 0x8449d;\n    ptrDataStructure1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptrDataStructure2 + 0xe) = 1;\n    *(undefined2 *)(ptrDataStructure2 + 3) = 9;\n    *ptrDataStructure2 = 0;\n    ptrDataStructure2[1] = 0;\n    ptrDataStructure2[2] = 0;\n    ptrDataStructure2[0x19] = 0;\n    ptrDataStructure2[4] = 0;\n    ptrDataStructure2[5] = 0;\n    ptrDataStructure2[6] = 0;\n    FUN_00082504(ptrDataStructure2 + 0x17,0,8);\n    ptrDataStructure1 = *(undefined4 **)(dataStructures + 0xc);\n    ptrDataStructure2[7] = ptrDataStructure2;\n    ptrDataStructure2[8] = &LAB_00084440_1;\n    ptrDataStructure2[9] = 0x84465;\n    ptrDataStructure2[10] = 0x8449d;\n    ptrDataStructure2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptrDataStructure1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrDataStructure1 + 0xe) = 2;\n    *ptrDataStructure1 = 0;\n    ptrDataStructure1[1] = 0;\n    ptrDataStructure1[2] = 0;\n    ptrDataStructure1[0x19] = 0;\n    ptrDataStructure1[4] = 0;\n    ptrDataStructure1[5] = 0;\n    ptrDataStructure1[6] = 0;\n    FUN_00082504(ptrDataStructure1 + 0x17,0,8);\n    ptrDataStructure1[7] = ptrDataStructure1;\n    ptrDataStructure1[8] = &LAB_00084440_1;\n    ptrDataStructure1[9] = 0x84465;\n    ptrDataStructure1[10] = 0x8449d;\n    ptrDataStructure1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructures",
                "puVar1": "ptrDataStructure1",
                "puVar2": "ptrDataStructure2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  byte *tempVar4;\n  uint tempVar5;\n  byte localVar1;\n  byte localVar2 [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  tempVar1 = FUN_00084298();\n  if ((tempVar1 == 1) && (param2 - 1 < 0xff)) {\n    tempVar3 = param2 & 0xff;\n    localVar1 = (byte)tempVar3;\n    tempVar2 = 1;\n  }\n  else {\n    tempVar2 = FUN_0008456c(param1,&localVar1,param2,param3 + 0x17);\n    if (tempVar2 == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (tempVar2 == 0) {\n      return param2;\n    }\n    tempVar3 = (uint)localVar1;\n  }\n  tempVar5 = 0;\n  do {\n    tempVar4 = param3[2] + -1;\n    param3[2] = tempVar4;\n    if ((int)tempVar4 < 0) {\n      if ((int)param3[6] <= (int)tempVar4) {\n        **param3 = (byte)tempVar3;\n        tempVar4 = *param3;\n        tempVar3 = (uint)*tempVar4;\n        if (tempVar3 != 10) goto LAB_00083c90;\n      }\n      tempVar1 = FUN_000844c4(param1,tempVar3,param3);\n      if (tempVar1 == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)tempVar3;\n      tempVar4 = *param3;\nLAB_00083c90:\n      *param3 = tempVar4 + 1;\n    }\n    if (tempVar2 <= tempVar5 + 1) {\n      return param2;\n    }\n    tempVar3 = (uint)localVar2[tempVar5];\n    tempVar5 = tempVar5 + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "pbVar4": "tempVar4",
                "uVar5": "tempVar5",
                "local_1c": "localVar1",
                "abStack_1b": "localVar2"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "relocate_section_00083d00",
            "code": "\nundefined4 relocateSection_00083d00(undefined4 param1,int param2)\n\n{\n  int result;\n  uint uVar;\n  int adjustedAddress;\n  \n  FUNC_00082598();\n  uVar = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedAddress = ((uVar - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedAddress) {\n    result = FUN_00082970(param1,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + uVar) {\n      result = FUN_00082970(param1,-adjustedAddress);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedAddress;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = uVar - adjustedAddress | 1;\n        FUNC_0008259c(param1);\n        return 1;\n      }\n      adjustedAddress = FUN_00082970(param1,0);\n      if (0xf < (int)(adjustedAddress - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedAddress - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedAddress - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "relocate_section_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "uVar",
                "iVar3": "adjustedAddress"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocations_00083d9c",
            "code": "\nvoid processRelocations_00083d9c(undefined4 param1,int param2)\n\n{\n  int currOffset;\n  bool isOffsetValid;\n  uint prevOffset;\n  dword prevRelocation;\n  int prevIndex;\n  uint currRelocationSize;\n  dword currRelocation;\n  uint newOffset;\n  dword newRelocation;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  prevOffset = *(uint *)(param2 + -4);\n  currRelocation = param2 - 8;\n  currRelocationSize = prevOffset & 0xfffffffe;\n  prevRelocation = currRelocation + currRelocationSize;\n  newOffset = *(uint *)(prevRelocation + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == prevRelocation) {\n    newOffset = newOffset + currRelocationSize;\n    if (-1 < (int)(prevOffset << 0x1f)) {\n      currRelocation = currRelocation - *(int *)(param2 + -8);\n      prevIndex = *(int *)(currRelocation + 0xc);\n      currOffset = *(int *)(currRelocation + 8);\n      newOffset = newOffset + *(int *)(param2 + -8);\n      *(int *)(currOffset + 0xc) = prevIndex;\n      *(int *)(prevIndex + 8) = currOffset;\n    }\n    prevRelocation = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(currRelocation + 4) = newOffset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = currRelocation;\n    if (prevRelocation <= newOffset) {\n      FUN_00083d00(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(prevRelocation + 4) = newOffset;\n    if ((prevOffset & 1) == 0) {\n      currRelocation = currRelocation - *(int *)(param2 + -8);\n      currOffset = *(int *)(currRelocation + 8);\n      currRelocationSize = currRelocationSize + *(int *)(param2 + -8);\n      if (currOffset == 0x2007046c) {\n        isOffsetValid = true;\n      }\n      else {\n        prevIndex = *(int *)(currRelocation + 0xc);\n        *(int *)(currOffset + 0xc) = prevIndex;\n        *(int *)(prevIndex + 8) = currOffset;\n        isOffsetValid = false;\n      }\n    }\n    else {\n      isOffsetValid = false;\n    }\n    if (-1 < *(int *)(prevRelocation + newOffset + 4) << 0x1f) {\n      currRelocationSize = currRelocationSize + newOffset;\n      currOffset = *(int *)(prevRelocation + 8);\n      if ((!isOffsetValid) && (currOffset == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = currRelocation;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = currRelocation;\n        *(undefined4 *)(currRelocation + 0xc) = 0x2007046c;\n        *(undefined4 *)(currRelocation + 8) = 0x2007046c;\n        *(uint *)(currRelocation + 4) = currRelocationSize | 1;\n        *(uint *)(currRelocation + currRelocationSize) = currRelocationSize;\n        goto LAB_00083e30;\n      }\n      prevIndex = *(int *)(prevRelocation + 0xc);\n      *(int *)(currOffset + 0xc) = prevIndex;\n      *(int *)(prevIndex + 8) = currOffset;\n    }\n    *(uint *)(currRelocation + 4) = currRelocationSize | 1;\n    *(uint *)(currRelocation + currRelocationSize) = currRelocationSize;\n    if (!isOffsetValid) {\n      if (currRelocationSize < 0x200) {\n        prevOffset = currRelocationSize & 0xfffffff8;\n        currOffset = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + prevOffset);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(currRelocationSize >> 3) >> 2 & 0xffU);\n        *(int *)(currRelocation + 8) = currOffset;\n        *(uint *)(currRelocation + 0xc) = prevOffset + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + prevOffset) = currRelocation;\n        *(dword *)(currOffset + 0xc) = currRelocation;\n        FUNC_0008259c(param1);\n        return;\n      }\n      prevOffset = currRelocationSize >> 9;\n      if (prevOffset < 5) {\n        currOffset = (currRelocationSize >> 6) + 0x38;\n        prevIndex = currOffset * 2;\n      }\n      else if (prevOffset < 0x15) {\n        currOffset = prevOffset + 0x5b;\n        prevIndex = currOffset * 2;\n      }\n      else if (prevOffset < 0x55) {\n        currOffset = (currRelocationSize >> 0xc) + 0x6e;\n        prevIndex = currOffset * 2;\n      }\n      else if (prevOffset < 0x155) {\n        currOffset = (currRelocationSize >> 0xf) + 0x77;\n        prevIndex = currOffset * 2;\n      }\n      else if (prevOffset < 0x555) {\n        currOffset = (currRelocationSize >> 0x12) + 0x7c;\n        prevIndex = currOffset * 2;\n      }\n      else {\n        prevIndex = 0xfc;\n        currOffset = 0x7e;\n      }\n      newRelocation = prevIndex * 4 + 0x20070464;\n      prevRelocation = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[prevIndex];\n      if (prevRelocation == newRelocation) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (currOffset >> 2 & 0xffU);\n        newRelocation = prevRelocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(prevRelocation + 4) & 0xfffffffc) <= currRelocationSize) break;\n          prevRelocation = *(dword *)(prevRelocation + 8);\n        } while (newRelocation != prevRelocation);\n        newRelocation = *(dword *)(prevRelocation + 0xc);\n      }\n      *(dword *)(currRelocation + 0xc) = newRelocation;\n      *(dword *)(currRelocation + 8) = prevRelocation;\n      *(dword *)(newRelocation + 8) = currRelocation;\n      *(dword *)(prevRelocation + 0xc) = currRelocation;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocations_00083d9c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "currOffset",
                "bVar2": "isOffsetValid",
                "uVar3": "prevOffset",
                "dVar4": "prevRelocation",
                "iVar5": "prevIndex",
                "uVar6": "currRelocationSize",
                "dVar7": "currRelocation",
                "uVar8": "newOffset",
                "dVar9": "newRelocation"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *result,uint *inputData,uint **outputDataPtr)\n\n{\n  int returnValue;\n  uint tempVar1;\n  uint tempVar2;\n  ushort flag;\n  uint value;\n  uint *ptr1;\n  uint *ptr2;\n  uint length;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint localVar1;\n  \n  if (outputDataPtr[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputData + 3);\n    value = (uint)flag;\n    if (((int)(value << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *outputDataPtr;\n    }\n    else {\n      returnValue = FUN_00083808(result,inputData);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputData + 3);\n      value = (uint)flag;\n      ptr2 = *outputDataPtr;\n    }\n    if ((flag & 2) == 0) {\n      tempVar1 = value & 2;\n      tempVar4 = tempVar1;\n      length = tempVar1;\n      localVar1 = tempVar1;\n      if ((value & 1) == 0) {\n        tempVar1 = 0;\n        tempVar4 = 0;\n        while( true ) {\n          while (tempVar1 == 0) {\n            tempVar4 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            tempVar1 = *ptr1;\n          }\n          length = inputData[2];\n          if ((int)(value << 0x16) < 0) {\n            if (tempVar1 < length) {\n              value = *inputData;\n              length = tempVar1;\n            }\n            else if ((value & 0x480) == 0) {\n              value = *inputData;\n            }\n            else {\n              returnValue = *inputData - inputData[4];\n              length = returnValue + 1 + tempVar1;\n              tempVar3 = (int)(inputData[5] * 3) / 2;\n              if (length <= tempVar3) {\n                length = tempVar3;\n              }\n              if ((int)(value << 0x15) < 0) {\n                tempVar3 = FUN_00081e14(result,length);\n                if (tempVar3 == 0) {\n                  *result = 0xc;\n                  flag = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(tempVar3,inputData[4],returnValue);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempVar3 = FUN_000825b0(result);\n                if (tempVar3 == 0) {\n                  FUN_00083d9c(result,inputData[4]);\n                  flag = *(ushort *)(inputData + 3) & 0xff7f;\n                  *result = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              value = tempVar3 + returnValue;\n              inputData[4] = tempVar3;\n              inputData[5] = length;\n              *inputData = value;\n              inputData[2] = length - returnValue;\n              length = tempVar1;\n            }\n            FUN_00082438(value,tempVar4,length);\n            inputData[2] = inputData[2] - length;\n            *inputData = *inputData + length;\n            length = tempVar1;\n          }\n          else if ((inputData[4] < *inputData) || (value = inputData[5], tempVar1 < value)) {\n            if (tempVar1 < length) {\n              length = tempVar1;\n            }\n            FUN_00082438(*inputData,tempVar4,length);\n            value = inputData[2];\n            inputData[2] = value - length;\n            *inputData = *inputData + length;\n            if ((value - length == 0) && (returnValue = FUN_00083adc(result,inputData), returnValue != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            length = 0x7fffffff;\n            if (tempVar1 < 0x7fffffff) {\n              length = tempVar1;\n            }\n            length = (*(code *)inputData[9])(result,inputData[7],tempVar4,(length / value) * value);\n            if ((int)length < 1) goto LAB_0008402e;\n          }\n          ptr1 = outputDataPtr[2];\n          tempVar4 = tempVar4 + length;\n          tempVar1 = tempVar1 - length;\n          outputDataPtr[2] = (uint *)((int)ptr1 - length);\n          if ((uint *)((int)ptr1 - length) == (uint *)0x0) break;\n          value = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (tempVar1 == 0) {\n            length = *ptr2;\n            tempVar1 = ptr2[1];\n            localVar1 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar1 == 0) {\n            returnValue = FUN_00084384(length,10,tempVar1);\n            if (returnValue == 0) {\n              tempVar4 = tempVar1 + 1;\n              localVar1 = 1;\n            }\n            else {\n              tempVar4 = (returnValue + 1) - length;\n              localVar1 = 1;\n            }\n          }\n          tempVar3 = *inputData;\n          value = tempVar4;\n          if (tempVar1 <= tempVar4) {\n            value = tempVar1;\n          }\n          tempVar2 = inputData[5];\n          if ((inputData[4] < tempVar3) && (tempVar5 = inputData[2] + tempVar2, (int)tempVar5 < (int)value)) {\n            FUN_00082438(tempVar3,length,tempVar5);\n            *inputData = *inputData + tempVar5;\n            returnValue = FUN_00083adc(result,inputData);\n            if (returnValue != 0) goto LAB_0008402e;\n          }\n          else if ((int)value < (int)tempVar2) {\n            FUN_00082438(tempVar3,length,value);\n            inputData[2] = inputData[2] - value;\n            *inputData = value + *inputData;\n            tempVar5 = value;\n          }\n          else {\n            tempVar5 = (*(code *)inputData[9])(result,inputData[7],length,tempVar2);\n            if ((int)tempVar5 < 1) goto LAB_0008402e;\n          }\n          tempVar4 = tempVar4 - tempVar5;\n          if (tempVar4 == 0) {\n            returnValue = FUN_00083adc(result,inputData);\n            if (returnValue != 0) goto LAB_0008402e;\n            localVar1 = 0;\n          }\n          ptr1 = outputDataPtr[2];\n          length = length + tempVar5;\n          tempVar1 = tempVar1 - tempVar5;\n          outputDataPtr[2] = (uint *)((int)ptr1 - tempVar5);\n        } while ((uint *)((int)ptr1 - tempVar5) != (uint *)0x0);\n      }\n    }\n    else {\n      tempVar1 = 0;\n      value = 0;\n      do {\n        while( true ) {\n          tempVar4 = value;\n          if (0x7ffffbff < value) {\n            tempVar4 = 0x7ffffc00;\n          }\n          if (value != 0) break;\n          tempVar1 = *ptr2;\n          value = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        returnValue = (*(code *)inputData[9])(result,inputData[7],tempVar1,tempVar4);\n        if (returnValue < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = outputDataPtr[2];\n        tempVar1 = tempVar1 + returnValue;\n        value = value - returnValue;\n        outputDataPtr[2] = (uint *)((int)ptr1 - returnValue);\n      } while ((uint *)((int)ptr1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "result",
                "param_2": "inputData",
                "param_3": "outputDataPtr",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "flag",
                "uVar5": "value",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "length",
                "uVar9": "tempVar3",
                "uVar10": "tempVar4",
                "uVar11": "tempVar5",
                "local_2c": "localVar1"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_location_00084290",
            "code": "\nuint32_t getMemoryLocation_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_location_00084290",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationArray[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nvoid processData_000842a4(int input,int *output)\n\n{\n  ushort ushortValue;\n  int result;\n  int status;\n  uint uintValue;\n  bool checkFlag;\n  undefined temporary [4];\n  uint localValue;\n  \n  ushortValue = *(ushort *)(output + 3);\n  uintValue = (uint)ushortValue;\n  if ((int)(uintValue << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_000846b4(input,(int)*(short *)((int)output + 0xe),temporary);\n    if (-1 < result) {\n      checkFlag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushortValue = *(ushort *)(output + 3);\n    uintValue = (uint)ushortValue;\n  }\n  *(ushort *)(output + 3) = ushortValue | 0x800;\n  if ((uintValue & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  checkFlag = false;\nLAB_00084300:\n  status = FUN_00081e14(input,result);\n  ushortValue = *(ushort *)(output + 3);\n  if (status == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(output + 3) = ushortValue | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = ushortValue | 0x80;\n    *output = status;\n    output[4] = status;\n    output[5] = result;\n    if ((checkFlag) && (result = FUN_000846dc(input,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "ushortValue",
                "iVar2": "result",
                "iVar3": "status",
                "uVar4": "uintValue",
                "bVar5": "checkFlag",
                "auStack_54": "temporary",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "search_char_00084384",
            "code": "\nuint * searchChar_00084384(uint *data,char target,uint length)\n\n{\n  uint result;\n  int index;\n  uint *ptr;\n  bool isLastChar;\n  \n  if (((uint)data & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = data;\n      do {\n        result = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        data = ptr;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        length = length - 4;\n        data = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != target) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        isLastChar = index == length - 1;\n        index = index + 1;\n        if (isLastChar) goto LAB_000843dc;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    ptr = (uint *)((int)data + 1);\n    length = length - 1;\n    do {\n      data = ptr;\n      if (((uint)data & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)data + 1);\n      length = length - 1;\n    } while (*(char *)data != target);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00084384": "search_char_00084384",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "isLastChar"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  undefined4 unused_var4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = FUN_000811cc((int)*(short *)(input + 0xe),paramA,paramB,paramB,unused_var1,unused_var2,\n                       unused_var3,unused_var4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "unaff_r6": "unused_var3",
                "in_lr": "unused_var4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_data_0008449c",
            "code": "\nvoid updateData_0008449c(undefined4 input1,int input2)\n\n{\n  int result;\n  ushort updatedValue;\n  \n  result = FUN_00084700(input1,(int)*(short *)(input2 + 0xe));\n  if (result == -1) {\n    updatedValue = *(ushort *)(input2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(input2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(input2 + 0x50) = result;\n  }\n  *(ushort *)(input2 + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_data_0008449c",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_input_000844c4",
            "code": "\nuint processInput_000844c4(int input_handle,uint character,undefined4 *buffer,undefined4 value)\n\n{\n  ushort buffer_value;\n  uint buffer_length;\n  undefined *buffer_ptr;\n  int temp_var;\n  \n  if ((input_handle != 0) && (*(int *)(input_handle + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  buffer_value = *(ushort *)(buffer + 3);\n  buffer_length = (uint)buffer_value;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(buffer_length << 0x1c)) || (temp_var = buffer[4], temp_var == 0)) {\n    temp_var = FUN_00083808(input_handle,buffer,buffer_value,buffer_length,value);\n    if (temp_var != 0) {\n      return 0xffffffff;\n    }\n    buffer_value = *(ushort *)(buffer + 3);\n    temp_var = buffer[4];\n    buffer_length = (uint)buffer_value;\n  }\n  character = character & 0xff;\n  if ((int)(buffer_length << 0x12) < 0) {\n    buffer_ptr = (undefined *)*buffer;\n    temp_var = (int)buffer_ptr - temp_var;\n    if (temp_var < (int)buffer[5]) {\nLAB_000844f6:\n      temp_var = temp_var + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = buffer_value | 0x2000;\n    temp_var = (int)buffer_ptr - temp_var;\n    if (temp_var < (int)buffer[5]) goto LAB_000844f6;\n  }\n  temp_var = FUN_00083adc(input_handle,buffer);\n  if (temp_var != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*buffer;\n  temp_var = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_ptr + 1;\n  *buffer_ptr = (char)character;\n  if (((buffer[5] == temp_var) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (temp_var = FUN_00083adc(input_handle,buffer), temp_var != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "input_handle",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "value",
                "uVar1": "buffer_value",
                "uVar2": "buffer_length",
                "puVar3": "buffer_ptr",
                "iVar4": "temp_var"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *output,int size,undefined4 param,undefined4 *status)\n\n{\n  code *functionPointer;\n  undefined4 result;\n  int returnValue;\n  undefined buffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (size == 0) {\n    result = FUN_00084290();\n    returnValue = (*functionPointer)(output,buffer,0,result,status);\n  }\n  else {\n    result = FUN_00084290();\n    returnValue = (*functionPointer)(output,size,param,result,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "param",
                "param_4": "status",
                "pcVar1": "functionPointer",
                "uVar2": "result",
                "iVar3": "returnValue",
                "auStack_24": "buffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_value_to_char_000845bc",
            "code": "\nundefined4 convertValueToChar_000845bc(undefined4 *output,undefined *input,uint value)\n\n{\n  if (input == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *input = (char)value;\n    return 1;\n  }\n  *output = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_value_to_char_000845bc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "check_and_handle_param_000846a4",
            "code": "\nundefined4 check_and_handle_param_000846a4(int input_param)\n\n{\n  dword d_offset;\n  undefined4 result;\n  int returnValue;\n  \n  d_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input_param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      result = FUN_00083adc(d_offset,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input_param + 0x2c))(d_offset,*(undefined4 *)(input_param + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(d_offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          FUN_00083d9c(d_offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        FUN_00083d9c(d_offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "check_and_handle_param_000846a4",
                "param_1": "input_param",
                "dVar1": "d_offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "validate_and_assign_value_000846b4",
            "code": "\nvoid validate_and_assign_value_000846b4(int *result_ptr,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int iVar1;\n  \n  DAT_200711bc = 0;\n  iVar1 = FUN_000811b4(input_2,input_3,input_3,0,input_4);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *result_ptr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "validate_and_assign_value_000846b4",
                "param_1": "result_ptr",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "validate_and_assign_value_000846dc",
            "code": "\nvoid validateAndAssignValue_000846dc(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "validate_and_assign_value_000846dc",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_assign_result_00084700",
            "code": "\nvoid checkAndAssignResult_00084700(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811c2(arg1,arg2,arg3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_assign_result_00084700",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "check_and_assign_value_00084728",
            "code": "\nvoid checkAndAssignValue_00084728(int *outputValue,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(inputParam1,inputParam2,inputParam3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "check_and_assign_value_00084728",
                "param_1": "outputValue",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_zero_parameters_00084750",
            "code": "\nint checkZeroParameters_00084750(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_zero_parameters_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_store_0008477c",
            "code": "\nvoid subtract_and_store_0008477c(uint input_value,int param_value,undefined4 value1,undefined4 value2,int *output_array)\n\n{\n  uint result_low;\n  longlong result_high;\n  \n  result_high = FUN_000847e0();\n  result_high = result_high * CONCAT44(value2,value1);\n  result_low = (uint)result_high;\n  *output_array = input_value - result_low;\n  output_array[1] = (param_value - (int)((ulonglong)result_high >> 0x20)) - (uint)(input_value < result_low);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_store_0008477c",
                "param_1": "input_value",
                "param_2": "param_value",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "output_array",
                "uVar1": "result_low",
                "lVar2": "result_high"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_update_000847ac",
            "code": "\nvoid subtractAndUpdate_000847ac(uint input1,int input2,undefined4 param3,undefined4 param4,int *output)\n\n{\n  uint result1;\n  longlong result2;\n  \n  result2 = FUN_00084a80();\n  result2 = result2 * CONCAT44(param4,param3);\n  result1 = (uint)result2;\n  *output = input1 - result1;\n  output[1] = (input2 - (int)((ulonglong)result2 >> 0x20)) - (uint)(input1 < result1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_update_000847ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "uVar1": "result1",
                "lVar2": "result2"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "division_with_remainder_000847e0",
            "code": "\nundefined8 divisionWithRemainder_000847e0(uint dividend,uint dividendHigh,uint divisor,uint divisorHigh)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotientHigh;\n  uint temp1;\n  uint temp2;\n  int shiftAmount;\n  uint remainderLow;\n  uint remainderHigh;\n  uint isNegativeDividend;\n  uint quotientPartial;\n  uint temp3;\n  uint temp4;\n  bool carryFlag;\n  \n  if ((int)dividendHigh < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    dividendHigh = -dividendHigh - (uint)carryFlag;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)divisorHigh < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    carryFlag = divisor != 0;\n    divisor = -divisor;\n    divisorHigh = -divisorHigh - (uint)carryFlag;\n  }\n  if (divisorHigh == 0) {\n    if (dividendHigh < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        quotientHigh = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendHigh = dividendHigh << shiftAmount | quotientHigh;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividendHigh / quotient;\n      remainderLow = (divisor & 0xffff) * temp1;\n      quotientPartial = dividend >> 0x10 | (dividendHigh - quotient * temp1) * 0x10000;\n      quotientHigh = temp1;\n      if (quotientPartial <= remainderLow && remainderLow - quotientPartial != 0) {\n        carryFlag = CARRY4(quotientPartial,divisor);\n        quotientPartial = quotientPartial + divisor;\n        quotientHigh = temp1 - 1;\n        if ((carryFlag == false) && (quotientPartial <= remainderLow && remainderLow - quotientPartial != 0)) {\n          quotientHigh = temp1 - 2;\n          quotientPartial = quotientPartial + divisor;\n        }\n      }\n      remainderHigh = (quotientPartial - remainderLow) / quotient;\n      temp1 = (divisor & 0xffff) * remainderHigh;\n      remainderLow = dividend & 0xffff | ((quotientPartial - remainderLow) - quotient * remainderHigh) * 0x10000;\n      quotient = remainderHigh;\n      if (remainderLow <= temp1 && temp1 - remainderLow != 0) {\n        quotient = remainderHigh - 1;\n        if ((CARRY4(remainderLow,divisor) == false) &&\n           (remainderLow + divisor <= temp1 && temp1 - (remainderLow + divisor) != 0)) {\n          quotient = remainderHigh - 2;\n        }\n      }\n      quotient = quotient | quotientHigh << 0x10;\n      quotientHigh = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendHigh = dividendHigh - divisor;\n        temp1 = divisor >> 0x10;\n        temp4 = divisor & 0xffff;\n        quotientHigh = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        quotientHigh = dividendHigh >> (0x20U - shiftAmount & 0xff);\n        temp1 = divisor >> 0x10;\n        quotientPartial = quotientHigh / temp1;\n        temp4 = divisor & 0xffff;\n        remainderLow = temp4 * quotientPartial;\n        remainderHigh = dividend >> (0x20U - shiftAmount & 0xff) | dividendHigh << shiftAmount;\n        quotientHigh = remainderHigh >> 0x10 | (quotientHigh - temp1 * quotientPartial) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotient = quotientPartial;\n        if (quotientHigh <= remainderLow && remainderLow - quotientHigh != 0) {\n          carryFlag = CARRY4(quotientHigh,divisor);\n          quotientHigh = quotientHigh + divisor;\n          quotient = quotientPartial - 1;\n          if ((carryFlag == false) && (quotientHigh <= remainderLow && remainderLow - quotientHigh != 0)) {\n            quotient = quotientPartial - 2;\n            quotientHigh = quotientHigh + divisor;\n          }\n        }\n        temp2 = (quotientHigh - remainderLow) / temp1;\n        quotientPartial = temp4 * temp2;\n        dividendHigh = remainderHigh & 0xffff | ((quotientHigh - remainderLow) - temp1 * temp2) * 0x10000;\n        quotientHigh = temp2;\n        if (dividendHigh <= quotientPartial && quotientPartial - dividendHigh != 0) {\n          carryFlag = CARRY4(dividendHigh,divisor);\n          dividendHigh = dividendHigh + divisor;\n          quotientHigh = temp2 - 1;\n          if ((carryFlag == false) && (dividendHigh <= quotientPartial && quotientPartial - dividendHigh != 0)) {\n            quotientHigh = temp2 - 2;\n            dividendHigh = dividendHigh + divisor;\n          }\n        }\n        dividendHigh = dividendHigh - quotientPartial;\n        quotientHigh = quotientHigh | quotient << 0x10;\n      }\n      quotient = dividendHigh / temp1;\n      quotientPartial = temp4 * quotient;\n      remainderHigh = dividend >> 0x10 | (dividendHigh - temp1 * quotient) * 0x10000;\n      remainderLow = quotient;\n      if (remainderHigh <= quotientPartial && quotientPartial - remainderHigh != 0) {\n        carryFlag = CARRY4(remainderHigh,divisor);\n        remainderHigh = remainderHigh + divisor;\n        remainderLow = quotient - 1;\n        if ((carryFlag == false) && (remainderHigh <= quotientPartial && quotientPartial - remainderHigh != 0)) {\n          remainderLow = quotient - 2;\n          remainderHigh = remainderHigh + divisor;\n        }\n      }\n      temp2 = (remainderHigh - quotientPartial) / temp1;\n      temp4 = temp4 * temp2;\n      temp1 = dividend & 0xffff | ((remainderHigh - quotientPartial) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp4 && temp4 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | remainderLow << 0x10;\n    }\n  }\n  else if (dividendHigh < divisorHigh) {\n    quotientHigh = 0;\n    quotient = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisorHigh);\n    if (shiftAmount == 0) {\n      if ((divisorHigh < dividendHigh) || (divisor <= dividend)) {\n        quotientHigh = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotientHigh = 0;\n      }\n    }\n    else {\n      quotientHigh = 0x20 - shiftAmount;\n      temp1 = dividendHigh >> (quotientHigh & 0xff);\n      temp4 = divisor >> (quotientHigh & 0xff) | divisorHigh << shiftAmount;\n      quotientPartial = temp4 >> 0x10;\n      quotient = temp1 / quotientPartial;\n      remainderHigh = (temp4 & 0xffff) * quotient;\n      remainderLow = dividendHigh << shiftAmount | dividend >> (quotientHigh & 0xff);\n      temp1 = remainderLow >> 0x10 | (temp1 - quotientPartial * quotient) * 0x10000;\n      quotientHigh = quotient;\n      if (temp1 <= remainderHigh && remainderHigh - temp1 != 0) {\n        carryFlag = CARRY4(temp1,temp4);\n        temp1 = temp1 + temp4;\n        quotientHigh = quotient - 1;\n        if ((carryFlag == false) && (temp1 <= remainderHigh && remainderHigh - temp1 != 0)) {\n          quotientHigh = quotient - 2;\n          temp1 = temp1 + temp4;\n        }\n      }\n      temp2 = (temp1 - remainderHigh) / quotientPartial;\n      temp3 = (temp4 & 0xffff) * temp2;\n      temp1 = remainderLow & 0xffff | ((temp1 - remainderHigh) - quotientPartial * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp3 && temp3 - temp1 != 0) {\n        carryFlag = CARRY4(temp1,temp4);\n        temp1 = temp1 + temp4;\n        quotient = temp2 - 1;\n        if ((carryFlag == false) && (temp1 <= temp3 && temp3 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + temp4;\n        }\n      }\n      quotient = quotient | quotientHigh << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << shiftAmount);\n      remainderLow = (uint)((ulonglong)product >> 0x20);\n      quotientHigh = 0;\n      if ((temp1 - temp3 < remainderLow) ||\n         ((temp1 - temp3 == remainderLow && (dividend << shiftAmount < (uint)product)))) {\n        quotient = quotient - 1;\n        quotientHigh = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    carryFlag = quotient != 0;\n    quotient = -quotient;\n    quotientHigh = -quotientHigh - (uint)carryFlag;\n  }\n  return CONCAT44(quotientHigh,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "division_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividendHigh",
                "param_3": "divisor",
                "param_4": "divisorHigh",
                "lVar1": "product",
                "uVar2": "quotient",
                "uVar3": "quotientHigh",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "iVar6": "shiftAmount",
                "uVar7": "remainderLow",
                "uVar8": "remainderHigh",
                "uVar9": "isNegativeDividend",
                "uVar10": "quotientPartial",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "carryFlag"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "division_with_remainder_00084a80",
            "code": "\nulonglong divisionWithRemainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp_long;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  uint temp_8;\n  int temp_9;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      temp_9 = LZCOUNT(quotient);\n      if (temp_9 == 0) {\n        divisor = divisor - quotient;\n        temp_2 = quotient >> 0x10;\n        temp_4 = quotient & 0xffff;\n        temp_1 = 1;\n      }\n      else {\n        quotient = quotient << temp_9;\n        temp_7 = divisor >> (0x20U - temp_9 & 0xff);\n        temp_2 = quotient >> 0x10;\n        temp_8 = temp_7 / temp_2;\n        temp_4 = quotient & 0xffff;\n        temp_1 = temp_4 * temp_8;\n        temp_5 = dividend >> (0x20U - temp_9 & 0xff) | divisor << temp_9;\n        temp_3 = temp_5 >> 0x10 | (temp_7 - temp_2 * temp_8) * 0x10000;\n        dividend = dividend << temp_9;\n        temp_7 = temp_8;\n        if (temp_3 <= temp_1 && temp_1 - temp_3 != 0) {\n          carry_flag = CARRY4(temp_3,quotient);\n          temp_3 = temp_3 + quotient;\n          temp_7 = temp_8 - 1;\n          if ((carry_flag == false) && (temp_3 <= temp_1 && temp_1 - temp_3 != 0)) {\n            temp_7 = temp_8 - 2;\n            temp_3 = temp_3 + quotient;\n          }\n        }\n        temp_6 = (temp_3 - temp_1) / temp_2;\n        temp_8 = temp_4 * temp_6;\n        divisor = temp_5 & 0xffff | ((temp_3 - temp_1) - temp_2 * temp_6) * 0x10000;\n        temp_1 = temp_6;\n        if (divisor <= temp_8 && temp_8 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          temp_1 = temp_6 - 1;\n          if ((carry_flag == false) && (divisor <= temp_8 && temp_8 - divisor != 0)) {\n            temp_1 = temp_6 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp_8;\n        temp_1 = temp_1 | temp_7 << 0x10;\n      }\n      temp_8 = divisor / temp_2;\n      temp_3 = temp_4 * temp_8;\n      temp_5 = dividend >> 0x10 | (divisor - temp_2 * temp_8) * 0x10000;\n      temp_7 = temp_8;\n      if (temp_5 <= temp_3 && temp_3 - temp_5 != 0) {\n        carry_flag = CARRY4(temp_5,quotient);\n        temp_5 = temp_5 + quotient;\n        temp_7 = temp_8 - 1;\n        if ((carry_flag == false) && (temp_5 <= temp_3 && temp_3 - temp_5 != 0)) {\n          temp_7 = temp_8 - 2;\n          temp_5 = temp_5 + quotient;\n        }\n      }\n      temp_8 = (temp_5 - temp_3) / temp_2;\n      temp_4 = temp_4 * temp_8;\n      temp_5 = dividend & 0xffff | ((temp_5 - temp_3) - temp_2 * temp_8) * 0x10000;\n      temp_2 = temp_8;\n      if (temp_5 <= temp_4 && temp_4 - temp_5 != 0) {\n        temp_2 = temp_8 - 1;\n        if ((CARRY4(temp_5,quotient) == false) &&\n           (temp_5 + quotient <= temp_4 && temp_4 - (temp_5 + quotient) != 0)) {\n          temp_2 = temp_8 - 2;\n        }\n      }\n      return CONCAT44(temp_1,temp_2 | temp_7 << 0x10);\n    }\n    temp_9 = LZCOUNT(quotient);\n    if (temp_9 != 0) {\n      temp_7 = dividend >> (0x20U - temp_9 & 0xff);\n      quotient = quotient << temp_9;\n      dividend = dividend << temp_9;\n      divisor = temp_7 | divisor << temp_9;\n    }\n    temp_1 = quotient >> 0x10;\n    temp_2 = divisor / temp_1;\n    temp_4 = (quotient & 0xffff) * temp_2;\n    temp_8 = dividend >> 0x10 | (divisor - temp_1 * temp_2) * 0x10000;\n    temp_7 = temp_2;\n    if (temp_8 <= temp_4 && temp_4 - temp_8 != 0) {\n      carry_flag = CARRY4(temp_8,quotient);\n      temp_8 = temp_8 + quotient;\n      temp_7 = temp_2 - 1;\n      if ((carry_flag == false) && (temp_8 <= temp_4 && temp_4 - temp_8 != 0)) {\n        temp_7 = temp_2 - 2;\n        temp_8 = temp_8 + quotient;\n      }\n    }\n    temp_5 = (temp_8 - temp_4) / temp_1;\n    temp_2 = (quotient & 0xffff) * temp_5;\n    temp_4 = dividend & 0xffff | ((temp_8 - temp_4) - temp_1 * temp_5) * 0x10000;\n    temp_1 = temp_5;\n    if (temp_4 <= temp_2 && temp_2 - temp_4 != 0) {\n      temp_1 = temp_5 - 1;\n      if ((CARRY4(temp_4,quotient) == false) &&\n         (temp_4 + quotient <= temp_2 && temp_2 - (temp_4 + quotient) != 0)) {\n        temp_1 = temp_5 - 2;\n      }\n    }\n    temp_1 = temp_1 | temp_7 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    temp_9 = LZCOUNT(remainder);\n    if (temp_9 == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      temp_1 = 0;\n    }\n    else {\n      temp_1 = 0x20 - temp_9;\n      temp_7 = divisor >> (temp_1 & 0xff);\n      temp_2 = remainder << temp_9 | quotient >> (temp_1 & 0xff);\n      temp_4 = temp_2 >> 0x10;\n      temp_3 = temp_7 / temp_4;\n      temp_8 = (temp_2 & 0xffff) * temp_3;\n      temp_5 = dividend >> (temp_1 & 0xff) | divisor << temp_9;\n      temp_1 = temp_5 >> 0x10 | (temp_7 - temp_4 * temp_3) * 0x10000;\n      temp_7 = temp_3;\n      if (temp_1 <= temp_8 && temp_8 - temp_1 != 0) {\n        carry_flag = CARRY4(temp_1,temp_2);\n        temp_1 = temp_1 + temp_2;\n        temp_7 = temp_3 - 1;\n        if ((carry_flag == false) && (temp_1 <= temp_8 && temp_8 - temp_1 != 0)) {\n          temp_7 = temp_3 - 2;\n          temp_1 = temp_1 + temp_2;\n        }\n      }\n      temp_3 = (temp_1 - temp_8) / temp_4;\n      temp_6 = (temp_2 & 0xffff) * temp_3;\n      temp_4 = temp_5 & 0xffff | ((temp_1 - temp_8) - temp_4 * temp_3) * 0x10000;\n      temp_1 = temp_3;\n      if (temp_4 <= temp_6 && temp_6 - temp_4 != 0) {\n        carry_flag = CARRY4(temp_4,temp_2);\n        temp_4 = temp_4 + temp_2;\n        temp_1 = temp_3 - 1;\n        if ((carry_flag == false) && (temp_4 <= temp_6 && temp_6 - temp_4 != 0)) {\n          temp_1 = temp_3 - 2;\n          temp_4 = temp_4 + temp_2;\n        }\n      }\n      temp_1 = temp_1 | temp_7 << 0x10;\n      temp_long = (ulonglong)temp_1 * (ulonglong)(quotient << temp_9);\n      temp_7 = (uint)((ulonglong)temp_long >> 0x20);\n      if ((temp_4 - temp_6 < temp_7) || ((temp_4 - temp_6 == temp_7 && (dividend << temp_9 < (uint)temp_long)))\n         ) {\n        temp_1 = temp_1 - 1;\n      }\n    }\n  }\n  return (ulonglong)temp_1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "division_with_remainder_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp_long",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "uVar4": "temp_3",
                "uVar5": "temp_4",
                "uVar6": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_7",
                "uVar9": "temp_8",
                "iVar10": "temp_9",
                "bVar11": "carry_flag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 102489,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}