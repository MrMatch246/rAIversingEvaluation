{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "mark_as_visited_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 markAsVisited_08000188(undefined4 value)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08000188": "mark_as_visited_08000188",
                "param_1": "value"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_params_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_params_080001ac(undefined4 param_1,undefined4 param_2)\n\n{\n  return CONCAT44(param_2,param_1);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_params_080001ac"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_data_080001f8",
            "code": "\nvoid initializeData_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  FUN_08000210();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_data_080001f8"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_system_08000210",
            "code": "\nvoid initializeSystem_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_system_08000210"
            },
            "calling": [
                "FUN_08000220",
                "FUN_080025e8",
                "FUN_080001f8"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "update_data_08000220",
            "code": "\nvoid updateData_08000220(char newValue)\n\n{\n  if (newValue != DAT_20000468) {\n    FUN_08002fd4();\n    if (newValue == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = newValue;\n    }\n    else if (newValue == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = newValue;\n    }\n    else {\n      FUN_08000210();\n      DAT_20000468 = newValue;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "update_data_08000220",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08000210",
                "FUN_080001c8",
                "FUN_08002fd4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_adjusted_value_08000268",
            "code": "\n\n\nint calculateAdjustedValue_08000268(void)\n\n{\n  int result;\n  \n  result = FUN_08005a84();\n  return (result + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "initialize_function_080002a0",
            "code": "\nvoid initializeFunction_080002a0(undefined4 inputParam)\n\n{\n  FUN_08005a98(inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "initialize_function_080002a0",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "wait_for_condition_080002b6",
            "code": "\nvoid waitForCondition_080002b6(uint condition)\n\n{\n  uint upperVar1;\n  uint upperVar2;\n  bool isConditionMet;\n  longlong result;\n  undefined8 tempVar;\n  \n  result = FUN_08000268();\n  upperVar2 = (uint)(result + (ulonglong)condition >> 0x20);\n  do {\n    tempVar = FUN_08000268();\n    upperVar1 = (uint)((ulonglong)tempVar >> 0x20);\n    isConditionMet = upperVar2 <= upperVar1;\n    if (upperVar1 == upperVar2) {\n      isConditionMet = (uint)(result + (ulonglong)condition) <= (uint)tempVar;\n    }\n  } while (!isConditionMet);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "wait_for_condition_080002b6",
                "param_1": "condition",
                "uVar1": "upperVar1",
                "uVar2": "upperVar2",
                "bVar3": "isConditionMet",
                "lVar4": "result",
                "uVar5": "tempVar"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initializeData_080002f0(void)\n\n{\n  FUN_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08000340",
                "FUN_080003ec",
                "FUN_08000310"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_indexed_value_08000310",
            "code": "\nundefined getIndexedValue_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_indexed_value_08000310",
                "param_1": "index"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080003ec"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "value"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "calculate_checksum_08000374",
            "code": "\nvoid calculateChecksum_08000374(int dataStartPosition,char *data,int dataLength)\n\n{\n  int length;\n  char *currentChar;\n  int currentIndex;\n  char checksum;\n  \n  checksum = '\\0';\n  length = dataLength;\n  currentChar = data;\n  currentIndex = dataStartPosition;\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n    currentChar = data;\n    currentIndex = dataStartPosition;\n  }\n  for (; length != 0; length = length + -1) {\n    checksum = (checksum != '\\0') + *currentChar;\n    FUN_08000340(currentIndex,*currentChar);\n    currentChar = currentChar + 1;\n    currentIndex = currentIndex + 1;\n  }\n  FUN_08000340(currentIndex,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "calculate_checksum_08000374",
                "param_1": "dataStartPosition",
                "param_2": "data",
                "param_3": "dataLength",
                "local_1c": "length",
                "local_18": "currentChar",
                "local_14": "currentIndex",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004bc0",
                "FUN_08004c2a",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_08000340",
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_equality_080003ec",
            "code": "\nbool checkEquality_080003ec(char *input,int start_index,int length)\n\n{\n  char current_char;\n  uint expected_char;\n  int remaining_length;\n  int current_index;\n  char *output;\n  byte char_count;\n  \n  char_count = 0;\n  remaining_length = length;\n  current_index = start_index;\n  output = input;\n  if (DAT_2000046c == 0) {\n    FUN_080002f0();\n    current_index = start_index;\n    output = input;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_char = FUN_08000310(current_index);\n    char_count = current_char + (char_count != 0);\n    *output = current_char;\n    current_index = current_index + 1;\n    output = output + 1;\n  }\n  expected_char = FUN_08000310(current_index);\n  return char_count == expected_char;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_equality_080003ec",
                "param_1": "input",
                "param_2": "start_index",
                "param_3": "length",
                "cVar1": "current_char",
                "uVar2": "expected_char",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "output",
                "local_9": "char_count"
            },
            "calling": [
                "FUN_08004d7c",
                "FUN_08004dd2",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_params_08000478",
            "code": "\nvoid initializeParams_08000478(undefined input1,undefined input2,undefined input3)\n\n{\n  DAT_20000e89 = input1;\n  DAT_20000e8a = input2;\n  DAT_20000e8b = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_params_08000478",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_and_check_data_080004ac",
            "code": "\nvoid initializeAndCheckData_080004ac(void)\n\n{\n  int result;\n  \n  FUN_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  FUN_08000478(0,1,2);\n  DAT_20000e74 = 1;\n  result = FUN_08004d7c(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    FUN_08004030(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_and_check_data_080004ac",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_08004030"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "initialize_data_080004fc",
            "code": "\nvoid initializeData_080004fc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 result1;\n  \n  result1 = FUN_08008e44(input1);\n  DAT_20000e7c = FUN_08009054(result1,DAT_20000ebc);\n  result1 = FUN_08008e44(input2);\n  DAT_20000e80 = FUN_08009054(result1,DAT_20000ec0);\n  result1 = FUN_08008e44(input3);\n  DAT_20000e84 = FUN_08009054(result1,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "initialize_data_080004fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08009054",
                "FUN_08008e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "process_data_0800056c",
            "code": "\nundefined4 processData_0800056c(undefined4 inputData)\n\n{\n  undefined8 result;\n  \n  if (DAT_20000e73 != '\\0') {\n    result = FUN_08008590(inputData);\n    result = FUN_08008640((int)result,(int)((ulonglong)result >> 0x20),0x66666666,0x40396666);\n    inputData = FUN_08008c30((int)result,(int)((ulonglong)result >> 0x20));\n  }\n  return inputData;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "process_data_0800056c",
                "param_1": "inputData",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "extract_function_080005b4",
            "code": "\nchar extractFunction_080005b4(undefined4 input_param)\n\n{\n  int index;\n  undefined4 temp_var1;\n  char result;\n  uint temp_var2;\n  undefined4 temp_var3;\n  undefined8 temp_var4;\n  undefined8 temp_var5;\n  undefined8 temp_var6;\n  undefined4 local_array1 [4];\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 temp_stack_var1;\n  undefined4 temp_stack_var2;\n  undefined4 local_array2 [6];\n  undefined4 local_var4;\n  byte local_byte1;\n  undefined local_byte2;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined local_byte3;\n  uint local_int1;\n  byte local_byte4;\n  byte local_byte5;\n  byte local_byte6;\n  byte local_byte7;\n  char local_char1;\n  uint local_int2;\n  undefined4 local_var7;\n  sbyte local_byte8;\n  char local_char2;\n  char local_char3;\n  undefined4 local_var8;\n  byte local_byte9;\n  ushort local_short1;\n  uint local_int3;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    result = '\\f';\n  }\n  else {\n    local_byte2 = 0;\n    local_short1 = 0;\n    local_byte9 = 0;\n    local_var8 = 0xbf800000;\n    local_char3 = '\\0';\n    local_char2 = '\\0';\n    FUN_0800b430(local_array2 + 3,0,0xc);\n    FUN_0800b430(local_array2,0,0xc);\n    DAT_20000e70 = '\\0';\n    local_byte8 = 0;\n    while (index = FUN_0800184c(&local_byte1,local_array2 + 6,input_param,&local_byte2), index != 0) {\n      temp_var4 = FUN_08008590(local_var4);\n      temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      local_int3 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      if (local_byte1 == 0x47) {\n        switch(local_int3) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_byte8 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_byte8 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_byte8 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_byte8 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_byte8 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_byte8 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_byte8 = 6;\n        }\n        switch(local_int3) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          local_char2 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          local_char2 = '\\x02';\n          break;\n        case 0x11:\n          FUN_08000478(0,1,2);\n          break;\n        case 0x12:\n          FUN_08000478(2,0,1);\n          break;\n        case 0x13:\n          FUN_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_var1 = FUN_08008eec(local_var4,0x41200000);\n          temp_var4 = FUN_08008590(temp_var1);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          local_int3 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          switch(local_int3) {\n          case 0x118:\n            local_char2 = '\\x03';\n            break;\n          case 0x119:\n            local_char2 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            local_char2 = '\\x05';\n            break;\n          case 0x12d:\n            local_char2 = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_char3 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)local_int3 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp_var1 = FUN_08008eec(local_var4,0x41200000);\n          temp_var4 = FUN_08008590(temp_var1);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          local_int3 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if (local_int3 == 0x398) {\n            local_char2 = '\\a';\n          }\n          else if (local_int3 == 0x399) {\n            local_char2 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (local_byte1 == 0x4d) {\n        if (local_int3 == 0x1e) {\nLAB_08000b96:\n          local_byte8 = 5;\n        }\n        else if ((int)local_int3 < 0x1f) {\n          if ((int)local_int3 < 3) {\n            if (-1 < (int)local_int3) goto LAB_08000b96;\n          }\n          else if (local_int3 - 3 < 3) {\n            local_byte8 = 8;\n          }\n        }\n        switch(local_int3) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (local_byte8 != 0) {\n        if (((int)(uint)local_short1 >> local_byte8 & 1U) == 0) {\n          local_short1 = local_short1 | (ushort)(1 << local_byte8);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        local_byte8 = 0;\n      }\n    }\n    result = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      local_var7 = 0;\n      local_int2 = 0;\n      local_char1 = '\\0';\n      local_byte2 = 0;\nswitchD_08000d18_caseD_47:\n      index = FUN_0800184c(&local_byte1,local_array2 + 6,input_param,&local_byte2);\n      if (index != 0) {\n        switch(local_byte1) {\n        case 0x46:\n          index = FUN_0800923c(local_var4,0);\n          if (index != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = FUN_0800056c(local_var4);\n          }\n          else {\n            local_var8 = FUN_0800056c(local_var4);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_var2 = (uint)local_byte1;\n          temp_var1 = FUN_0800056c(local_var4);\n          local_array2[temp_var2 - 0x49] = temp_var1;\n          break;\n        case 0x4c:\n          temp_var4 = FUN_08008590(local_var4);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          local_char1 = FUN_08008bf0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x50:\n          local_var7 = local_var4;\n          break;\n        case 0x52:\n          local_int2 = FUN_0800056c(local_var4);\n          break;\n        case 0x53:\n          index = FUN_08009228(local_var4,0);\n          if (index != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          index = FUN_08009228(local_var4,0);\n          if (index != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_var4 = FUN_08008590(local_var4);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          DAT_20000e88 = FUN_08008bf0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x58:\n          local_array2[3] = FUN_0800056c(local_var4);\n          local_byte9 = local_byte9 | 1;\n          break;\n        case 0x59:\n          local_array2[4] = FUN_0800056c(local_var4);\n          local_byte9 = local_byte9 | 2;\n          break;\n        case 0x5a:\n          local_array2[5] = FUN_0800056c(local_var4);\n          local_byte9 = local_byte9 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      result = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          FUN_0800525c((int)DAT_20000e76);\n          FUN_08000220(DAT_20000e77);\n        }\n        if ((local_short1 & 0x200) != 0) {\n          index = FUN_08004d7c(DAT_20000e8c,&local_var3);\n          if (index == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = local_var3;\n          DAT_20000e94 = temp_stack_var1;\n          DAT_20000e98 = temp_stack_var2;\n        }\n        switch(local_char2) {\n        case '\\x01':\n          index = FUN_08009228(local_var7,0);\n          if (index == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              FUN_08002408(local_var7);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_var4 = FUN_08008590(local_var7);\n          temp_var4 = FUN_08009798((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          local_int3 = FUN_08008ba0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if ((((local_char1 == '\\x02') || (local_char1 == '\\x14')) && (-1 < (int)local_int3)) &&\n             ((int)local_int3 < 7)) {\n            if ((local_byte9 == 0) && (local_char1 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)local_int3 < 1) {\n                local_int3 = (uint)DAT_20000e8c;\n              }\n              else {\n                local_int3 = local_int3 - 1;\n              }\n              index = FUN_08004d7c(local_int3 & 0xff,local_array1);\n              if (index == 0) {\n                return '\\n';\n              }\n              for (local_byte7 = 0; local_byte7 < 3; local_byte7 = local_byte7 + 1) {\n                if (((int)(uint)local_byte9 >> local_byte7 & 1U) != 0) {\n                  if (local_char1 == '\\x14') {\n                    temp_var2 = (uint)local_byte7;\n                    temp_var1 = FUN_08008cd8(*(undefined4 *)(&DAT_20000e74 + (local_byte7 + 2) * 4),\n                                         local_array2[local_byte7 + 3]);\n                    local_array1[temp_var2] = temp_var1;\n                  }\n                  else {\n                    local_array1[local_byte7] = local_array2[local_byte7 + 3];\n                  }\n                }\n              }\n              FUN_08004bf4(local_int3 & 0xff,local_array1);\n              if (local_int3 == DAT_20000e8c) {\n                DAT_20000e90 = local_array1[0];\n                DAT_20000e94 = local_array1[1];\n                DAT_20000e98 = local_array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          local_byte9 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (local_byte9 != 0) {\n            for (local_byte6 = 0; local_byte6 < 3; local_byte6 = local_byte6 + 1) {\n              if (((int)(uint)local_byte9 >> local_byte6 & 1U) == 0) {\n                local_array2[local_byte6 + 3] = *(undefined4 *)(&DAT_20000e74 + (local_byte6 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)local_byte6;\n                temp_var1 = FUN_08008cdc(local_array2[local_byte6 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (local_byte6 + 2) * 4));\n                local_array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = local_array2[local_byte6 + 3];\n                temp_var1 = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (local_byte6 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (local_byte6 + 10) * 4));\n                temp_var2 = (uint)local_byte6;\n                temp_var1 = FUN_08008cdc(temp_var3,temp_var1);\n                local_array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n            FUN_08001e98(local_array2[3],local_array2[4],local_array2[5],DAT_20000ed0,0);\n          }\n          if (local_char2 == '\\x05') {\n            index = FUN_08004d7c(7,local_array1 + 3);\n            if (index == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            index = FUN_08004d7c(6,local_array1 + 3);\n            if (index == 0) {\n              return '\\n';\n            }\n          }\n          FUN_08001e98(local_array1[3],local_var1,local_var2,DAT_20000ed0,0);\n          DAT_20000e7c = local_array1[3];\n          DAT_20000e80 = local_var1;\n          DAT_20000e84 = local_var2;\n          local_byte9 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_char2 == '\\x06') {\n            FUN_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            FUN_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (local_byte9 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (local_byte5 = 0; local_byte5 < 3; local_byte5 = local_byte5 + 1) {\n              if (((int)(uint)local_byte9 >> local_byte5 & 1U) != 0) {\n                temp_var1 = FUN_08008cd8(*(undefined4 *)(&DAT_20000e74 + (local_byte5 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (local_byte5 + 8) * 4));\n                temp_var2 = (uint)local_byte5;\n                temp_var1 = FUN_08008cd8(temp_var1,local_array2[local_byte5 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_var2 + 10) * 4) = temp_var1;\n              }\n            }\n          }\n          local_byte9 = 0;\n          break;\n        case '\\b':\n          FUN_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((local_short1 & 4) != 0) || (local_byte9 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((index = FUN_08009228(local_var8,0), index != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((local_char3 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (local_byte4 = 0; local_byte4 < 3; local_byte4 = local_byte4 + 1) {\n            if (((int)(uint)local_byte9 >> local_byte4 & 1U) == 0) {\n              local_array2[local_byte4 + 3] = *(undefined4 *)(&DAT_20000e74 + (local_byte4 + 2) * 4);\n            }\n            else if (local_char3 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)local_byte4;\n                temp_var1 = FUN_08008cdc(local_array2[local_byte4 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (local_byte4 + 2) * 4));\n                local_array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = local_array2[local_byte4 + 3];\n                temp_var1 = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (local_byte4 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (local_byte4 + 10) * 4));\n                temp_var2 = (uint)local_byte4;\n                temp_var1 = FUN_08008cdc(temp_var3,temp_var1);\n                local_array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (local_byte9 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              FUN_08001e98(local_array2[3],local_array2[4],local_array2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (local_byte9 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_var1 = local_var8;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              FUN_08001e98(local_array2[3],local_array2[4],local_array2[5],temp_var1,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            local_byte9 = local_byte9 & ~(byte)(1 << DAT_20000e8b);\n            if ((local_byte9 == 0) ||\n               (((index = FUN_08009214(local_int2,0), index != 0 &&\n                 (index = FUN_08009214(local_array2[DAT_20000e89],0), index != 0)) &&\n                (index = FUN_08009214(local_array2[DAT_20000e8a],0), index != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              index = FUN_08009214(local_int2,0);\n              if (index == 0) {\n                local_var6 = FUN_08008cd8(local_array2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                local_var5 = FUN_08008cd8(local_array2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                FUN_0800b430(local_array2,0,0xc);\n                temp_var1 = FUN_08008eec(local_int2,0x40800000);\n                temp_var1 = FUN_08008eec(temp_var1,local_int2);\n                temp_var3 = FUN_08008eec(local_var6,local_var6);\n                temp_var1 = FUN_08008cd8(temp_var1,temp_var3);\n                temp_var3 = FUN_08008eec(local_var5,local_var5);\n                local_int1 = FUN_08008cd8(temp_var1,temp_var3);\n                index = FUN_08009228(local_int1,0);\n                if (index != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_var4 = FUN_08008590(local_int1);\n                temp_var4 = FUN_080098d0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                temp_var5 = FUN_08008590(local_var6);\n                temp_var6 = FUN_08008590(local_var5);\n                temp_var5 = FUN_0800981c((int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20),(int)temp_var6,\n                                     (int)((ulonglong)temp_var6 >> 0x20));\n                temp_var4 = FUN_08008894((int)temp_var4,(uint)((ulonglong)temp_var4 >> 0x20) ^ 0x80000000,\n                                     (int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20));\n                local_int1 = FUN_08008c30((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  local_int1 = local_int1 ^ 0x80000000;\n                }\n                index = FUN_08009228(local_int2,0);\n                if (index != 0) {\n                  local_int1 = local_int1 ^ 0x80000000;\n                  local_int2 = local_int2 ^ 0x80000000;\n                }\n                temp_var1 = FUN_08008eec(local_var5,local_int1);\n                temp_var1 = FUN_08008cd8(local_var6,temp_var1);\n                temp_var2 = (uint)DAT_20000e89;\n                temp_var1 = FUN_08008eec(temp_var1,0x3f000000);\n                local_array2[temp_var2] = temp_var1;\n                temp_var1 = FUN_08008eec(local_var6,local_int1);\n                temp_var1 = FUN_08008cdc(temp_var1,local_var5);\n                temp_var2 = (uint)DAT_20000e8a;\n                temp_var1 = FUN_08008eec(temp_var1,0x3f000000);\n                local_array2[temp_var2] = temp_var1;\n              }\n              else {\n                temp_var4 = FUN_08008590(local_array2[DAT_20000e89]);\n                temp_var5 = FUN_08008590(local_array2[DAT_20000e8a]);\n                temp_var4 = FUN_0800981c((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20),(int)temp_var5,\n                                     (int)((ulonglong)temp_var5 >> 0x20));\n                local_int2 = FUN_08008c30((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n              }\n              local_byte3 = DAT_20000e71 == '\\x02';\n              temp_var1 = local_var8;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              FUN_08001f00(&DAT_20000e7c,local_array2 + 3,local_array2,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp_var1,DAT_20000e72,local_int2,local_byte3);\n            }\n            break;\n          case '\\x04':\n            if (local_byte9 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = local_array2[3];\n          DAT_20000e80 = local_array2[4];\n          DAT_20000e84 = local_array2[5];\n        }\n        result = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          FUN_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            FUN_080025e8();\n            result = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            result = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "extract_function_080005b4",
                "param_1": "input_param",
                "iVar1": "index",
                "uVar2": "temp_var1",
                "cVar3": "result",
                "uVar4": "temp_var2",
                "uVar5": "temp_var3",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "uVar8": "temp_var6",
                "local_94": "local_array1",
                "local_84": "local_var1",
                "local_80": "local_var2",
                "local_7c": "local_var3",
                "uStack_78": "temp_stack_var1",
                "uStack_74": "temp_stack_var2",
                "auStack_70": "local_array2",
                "local_58": "local_var4",
                "local_52": "local_byte1",
                "local_51": "local_byte2",
                "local_50": "local_var5",
                "local_4c": "local_var6",
                "local_45": "local_byte3",
                "local_44": "local_int1",
                "local_3d": "local_byte4",
                "local_3c": "local_byte5",
                "local_3b": "local_byte6",
                "local_3a": "local_byte7",
                "local_39": "local_char1",
                "local_38": "local_int2",
                "local_34": "local_var7",
                "local_2f": "local_byte8",
                "local_2e": "local_char2",
                "local_2d": "local_char3",
                "local_2c": "local_var8",
                "local_27": "local_byte9",
                "local_26": "local_short1",
                "local_24": "local_int3"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08000478",
                "FUN_08009214",
                "FUN_0800923c",
                "FUN_08001f00",
                "FUN_08008bf0",
                "FUN_08004bf4",
                "FUN_08008590",
                "FUN_08009228",
                "FUN_0800184c",
                "FUN_08000220",
                "FUN_08008cdc",
                "FUN_08008cd8",
                "FUN_0800525c",
                "FUN_08009798",
                "FUN_080025e8",
                "FUN_08008ba0",
                "FUN_08002408",
                "FUN_08008894",
                "FUN_08002fd4",
                "FUN_0800b430",
                "FUN_08001e98",
                "FUN_080098d0",
                "FUN_08004d7c",
                "FUN_0800056c",
                "FUN_0800981c",
                "FUN_08008eec",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_byte_value_0800184c",
            "code": "\nundefined4 checkAndUpdateByteValue_0800184c(byte *output,undefined4 size,int baseAddress,byte *index)\n\n{\n  int result;\n  undefined4 isSuccessful;\n  \n  if (*(char *)(baseAddress + (uint)*index) == '\\0') {\n    isSuccessful = 0;\n  }\n  else {\n    *output = *(byte *)(baseAddress + (uint)*index);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      DAT_20000e70 = 2;\n      isSuccessful = 0;\n    }\n    else {\n      *index = *index + 1;\n      result = FUN_08002638(baseAddress,index,size);\n      if (result == 0) {\n        DAT_20000e70 = 1;\n        isSuccessful = 0;\n      }\n      else {\n        isSuccessful = 1;\n      }\n    }\n  }\n  return isSuccessful;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_byte_value_0800184c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "baseAddress",
                "param_4": "index",
                "iVar1": "result",
                "uVar2": "isSuccessful"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_with_param_080018cc",
            "code": "\n\n\nvoid updateDataWithParam_080018cc(uint input)\n\n{\n  _DAT_40021014 = input | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_with_param_080018cc",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_bitmask_080018fc",
            "code": "\n\n\nvoid updateBitmask_080018fc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_bitmask_080018fc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "initialize_data_flags_0800192c",
            "code": "\nvoid initializeDataFlags_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "initialize_data_flags_0800192c"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_flags_0800195c",
            "code": "\nvoid initializeFlags_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    FUN_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_flags_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "FUNC_08001994",
            "code": "\nvoid FUNC_08001994(byte param_1,char param_2,char param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  byte local_61;\n  uint local_5c;\n  uint local_58;\n  uint local_54;\n  ushort local_4e;\n  uint local_4c;\n  int local_48;\n  undefined4 local_44;\n  uint local_40;\n  uint local_3c;\n  ushort local_36;\n  uint local_34;\n  uint local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  int local_20;\n  ushort local_1a;\n  uint local_18;\n  char local_11;\n  \n  local_11 = '\\0';\n  FUN_0800b430(&local_5c,0,0xc);\n  if ((param_1 & 1) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = FUN_08008590(DAT_20000ebc);\n    local_5c = FUN_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 2) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = FUN_08008590(DAT_20000ec0);\n    local_58 = FUN_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 4) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = FUN_08008590(DAT_20000ec4);\n    local_54 = FUN_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  uVar2 = local_54;\n  if (local_54 < local_58) {\n    uVar2 = local_58;\n  }\n  local_40 = local_5c;\n  if (local_5c < uVar2) {\n    local_40 = uVar2;\n  }\n  uVar3 = FUN_0800854c(local_40);\n  uVar4 = FUN_0800854c(local_11);\n  uVar4 = FUN_080098d0((int)uVar4,(int)((ulonglong)uVar4 >> 0x20));\n  uVar3 = FUN_08008894((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  local_44 = FUN_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUN_08008eec(DAT_20000edc,local_44);\n  uVar1 = FUN_08009054(uVar1,0x453b8000);\n  uVar3 = FUN_08008590(uVar1);\n  uVar3 = FUN_08009318((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_48 = FUN_08008bf0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar3 = FUN_0800854c(local_11);\n  uVar3 = FUN_080098d0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar4 = FUN_08008590(param_4);\n  uVar3 = FUN_08008640((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  uVar1 = FUN_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUN_08008eec(local_44,uVar1);\n  uVar1 = FUN_08009054(0x4c64e1c0,uVar1);\n  uVar3 = FUN_08008590(uVar1);\n  local_4c = FUN_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_18 = 75000;\n  if (local_4c < 75000) {\n    local_18 = local_4c;\n  }\n  local_4e = DAT_20000ed4;\n  local_1a = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (param_2 == '\\0') {\n    local_1a = local_1a ^ 0xaa0;\n  }\n  FUN_080018fc(local_1a);\n  FUN_080018cc(local_4e);\n  local_28 = -(local_40 >> 1);\n  local_2c = local_18 - DAT_20000ec9;\n  local_30 = 0;\n  local_34 = 10000;\n  local_61 = param_1;\n  local_24 = local_28;\n  local_20 = local_28;\n  while( true ) {\n    local_36 = local_4e;\n    local_3c = FUN_080078f4();\n    if (param_3 == '\\0') {\n      local_3c = local_3c ^ 0x1e;\n    }\n    if (((local_61 & 1) != 0) && (local_20 = local_20 + local_5c, 0 < local_20)) {\n      if ((local_3c & 0x10) == 0) {\n        local_61 = local_61 & 0xfe;\n      }\n      else {\n        local_36 = local_36 ^ 0x10;\n      }\n      local_20 = local_20 - local_40;\n    }\n    if (((local_61 & 2) != 0) && (local_24 = local_24 + local_58, 0 < local_24)) {\n      if ((local_3c & 8) == 0) {\n        local_61 = local_61 & 0xfd;\n      }\n      else {\n        local_36 = local_36 ^ 0x440;\n      }\n      local_24 = local_24 - local_40;\n    }\n    if (((local_61 & 4) != 0) && (local_28 = local_28 + local_54, 0 < local_28)) {\n      if ((local_3c & 4) == 0) {\n        local_61 = local_61 & 0xfb;\n      }\n      else {\n        local_36 = local_36 ^ 0x100;\n      }\n      local_28 = local_28 - local_40;\n    }\n    if ((local_61 == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    FUN_080018cc(local_36);\n    FUNC_08002828(DAT_20000ec9);\n    FUN_080018cc(local_4e);\n    FUNC_08002828(local_2c);\n    if ((local_4c < local_18) && (local_34 = local_18 + local_34, 20000 < local_34)) {\n      local_34 = local_34 - 20000;\n      local_30 = local_48 + local_30;\n      local_18 = 60000000 / local_30;\n      if (local_18 < local_4c) {\n        local_18 = local_4c;\n      }\n      local_2c = local_18 - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "FUNC_08001994"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_0800854c",
                "FUN_080078f4",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_080018cc",
                "FUN_0800b430",
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_08008eec",
                "FUN_08008c30",
                "FUN_08002828"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_system_08001d4c",
            "code": "\nvoid initializeSystem_08001d4c(void)\n\n{\n  char cVar1;\n  char counter;\n  \n  FUN_08005790();\n  FUNC_08001994(4,1,0,DAT_20000eec);\n  FUNC_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    cVar1 = counter + -1;\n    if (counter == '\\0') break;\n    FUNC_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    counter = cVar1;\n    if ('\\0' < cVar1) {\n      FUNC_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  FUN_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_system_08001d4c",
                "local_9": "counter"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08002814",
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_system_08001ddc",
            "code": "\nvoid initializeSystem_08001ddc(void)\n\n{\n  FUNC_08008244();\n  FUN_080051b4();\n  FUN_0800583c();\n  FUN_0800b430(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      FUN_08002f24();\n      FUN_080004ac();\n      FUN_080039a0();\n      FUN_08005238();\n      FUN_080001f8();\n      FUN_0800192c();\n      FUN_08005814();\n      FUN_0800283a();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        FUN_080041a0(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        FUN_080039bc();\n      }\n    }\n    FUN_08003a74();\n    FUN_08003f34();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_system_08001ddc"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08005814",
                "FUN_0800583c",
                "FUN_08005238",
                "FUN_08008244",
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_0800283a",
                "FUN_080082ba",
                "FUN_080051b4",
                "FUN_0800192c",
                "FUN_0800b430",
                "FUN_080039a0",
                "FUN_08003a74",
                "FUN_080004ac",
                "FUN_08002f24",
                "FUN_080001f8",
                "FUN_080041a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "process_data_08001e98",
            "code": "\nvoid processData_08001e98(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined flag)\n\n{\n  int status;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      FUN_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      status = FUN_08002fac();\n    } while (status != 0);\n    FUN_08003004(input1,input2,input3,input4,flag);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      FUN_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "process_data_08001e98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "iVar1": "status"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_08003004",
                "FUN_08002fac",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_checksum_08001f00",
            "code": "\nvoid calculateChecksum_08001f00(int sourcePtr,undefined4 *paramArray,int targetPtr,byte byte1,byte byte2,byte byte3\n                 ,undefined4 checksum1,char checksum2,undefined4 param,char flag)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  int result;\n  uint temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  uint checksumArray [4];\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  ushort loopCounter;\n  undefined4 checksumResult;\n  undefined4 temp12;\n  undefined4 temp13;\n  uint temp14;\n  undefined4 temp15;\n  undefined4 temp16;\n  char flag;\n  ushort index;\n  undefined4 temp17;\n  uint temp18;\n  uint temp19;\n  \n  temp16 = FUN_08008cdc(*(undefined4 *)((uint)byte1 * 4 + sourcePtr),\n                          *(undefined4 *)((uint)byte1 * 4 + targetPtr));\n  temp15 = FUN_08008cdc(*(undefined4 *)((uint)byte2 * 4 + sourcePtr),\n                          *(undefined4 *)((uint)byte2 * 4 + targetPtr));\n  temp14 = FUN_08008cd8(paramArray[byte3],*(undefined4 *)((uint)byte3 * 4 + sourcePtr));\n  temp19 = *(uint *)((uint)byte1 * 4 + targetPtr) ^ 0x80000000;\n  temp18 = *(uint *)((uint)byte2 * 4 + targetPtr) ^ 0x80000000;\n  temp13 = FUN_08008cd8(paramArray[byte1],temp16);\n  temp12 = FUN_08008cd8(paramArray[byte2],temp15);\n  temp1 = FUN_08008eec(temp19,temp12);\n  temp2 = FUN_08008eec(temp18,temp13);\n  temp1 = FUN_08008cd8(temp1,temp2);\n  temp4 = FUN_08008590(temp1);\n  temp1 = FUN_08008eec(temp19,temp13);\n  temp2 = FUN_08008eec(temp18,temp12);\n  temp1 = FUN_08008cdc(temp1,temp2);\n  temp5 = FUN_08008590(temp1);\n  temp4 = thunk_FUN_08009990((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                             (int)((ulonglong)temp5 >> 0x20));\n  temp17 = FUN_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n  if (flag == '\\0') {\n    result = FUN_0800923c(temp17,0);\n    if (result != 0) {\n      temp4 = FUN_08008590(temp17);\n      temp4 = FUN_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x54442d18,0x401921fb);\n      temp17 = FUN_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n    }\n  }\n  else {\n    result = FUN_08009250(temp17,0);\n    if (result != 0) {\n      temp4 = FUN_08008590(temp17);\n      temp4 = FUN_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x54442d18,0x401921fb);\n      temp17 = FUN_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n    }\n  }\n  temp1 = FUN_08008eec(temp17,param);\n  temp4 = FUN_08008590(temp1);\n  temp5 = FUN_08008590(temp14 & 0x7fffffff);\n  temp4 = FUN_0800981c((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                       (int)((ulonglong)temp5 >> 0x20));\n  checksumResult = FUN_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n  result = FUN_08009214(checksumResult,0);\n  if (result == 0) {\n    temp1 = FUN_08009054(checksumResult,DAT_20000ed8);\n    temp4 = FUN_08008590(temp1);\n    temp4 = FUN_080094c0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n    loopCounter = FUN_08008bf0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n    if (checksum2 != '\\0') {\n      temp1 = FUN_08008e44(loopCounter);\n      checksum1 = FUN_08008eec(checksum1,temp1);\n    }\n    temp1 = FUN_08008e44(loopCounter);\n    temp11 = FUN_08009054(temp17,temp1);\n    temp1 = FUN_08008e44(loopCounter);\n    temp10 = FUN_08009054(temp14,temp1);\n    temp4 = FUN_08008590(temp11);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3fe00000);\n    temp5 = FUN_08008590(temp11);\n    temp4 = FUN_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                         (int)((ulonglong)temp5 >> 0x20));\n    temp4 = FUN_080082d0(0,0x3ff00000,(int)temp4,(int)((ulonglong)temp4 >> 0x20));\n    temp9 = FUN_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n    temp8 = temp11;\n    flag = '\\0';\n    checksumArray[byte3] = *(uint *)(sourcePtr + (uint)byte3 * 4);\n    for (index = 1; index < loopCounter; index = index + 1) {\n      if ((int)flag < (int)(uint)DAT_20000efa) {\n        temp1 = FUN_08008eec(temp19,temp8);\n        temp2 = FUN_08008eec(temp18,temp9);\n        checksumArray[3] = FUN_08008cdc(temp1,temp2);\n        temp1 = FUN_08008eec(temp19,temp9);\n        temp2 = FUN_08008eec(temp18,temp8);\n        temp19 = FUN_08008cd8(temp1,temp2);\n        temp18 = checksumArray[3];\n        flag = flag + '\\x01';\n      }\n      else {\n        temp1 = FUN_08008e44(index);\n        temp1 = FUN_08008eec(temp1,temp11);\n        temp4 = FUN_08008590(temp1);\n        temp4 = FUN_08009410((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n        temp7 = FUN_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n        temp1 = FUN_08008e44(index);\n        temp1 = FUN_08008eec(temp1,temp11);\n        temp4 = FUN_08008590(temp1);\n        temp4 = FUN_080096e8((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n        temp6 = FUN_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n        temp1 = FUN_08008eec(*(uint *)((uint)byte1 * 4 + targetPtr) ^ 0x80000000,temp7);\n        temp2 = FUN_08008eec(*(undefined4 *)((uint)byte2 * 4 + targetPtr),temp6);\n        temp19 = FUN_08008cdc(temp1,temp2);\n        temp1 = FUN_08008eec(*(uint *)((uint)byte1 * 4 + targetPtr) ^ 0x80000000,temp6);\n        temp2 = FUN_08008eec(*(undefined4 *)((uint)byte2 * 4 + targetPtr),temp7);\n        temp18 = FUN_08008cd8(temp1,temp2);\n        flag = '\\0';\n      }\n      temp3 = FUN_08008cdc(temp16,temp19);\n      checksumArray[byte1] = temp3;\n      temp3 = FUN_08008cdc(temp15,temp18);\n      checksumArray[byte2] = temp3;\n      temp3 = FUN_08008cdc(checksumArray[byte3],temp10);\n      checksumArray[byte3] = temp3;\n      FUN_08001e98(checksumArray[0],checksumArray[1],checksumArray[2],checksum1,checksum2);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    FUN_08001e98(*paramArray,paramArray[1],paramArray[2],checksum1,checksum2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_checksum_08001f00",
                "param_1": "sourcePtr",
                "param_2": "paramArray",
                "param_3": "targetPtr",
                "param_4": "byte1",
                "param_5": "byte2",
                "param_6": "byte3",
                "param_7": "checksum1",
                "param_8": "checksum2",
                "param_9": "param",
                "param_10": "flag",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "result",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "local_6c": "checksumArray",
                "local_5c": "temp6",
                "local_58": "temp7",
                "local_54": "temp8",
                "local_50": "temp9",
                "local_4c": "temp10",
                "local_48": "temp11",
                "local_42": "loopCounter",
                "local_40": "checksumResult",
                "local_3c": "temp12",
                "local_38": "temp13",
                "local_34": "temp14",
                "local_30": "temp15",
                "local_2c": "temp16",
                "local_27": "flag",
                "local_26": "index",
                "local_24": "temp17",
                "local_20": "temp18",
                "local_1c": "temp19"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cd8",
                "FUN_08008e44",
                "FUN_080096e8",
                "FUN_08009054",
                "FUN_08009214",
                "FUN_0800923c",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008590",
                "FUN_080082d0",
                "FUN_080094c0",
                "FUN_08001e98",
                "FUN_08009410",
                "FUN_0800981c",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08009250",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "initialize_process_08002408",
            "code": "\nvoid initializeProcess_08002408(undefined4 input)\n\n{\n  undefined2 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 result4;\n  ushort count;\n  \n  result2 = FUN_08008eec(input,0x41a00000);\n  result4 = FUN_08008590(result2);\n  result4 = FUN_080094c0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  count = FUN_08008bf0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  FUN_08002fd4();\n  result2 = FUN_08008eec(input,0x447a0000);\n  result3 = FUN_08008e44((uint)count * 0x32);\n  result2 = FUN_08008cd8(result2,result3);\n  result4 = FUN_08008590(result2);\n  result4 = FUN_080094c0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result1 = FUN_08008bf0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  FUNC_08002814(result1);\n  while ((count != 0 && (FUN_08003a74(), DAT_20000ea8 == '\\0'))) {\n    FUN_080002a0(0x32);\n    count = count - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "initialize_process_08002408",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "local_12": "count"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_080094c0",
                "FUN_08008cd8",
                "FUN_080002a0",
                "FUN_08003a74",
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_08008bf0",
                "FUN_08002fd4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_application_080024c4",
            "code": "\nvoid initializeApplication_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char flag1;\n  char flag2;\n  char flag3;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  FUN_08001d4c();\n  FUN_08003a74();\n  if (DAT_20000ea8 == '\\0') {\n    FUN_0800b430(&DAT_20000eac,0,0xc);\n    FUN_0800283a();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      flag3 = -1;\n    }\n    else {\n      flag3 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      flag2 = -1;\n    }\n    else {\n      flag2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      flag1 = -1;\n    }\n    else {\n      flag1 = '\\x01';\n    }\n    uVar1 = FUN_08008e44((int)flag3);\n    uVar1 = FUN_08008eec(uVar1,DAT_20000ef4);\n    uVar2 = FUN_08008e44((int)flag2);\n    uVar2 = FUN_08008eec(uVar2,DAT_20000ef4);\n    uVar3 = FUN_08008e44((int)flag1);\n    uVar3 = FUN_08008eec(uVar3,DAT_20000ef4);\n    FUN_08001e98(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    FUN_0800585c();\n    FUN_08002fd4();\n    FUN_0800283a();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_application_080024c4",
                "local_13": "flag1",
                "local_12": "flag2",
                "local_11": "flag3"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_08008eec",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "check_and_update_data_080025e8",
            "code": "\nvoid checkAndUpdateData_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    FUN_08005250();\n    FUN_08000210();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      FUN_080057e4();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "check_and_update_data_080025e8"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_0800195c",
                "FUN_08005900",
                "FUN_08003a18"
            ],
            "called": [
                "FUN_08005250",
                "FUN_08000210",
                "FUN_080057e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_08002638",
            "code": "\nundefined4 parse_integer_08002638(int input_offset,byte *input_data,uint *output_value)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_decimal;\n  int result;\n  char *current_char;\n  char *next_char;\n  undefined4 return_value;\n  undefined8 temp_value;\n  uint temp_result;\n  byte digit_count;\n  char decimal_count;\n  int parsed_integer;\n  char current_digit;\n  char *next_digit;\n  \n  next_char = (char *)(input_offset + (uint)*input_data);\n  current_char = next_char + 1;\n  current_digit = *next_char;\n  is_negative = false;\n  if (current_digit == '-') {\n    is_negative = true;\n    current_digit = *current_char;\n    next_digit = next_char + 2;\n  }\n  else {\n    next_digit = current_char;\n    if (current_digit == '+') {\n      next_digit = next_char + 2;\n      current_digit = *current_char;\n    }\n  }\n  parsed_integer = 0;\n  decimal_count = '\\0';\n  digit_count = 0;\n  is_decimal = false;\n  do {\n    digit = current_digit - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_decimal) {\n          decimal_count = decimal_count + -1;\n        }\n        parsed_integer = (uint)digit + parsed_integer * 10;\n      }\n      else if (!is_decimal) {\n        decimal_count = decimal_count + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_decimal)) {\n        if (digit_count == 0) {\n          return_value = 0;\n        }\n        else {\n          temp_result = FUN_08008e3c(parsed_integer);\n          result = FUN_08009214(temp_result,0);\n          if (result == 0) {\n            for (; decimal_count < -1; decimal_count = decimal_count + '\\x02') {\n              temp_value = FUN_08008590(temp_result);\n              temp_value = FUN_08008640((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              temp_result = FUN_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            if (decimal_count < '\\0') {\n              temp_value = FUN_08008590(temp_result);\n              temp_value = FUN_08008640((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              temp_result = FUN_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimal_count; decimal_count = decimal_count + -1) {\n                temp_result = FUN_08008eec(temp_result,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *output_value = temp_result ^ 0x80000000;\n          }\n          else {\n            *output_value = temp_result;\n          }\n          *input_data = ((char)next_digit - (char)input_offset) - 1;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      is_decimal = true;\n    }\n    current_digit = *next_digit;\n    next_digit = next_digit + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "input_offset",
                "param_2": "input_data",
                "param_3": "output_value",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_decimal",
                "iVar4": "result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "return_value",
                "uVar8": "temp_value",
                "local_1c": "temp_result",
                "local_16": "digit_count",
                "local_15": "decimal_count",
                "local_14": "parsed_integer",
                "local_d": "current_digit",
                "local_c": "next_digit"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008eec",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08001d4c",
                "FUN_08002408",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "execute_data_operations_0800283a",
            "code": "\nvoid executeDataOperations_0800283a(void)\n\n{\n  FUN_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  FUN_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "execute_data_operations_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_reset_if_nineteen_08002870",
            "code": "\nchar incrementAndResetIfNineteen_08002870(char inputChar)\n\n{\n  char result;\n  \n  result = inputChar + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_reset_if_nineteen_08002870",
                "param_1": "inputChar",
                "local_9": "result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002ef0",
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08002f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_default_08002896",
            "code": "\nchar decrementAndDefault_08002896(char input_char)\n\n{\n  char result_char;\n  \n  result_char = input_char;\n  if (input_char == '\\0') {\n    result_char = '\\x12';\n  }\n  return result_char + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_default_08002896",
                "param_1": "input_char",
                "local_9": "result_char"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "process_data_080028bc",
            "code": "\nundefined4 processData_080028bc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = FUN_08008eec(input2,input2);\n  result2 = FUN_08008eec(input1,input1);\n  result1 = FUN_08008cd8(result1,result2);\n  result2 = FUN_08008cdc(input3,input3);\n  result1 = FUN_08009054(result1,result2);\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "process_data_080028bc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08009054",
                "FUN_08008cd8",
                "FUN_08008eec",
                "FUN_08008cdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = FUN_08008cdc(input_3,input_3);\n  result_1 = FUN_08008eec(result_1,input_4);\n  result_2 = FUN_08008eec(input_1,input_1);\n  result_1 = FUN_08008cd8(result_1,result_2);\n  result_2 = FUN_08008eec(input_2,input_2);\n  result_1 = FUN_08008cdc(result_1,result_2);\n  result_2 = FUN_08008eec(input_3,0x40800000);\n  result_1 = FUN_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008eec",
                "FUN_08008cdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_result_08002978",
            "code": "\nundefined4 calculateResult_08002978(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined8 finalResult;\n  \n  result1 = FUN_08008eec(input2,input2);\n  result2 = FUN_08008cdc(input1,input1);\n  result2 = FUN_08008eec(result2,input3);\n  result1 = FUN_08008cd8(result1,result2);\n  finalResult = FUN_08008590(result1);\n  finalResult = FUN_080098d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n  result1 = FUN_08008c30((int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_result_08002978",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "finalResult"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002afc",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_08008cd8",
                "FUN_08008eec",
                "FUN_08008cdc",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_parameters_080029d8",
            "code": "\nvoid updateParameters_080029d8(undefined4 argument1,int param2,int param3)\n\n{\n  int result1;\n  undefined4 result2;\n  undefined4 result3;\n  \n  if (((param2 != 0) && (param3 != 0)) &&\n     (result1 = FUN_08009214(*(undefined4 *)(param2 + 0x18),*(undefined4 *)(param2 + 0x1c)),\n     result1 == 0)) {\n    if ((*(char *)(param2 + 0x25) == '\\0') &&\n       (result1 = FUN_08009264(*(undefined4 *)(param2 + 0x1c),*(undefined4 *)(param3 + 0x18)),\n       result1 != 0)) {\n      result3 = *(undefined4 *)(param2 + 0x1c);\n      result2 = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(param3 + 0x18),\n                           *(undefined4 *)(param2 + 0x20));\n      result1 = FUN_08009228(result3,result2);\n      if (result1 == 0) {\n        result2 = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(param3 + 0x18),\n                             *(undefined4 *)(param2 + 0x20));\n      }\n      else {\n        result2 = *(undefined4 *)(param2 + 0x1c);\n      }\n      *(undefined4 *)(param2 + 0x18) = result2;\n    }\n    else {\n      *(undefined4 *)(param2 + 0x18) = *(undefined4 *)(param2 + 0x1c);\n    }\n    *(undefined *)(param2 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_parameters_080029d8",
                "param_1": "argument1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264",
                "FUN_08002978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "process_data_08002a94",
            "code": "\nvoid processData_08002a94(void)\n\n{\n  undefined *currentPtr;\n  undefined *previousPtr;\n  undefined *tempPtr;\n  byte byteValue;\n  \n  byteValue = DAT_20000cf0;\n  previousPtr = (undefined *)0x0;\n  tempPtr = (undefined *)0x0;\n  while (currentPtr = tempPtr, byteValue != DAT_20000cf1) {\n    byteValue = FUN_08002896(byteValue);\n    tempPtr = previousPtr;\n    FUN_080029d8(&DAT_20000870 + (uint)byteValue * 0x40,previousPtr,currentPtr);\n    previousPtr = &DAT_20000870 + (uint)byteValue * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "process_data_08002a94",
                "puVar1": "currentPtr",
                "local_18": "previousPtr",
                "local_14": "tempPtr",
                "local_9": "byteValue"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "check_and_update_values_08002afc",
            "code": "\nvoid checkAndUpdateValues_08002afc(int inputParam1,int inputParam2)\n\n{\n  int result;\n  undefined4 updatedValue1;\n  undefined4 updatedValue2;\n  \n  if (((inputParam1 != 0) && (*(char *)(inputParam1 + 0x25) == '\\0')) &&\n     (result = FUN_08009228(*(undefined4 *)(inputParam1 + 0x18),*(undefined4 *)(inputParam2 + 0x18)),\n     result != 0)) {\n    updatedValue2 = *(undefined4 *)(inputParam2 + 0x18);\n    updatedValue1 = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(inputParam1 + 0x18),\n                         *(undefined4 *)(inputParam1 + 0x20));\n    result = FUN_08009228(updatedValue2,updatedValue1);\n    if (result == 0) {\n      updatedValue1 = FUN_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(inputParam1 + 0x18),\n                           *(undefined4 *)(inputParam1 + 0x20));\n    }\n    else {\n      updatedValue1 = *(undefined4 *)(inputParam2 + 0x18);\n    }\n    result = FUN_08009214(updatedValue1,*(undefined4 *)(inputParam2 + 0x18));\n    if (result == 0) {\n      *(undefined4 *)(inputParam2 + 0x18) = updatedValue1;\n      *(undefined *)(inputParam2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "check_and_update_values_08002afc",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "result",
                "uVar2": "updatedValue1",
                "uVar3": "updatedValue2"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08002978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "process_data_08002ba8",
            "code": "\nvoid process_data_08002ba8(void)\n\n{\n  uint byte_index;\n  undefined *previous_ptr;\n  undefined *current_ptr;\n  undefined *last_ptr;\n  undefined *current_ptr;\n  byte current_byte;\n  \n  last_ptr = (undefined *)0x0;\n  current_ptr = (undefined *)0x0;\n  current_byte = DAT_20000cf1;\n  current_ptr = (undefined *)0x0;\n  while (previous_ptr = last_ptr, current_byte != DAT_20000cf0) {\n    last_ptr = current_ptr;\n    byte_index = (uint)current_byte;\n    FUN_08002afc(previous_ptr,current_ptr,&DAT_20000870 + byte_index * 0x40);\n    current_byte = FUN_08002870(current_byte);\n    current_ptr = previous_ptr;\n    current_ptr = &DAT_20000870 + byte_index * 0x40;\n  }\n  FUN_08002afc(last_ptr,current_ptr,0,last_ptr,current_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "process_data_08002ba8",
                "puVar2": "previous_ptr",
                "puVar3": "current_ptr",
                "local_14": "last_ptr",
                "local_10": "current_ptr",
                "local_9": "current_byte",
                "uVar1": "byte_index"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_bounds_08002c18",
            "code": "\nvoid calculateBounds_08002c18(int baseAddress,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 result1;\n  int result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint result6;\n  undefined8 result7;\n  int lowerBound;\n  uint upperBound;\n  \n  result1 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x3c));\n  result1 = FUN_08008eec(result1,param2);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008bf0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  *(undefined4 *)(baseAddress + 0x28) = result1;\n  result1 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x3c));\n  result1 = FUN_08008eec(result1,param3);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008bf0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  *(undefined4 *)(baseAddress + 0x2c) = result1;\n  result7 = FUN_0800856c(*(int *)(baseAddress + 0x30) * 0x32);\n  result7 = FUN_08008640((int)result7,(int)((ulonglong)result7 >> 0x20),0,0x404e0000);\n  result2 = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x28));\n  result3 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x3c));\n  result4 = FUN_08008e44(result2);\n  result1 = FUN_080028bc(result1,result3,result4);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n  upperBound = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  result1 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x3c));\n  result3 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x2c));\n  result4 = FUN_08008e44(-result2);\n  result1 = FUN_080028bc(result1,result3,result4);\n  result7 = FUN_08008590(result1);\n  result7 = FUN_080094c0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  lowerBound = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n  lowerBound = (*(int *)(baseAddress + 0x10) - upperBound) - lowerBound;\n  if (lowerBound < 0) {\n    result1 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x28));\n    result3 = FUN_08008e3c(*(undefined4 *)(baseAddress + 0x2c));\n    result4 = FUN_08008e44(result2);\n    result5 = FUN_08008e44(*(undefined4 *)(baseAddress + 0x10));\n    result1 = FUN_08002908(result1,result3,result4,result5);\n    result7 = FUN_08008590(result1);\n    result7 = FUN_08009318((int)result7,(int)((ulonglong)result7 >> 0x20));\n    result6 = FUN_08008ba0((int)result7,(int)((ulonglong)result7 >> 0x20));\n    result6 = result6 & ~((int)result6 >> 0x1f);\n    upperBound = *(uint *)(baseAddress + 0x10);\n    if ((int)result6 <= (int)*(uint *)(baseAddress + 0x10)) {\n      upperBound = result6;\n    }\n    lowerBound = 0;\n  }\n  *(uint *)(baseAddress + 0x34) = upperBound;\n  *(uint *)(baseAddress + 0x38) = lowerBound + upperBound;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_bounds_08002c18",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "local_20": "lowerBound",
                "local_1c": "upperBound"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08002908",
                "FUN_08008e44",
                "FUN_0800856c",
                "FUN_080094c0",
                "FUN_08008ba0",
                "FUN_08009318",
                "FUN_08008e3c",
                "FUN_08008eec",
                "FUN_080028bc",
                "FUN_08008640",
                "FUN_08008bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "process_data_08002e08",
            "code": "\nvoid processData_08002e08(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index;\n  undefined *dataPointer;\n  byte currentByte;\n  \n  dataPointer = (undefined *)0x0;\n  currentByte = DAT_20000cf1;\n  while (currentByte != DAT_20000cf0) {\n    index = (uint)currentByte * 0x40;\n    if ((dataPointer != (undefined *)0x0) &&\n       ((dataPointer[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result1 = FUN_08009054(*(undefined4 *)(dataPointer + 0x18),*(undefined4 *)(dataPointer + 0x14));\n      result2 = FUN_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(dataPointer + 0x14));\n      FUN_08002c18(dataPointer,result1,result2);\n      dataPointer[0x24] = 0;\n    }\n    currentByte = FUN_08002870(currentByte);\n    dataPointer = &DAT_20000870 + index;\n  }\n  result1 = FUN_08009054(*(undefined4 *)(dataPointer + 0x18),*(undefined4 *)(dataPointer + 0x14));\n  result2 = FUN_08009054(0,*(undefined4 *)(dataPointer + 0x14));\n  FUN_08002c18(dataPointer,result1,result2);\n  dataPointer[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "process_data_08002e08",
                "local_18": "dataPointer",
                "local_11": "currentByte",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "index"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08009054",
                "FUN_08002870",
                "FUN_08002c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "initialize_system_08002edc",
            "code": "\nvoid initialize_system_08002edc(void)\n\n{\n  FUN_08002a94();\n  FUN_08002ba8();\n  FUN_08002e08();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "initialize_system_08002edc"
            },
            "calling": [
                "FUN_08003618",
                "FUN_08003004"
            ],
            "called": [
                "FUN_08002e08",
                "FUN_08002a94",
                "FUN_08002ba8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "initialize_data_08002ef0",
            "code": "\nvoid initializeData_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = FUN_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "initialize_data_08002ef0"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_data_08002f24",
            "code": "\nvoid initializeData_08002f24(void)\n\n{\n  FUN_08002ef0();\n  FUN_0800b430(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_data_08002f24"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08002ef0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "check_and_update_data_08002f40",
            "code": "\nvoid checkAndUpdateData_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = FUN_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "check_and_update_data_08002f40"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_active_pointer_08002f74",
            "code": "\nundefined * getActivePointer_08002f74(void)\n\n{\n  undefined *activePointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    activePointer = (undefined *)0x0;\n  }\n  else {\n    activePointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return activePointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_active_pointer_08002f74",
                "puVar1": "activePointer"
            },
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_data_pointers_equal_08002fac",
            "code": "\nbool areDataPointersEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_data_pointers_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "process_data_08002fd4",
            "code": "\nvoid processData_08002fd4(void)\n\n{\n  int result;\n  \n  while ((result = FUN_08002f74(), result != 0 || (DAT_20000ea9 == '\\x03'))) {\n    FUN_08003a74();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "process_data_08002fd4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08000220",
                "FUN_080005b4",
                "FUN_08002408",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003a74",
                "FUN_08002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_metrics_08003004",
            "code": "\nvoid calculateMetrics_08003004(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 value,\n                 char condition)\n\n{\n  undefined4 result1;\n  int metric1;\n  int metric2;\n  int metric3;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint temp;\n  int offset;\n  ushort *pointer;\n  int diff;\n  uint max;\n  undefined8 tempValue1;\n  undefined8 tempValue2;\n  undefined8 tempValue3;\n  undefined4 value1;\n  undefined4 value2;\n  \n  offset = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + offset);\n  result1 = FUN_08008eec(DAT_20000ebc,data1);\n  tempValue1 = FUN_08008590(result1);\n  metric1 = FUN_080095b8((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n  result1 = FUN_08008eec(DAT_20000ec0,data2);\n  tempValue1 = FUN_08008590(result1);\n  metric2 = FUN_080095b8((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n  result1 = FUN_08008eec(DAT_20000ec4,data3);\n  tempValue1 = FUN_08008590(result1);\n  metric3 = FUN_080095b8((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n  *pointer = 0;\n  if (metric1 < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (metric2 < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (metric3 < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  diff = metric1 - DAT_20000cf4;\n  if (diff < 0) {\n    diff = -diff;\n  }\n  *(int *)(&DAT_20000874 + offset) = diff;\n  diff = metric2 - DAT_20000cf8;\n  if (diff < 0) {\n    diff = -diff;\n  }\n  *(int *)(&DAT_20000878 + offset) = diff;\n  diff = metric3 - DAT_20000cfc;\n  if (diff < 0) {\n    diff = -diff;\n  }\n  *(int *)(&DAT_2000087c + offset) = diff;\n  temp = *(uint *)(&DAT_2000087c + offset);\n  if (*(uint *)(&DAT_2000087c + offset) < *(uint *)(&DAT_20000878 + offset)) {\n    temp = *(uint *)(&DAT_20000878 + offset);\n  }\n  max = *(uint *)(&DAT_20000874 + offset);\n  if (*(uint *)(&DAT_20000874 + offset) < temp) {\n    max = temp;\n  }\n  *(uint *)(&DAT_20000880 + offset) = max;\n  if (*(int *)(&DAT_20000880 + offset) != 0) {\n    result1 = FUN_08008e44(metric1 - DAT_20000cf4);\n    result1 = FUN_08009054(result1,DAT_20000ebc);\n    result2 = FUN_08008e44(metric2 - DAT_20000cf8);\n    result2 = FUN_08009054(result2,DAT_20000ec0);\n    result3 = FUN_08008e44(metric3 - DAT_20000cfc);\n    result3 = FUN_08009054(result3,DAT_20000ec4);\n    result4 = FUN_08008eec(result1,result1);\n    result5 = FUN_08008eec(result2,result2);\n    result4 = FUN_08008cdc(result4,result5);\n    result5 = FUN_08008eec(result3,result3);\n    result4 = FUN_08008cdc(result4,result5);\n    tempValue1 = FUN_08008590(result4);\n    tempValue1 = FUN_080098d0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n    result4 = FUN_08008c30((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + offset) = result4;\n    result4 = FUN_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + offset));\n    if (condition == '\\0') {\n      value2 = FUN_08008eec(value,result4);\n    }\n    else {\n      value2 = FUN_08009054(0x3f800000,value);\n    }\n    result5 = FUN_08008eec(*(undefined4 *)(&DAT_20000890 + offset),value2);\n    *(undefined4 *)(&DAT_20000884 + offset) = result5;\n    result5 = FUN_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    result5 = FUN_08008eec(result5,value2);\n    tempValue1 = FUN_08008590(result5);\n    tempValue1 = FUN_08009318((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n    result5 = FUN_08008bf0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + offset) = result5;\n    result5 = FUN_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    result5 = FUN_08008eec(result5,result4);\n    result5 = FUN_08008eec(result5,DAT_20000edc);\n    result5 = FUN_08009054(result5,0x453b8000);\n    tempValue1 = FUN_08008590(result5);\n    tempValue1 = FUN_08009318((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n    result5 = FUN_08008ba0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + offset) = result5;\n    temp = FUN_08008eec(result1,result4);\n    result1 = FUN_08008eec(result2,result4);\n    result2 = FUN_08008eec(result3,result4);\n    value1 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (diff = FUN_08009264(DAT_20000d0c,0), diff != 0)) {\n      result3 = FUN_08008eec(DAT_20000d00 ^ 0x80000000,temp);\n      result4 = FUN_08008eec(DAT_20000d04,result1);\n      result3 = FUN_08008cd8(result3,result4);\n      result4 = FUN_08008eec(DAT_20000d08,result2);\n      result3 = FUN_08008cd8(result3,result4);\n      tempValue1 = FUN_08008590(result3);\n      diff = FUN_08008b24((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),0x66666666,0x3fee6666);\n      if (diff != 0) {\n        diff = FUN_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + offset));\n        value1 = DAT_20000d0c;\n        if (diff == 0) {\n          value1 = *(undefined4 *)(&DAT_20000884 + offset);\n        }\n        tempValue1 = FUN_08008590(result3);\n        diff = FUN_08008b60((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),0x66666666,0xbfee6666);\n        if (diff != 0) {\n          tempValue1 = FUN_08008590(result3);\n          tempValue1 = FUN_080082d0(0,0x3ff00000,(int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n          tempValue1 = FUN_08008640((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),0,0x3fe00000);\n          tempValue1 = FUN_080098d0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n          result3 = FUN_08008c30((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n          tempValue1 = FUN_08008590(value1);\n          result4 = FUN_08008eec(DAT_20000edc,DAT_20000ee0);\n          result4 = FUN_08008eec(result4,result3);\n          tempValue2 = FUN_08008590(result4);\n          tempValue3 = FUN_08008590(result3);\n          tempValue3 = FUN_080082d0(0,0x3ff00000,(int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          tempValue2 = FUN_08008894((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)tempValue3,\n                                (int)((ulonglong)tempValue3 >> 0x20));\n          tempValue2 = FUN_080098d0((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20));\n          diff = FUN_08008b24((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)tempValue2,\n                                (int)((ulonglong)tempValue2 >> 0x20));\n          if (diff == 0) {\n            result4 = FUN_08008eec(DAT_20000edc,DAT_20000ee0);\n            result4 = FUN_08008eec(result4,result3);\n            tempValue1 = FUN_08008590(result4);\n            tempValue2 = FUN_08008590(result3);\n            tempValue2 = FUN_080082d0(0,0x3ff00000,(int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20));\n            tempValue1 = FUN_08008894((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)tempValue2,\n                                  (int)((ulonglong)tempValue2 >> 0x20));\n            tempValue1 = FUN_080098d0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n            value1 = FUN_08008c30((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + offset) = value1;\n    result4 = FUN_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + offset));\n    diff = FUN_08009228(value1,result4);\n    result3 = result4;\n    if (diff != 0) {\n      result3 = value1;\n    }\n    *(undefined4 *)(&DAT_20000888 + offset) = result3;\n    diff = FUN_08009250(result4,*(undefined4 *)(&DAT_20000884 + offset));\n    if (diff == 0) {\n      (&DAT_20000895)[offset] = 0;\n    }\n    else {\n      (&DAT_20000895)[offset] = 1;\n    }\n    (&DAT_20000894)[offset] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + offset);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = temp;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = FUN_08002870(DAT_20000cf2);\n    DAT_20000cf4 = metric1;\n    DAT_20000cf8 = metric2;\n    DAT_20000cfc = metric3;\n    FUN_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_metrics_08003004",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "value",
                "param_5": "condition",
                "uVar1": "result1",
                "iVar2": "metric1",
                "iVar3": "metric2",
                "iVar4": "metric3",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "temp",
                "iVar10": "offset",
                "puVar11": "pointer",
                "iVar12": "diff",
                "uVar13": "max",
                "uVar14": "tempValue1",
                "uVar15": "tempValue2",
                "uVar16": "tempValue3",
                "local_20": "value1",
                "local_1c": "value2"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08009054",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08009318",
                "FUN_08008ba0",
                "FUN_08002870",
                "FUN_08008b60",
                "FUN_08009264",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08008590",
                "FUN_080082d0",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008eec",
                "FUN_08009250",
                "FUN_08002978",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08002edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_params_080035ec",
            "code": "\nvoid initializeParams_080035ec(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  DAT_20000cf4 = param1;\n  DAT_20000cf8 = param2;\n  DAT_20000cfc = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_params_080035ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_data_08003618",
            "code": "\nvoid updateData_08003618(undefined4 inputData)\n\n{\n  undefined4 result;\n  int index;\n  undefined4 previousData;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  previousData = *(undefined4 *)(&DAT_20000890 + index);\n  result = FUN_08008e44(inputData);\n  result = FUN_08008eec(previousData,result);\n  previousData = FUN_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n  result = FUN_08009054(result,previousData);\n  *(undefined4 *)(&DAT_20000890 + index) = result;\n  *(undefined4 *)(&DAT_20000880 + index) = inputData;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  FUN_08002edc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_data_08003618",
                "param_1": "inputData",
                "uVar1": "result",
                "iVar2": "index",
                "uVar3": "previousData"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08009054",
                "FUN_08008e44",
                "FUN_08008eec",
                "FUN_08002edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "process_string_0800369c",
            "code": "\nvoid processString_0800369c(char *inputString)\n\n{\n  char *currentChar;\n  \n  currentChar = inputString;\n  while (*currentChar != '\\0') {\n    FUN_08008250(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "process_string_0800369c",
                "param_1": "inputString",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "process_string_080036c6",
            "code": "\nvoid processString_080036c6(char *inputString)\n\n{\n  char *currentChar;\n  \n  currentChar = inputString;\n  while (*currentChar != '\\0') {\n    FUN_08008250(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "process_string_080036c6",
                "param_1": "inputString",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004940",
                "FUN_08004900",
                "FUN_080044e8",
                "FUN_08004228",
                "FUN_080046d0",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "print_binary_digits_080036f0",
            "code": "\nvoid print_binary_digits_080036f0(uint input_number,int input_length)\n\n{\n  undefined4 binary_digit;\n  int current_bit;\n  uint bit_mask;\n  \n  bit_mask = 1 << (input_length - 1U & 0xff);\n  for (current_bit = 0; current_bit < input_length; current_bit = current_bit + 1) {\n    if ((bit_mask & input_number) == 0) {\n      binary_digit = 0x30;\n    }\n    else {\n      binary_digit = 0x31;\n    }\n    FUN_08008250(binary_digit);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "print_binary_digits_080036f0",
                "param_1": "input_number",
                "param_2": "input_length",
                "local_10": "current_bit",
                "local_c": "bit_mask",
                "uVar1": "binary_digit"
            },
            "calling": [
                "FUN_08003740",
                "FUN_0800375c"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "initialize_memory_08003740",
            "code": "\nvoid initializeMemory_08003740(undefined data)\n\n{\n  FUN_080036f0(data,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "initialize_memory_08003740",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "initialize_data_0800375c",
            "code": "\nvoid initializeData_0800375c(undefined2 data)\n\n{\n  FUN_080036f0(data,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "initialize_data_0800375c",
                "param_1": "data"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_number_08003778",
            "code": "\nvoid print_number_08003778(uint number)\n\n{\n  uint temp;\n  uint current_number;\n  char digit_buffer [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  current_number = number;\n  if (number == 0) {\n    FUN_08008250(0x30);\n  }\n  else {\n    for (; current_number != 0; current_number = current_number / 10) {\n      temp = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digit_buffer[temp + 1] = (char)(current_number % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      FUN_08008250(digit_buffer[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_number_08003778",
                "param_1": "number",
                "uVar1": "temp",
                "local_1c": "current_number",
                "acStack_15": "digit_buffer",
                "local_9": "digit_count"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int value)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = value;\n  if (value < 0) {\n    FUN_08008250(0x2d);\n    absoluteValue = -value;\n  }\n  FUN_08003778(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "value",
                "local_c": "absoluteValue"
            },
            "calling": [
                "FUN_08004250",
                "FUN_08004900",
                "FUN_080046d0"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "calculate_decimal_part_08003826",
            "code": "\nvoid calculateDecimalPart_08003826(uint inputValue)\n\n{\n  int errorCode;\n  undefined4 convertedValue;\n  byte remainder;\n  uint temp;\n  uint currentValue;\n  char decimalString [13];\n  uint tempValue;\n  byte digitPosition;\n  byte numDigits;\n  \n  errorCode = FUN_08009228(inputValue,0);\n  currentValue = inputValue;\n  if (errorCode != 0) {\n    FUN_08008250(0x2d);\n    currentValue = inputValue ^ 0x80000000;\n  }\n  for (numDigits = DAT_20000ef9; 1 < numDigits; numDigits = numDigits - 2) {\n    currentValue = FUN_08008eec(currentValue,0x42c80000);\n  }\n  if (numDigits != 0) {\n    currentValue = FUN_08008eec(currentValue,0x41200000);\n  }\n  convertedValue = FUN_08008cdc(currentValue,0x3f000000);\n  digitPosition = 0;\n  tempValue = FUN_08009278(convertedValue);\n  decimalString[DAT_20000ef9 + 1] = '.';\n  for (; tempValue != 0; tempValue = tempValue / 10) {\n    if (digitPosition == DAT_20000ef9) {\n      digitPosition = digitPosition + 1;\n    }\n    temp = (uint)digitPosition;\n    digitPosition = digitPosition + 1;\n    decimalString[temp + 1] = (char)(tempValue % 10) + '0';\n  }\n  while (digitPosition < DAT_20000ef9) {\n    temp = (uint)digitPosition;\n    digitPosition = digitPosition + 1;\n    decimalString[temp + 1] = '0';\n  }\n  if (digitPosition == DAT_20000ef9) {\n    remainder = digitPosition + 1;\n    digitPosition = digitPosition + 2;\n    decimalString[remainder + 1] = '0';\n  }\n  for (; digitPosition != 0; digitPosition = digitPosition - 1) {\n    FUN_08008250(decimalString[digitPosition]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "calculate_decimal_part_08003826",
                "param_1": "inputValue",
                "iVar1": "errorCode",
                "uVar2": "convertedValue",
                "bVar3": "remainder",
                "uVar4": "temp",
                "local_24": "currentValue",
                "acStack_1d": "decimalString",
                "local_10": "tempValue",
                "local_a": "digitPosition",
                "local_9": "numDigits"
            },
            "calling": [
                "FUN_08004250",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_080046d0"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08009278",
                "FUN_08008eec",
                "FUN_08008cdc",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initialize_data_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_080039a0",
                "FUN_08003f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_program_080039a0",
            "code": "\nvoid initialize_program_080039a0(void)\n\n{\n  FUN_08003980();\n  FUN_08004228();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_program_080039a0"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004228",
                "FUN_08003980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "check_and_process_data_080039bc",
            "code": "\nvoid checkAndProcessData_080039bc(void)\n\n{\n  int result;\n  undefined4 returnValue;\n  byte loopIndex;\n  \n  for (loopIndex = 0; loopIndex < 2; loopIndex = loopIndex + 1) {\n    result = FUN_08004d2c(loopIndex,&DAT_20000d10);\n    if (result == 0) {\n      FUN_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      FUN_0800369c(&DAT_20000d10);\n      returnValue = FUN_080005b4(&DAT_20000d10);\n      FUN_08004030(returnValue);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "check_and_process_data_080039bc",
                "local_9": "loopIndex",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800369c",
                "FUN_080005b4",
                "FUN_08004030",
                "FUN_08004d2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_input_08003a18",
            "code": "\nvoid processInput_08003a18(uint inputData)\n\n{\n  if ((inputData & 0x80) == 0) {\n    if ((inputData & 0x40) == 0) {\n      if ((inputData & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    FUN_080025e8();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_input_08003a18",
                "param_1": "inputData"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_flags_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid processFlags_08003a74(void)\n\n{\n  byte originalFlag;\n  \n  originalFlag = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        FUN_08004148(0xffffffff);\n        FUN_080041a0(1);\n        do {\n        } while( true );\n      }\n      FUN_08004148(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((originalFlag & 0x10) == 0) {\n      if ((originalFlag & 1) != 0) {\n        FUN_08004940();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((originalFlag & 8) != 0) {\n        FUN_0800587c();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((originalFlag & 4) != 0) {\n        FUN_080058a0();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((originalFlag & 2) != 0) {\n        FUN_0800585c();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_flags_08003a74",
                "bVar1": "originalFlag"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08003f34",
                "FUN_08001ddc",
                "FUN_08002fd4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080058a0",
                "FUN_0800585c",
                "FUN_08004940",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_special_characters_08003b98",
            "code": "\nuint processSpecialCharacters_08003b98(char *inputString)\n\n{\n  byte firstChar;\n  int returnValue;\n  undefined4 tempVar;\n  uint result;\n  undefined8 tempResult;\n  undefined4 value1;\n  undefined4 value2;\n  byte index1;\n  byte index2;\n  \n  if (*inputString != '$') {\n    result = FUN_080005b4(inputString);\n    return result;\n  }\n  index1 = 1;\n  index2 = '\\0';\n  firstChar = inputString[1];\n  if (firstChar == 0) {\n    FUN_0800423c();\n    return 0;\n  }\n  if ((0x58 < firstChar) || (firstChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(firstChar) {\n  case 0x23:\n    index1 = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    FUN_080044e8();\n    break;\n  case 0x24:\n    index1 = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    FUN_08004250();\n    break;\n  case 0x43:\n    index1 = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      FUN_080025e8();\n      FUN_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      FUN_080041a0(4);\n    }\n    break;\n  case 0x47:\n    index1 = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    FUN_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    FUN_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      FUN_080039bc();\n    }\n    break;\n  case 0x4e:\n    index1 = 2;\n    if (inputString[2] == '\\0') {\n      for (index2 = 0; index2 < 2; index2 = index2 + 1) {\n        returnValue = FUN_08004d2c(index2,inputString);\n        if (returnValue == 0) {\n          FUN_08004030(10);\n        }\n        else {\n          FUN_08004900(index2,inputString);\n        }\n      }\n      return 0;\n    }\n    index2 = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    returnValue = FUN_08002638(inputString,&index1,&value2);\n    if (returnValue == 0) {\n      return 1;\n    }\n    firstChar = index1 + 1;\n    if (inputString[index1] != '=') {\n      return 3;\n    }\n    index1 = firstChar;\n    if (index2 == '\\0') {\n      returnValue = FUN_08002638(inputString,&index1,&value1);\n      if (returnValue == 0) {\n        return 1;\n      }\n      if (inputString[index1] == '\\0') {\n        tempVar = FUN_08009278(value2);\n        result = FUN_08004e30(tempVar,value1);\n        return result;\n      }\n      return 3;\n    }\n    do {\n      inputString[(uint)index1 - (uint)firstChar] = inputString[index1];\n      result = (uint)index1;\n      index1 = index1 + 1;\n    } while (inputString[result] != '\\0');\n    index2 = firstChar;\n    index2 = FUN_080005b4(inputString);\n    if (index2 != 0) {\n      return (uint)index2;\n    }\n    tempResult = FUN_08008590(value2);\n    tempResult = FUN_08009798((int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n    index2 = FUN_08008bf0((int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n    FUN_08004bc0(index2,inputString);\n    break;\n  case 0x58:\n    index1 = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      FUN_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_special_characters_08003b98",
                "param_1": "inputString",
                "bVar1": "firstChar",
                "iVar2": "returnValue",
                "uVar3": "tempVar",
                "uVar4": "result",
                "uVar5": "tempResult",
                "local_14": "value1",
                "local_10": "value2",
                "local_a": "index1",
                "local_9": "index2"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_0800423c",
                "FUN_08004bc0",
                "FUN_08002638",
                "FUN_08009798",
                "FUN_08004900",
                "FUN_080025e8",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_080046d0",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_08004d2c",
                "FUN_08008590",
                "FUN_08004250",
                "FUN_08009278",
                "FUN_080044e8",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_080024c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_input_08003f34",
            "code": "\nvoid process_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 result;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = FUN_08008286();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            FUN_08004030(0xd);\n            FUN_08003980();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    FUN_08003a74();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      FUN_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      result = FUN_08003b98(&DAT_20000d10);\n      FUN_08004030(result);\n    }\n    FUN_08003980();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_input_08003f34",
                "bVar1": "input_byte",
                "uVar2": "result",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003b98",
                "FUN_08003a74",
                "FUN_08008286",
                "FUN_08004030",
                "FUN_08003980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "display_error_message_08004030",
            "code": "\nvoid displayErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    FUN_080036c6(&DAT_0800b5c8);\n  }\n  else {\n    FUN_080036c6(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      FUN_080036c6(\"Bad number format\");\n      break;\n    case '\\x02':\n      FUN_080036c6(\"Expected command letter\");\n      break;\n    case '\\x03':\n      FUN_080036c6(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      FUN_080036c6(\"Invalid radius\");\n      break;\n    case '\\x05':\n      FUN_080036c6(\"Modal group violation\");\n      break;\n    case '\\x06':\n      FUN_080036c6(\"Invalid statement\");\n      break;\n    case '\\a':\n      FUN_080036c6(\"Setting disabled\");\n      break;\n    case '\\b':\n      FUN_080036c6(\"Value < 0.0\");\n      break;\n    case '\\t':\n      FUN_080036c6(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      FUN_080036c6(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      FUN_080036c6(\"Busy or queued\");\n      break;\n    case '\\f':\n      FUN_080036c6(\"Alarm lock\");\n      break;\n    case '\\r':\n      FUN_080036c6(\"Line overflow\");\n    }\n    FUN_080036c6(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "errorCode"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080004ac",
                "FUN_080044e8",
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  FUN_080036c6(\"ALARM: \");\n  if (errorCode == -2) {\n    FUN_080036c6(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    FUN_080036c6(\"Hard limit\");\n  }\n  FUN_080036c6(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined status)\n\n{\n  FUN_080036c6(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    FUN_080036c6(\"Reset to continue\");\n    break;\n  case 2:\n    FUN_080036c6(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    FUN_080036c6(\"Caution: Unlocked\");\n    break;\n  case 4:\n    FUN_080036c6(\"Enabled\");\n    break;\n  case 5:\n    FUN_080036c6(\"Disabled\");\n  }\n  FUN_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "status"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003a74",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\nvoid print_grbl_version_08004228(void)\n\n{\n  FUN_080036c6(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_menu_0800423c",
            "code": "\nvoid printGrblMenu_0800423c(void)\n\n{\n  FUN_080036c6(\n              \"viewGrblSettings (view Grbl settings)\\r\\nviewParameters (view # parameters)\\r\\nviewParserState (view parser state)\\r\\nviewStartupBlocks (view startup blocks)\\r\\nsaveGrblSetting=value (save Grbl setting)\\r\\nsaveStartupBlock=line (save startup block)\\r\\ncheckGcodeMode (check gcode mode)\\r\\nkillAlarmLock (kill alarm lock)\\r\\nrunHomingCycle (run homing cycle)\\r\\ncycleStart (cycle start)\\r\\nfeedHold (feed hold)\\r\\n? (current status)\\r\\nresetGrbl (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_menu_0800423c",
                "$": "command",
                "$$": "viewGrblSettings",
                "$#": "viewParameters",
                "$G": "viewParserState",
                "$N": "viewStartupBlocks",
                "$x": "saveGrblSetting",
                "$Nx": "saveStartupBlock",
                "$C": "checkGcodeMode",
                "$X": "killAlarmLock",
                "$H": "runHomingCycle",
                "~": "cycleStart",
                "!": "feedHold",
                "ctrl-x": "resetGrbl"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_08004250",
            "code": "\nvoid printConfiguration_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  FUN_080036c6(&DAT_0800b8b8);\n  FUN_08003826(DAT_20000ebc);\n  FUN_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  FUN_08003826(DAT_20000ec0);\n  FUN_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  FUN_08003826(DAT_20000ec4);\n  FUN_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  FUN_080037fc(DAT_20000ec9);\n  FUN_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  FUN_08003826(DAT_20000ecc);\n  FUN_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  FUN_08003826(DAT_20000ed0);\n  FUN_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  FUN_080037fc(DAT_20000ed4);\n  FUN_080036c6(\" (step port invert mask, int:\");\n  FUN_0800375c(DAT_20000ed4);\n  FUN_080036c6(\")\\r\\n$7=\");\n  FUN_080037fc(DAT_20000ef8);\n  FUN_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = FUN_08009054(DAT_20000edc,0x45610000);\n  FUN_08003826(acceleration);\n  FUN_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  FUN_08003826(DAT_20000ee0);\n  FUN_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  FUN_08003826(DAT_20000ed8);\n  FUN_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  FUN_080037fc(DAT_20000efa);\n  FUN_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  FUN_080037fc(DAT_20000ef9);\n  FUN_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  FUN_080037fc((DAT_20000ee4 & 1) != 0);\n  FUN_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  FUN_080037fc((DAT_20000ee4 & 2) != 0);\n  FUN_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  FUN_080037fc((DAT_20000ee4 & 4) != 0);\n  FUN_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  FUN_080037fc((DAT_20000ee4 & 8) != 0);\n  FUN_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  FUN_080037fc((DAT_20000ee4 & 0x10) != 0);\n  FUN_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  FUN_080037fc(DAT_20000ee6);\n  FUN_080036c6(\" (homing dir invert mask, int:\");\n  FUN_0800375c(DAT_20000ee6);\n  FUN_080036c6(\")\\r\\n$19=\");\n  FUN_08003826(DAT_20000ee8);\n  FUN_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  FUN_08003826(DAT_20000eec);\n  FUN_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  FUN_080037fc(DAT_20000ef0);\n  FUN_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  FUN_08003826(DAT_20000ef4);\n  FUN_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  FUN_080037fc(DAT_20000ed6);\n  FUN_080036c6(\" (dir port invert mask, int:\");\n  FUN_0800375c(DAT_20000ed6);\n  FUN_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_08004250",
                "uVar1": "acceleration"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08003826",
                "FUN_08009054",
                "FUN_080037fc",
                "FUN_080036c6",
                "FUN_0800375c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_and_reverse_data_080044e8",
            "code": "\nvoid printAndReverseData_080044e8(void)\n\n{\n  int result;\n  undefined4 convertedValue;\n  undefined8 processedValue;\n  undefined4 dataArray [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      FUN_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          FUN_08003826(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          processedValue = FUN_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          processedValue = FUN_08008640((int)processedValue,(int)((ulonglong)processedValue >> 0x20),0x57e16865,0x3fa42851);\n          convertedValue = FUN_08008c30((int)processedValue,(int)((ulonglong)processedValue >> 0x20));\n          FUN_08003826(convertedValue);\n        }\n        if (index < 2) {\n          FUN_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          FUN_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = FUN_08004d7c(counter,dataArray);\n    if (result == 0) break;\n    FUN_080036c6(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      FUN_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      FUN_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      FUN_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      FUN_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      FUN_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      FUN_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      FUN_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      FUN_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        FUN_08003826(dataArray[index]);\n      }\n      else {\n        processedValue = FUN_08008590(dataArray[index]);\n        processedValue = FUN_08008640((int)processedValue,(int)((ulonglong)processedValue >> 0x20),0x57e16865,0x3fa42851);\n        convertedValue = FUN_08008c30((int)processedValue,(int)((ulonglong)processedValue >> 0x20));\n        FUN_08003826(convertedValue);\n      }\n      if (index < 2) {\n        FUN_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        FUN_080036c6(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  FUN_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_and_reverse_data_080044e8",
                "iVar1": "result",
                "uVar2": "convertedValue",
                "uVar3": "processedValue",
                "auStack_18": "dataArray",
                "local_a": "index",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08003826",
                "FUN_08004d7c",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_080036c6",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "process_data_080046d0",
            "code": "\nvoid processData_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    FUN_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    FUN_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    FUN_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    FUN_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    FUN_080036c6(&DAT_0800bbd8);\n  }\n  FUN_080036c6(&DAT_0800bbe0);\n  FUN_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      FUN_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      FUN_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    FUN_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    FUN_080036c6(&DAT_0800bc04);\n  }\n  else {\n    FUN_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    FUN_080036c6(&DAT_0800bc14);\n  }\n  else {\n    FUN_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    FUN_080036c6(&DAT_0800bc24);\n  }\n  else {\n    FUN_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    FUN_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      FUN_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      FUN_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    FUN_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      FUN_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      FUN_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    FUN_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      FUN_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      FUN_080036c6(&DAT_0800bc48);\n    }\n  }\n  FUN_080036c6(&DAT_0800bc50);\n  FUN_080037fc(DAT_20000e88);\n  FUN_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    FUN_08003826(DAT_20000e78);\n  }\n  else {\n    uVar2 = FUN_08008590(DAT_20000e78);\n    uVar2 = FUN_08008640((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = FUN_08008c30((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    FUN_08003826(uVar1);\n  }\n  FUN_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "process_data_080046d0"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08008640",
                "FUN_080036c6",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "initialize_08004900",
            "code": "\nvoid initialize_08004900(undefined param1,undefined4 param2)\n\n{\n  FUN_080036c6(&DAT_0800bc58);\n  FUN_080037fc(param1);\n  FUN_080036c6(&DAT_0800bc5c);\n  FUN_0800369c(param2);\n  FUN_080036c6(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "initialize_08004900",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_0800369c",
                "FUN_080037fc",
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_status_08004940",
            "code": "\nvoid printStatus_08004940(void)\n\n{\n  undefined4 status;\n  uint index;\n  undefined4 converted;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined4 statusValues [6];\n  byte i;\n  \n  statusValues[3] = DAT_20000eac;\n  statusValues[4] = DAT_20000eb0;\n  statusValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    FUN_080036c6(\"<Idle\");\n    break;\n  case 2:\n    FUN_080036c6(\"<Queue\");\n    break;\n  case 3:\n    FUN_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    FUN_080036c6(\"<Hold\");\n    break;\n  case 5:\n    FUN_080036c6(\"<Home\");\n    break;\n  case 6:\n    FUN_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    FUN_080036c6(\"<Check\");\n  }\n  FUN_080036c6(\",MPos:\");\n  for (i = 0; i < 3; i = i + 1) {\n    status = FUN_08008e44(statusValues[i + 3]);\n    index = (uint)i;\n    status = FUN_08009054(status,(&DAT_20000ebc)[i]);\n    statusValues[index] = status;\n    if ((DAT_20000ee4 & 1) != 0) {\n      temp1 = FUN_08008590(statusValues[i]);\n      temp1 = FUN_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)i;\n      status = FUN_08008c30((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      statusValues[index] = status;\n    }\n    FUN_08003826(statusValues[i]);\n    FUN_080036c6(&DAT_0800bbbc);\n  }\n  FUN_080036c6(\"WPos:\");\n  for (i = 0; i < 3; i = i + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      converted = statusValues[i];\n      status = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (i + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (i + 10) * 4));\n      index = (uint)i;\n      status = FUN_08008cd8(converted,status);\n      statusValues[index] = status;\n    }\n    else {\n      temp1 = FUN_08008590(statusValues[i]);\n      status = FUN_08008cdc(*(undefined4 *)(&DAT_20000e70 + (i + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (i + 10) * 4));\n      temp2 = FUN_08008590(status);\n      temp2 = FUN_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x57e16865,0x3fa42851);\n      temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                           (int)((ulonglong)temp2 >> 0x20));\n      index = (uint)i;\n      status = FUN_08008c30((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      statusValues[index] = status;\n    }\n    FUN_08003826(statusValues[i]);\n    if (i < 2) {\n      FUN_080036c6(&DAT_0800bbbc);\n    }\n  }\n  FUN_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "uVar1": "status",
                "uVar2": "index",
                "uVar3": "converted",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "auStack_2c": "statusValues",
                "local_11": "i"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008590",
                "FUN_080082d0",
                "FUN_08008cd8",
                "FUN_08003826",
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "initialize_memory_08004bc0",
            "code": "\nvoid initializeMemory_08004bc0(byte inputByte,undefined4 inputValue)\n\n{\n  FUN_08000374((ushort)inputByte * 0x101 + 0x300,inputValue,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "initialize_memory_08004bc0",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "multiply_and_add_offset_08004bf4",
            "code": "\nvoid multiplyAndAddOffset_08004bf4(byte inputByte,undefined4 inputValue)\n\n{\n  FUN_08000374((ushort)inputByte * 0xd + 0x200,inputValue,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "multiply_and_add_offset_08004bf4",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08004d7c",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_and_configure_08004c2a",
            "code": "\nvoid initializeAndConfigure_08004c2a(void)\n\n{\n  FUN_08000340(0,5);\n  FUN_08000374(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_and_configure_08004c2a"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_settings_08004c48",
            "code": "\nvoid initializeSettings_08004c48(char inputFlag)\n\n{\n  if (inputFlag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  FUN_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "param_1": "inputFlag"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "verify_and_initialize_data_08004d2c",
            "code": "\nbool verify_and_initialize_data_08004d2c(byte byte_value,undefined *data_ptr)\n\n{\n  int result;\n  \n  result = FUN_080003ec(data_ptr,(ushort)byte_value * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *data_ptr = 0;\n    FUN_08004bc0(byte_value,data_ptr);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "verify_and_initialize_data_08004d2c",
                "param_1": "byte_value",
                "param_2": "data_ptr",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_execute_function_08004d7c",
            "code": "\nbool checkAndExecuteFunction_08004d7c(byte byteValue,undefined4 functionPointer)\n\n{\n  int result;\n  \n  result = FUN_080003ec(functionPointer,(ushort)byteValue * 0xd + 0x200,0xc);\n  if (result == 0) {\n    FUN_0800b430(functionPointer,0,0xc);\n    FUN_08004bf4(byteValue,functionPointer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_execute_function_08004d7c",
                "param_1": "byteValue",
                "param_2": "functionPointer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_080003ec",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_and_initialize_memory_08004dd2",
            "code": "\nundefined4 check_and_initialize_memory_08004dd2(void)\n\n{\n  byte result;\n  int status;\n  \n  result = FUN_08000310(0);\n  if (result == 5) {\n    status = FUN_080003ec(&DAT_20000ebc,1,0x40);\n    if (status == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < result) {\n      return 0;\n    }\n    status = FUN_080003ec(&DAT_20000ebc,1,0x28);\n    if (status == 0) {\n      return 0;\n    }\n    FUN_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_and_initialize_memory_08004dd2",
                "bVar1": "result",
                "iVar2": "status"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08000310",
                "FUN_08004c48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "set_configuration_parameter_08004e30",
            "code": "\nundefined4 setConfigurationParameter_08004e30(int parameterType,uint parameterValue)\n\n{\n  undefined4 result;\n  int returnValue;\n  undefined8 tempValue;\n  \n  switch(parameterType) {\n  case 0:\n  case 1:\n  case 2:\n    returnValue = FUN_0800923c(parameterValue,0);\n    if (returnValue != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[parameterType] = parameterValue;\n    break;\n  case 3:\n    returnValue = FUN_08009228(parameterValue,0x40400000);\n    if (returnValue != 0) {\n      return 9;\n    }\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ec9 = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = parameterValue;\n    break;\n  case 5:\n    DAT_20000ed0 = parameterValue;\n    break;\n  case 6:\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009798((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ed4 = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 7:\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ef8 = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 8:\n    result = FUN_08008eec(parameterValue,0x42700000);\n    DAT_20000edc = FUN_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = parameterValue & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = parameterValue;\n    break;\n  case 0xb:\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000efa = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0xc:\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ef9 = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0xd:\n    returnValue = FUN_08009214(parameterValue,0);\n    if (returnValue == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    returnValue = FUN_08009214(parameterValue,0);\n    if (returnValue == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    returnValue = FUN_08009214(parameterValue,0);\n    if (returnValue == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    returnValue = FUN_08009214(parameterValue,0);\n    if (returnValue == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    FUN_0800192c();\n    break;\n  case 0x11:\n    returnValue = FUN_08009214(parameterValue,0);\n    if (returnValue == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009798((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ee6 = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = parameterValue;\n    break;\n  case 0x14:\n    DAT_20000eec = parameterValue;\n    break;\n  case 0x15:\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ef0 = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = parameterValue;\n    break;\n  case 0x17:\n    tempValue = FUN_08008590(parameterValue);\n    tempValue = FUN_08009798((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ed6 = FUN_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  FUN_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "set_configuration_parameter_08004e30",
                "param_1": "parameterType",
                "param_2": "parameterValue",
                "uVar1": "result",
                "iVar2": "returnValue",
                "uVar3": "tempValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08009214",
                "FUN_08004c2a",
                "FUN_08008eec",
                "FUN_08009654",
                "FUN_0800923c",
                "FUN_08008bf0",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_process_data_080051b4",
            "code": "\nvoid checkAndProcessData_080051b4(void)\n\n{\n  int result;\n  undefined stackData [15];\n  byte counter;\n  \n  result = FUN_08004dd2();\n  if (result == 0) {\n    FUN_08004030(10);\n    FUN_08004c48(1);\n    FUN_08004250();\n  }\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    result = FUN_08004d7c(counter,stackData);\n    if (result == 0) {\n      FUN_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_process_data_080051b4",
                "iVar1": "result",
                "auStack_18": "stackData",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004250",
                "FUN_08004d7c",
                "FUN_08004dd2",
                "FUN_08004030",
                "FUN_08004c48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_data_08005238",
            "code": "\nvoid initializeData_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  FUN_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_data_08005238"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "initialize_application_08005250",
            "code": "\nvoid initializeApplication_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "initialize_application_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_080025e8",
                "FUN_08005238"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "verify_and_update_parameter_0800525c",
            "code": "\nvoid verifyAndUpdateParameter_0800525c(byte input)\n\n{\n  if ((int)(char)input != (uint)DAT_20000e12) {\n    FUN_08002fd4();\n    if (input == 0) {\n      FUN_08005250();\n      DAT_20000e12 = input;\n    }\n    else {\n      if ((char)input < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "verify_and_update_parameter_0800525c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08005208",
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08005220",
                "FUN_08002fd4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_data_080052ac",
            "code": "\n\n\nvoid updateData_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_data_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_data_mask_080052dc",
            "code": "\n\n\nvoid updateDataMask_080052dc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_data_mask_080052dc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_frequency_08005324",
            "code": "\nvoid calculateFrequency_08005324(uint frequency)\n\n{\n  uint adjustedFrequency;\n  \n  adjustedFrequency = frequency;\n  if (frequency < 800) {\n    adjustedFrequency = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedFrequency;\n  FUN_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_frequency_08005324",
                "param_1": "frequency",
                "local_14": "adjustedFrequency"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "calculate_threshold_exceeded_08005360",
            "code": "\nbool calculateThresholdExceeded_08005360(void)\n\n{\n  bool isThresholdExceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isThresholdExceeded = 420000 < DAT_20000e2c;\n  if (isThresholdExceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isThresholdExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "calculate_threshold_exceeded_08005360",
                "bVar1": "isThresholdExceeded"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_data_080053a0",
            "code": "\nvoid updateData_080053a0(void)\n\n{\n  int errorCode;\n  \n  FUN_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)FUN_08002f74();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      FUN_080057e4();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        FUN_08005324(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        errorCode = FUN_08005360();\n        if (errorCode != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            FUN_08005324(DAT_20000e30);\n          }\n          else {\n            FUN_080057e4();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        errorCode = FUN_08005360();\n        if (errorCode != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          FUN_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          FUN_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        errorCode = FUN_08005360();\n        if (errorCode != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          FUN_08005324(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      FUN_08002f40();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_data_080053a0",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052dc",
                "FUN_080057e4",
                "FUN_08005324",
                "FUN_08002f40",
                "FUN_08005360",
                "FUN_08002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initializeData_08005760(void)\n\n{\n  FUN_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_data_08005778",
            "code": "\nvoid initializeData_08005778(void)\n\n{\n  FUN_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_data_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_data_08005790",
            "code": "\nvoid initializeData_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    FUN_08007c40(0x69);\n    FUN_08007c5e((DAT_20000ec9 + 5) * 0x15);\n    FUN_08007b70();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_data_08005790"
            },
            "calling": [
                "FUN_0800585c",
                "FUN_0800583c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c5e",
                "FUN_08007c40",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "execute_important_function_080057e4",
            "code": "\nvoid executeImportantFunction_080057e4(void)\n\n{\n  FUN_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "execute_important_function_080057e4"
            },
            "calling": [
                "FUN_080053a0",
                "FUN_0800583c",
                "FUN_080025e8",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_0800530c",
                "FUN_08007bc2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  FUN_0800b430(&DAT_20000e14,0,0x24);\n  FUN_08005324(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_program_0800583c",
            "code": "\nvoid initializeProgram_0800583c(void)\n\n{\n  FUN_080052ac(DAT_20000ed4);\n  FUN_08005790();\n  FUN_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_program_0800583c"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "update_status_0800585c",
            "code": "\nvoid updateStatus_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    FUN_08005790();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "update_status_0800585c"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_data_080058a0",
            "code": "\nvoid initializeData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    FUN_08003618(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    FUN_08005324(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_data_080058a0"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_and_update_flags_08005900",
            "code": "\nundefined4 checkAndUpdateFlags_08005900(byte inputByte)\n\n{\n  if (inputByte == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (inputByte < 0x7f) {\n    if (inputByte == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (inputByte < 0x40) {\n      if (inputByte == 0x18) {\n        FUN_080025e8();\n        return 1;\n      }\n      if (inputByte == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_and_update_flags_08005900",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "initialize_flag_08005984",
            "code": "\nundefined4 initializeFlag_08005984(undefined4 flagParameter)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = FUN_0800597c(1,flagParameter,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "initialize_flag_08005984",
                "param_1": "flagParameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n\nundefined4 initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  FUN_08006d72(16000);\n  FUN_08006ce0(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08005a50",
                "FUN_08006d72",
                "FUN_08006ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_global_data_08005a84",
            "code": "\nundefined4 getGlobalData_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_global_data_08005a84"
            },
            "calling": [
                "FUN_08007756",
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08005a98",
                "FUN_08005cec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "wait_for_sum_08005a98",
            "code": "\nvoid waitForSum_08005a98(int sumThreshold)\n\n{\n  int initialSum;\n  uint currentSum;\n  \n  initialSum = FUN_08005a84();\n  do {\n    currentSum = FUN_08005a84();\n  } while (currentSum < (uint)(sumThreshold + initialSum));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "wait_for_sum_08005a98",
                "param_1": "sumThreshold",
                "iVar1": "initialSum",
                "uVar2": "currentSum"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "set_byte_value_08005bdc",
            "code": "\nvoid setByteValue_08005bdc(byte inputByte,uint value)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "set_byte_value_08005bdc",
                "param_1": "inputByte",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_param_and_set_values_08005c30",
            "code": "\n\n\nbool checkParamAndSetValues_08005c30(int input)\n\n{\n  bool isInputValid;\n  \n  isInputValid = input - 1U < 0x1000000;\n  if (isInputValid) {\n    _DAT_e000e014 = input + -1;\n    FUN_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInputValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_param_and_set_values_08005c30",
                "param_1": "input",
                "bVar1": "isInputValid"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_and_process_flags_08005cec",
            "code": "\n\n\nundefined4 checkAndProcessFlags_08005cec(uint *flags)\n\n{\n  int result;\n  uint value;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flags[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        value = FUN_08005a84();\n        if (result + 5000U <= value) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)flags[1],_DAT_40023800));\n      if (flags[1] == 1) {\n        result = FUN_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          value = FUN_08005a84();\n          if (result + 5000U <= value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        result = FUN_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          value = FUN_08005a84();\n          if (result + 5000U <= value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flags[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (flags[3] == 0) {\n      _DAT_42470000 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        value = FUN_08005a84();\n        if (result + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        value = FUN_08005a84();\n        if (result + 100U <= value) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = flags[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[5] == 0) {\n      _DAT_42470e80 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        value = FUN_08005a84();\n        if (result + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      result = FUN_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        value = FUN_08005a84();\n        if (result + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    result = FUN_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      value = FUN_08005a84();\n      if (result + 100U <= value) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    result = FUN_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      value = FUN_08005a84();\n      if (result + 5000U <= value) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)flags[2]);\n    if (flags[2] == 1) {\n      result = FUN_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        value = FUN_08005a84();\n        if (result + 5000U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      result = FUN_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        value = FUN_08005a84();\n        if (result + 5000U <= value) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (flags[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (flags[6] == 2) {\n      _DAT_42470060 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value = FUN_08005a84();\n        if (result + 100U <= value) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           flags[0xb] << 0x18 |\n           flags[8] | flags[9] << 6 | ((flags[10] >> 1) - 1) * 0x10000 | flags[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        value = FUN_08005a84();\n        if (result + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      result = FUN_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value = FUN_08005a84();\n        if (result + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_and_process_flags_08005cec",
                "param_1": "flags",
                "iVar1": "result",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "process_data_0800618c",
            "code": "\n\n\nundefined4 processData_0800618c(uint *data,uint size)\n\n{\n  int returnValue;\n  uint randomValue;\n  uint timeout;\n  undefined8 timestamp;\n  \n  if ((_DAT_40023c00 & 0xf) < size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n    if ((*data & 1) != 0) {\n      if (data[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((data[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = data[1] | _DAT_40023808 & 0xfffffffc;\n      returnValue = FUN_08005a84();\n      timeout = returnValue + 5000;\n      if (data[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          randomValue = FUN_08005a84();\n          if (timeout <= randomValue) {\n            return 3;\n          }\n        }\n      }\n      else if (data[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          randomValue = FUN_08005a84();\n          if (timeout <= randomValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          randomValue = FUN_08005a84();\n          if (timeout <= randomValue) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*data & 1) != 0) {\n      if (data[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (data[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = data[1] | _DAT_40023808 & 0xfffffffc;\n      returnValue = FUN_08005a84();\n      timeout = returnValue + 5000;\n      if (data[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          randomValue = FUN_08005a84();\n          if (timeout <= randomValue) {\n            return 3;\n          }\n        }\n      }\n      else if (data[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          randomValue = FUN_08005a84();\n          if (timeout <= randomValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          randomValue = FUN_08005a84();\n          if (timeout <= randomValue) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*data & 2) != 0) {\n    _DAT_40023808 = data[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*data & 4) != 0) {\n    _DAT_40023808 = data[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*data & 8) != 0) {\n    _DAT_40023808 = data[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  timestamp = FUN_08006628();\n  FUN_08005c30((uint)timestamp / 1000,(int)((ulonglong)timestamp >> 0x20),(uint)timestamp * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "process_data_0800618c",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "returnValue",
                "uVar2": "randomValue",
                "uVar3": "timeout",
                "uVar4": "timestamp"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "configure_devices_0800640c",
            "code": "\n\n\nvoid configureDevices_0800640c(int deviceType,uint paramA,uint paramB)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  \n  if (deviceType == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    constant1 = 0x100;\n    constant2 = 2;\n    constant4 = 3;\n    constant3 = 0;\n    constant5 = 0;\n    FUN_08006e88(0x40020000,&constant1);\n    _DAT_40023808 = paramB | paramA | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    constant1 = 0x200;\n    constant2 = 2;\n    constant4 = 3;\n    constant3 = 0;\n    constant5 = 0;\n    FUN_08006e88(0x40020800,&constant1);\n    _DAT_40023808 = paramA | paramB << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "configure_devices_0800640c",
                "param_1": "deviceType",
                "param_2": "paramA",
                "param_3": "paramB",
                "local_1c": "constant1",
                "local_18": "constant2",
                "local_14": "constant3",
                "local_10": "constant4",
                "local_c": "constant5"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_speed_080064ec",
            "code": "\n\n\nuint calculate_clock_speed_080064ec(void)\n\n{\n  uint uVar1;\n  uint clock_speed;\n  \n  uVar1 = _DAT_40023808 & 0xc;\n  if (uVar1 == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clock_speed = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clock_speed = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clock_speed / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (uVar1 < 9) {\n    if (uVar1 == 0) {\n      return 16000000;\n    }\n    if (uVar1 == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_speed_080064ec",
                "local_c": "clock_speed"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "extract_and_shift_08006628",
            "code": "\n\n\nuint extract_and_shift_08006628(void)\n\n{\n  uint result;\n  \n  result = FUN_080064ec();\n  DAT_20000000 = result >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return result >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "extract_and_shift_08006628",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08006680",
                "FUN_080066cc",
                "FUN_0800618c"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "shift_result_by_value_08006680",
            "code": "\n\n\nuint shiftResultByValue_08006680(void)\n\n{\n  uint returnValue;\n  \n  returnValue = FUN_08006628();\n  return returnValue >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "shift_result_by_value_08006680",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "shifted_value_by_bits_080066cc",
            "code": "\n\n\nuint shiftedValueByBits_080066cc(void)\n\n{\n  uint result;\n  \n  result = FUN_08006628();\n  return result >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "shifted_value_by_bits_080066cc",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_memory_configuration_08006950",
            "code": "\n\n\nvoid setMemoryConfiguration_08006950(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configuration & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_memory_configuration_08006950",
                "param_1": "configuration"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_shifted_value_08006998",
            "code": "\n\n\nuint getShiftedValue_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_shifted_value_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid setBitInMemory_080069b4(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_080069e4",
            "code": "\nvoid setBit_080069e4(byte input)\n\n{\n  *(integer *)((((unsignedInteger)(integer)(character)input >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_080069e4",
                "param_1": "input",
                "uint": "unsignedInteger",
                "int": "integer",
                "char": "character"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_in_memory_08006a18",
            "code": "\nbool checkBitInMemory_08006a18(byte byteValue)\n\n{\n  return (*(unsignedInteger *)((((unsignedInteger)(int)(character)byteValue >> 5) plus 0x40) * 4 plus minus0x1fff1f00) and\n         1 << (byteValue and 0x1f)) notEqual 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_in_memory_08006a18",
                "param_1": "byteValue",
                "char": "character",
                "uint": "unsignedInteger",
                "+": "plus",
                "-": "minus",
                "&": "and",
                "!=": "notEqual"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_array_08006a58",
            "code": "\nvoid setBitInArray_08006a58(byte bitNumber)\n\n{\n  *(int *)((((uint)(int)(char)bitNumber >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (bitNumber & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_array_08006a58",
                "param_1": "bitNumber"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_in_memory_08006a8c",
            "code": "\nvoid setBitInMemory_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_at_offset_08006ac0",
            "code": "\nbool checkBitAtOffset_08006ac0(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_at_offset_08006ac0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "update_memory_08006b00",
            "code": "\nvoid updateMemory_08006b00(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "update_memory_08006b00",
                "param_1": "address",
                "param_2": "data"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extract_byte_from_binary_08006b54",
            "code": "\nbyte extractByteFromBinary_08006b54(byte inputByte)\n\n{\n  byte outputByte;\n  \n  if ((char)inputByte < '\\0') {\n    outputByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    outputByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return outputByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extract_byte_from_binary_08006b54",
                "param_1": "inputByte",
                "bVar1": "outputByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "bitwise_operation_08006ba0",
            "code": "\nuint bitwiseOperation_08006ba0(uint bitOffset,uint value1,uint value2)\n\n{\n  uint temp1;\n  \n  bitOffset = bitOffset & 7;\n  temp1 = 7 - bitOffset;\n  if (3 < temp1) {\n    temp1 = 4;\n  }\n  if (bitOffset + 4 < 7) {\n    bitOffset = 0;\n  }\n  else {\n    bitOffset = bitOffset - 3;\n  }\n  return value2 & (1 << (bitOffset & 0xff)) - 1U |\n         ((1 << (temp1 & 0xff)) - 1U & value1) << (bitOffset & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "bitOffset",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "temp1"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extract_bits_08006c04(uint input_value,uint bit_position,uint *output_value_1,uint *output_value_2)\n\n{\n  uint remaining_bits;\n  \n  bit_position = bit_position & 7;\n  remaining_bits = 7 - bit_position;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (bit_position + 4 < 7) {\n    bit_position = 0;\n  }\n  else {\n    bit_position = bit_position - 3;\n  }\n  *output_value_1 = (1 << (remaining_bits & 0xff)) - 1U & input_value >> (bit_position & 0xff);\n  *output_value_2 = (1 << (bit_position & 0xff)) - 1U & input_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input_value",
                "param_2": "bit_position",
                "param_3": "output_value_1",
                "param_4": "output_value_2",
                "uVar1": "remaining_bits"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_parameter_validity_08006c9c",
            "code": "\n\n\nbool checkParameterValidity_08006c9c(int parameter)\n\n{\n  bool isParameterValid;\n  \n  isParameterValid = parameter - 1U < 0x1000000;\n  if (isParameterValid) {\n    _DAT_e000e014 = parameter + -1;\n    FUN_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isParameterValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_parameter_validity_08006c9c",
                "param_1": "parameter",
                "bVar1": "isParameterValid"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "execute_initialization_08006ce0",
            "code": "\nvoid executeInitialization_08006ce0(undefined4 inputParameter)\n\n{\n  FUN_08006950(inputParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "execute_initialization_08006ce0",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "initialize_and_process_data_08006cf6",
            "code": "\nvoid initializeAndProcessData_08006cf6(char data,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 result;\n  \n  result = FUN_08006998();\n  result = FUN_08006ba0(result,param2,param3);\n  FUN_08006b00((int)data,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "initialize_and_process_data_08006cf6",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "call_function_with_param_08006d2e",
            "code": "\nvoid callFunctionWithParam_08006d2e(char input)\n\n{\n  FUN_080069b4((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "call_function_with_param_08006d2e",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "process_character_08006d4a",
            "code": "\nvoid processCharacter_08006d4a(char character)\n\n{\n  FUN_080069e4((int)character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "process_character_08006d4a",
                "param_1": "character"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "execute_boot_sequence_08006d66",
            "code": "\nvoid execute_boot_sequence_08006d66(void)\n\n{\n  FUN_08006c70();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "execute_boot_sequence_08006d66"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "process_data_08006d72",
            "code": "\nundefined4 processData_08006d72(undefined4 inputData)\n\n{\n  undefined4 result;\n  \n  result = FUN_08006c9c(inputData);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "process_data_08006d72",
                "param_1": "inputData",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_return_value_08006d8a",
            "code": "\nundefined4 getReturnValue_08006d8a(void)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_08006998();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_return_value_08006d8a",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "convert_and_process_character_08006d98",
            "code": "\nvoid convertAndProcessCharacter_08006d98(char character,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 convertedCharacter;\n  \n  convertedCharacter = FUN_08006b54((int)character);\n  FUN_08006c04(convertedCharacter,param2,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "convert_and_process_character_08006d98",
                "param_1": "character",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "convertedCharacter"
            },
            "calling": [],
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "initialize_data_08006dc4",
            "code": "\nvoid initializeData_08006dc4(char data)\n\n{\n  FUN_08006a58((int)data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "initialize_data_08006dc4",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "decode_character_08006de0",
            "code": "\nundefined4 decodeCharacter_08006de0(char character)\n\n{\n  undefined4 decodingResult;\n  \n  decodingResult = FUN_08006a18((int)character);\n  return decodingResult;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "decode_character_08006de0",
                "param_1": "character",
                "uVar1": "decodingResult"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "initialize_param_08006dfe",
            "code": "\nvoid initializeParam_08006dfe(char parameter)\n\n{\n  FUN_08006a8c((int)parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "initialize_param_08006dfe",
                "param_1": "parameter"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "convert_char_to_unsigned_int_08006e1a",
            "code": "\nundefined4 convertCharToUnsignedInt_08006e1a(char inputChar)\n\n{\n  undefined4 convertedValue;\n  \n  convertedValue = FUN_08006ac0((int)inputChar);\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "convert_char_to_unsigned_int_08006e1a",
                "param_1": "inputChar",
                "uVar1": "convertedValue"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_parameters_08006e88",
            "code": "\n\n\nvoid updateParameters_08006e88(uint *outputParams,uint *inputParams)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    bitMask = 1 << (counter & 0xff);\n    bitCheck = *inputParams & bitMask;\n    if (bitCheck == bitMask) {\n      if ((inputParams[1] == 2) || (inputParams[1] == 0x12)) {\n        bitMask = inputParams[4];\n        outputParams[(counter >> 3) + 8] = outputParams[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        outputParams[(counter >> 3) + 8] = outputParams[(counter >> 3) + 8] | bitMask << ((counter & 7) << 2);\n      }\n      *outputParams = *outputParams & ~(3 << ((counter & 0x7f) << 1));\n      *outputParams = *outputParams | (inputParams[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((inputParams[1] == 1) || (inputParams[1] == 2)) || (inputParams[1] == 0x11)) || (inputParams[1] == 0x12)\n         ) {\n        outputParams[2] = outputParams[2] & ~(3 << ((counter & 0x7f) << 1));\n        outputParams[2] = outputParams[2] | inputParams[3] << ((counter & 0x7f) << 1);\n        outputParams[1] = outputParams[1] & ~(1 << (counter & 0xff));\n        outputParams[1] = outputParams[1] | (inputParams[1] >> 4 & 1) << (counter & 0xff);\n      }\n      outputParams[3] = outputParams[3] & ~(3 << ((counter & 0x7f) << 1));\n      outputParams[3] = outputParams[3] | inputParams[2] << ((counter & 0x7f) << 1);\n      if ((inputParams[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        if (outputParams == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (outputParams == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (outputParams == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (outputParams == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (outputParams == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (outputParams == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (outputParams == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (outputParams == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (outputParams == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (outputParams == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((counter & 3) << 2) | *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitCheck & _DAT_40013c00;\n        _DAT_40013c04 = ~bitCheck & _DAT_40013c04;\n        if ((inputParams[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitCheck | _DAT_40013c00;\n        }\n        if ((inputParams[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitCheck | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitCheck & _DAT_40013c08;\n        _DAT_40013c0c = ~bitCheck & _DAT_40013c0c;\n        if ((inputParams[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitCheck | _DAT_40013c08;\n        }\n        if ((inputParams[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitCheck | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_parameters_08006e88",
                "param_1": "outputParams",
                "param_2": "inputParams",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "iVar3": "index",
                "local_c": "counter"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_param_value_0800733e",
            "code": "\nvoid setParamValue_0800733e(int objectAddress,undefined2 value,char isSecondary)\n\n{\n  if (isSecondary == '\\0') {\n    *(undefined2 *)(objectAddress + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(objectAddress + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "isSecondary"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_data_if_flag_set_0800738e",
            "code": "\n\n\nvoid updateDataIfFlagSet_0800738e(ushort inputValue)\n\n{\n  if ((inputValue & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)inputValue;\n    FUNC_080073c0(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_data_if_flag_set_0800738e",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "update_bit_080073d4",
            "code": "\nvoid updateBit_080073d4(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "update_bit_080073d4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "write_bit_to_memory_08007402",
            "code": "\nvoid writeBitToMemory_08007402(uint inputValue)\n\n{\n  *(Short *)(((int)inputValue >> 4) * 0x400 + 0x40020018) = (Short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "write_bit_to_memory_08007402",
                "param_1": "inputValue",
                "short": "Short"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_memory_08007436",
            "code": "\n\n\nvoid initializeMemory_08007436(void)\n\n{\n  int result;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 flag3;\n  undefined4 value7;\n  undefined4 value8;\n  undefined4 value9;\n  undefined4 value10;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag1 = 1;\n  flag2 = 1;\n  value1 = 2;\n  value2 = 0x400000;\n  value3 = 8;\n  value4 = 0x150;\n  value5 = 2;\n  value6 = 7;\n  result = FUN_08005cec(&flag1);\n  if (result != 0) {\n    FUN_08007430();\n  }\n  flag3 = 0xf;\n  value7 = 2;\n  value8 = 0;\n  value9 = 0x1400;\n  value10 = 0x1000;\n  result = FUN_0800618c(&flag3,5);\n  if (result != 0) {\n    FUN_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_memory_08007436",
                "local_4c": "flag1",
                "local_48": "flag2",
                "local_34": "value1",
                "local_30": "value2",
                "local_2c": "value3",
                "local_28": "value4",
                "local_24": "value5",
                "local_20": "value6",
                "local_1c": "flag3",
                "local_18": "value7",
                "local_14": "value8",
                "local_10": "value9",
                "local_c": "value10",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "process_flags_080074c8",
            "code": "\nvoid processFlags_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    FUN_08007402(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    FUN_0800195c();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    FUN_08003a18(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "process_flags_080074c8",
                "param_1": "flags"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_0800195c",
                "FUN_08007402",
                "FUN_08003a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "check_and_invoke_function_08007520",
            "code": "\nvoid checkAndInvokeFunction_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    FUN_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "check_and_invoke_function_08007520",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_application_08007540",
            "code": "\nundefined4 initialize_application_08007540(void)\n\n{\n  FUN_080059b4();\n  FUN_08007436();\n  FUN_0800778c();\n  FUN_08007e08();\n  FUN_080079c0();\n  FUN_08008190();\n  FUN_08005984(0);\n  FUN_08001ddc();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_application_08007540"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080059b4",
                "FUN_08007e08",
                "FUN_0800778c",
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08008190",
                "FUN_080079c0",
                "FUN_08001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n\nvoid initializeSystem_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bitwise_080076c8",
            "code": "\nvoid updateBitwise_080076c8(uint input)\n\n{\n  *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bitwise_080076c8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "check_and_execute_actions_08007756",
            "code": "\nvoid checkAndExecuteActions_08007756(void)\n\n{\n  uint result;\n  \n  result = FUN_08005a84();\n  if ((result & 0x1ff) == 0) {\n    FUN_080076c8(0x3c);\n  }\n  if ((result & 0xf) == 0) {\n    FUN_08007930();\n  }\n  FUN_08005a68();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "check_and_execute_actions_08007756",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_08005a84",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "activate_permissions_0800778c",
            "code": "\n\n\nvoid activatePermissions_0800778c(void)\n\n{\n  int index;\n  int bitMask;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  uint *address;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    index = counter * 0x18;\n    address = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*address >> 4 & 0xff);\n    bitMask = 1 << (*address & 0xf);\n    data1 = *(undefined4 *)(&DAT_0800bcc0 + index);\n    data2 = *(undefined4 *)(&DAT_0800bcc4 + index);\n    data3 = *(undefined4 *)(&DAT_0800bcc8 + index);\n    data4 = *(undefined4 *)(&DAT_0800bccc + index);\n    FUN_08006e88(((*address >> 4) + 0x100080) * 0x400,&bitMask);\n    if (-1 < (int)address[5]) {\n      FUN_0800733e(((*address >> 4) + 0x100080) * 0x400,1 << (*address & 0xf) & 0xffff,\n                   address[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "activate_permissions_0800778c",
                "local_24": "bitMask",
                "local_20": "data1",
                "local_1c": "data2",
                "local_18": "data3",
                "local_14": "data4",
                "local_10": "address",
                "local_c": "counter",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006e88",
                "FUN_0800733e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_value_08007854",
            "code": "\nuint checkBitValue_08007854(uint inputValue)\n\n{\n  return *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020010) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_value_08007854",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "combine_results_08007884",
            "code": "\nuint combineResults_08007884(void)\n\n{\n  int result_0x36;\n  int result_0x37;\n  int result_0x38;\n  int result_0x39;\n  int result_0x0F;\n  uint result_0x00;\n  \n  result_0x36 = FUN_08007854(0x36);\n  result_0x37 = FUN_08007854(0x37);\n  result_0x38 = FUN_08007854(0x38);\n  result_0x39 = FUN_08007854(0x39);\n  result_0x0F = FUN_08007854(0xf);\n  result_0x00 = FUN_08007854(0);\n  return result_0x00 | result_0x36 << 4 | result_0x37 << 3 | result_0x38 << 2 | result_0x39 << 1 | result_0x0F << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "combine_results_08007884",
                "iVar1": "result_0x36",
                "iVar2": "result_0x37",
                "iVar3": "result_0x38",
                "iVar4": "result_0x39",
                "iVar5": "result_0x0F",
                "uVar6": "result_0x00"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_combined_value_080078f4",
            "code": "\nuint calculateCombinedValue_080078f4(void)\n\n{\n  int counter;\n  uint combinedValue;\n  \n  combinedValue = 0;\n  for (counter = 0; counter < 4; counter = counter + 1) {\n    combinedValue = *(uint *)(&DAT_20000e54 + counter * 4) | combinedValue;\n  }\n  return combinedValue;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_combined_value_080078f4",
                "local_10": "counter",
                "local_c": "combinedValue"
            },
            "calling": [
                "FUN_08007930",
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_data_and_perform_operations_08007930",
            "code": "\nvoid updateDataAndPerformOperations_08007930(void)\n\n{\n  int dataIndex;\n  uint previousData;\n  undefined4 newData;\n  uint currentData;\n  uint changedData;\n  \n  dataIndex = DAT_20000e68;\n  previousData = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    newData = FUN_08007884();\n    *(undefined4 *)(&DAT_20000e54 + dataIndex * 4) = newData;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    currentData = FUN_080078f4();\n    previousData = DAT_20000e64;\n    if (currentData != DAT_20000e64) {\n      changedData = ~currentData & DAT_20000e64;\n      if ((~DAT_20000e64 & currentData) != 0) {\n        FUN_080074c8(~DAT_20000e64 & currentData);\n      }\n      previousData = currentData;\n      if (changedData != 0) {\n        FUN_08007520(changedData);\n      }\n    }\n  }\n  DAT_20000e64 = previousData;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_data_and_perform_operations_08007930",
                "iVar1": "dataIndex",
                "uVar2": "previousData",
                "uVar3": "newData",
                "uVar4": "currentData",
                "uVar5": "changedData"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080074c8",
                "FUN_080078f4",
                "FUN_08007884",
                "FUN_08007520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_data_080079c0",
            "code": "\nvoid initializeData_080079c0(void)\n\n{\n  FUN_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_at_index_080079e0",
            "code": "\nvoid setBitAtIndex_080079e0(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_at_index_080079e0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "set_flag_based_on_value_08007a10",
            "code": "\n\n\nvoid setFlagBasedOnValue_08007a10(undefined *value)\n\n{\n  if (value == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (value == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (value == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "set_flag_based_on_value_08007a10",
                "param_1": "value"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "identify_and_process_memory_region_08007a70",
            "code": "\nvoid identifyAndProcessMemoryRegion_08007a70(undefined *memoryRegionAddress,undefined4 param2,undefined4 param3)\n\n{\n  undefined regionCode;\n  \n  if (memoryRegionAddress == (undefined *)0x40000000) {\n    regionCode = 0x1c;\n  }\n  else if (memoryRegionAddress == (undefined *)0x40000400) {\n    regionCode = 0x1d;\n  }\n  else {\n    if (memoryRegionAddress != &DAT_40000800) {\n      return;\n    }\n    regionCode = 0x1e;\n  }\n  FUN_08006cf6(regionCode,param2,param3);\n  FUN_080079e0(regionCode);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "identify_and_process_memory_region_08007a70",
                "param_1": "memoryRegionAddress",
                "param_2": "param2",
                "param_3": "param3",
                "local_c": "regionCode"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  FUN_08007a10(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  FUN_08007a70(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_config_flags_08007b70",
            "code": "\n\n\nvoid setConfigFlags_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_config_flags_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_registers_08007bc2",
            "code": "\n\n\nvoid clearRegisters_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_registers_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_data_and_limit_08007bf0",
            "code": "\n\n\nvoid updateDataAndLimit_08007bf0(uint inputValue)\n\n{\n  _DAT_4000002c = inputValue;\n  if (inputValue <= _DAT_40000024) {\n    _DAT_40000024 = inputValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_data_and_limit_08007bf0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_param_value_08007c40",
            "code": "\n\n\nvoid setParamValue_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_param_value_08007c40",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_global_value_08007c5e",
            "code": "\n\n\nvoid setGlobalValue_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_global_value_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "check_and_execute_functions_08007c7c",
            "code": "\n\n\nvoid check_and_execute_functions_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    FUN_08005778();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    FUN_08005760();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    FUN_080053a0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "check_and_execute_functions_08007c7c"
            },
            "calling": [],
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_peripheral_08007d08",
            "code": "\n\n\nvoid initializePeripheral_08007d08(void)\n\n{\n  FUN_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_peripheral_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_and_bits_08007da8",
            "code": "\n\n\nvoid setFlagsAndBits_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_and_bits_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_system_08007e08",
            "code": "\nvoid initializeSystem_08007e08(void)\n\n{\n  FUN_08007ad0();\n  FUN_08007d08();\n  FUN_08007da8();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007da8",
                "FUN_08007ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_08007e1c",
            "code": "\n\n\nvoid waitForFlag_08007e1c(byte value)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_08007e1c",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_flag_status_08007e58",
            "code": "\n\n\nbool checkFlagStatus_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_flag_status_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_flags_08007ea4",
            "code": "\n\n\nvoid update_flags_08007ea4(undefined *input_ptr)\n\n{\n  if (input_ptr == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (input_ptr == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (input_ptr == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (input_ptr == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (input_ptr == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (input_ptr == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_flags_08007ea4",
                "param_1": "input_ptr"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_checksum_08007f54",
            "code": "\nvoid calculateChecksum_08007f54(int dataAddress,int dataSize)\n\n{\n  ulonglong quotient;\n  int tmpVar1;\n  int tmpVar2;\n  undefined8 randomVal;\n  \n  if ((*(uint *)(dataAddress + 0xc) & 0x8000) == 0) {\n    if ((dataAddress != 0x40011000) && (dataAddress != 0x40011400)) {\n      randomVal = FUN_08006680();\n      quotient = (ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(dataSize << 2);\n      tmpVar1 = FUN_08006680((int)randomVal,(int)((ulonglong)randomVal >> 0x20),(int)(quotient * 0x51eb851f));\n      tmpVar2 = FUN_08006680();\n      *(uint *)(dataAddress + 8) =\n           (int)(quotient / 100) << 4 |\n           (((uint)(tmpVar1 * 0x19) / (uint)(dataSize << 2) +\n            (int)(((ulonglong)(uint)(tmpVar2 * 0x19) / (ulonglong)(uint)(dataSize << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    randomVal = FUN_080066cc();\n    quotient = (ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(dataSize << 2);\n    tmpVar1 = FUN_080066cc((int)randomVal,(int)((ulonglong)randomVal >> 0x20),(int)(quotient * 0x51eb851f));\n    tmpVar2 = FUN_080066cc();\n    *(uint *)(dataAddress + 8) =\n         (int)(quotient / 100) << 4 |\n         (((uint)(tmpVar1 * 0x19) / (uint)(dataSize << 2) +\n          (int)(((ulonglong)(uint)(tmpVar2 * 0x19) / (ulonglong)(uint)(dataSize << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((dataAddress != 0x40011000) && (dataAddress != 0x40011400)) {\n      randomVal = FUN_08006680();\n      quotient = (ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(dataSize << 1);\n      tmpVar1 = FUN_08006680((int)randomVal,(int)((ulonglong)randomVal >> 0x20),(int)(quotient * 0x51eb851f));\n      tmpVar2 = FUN_08006680();\n      *(uint *)(dataAddress + 8) =\n           (int)(quotient / 100) << 4 |\n           (((uint)(tmpVar1 * 0x19) / (uint)(dataSize << 1) +\n            (int)(((ulonglong)(uint)(tmpVar2 * 0x19) / (ulonglong)(uint)(dataSize << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    randomVal = FUN_080066cc();\n    quotient = (ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(dataSize << 1);\n    tmpVar1 = FUN_080066cc((int)randomVal,(int)((ulonglong)randomVal >> 0x20),(int)(quotient * 0x51eb851f));\n    tmpVar2 = FUN_080066cc();\n    *(uint *)(dataAddress + 8) =\n         (int)(quotient / 100) << 4 |\n         (((uint)(tmpVar1 * 0x19) / (uint)(dataSize << 1) +\n          (int)(((ulonglong)(uint)(tmpVar2 * 0x19) / (ulonglong)(uint)(dataSize << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_checksum_08007f54",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "uVar1": "quotient",
                "iVar2": "tmpVar1",
                "iVar3": "tmpVar2",
                "uVar4": "randomVal"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_08008190",
            "code": "\n\n\nvoid initializeMemory_08008190(void)\n\n{\n  FUN_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  FUN_08007f54(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_08008190"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "initialize_components_08008250",
            "code": "\nvoid initializeComponents_08008250(undefined component)\n\n{\n  FUN_08007e1c(component);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "initialize_components_08008250",
                "param_1": "component"
            },
            "calling": [
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_080036f0",
                "FUN_08003778",
                "FUN_080036c6"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "execute_func_0800826a",
            "code": "\nundefined4 execute_func_0800826a(undefined input_param)\n\n{\n  FUN_08007e1c(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "execute_func_0800826a",
                "param_1": "input_param"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_status_08008286",
            "code": "\nundefined check_status_08008286(void)\n\n{\n  undefined result;\n  int status;\n  \n  status = FUN_08007e58();\n  if (status != 0) {\n    result = FUN_08007e84();\n    status = FUN_08005900(result);\n    if (status == 0) {\n      return result;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_status_08008286",
                "uVar1": "result",
                "iVar2": "status"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08007e84",
                "FUN_08005900",
                "FUN_08007e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "reverse_bits_080082d0",
            "code": "\nulonglong reverseBits_080082d0(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_1;\n  byte carry;\n  uint shift_5;\n  uint uVar4;\n  uint uVar5;\n  uint result_1;\n  uint result_2;\n  int shift_2;\n  uint result_1;\n  uint leftShiftResult_2;\n  uint result_2;\n  uint result_4;\n  bool isZero;\n  bool isEqual;\n  bool cond;\n  \n  result_1 = input_4 ^ 0x80000000;\n  result_1 = input_2 << 1;\n  input_4 = input_4 << 1;\n  isZero = ((input_2 ^ result_1) & 0x7fffffff) == 0;\n  isEqual = isZero && input_1 == input_3;\n  if (!isZero || input_1 != input_3) {\n    isEqual = (result_1 | input_1) == 0;\n  }\n  if (!isEqual) {\n    isEqual = (input_4 | input_3) == 0;\n  }\n  shift_2 = (int)result_1 >> 0x15;\n  if (!isEqual) {\n    isEqual = shift_2 == -1;\n  }\n  shift_1 = (int)input_4 >> 0x15;\n  if (!isEqual) {\n    isEqual = shift_1 == -1;\n  }\n  if (isEqual) {\n    if (shift_2 == -1 || shift_1 == -1) {\n      result_1 = result_1;\n      result_2 = input_3;\n      if (shift_2 == -1) {\n        result_1 = input_2;\n        result_2 = input_1;\n      }\n      if (shift_2 != -1 || shift_1 != -1) {\n        input_3 = result_2;\n        result_1 = result_1;\n      }\n      isEqual = (result_2 | result_1 << 0xc) == 0;\n      if (isEqual) {\n        isEqual = (input_3 | result_1 << 0xc) == 0;\n      }\n      if (isEqual) {\n        isEqual = result_1 == result_1;\n      }\n      if (!isEqual) {\n        result_1 = result_1 | 0x80000;\n      }\n      return CONCAT44(result_1,result_2);\n    }\n    if (((input_2 ^ result_1) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((result_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = result_1;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != result_1) {\n      return 0;\n    }\n    if (result_1 >> 0x15 == 0) {\n      isEqual = (input_1 & 0x80000000) != 0;\n      result_1 = input_2 * 2 + (uint)isEqual;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)isEqual)) {\n        result_1 = result_1 | 0x80000000;\n      }\n      return CONCAT44(result_1,input_1 << 1);\n    }\n    if (result_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  result_1 = result_1 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  result_2 = input_4 - result_1;\n  isEqual = result_2 != 0;\n  if (input_4 < result_1) {\n    result_2 = -result_2;\n  }\n  leftShiftResult_2 = input_1;\n  result_2 = input_2;\n  if (isEqual && result_1 <= input_4) {\n    result_1 = result_1 + result_2;\n    leftShiftResult_2 = input_3;\n    result_2 = result_1;\n    input_3 = input_1;\n    result_1 = input_2;\n  }\n  if (0x36 < result_2) {\n    return CONCAT44(result_2,leftShiftResult_2);\n  }\n  uVar4 = result_2 & 0xfffff | 0x100000;\n  if ((result_2 & 0x80000000) != 0) {\n    isEqual = leftShiftResult_2 != 0;\n    leftShiftResult_2 = -leftShiftResult_2;\n    uVar4 = -uVar4 - (uint)isEqual;\n  }\n  result_2 = result_1 & 0xfffff | 0x100000;\n  if ((result_1 & 0x80000000) != 0) {\n    isEqual = input_3 != 0;\n    input_3 = -input_3;\n    result_2 = -result_2 - (uint)isEqual;\n  }\n  if (result_1 == result_2) {\n    result_2 = result_2 ^ 0x100000;\n    if (result_1 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      result_1 = 1;\n    }\n    else {\n      result_2 = result_2 - 1;\n    }\n  }\n  result_1 = -result_2 + 0x20;\n  if ((int)result_2 < 0x21) {\n    result_4 = input_3 << (result_1 & 0xff);\n    input_3 = input_3 >> (result_2 & 0xff);\n    shift_5 = leftShiftResult_2 + input_3;\n    uVar5 = result_2 << (result_1 & 0xff);\n    result_1 = shift_5 + uVar5;\n    uVar4 = uVar4 + CARRY4(leftShiftResult_2,input_3) + ((int)result_2 >> (result_2 & 0xff)) +\n            (uint)CARRY4(shift_5,uVar5);\n  }\n  else {\n    result_4 = result_2 << (-result_2 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      result_4 = result_4 | 2;\n    }\n    result_2 = (int)result_2 >> (result_2 - 0x20 & 0xff);\n    result_1 = leftShiftResult_2 + result_2;\n    uVar4 = uVar4 + ((int)result_2 >> 0x1f) + (uint)CARRY4(leftShiftResult_2,result_2);\n  }\n  input_2 = uVar4 & 0x80000000;\n  result_2 = uVar4;\n  if ((int)uVar4 < 0) {\n    isEqual = result_4 == 0;\n    result_4 = -result_4;\n    result_2 = -result_1;\n    result_1 = -(uint)!isEqual - result_1;\n    result_2 = -(uint)(isEqual <= result_2) - uVar4;\n  }\n  if (0xfffff < result_2) {\n    leftShiftResult_2 = result_1 - 1;\n    if (0x1fffff < result_2) {\n      leftShiftResult_2 = result_2 & 1;\n      result_2 = result_2 >> 1;\n      carry = (byte)result_1;\n      result_1 = (uint)(leftShiftResult_2 != 0) << 0x1f | result_1 >> 1;\n      result_4 = (uint)(carry & 1) << 0x1f | result_4 >> 1;\n      leftShiftResult_2 = result_1;\n      if (0xffbfffff < result_1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isEqual = 0x7fffffff < result_4;\n    if (result_4 == 0x80000000) {\n      isEqual = (result_1 & 1) != 0;\n    }\n    return CONCAT44(result_2 + leftShiftResult_2 * 0x100000 + (uint)CARRY4(result_1,(uint)isEqual) | input_2,\n                    result_1 + isEqual);\n  }\n  isZero = (result_4 & 0x80000000) != 0;\n  result_4 = result_4 << 1;\n  leftShiftResult_2 = result_1 * 2;\n  isEqual = CARRY4(result_1,result_1);\n  result_1 = result_1 * 2 + (uint)isZero;\n  result_2 = result_2 * 2 + (uint)(isEqual || CARRY4(leftShiftResult_2,(uint)isZero));\n  leftShiftResult_2 = result_1 - 2;\n  if (result_1 - 1 != 0 && 0xfffff < result_2) goto LAB_080083e0;\n  result_2 = result_1;\n  result_1 = result_2;\n  if (result_2 == 0) {\n    result_2 = 0;\n    result_1 = result_1;\n  }\n  shift_2 = LZCOUNT(result_1);\n  if (result_2 == 0) {\n    shift_2 = shift_2 + 0x20;\n  }\n  result_2 = shift_2 - 0xb;\n  cond = SBORROW4(result_2,0x20);\n  result_1 = shift_2 - 0x2b;\n  isEqual = (int)result_1 < 0;\n  isZero = result_1 == 0;\n  if ((int)result_2 < 0x20) {\n    cond = SCARRY4(result_1,0xc);\n    shift_2 = shift_2 + -0x1f;\n    isEqual = shift_2 < 0;\n    isZero = shift_2 == 0;\n    result_1 = result_2;\n    if (!isZero && isEqual == cond) {\n      result_2 = result_1 << (result_2 & 0xff);\n      result_1 = result_1 >> (0xcU - shift_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isEqual != cond) {\n    result_4 = 0x20 - result_1;\n  }\n  result_1 = result_1 << (result_1 & 0xff);\n  if (isZero || isEqual != cond) {\n    result_1 = result_1 | result_2 >> (result_4 & 0xff);\n  }\n  if (isZero || isEqual != cond) {\n    result_2 = result_2 << (result_1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result_2 <= (int)leftShiftResult_2) {\n    return CONCAT44(result_1 + (leftShiftResult_2 - result_2) * 0x100000 | input_2,result_2);\n  }\n  result_1 = ~(leftShiftResult_2 - result_2);\n  if ((int)result_1 < 0x1f) {\n    shift_2 = result_1 - 0x13;\n    if (shift_2 != 0 && shift_2 < 0 == SCARRY4(result_1 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,result_2 >> (0x20 - (0xcU - shift_2) & 0xff) | result_1 << (0xcU - shift_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_1 = result_1 + 1;\n    return CONCAT44(input_2 | result_1 >> (result_1 & 0xff),\n                    result_2 >> (result_1 & 0xff) | result_1 << (0x20 - result_1 & 0xff));\n  }\n  return CONCAT44(uVar4,result_1 >> (result_1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "reverse_bits_080082d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_1",
                "bVar2": "carry",
                "uVar3": "shift_5",
                "uVar6": "result_1",
                "uVar7": "result_2",
                "iVar8": "shift_2",
                "uVar9": "result_1",
                "uVar10": "leftShiftResult_2",
                "uVar11": "result_2",
                "uVar12": "result_4",
                "bVar13": "isZero",
                "bVar14": "isEqual",
                "bVar15": "cond"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080096e8",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08001f00",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a1bc",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_08009990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_sum_080082d4",
            "code": "\nulonglong calculate_sum_080082d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shifted_input_4_negative;\n  byte bVar2;\n  uint temp_1;\n  uint temp_2;\n  uint calculated_result_2;\n  int shifted_input_2_negative;\n  uint shifted_input_2;\n  uint calculated_result_1;\n  uint shifted_input_4;\n  uint sum_difference;\n  uint temp_3;\n  uint temp_4;\n  bool is_inputs_equal;\n  bool is_condition_met;\n  bool is_negative;\n  \n  shifted_input_2 = input_2 << 1;\n  shifted_input_4 = input_4 << 1;\n  is_inputs_equal = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  is_condition_met = is_inputs_equal && input_1 == input_3;\n  if (!is_inputs_equal || input_1 != input_3) {\n    is_condition_met = (shifted_input_2 | input_1) == 0;\n  }\n  if (!is_condition_met) {\n    is_condition_met = (shifted_input_4 | input_3) == 0;\n  }\n  shifted_input_2_negative = (int)shifted_input_2 >> 0x15;\n  if (!is_condition_met) {\n    is_condition_met = shifted_input_2_negative == -1;\n  }\n  shifted_input_4_negative = (int)shifted_input_4 >> 0x15;\n  if (!is_condition_met) {\n    is_condition_met = shifted_input_4_negative == -1;\n  }\n  if (is_condition_met) {\n    if (shifted_input_2_negative == -1 || shifted_input_4_negative == -1) {\n      shifted_input_4 = input_4;\n      shifted_input_2 = input_3;\n      if (shifted_input_2_negative == -1) {\n        shifted_input_4 = input_2;\n        shifted_input_2 = input_1;\n      }\n      if (shifted_input_2_negative != -1 || shifted_input_4_negative != -1) {\n        input_3 = shifted_input_2;\n        input_4 = shifted_input_4;\n      }\n      is_condition_met = (shifted_input_2 | shifted_input_4 << 0xc) == 0;\n      if (is_condition_met) {\n        is_condition_met = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (is_condition_met) {\n        is_condition_met = shifted_input_4 == input_4;\n      }\n      if (!is_condition_met) {\n        shifted_input_4 = shifted_input_4 | 0x80000;\n      }\n      return CONCAT44(shifted_input_4,shifted_input_2);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((shifted_input_2 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (shifted_input_2 >> 0x15 == 0) {\n      is_condition_met = (input_1 & 0x80000000) != 0;\n      shifted_input_4 = input_2 * 2 + (uint)is_condition_met;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)is_condition_met)) {\n        shifted_input_4 = shifted_input_4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input_4,input_1 << 1);\n    }\n    if (shifted_input_2 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input_2 = shifted_input_2 >> 0x15;\n  shifted_input_4 = shifted_input_4 >> 0x15;\n  sum_difference = shifted_input_4 - shifted_input_2;\n  is_condition_met = sum_difference != 0;\n  if (shifted_input_4 < shifted_input_2) {\n    sum_difference = -sum_difference;\n  }\n  calculated_result_1 = input_1;\n  calculated_result_2 = input_2;\n  if (is_condition_met && shifted_input_2 <= shifted_input_4) {\n    shifted_input_2 = shifted_input_2 + sum_difference;\n    calculated_result_1 = input_3;\n    calculated_result_2 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < sum_difference) {\n    return CONCAT44(calculated_result_2,calculated_result_1);\n  }\n  shifted_input_4 = calculated_result_2 & 0xfffff | 0x100000;\n  if ((calculated_result_2 & 0x80000000) != 0) {\n    is_condition_met = calculated_result_1 != 0;\n    calculated_result_1 = -calculated_result_1;\n    shifted_input_4 = -shifted_input_4 - (uint)is_condition_met;\n  }\n  calculated_result_2 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    is_condition_met = input_3 != 0;\n    input_3 = -input_3;\n    calculated_result_2 = -calculated_result_2 - (uint)is_condition_met;\n  }\n  if (shifted_input_2 == sum_difference) {\n    calculated_result_2 = calculated_result_2 ^ 0x100000;\n    if (shifted_input_2 == 0) {\n      shifted_input_4 = shifted_input_4 ^ 0x100000;\n      shifted_input_2 = 1;\n    }\n    else {\n      sum_difference = sum_difference - 1;\n    }\n  }\n  temp_4 = -sum_difference + 0x20;\n  if ((int)sum_difference < 0x21) {\n    temp_3 = input_3 << (temp_4 & 0xff);\n    input_3 = input_3 >> (sum_difference & 0xff);\n    temp_1 = calculated_result_1 + input_3;\n    temp_2 = calculated_result_2 << (temp_4 & 0xff);\n    temp_4 = temp_1 + temp_2;\n    shifted_input_4 = shifted_input_4 + CARRY4(calculated_result_1,input_3) + ((int)calculated_result_2 >> (sum_difference & 0xff)) +\n            (uint)CARRY4(temp_1,temp_2);\n  }\n  else {\n    temp_3 = calculated_result_2 << (-sum_difference + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_3 = temp_3 | 2;\n    }\n    calculated_result_2 = (int)calculated_result_2 >> (sum_difference - 0x20 & 0xff);\n    temp_4 = calculated_result_1 + calculated_result_2;\n    shifted_input_4 = shifted_input_4 + ((int)calculated_result_2 >> 0x1f) + (uint)CARRY4(calculated_result_1,calculated_result_2);\n  }\n  input_2 = shifted_input_4 & 0x80000000;\n  sum_difference = shifted_input_4;\n  if ((int)shifted_input_4 < 0) {\n    is_condition_met = temp_3 == 0;\n    temp_3 = -temp_3;\n    sum_difference = -temp_4;\n    temp_4 = -(uint)!is_condition_met - temp_4;\n    sum_difference = -(uint)(is_condition_met <= sum_difference) - shifted_input_4;\n  }\n  if (0xfffff < sum_difference) {\n    calculated_result_1 = shifted_input_2 - 1;\n    if (0x1fffff < sum_difference) {\n      shifted_input_4 = sum_difference & 1;\n      sum_difference = sum_difference >> 1;\n      bVar2 = (byte)temp_4;\n      temp_4 = (uint)(shifted_input_4 != 0) << 0x1f | temp_4 >> 1;\n      temp_3 = (uint)(bVar2 & 1) << 0x1f | temp_3 >> 1;\n      calculated_result_1 = shifted_input_2;\n      if (0xffbfffff < shifted_input_2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    is_condition_met = 0x7fffffff < temp_3;\n    if (temp_3 == 0x80000000) {\n      is_condition_met = (temp_4 & 1) != 0;\n    }\n    return CONCAT44(sum_difference + calculated_result_1 * 0x100000 + (uint)CARRY4(temp_4,(uint)is_condition_met) | input_2,\n                    temp_4 + is_condition_met);\n  }\n  is_inputs_equal = (temp_3 & 0x80000000) != 0;\n  temp_3 = temp_3 << 1;\n  calculated_result_1 = temp_4 * 2;\n  is_condition_met = CARRY4(temp_4,temp_4);\n  temp_4 = temp_4 * 2 + (uint)is_inputs_equal;\n  sum_difference = sum_difference * 2 + (uint)(is_condition_met || CARRY4(calculated_result_1,(uint)is_inputs_equal));\n  calculated_result_1 = shifted_input_2 - 2;\n  if (shifted_input_2 - 1 != 0 && 0xfffff < sum_difference) goto LAB_080083e0;\n  calculated_result_2 = temp_4;\n  shifted_input_2 = sum_difference;\n  if (sum_difference == 0) {\n    calculated_result_2 = 0;\n    shifted_input_2 = temp_4;\n  }\n  shifted_input_2_negative = LZCOUNT(shifted_input_2);\n  if (sum_difference == 0) {\n    shifted_input_2_negative = shifted_input_2_negative + 0x20;\n  }\n  temp_4 = shifted_input_2_negative - 0xb;\n  is_negative = SBORROW4(temp_4,0x20);\n  sum_difference = shifted_input_2_negative - 0x2b;\n  is_condition_met = (int)sum_difference < 0;\n  is_inputs_equal = sum_difference == 0;\n  if ((int)temp_4 < 0x20) {\n    is_negative = SCARRY4(sum_difference,0xc);\n    shifted_input_2_negative = shifted_input_2_negative + -0x1f;\n    is_condition_met = shifted_input_2_negative < 0;\n    is_inputs_equal = shifted_input_2_negative == 0;\n    sum_difference = temp_4;\n    if (!is_inputs_equal && is_condition_met == is_negative) {\n      calculated_result_2 = shifted_input_2 << (temp_4 & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - shifted_input_2_negative & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_inputs_equal || is_condition_met != is_negative) {\n    temp_3 = 0x20 - sum_difference;\n  }\n  shifted_input_2 = shifted_input_2 << (sum_difference & 0xff);\n  if (is_inputs_equal || is_condition_met != is_negative) {\n    shifted_input_2 = shifted_input_2 | calculated_result_2 >> (temp_3 & 0xff);\n  }\n  if (is_inputs_equal || is_condition_met != is_negative) {\n    calculated_result_2 = calculated_result_2 << (sum_difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp_4 <= (int)calculated_result_1) {\n    return CONCAT44(shifted_input_2 + (calculated_result_1 - temp_4) * 0x100000 | input_2,calculated_result_2);\n  }\n  sum_difference = ~(calculated_result_1 - temp_4);\n  if ((int)sum_difference < 0x1f) {\n    shifted_input_2_negative = sum_difference - 0x13;\n    if (shifted_input_2_negative != 0 && shifted_input_2_negative < 0 == SCARRY4(sum_difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input_4,calculated_result_2 >> (0x20 - (0xcU - shifted_input_2_negative) & 0xff) | shifted_input_2 << (0xcU - shifted_input_2_negative & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    sum_difference = sum_difference + 1;\n    return CONCAT44(input_2 | shifted_input_2 >> (sum_difference & 0xff),\n                    calculated_result_2 >> (sum_difference & 0xff) | shifted_input_2 << (0x20 - sum_difference & 0xff));\n  }\n  return CONCAT44(shifted_input_4,shifted_input_2 >> (sum_difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_sum_080082d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar7": "shifted_input_2",
                "uVar9": "shifted_input_4",
                "bVar13": "is_inputs_equal",
                "bVar14": "is_condition_met",
                "bVar15": "is_negative",
                "iVar1": "shifted_input_4_negative",
                "iVar6": "shifted_input_2_negative",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "calculated_result_2",
                "uVar8": "calculated_result_1",
                "uVar10": "sum_difference",
                "uVar11": "temp_3",
                "uVar12": "temp_4"
            },
            "calling": [
                "FUN_08009798",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08009318",
                "FUN_08009654",
                "FUN_08001f00",
                "FUN_0800af78",
                "FUN_0800b2e8",
                "FUN_080094c0",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_08009990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "bitwise_shift_0800854c",
            "code": "\nulonglong bitwiseShift_0800854c(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint shiftAmount;\n  int bitCount;\n  uint adjustedCount;\n  uint remainder;\n  bool isNegative;\n  bool isZero;\n  bool isBorrow;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  shiftedValue = 0;\n  bitCount = LZCOUNT(inputValue);\n  adjustedCount = bitCount + 0x15;\n  isBorrow = SBORROW4(adjustedCount,0x20);\n  shiftAmount = bitCount - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (adjustedCount < 0x20) {\n    isBorrow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = bitCount + 1 == 0;\n    shiftAmount = adjustedCount;\n    if (!isZero && isBorrow == false) {\n      shiftedValue = inputValue << adjustedCount;\n      inputValue = inputValue >> (0xcU - (bitCount + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != isBorrow) {\n    remainder = 0x20 - shiftAmount;\n  }\n  inputValue = inputValue << (shiftAmount & 0xff);\n  if (isZero || isNegative != isBorrow) {\n    inputValue = inputValue | 0U >> (remainder & 0xff);\n  }\n  if (isZero || isNegative != isBorrow) {\n    shiftedValue = 0 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if (adjustedCount < 0x433) {\n    return CONCAT44(inputValue + (0x432 - adjustedCount) * 0x100000,shiftedValue);\n  }\n  shiftAmount = ~(0x432 - adjustedCount);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(inputValue >> (shiftAmount - 0x1f & 0xff));\n  }\n  bitCount = shiftAmount - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(inputValue >> (shiftAmount & 0xff),\n                    shiftedValue >> (shiftAmount & 0xff) | inputValue << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(shiftedValue >> (0x20 - (0xcU - bitCount) & 0xff) | inputValue << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "bitwise_shift_0800854c",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount",
                "iVar3": "bitCount",
                "uVar4": "adjustedCount",
                "in_r12": "remainder",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isBorrow"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "convert_to_binary_0800856c",
            "code": "\nulonglong convertToBinary_0800856c(uint n)\n\n{\n  uint countOnes;\n  uint absN;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedValue;\n  uint signMask;\n  uint remainingZeros;\n  bool leadingZerosLessThanShiftAmount;\n  bool leadingZerosEqualShiftAmount;\n  bool leadingZerosGreaterThanShiftAmount;\n  \n  if (n == 0) {\n    return 0;\n  }\n  signMask = n & 0x80000000;\n  absN = n;\n  if ((int)signMask < 0) {\n    absN = -n;\n  }\n  countOnes = 0;\n  leadingZeros = LZCOUNT(absN);\n  shiftedValue = leadingZeros + 0x15;\n  leadingZerosGreaterThanShiftAmount = signedBorrow4(shiftedValue,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  leadingZerosLessThanShiftAmount = (int)shiftAmount < 0;\n  leadingZerosEqualShiftAmount = shiftAmount == 0;\n  if (shiftedValue < 0x20) {\n    leadingZerosGreaterThanShiftAmount = signedCarry4(shiftAmount,0xc);\n    leadingZerosLessThanShiftAmount = false;\n    leadingZerosEqualShiftAmount = leadingZeros + 1 == 0;\n    shiftAmount = shiftedValue;\n    if (!leadingZerosEqualShiftAmount && leadingZerosGreaterThanShiftAmount == false) {\n      countOnes = absN << shiftedValue;\n      absN = absN >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto label08008458;\n    }\n  }\n  if (leadingZerosEqualShiftAmount || leadingZerosLessThanShiftAmount != leadingZerosGreaterThanShiftAmount) {\n    remainingZeros = 0x20 - shiftAmount;\n  }\n  absN = absN << (shiftAmount & 0xff);\n  if (leadingZerosEqualShiftAmount || leadingZerosLessThanShiftAmount != leadingZerosGreaterThanShiftAmount) {\n    absN = absN | 0U >> (remainingZeros & 0xff);\n  }\n  if (leadingZerosEqualShiftAmount || leadingZerosLessThanShiftAmount != leadingZerosGreaterThanShiftAmount) {\n    countOnes = 0 << (shiftAmount & 0xff);\n  }\nlabel08008458:\n  if (shiftedValue < 0x433) {\n    return CONCAT44(absN + (0x432 - shiftedValue) * 0x100000 | signMask,countOnes);\n  }\n  shiftAmount = ~(0x432 - shiftedValue);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(n,absN >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != signedCarry4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signMask | absN >> (shiftAmount & 0xff),\n                    countOnes >> (shiftAmount & 0xff) | absN << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(n,countOnes >> (0x20 - (0xcU - leadingZeros) & 0xff) | absN << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "convert_to_binary_0800856c",
                "param_1": "n",
                "uVar1": "countOnes",
                "uVar2": "absN",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedValue",
                "uVar6": "signMask",
                "in_r12": "remainingZeros",
                "bVar7": "leadingZerosLessThanShiftAmount",
                "bVar8": "leadingZerosEqualShiftAmount",
                "bVar9": "leadingZerosGreaterThanShiftAmount",
                "SCARRY4": "signedCarry4",
                "SBORROW4": "signedBorrow4",
                "LAB_08008458": "label08008458"
            },
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "decode_and_modify_value_08008590",
            "code": "\nulonglong decode_and_modify_value_08008590(uint input_value,undefined4 parameter2,undefined4 parameter3,uint parameter4)\n\n{\n  uint top_bit;\n  uint modified_input;\n  uint output_high_bits;\n  uint shifted_bits;\n  uint doubled_input;\n  int iVar6;\n  uint shift_amount;\n  uint remaining_shift;\n  bool is_shift_negative;\n  bool is_param4_zero;\n  bool is_shift_negative_overflow;\n  \n  doubled_input = input_value << 1;\n  is_param4_zero = doubled_input == 0;\n  top_bit = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  shifted_bits = (uint)((int)doubled_input >> 3) >> 1;\n  output_high_bits = top_bit | shifted_bits;\n  input_value = input_value << 0x1d;\n  if (!is_param4_zero) {\n    parameter4 = doubled_input & 0xff000000;\n    is_param4_zero = parameter4 == 0;\n  }\n  if (!is_param4_zero) {\n    is_param4_zero = parameter4 == 0xff000000;\n  }\n  if (!is_param4_zero) {\n    return CONCAT44(output_high_bits,input_value) ^ 0x3800000000000000;\n  }\n  if ((doubled_input & 0xffffff) == 0) {\n    return CONCAT44(output_high_bits,input_value);\n  }\n  if (parameter4 == 0xff000000) {\n    return CONCAT44(output_high_bits,input_value) | 0x8000000000000;\n  }\n  modified_input = input_value;\n  doubled_input = shifted_bits;\n  if (shifted_bits == 0) {\n    modified_input = 0;\n    doubled_input = input_value;\n  }\n  iVar6 = LZCOUNT(doubled_input);\n  if (shifted_bits == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  shift_amount = iVar6 - 0xb;\n  is_shift_negative_overflow = SBORROW4(shift_amount,0x20);\n  shifted_bits = iVar6 - 0x2b;\n  is_param4_zero = (int)shifted_bits < 0;\n  is_shift_negative = shifted_bits == 0;\n  if ((int)shift_amount < 0x20) {\n    is_shift_negative_overflow = SCARRY4(shifted_bits,0xc);\n    iVar6 = iVar6 + -0x1f;\n    is_param4_zero = iVar6 < 0;\n    is_shift_negative = iVar6 == 0;\n    shifted_bits = shift_amount;\n    if (!is_shift_negative && is_param4_zero == is_shift_negative_overflow) {\n      modified_input = doubled_input << (shift_amount & 0xff);\n      doubled_input = doubled_input >> (0xcU - iVar6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_shift_negative || is_param4_zero != is_shift_negative_overflow) {\n    remaining_shift = 0x20 - shifted_bits;\n  }\n  doubled_input = doubled_input << (shifted_bits & 0xff);\n  if (is_shift_negative || is_param4_zero != is_shift_negative_overflow) {\n    doubled_input = doubled_input | modified_input >> (remaining_shift & 0xff);\n  }\n  if (is_shift_negative || is_param4_zero != is_shift_negative_overflow) {\n    modified_input = modified_input << (shifted_bits & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(doubled_input + (0x380 - shift_amount) * 0x100000 | top_bit,modified_input);\n  }\n  shifted_bits = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_bits) {\n    return CONCAT44(output_high_bits,doubled_input >> (shifted_bits - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  iVar6 = shifted_bits - 0x13;\n  if (iVar6 == 0 || iVar6 < 0 != SCARRY4(shifted_bits - 0x1f,0xc)) {\n    shifted_bits = shifted_bits + 1;\n    return CONCAT44(top_bit | doubled_input >> (shifted_bits & 0xff),\n                    modified_input >> (shifted_bits & 0xff) | doubled_input << (0x20 - shifted_bits & 0xff));\n  }\n  return CONCAT44(output_high_bits,modified_input >> (0x20 - (0xcU - iVar6) & 0xff) | doubled_input << (0xcU - iVar6 & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "decode_and_modify_value_08008590",
                "param_1": "input_value",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "top_bit",
                "uVar2": "modified_input",
                "uVar3": "output_high_bits",
                "uVar4": "shifted_bits",
                "uVar5": "doubled_input",
                "uVar7": "shift_amount",
                "bVar8": "is_shift_negative",
                "bVar9": "is_param4_zero",
                "bVar10": "is_shift_negative_overflow",
                "in_r12": "remaining_shift"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002638",
                "FUN_080005b4",
                "FUN_08002408",
                "FUN_08004e30",
                "FUN_080046d0",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08004940",
                "FUN_0800056c",
                "FUN_080044e8",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_float_08008640",
            "code": "\nulonglong calculateFloat_08008640(undefined4 flags,uint exponent,uint mantissaHigh,uint mantissaLow)\n\n{\n  ulonglong multiplicationResult1;\n  longlong multiplicationResult2;\n  uint exponentResult;\n  uint exponentBits;\n  int sumExponents;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool isZero;\n  bool isNegative;\n  bool isNegativeResult;\n  ulonglong concatenatedVars;\n  \n  concatenatedVars = CONCAT44(exponent,flags);\n  temp3 = 0x7ff;\n  exponentBits = exponent >> 0x14 & 0x7ff;\n  isZero = exponentBits == 0;\n  if (!isZero) {\n    temp2 = mantissaLow >> 0x14 & 0x7ff;\n    isZero = temp2 == 0;\n  }\n  if (!isZero) {\n    isZero = exponentBits == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = temp2 == 0x7ff;\n  }\n  if (isZero) {\n    concatenatedVars = FUN_0800881c();\n  }\n  exponentResult = (uint)(concatenatedVars >> 0x20);\n  sumExponents = exponentBits + temp2;\n  exponentBits = exponentResult ^ mantissaLow;\n  exponentResult = exponentResult & ~(temp3 << 0x15);\n  mantissaLow = mantissaLow & ~(temp3 << 0x15);\n  isZero = ((uint)concatenatedVars | exponentResult << 0xc) == 0;\n  if (!isZero) {\n    isZero = (mantissaHigh | mantissaLow << 0xc) == 0;\n  }\n  exponentResult = exponentResult | 0x100000;\n  mantissaLow = mantissaLow | 0x100000;\n  if (isZero) {\n    mantissaHigh = (uint)concatenatedVars | mantissaHigh;\n    mantissaLow = (exponentBits & 0x80000000 | exponentResult) ^ mantissaLow;\n    exponentBits = temp3 >> 1;\n    isNegativeResult = SBORROW4(sumExponents,exponentBits);\n    temp1 = sumExponents - exponentBits;\n    isZero = temp1 == 0;\n    exponentResult = temp1;\n    if (!isZero && (int)exponentBits <= sumExponents) {\n      isNegativeResult = SBORROW4(temp3,temp1);\n      exponentResult = temp3 - temp1;\n      isZero = temp3 == temp1;\n    }\n    if (!isZero && (int)exponentResult < 0 == isNegativeResult) {\n      mantissaLow = mantissaLow | temp1 * 0x100000;\n    }\n    if (!isZero && (int)exponentResult < 0 == isNegativeResult) {\n      return CONCAT44(mantissaLow,mantissaHigh);\n    }\n    mantissaLow = mantissaLow | 0x100000;\n    temp3 = 0;\n    isNegativeResult = SBORROW4(temp1,1);\n    temp1 = temp1 - 1;\n    isZero = temp1 == 0;\n    exponentBits = temp1;\n  }\n  else {\n    multiplicationResult1 = (concatenatedVars & 0xffffffff) * (ulonglong)mantissaHigh;\n    concatenatedVars = (concatenatedVars & 0xffffffff) * (ulonglong)mantissaLow +\n             (ulonglong)exponentResult * (ulonglong)mantissaHigh + (multiplicationResult1 >> 0x20);\n    temp4 = (uint)concatenatedVars;\n    multiplicationResult2 = (ulonglong)exponentResult * (ulonglong)mantissaLow + (concatenatedVars >> 0x20);\n    temp3 = (uint)multiplicationResult2;\n    exponentResult = (uint)((ulonglong)multiplicationResult2 >> 0x20);\n    if ((int)multiplicationResult1 != 0) {\n      temp4 = temp4 | 1;\n    }\n    temp1 = (sumExponents + -0x3ff) - (uint)(exponentResult < 0x200);\n    if (exponentResult < 0x200) {\n      isZero = (temp4 & 0x80000000) != 0;\n      temp4 = temp4 << 1;\n      multiplicationResult2 = CONCAT44(exponentResult * 2 + (uint)(CARRY4(temp3,temp3) || CARRY4(temp3 * 2,(uint)isZero)),\n                       temp3 * 2 + (uint)isZero);\n    }\n    mantissaLow = exponentBits & 0x80000000 | (int)((ulonglong)multiplicationResult2 >> 0x20) << 0xb | (uint)multiplicationResult2 >> 0x15;\n    mantissaHigh = (uint)multiplicationResult2 << 0xb | temp4 >> 0x15;\n    temp3 = temp4 * 0x800;\n    isNegative = 0xfc < temp1;\n    isNegativeResult = SBORROW4(temp1,0xfd);\n    exponentResult = temp1 - 0xfd;\n    isZero = exponentResult == 0;\n    exponentBits = exponentResult;\n    if (isNegative && !isZero) {\n      isNegative = 0x6ff < exponentResult;\n      isNegativeResult = SBORROW4(exponentResult,0x700);\n      exponentBits = temp1 - 0x7fd;\n      isZero = exponentResult == 0x700;\n    }\n    if (!isNegative || isZero) {\n      isZero = 0x7fffffff < temp3;\n      if (temp3 == 0x80000000) {\n        isZero = (temp4 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(mantissaLow + temp1 * 0x100000 + (uint)CARRY4(mantissaHigh,(uint)isZero),mantissaHigh + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)exponentBits < 0 == isNegativeResult) {\n    return (ulonglong)(mantissaLow & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(temp1,0x36);\n  isZero = (int)(temp1 + 0x36) < 0;\n  isNegativeResult = temp1 == 0xffffffca;\n  if (isNegativeResult || isZero != isNegative) {\n    mantissaHigh = 0;\n  }\n  if (isNegativeResult || isZero != isNegative) {\n    mantissaLow = mantissaLow & 0x80000000;\n  }\n  if (isNegativeResult || isZero != isNegative) {\n    return CONCAT44(mantissaLow,mantissaHigh);\n  }\n  exponentBits = -temp1;\n  exponentResult = exponentBits - 0x20;\n  if (0x1f < (int)exponentBits) {\n    temp1 = mantissaHigh >> (exponentResult & 0xff) | mantissaLow << (0x20 - exponentResult & 0xff);\n    exponentBits = (mantissaLow >> (exponentResult & 0xff) & ~((mantissaLow & 0x80000000) >> (exponentResult & 0xff))) -\n            ((int)temp1 >> 0x1f);\n    if ((temp3 | mantissaHigh << (0x20 - exponentResult & 0xff) | temp1 << 1) == 0) {\n      exponentBits = exponentBits & ~(temp1 >> 0x1f);\n    }\n    return CONCAT44(mantissaLow,exponentBits) & 0x80000000ffffffff;\n  }\n  sumExponents = exponentBits - 0x14;\n  if (sumExponents == 0 || sumExponents < 0 != SCARRY4(exponentResult,0xc)) {\n    temp4 = mantissaHigh << (temp1 + 0x20 & 0xff);\n    exponentResult = mantissaHigh >> (exponentBits & 0xff) | mantissaLow << (temp1 + 0x20 & 0xff);\n    temp1 = exponentResult + -((int)temp4 >> 0x1f);\n    if ((temp3 | temp4 << 1) == 0) {\n      temp1 = temp1 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44((mantissaLow & 0x80000000) +\n                    ((mantissaLow & 0x7fffffff) >> (exponentBits & 0xff)) +\n                    (uint)CARRY4(exponentResult,-((int)temp4 >> 0x1f)),temp1);\n  }\n  exponentBits = 0xc - sumExponents;\n  temp1 = mantissaHigh << (exponentBits & 0xff);\n  exponentBits = mantissaHigh >> (0x20 - exponentBits & 0xff) | mantissaLow << (exponentBits & 0xff);\n  exponentResult = exponentBits + -((int)temp1 >> 0x1f);\n  if ((temp3 | temp1 << 1) == 0) {\n    exponentResult = exponentResult & ~(temp1 >> 0x1f);\n  }\n  return CONCAT44((mantissaLow & 0x80000000) + (uint)CARRY4(exponentBits,-((int)temp1 >> 0x1f)),exponentResult);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_float_08008640",
                "param_1": "flags",
                "param_2": "exponent",
                "param_3": "mantissaHigh",
                "param_4": "mantissaLow",
                "uVar1": "multiplicationResult1",
                "lVar2": "multiplicationResult2",
                "uVar3": "exponentResult",
                "uVar4": "exponentBits",
                "iVar5": "sumExponents",
                "uVar6": "temp1",
                "unaff_r5": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "bVar9": "isZero",
                "bVar10": "isNegative",
                "bVar11": "isNegativeResult",
                "uVar12": "concatenatedVars"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_080046d0",
                "FUN_08001f00",
                "FUN_0800af78",
                "FUN_0800b2e8",
                "FUN_08004940",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800056c",
                "FUN_080044e8",
                "FUN_08009b24",
                "FUN_08001994",
                "FUN_0800adf0",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_shifted_bitwise_0800881c",
            "code": "\nulonglong calculate_shifted_bitwise_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  bool is_zero;\n  \n  temp_3 = temp_5 & input_4 >> 0x14;\n  if (temp_2 != temp_5 && temp_3 != temp_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_2 == 0) {\n      temp_4 = input_2 & 0x80000000;\n      do {\n        temp_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_4;\n      if (temp_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_4 = input_2;\n  if (((!is_zero) && ((temp_2 != temp_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_3 != temp_5 || (input_1 = input_3, temp_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_shifted_bitwise_0800881c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "temp_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_float_08008894",
            "code": "\nulonglong calculateFloat_08008894(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint result;\n  uint temp;\n  uint exponent;\n  uint value;\n  uint bitfield;\n  uint shift;\n  uint sign;\n  int difference;\n  uint value1;\n  uint unaff_r5;\n  uint value2;\n  uint mantissa;\n  uint diff;\n  uint bit;\n  bool zero;\n  bool equal;\n  bool carry;\n  undefined8 calcResult;\n  \n  calcResult = CONCAT44(param_2,param_1);\n  bit = 0x7ff;\n  sign = param_2 >> 0x14 & 0x7ff;\n  zero = sign == 0;\n  if (!zero) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    zero = unaff_r5 == 0;\n  }\n  if (!zero) {\n    zero = sign == 0x7ff;\n  }\n  if (!zero) {\n    zero = unaff_r5 == 0x7ff;\n  }\n  if (zero) {\n    calcResult = FUN_08008a02();\n  }\n  value1 = (uint)((ulonglong)calcResult >> 0x20);\n  mantissa = (uint)calcResult;\n  difference = sign - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    sign = (value1 ^ param_4) & 0x80000000 | value1 & 0xfffff;\n    carry = SCARRY4(difference,bit >> 1);\n    value1 = difference + (bit >> 1);\n    zero = (int)value1 < 0;\n    equal = value1 == 0;\n    if (!equal && zero == carry) {\n      carry = SBORROW4(bit,value1);\n      zero = (int)(bit - value1) < 0;\n      equal = bit == value1;\n    }\n    if (!equal && zero == carry) {\n      sign = sign | value1 * 0x100000;\n    }\n    if (!equal && zero == carry) {\n      return CONCAT44(sign,mantissa);\n    }\n    sign = sign | 0x100000;\n    bit = 0;\n    equal = SBORROW4(value1,1);\n    value1 = value1 - 1;\n    zero = value1 == 0;\n    exponent = value1;\n  }\n  else {\n    exponent = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    bit = param_3 << 8;\n    value2 = (value1 << 0xc) >> 4 | 0x10000000 | mantissa >> 0x18;\n    mantissa = mantissa * 0x100;\n    sign = (value1 ^ param_4) & 0x80000000;\n    zero = exponent <= value2;\n    if (value2 == exponent) {\n      zero = bit <= mantissa;\n    }\n    difference = difference + (uint)zero;\n    value1 = difference + 0x3fd;\n    if (zero == false) {\n      exponent = exponent >> 1;\n      bit = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | bit >> 1;\n    }\n    diff = mantissa - bit;\n    value2 = (value2 - exponent) - (uint)(mantissa < bit);\n    value = exponent >> 1;\n    result = (uint)((exponent & 1) != 0) << 0x1f | bit >> 1;\n    mantissa = 0x100000;\n    exponent = 0x80000;\n    while( true ) {\n      zero = result <= diff;\n      if (value < value2 || value2 - value < (uint)zero) {\n        diff = diff - result;\n        mantissa = mantissa | exponent;\n        value2 = (value2 - value) - (uint)!zero;\n      }\n      bitfield = value >> 1;\n      result = (uint)((value & 1) != 0) << 0x1f | result >> 1;\n      equal = result <= diff;\n      zero = value2 - bitfield < (uint)equal;\n      bit = value2;\n      if (bitfield < value2 || zero) {\n        diff = diff - result;\n        bit = (value2 - bitfield) - (uint)!equal;\n      }\n      if (bitfield < value2 || zero) {\n        mantissa = mantissa | exponent >> 1;\n      }\n      value2 = value >> 2;\n      temp = (uint)((bitfield & 1) != 0) << 0x1f | result >> 1;\n      equal = temp <= diff;\n      zero = bit - value2 < (uint)equal;\n      bitfield = bit;\n      if (value2 < bit || zero) {\n        diff = diff - temp;\n        bitfield = (bit - value2) - (uint)!equal;\n      }\n      if (value2 < bit || zero) {\n        mantissa = mantissa | exponent >> 2;\n      }\n      shift = value >> 3;\n      result = (uint)((value2 & 1) != 0) << 0x1f | temp >> 1;\n      equal = result <= diff;\n      zero = bitfield - shift < (uint)equal;\n      value2 = bitfield;\n      if (shift < bitfield || zero) {\n        diff = diff - result;\n        value2 = (bitfield - shift) - (uint)!equal;\n      }\n      if (shift < bitfield || zero) {\n        mantissa = mantissa | exponent >> 3;\n      }\n      bit = value2 | diff;\n      if (bit == 0) break;\n      value2 = value2 << 4 | diff >> 0x1c;\n      diff = diff << 4;\n      value = value & 0xfffffff8 | result >> 0x1d;\n      result = (temp >> 1) << 3;\n      exponent = exponent >> 4;\n      if (exponent == 0) {\n        shift = value;\n        if ((sign & 0x100000) != 0) goto LAB_080089b2;\n        sign = sign | mantissa;\n        mantissa = 0;\n        exponent = 0x80000000;\n      }\n    }\n    if ((sign & 0x100000) == 0) {\n      sign = sign | mantissa;\n      mantissa = 0;\n    }\nLAB_080089b2:\n    carry = 0xfc < value1;\n    equal = SBORROW4(value1,0xfd);\n    value = difference + 0x300;\n    zero = value == 0;\n    exponent = value;\n    if (carry && !zero) {\n      carry = 0x6ff < value;\n      equal = SBORROW4(value,0x700);\n      exponent = difference - 0x400;\n      zero = value == 0x700;\n    }\n    if (!carry || zero) {\n      zero = shift <= value2;\n      if (value2 == shift) {\n        zero = result <= diff;\n      }\n      if (value2 == shift && diff == result) {\n        zero = (mantissa & 1) != 0;\n      }\n      return CONCAT44(sign + value1 * 0x100000 + (uint)CARRY4(mantissa,(uint)zero),mantissa + zero);\n    }\n  }\n  if (!zero && (int)exponent < 0 == equal) {\n    return (ulonglong)(sign & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carry = SCARRY4(value1,0x36);\n  zero = (int)(value1 + 0x36) < 0;\n  equal = value1 == 0xffffffca;\n  if (equal || zero != carry) {\n    mantissa = 0;\n  }\n  if (equal || zero != carry) {\n    sign = sign & 0x80000000;\n  }\n  if (equal || zero != carry) {\n    return CONCAT44(sign,mantissa);\n  }\n  exponent = -value1;\n  value2 = exponent - 0x20;\n  if (0x1f < (int)exponent) {\n    exponent = mantissa >> (value2 & 0xff) | sign << (0x20 - value2 & 0xff);\n    value1 = (sign >> (value2 & 0xff) & ~((sign & 0x80000000) >> (value2 & 0xff))) -\n            ((int)exponent >> 0x1f);\n    if ((bit | mantissa << (0x20 - value2 & 0xff) | exponent << 1) == 0) {\n      value1 = value1 & ~(exponent >> 0x1f);\n    }\n    return CONCAT44(sign,value1) & 0x80000000ffffffff;\n  }\n  difference = exponent - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(value2,0xc)) {\n    value1 = 0xc - difference;\n    exponent = mantissa << (value1 & 0xff);\n    mantissa = mantissa >> (0x20 - value1 & 0xff) | sign << (value1 & 0xff);\n    value1 = mantissa + -((int)exponent >> 0x1f);\n    if ((bit | exponent << 1) == 0) {\n      value1 = value1 & ~(exponent >> 0x1f);\n    }\n    return CONCAT44((sign & 0x80000000) + (uint)CARRY4(mantissa,-((int)exponent >> 0x1f)),value1);\n  }\n  value2 = mantissa << (value1 + 0x20 & 0xff);\n  mantissa = mantissa >> (exponent & 0xff) | sign << (value1 + 0x20 & 0xff);\n  value1 = mantissa + -((int)value2 >> 0x1f);\n  if ((bit | value2 << 1) == 0) {\n    value1 = value1 & ~(value2 >> 0x1f);\n  }\n  return CONCAT44((sign & 0x80000000) +\n                  ((sign & 0x7fffffff) >> (exponent & 0xff)) +\n                  (uint)CARRY4(mantissa,-((int)value2 >> 0x1f)),value1);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_float_08008894",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "exponent",
                "uVar4": "value",
                "uVar5": "bitfield",
                "uVar6": "shift",
                "uVar7": "sign",
                "iVar8": "difference",
                "uVar9": "value1",
                "uVar10": "value2",
                "uVar11": "mantissa",
                "uVar12": "diff",
                "uVar13": "bit",
                "bVar14": "zero",
                "bVar15": "equal",
                "bVar16": "carry",
                "uVar17": "calcResult"
            },
            "calling": [
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_0800a1bc",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_0800af78",
                "FUN_08009990"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "extract_float_bits_08008a02",
            "code": "\nulonglong extract_float_bits_08008a02(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint bit1;\n  uint unaff_value;\n  uint masked_value;\n  uint bit3;\n  uint constant;\n  bool isZero;\n  \n  masked_value = constant & value4 >> 0x14;\n  bit3 = value2;\n  if (unaff_value != constant || masked_value != constant) {\n    if (unaff_value == constant) {\n      if (((value1 | value2 << 0xc) == 0) && (value1 = value3, bit3 = value4, masked_value != constant)\n         ) {\nLAB_08008874:\n        return (ulonglong)((value2 ^ value4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (masked_value == constant) {\n      value1 = value3;\n      bit3 = value4;\n      if ((value3 | value4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((value2 ^ value4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (value1 | value2 << 1) == 0;\n      if (!isZero) {\n        isZero = (value3 | value4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (unaff_value == 0) {\n          bit3 = value2 & 0x80000000;\n          do {\n            bit1 = value1 & 0x80000000;\n            value1 = value1 << 1;\n            value2 = value2 * 2 + (uint)(bit1 != 0);\n          } while ((value2 & 0x100000) == 0);\n          value2 = value2 | bit3;\n          if (masked_value != 0) {\n            return CONCAT44(value2,value1);\n          }\n        }\n        do {\n          bit3 = value3 & 0x80000000;\n          value3 = value3 << 1;\n          value4 = value4 * 2 + (uint)(bit3 != 0);\n        } while ((value4 & 0x100000) == 0);\n        return CONCAT44(value2,value1);\n      }\n      if ((value1 | value2 << 1) != 0) goto LAB_08008874;\n      if ((value3 | value4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit3,value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "extract_float_bits_08008a02",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "bit1",
                "unaff_r4": "unaff_value",
                "uVar2": "masked_value",
                "uVar3": "bit3",
                "in_r12": "constant",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_equality_and_comparison_08008a74",
            "code": "\nuint checkEqualityAndComparison_08008a74(uint comparisonValue1,uint comparisonValue2,uint comparisonValue3,uint comparisonValue4)\n\n{\n  uint comparisonResult;\n  bool isValueZero;\n  bool isComparisonTrue;\n  \n  if (((int)(comparisonValue2 << 1) >> 0x15 == -1 || (int)(comparisonValue4 << 1) >> 0x15 == -1) &&\n     ((((int)(comparisonValue2 << 1) >> 0x15 == -1 && ((comparisonValue1 | comparisonValue2 << 0xc) != 0)) ||\n      (((int)(comparisonValue4 << 1) >> 0x15 == -1 && ((comparisonValue3 | comparisonValue4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isValueZero = (comparisonValue1 | comparisonValue2 << 1) == 0;\n  if (isValueZero) {\n    isValueZero = (comparisonValue3 | comparisonValue4 << 1) == 0;\n  }\n  if (!isValueZero) {\n    isValueZero = comparisonValue2 == comparisonValue4;\n  }\n  if (isValueZero) {\n    isValueZero = comparisonValue1 == comparisonValue3;\n  }\n  if (!isValueZero) {\n    comparisonResult = comparisonValue2 ^ comparisonValue4;\n    isValueZero = comparisonResult == 0;\n    if (-1 < (int)comparisonResult) {\n      isValueZero = comparisonValue2 == comparisonValue4;\n    }\n    isComparisonTrue = -1 < (int)comparisonResult && comparisonValue4 <= comparisonValue2;\n    if (isValueZero) {\n      isComparisonTrue = comparisonValue3 <= comparisonValue1;\n    }\n    comparisonValue4 = (int)comparisonValue4 >> 0x1f;\n    if (!isComparisonTrue) {\n      comparisonValue4 = ~comparisonValue4;\n    }\n    return comparisonValue4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_equality_and_comparison_08008a74",
                "param_1": "comparisonValue1",
                "param_2": "comparisonValue2",
                "param_3": "comparisonValue3",
                "param_4": "comparisonValue4",
                "bVar2": "isValueZero",
                "bVar3": "isComparisonTrue",
                "uVar1": "comparisonResult"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "initialize_function_08008af0",
            "code": "\nvoid initializeFunction_08008af0(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  FUN_08008b00(inputParam3,inputParam4,inputParam1,inputParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "initialize_function_08008af0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4"
            },
            "calling": [
                "FUN_08008b4c",
                "FUN_08008b60"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "initialize_08008b00",
            "code": "\nundefined4 initialize_08008b00(undefined4 input)\n\n{\n  FUN_08008a74();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "initialize_08008b00",
                "param_1": "input"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "is_input_zero_08008b10",
            "code": "\nbool isInputZero_08008b10(void)\n\n{\n  char inputCharacter;\n  \n  FUN_08008b00();\n  return inputCharacter != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "is_input_zero_08008b10",
                "in_ZR": "inputCharacter"
            },
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_input_null_08008b24",
            "code": "\nbool is_input_null_08008b24(void)\n\n{\n  char input_character;\n  \n  FUN_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_input_null_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_08009b24"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_conditions_08008b4c",
            "code": "\nbool checkConditions_08008b4c(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  FUN_08008af0();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_conditions_08008b4c",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_if_cy_null_08008b60",
            "code": "\nbool check_if_cy_null_08008b60(void)\n\n{\n  char input_char;\n  \n  FUN_08008af0();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_if_cy_null_08008b60",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_08009318",
                "FUN_0800af78"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_parameters_08008b74",
            "code": "\nundefined4 check_parameters_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_shifted_value_08008ba0",
            "code": "\nuint calculate_shifted_value_08008ba0(uint input_parameter,uint multiplier)\n\n{\n  uint shifted_result;\n  int temporary_variable;\n  uint subtracted_value;\n  \n  temporary_variable = multiplier * 2 + 0x200000;\n  if (multiplier * 2 < 0xffe00000) {\n    if (-1 < temporary_variable) {\n      return 0;\n    }\n    shifted_result = temporary_variable >> 0x15;\n    subtracted_value = -shifted_result - 0x3e1;\n    if (shifted_result < 0xfffffc20 && subtracted_value != 0) {\n      shifted_result = (multiplier << 0xb | 0x80000000 | input_parameter >> 0x15) >> (subtracted_value & 0xff);\n      if ((multiplier & 0x80000000) != 0) {\n        shifted_result = -shifted_result;\n      }\n      return shifted_result;\n    }\n  }\n  else if ((input_parameter | multiplier << 0xc) != 0) {\n    return 0;\n  }\n  multiplier = multiplier & 0x80000000;\n  if (multiplier == 0) {\n    multiplier = 0x7fffffff;\n  }\n  return multiplier;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_shifted_value_08008ba0",
                "param_1": "input_parameter",
                "param_2": "multiplier",
                "uVar1": "shifted_result",
                "iVar2": "temporary_variable",
                "uVar3": "subtracted_value"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_080005b4",
                "FUN_0800adf0",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "check_param_and_shift_bits_08008bf0",
            "code": "\nuint check_param_and_shift_bits_08008bf0(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint shifted_amount;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shifted_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shifted_amount) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shifted_amount & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "check_param_and_shift_bits_08008bf0",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "shifted_amount"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003004",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001994",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_08008c30",
            "code": "\nuint calculateFloat_08008c30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan;\n  \n  temp1 = input2 * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08004940",
                "FUN_0800056c",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_exponent_08008cd8",
            "code": "\nuint calculateExponent_08008cd8(uint input,uint mask,undefined4 identifier,uint shiftCount)\n\n{\n  int msbInput;\n  int msbDouble;\n  uint inputXorMask;\n  uint doubleXorMask;\n  uint shiftedInput;\n  uint result;\n  uint difference;\n  bool isEqual;\n  \n  inputXorMask = mask ^ 0x80000000;\n  shiftedInput = input << 1;\n  isEqual = shiftedInput == 0;\n  if (!isEqual) {\n    shiftCount = mask << 1;\n    isEqual = shiftCount == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedInput == shiftCount;\n  }\n  msbInput = (int)shiftedInput >> 0x18;\n  if (!isEqual) {\n    isEqual = msbInput == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)shiftCount >> 0x18 == -1;\n  }\n  if (isEqual) {\n    msbDouble = (int)(mask << 1) >> 0x18;\n    if (msbInput == -1 || msbDouble == -1) {\n      shiftedInput = inputXorMask;\n      if (msbInput == -1) {\n        shiftedInput = input;\n      }\n      if (msbInput != -1 || msbDouble != -1) {\n        inputXorMask = shiftedInput;\n      }\n      isEqual = (shiftedInput & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (inputXorMask & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedInput == inputXorMask;\n      }\n      if (!isEqual) {\n        shiftedInput = shiftedInput | 0x400000;\n      }\n      return shiftedInput;\n    }\n    if (((input ^ inputXorMask) & 0x7fffffff) != 0) {\n      if (shiftedInput == 0) {\n        input = inputXorMask;\n      }\n      return input;\n    }\n    if (input != inputXorMask) {\n      return 0;\n    }\n    if ((shiftedInput & 0xff000000) == 0) {\n      inputXorMask = input << 1;\n      if ((input & 0x80000000) != 0) {\n        inputXorMask = inputXorMask | 0x80000000;\n      }\n      return inputXorMask;\n    }\n    if (shiftedInput < 0xfe000000) {\n      return input + 0x800000;\n    }\n    input = input & 0x80000000;\nLAB_08008e12:\n    return input | 0x7f800000;\n  }\n  shiftedInput = shiftedInput >> 0x18;\n  shiftCount = shiftCount >> 0x18;\n  difference = shiftCount - shiftedInput;\n  isEqual = difference != 0;\n  result = shiftedInput;\n  if (isEqual && shiftedInput <= shiftCount) {\n    result = shiftedInput + difference;\n  }\n  if (isEqual && shiftedInput <= shiftCount) {\n    inputXorMask = inputXorMask ^ input;\n  }\n  if (isEqual && shiftedInput <= shiftCount) {\n    input = input ^ inputXorMask;\n  }\n  if (isEqual && shiftedInput <= shiftCount) {\n    inputXorMask = inputXorMask ^ input;\n  }\n  if (shiftCount < shiftedInput) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input;\n  }\n  shiftedInput = input & 0xffffff | 0x800000;\n  if ((input & 0x80000000) != 0) {\n    shiftedInput = -shiftedInput;\n  }\n  doubleXorMask = inputXorMask & 0xffffff | 0x800000;\n  if ((inputXorMask & 0x80000000) != 0) {\n    doubleXorMask = -doubleXorMask;\n  }\n  if (result == difference) {\n    doubleXorMask = doubleXorMask ^ 0x800000;\n    if (result == 0) {\n      shiftedInput = shiftedInput ^ 0x800000;\n      result = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInput = shiftedInput + ((int)doubleXorMask >> (difference & 0xff));\n  doubleXorMask = doubleXorMask << (0x20 - difference & 0xff);\n  input = shiftedInput & 0x80000000;\n  if ((int)shiftedInput < 0) {\n    isEqual = doubleXorMask != 0;\n    doubleXorMask = -doubleXorMask;\n    shiftedInput = -shiftedInput - (uint)isEqual;\n  }\n  if (shiftedInput < 0x800000) {\n    inputXorMask = doubleXorMask & 0x80000000;\n    doubleXorMask = doubleXorMask << 1;\n    shiftedInput = shiftedInput * 2 + (uint)(inputXorMask != 0);\n    inputXorMask = result - 2;\n    if (result - 1 == 0 || shiftedInput < 0x800000) {\n      difference = LZCOUNT(shiftedInput) - 8;\n      shiftedInput = shiftedInput << (difference & 0xff);\n      if ((int)inputXorMask < (int)difference) {\n        shiftedInput = shiftedInput >> (-(inputXorMask - difference) & 0xff);\n      }\n      else {\n        shiftedInput = shiftedInput + (inputXorMask - difference) * 0x800000;\n      }\n      return shiftedInput | input;\n    }\n  }\n  else {\n    inputXorMask = result - 1;\n    if (0xffffff < shiftedInput) {\n      inputXorMask = shiftedInput & 1;\n      shiftedInput = shiftedInput >> 1;\n      doubleXorMask = (uint)(inputXorMask != 0) << 0x1f | doubleXorMask >> 1;\n      inputXorMask = result;\n      if (0xfd < result) goto LAB_08008e12;\n    }\n  }\n  shiftedInput = shiftedInput + inputXorMask * 0x800000 + (uint)(0x7fffffff < doubleXorMask);\n  if (doubleXorMask == 0x80000000) {\n    shiftedInput = shiftedInput & 0xfffffffe;\n  }\n  return shiftedInput | input;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_exponent_08008cd8",
                "param_1": "input",
                "param_2": "mask",
                "param_3": "identifier",
                "param_4": "shiftCount",
                "iVar1": "msbInput",
                "iVar2": "msbDouble",
                "uVar3": "inputXorMask",
                "uVar4": "doubleXorMask",
                "uVar5": "shiftedInput",
                "uVar6": "result",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08002908",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_080028bc",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_08008cdc",
            "code": "\nuint calculateFloat_08008cdc(uint input1,uint input2,undefined4 flag,uint result)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint input1Fraction;\n  uint input2Fraction;\n  uint input1Sign;\n  uint input2Sign;\n  bool isEqual;\n  \n  input2Fraction = input1 << 1;\n  isEqual = input2Fraction == 0;\n  if (!isEqual) {\n    result = input2 << 1;\n    isEqual = result == 0;\n  }\n  if (!isEqual) {\n    isEqual = input2Fraction == result;\n  }\n  shiftedInput1 = (int)input2Fraction >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)result >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      input2Fraction = input2;\n      if (shiftedInput1 == -1) {\n        input2Fraction = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = input2Fraction;\n      }\n      isEqual = (input2Fraction & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = input2Fraction == input2;\n      }\n      if (!isEqual) {\n        input2Fraction = input2Fraction | 0x400000;\n      }\n      return input2Fraction;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (input2Fraction == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((input2Fraction & 0xff000000) == 0) {\n      input2Fraction = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        input2Fraction = input2Fraction | 0x80000000;\n      }\n      return input2Fraction;\n    }\n    if (input2Fraction < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  input2Fraction = input2Fraction >> 0x18;\n  result = result >> 0x18;\n  input2Sign = result - input2Fraction;\n  isEqual = input2Sign != 0;\n  input1Sign = input2Fraction;\n  if (isEqual && input2Fraction <= result) {\n    input1Sign = input2Fraction + input2Sign;\n  }\n  if (isEqual && input2Fraction <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && input2Fraction <= result) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && input2Fraction <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (result < input2Fraction) {\n    input2Sign = -input2Sign;\n  }\n  if (0x19 < input2Sign) {\n    return input1;\n  }\n  input2Fraction = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    input2Fraction = -input2Fraction;\n  }\n  input1Fraction = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    input1Fraction = -input1Fraction;\n  }\n  if (input1Sign == input2Sign) {\n    input1Fraction = input1Fraction ^ 0x800000;\n    if (input1Sign == 0) {\n      input2Fraction = input2Fraction ^ 0x800000;\n      input1Sign = 1;\n    }\n    else {\n      input2Sign = input2Sign - 1;\n    }\n  }\n  input2Fraction = input2Fraction + ((int)input1Fraction >> (input2Sign & 0xff));\n  input1Fraction = input1Fraction << (0x20 - input2Sign & 0xff);\n  input1 = input2Fraction & 0x80000000;\n  if ((int)input2Fraction < 0) {\n    isEqual = input1Fraction != 0;\n    input1Fraction = -input1Fraction;\n    input2Fraction = -input2Fraction - (uint)isEqual;\n  }\n  if (input2Fraction < 0x800000) {\n    input2Sign = input1Fraction & 0x80000000;\n    input1Fraction = input1Fraction << 1;\n    input2Fraction = input2Fraction * 2 + (uint)(input2Sign != 0);\n    input2Sign = input1Sign - 2;\n    if (input1Sign - 1 == 0 || input2Fraction < 0x800000) {\n      input1Sign = LZCOUNT(input2Fraction) - 8;\n      input2Fraction = input2Fraction << (input1Sign & 0xff);\n      if ((int)input2Sign < (int)input1Sign) {\n        input2Fraction = input2Fraction >> (-(input2Sign - input1Sign) & 0xff);\n      }\n      else {\n        input2Fraction = input2Fraction + (input2Sign - input1Sign) * 0x800000;\n      }\n      return input2Fraction | input1;\n    }\n  }\n  else {\n    input2Sign = input1Sign - 1;\n    if (0xffffff < input2Fraction) {\n      input2Sign = input2Fraction & 1;\n      input2Fraction = input2Fraction >> 1;\n      input1Fraction = (uint)(input2Sign != 0) << 0x1f | input1Fraction >> 1;\n      input2Sign = input1Sign;\n      if (0xfd < input1Sign) goto LAB_08008e12;\n    }\n  }\n  input2Fraction = input2Fraction + input2Sign * 0x800000 + (uint)(0x7fffffff < input1Fraction);\n  if (input1Fraction == 0x80000000) {\n    input2Fraction = input2Fraction & 0xfffffffe;\n  }\n  return input2Fraction | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag",
                "param_4": "result",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "input1Fraction",
                "uVar4": "input2Fraction",
                "uVar5": "input1Sign",
                "uVar6": "input2Sign",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_08002908",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_080028bc",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_value_08008e3c",
            "code": "\nuint calculateValue_08008e3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int intermediateResult;\n  uint zeroFlag;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  intermediateResult = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    zeroFlag = 0 << (shiftAmount & 0xff);\n    leadingZeros = intermediateResult + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < zeroFlag);\n    if (zeroFlag == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = intermediateResult + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_value_08008e3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "intermediateResult",
                "uVar4": "zeroFlag"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "reverse_bits_08008e44",
            "code": "\nuint reverseBits_08008e44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "reverse_bits_08008e44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08003618",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08002c18",
                "FUN_080024c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint input1,uint input2,undefined4 size,uint mask)\n\n{\n  longlong result;\n  uint output;\n  uint byte1;\n  int sum;\n  int diff;\n  uint product;\n  int difference;\n  uint value;\n  bool isZero;\n  bool carry;\n  \n  byte1 = input1 >> 0x17 & 0xff;\n  isZero = byte1 == 0;\n  if (!isZero) {\n    mask = input2 >> 0x17 & 0xff;\n    isZero = mask == 0;\n  }\n  if (!isZero) {\n    isZero = byte1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = mask == 0xff;\n  }\n  if (isZero) {\n    mask = input2 >> 0x17 & 0xff;\n    if (byte1 == 0xff || mask == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      output = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        output = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      value = output;\n      if (((isZero) || ((byte1 == 0xff && ((output & 0x7fffff) != 0)))) ||\n         ((mask == 0xff && (value = input2, (input2 & 0x7fffff) != 0)))) {\n        return value | 0x7fc00000;\n      }\n      output = output ^ input2;\n      goto LAB_0800903c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = byte1 == 0;\n    output = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      byte1 = byte1 - 1;\n    }\n    input1 = input1 | output;\n    isZero = mask == 0;\n    output = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      mask = mask - 1;\n    }\n    input2 = input2 | output;\n  }\n  sum = byte1 + mask;\n  value = input1 ^ input2;\n  byte1 = input1 << 9;\n  isZero = byte1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (byte1 == 0) {\n      input2 = input2 << 9;\n    }\n    output = value & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    carry = negativeSubtraction(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    difference = diff;\n    if (!isZero && 0x7e < sum) {\n      carry = negativeSubtraction(0xff,diff);\n      difference = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && difference < 0 == carry) {\n      output = output | diff * 0x800000;\n    }\n    if (!isZero && difference < 0 == carry) {\n      return output;\n    }\n    output = output | 0x800000;\n    product = 0;\n    carry = negativeSubtraction(diff,1);\n    value = sum - 0x80;\n    isZero = value == 0;\n    byte1 = value;\n  }\n  else {\n    result = (ulonglong)(byte1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)result;\n    output = (uint)((ulonglong)result >> 0x20);\n    isZero = output < 0x800000;\n    if (isZero) {\n      output = output << 1;\n    }\n    if (isZero) {\n      output = output | product >> 0x1f;\n      product = product << 1;\n    }\n    output = value & 0x80000000 | output;\n    value = (sum + -0x7f) - (uint)isZero;\n    carry = negativeSubtraction(value,0xfd);\n    isZero = value == 0xfd;\n    byte1 = value - 0xfd;\n    if (value < 0xfe) {\n      output = output + value * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        output = output & 0xfffffffe;\n      }\n      return output;\n    }\n  }\n  if (isZero || (int)byte1 < 0 != carry) {\n    isZero = (int)(value + 0x19) < 0;\n    if (value == 0xffffffe7 || isZero != signedCarry(value,0x19)) {\n      output = output & 0x80000000;\n    }\n    if (value != 0xffffffe7 && isZero == signedCarry(value,0x19)) {\n      byte1 = (output << 1) >> (-value & 0xff);\n      value = output << (value + 0x20 & 0xff);\n      byte1 = ((uint)((output & 0x80000000) != 0) << 0x1f | byte1 >> 1) + (uint)((byte)byte1 & 1);\n      if ((product | value << 1) == 0) {\n        byte1 = byte1 & ~(value >> 0x1f);\n      }\n      return byte1;\n    }\n    return output;\n  }\nLAB_0800903c:\n  return output & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "size",
                "param_4": "mask",
                "lVar1": "result",
                "uVar2": "output",
                "uVar3": "byte1",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "product",
                "iVar7": "difference",
                "uVar8": "value",
                "bVar9": "isZero",
                "bVar10": "carry",
                "SBORROW4": "negativeSubtraction",
                "SCARRY4": "signedCarry"
            },
            "calling": [
                "FUN_08003618",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_080028bc",
                "FUN_08001f00",
                "FUN_08002908",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_080024c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "process_floating_point_08009054",
            "code": "\nuint processFloatingPoint_08009054(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint bitMask1;\n  uint bitMask2;\n  int diff;\n  uint temp1;\n  int temp2;\n  uint result;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  bitMask2 = input1 >> 0x17 & 0xff;\n  flag1 = bitMask2 == 0;\n  if (!flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    flag1 = input4 == 0;\n  }\n  if (!flag1) {\n    flag1 = bitMask2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = input4 == 0xff;\n  }\n  if (flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (bitMask2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      flag1 = (input1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = bitMask2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input1 = input1 << 1;\n            flag1 = (input1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          bitMask2 = bitMask2 - 1;\n        }\n        input1 = input1 | result;\n        flag1 = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input2 = input2 << 1;\n            flag1 = (input2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    diff = bitMask2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = SCARRY4(diff,0x7f);\n      temp2 = diff + 0x7f;\n      flag1 = temp2 < 0;\n      flag2 = temp2 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp2);\n        flag1 = 0xff - temp2 < 0;\n        flag2 = temp2 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        input1 = input1 | temp2 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      bitMask2 = 0;\n      flag2 = SBORROW4(temp2,1);\n      temp1 = diff + 0x7e;\n      flag1 = temp1 == 0;\n      result = temp1;\n    }\n    else {\n      bitMask1 = (input2 << 9) >> 4 | 0x10000000;\n      bitMask2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      flag1 = bitMask1 <= bitMask2;\n      if (!flag1) {\n        bitMask2 = bitMask2 << 1;\n      }\n      temp1 = diff + 0x7d + (uint)flag1;\n      result = 0x800000;\n      do {\n        if (bitMask1 <= bitMask2) {\n          bitMask2 = bitMask2 - bitMask1;\n          input1 = input1 | result;\n        }\n        flag1 = bitMask1 >> 1 <= bitMask2;\n        if (flag1) {\n          bitMask2 = bitMask2 - (bitMask1 >> 1);\n        }\n        if (flag1) {\n          input1 = input1 | result >> 1;\n        }\n        flag1 = bitMask1 >> 2 <= bitMask2;\n        if (flag1) {\n          bitMask2 = bitMask2 - (bitMask1 >> 2);\n        }\n        if (flag1) {\n          input1 = input1 | result >> 2;\n        }\n        flag1 = bitMask1 >> 3 <= bitMask2;\n        if (flag1) {\n          bitMask2 = bitMask2 - (bitMask1 >> 3);\n        }\n        if (flag1) {\n          input1 = input1 | result >> 3;\n        }\n        bitMask2 = bitMask2 * 0x10;\n        flag1 = bitMask2 == 0;\n        if (!flag1) {\n          result = result >> 4;\n          flag1 = result == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp1,0xfd);\n      flag1 = temp1 == 0xfd;\n      result = temp1 - 0xfd;\n      if (temp1 < 0xfe) {\n        input1 = input1 + temp1 * 0x800000 + (uint)(bitMask1 <= bitMask2);\n        if (bitMask2 - bitMask1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (flag1 || (int)result < 0 != flag2) {\n      flag1 = (int)(temp1 + 0x19) < 0;\n      if (temp1 == 0xffffffe7 || flag1 != SCARRY4(temp1,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp1 == 0xffffffe7 || flag1 != SCARRY4(temp1,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp1 & 0xff);\n      temp1 = input1 << (temp1 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((bitMask2 | temp1 << 1) == 0) {\n        result = result & ~(temp1 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "process_floating_point_08009054",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bitMask1",
                "uVar2": "bitMask2",
                "iVar3": "diff",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "uVar6": "result",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_08004250",
                "FUN_08003618",
                "FUN_08002908",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08002e08",
                "FUN_080028bc",
                "FUN_08001994",
                "FUN_08001f00",
                "FUN_080004fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "check_overflow_and_difference_0800919c",
            "code": "\nuint check_overflow_and_difference_0800919c(uint input_value_1,uint input_value_2)\n\n{\n  bool has_overflow;\n  uint doubled_value_1;\n  uint doubled_value_2;\n  uint combined_value;\n  bool is_zero;\n  \n  doubled_value_1 = input_value_1 * 2;\n  doubled_value_2 = input_value_2 * 2;\n  if (((int)doubled_value_1 >> 0x18 == -1 || (int)doubled_value_2 >> 0x18 == -1) &&\n     ((((int)doubled_value_1 >> 0x18 == -1 && ((input_value_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_value_2 >> 0x18 == -1 && ((input_value_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_value = doubled_value_1 | input_value_2 & 0x7fffffff;\n  is_zero = combined_value == 0;\n  if (!is_zero) {\n    combined_value = input_value_1 ^ input_value_2;\n    is_zero = combined_value == 0;\n  }\n  has_overflow = -1 < (int)combined_value;\n  if (has_overflow) {\n    input_value_1 = doubled_value_1 + input_value_2 * -2;\n    is_zero = input_value_1 == 0;\n  }\n  if ((has_overflow && doubled_value_2 <= doubled_value_1) && !is_zero) {\n    input_value_1 = (int)input_value_2 >> 0x1f;\n  }\n  if (!has_overflow || doubled_value_2 > doubled_value_1) {\n    input_value_1 = ~((int)input_value_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_value_1 = input_value_1 | 1;\n  }\n  result input_value_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "check_overflow_and_difference_0800919c",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "bVar1": "has_overflow",
                "uVar2": "doubled_value_1",
                "uVar3": "doubled_value_2",
                "uVar4": "combined_value",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "copy_parameters_080091fc",
            "code": "\nvoid copyParameters_080091fc(undefined4 destination,undefined4 source)\n\n{\n  FUN_08009204(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "copy_parameters_080091fc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_params_08009204",
            "code": "\nundefined8 concatenate_params_08009204(undefined4 param1,undefined4 param2)\n\n{\n  FUN_0800919c();\n  return CONCAT44(param2,param1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_if_initialized_08009214",
            "code": "\nbool check_if_initialized_08009214(void)\n\n{\n  char flag_initialized;\n  \n  FUN_08009204();\n  return flag_initialized != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_if_initialized_08009214",
                "in_ZR": "flag_initialized"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_input_empty_08009228",
            "code": "\nbool check_if_input_empty_08009228(void)\n\n{\n  char input_character;\n  \n  FUN_08009204();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_input_empty_08009228",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_return_value_and_flags_0800923c",
            "code": "\nbool check_return_value_and_flags_0800923c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08009204();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_return_value_and_flags_0800923c",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_flags_08009250",
            "code": "\nbool check_flags_08009250(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_080091fc();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_flags_08009250",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "is_string_null_terminated_08009264",
            "code": "\nbool is_string_null_terminated_08009264(void)\n\n{\n  char input_character;\n  \n  FUN_080091fc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "is_string_null_terminated_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_value_08009278",
            "code": "\nuint convertValue_08009278(uint returnValue)\n\n{\n  uint convertedValue;\n  uint result;\n  \n  if (returnValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  convertedValue = (returnValue << 1) >> 0x18;\n  result = 0x9e - convertedValue;\n  if (convertedValue < 0x9f && result != 0) {\n    convertedValue = (returnValue << 8 | 0x80000000) >> (result & 0xff);\n    if ((returnValue & 0x80000000) != 0) {\n      convertedValue = -convertedValue;\n    }\n    return convertedValue;\n  }\n  if ((result == 0xffffff9f) && ((returnValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  returnValue = returnValue & 0x80000000;\n  if (returnValue == 0) {\n    returnValue = 0x7fffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_value_08009278",
                "param_1": "returnValue",
                "uVar1": "convertedValue",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_0800756c();\n  FUN_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  FUN_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "classify_floating_point_08009318",
            "code": "\nlonglong classifyFloatingPoint_08009318(uint value,uint exponent,undefined4 unused_1,undefined4 unused_2)\n\n{\n  int result;\n  uint exponent_diff;\n  uint bit_mask;\n  bool carry;\n  undefined8 calculated_value;\n  longlong classification;\n  \n  bit_mask = (exponent << 1) >> 0x15;\n  exponent_diff = bit_mask - 0x3ff;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      calculated_value = FUN_080082d4(value,exponent,0x8800759c,0x7e37e43c,unused_2);\n      result = FUN_08008b60((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20),0,0);\n      classification = CONCAT44(exponent,value);\n      if (result != 0) {\n        if ((int)exponent < 0) {\n          classification = -0x8000000000000000;\n        }\n        else if ((value | exponent) == 0) {\n          classification = 0;\n        }\n        else {\n          classification = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      bit_mask = 0xfffff >> (exponent_diff & 0xff);\n      classification = CONCAT44(exponent,value);\n      if ((exponent & bit_mask | value) != 0) {\n        calculated_value = FUN_080082d4(value,exponent,0x8800759c,0x7e37e43c,unused_2);\n        result = FUN_08008b60((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20),0,0);\n        classification = CONCAT44(exponent,value);\n        if (result != 0) {\n          if (0 < (int)exponent) {\n            exponent = exponent + (0x100000 >> (exponent_diff & 0xff));\n          }\n          classification = (ulonglong)(exponent & ~bit_mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)exponent_diff < 0x34) {\n    bit_mask = 0xffffffff >> (bit_mask - 0x413 & 0xff);\n    classification = CONCAT44(exponent,value);\n    if ((bit_mask & value) != 0) {\n      calculated_value = FUN_080082d4(value,exponent,0x8800759c,0x7e37e43c,unused_2);\n      result = FUN_08008b60((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20),0,0);\n      classification = CONCAT44(exponent,value);\n      if (result != 0) {\n        if (0 < (int)exponent) {\n          if (exponent_diff == 0x14) {\n            exponent = exponent + 1;\n          }\n          else {\n            exponent_diff = 1 << (0x34 - exponent_diff & 0xff);\n            carry = CARRY4(exponent_diff,value);\n            value = exponent_diff + value;\n            if (carry != false) {\n              exponent = exponent + 1;\n            }\n          }\n        }\n        classification = CONCAT44(exponent,value & ~bit_mask);\n      }\n    }\n  }\n  else {\n    classification = CONCAT44(exponent,value);\n    if (exponent_diff == 0x400) {\n      classification = FUN_080082d4();\n    }\n  }\n  return classification;\n}\n\n",
            "renaming": {
                "FUN_08009318": "classify_floating_point_08009318",
                "param_1": "value",
                "param_2": "exponent",
                "param_3": "unused_1",
                "param_4": "unused_2",
                "iVar1": "result",
                "uVar2": "exponent_diff",
                "uVar3": "bit_mask",
                "bVar4": "carry",
                "uVar5": "calculated_value",
                "lVar6": "classification"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_result_08009410",
            "code": "\nundefined4 calculateResult_08009410(undefined4 input,uint value)\n\n{\n  undefined4 result;\n  uint bitMaskedValue;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  if (0x3fe921fb < (value & 0x7fffffff)) {\n    if ((value & 0x7fffffff) < 0x7ff00000) {\n      bitMaskedValue = FUN_08009d78(input,value,&temp1);\n      bitMaskedValue = bitMaskedValue & 3;\n      if (bitMaskedValue == 1) {\n        result = FUN_0800adf0(temp1,temp2,temp3,temp4,1);\n      }\n      else if (bitMaskedValue == 2) {\n        result = FUN_0800a348(temp1,temp2,temp3,temp4);\n      }\n      else if (bitMaskedValue == 0) {\n        result = FUN_0800a348(temp1,temp2,temp3,temp4);\n      }\n      else {\n        result = FUN_0800adf0(temp1,temp2,temp3,temp4,1);\n      }\n    }\n    else {\n      result = FUN_080082d0(input,value,input,value);\n    }\n    return result;\n  }\n  result = FUN_0800a348(input,value,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input",
                "param_2": "value",
                "uVar1": "result",
                "uVar2": "bitMaskedValue",
                "local_28": "temp1",
                "uStack_24": "temp2",
                "local_20": "temp3",
                "uStack_1c": "temp4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "reverse_binary_math_080094c0",
            "code": "\nlonglong reverseBinaryMath_080094c0(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shiftedValue;\n  uint bitMask;\n  bool carryFlag;\n  undefined8 processedValue;\n  longlong output;\n  \n  bitMask = (input2 << 1) >> 0x15;\n  shiftedValue = bitMask - 0x3ff;\n  if ((int)shiftedValue < 0x14) {\n    if ((int)shiftedValue < 0) {\n      processedValue = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result = FUN_08008b60((int)processedValue,(int)((ulonglong)processedValue >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = 0xbff00000;\n          }\n          output = (ulonglong)input2 << 0x20;\n        }\n        else {\n          output = 0;\n        }\n      }\n    }\n    else {\n      bitMask = 0xfffff >> (shiftedValue & 0xff);\n      output = CONCAT44(input2,input1);\n      if ((input2 & bitMask | input1) != 0) {\n        processedValue = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n        result = FUN_08008b60((int)processedValue,(int)((ulonglong)processedValue >> 0x20),0,0);\n        output = CONCAT44(input2,input1);\n        if (result != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shiftedValue & 0xff));\n          }\n          output = (ulonglong)(input2 & ~bitMask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftedValue < 0x34) {\n    bitMask = 0xffffffff >> (bitMask - 0x413 & 0xff);\n    output = CONCAT44(input2,input1);\n    if ((bitMask & input1) != 0) {\n      processedValue = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result = FUN_08008b60((int)processedValue,(int)((ulonglong)processedValue >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          if (shiftedValue == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shiftedValue = 1 << (0x34 - shiftedValue & 0xff);\n            carryFlag = CARRY4(shiftedValue,input1);\n            input1 = shiftedValue + input1;\n            if (carryFlag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input2,input1 & ~bitMask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input2,input1);\n    if (shiftedValue == 0x400) {\n      output = FUN_080082d4();\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "reverse_binary_math_080094c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shiftedValue",
                "uVar3": "bitMask",
                "bVar4": "carryFlag",
                "uVar5": "processedValue",
                "lVar6": "output"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "compute_multiplication_080095b8",
            "code": "\nint computeMultiplication_080095b8(uint number1,uint number2)\n\n{\n  uint bitPattern1;\n  uint shiftedBits;\n  uint result;\n  int sign;\n  uint diffFromMax;\n  \n  shiftedBits = (number2 << 1) >> 0x15;\n  diffFromMax = shiftedBits - 0x3ff;\n  if ((int)number2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = number2 & 0xfffff | 0x100000;\n  if ((int)diffFromMax < 0x14) {\n    if ((int)diffFromMax < 0) {\n      if (diffFromMax != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (diffFromMax & 0xff)) >> (0x14 - diffFromMax & 0xff);\n  }\n  else {\n    if (0x1e < diffFromMax) {\n      sign = FUN_08008ba0();\n      return sign;\n    }\n    if ((int)diffFromMax < 0x34) {\n      bitPattern1 = 0x80000000 >> (shiftedBits - 0x413 & 0xff);\n      if (CARRY4(bitPattern1,number1) != false) {\n        result = result + 1;\n      }\n      result = result << (shiftedBits - 0x413 & 0xff);\n      if (diffFromMax != 0x14) {\n        result = result | bitPattern1 + number1 >> (0x34 - diffFromMax & 0xff);\n      }\n    }\n    else {\n      result = result << (shiftedBits - 0x413 & 0xff) | number1 << (shiftedBits - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "compute_multiplication_080095b8",
                "param_1": "number1",
                "param_2": "number2",
                "uVar1": "bitPattern1",
                "uVar2": "shiftedBits",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "diffFromMax"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_to_double_precision_08009654",
            "code": "\nlonglong convertToDoublePrecision_08009654(uint integerPart,uint fractionPart)\n\n{\n  uint exponentPart;\n  uint shiftedExponent;\n  longlong doublePrecision;\n  \n  doublePrecision = CONCAT44(fractionPart,integerPart);\n  shiftedExponent = (fractionPart << 1) >> 0x15;\n  exponentPart = shiftedExponent - 0x3ff;\n  if ((int)exponentPart < 0x14) {\n    if ((int)exponentPart < 0) {\n      fractionPart = fractionPart & 0x80000000;\n      if (exponentPart == 0xffffffff) {\n        fractionPart = fractionPart | 0x3ff00000;\n      }\n      doublePrecision = (ulonglong)fractionPart << 0x20;\n    }\n    else {\n      shiftedExponent = 0xfffff >> (exponentPart & 0xff);\n      doublePrecision = CONCAT44(fractionPart,integerPart);\n      if ((fractionPart & shiftedExponent | integerPart) != 0) {\n        doublePrecision = (ulonglong)(fractionPart + (0x80000 >> (exponentPart & 0xff)) & ~shiftedExponent) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponentPart < 0x34) {\n    shiftedExponent = 0xffffffff >> (shiftedExponent - 0x413 & 0xff);\n    if ((integerPart & shiftedExponent) != 0) {\n      exponentPart = 1 << (0x33 - exponentPart & 0xff);\n      if (checkCarry(integerPart,exponentPart) != false) {\n        fractionPart = fractionPart + 1;\n      }\n      doublePrecision = CONCAT44(fractionPart,integerPart + exponentPart & ~shiftedExponent);\n    }\n  }\n  else {\n    doublePrecision = CONCAT44(fractionPart,integerPart);\n    if (exponentPart == 0x400) {\n      doublePrecision = FUN_080082d4();\n    }\n  }\n  return doublePrecision;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_to_double_precision_08009654",
                "param_1": "integerPart",
                "param_2": "fractionPart",
                "uVar1": "exponentPart",
                "uVar2": "shiftedExponent",
                "lVar3": "doublePrecision",
                "CARRY4": "checkCarry"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "handle_binary_080096e8",
            "code": "\nundefined4 handleBinary_080096e8(undefined4 inputData,uint inputSize)\n\n{\n  undefined4 returnValue;\n  uint maskedInputSize;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  \n  if (0x3fe921fb < (inputSize & 0x7fffffff)) {\n    if ((inputSize & 0x7fffffff) < 0x7ff00000) {\n      maskedInputSize = FUN_08009d78(inputData,inputSize,&localVariable1);\n      maskedInputSize = maskedInputSize & 3;\n      if (maskedInputSize == 1) {\n        returnValue = FUN_0800a348(localVariable1,localVariable2,localVariable3,localVariable4);\n      }\n      else if (maskedInputSize == 2) {\n        returnValue = FUN_0800adf0(localVariable1,localVariable2,localVariable3,localVariable4,1);\n      }\n      else if (maskedInputSize == 0) {\n        returnValue = FUN_0800adf0(localVariable1,localVariable2,localVariable3,localVariable4,1);\n      }\n      else {\n        returnValue = FUN_0800a348(localVariable1,localVariable2,localVariable3,localVariable4);\n      }\n    }\n    else {\n      returnValue = FUN_080082d0(inputData,inputSize,inputData,inputSize);\n    }\n    return returnValue;\n  }\n  returnValue = FUN_0800adf0(inputData,inputSize,0,0,0);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "handle_binary_080096e8",
                "param_1": "inputData",
                "param_2": "inputSize",
                "uVar1": "returnValue",
                "uVar2": "maskedInputSize",
                "local_28": "localVariable1",
                "uStack_24": "localVariable2",
                "local_20": "localVariable3",
                "uStack_1c": "localVariable4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "extract_bits_08009798",
            "code": "\nlonglong ExtractBits_08009798(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  uint shiftCount;\n  uint shiftedInput2;\n  longlong result;\n  \n  shiftedInput2 = (input2 << 1) >> 0x15;\n  shiftCount = shiftedInput2 - 0x3ff;\n  if ((int)shiftCount < 0x14) {\n    if ((int)shiftCount < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shiftCount & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shiftCount < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shiftedInput2 - 0x413 & 0xff)));\n    }\n    if (shiftCount != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = FUN_080082d4(input1,input2,input1,input2,param4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "extract_bits_08009798",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "shiftCount",
                "uVar2": "shiftedInput2",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_result_thunk_08009990",
            "code": "\nuint calculate_result_thunk_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 result_upper;\n  uint shifted_input_4;\n  uint normalized_input_4;\n  uint shifted_input_2;\n  undefined8 temp_result;\n  \n  normalized_input_4 = input_4 & 0x7fffffff;\n  if (((normalized_input_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (shifted_input_2 = input_2 & 0x7fffffff, (shifted_input_2 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      normalized_input_4 = FUN_0800af78();\n      return normalized_input_4;\n    }\n    shifted_input_4 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((shifted_input_2 | input_1) == 0) {\n      if (shifted_input_4 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (shifted_input_4 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((normalized_input_4 | input_3) != 0) {\n        if (normalized_input_4 == 0x7ff00000) {\n          shifted_input_4 = shifted_input_4 - 1;\n          if (shifted_input_2 == 0x7ff00000) {\n            if (shifted_input_4 < 3) {\n              return *(uint *)(&DAT_0800be68 + shifted_input_4 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (shifted_input_4 < 3) {\n            return *(uint *)(&DAT_0800be80 + shifted_input_4 * 8);\n          }\n          return 0;\n        }\n        if (shifted_input_2 != 0x7ff00000) {\n          difference = (int)(shifted_input_2 - normalized_input_4) >> 0x14;\n          if ((int)(shifted_input_2 - normalized_input_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              temp_result = 0;\n            }\n            else {\n              FUN_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              temp_result = FUN_0800af78();\n            }\n          }\n          else {\n            temp_result = 0x3ff921fb54442d18;\n          }\n          result_upper = (undefined4)((ulonglong)temp_result >> 0x20);\n          normalized_input_4 = (uint)temp_result;\n          if (shifted_input_4 == 1) {\n            return normalized_input_4;\n          }\n          if (shifted_input_4 == 2) {\n            temp_result = FUN_080082d0(normalized_input_4,result_upper,0x33145c07,0x3ca1a626);\n            normalized_input_4 = FUN_080082d0(0x54442d18,0x400921fb,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n            return normalized_input_4;\n          }\n          if (shifted_input_4 == 0) {\n            return normalized_input_4;\n          }\n          temp_result = FUN_080082d0(normalized_input_4,result_upper,0x33145c07,0x3ca1a626);\n          normalized_input_4 = FUN_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x54442d18,0x400921fb);\n          return normalized_input_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = FUN_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_result_thunk_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "result_upper",
                "uVar3": "shifted_input_4",
                "uVar4": "normalized_input_4",
                "uVar5": "shifted_input_2",
                "uVar6": "temp_result"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int result;\n  undefined4 *ptr_result;\n  int *ptr_local_30;\n  undefined8 ret_value;\n  undefined4 num_sides;\n  char *method_name;\n  undefined4 side_a_value;\n  undefined4 side_b_value;\n  undefined4 side_c_value;\n  undefined4 side_d_value;\n  undefined4 lower_limit;\n  undefined4 upper_limit;\n  int local_result;\n  \n  ret_value = FUN_08009b24();\n  if (DAT_20000014 == -1) {\n    return ret_value;\n  }\n  local_result = FUN_0800b2d4();\n  if (local_result != 0) {\n    return ret_value;\n  }\n  result = FUN_0800b2d4(side_a,side_b);\n  if (result == 0) {\n    return ret_value;\n  }\n  result = FUN_0800b2d4(side_c,side_d);\n  if (result == 0) {\n    return ret_value;\n  }\n  num_sides = 3;\n  method_name = \"hypot\";\n  side_a_value = side_a;\n  side_b_value = side_b;\n  side_c_value = side_c;\n  side_d_value = side_d;\n  if (DAT_20000014 == '\\0') {\n    lower_limit = 0xe0000000;\n    upper_limit = 0x47efffff;\nLAB_080098aa:\n    result = FUN_0800b2e0(&num_sides);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    lower_limit = 0;\n    upper_limit = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  ptr_result = (undefined4 *)FUN_0800b3dc();\n  *ptr_result = 0x22;\nLAB_08009896:\n  ret_value = CONCAT44(upper_limit,lower_limit);\n  if (local_result != 0) {\n    ptr_local_30 = (int *)FUN_0800b3dc();\n    ret_value = CONCAT44(upper_limit,lower_limit);\n    *ptr_local_30 = local_result;\n  }\n  return ret_value;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "iVar1": "result",
                "puVar2": "ptr_result",
                "piVar3": "ptr_local_30",
                "uVar4": "ret_value",
                "local_50": "num_sides",
                "pcStack_4c": "method_name",
                "local_48": "side_a_value",
                "uStack_44": "side_b_value",
                "local_40": "side_c_value",
                "uStack_3c": "side_d_value",
                "local_38": "lower_limit",
                "uStack_34": "upper_limit",
                "local_30": "local_result"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800b2d4",
                "FUN_0800b3dc",
                "FUN_0800b2e0",
                "FUN_08009b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "validate_and_process_data_080098d0",
            "code": "\nundefined4 validate_and_process_data_080098d0(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  char constant_flag;\n  undefined4 return_value;\n  int result;\n  undefined4 *ptr_result;\n  int *ptr_local_30;\n  undefined4 flag1;\n  undefined *ptr_data;\n  undefined4 input_param_1_copy;\n  undefined4 input_param_2_copy;\n  undefined4 input_param_1_copy2;\n  undefined4 input_param_2_copy2;\n  undefined8 processed_data;\n  int local_result;\n  \n  return_value = FUN_0800a1bc();\n  constant_flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (local_result = FUN_08008b74(input_param_1,input_param_2,input_param_1,input_param_2), local_result != 0)) ||\n     (result = FUN_08008b24(input_param_1,input_param_2,0,0), result == 0)) {\n    return return_value;\n  }\n  flag1 = 1;\n  ptr_data = &DAT_0800be5c;\n  input_param_1_copy = input_param_1;\n  input_param_2_copy = input_param_2;\n  input_param_1_copy2 = input_param_1;\n  input_param_2_copy2 = input_param_2;\n  if (constant_flag == '\\0') {\n    processed_data = 0;\nLAB_0800996c:\n    result = FUN_0800b2e0(&flag1);\n    if (result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    processed_data = FUN_08008894(0,0,0,0);\n    if (constant_flag != '\\x02') goto LAB_0800996c;\n  }\n  ptr_result = (undefined4 *)FUN_0800b3dc();\n  *ptr_result = 0x21;\njoined_r0x0800997a:\n  if (local_result != 0) {\n    ptr_local_30 = (int *)FUN_0800b3dc();\n    *ptr_local_30 = local_result;\n  }\n  return (undefined4)processed_data;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "validate_and_process_data_080098d0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "cVar1": "constant_flag",
                "uVar2": "return_value",
                "iVar3": "result",
                "puVar4": "ptr_result",
                "piVar5": "ptr_local_30",
                "local_50": "flag1",
                "local_4c": "ptr_data",
                "local_48": "input_param_1_copy",
                "uStack_44": "input_param_2_copy",
                "local_40": "input_param_1_copy2",
                "uStack_3c": "input_param_2_copy2",
                "local_38": "processed_data",
                "local_30": "local_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_0800a1bc",
                "FUN_0800b2e0",
                "FUN_08008894",
                "FUN_08008b74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "compute_result_08009990",
            "code": "\nuint computeResult_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if (((temp4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (temp5 = input2 & 0x7fffffff, (temp5 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      temp4 = FUN_0800af78();\n      return temp4;\n    }\n    temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((temp5 | input1) == 0) {\n      if (temp3 == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (temp3 == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp4 | input3) != 0) {\n        if (temp4 == 0x7ff00000) {\n          temp3 = temp3 - 1;\n          if (temp5 == 0x7ff00000) {\n            if (temp3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp3 * 8);\n          }\n          return 0;\n        }\n        if (temp5 != 0x7ff00000) {\n          temp1 = (int)(temp5 - temp4) >> 0x14;\n          if ((int)(temp5 - temp4) < 0x3d00000) {\n            if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n              temp6 = 0;\n            }\n            else {\n              FUN_08008894(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              temp6 = FUN_0800af78();\n            }\n          }\n          else {\n            temp6 = 0x3ff921fb54442d18;\n          }\n          temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n          temp4 = (uint)temp6;\n          if (temp3 == 1) {\n            return temp4;\n          }\n          if (temp3 == 2) {\n            temp6 = FUN_080082d0(temp4,temp2,0x33145c07,0x3ca1a626);\n            temp4 = FUN_080082d0(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n            return temp4;\n          }\n          if (temp3 == 0) {\n            return temp4;\n          }\n          temp6 = FUN_080082d0(temp4,temp2,0x33145c07,0x3ca1a626);\n          temp4 = FUN_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n          return temp4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = FUN_080082d4(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "compute_result_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_0800af78",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_result_08009b24",
            "code": "\nuint calculateResult_08009b24(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  int result2;\n  uint result3;\n  int result4;\n  undefined4 result5;\n  int result6;\n  uint result7;\n  undefined4 result8;\n  undefined4 result9;\n  undefined8 result10;\n  undefined8 result11;\n  undefined8 result12;\n  undefined8 result13;\n  int result14;\n  \n  input2 = input2 & 0x7fffffff;\n  input4 = input4 & 0x7fffffff;\n  result3 = input1;\n  result7 = input2;\n  if (input2 < input4) {\n    result3 = input3;\n    input3 = input1;\n    result7 = input4;\n    input4 = input2;\n  }\n  if (0x3c00000 < (int)(result7 - input4)) {\n    result3 = FUN_080082d4(result3,result7,input3,input4);\n    return result3;\n  }\n  if (result7 < 0x5f300001) {\n    result14 = 0;\n  }\n  else {\n    if (0x7fefffff < result7) {\n      if ((result7 & 0xfffff | result3) != 0) {\n        result3 = FUN_080082d4(result3,result7,input3,input4);\n      }\n      if ((input4 ^ 0x7ff00000 | input3) != 0) {\n        return result3;\n      }\n      return input3;\n    }\n    result7 = result7 + 0xda800000;\n    input4 = input4 + 0xda800000;\n    result14 = 600;\n  }\n  result11 = CONCAT44(result7,result3);\n  result10 = CONCAT44(input4,input3);\n  if ((int)input4 < 0x20b00000) {\n    if ((int)input4 < 0x100000) {\n      if ((input4 | input3) == 0) {\n        return result3;\n      }\n      result10 = FUN_08008640(input3,input4,0,0x7fd00000);\n      result11 = FUN_08008640(result3,result7,0,0x7fd00000);\n      result14 = result14 + -0x3fe;\n    }\n    else {\n      result7 = result7 + 0x25800000;\n      result11 = CONCAT44(result7,result3);\n      input4 = input4 + 0x25800000;\n      result10 = CONCAT44(input4,input3);\n      result14 = result14 + -600;\n    }\n  }\n  result9 = (undefined4)((ulonglong)result11 >> 0x20);\n  result8 = (undefined4)result11;\n  result6 = (int)((ulonglong)result10 >> 0x20);\n  result5 = (undefined4)result10;\n  result10 = FUN_080082d0(result8,result9,result5,result6);\n  result4 = (int)((ulonglong)result10 >> 0x20);\n  result1 = (undefined4)result10;\n  result2 = FUN_08008b24(result5,result6,result1,result4);\n  if (result2 == 0) {\n    result10 = FUN_08008640(0,input4,0);\n    result11 = FUN_08008640(result1,result4 + -0x80000000,result1,result4);\n    result12 = FUN_080082d4(result8,result9,result8,result9);\n    result12 = FUN_080082d0((int)result12,(int)((ulonglong)result12 >> 0x20),0,result7 + 0x100000);\n    result12 = FUN_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),result5,result6);\n    result13 = FUN_080082d0(result5,result6,0,input4);\n    result13 = FUN_08008640((int)result13,(int)((ulonglong)result13 >> 0x20),0,result7 + 0x100000);\n    result12 = FUN_080082d4((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                          (int)((ulonglong)result13 >> 0x20));\n    result11 = FUN_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    FUN_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result10 = FUN_0800a1bc();\n  }\n  else {\n    result10 = FUN_08008640(0,result7,0,result7);\n    result11 = FUN_08008640(result5,result6 + -0x80000000,result5,result6);\n    result12 = FUN_080082d4(result8,result9,0,result7);\n    result13 = FUN_080082d0(result8,result9,0,result7);\n    result12 = FUN_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                          (int)((ulonglong)result13 >> 0x20));\n    result11 = FUN_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    FUN_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result10 = FUN_0800a1bc();\n  }\n  result3 = (uint)result10;\n  if (result14 != 0) {\n    result3 = FUN_08008640(result3,(int)((ulonglong)result10 >> 0x20),0,result14 * 0x100000 + 0x3ff00000);\n  }\n  return result3;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "iVar6": "result6",
                "uVar7": "result7",
                "uVar8": "result8",
                "uVar9": "result9",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "local_3c": "result14"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_080082d0",
                "FUN_0800a1bc",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_value_08009d78",
            "code": "\nint calculateValue_08009d78(undefined4 inputValue,uint flag,undefined8 *result)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  uint modifiedFlag;\n  int returnValue;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined4 localValue1;\n  undefined4 localValue2;\n  undefined8 localTemp1;\n  undefined8 localTemp2;\n  undefined8 localTemp3;\n  \n  modifiedFlag = flag & 0x7fffffff;\n  if (modifiedFlag < 0x3fe921fc) {\n    *(undefined4 *)result = inputValue;\n    *(uint *)((int)result + 4) = flag;\n    *(undefined4 *)(result + 1) = 0;\n    *(undefined4 *)((int)result + 0xc) = 0;\n    return 0;\n  }\n  if (modifiedFlag < 0x4002d97c) {\n    if ((int)flag < 1) {\n      temp1 = FUN_080082d4(inputValue,flag,0x54400000,0x3ff921fb);\n      value3 = (undefined4)((ulonglong)temp1 >> 0x20);\n      value1 = (undefined4)temp1;\n      if (modifiedFlag != 0x3ff921fb) {\n        temp1 = FUN_080082d4(value1,value3,0x1a626331,0x3dd0b461);\n        *result = temp1;\n        temp1 = FUN_080082d0(value1,value3);\n        temp1 = FUN_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n        result[1] = temp1;\n        return -1;\n      }\n      temp1 = FUN_080082d4(value1,value3,0x1a600000,0x3dd0b461);\n      value1 = (undefined4)((ulonglong)temp1 >> 0x20);\n      temp2 = FUN_080082d4((int)temp1,value1,0x2e037073,0x3ba3198a);\n      *result = temp2;\n      temp1 = FUN_080082d0((int)temp1,value1);\n      temp1 = FUN_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n      result[1] = temp1;\n      return -1;\n    }\n    temp1 = FUN_080082d0();\n    value3 = (undefined4)((ulonglong)temp1 >> 0x20);\n    value1 = (undefined4)temp1;\n    if (modifiedFlag != 0x3ff921fb) {\n      temp1 = FUN_080082d0(value1,value3,0x1a626331,0x3dd0b461);\n      *result = temp1;\n      temp1 = FUN_080082d0(value1,value3);\n      temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n      result[1] = temp1;\n      return 1;\n    }\n    temp1 = FUN_080082d0(value1,value3,0x1a600000,0x3dd0b461);\n    value1 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp2 = FUN_080082d0((int)temp1,value1,0x2e037073,0x3ba3198a);\n    *result = temp2;\n    temp1 = FUN_080082d0((int)temp1,value1);\n    temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n    result[1] = temp1;\n    return 1;\n  }\n  if (0x413921fb < modifiedFlag) {\n    if (0x7fefffff < modifiedFlag) {\n      temp1 = FUN_080082d0(inputValue,flag,inputValue,flag);\n      result[1] = temp1;\n      *result = temp1;\n      return 0;\n    }\n    returnValue = ((int)modifiedFlag >> 0x14) + -0x416;\n    FUN_08008ba0();\n    localTemp1 = FUN_0800856c();\n    temp1 = FUN_080082d0(inputValue,modifiedFlag + returnValue * -0x100000,(int)localTemp1,\n                          (int)((ulonglong)localTemp1 >> 0x20));\n    temp1 = FUN_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    FUN_08008ba0();\n    localTemp2 = FUN_0800856c();\n    temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    localTemp3 = FUN_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    FUN_08008b10((int)localTemp3,(int)((ulonglong)localTemp3 >> 0x20),0,0);\n    returnValue = FUN_0800a5a0(&localTemp1,result,returnValue);\n    if (-1 < (int)flag) {\n      return returnValue;\n    }\n    *(int *)((int)result + 4) = *(int *)((int)result + 4) + -0x80000000;\n    *(int *)((int)result + 0xc) = *(int *)((int)result + 0xc) + -0x80000000;\n    return -returnValue;\n  }\n  temp1 = FUNC_0800b2cc();\n  value3 = (undefined4)((ulonglong)temp1 >> 0x20);\n  temp2 = FUN_08008640((int)temp1,value3,0x6dc9c883,0x3fe45f30);\n  FUN_080082d4((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n  returnValue = FUN_08008ba0();\n  temp2 = FUN_0800856c();\n  value4 = (undefined4)((ulonglong)temp2 >> 0x20);\n  value1 = (undefined4)temp2;\n  temp2 = FUN_08008640(value1,value4,0x54400000,0x3ff921fb);\n  temp1 = FUN_080082d0((int)temp1,value3,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  value5 = (undefined4)((ulonglong)temp1 >> 0x20);\n  value3 = (undefined4)temp1;\n  temp2 = FUN_08008640(value1,value4,0x1a626331,0x3dd0b461);\n  if ((0x1f < returnValue) || (*(uint *)(&DAT_0800be98 + (returnValue + -1) * 4) == modifiedFlag)) {\n    temp3 = FUN_080082d0(value3,value5,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)((modifiedFlag >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp2 = FUN_08008640(value1,value4,0x1a600000,0x3dd0b461);\n    value6 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = FUN_080082d0(value3,value5,(int)temp2,value6);\n    value7 = (undefined4)((ulonglong)temp1 >> 0x20);\n    value2 = (undefined4)temp1;\n    temp3 = FUN_080082d0(value3,value5,value2,value7);\n    temp2 = FUN_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,value6);\n    temp3 = FUN_08008640(value1,value4,0x2e037073,0x3ba3198a);\n    temp2 = FUN_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n    temp3 = FUN_080082d0(value2,value7,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)(((int)modifiedFlag >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp2 = FUN_08008640(value1,value4,0x2e000000,0x3ba3198a);\n    value3 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = FUN_080082d0(value2,value7,(int)temp2,value3);\n    temp3 = FUN_080082d0(value2,value7);\n    temp2 = FUN_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,value3);\n    temp3 = FUN_08008640(value1,value4,0x252049c1,0x397b839a);\n    temp2 = FUN_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n  }\n  temp3 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\nLAB_0800a0ce:\n  localValue2 = (undefined4)((ulonglong)temp1 >> 0x20);\n  localValue1 = (undefined4)temp1;\n  *result = temp3;\n  temp1 = FUN_080082d0(localValue1,localValue2);\n  temp1 = FUN_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\n  result[1] = temp1;\n  if ((int)flag < 0) {\n    *(int *)result = (int)temp3;\n    *(int *)((int)result + 4) = (int)((ulonglong)temp3 >> 0x20) + -0x80000000;\n    *(int *)(result + 1) = (int)temp1;\n    *(int *)((int)result + 0xc) = (int)((ulonglong)temp1 >> 0x20) + -0x80000000;\n    returnValue = -returnValue;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_value_08009d78",
                "param_1": "inputValue",
                "param_2": "flag",
                "param_3": "result",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "value3",
                "uVar4": "value4",
                "uVar5": "value5",
                "uVar6": "value6",
                "uVar7": "value7",
                "uVar8": "modifiedFlag",
                "iVar9": "returnValue",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "local_50": "localValue1",
                "uStack_4c": "localValue2",
                "local_40": "localTemp1",
                "local_38": "localTemp2",
                "local_30": "localTemp3"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_08008b10",
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_0800856c",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_result_0800a1bc",
            "code": "\nuint calculateResult_0800a1bc(uint input,uint mask)\n\n{\n  uint shiftedMask;\n  int iterator;\n  uint temp;\n  undefined4 shiftedInput;\n  uint temp2;\n  uint bitMask;\n  uint result;\n  uint shiftedResult;\n  uint shiftedInput2;\n  int bitPosition;\n  uint temp3;\n  uint rounds;\n  undefined8 tempResult;\n  \n  if ((~mask & 0x7ff00000) == 0) {\n    tempResult = FUN_08008640(input,mask,input,mask);\n    result = FUN_080082d4((int)tempResult,(int)((ulonglong)tempResult >> 0x20),input,mask);\n    return result;\n  }\n  if ((int)mask < 1) {\n    if ((mask & 0x7fffffff | input) == 0) {\n      return input;\n    }\n    if (mask != 0) {\n      tempResult = FUN_080082d0(input,mask,input);\n      shiftedInput = (undefined4)((ulonglong)tempResult >> 0x20);\n      result = FUN_08008894((int)tempResult,shiftedInput,(int)tempResult,shiftedInput);\n      return result;\n    }\n    do {\n      shiftedInput2 = input;\n      result = shiftedInput2 >> 0xb;\n      mask = mask - 0x15;\n      input = shiftedInput2 << 0x15;\n    } while (result == 0);\n    shiftedMask = mask;\n    if (-1 < (int)shiftedInput2) goto LAB_0800a290;\n    rounds = 0x20;\n    temp2 = 0xffffffff;\n    shiftedInput2 = input;\n  }\n  else {\n    shiftedMask = (int)mask >> 0x14;\n    result = mask;\n    shiftedInput2 = input;\n    if (shiftedMask != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    shiftedInput2 = 0;\n    rounds = result;\n    do {\n      temp2 = shiftedInput2;\n      result = rounds << 1;\n      bitPosition = rounds << 0xc;\n      shiftedInput2 = temp2 + 1;\n      rounds = result;\n    } while (-1 < bitPosition);\n    rounds = 0x20 - shiftedInput2;\n    mask = shiftedMask;\n    shiftedInput2 = input << (shiftedInput2 & 0xff);\n  }\n  result = input >> (rounds & 0xff) | result;\n  shiftedMask = mask - temp2;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(shiftedMask << 0x1f)) {\n    result = result * 2 - ((int)shiftedInput2 >> 0x1f);\n    shiftedInput2 = shiftedInput2 << 1;\n  }\n  rounds = 0;\n  result = result * 2 - ((int)shiftedInput2 >> 0x1f);\n  shiftedInput2 = shiftedInput2 << 1;\n  shiftedMask = 0;\n  bitPosition = 0x16;\n  temp2 = 0x200000;\n  do {\n    iterator = shiftedMask + temp2;\n    if (iterator <= (int)result) {\n      result = result - iterator;\n      shiftedMask = iterator + temp2;\n      rounds = rounds + temp2;\n    }\n    bitPosition = bitPosition + -1;\n    result = result * 2 - ((int)shiftedInput2 >> 0x1f);\n    temp2 = temp2 >> 1;\n    shiftedInput2 = shiftedInput2 << 1;\n  } while (bitPosition != 0);\n  iterator = 0x20;\n  bitMask = 0x80000000;\n  bitPosition = 0;\n  temp2 = 0;\n  do {\n    temp = bitMask + bitPosition;\n    temp3 = shiftedMask;\n    if ((int)shiftedMask < (int)result) {\n      if ((int)temp < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp + bitMask)) {\n          temp3 = shiftedMask + 1;\n        }\n      }\n      shiftedResult = result - shiftedMask;\n      shiftedMask = temp3;\n      if (shiftedInput2 < temp) {\n        shiftedResult = shiftedResult - 1;\n      }\nLAB_0800a262:\n      bitPosition = temp + bitMask;\n      shiftedInput2 = shiftedInput2 - temp;\n      temp2 = temp2 + bitMask;\n      result = shiftedResult;\n    }\n    else if ((result == shiftedMask) && (temp <= shiftedInput2)) {\n      if ((int)temp < 0) goto LAB_0800a26a;\n      shiftedResult = 0;\n      shiftedMask = result;\n      goto LAB_0800a262;\n    }\n    iterator = iterator + -1;\n    bitMask = bitMask >> 1;\n    result = result * 2 - ((int)shiftedInput2 >> 0x1f);\n    shiftedInput2 = shiftedInput2 << 1;\n    if (iterator == 0) {\n      if ((result | shiftedInput2) == 0) {\n        temp2 = temp2 >> 1;\n      }\n      else if (temp2 == 0xffffffff) {\n        rounds = rounds + 1;\n        temp2 = 0;\n      }\n      else {\n        temp2 = temp2 + 1 >> 1;\n      }\n      if ((rounds & 1) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_result_0800a1bc",
                "param_1": "input",
                "param_2": "mask",
                "uVar1": "shiftedMask",
                "iVar2": "iterator",
                "uVar3": "temp",
                "uVar4": "shiftedInput",
                "uVar5": "temp2",
                "uVar6": "bitMask",
                "uVar7": "result",
                "uVar8": "shiftedResult",
                "uVar9": "shiftedInput2",
                "iVar10": "bitPosition",
                "uVar11": "temp3",
                "uVar12": "rounds",
                "uVar13": "tempResult"
            },
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_result_0800a348",
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  uint masked_input_2;\n  undefined8 temp_3;\n  undefined8 temp_4;\n  undefined8 temp_5;\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  \n  masked_input_2 = input_2 & 0x7fffffff;\n  if (masked_input_2 < 0x3e400000) {\n    result = FUN_08008ba0();\n    if (result == 0) {\n      return 0;\n    }\n    temp_3 = FUN_08008640(input_1,input_2,input_1,input_2);\n    temp_2 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_1 = (undefined4)temp_3;\n    temp_4 = FUN_08008640(temp_1,temp_2,0xbe8838d4,0xbda8fae9);\n    temp_4 = FUN_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x16c15177,0x3f56c16c);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x5555554c,0x3fa55555);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n  }\n  else {\n    temp_3 = FUN_08008640(input_1,input_2,input_1,input_2);\n    temp_2 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_1 = (undefined4)temp_3;\n    temp_4 = FUN_08008640(temp_1,temp_2,0xbe8838d4,0xbda8fae9);\n    temp_4 = FUN_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x16c15177,0x3f56c16c);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    temp_4 = FUN_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x5555554c,0x3fa55555);\n    temp_4 = FUN_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),temp_1,temp_2);\n    if (0x3fd33332 < masked_input_2) {\n      if (masked_input_2 < 0x3fe90001) {\n        result = masked_input_2 - 0x200000;\n        temp_3 = FUN_080082d0(0,0x3ff00000,0,result);\n      }\n      else {\n        result = 0x3fd20000;\n        temp_3 = 0x3fe7000000000000;\n      }\n      result_4 = (undefined4)((ulonglong)temp_3 >> 0x20);\n      result_3 = (undefined4)temp_3;\n      temp_3 = FUN_08008640(temp_1,temp_2,0,0x3fe00000);\n      temp_3 = FUN_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0,result);\n      temp_4 = FUN_08008640(temp_1,temp_2,(int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n      temp_5 = FUN_08008640(input_1,input_2,input_3,input_4);\n      temp_4 = FUN_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),(int)temp_5,\n                           (int)((ulonglong)temp_5 >> 0x20));\n      temp_3 = FUN_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                           (int)((ulonglong)temp_4 >> 0x20));\n      temp_1 = FUN_080082d0(result_3,result_4,(int)temp_3,(int)((ulonglong)temp_3 >> 0x20));\n      return temp_1;\n    }\n  }\n  result_2 = (undefined4)((ulonglong)temp_4 >> 0x20);\n  result_1 = (undefined4)temp_4;\n  temp_1 = (undefined4)((ulonglong)temp_3 >> 0x20);\n  temp_4 = FUN_08008640((int)temp_3,temp_1,0,0x3fe00000);\n  temp_3 = FUN_08008640((int)temp_3,temp_1,result_1,result_2);\n  temp_5 = FUN_08008640(input_1,input_2,input_3,input_4);\n  temp_3 = FUN_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_5,\n                       (int)((ulonglong)temp_5 >> 0x20));\n  temp_3 = FUN_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),(int)temp_3,\n                       (int)((ulonglong)temp_3 >> 0x20));\n  temp_1 = FUN_080082d0(0,0x3ff00000,(int)temp_3,(int)((ulonglong)temp_3 >> 0x20));\n  return temp_1;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "uVar4": "masked_input_2",
                "uVar5": "temp_3",
                "uVar6": "temp_4",
                "uVar7": "temp_5",
                "local_30": "result_1",
                "uStack_2c": "result_2",
                "local_28": "result_3",
                "uStack_24": "result_4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculateResult_0800a5a0(int input_value,undefined8 *result_array,int array_length,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *ptr1;\n  uint result;\n  uint temp_result;\n  int loop_variable_1;\n  uint *ptr2;\n  undefined4 temp_value_1;\n  uint **ptr_ptr;\n  undefined4 temp_value_2;\n  int loop_variable_2;\n  undefined4 *ptr3;\n  undefined4 temp_value_3;\n  uint temp_value_4;\n  uint *ptr4;\n  int loop_variable_3;\n  int temp_var_1;\n  undefined8 *ptr16;\n  int temp_var_2;\n  undefined4 *ptr18;\n  undefined8 *ptr19;\n  undefined4 result0;\n  int temp_var_5;\n  undefined8 *ptr5;\n  undefined4 *ptr6;\n  bool is_true;\n  undefined8 temp_value_5;\n  undefined8 temp_value_6;\n  undefined8 temp_value_7;\n  undefined8 *stack_array;\n  int stack_var_1;\n  int stack_var_2;\n  int stack_var_3;\n  uint *stack_array_ptr [2];\n  uint result_array_copy [20];\n  undefined8 temp_stack_var_1;\n  undefined8 local_var_1;\n  int local_array [38];\n  undefined8 temp_stack_var_2;\n  \n  temp_var_1 = *(int *)(&DAT_0800c060 + param_5 * 4);\n  loop_variable_2 = param_4 + -1;\n  stack_array_ptr[1] = (uint *)result_array;\n  if (array_length + 0x14 < 0 == SCARRY4(array_length,0x14)) {\n    stack_var_3 = (array_length + -3) / 0x18;\n    stack_var_2 = (stack_var_3 + 1) * -0x18;\n  }\n  else {\n    stack_var_2 = -0x18;\n    stack_var_3 = 0;\n  }\n  stack_var_2 = array_length + stack_var_2;\n  temp_var_2 = stack_var_3 - loop_variable_2;\n  if (-1 < temp_var_1 + loop_variable_2) {\n    temp_var_5 = temp_var_1 + loop_variable_2 + 1 + temp_var_2;\n    ptr16 = &temp_stack_var_1;\n    do {\n      while (temp_var_2 < 0) {\n        temp_var_2 = temp_var_2 + 1;\n        *(undefined4 *)ptr16 = 0;\n        *(undefined4 *)((int)ptr16 + 4) = 0;\n        ptr16 = ptr16 + 1;\n        if (temp_var_2 == temp_var_5) goto LAB_0800a626;\n      }\n      temp_value_6 = FUN_0800856c(*(undefined4 *)(param_6 + temp_var_2 * 4));\n      temp_var_2 = temp_var_2 + 1;\n      *ptr16 = temp_value_6;\n      ptr16 = ptr16 + 1;\n    } while (temp_var_2 != temp_var_5);\n  }\nLAB_0800a626:\n  ptr3 = (undefined4 *)(input_value + -8);\n  if (-1 < temp_var_1) {\n    ptr5 = &temp_stack_var_1 + param_4;\n    temp_var_2 = loop_variable_2;\n    ptr16 = &temp_stack_var_2;\n    do {\n      if (loop_variable_2 < 0) {\n        temp_value_6 = 0;\n      }\n      else {\n        temp_value_6 = 0;\n        ptr6 = ptr3;\n        ptr19 = ptr5;\n        do {\n          ptr18 = ptr6 + 2;\n          temp_value_5 = FUN_08008640(*ptr18,ptr6[3],*(undefined4 *)(ptr19 + -1),\n                                *(undefined4 *)((int)ptr19 + -4));\n          temp_value_6 = FUN_080082d4((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),(int)temp_value_5,\n                                (int)((ulonglong)temp_value_5 >> 0x20));\n          ptr6 = ptr18;\n          ptr19 = ptr19 + -1;\n        } while (ptr18 != ptr3 + param_4 * 2);\n      }\n      temp_var_2 = temp_var_2 + 1;\n      *ptr16 = temp_value_6;\n      ptr5 = ptr5 + 1;\n      ptr16 = ptr16 + 1;\n    } while (temp_var_2 != temp_var_1 + param_4);\n  }\n  stack_array_ptr[0] = result_array_copy + temp_var_1 + -1;\n  temp_var_2 = temp_var_1;\n  do {\n    temp_value_6 = CONCAT44(*(undefined4 *)((int)&temp_stack_var_2 + temp_var_2 * 8 + 4),\n                      *(undefined4 *)(&temp_stack_var_2 + temp_var_2));\n    if (0 < temp_var_2) {\n      ptr16 = &temp_stack_var_2 + temp_var_2;\n      ptr2 = result_array_copy;\n      do {\n        temp_value_1 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n        FUN_08008640((int)temp_value_6,temp_value_1,0,0x3e700000);\n        FUN_08008ba0();\n        temp_value_5 = FUN_0800856c();\n        temp_value_2 = (undefined4)((ulonglong)temp_value_5 >> 0x20);\n        temp_value_7 = FUN_08008640((int)temp_value_5,temp_value_2,0,0x41700000);\n        FUN_080082d0((int)temp_value_6,temp_value_1,(int)temp_value_7,(int)((ulonglong)temp_value_7 >> 0x20));\n        result = FUN_08008ba0();\n        ptr5 = ptr16 + -1;\n        temp_value_1 = *(undefined4 *)ptr5;\n        temp_value_3 = *(undefined4 *)((int)ptr16 + -4);\n        *ptr2 = result;\n        temp_value_6 = FUN_080082d4((int)temp_value_5,temp_value_2,temp_value_1,temp_value_3);\n        ptr16 = ptr5;\n        ptr2 = ptr2 + 1;\n      } while (ptr5 != &temp_stack_var_2);\n    }\n    temp_value_6 = FUN_0800b2e8((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),stack_var_2);\n    temp_value_2 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n    FUN_08008640((int)temp_value_6,temp_value_2,0,0x3fc00000);\n    temp_value_5 = FUN_080094c0();\n    temp_value_5 = FUN_08008640((int)temp_value_5,(int)((ulonglong)temp_value_5 >> 0x20),0,0x40200000);\n    temp_value_6 = FUN_080082d0((int)temp_value_6,temp_value_2,(int)temp_value_5,(int)((ulonglong)temp_value_5 >> 0x20));\n    result = FUN_08008ba0();\n    temp_value_5 = FUN_0800856c();\n    temp_value_6 = FUN_080082d0((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),(int)temp_value_5,\n                          (int)((ulonglong)temp_value_5 >> 0x20));\n    temp_value_1 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n    temp_value_2 = (undefined4)temp_value_6;\n    if (stack_var_2 < 1) {\n      if (stack_var_2 == 0) {\n        temp_var_5 = (int)result_array_copy[temp_var_2 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      temp_var_5 = FUN_08008b4c(temp_value_2,temp_value_1,0,0x3fe00000);\n      if (temp_var_5 != 0) {\n        result = result + 1;\n        if (temp_var_2 < 1) {\n          temp_value_6 = FUN_080082d0(0,0x3ff00000,temp_value_2,temp_value_1);\n          temp_var_5 = 2;\n          goto LAB_0800a7a4;\n        }\n        temp_var_5 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      loop_variable_1 = (int)result_array_copy[temp_var_2 + -1] >> (0x18U - stack_var_2 & 0xff);\n      temp_value_4 = result_array_copy[temp_var_2 + -1] - (loop_variable_1 << (0x18U - stack_var_2 & 0xff));\n      temp_var_5 = (int)temp_value_4 >> (0x17U - stack_var_2 & 0xff);\n      result_array_copy[temp_var_2 + -1] = temp_value_4;\n      result = result + loop_variable_1;\njoined_r0x0800a8b8:\n      if (0 < temp_var_5) {\n        result = result + 1;\n        if (temp_var_2 < 1) {\n          is_true = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (result_array_copy[0] == 0) {\n            is_true = false;\n            if (temp_var_2 != 1) {\n              ptr2 = result_array_copy;\n              loop_variable_1 = 1;\n              do {\n                ptr2 = ptr2 + 1;\n                if (*ptr2 != 0) {\n                  loop_variable_3 = loop_variable_1 + 1;\n                  temp_value_4 = *ptr2;\n                  goto LAB_0800a8e2;\n                }\n                loop_variable_1 = loop_variable_1 + 1;\n              } while (loop_variable_1 != temp_var_2);\n              is_true = false;\n            }\n          }\n          else {\n            loop_variable_3 = 1;\n            loop_variable_1 = 0;\n            temp_value_4 = result_array_copy[0];\nLAB_0800a8e2:\n            result_array_copy[loop_variable_1] = 0x1000000 - temp_value_4;\n            if (loop_variable_3 < temp_var_2) {\n              temp_value_4 = result_array_copy[loop_variable_3];\n              ptr2 = result_array_copy + loop_variable_3;\n              while( true ) {\n                ptr4 = ptr2 + 1;\n                *ptr2 = 0xffffff - temp_value_4;\n                if (ptr4 == result_array_copy + temp_var_2) break;\n                temp_value_4 = *ptr4;\n                ptr2 = ptr4;\n              }\n            }\n            is_true = true;\n          }\n        }\n        if (0 < stack_var_2) {\n          if (stack_var_2 == 1) {\n            result_array_copy[temp_var_2 + -1] = result_array_copy[temp_var_2 + -1] & 0x7fffff;\n          }\n          else if (stack_var_2 == 2) {\n            result_array_copy[temp_var_2 + -1] = result_array_copy[temp_var_2 + -1] & 0x3fffff;\n          }\n        }\n        if (temp_var_5 == 2) {\n          temp_value_6 = FUN_080082d0(0,0x3ff00000,temp_value_2,temp_value_1);\n          if (is_true) {\n            temp_value_5 = FUN_0800b2e8(0,0x3ff00000,stack_var_2);\n            temp_value_6 = FUN_080082d0((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),(int)temp_value_5,\n                                  (int)((ulonglong)temp_value_5 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp_value_2 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n    loop_variable_1 = FUN_08008b10((int)temp_value_6,temp_value_2,0,0);\n    if (loop_variable_1 == 0) {\n      temp_value_6 = FUN_0800b2e8((int)temp_value_6,temp_value_2,-stack_var_2);\n      temp_value_1 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n      temp_value_2 = (undefined4)temp_value_6;\n      loop_variable_2 = FUN_08008b4c(temp_value_2,temp_value_1,0,0x41700000);\n      if (loop_variable_2 == 0) {\n        temp_value_4 = FUN_08008ba0(temp_value_2,temp_value_1);\n        result_array_copy[temp_var_2] = temp_value_4;\n        loop_variable_1 = temp_var_2;\n      }\n      else {\n        FUN_08008640(temp_value_2,temp_value_1,0,0x3e700000);\n        temp_value_4 = FUN_08008ba0();\n        temp_value_6 = FUN_0800856c();\n        temp_value_6 = FUN_08008640((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),0,0x41700000);\n        FUN_080082d0(temp_value_2,temp_value_1,(int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20));\n        temp_result = FUN_08008ba0();\n        stack_var_2 = stack_var_2 + 0x18;\n        result_array_copy[temp_var_2] = temp_result;\n        result_array_copy[temp_var_2 + 1] = temp_value_4;\n        loop_variable_1 = temp_var_2 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    loop_variable_1 = temp_var_2 + -1;\n    if (temp_var_1 <= loop_variable_1) {\n      temp_value_4 = 0;\n      ptr2 = result_array_copy + temp_var_2 + 0x3fffffff;\n      do {\n        ptr4 = ptr2 + -1;\n        temp_value_4 = temp_value_4 | *ptr2;\n        ptr2 = ptr4;\n      } while (ptr4 != stack_array_ptr[0]);\n      if (temp_value_4 != 0) break;\n    }\n    if (result_array_copy[temp_var_1 + -1] == 0) {\n      stack_var_1 = 1;\n      ptr_ptr = stack_array_ptr + temp_var_1;\n      do {\n        ptr2 = *ptr_ptr;\n        stack_var_1 = stack_var_1 + 1;\n        ptr_ptr = ptr_ptr + -1;\n      } while (ptr2 == (uint *)0x0);\n      stack_var_1 = temp_var_2 + stack_var_1;\n    }\n    else {\n      stack_var_1 = temp_var_2 + 1;\n    }\n    temp_var_5 = temp_var_2 + 1;\n    ptr6 = (undefined4 *)(param_6 + (temp_var_5 + stack_var_3 + 0x3fffffff) * 4);\n    ptr16 = &temp_stack_var_1 + temp_var_2 + param_4;\n    stack_array = &temp_stack_var_2 + temp_var_5;\n    do {\n      ptr6 = ptr6 + 1;\n      temp_value_6 = FUN_0800856c(*ptr6);\n      *ptr16 = temp_value_6;\n      ptr5 = ptr16 + 1;\n      if (loop_variable_2 < 0) {\n        temp_value_5 = 0;\n      }\n      else {\n        temp_value_5 = 0;\n        ptr18 = ptr3;\n        while( true ) {\n          ptr16 = ptr16 + -1;\n          ptr1 = ptr18 + 2;\n          temp_value_6 = FUN_08008640((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),*ptr1,ptr18[3]);\n          temp_value_5 = FUN_080082d4((int)temp_value_5,(int)((ulonglong)temp_value_5 >> 0x20),(int)temp_value_6,\n                                (int)((ulonglong)temp_value_6 >> 0x20));\n          if (ptr1 == ptr3 + param_4 * 2) break;\n          temp_value_6 = *ptr16;\n          ptr18 = ptr1;\n        }\n      }\n      *stack_array = temp_value_5;\n      temp_var_5 = temp_var_5 + 1;\n      temp_var_2 = stack_var_1;\n      ptr16 = ptr5;\n      stack_array = stack_array + 1;\n    } while (temp_var_5 <= stack_var_1);\n  } while( true );\n  stack_var_2 = stack_var_2 + -0x18;\n  if (result_array_copy[loop_variable_1] == 0) {\n    ptr2 = result_array_copy + temp_var_2 + 0x3ffffffe;\n    do {\n      temp_value_4 = *ptr2;\n      loop_variable_1 = loop_variable_1 + -1;\n      stack_var_2 = stack_var_2 + -0x18;\n      ptr2 = ptr2 + -1;\n    } while (temp_value_4 == 0);\n  }\nLAB_0800a9f6:\n  temp_value_6 = FUN_0800b2e8(0,0x3ff00000,stack_var_2);\n  if (loop_variable_1 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        temp_value_6 = 0;\nLAB_0800abe4:\n        if (temp_var_5 == 0) {\n          *stack_array_ptr[1] = (undefined4)local_var_1;\n          *(int *)((int)stack_array_ptr[1] + 4) = local_var_1._4_4_;\n          *(undefined8 *)((int)stack_array_ptr[1] + 0x10) = temp_value_6;\n          *(int *)((int)stack_array_ptr[1] + 8) = local_array[0];\n          *(int *)((int)stack_array_ptr[1] + 0xc) = local_array[1];\n          return result & 7;\n        }\n        *(int *)((int)stack_array_ptr[1] + 0x10) = (int)temp_value_6;\n        *(int *)((int)stack_array_ptr[1] + 8) = local_array[0];\n        *(int *)((int)stack_array_ptr[1] + 0x14) = (int)((ulonglong)temp_value_6 >> 0x20) + -0x80000000;\n        *(int *)((int)stack_array_ptr[1] + 4) = local_var_1._4_4_ + -0x80000000;\n        *(int *)((int)stack_array_ptr[1] + 0xc) = local_array[1] + -0x80000000;\n        *stack_array_ptr[1] = (undefined4)local_var_1;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      temp_value_6 = 0;\nLAB_0800aafc:\n      loop_variable_2 = (int)((ulonglong)temp_value_6 >> 0x20);\n      if (temp_var_5 != 0) {\n        loop_variable_2 = loop_variable_2 + -0x80000000;\n      }\n      *stack_array_ptr[1] = (int)temp_value_6;\n      *(int *)((int)stack_array_ptr[1] + 4) = loop_variable_2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    temp_value_6 = 0;\n  }\n  else {\n    ptr5 = &temp_stack_var_2 + loop_variable_1;\n    ptr2 = result_array_copy + loop_variable_1 + 1;\n    ptr16 = &temp_stack_var_2 + loop_variable_1 + 1;\n    do {\n      temp_value_2 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n      ptr2 = ptr2 + -1;\n      temp_value_5 = FUN_0800856c(*ptr2);\n      temp_value_5 = FUN_08008640((int)temp_value_5,(int)((ulonglong)temp_value_5 >> 0x20),(int)temp_value_6,temp_value_2);\n      ptr16 = ptr16 + -1;\n      *ptr16 = temp_value_5;\n      temp_value_6 = FUN_08008640((int)temp_value_6,temp_value_2,0,0x3e700000);\n    } while (ptr2 != result_array_copy);\n    loop_variable_2 = 0;\n    do {\n      if (temp_var_1 < 0) {\n        temp_value_6 = 0;\n      }\n      else {\n        temp_value_2 = 0x40000000;\n        temp_value_1 = 0x3ff921fb;\n        temp_value_6 = 0;\n        temp_var_2 = 0;\n        ptr16 = ptr5;\n        ptr3 = &DAT_0800c028;\n        while( true ) {\n          temp_value_5 = FUN_08008640(*(undefined4 *)ptr16,*(undefined4 *)((int)ptr16 + 4),temp_value_2,temp_value_1\n                               );\n          temp_value_6 = FUN_080082d4((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),(int)temp_value_5,\n                                (int)((ulonglong)temp_value_5 >> 0x20));\n          temp_var_2 = temp_var_2 + 1;\n          if ((temp_var_1 < temp_var_2) || (loop_variable_2 < temp_var_2)) break;\n          temp_value_2 = *ptr3;\n          temp_value_1 = ptr3[1];\n          ptr16 = ptr16 + 1;\n          ptr3 = ptr3 + 2;\n        }\n      }\n      is_true = loop_variable_2 != loop_variable_1;\n      *(int *)(&local_var_1 + loop_variable_2) = (int)temp_value_6;\n      *(int *)((int)&local_var_1 + (loop_variable_2 * 2 + 1) * 4) = (int)((ulonglong)temp_value_6 >> 0x20);\n      ptr5 = ptr5 + -1;\n      loop_variable_2 = loop_variable_2 + 1;\n    } while (is_true);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (loop_variable_1 != 0) {\n          ptr16 = &local_var_1 + loop_variable_1;\n          temp_value_6 = CONCAT44(*(undefined4 *)((int)&local_var_1 + (loop_variable_1 * 2 + 1) * 4),\n                            *(undefined4 *)ptr16);\n          do {\n            temp_value_1 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n            temp_value_2 = (undefined4)temp_value_6;\n            temp_value_3 = *(undefined4 *)(ptr16 + -1);\n            result0 = *(undefined4 *)((int)ptr16 + -4);\n            temp_value_6 = FUN_080082d4(temp_value_2,temp_value_1,temp_value_3,result0);\n            temp_value_5 = FUN_080082d0(temp_value_3,result0,(int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20));\n            temp_value_5 = FUN_080082d4((int)temp_value_5,(int)((ulonglong)temp_value_5 >> 0x20),temp_value_2,temp_value_1);\n            *ptr16 = temp_value_5;\n            ptr16 = ptr16 + -1;\n            *ptr16 = temp_value_6;\n          } while (&local_var_1 != ptr16);\n          if (1 < loop_variable_1) {\n            ptr16 = &local_var_1 + loop_variable_1;\n            temp_value_6 = CONCAT44(*(undefined4 *)((int)&local_var_1 + (loop_variable_1 * 2 + 1) * 4),\n                              *(undefined4 *)ptr16);\n            do {\n              temp_value_1 = (undefined4)((ulonglong)temp_value_6 >> 0x20);\n              temp_value_2 = (undefined4)temp_value_6;\n              temp_value_3 = *(undefined4 *)(ptr16 + -1);\n              result0 = *(undefined4 *)((int)ptr16 + -4);\n              temp_value_6 = FUN_080082d4(temp_value_2,temp_value_1,temp_value_3,result0);\n              temp_value_5 = FUN_080082d0(temp_value_3,result0,(int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20));\n              temp_value_5 = FUN_080082d4((int)temp_value_5,(int)((ulonglong)temp_value_5 >> 0x20),temp_value_2,temp_value_1);\n              *ptr16 = temp_value_5;\n              ptr16 = ptr16 + -1;\n              *ptr16 = temp_value_6;\n            } while (&local_var_1 + 1 != ptr16);\n            temp_value_6 = 0;\n            ptr16 = &local_var_1 + loop_variable_1 + 1;\n            do {\n              ptr5 = ptr16 + -1;\n              temp_value_6 = FUN_080082d4((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),\n                                    *(undefined4 *)ptr5,*(undefined4 *)((int)ptr16 + -4));\n              ptr16 = ptr5;\n            } while (&local_var_1 + 2 != ptr5);\n            goto LAB_0800abe4;\n          }\n        }\n        temp_value_6 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      temp_value_6 = 0;\n      ptr16 = &local_var_1 + loop_variable_1 + 1;\n      do {\n        ptr5 = ptr16 + -1;\n        temp_value_6 = FUN_080082d4((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),*(undefined4 *)ptr5,\n                              *(undefined4 *)((int)ptr16 + -4));\n        ptr16 = ptr5;\n      } while (&local_var_1 != ptr5);\n      goto LAB_0800aafc;\n    }\n    temp_value_6 = 0;\n    ptr16 = &local_var_1 + loop_variable_1 + 1;\n    do {\n      ptr5 = ptr16 + -1;\n      temp_value_6 = FUN_080082d4((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),*(undefined4 *)ptr5,\n                            *(undefined4 *)((int)ptr16 + -4));\n      ptr16 = ptr5;\n    } while (&local_var_1 != ptr5);\n  }\n  loop_variable_2 = (int)((ulonglong)temp_value_6 >> 0x20);\n  temp_value_2 = (undefined4)temp_value_6;\n  if (temp_var_5 == 0) {\n    *(undefined8 *)stack_array_ptr[1] = temp_value_6;\n    temp_value_6 = FUN_080082d0((undefined4)local_var_1,local_var_1._4_4_,temp_value_2,loop_variable_2);\n    if (loop_variable_1 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    loop_variable_2 = 1;\n    ptr16 = &local_var_1;\n    do {\n      temp_value_6 = FUN_080082d4((int)temp_value_6,(int)((ulonglong)temp_value_6 >> 0x20),\n                            *(undefined4 *)(ptr16 + 1),*(undefined4 *)((int)ptr16 + 0xc));\n      loop_variable_2 = loop_variable_2 + 1;\n      ptr16 = ptr16 + 1;\n    } while (loop_variable_2 <= loop_variable_1);\n    if (temp_var_5 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *stack_array_ptr[1] = temp_value_2;\n    *(int *)((int)stack_array_ptr[1] + 4) = loop_variable_2 + -0x80000000;\n    temp_value_6 = FUN_080082d0((undefined4)local_var_1,local_var_1._4_4_,temp_value_2,loop_variable_2);\n    if (0 < loop_variable_1) goto LAB_0800ad04;\n  }\n  temp_value_6 = CONCAT44((int)((ulonglong)temp_value_6 >> 0x20) + -0x80000000,(int)temp_value_6);\nLAB_0800ad26:\n  *(undefined8 *)((int)stack_array_ptr[1] + 8) = temp_value_6;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "param_1": "input_value",
                "param_2": "result_array",
                "param_3": "array_length",
                "puVar1": "ptr1",
                "uVar2": "result",
                "uVar3": "temp_result",
                "iVar4": "loop_variable_1",
                "puVar5": "ptr2",
                "uVar6": "temp_value_1",
                "ppuVar7": "ptr_ptr",
                "uVar8": "temp_value_2",
                "iVar9": "loop_variable_2",
                "puVar10": "ptr3",
                "uVar11": "temp_value_3",
                "uVar12": "temp_value_4",
                "puVar13": "ptr4",
                "iVar14": "loop_variable_3",
                "iVar15": "temp_var_1",
                "iVar17": "temp_var_2",
                "uVar18": "temp_var_3",
                "iVar21": "temp_var_5",
                "puVar22": "ptr5",
                "puVar23": "ptr6",
                "bVar24": "is_true",
                "uVar25": "temp_value_5",
                "uVar26": "temp_value_6",
                "uVar27": "temp_value_7",
                "local_284": "stack_array",
                "local_280": "stack_var_1",
                "local_270": "stack_var_2",
                "local_26c": "stack_var_3",
                "local_260": "stack_array_ptr",
                "local_258": "result_array_copy",
                "local_168": "local_var_1",
                "local_160": "local_array",
                "uStack_208": "temp_stack_var_1",
                "uStack_c8": "temp_stack_var_2"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_080082d0",
                "FUN_0800856c",
                "FUN_080094c0",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_result_0800adf0",
            "code": "\nundefined4\ncalculateResult_0800adf0(undefined4 input1,uint input2,undefined4 input3,undefined4 input4,int shouldReverse)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined8 temp6;\n  undefined8 temp7;\n  \n  if (((input2 & 0x7fffffff) < 0x3e400000) && (result = FUN_08008ba0(), result == 0)) {\n    return input1;\n  }\n  temp6 = FUN_08008640(input1,input2,input1);\n  temp3 = (undefined4)((ulonglong)temp6 >> 0x20);\n  temp2 = (undefined4)temp6;\n  temp6 = FUN_08008640(input1,input2,temp2,temp3);\n  temp4 = (undefined4)((ulonglong)temp6 >> 0x20);\n  temp1 = (undefined4)temp6;\n  temp6 = FUN_08008640(temp2,temp3,0x5acfd57c,0x3de5d93a);\n  temp6 = FUN_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp6 = FUN_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp2,temp3);\n  temp6 = FUN_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp6 = FUN_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp2,temp3);\n  temp6 = FUN_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp6 = FUN_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp2,temp3);\n  temp6 = FUN_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x1110f8a6,0x3f811111);\n  temp5 = (undefined4)((ulonglong)temp6 >> 0x20);\n  if (shouldReverse != 0) {\n    temp7 = FUN_08008640(input3,input4,0,0x3fe00000);\n    temp6 = FUN_08008640(temp1,temp4,(int)temp6,temp5);\n    temp6 = FUN_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,\n                         (int)((ulonglong)temp6 >> 0x20));\n    temp6 = FUN_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp2,temp3);\n    temp6 = FUN_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),input3,input4);\n    temp7 = FUN_08008640(temp1,temp4,0x55555549,0x3fc55555);\n    temp6 = FUN_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                         (int)((ulonglong)temp7 >> 0x20));\n    temp2 = FUN_080082d0(input1,input2,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n    return temp2;\n  }\n  temp6 = FUN_08008640(temp2,temp3,(int)temp6,temp5);\n  temp6 = FUN_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x55555549,0x3fc55555);\n  temp6 = FUN_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp1,temp4);\n  temp2 = FUN_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),input1,input2);\n  return temp2;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "shouldReverse",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_result_0800af78",
            "code": "\nint calculateResult_0800af78(int input1,uint input2)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  int result;\n  undefined4 temp5;\n  uint temp6;\n  undefined8 temp7;\n  undefined8 temp8;\n  undefined4 temp9;\n  \n  temp7 = CONCAT44(input2,input1);\n  temp6 = input2 & 0x7fffffff;\n  if (temp6 < 0x44100000) {\n    if (temp6 < 0x3fdc0000) {\n      if (temp6 < 0x3e200000) {\n        temp8 = FUN_080082d4(input1,input2,0x8800759c,0x7e37e43c);\n        result = FUN_08008b60((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return input1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp7 = FUNC_0800b2cc();\n      temp4 = (undefined4)((ulonglong)temp7 >> 0x20);\n      temp1 = (undefined4)temp7;\n      if (temp6 < 0x3ff30000) {\n        if (temp6 < 0x3fe60000) {\n          temp7 = FUN_080082d4(temp1,temp4,temp1,temp4);\n          temp7 = FUN_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3ff00000);\n          temp8 = FUN_080082d4(temp1,temp4,0,0x40000000);\n          temp7 = FUN_08008894((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n                               (int)((ulonglong)temp8 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp7 = FUN_080082d0(temp1,temp4,0,0x3ff00000);\n          temp8 = FUN_080082d4(temp1,temp4,0,0x3ff00000);\n          temp7 = FUN_08008894((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n                               (int)((ulonglong)temp8 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp6 < 0x40038000) {\n        temp7 = FUN_080082d0(temp1,temp4,0,0x3ff80000);\n        temp8 = FUN_08008640(temp1,temp4,0,0x3ff80000);\n        temp8 = FUN_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        temp7 = FUN_08008894((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n                             (int)((ulonglong)temp8 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp7 = FUN_08008894(0,0xbff00000,temp1,temp4);\n        result = 3;\n      }\n    }\n    temp9 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp5 = (undefined4)temp7;\n    temp7 = FUN_08008640(temp5,temp9,temp5);\n    temp2 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp1 = (undefined4)temp7;\n    temp7 = FUN_08008640(temp1,temp2,temp1,temp2);\n    temp3 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp4 = (undefined4)temp7;\n    temp7 = FUN_08008640(temp4,temp3,0xe322da11,0x3f90ad3a);\n    temp7 = FUN_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp7 = FUN_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = FUN_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp7 = FUN_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = FUN_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp7 = FUN_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = FUN_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x920083ff,0x3fc24924);\n    temp7 = FUN_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = FUN_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x5555550d,0x3fd55555);\n    temp7 = FUN_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp1,temp2);\n    temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp8 = FUN_08008640(temp4,temp3,0x2c6a6c2f,0xbfa2b444);\n    temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp8 = FUN_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp8 = FUN_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp8 = FUN_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp8 = FUN_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp4 = (undefined4)((ulonglong)temp8 >> 0x20);\n    if (result == -1) {\n      temp7 = FUN_080082d4((int)temp7,temp1,(int)temp8,temp4);\n      temp7 = FUN_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp9);\n      result = FUN_080082d0(temp5,temp9,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n      return result;\n    }\n    temp7 = FUN_080082d4((int)temp7,temp1,(int)temp8,temp4);\n    temp7 = FUN_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp9);\n    temp7 = FUN_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + result * 8),\n                         *(undefined4 *)(&UNK_0800c094 + result * 8));\n    temp7 = FUN_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp5,temp9);\n    result = FUN_080082d0(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                         *(undefined4 *)(&UNK_0800c074 + result * 8),(int)temp7,\n                         (int)((ulonglong)temp7 >> 0x20));\n    if ((int)input2 < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp6) || ((temp6 == 0x7ff00000 && (input1 != 0)))) {\n      result = FUN_080082d4(input1,input2,input1);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "result",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "local_2c": "temp9"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_08008b60",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_08009990"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "calculate_shifted_value_0800b2d4",
            "code": "\nuint calculateShiftedValue_0800b2d4(undefined4 inputValue,uint flag)\n\n{\n  return (flag | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "calculate_shifted_value_0800b2d4",
                "param_1": "inputValue",
                "param_2": "flag"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "do_nothing_0800b2e0",
            "code": "\nundefined4 do_nothing_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "do_nothing_0800b2e0"
            },
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculateResult_0800b2e8(uint input1,uint input2,int modifier,undefined4 constant)\n\n{\n  uint shiftedInput2;\n  int modifiedValue;\n  uint shiftedInput1;\n  undefined8 concatenatedInputs;\n  \n  concatenatedInputs = CONCAT44(input2,input1);\n  shiftedInput2 = (input2 << 1) >> 0x15;\n  if (shiftedInput2 == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    concatenatedInputs = FUN_08008640(input1,input2,0,0x43500000);\n    if (modifier < -50000) goto LAB_0800b34a;\n    shiftedInput2 = ((uint)((int)((ulonglong)concatenatedInputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shiftedInput2 == 0x7ff) {\n    shiftedInput2 = FUN_080082d4(input1,input2,input1,input2,constant);\n    return shiftedInput2;\n  }\n  shiftedInput1 = (uint)((ulonglong)concatenatedInputs >> 0x20);\n  modifiedValue = shiftedInput2 + modifier;\n  if (modifiedValue < 0x7ff) {\n    if (0 < modifiedValue) {\n      return (uint)concatenatedInputs;\n    }\n    if (modifiedValue + 0x35 < 0 == SCARRY4(modifiedValue,0x35)) {\n      shiftedInput2 = FUN_08008640((uint)concatenatedInputs,shiftedInput1 & 0x800fffff | (modifiedValue + 0x36) * 0x100000,0,0x3c900000);\n      return shiftedInput2;\n    }\n    if (modifier < 0xc351) {\n      concatenatedInputs = CONCAT44(shiftedInput1 & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shiftedInput2 = FUN_08008640((int)concatenatedInputs,(int)((ulonglong)concatenatedInputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shiftedInput2;\n    }\n  }\n  shiftedInput2 = FUN_08008640(0x8800759c,shiftedInput1 & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shiftedInput2;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "modifier",
                "param_4": "constant",
                "uVar1": "shiftedInput2",
                "iVar2": "modifiedValue",
                "uVar3": "shiftedInput1",
                "uVar4": "concatenatedInputs"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_data_offset_0800b3dc",
            "code": "\nundefined4 get_data_offset_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_data_offset_0800b3dc"
            },
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_functions_with_increment_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeFunctionsWithIncrement_0800b3e8(void)\n\n{\n  int counter;\n  code **functionPointer;\n  \n  FUNC_0800b5b0();\n  counter = 0;\n  functionPointer = (code **)&DAT_0800c0b4;\n  do {\n    counter = counter + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_functions_with_increment_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b5b0",
                "FUN_0800b4d0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "memset_uint32_0800b430",
            "code": "\nvoid memset_uint32_0800b430(undefined4 *dest,undefined value,uint count)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  uint remaining_count;\n  undefined4 value_uint32;\n  bool is_finished;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_count = count - 1;\n    dest_ptr = dest;\n    if (count == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      count = remaining_count;\n      if (((uint)dest & 3) == 0) break;\n      is_finished = remaining_count == 0;\n      remaining_count = remaining_count - 1;\n      dest_ptr = dest;\n      if (is_finished) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    value_uint32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < count) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value_uint32;\n        dest_ptr[-3] = value_uint32;\n        dest_ptr[-2] = value_uint32;\n        dest_ptr[-1] = value_uint32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (count - 0x10 & 0xfffffff0) + 0x20));\n      remaining_count = count & 0xc;\n      dest = dest + ((count - 0x10 >> 4) + 1) * 4;\n      count = count & 0xf;\n      if (remaining_count == 0) goto joined_r0x0800b4a8;\n    }\n    dest_ptr = (undefined4 *)((count - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      next_dest_ptr = dest + 1;\n      *dest = value_uint32;\n      dest = next_dest_ptr;\n    } while (dest_ptr != next_dest_ptr);\n    count = count & 3;\n    dest = dest_ptr;\n  }\njoined_r0x0800b4a8:\n  if (count != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while ((undefined4 *)(count + (int)dest) != next_dest_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "memset_uint32_0800b430",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "remaining_count",
                "uVar4": "value_uint32",
                "bVar5": "is_finished"
            },
            "calling": [
                "FUN_08005814",
                "FUN_08004d7c",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_08002f24",
                "FUN_08001994",
                "FUN_080002f0",
                "FUN_08001ddc",
                "FUN_080079c0",
                "FUN_080024c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "register_data_0800b524",
            "code": "\nundefined4 register_data_0800b524(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *register_ptr;\n  undefined4 result;\n  uint bit_shift;\n  uint register_count;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  register_ptr = DAT_20000168;\n  register_count = *(uint *)(DAT_20000168 + 4);\n  if ((int)register_count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + register_count * 4 + 0x88) = value1;\n      bit_shift = 1 << (register_count & 0xff);\n      *(uint *)(register_ptr + 0x188) = *(uint *)(register_ptr + 0x188) | bit_shift;\n      *(undefined4 *)(register_ptr + register_count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(register_ptr + 0x18c) = bit_shift | *(uint *)(register_ptr + 0x18c);\n      }\n    }\n    result = DAT_20000448;\n    *(uint *)(register_ptr + 4) = register_count + 1;\n    *(undefined4 *)(register_ptr + (register_count + 2) * 4) = data;\n    FUNC_0800b520(result);\n    result = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "register_data_0800b524",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "register_ptr",
                "uVar2": "result",
                "uVar3": "bit_shift",
                "uVar4": "register_count"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_08000188",
                "FUN_080001ac",
                "FUN_0800b3e8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 186274,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001994",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005bdc",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800618c",
            "FUN_0800640c",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078f4",
            "FUN_08007930",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_08008640",
            "FUN_0800881c",
            "FUN_08008894",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "thunk_FUN_08009990",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ]
    ],
    "locked_functions": []
}