{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 inputValue)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_parameters_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_parameters_080001ac(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_parameters_080001ac",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_and_reset_080001f8",
            "code": "\nvoid initialize_and_reset_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_08000210();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_and_reset_080001f8"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_08000210",
            "code": "\nvoid initialize_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "process_parameter_08000220",
            "code": "\nvoid processParameter_08000220(char input)\n\n{\n  if (input != DAT_20000468) {\n    checkMemoryAvailability();\n    if (input == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input;\n    }\n    else if (input == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input;\n    }\n    else {\n      initialize();\n      DAT_20000468 = input;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "process_parameter_08000220",
                "param_1": "input",
                "check_memory_availability_08002fd4": "checkMemoryAvailability",
                "initialize_08000210": "initialize"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_data_offset_08000268",
            "code": "\n\n\nint calculate_data_offset_08000268(void)\n\n{\n  int data;\n  \n  data = get_data_from_memory();\n  return (data + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_data_offset_08000268",
                "iVar1": "data",
                "get_data_from_memory_08005a84": "get_data_from_memory"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "check_limit_and_advance_080002a0",
            "code": "\nvoid check_limit_and_advance_080002a0(undefined4 input_param)\n\n{\n  check_limit_and_advance_080002a0_08005a98(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "check_limit_and_advance_080002a0",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "check_data_offset_080002b6",
            "code": "\nvoid check_data_offset_080002b6(uint input_param)\n\n{\n  uint data_offset_upper;\n  uint calculated_offset;\n  bool is_offset_valid;\n  longlong data_offset;\n  undefined8 new_data_offset;\n  \n  data_offset = calculate_data_offset_08000268();\n  calculated_offset = (uint)(data_offset + (ulonglong)input_param >> 0x20);\n  do {\n    new_data_offset = calculate_data_offset_08000268();\n    data_offset_upper = (uint)((ulonglong)new_data_offset >> 0x20);\n    is_offset_valid = calculated_offset <= data_offset_upper;\n    if (data_offset_upper == calculated_offset) {\n      is_offset_valid = (uint)(data_offset + (ulonglong)input_param) <= (uint)new_data_offset;\n    }\n  } while (!is_offset_valid);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "check_data_offset_080002b6",
                "param_1": "input_param",
                "uVar1": "data_offset_upper",
                "uVar2": "calculated_offset",
                "bVar3": "is_offset_valid",
                "lVar4": "data_offset",
                "uVar5": "new_data_offset"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_memory_080002f0",
            "code": "\nvoid initializeMemory_080002f0(void)\n\n{\n  fill_memory_with_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "retrieve_memory_value_08000310",
            "code": "\nundefined retrieveMemoryValue_08000310(uint memoryIndex)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  return (&DAT_20000470)[memoryIndex & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "retrieve_memory_value_08000310",
                "param_1": "memoryIndex",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "value",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_data_08000374",
            "code": "\nvoid processData_08000374(int length,char *data,int count)\n\n{\n  int remainingCount;\n  char *currentChar;\n  int currentIndex;\n  char sum;\n  \n  sum = '\\0';\n  remainingCount = count;\n  currentChar = data;\n  currentIndex = length;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    currentChar = data;\n    currentIndex = length;\n  }\n  for (; remainingCount != 0; remainingCount = remainingCount + -1) {\n    sum = (sum != '\\0') + *currentChar;\n    store_data_08000340(currentIndex,*currentChar);\n    currentChar = currentChar + 1;\n    currentIndex = currentIndex + 1;\n  }\n  store_data_08000340(currentIndex,sum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "length",
                "param_2": "data",
                "param_3": "count",
                "local_1c": "remainingCount",
                "local_18": "currentChar",
                "local_14": "currentIndex",
                "local_9": "sum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_memory_values_080003ec",
            "code": "\nbool check_memory_values_080003ec(char *buffer,int start_index,int length)\n\n{\n  char current_value;\n  uint memory_value;\n  int remaining_length;\n  int current_index;\n  char *current_buffer;\n  byte count;\n  \n  count = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_buffer = buffer;\n  if (DAT_2000046c == 0) {\n    initialize_memory();\n    current_index = start_index;\n    current_buffer = buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_value = get_memory_value(current_index);\n    count = current_value + (count != 0);\n    *current_buffer = current_value;\n    current_index = current_index + 1;\n    current_buffer = current_buffer + 1;\n  }\n  memory_value = get_memory_value(current_index);\n  return count == memory_value;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_memory_values_080003ec",
                "param_1": "buffer",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_buffer",
                "local_9": "count",
                "cVar1": "current_value",
                "uVar2": "memory_value",
                "initialize_memory_080002f0": "initialize_memory",
                "retrieve_memory_value_08000310": "get_memory_value"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_parameters_08000478",
            "code": "\nvoid initializeParameters_08000478(undefined input1,undefined input2,undefined input3)\n\n{\n  DAT_20000e89 = input1;\n  DAT_20000e8a = input2;\n  DAT_20000e8b = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_parameters_08000478",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_memory_080004ac",
            "code": "\nvoid initializeMemory_080004ac(void)\n\n{\n  int iVar1;\n  \n  fill_memory_with_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initializeParameters(0,1,2);\n  DAT_20000e74 = 1;\n  iVar1 = validateAndProcessData(DAT_20000e8c,&DAT_20000e90);\n  if (iVar1 == 0) {\n    FUNC_08004030(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_memory_080004ac",
                "initialize_parameters_08000478": "initializeParameters",
                "validate_and_process_data_08004d7c": "validateAndProcessData"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "update_floating_point_values_080004fc",
            "code": "\nvoid updateFloatingPointValues_080004fc(undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  undefined4 updatedValue;\n  \n  updatedValue = calculate_updated_value_08008e44(value_1);\n  DAT_20000e7c = calculate_floating_point_08009054(updatedValue,DAT_20000ebc);\n  updatedValue = calculate_updated_value_08008e44(value_2);\n  DAT_20000e80 = calculate_floating_point_08009054(updatedValue,DAT_20000ec0);\n  updatedValue = calculate_updated_value_08008e44(value_3);\n  DAT_20000e84 = calculate_floating_point_08009054(updatedValue,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "update_floating_point_values_080004fc",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "bitwise_operation_result_0800056c",
            "code": "\nundefined4 bitwise_operation_result_0800056c(undefined4 input_value)\n\n{\n  undefined8 bitwise_conversion_result;\n  \n  if (DAT_20000e73 != '\\0') {\n    bitwise_conversion_result = bitwise_conversion_08008590(input_value);\n    bitwise_conversion_result = calculate_bitwise_operation_08008640((int)bitwise_conversion_result,(int)((ulonglong)bitwise_conversion_result >> 0x20),0x66666666,0x40396666);\n    input_value = calculate_result_08008c30((int)bitwise_conversion_result,(int)((ulonglong)bitwise_conversion_result >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "bitwise_operation_result_0800056c",
                "param_1": "input_value",
                "uVar1": "bitwise_conversion_result"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_binary_function_080005b4",
            "code": "\nchar processBinaryFunction_080005b4(undefined4 input)\n\n{\n  int result;\n  undefined4 temp;\n  char errorCode;\n  uint temp2;\n  undefined4 temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined8 temp6;\n  undefined4 array1 [4];\n  undefined4 array2;\n  undefined4 array3;\n  undefined4 array4;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 array5 [6];\n  undefined4 input2;\n  byte ch1;\n  undefined ch2;\n  undefined4 ch3;\n  undefined4 ch4;\n  undefined bool1;\n  uint uint1;\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  char ch5;\n  uint uint2;\n  undefined4 temp9;\n  sbyte byte5;\n  char ch6;\n  char ch7;\n  undefined4 temp10;\n  byte byte6;\n  ushort ushort1;\n  uint uint3;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    errorCode = '\\f';\n  }\n  else {\n    ch2 = 0;\n    ushort1 = 0;\n    byte6 = 0;\n    temp10 = 0xbf800000;\n    ch7 = '\\0';\n    ch6 = '\\0';\n    fill_memory_with_0800b430(array5 + 3,0,0xc);\n    fill_memory_with_0800b430(array5,0,0xc);\n    DAT_20000e70 = '\\0';\n    byte5 = 0;\n    while (result = check_and_update_character_0800184c(&ch1,array5 + 6,input,&ch2), result != 0) {\n      temp4 = bitwise_conversion_08008590(input2);\n      temp4 = calculate_value_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      uint3 = calculate_unsigned_division_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      if (ch1 == 0x47) {\n        switch(uint3) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          byte5 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          byte5 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          byte5 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          byte5 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          byte5 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          byte5 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          byte5 = 6;\n        }\n        switch(uint3) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          ch6 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          ch6 = '\\x02';\n          break;\n        case 0x11:\n          initialize_parameters_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_parameters_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_parameters_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp = calculate_float_08008eec(input2,0x41200000);\n          temp4 = bitwise_conversion_08008590(temp);\n          temp4 = calculate_value_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          uint3 = calculate_unsigned_division_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          switch(uint3) {\n          case 0x118:\n            ch6 = '\\x03';\n            break;\n          case 0x119:\n            ch6 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            ch6 = '\\x05';\n            break;\n          case 0x12d:\n            ch6 = '\\x06';\n          }\n          break;\n        case 0x35:\n          ch7 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)uint3 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp = calculate_float_08008eec(input2,0x41200000);\n          temp4 = bitwise_conversion_08008590(temp);\n          temp4 = calculate_value_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          uint3 = calculate_unsigned_division_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          if (uint3 == 0x398) {\n            ch6 = '\\a';\n          }\n          else if (uint3 == 0x399) {\n            ch6 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (ch1 == 0x4d) {\n        if (uint3 == 0x1e) {\nLAB_08000b96:\n          byte5 = 5;\n        }\n        else if ((int)uint3 < 0x1f) {\n          if ((int)uint3 < 3) {\n            if (-1 < (int)uint3) goto LAB_08000b96;\n          }\n          else if (uint3 - 3 < 3) {\n            byte5 = 8;\n          }\n        }\n        switch(uint3) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (byte5 != 0) {\n        if (((int)(uint)ushort1 >> byte5 & 1U) == 0) {\n          ushort1 = ushort1 | (ushort)(1 << byte5);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        byte5 = 0;\n      }\n    }\n    errorCode = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      temp9 = 0;\n      uint2 = 0;\n      ch5 = '\\0';\n      ch2 = 0;\nswitchD_08000d18_caseD_47:\n      result = check_and_update_character_0800184c(&ch1,array5 + 6,input,&ch2);\n      if (result != 0) {\n        switch(ch1) {\n        case 0x46:\n          result = check_concatenation_result_0800923c(input2,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = bitwise_operation_result_0800056c(input2);\n          }\n          else {\n            temp10 = bitwise_operation_result_0800056c(input2);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp2 = (uint)ch1;\n          temp = bitwise_operation_result_0800056c(input2);\n          array5[temp2 - 0x49] = temp;\n          break;\n        case 0x4c:\n          temp4 = bitwise_conversion_08008590(input2);\n          temp4 = calculate_value_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          ch5 = calculate_result_08008bf0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          break;\n        case 0x50:\n          temp9 = input2;\n          break;\n        case 0x52:\n          uint2 = bitwise_operation_result_0800056c(input2);\n          break;\n        case 0x53:\n          result = is_concatenated_value_null_08009228(input2,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = is_concatenated_value_null_08009228(input2,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp4 = bitwise_conversion_08008590(input2);\n          temp4 = calculate_value_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          DAT_20000e88 = calculate_result_08008bf0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          break;\n        case 0x58:\n          array5[3] = bitwise_operation_result_0800056c(input2);\n          byte6 = byte6 | 1;\n          break;\n        case 0x59:\n          array5[4] = bitwise_operation_result_0800056c(input2);\n          byte6 = byte6 | 2;\n          break;\n        case 0x5a:\n          array5[5] = bitwise_operation_result_0800056c(input2);\n          byte6 = byte6 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      errorCode = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          manage_param_0800525c_0800525c((int)DAT_20000e76);\n          process_parameter_08000220(DAT_20000e77);\n        }\n        if ((ushort1 & 0x200) != 0) {\n          result = validate_and_process_data_08004d7c(DAT_20000e8c,&array4);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = array4;\n          DAT_20000e94 = temp7;\n          DAT_20000e98 = temp8;\n        }\n        switch(ch6) {\n        case '\\x01':\n          result = is_concatenated_value_null_08009228(temp9,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_08002408(temp9);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp4 = bitwise_conversion_08008590(temp9);\n          temp4 = calculate_value_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          uint3 = calculate_unsigned_division_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          if ((((ch5 == '\\x02') || (ch5 == '\\x14')) && (-1 < (int)uint3)) &&\n             ((int)uint3 < 7)) {\n            if ((byte6 == 0) && (ch5 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)uint3 < 1) {\n                uint3 = (uint)DAT_20000e8c;\n              }\n              else {\n                uint3 = uint3 - 1;\n              }\n              result = validate_and_process_data_08004d7c(uint3 & 0xff,array1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (byte4 = 0; byte4 < 3; byte4 = byte4 + 1) {\n                if (((int)(uint)byte6 >> byte4 & 1U) != 0) {\n                  if (ch5 == '\\x14') {\n                    temp2 = (uint)byte4;\n                    temp = calculate_float_addition_08008cd8(*(undefined4 *)(&DAT_20000e74 + (byte4 + 2) * 4),\n                                         array5[byte4 + 3]);\n                    array1[temp2] = temp;\n                  }\n                  else {\n                    array1[byte4] = array5[byte4 + 3];\n                  }\n                }\n              }\n              process_and_store_data_08004bf4(uint3 & 0xff,array1);\n              if (uint3 == DAT_20000e8c) {\n                DAT_20000e90 = array1[0];\n                DAT_20000e94 = array1[1];\n                DAT_20000e98 = array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          byte6 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (byte6 != 0) {\n            for (byte3 = 0; byte3 < 3; byte3 = byte3 + 1) {\n              if (((int)(uint)byte6 >> byte3 & 1U) == 0) {\n                array5[byte3 + 3] = *(undefined4 *)(&DAT_20000e74 + (byte3 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp2 = (uint)byte3;\n                temp = reverse_number_operation_08008cdc(array5[byte3 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (byte3 + 2) * 4));\n                array5[temp2 + 3] = temp;\n              }\n              else {\n                temp3 = array5[byte3 + 3];\n                temp = reverse_number_operation_08008cdc(*(undefined4 *)(&DAT_20000e70 + (byte3 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (byte3 + 10) * 4));\n                temp2 = (uint)byte3;\n                temp = reverse_number_operation_08008cdc(temp3,temp);\n                array5[temp2 + 3] = temp;\n              }\n            }\n            handle_data_processing_08001e98(array5[3],array5[4],array5[5],DAT_20000ed0,0);\n          }\n          if (ch6 == '\\x05') {\n            result = validate_and_process_data_08004d7c(7,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = validate_and_process_data_08004d7c(6,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          handle_data_processing_08001e98(array1[3],array2,array3,DAT_20000ed0,0);\n          DAT_20000e7c = array1[3];\n          DAT_20000e80 = array2;\n          DAT_20000e84 = array3;\n          byte6 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (ch6 == '\\x06') {\n            process_and_store_data_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_and_store_data_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (byte6 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (byte2 = 0; byte2 < 3; byte2 = byte2 + 1) {\n              if (((int)(uint)byte6 >> byte2 & 1U) != 0) {\n                temp = calculate_float_addition_08008cd8(*(undefined4 *)(&DAT_20000e74 + (byte2 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (byte2 + 8) * 4));\n                temp2 = (uint)byte2;\n                temp = calculate_float_addition_08008cd8(temp,array5[byte2 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp2 + 10) * 4) = temp;\n              }\n            }\n          }\n          byte6 = 0;\n          break;\n        case '\\b':\n          fill_memory_with_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((ushort1 & 4) != 0) || (byte6 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = is_concatenated_value_null_08009228(temp10,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((ch7 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (byte1 = 0; byte1 < 3; byte1 = byte1 + 1) {\n            if (((int)(uint)byte6 >> byte1 & 1U) == 0) {\n              array5[byte1 + 3] = *(undefined4 *)(&DAT_20000e74 + (byte1 + 2) * 4);\n            }\n            else if (ch7 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp2 = (uint)byte1;\n                temp = reverse_number_operation_08008cdc(array5[byte1 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (byte1 + 2) * 4));\n                array5[temp2 + 3] = temp;\n              }\n              else {\n                temp3 = array5[byte1 + 3];\n                temp = reverse_number_operation_08008cdc(*(undefined4 *)(&DAT_20000e70 + (byte1 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (byte1 + 10) * 4));\n                temp2 = (uint)byte1;\n                temp = reverse_number_operation_08008cdc(temp3,temp);\n                array5[temp2 + 3] = temp;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (byte6 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              handle_data_processing_08001e98(array5[3],array5[4],array5[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (byte6 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp = temp10;\n              if (DAT_20000e72 == '\\0') {\n                temp = DAT_20000e78;\n              }\n              handle_data_processing_08001e98(array5[3],array5[4],array5[5],temp,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            byte6 = byte6 & ~(byte)(1 << DAT_20000e8b);\n            if ((byte6 == 0) ||\n               (((result = check_concatenated_values_08009214(uint2,0), result != 0 &&\n                 (result = check_concatenated_values_08009214(array5[DAT_20000e89],0), result != 0)) &&\n                (result = check_concatenated_values_08009214(array5[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_concatenated_values_08009214(uint2,0);\n              if (result == 0) {\n                ch4 = calculate_float_addition_08008cd8(array5[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                ch3 = calculate_float_addition_08008cd8(array5[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_memory_with_0800b430(array5,0,0xc);\n                temp = calculate_float_08008eec(uint2,0x40800000);\n                temp = calculate_float_08008eec(temp,uint2);\n                temp3 = calculate_float_08008eec(ch4,ch4);\n                temp = calculate_float_addition_08008cd8(temp,temp3);\n                temp3 = calculate_float_08008eec(ch3,ch3);\n                uint1 = calculate_float_addition_08008cd8(temp,temp3);\n                result = is_concatenated_value_null_08009228(uint1,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp4 = bitwise_conversion_08008590(uint1);\n                temp4 = process_data_080098d0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n                temp5 = bitwise_conversion_08008590(ch4);\n                temp6 = bitwise_conversion_08008590(ch3);\n                temp5 = initialize_calculation_0800981c((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                                     (int)((ulonglong)temp6 >> 0x20));\n                temp4 = calculate_improved_double_precision_value_08008894((int)temp4,(uint)((ulonglong)temp4 >> 0x20) ^ 0x80000000,\n                                     (int)temp5,(int)((ulonglong)temp5 >> 0x20));\n                uint1 = calculate_result_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  uint1 = uint1 ^ 0x80000000;\n                }\n                result = is_concatenated_value_null_08009228(uint2,0);\n                if (result != 0) {\n                  uint1 = uint1 ^ 0x80000000;\n                  uint2 = uint2 ^ 0x80000000;\n                }\n                temp = calculate_float_08008eec(ch3,uint1);\n                temp = calculate_float_addition_08008cd8(ch4,temp);\n                temp2 = (uint)DAT_20000e89;\n                temp = calculate_float_08008eec(temp,0x3f000000);\n                array5[temp2] = temp;\n                temp = calculate_float_08008eec(ch4,uint1);\n                temp = reverse_number_operation_08008cdc(temp,ch3);\n                temp2 = (uint)DAT_20000e8a;\n                temp = calculate_float_08008eec(temp,0x3f000000);\n                array5[temp2] = temp;\n              }\n              else {\n                temp4 = bitwise_conversion_08008590(array5[DAT_20000e89]);\n                temp5 = bitwise_conversion_08008590(array5[DAT_20000e8a]);\n                temp4 = initialize_calculation_0800981c((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                                     (int)((ulonglong)temp5 >> 0x20));\n                uint2 = calculate_result_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n              }\n              bool1 = DAT_20000e71 == '\\x02';\n              temp = temp10;\n              if (DAT_20000e72 == '\\0') {\n                temp = DAT_20000e78;\n              }\n              process_data_08001f00(&DAT_20000e7c,array5 + 3,array5,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp,DAT_20000e72,uint2,bool1);\n            }\n            break;\n          case '\\x04':\n            if (byte6 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = array5[3];\n          DAT_20000e80 = array5[4];\n          DAT_20000e84 = array5[5];\n        }\n        errorCode = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          check_memory_availability_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_system_and_check_flag_080025e8();\n            errorCode = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            errorCode = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_binary_function_080005b4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "temp",
                "cVar3": "errorCode",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "local_94": "array1",
                "local_84": "array2",
                "local_80": "array3",
                "local_7c": "array4",
                "uStack_78": "temp7",
                "uStack_74": "temp8",
                "auStack_70": "array5",
                "local_58": "input2",
                "local_52": "ch1",
                "local_51": "ch2",
                "local_50": "ch3",
                "local_4c": "ch4",
                "local_45": "bool1",
                "local_44": "uint1",
                "local_3d": "byte1",
                "local_3c": "byte2",
                "local_3b": "byte3",
                "local_3a": "byte4",
                "local_39": "ch5",
                "local_38": "uint2",
                "local_34": "temp9",
                "local_2f": "byte5",
                "local_2e": "ch6",
                "local_2d": "ch7",
                "local_2c": "temp10",
                "local_27": "byte6",
                "local_26": "ushort1",
                "local_24": "uint3"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_character_0800184c",
            "code": "\nundefined4 checkAndUpdateCharacter_0800184c(byte *output,undefined4 config,int dataOffset,byte *input)\n\n{\n  int result;\n  undefined4 success;\n  \n  if (*(char *)(dataOffset + (uint)*input) == '\\0') {\n    success = 0;\n  }\n  else {\n    *output = *(byte *)(dataOffset + (uint)*input);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      DAT_20000e70 = 2;\n      success = 0;\n    }\n    else {\n      *input = *input + 1;\n      result = parse_number_08002638(dataOffset,input,config);\n      if (result == 0) {\n        DAT_20000e70 = 1;\n        success = 0;\n      }\n      else {\n        success = 1;\n      }\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_character_0800184c",
                "param_1": "output",
                "param_2": "config",
                "param_3": "dataOffset",
                "param_4": "input",
                "iVar1": "result",
                "uVar2": "success"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "set_and_merge_bits_080018cc",
            "code": "\n\n\nvoid setAndMergeBits_080018cc(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "set_and_merge_bits_080018cc",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_memory_value_080018fc",
            "code": "\n\n\nvoid updateMemoryValue_080018fc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_memory_value_080018fc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "check_flag_status_0800192c",
            "code": "\nvoid checkFlagStatus_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "check_flag_status_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_system_and_check_flag_0800195c",
            "code": "\nvoid initialize_system_and_check_flag_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_system_and_check_flag_0800195c_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_system_and_check_flag_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_value_08001994",
            "code": "\nvoid calculateValue_08001994(byte flags,char isCondition1,char isCondition2,undefined4 floatValue)\n\n{\n  undefined4 result1;\n  uint maxValue;\n  undefined8 result2;\n  undefined8 result3;\n  byte conditionFlags;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort memoryValue;\n  uint divResult;\n  int floatResult;\n  undefined4 result4;\n  uint maxValueUpdated;\n  uint combinedValue;\n  ushort updatedMemoryValue;\n  uint increment;\n  uint totalIncrement;\n  int difference;\n  int tempValue2;\n  int tempValue;\n  int initialValue;\n  ushort xorValue;\n  uint threshold;\n  char counter;\n  \n  counter = '\\0';\n  fill_memory_with_0800b430(&value1,0,0xc);\n  if ((flags & 1) != 0) {\n    counter = counter + '\\x01';\n    result2 = bitwise_conversion_08008590(DAT_20000ebc);\n    value1 = calculate_signed_division_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    counter = counter + '\\x01';\n    result2 = bitwise_conversion_08008590(DAT_20000ec0);\n    value2 = calculate_signed_division_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    counter = counter + '\\x01';\n    result2 = bitwise_conversion_08008590(DAT_20000ec4);\n    value3 = calculate_signed_division_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  maxValue = value3;\n  if (value3 < value2) {\n    maxValue = value2;\n  }\n  maxValueUpdated = value1;\n  if (value1 < maxValue) {\n    maxValueUpdated = maxValue;\n  }\n  result2 = FUNC_0800854c(maxValueUpdated);\n  result3 = FUNC_0800854c(counter);\n  result3 = process_data_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result2 = calculate_improved_double_precision_value_08008894((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result4 = calculate_result_08008c30((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = calculate_float_08008eec(DAT_20000edc,result4);\n  result1 = calculate_floating_point_08009054(result1,0x453b8000);\n  result2 = bitwise_conversion_08008590(result1);\n  result2 = calculate_floating_point_value_08009318((int)result2,(int)((ulonglong)result2 >> 0x20));\n  floatResult = calculate_result_08008bf0((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUNC_0800854c(counter);\n  result2 = process_data_080098d0((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result3 = bitwise_conversion_08008590(floatValue);\n  result2 = calculate_bitwise_operation_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_result_08008c30((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = calculate_float_08008eec(result4,result1);\n  result1 = calculate_floating_point_08009054(0x4c64e1c0,result1);\n  result2 = bitwise_conversion_08008590(result1);\n  divResult = calculate_signed_division_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  threshold = 75000;\n  if (divResult < 75000) {\n    threshold = divResult;\n  }\n  memoryValue = DAT_20000ed4;\n  xorValue = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (isCondition1 == '\\0') {\n    xorValue = xorValue ^ 0xaa0;\n  }\n  update_memory_value_080018fc(xorValue);\n  set_and_merge_bits_080018cc(memoryValue);\n  tempValue2 = -(maxValueUpdated >> 1);\n  difference = threshold - DAT_20000ec9;\n  totalIncrement = 0;\n  increment = 10000;\n  conditionFlags = flags;\n  tempValue = tempValue2;\n  initialValue = tempValue2;\n  while( true ) {\n    updatedMemoryValue = memoryValue;\n    combinedValue = calculate_combined_value_080078f4();\n    if (isCondition2 == '\\0') {\n      combinedValue = combinedValue ^ 0x1e;\n    }\n    if (((conditionFlags & 1) != 0) && (initialValue = initialValue + value1, 0 < initialValue)) {\n      if ((combinedValue & 0x10) == 0) {\n        conditionFlags = conditionFlags & 0xfe;\n      }\n      else {\n        updatedMemoryValue = updatedMemoryValue ^ 0x10;\n      }\n      initialValue = initialValue - maxValueUpdated;\n    }\n    if (((conditionFlags & 2) != 0) && (tempValue = tempValue + value2, 0 < tempValue)) {\n      if ((combinedValue & 8) == 0) {\n        conditionFlags = conditionFlags & 0xfd;\n      }\n      else {\n        updatedMemoryValue = updatedMemoryValue ^ 0x440;\n      }\n      tempValue = tempValue - maxValueUpdated;\n    }\n    if (((conditionFlags & 4) != 0) && (tempValue2 = tempValue2 + value3, 0 < tempValue2)) {\n      if ((combinedValue & 4) == 0) {\n        conditionFlags = conditionFlags & 0xfb;\n      }\n      else {\n        updatedMemoryValue = updatedMemoryValue ^ 0x100;\n      }\n      tempValue2 = tempValue2 - maxValueUpdated;\n    }\n    if ((conditionFlags == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    set_and_merge_bits_080018cc(updatedMemoryValue);\n    FUNC_08002828(DAT_20000ec9);\n    set_and_merge_bits_080018cc(memoryValue);\n    FUNC_08002828(difference);\n    if ((divResult < threshold) && (increment = threshold + increment, 20000 < increment)) {\n      increment = increment - 20000;\n      totalIncrement = floatResult + totalIncrement;\n      threshold = 60000000 / totalIncrement;\n      if (threshold < divResult) {\n        threshold = divResult;\n      }\n      difference = threshold - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_value_08001994",
                "param_1": "flags",
                "param_2": "isCondition1",
                "param_3": "isCondition2",
                "param_4": "floatValue",
                "uVar1": "result1",
                "uVar2": "maxValue",
                "uVar3": "result2",
                "uVar4": "result3",
                "local_61": "conditionFlags",
                "local_5c": "value1",
                "local_58": "value2",
                "local_54": "value3",
                "local_4e": "memoryValue",
                "local_4c": "divResult",
                "local_48": "floatResult",
                "local_44": "result4",
                "local_40": "maxValueUpdated",
                "local_3c": "combinedValue",
                "local_36": "updatedMemoryValue",
                "local_34": "increment",
                "local_30": "totalIncrement",
                "local_2c": "difference",
                "local_28": "tempValue2",
                "local_24": "tempValue",
                "local_20": "initialValue",
                "local_1a": "xorValue",
                "local_18": "threshold",
                "local_11": "counter"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_calculate_values_08001d4c",
            "code": "\nvoid initialize_and_calculate_values_08001d4c(void)\n\n{\n  char newChar;\n  char counter;\n  \n  initialize_program();\n  calculate_value(4,1,0,DAT_20000eec);\n  calculate_value(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    newChar = counter + -1;\n    if (counter == '\\0') break;\n    calculate_value(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    counter = newChar;\n    if ('\\0' < newChar) {\n      calculate_value(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  clear_bits_and_check_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_calculate_values_08001d4c",
                "cVar1": "newChar",
                "local_9": "counter",
                "initialize_program_08005790": "initialize_program",
                "calculate_value_08001994": "calculate_value",
                "clear_bits_and_check_flag_080057e4": "clear_bits_and_check_flag"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "execute_program_08001ddc",
            "code": "\nvoid executeProgram_08001ddc(void)\n\n{\n  FUNC_08008244();\n  processDeviceData();\n  initializeProgramAndCheckFlags();\n  fillMemory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initializeMemory();\n      initializeMemory2();\n      initializeAndPrintGrblVersion();\n      initializeSystem2();\n      initializeAndReset();\n      checkFlagStatus();\n      initializeMemory3();\n      initializeAndUpdateData();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        displayStatusMessage(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        processData();\n      }\n    }\n    handleAlarm();\n    handleUserInput();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "execute_program_08001ddc",
                "process_device_data_080051b4": "processDeviceData",
                "initialize_program_and_check_flags_0800583c": "initializeProgramAndCheckFlags",
                "fill_memory_with_0800b430": "fillMemory",
                "initialize_memory_08002f24": "initializeMemory",
                "initialize_memory_080004ac": "initializeMemory2",
                "initialize_and_print_grbl_version_080039a0": "initializeAndPrintGrblVersion",
                "initialize_system_08005238": "initializeSystem2",
                "initialize_and_reset_080001f8": "initializeAndReset",
                "check_flag_status_0800192c": "checkFlagStatus",
                "initialize_memory_08005814": "initializeMemory3",
                "initialize_and_update_data_0800283a": "initializeAndUpdateData",
                "handle_alarm_08003a74": "handleAlarm",
                "handle_user_input_08003f34": "handleUserInput",
                "process_data_080039bc": "processData",
                "display_status_message_080041a0": "displayStatusMessage"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "handle_data_processing_08001e98",
            "code": "\nvoid handle_data_processing_08001e98(undefined4 data_param1,undefined4 data_param2,undefined4 data_param3,undefined4 data_param4,\n                 undefined data_param5)\n\n{\n  int comparison_result;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      handle_alarm_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      comparison_result = are_data_values_equal_08002fac();\n    } while (comparison_result != 0);\n    calculate_and_update_results_08003004(data_param1,data_param2,data_param3,data_param4,data_param5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_program_if_needed_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "handle_data_processing_08001e98",
                "param_1": "data_param1",
                "param_2": "data_param2",
                "param_3": "data_param3",
                "param_4": "data_param4",
                "param_5": "data_param5",
                "iVar1": "comparison_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "process_data_08001f00",
            "code": "\nvoid processData_08001f00(int inputPtr1,undefined4 *inputPtr2,int inputPtr3,byte inputByte1,byte inputByte2,byte inputByte3\n                 ,undefined4 inputFloat1,char inputChar1,undefined4 inputFloat2,char inputChar2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int checkResult;\n  uint temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  uint resultArray [4];\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  ushort loopVar1;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined4 temp12;\n  uint temp13;\n  undefined4 temp14;\n  undefined4 temp15;\n  char loopVar2;\n  ushort loopVar3;\n  undefined4 result3;\n  uint result4;\n  uint temp16;\n  \n  temp15 = reverse_number_operation_08008cdc(*(undefined4 *)((uint)inputByte1 * 4 + inputPtr1),\n                          *(undefined4 *)((uint)inputByte1 * 4 + inputPtr3));\n  temp14 = reverse_number_operation_08008cdc(*(undefined4 *)((uint)inputByte2 * 4 + inputPtr1),\n                          *(undefined4 *)((uint)inputByte2 * 4 + inputPtr3));\n  temp13 = calculate_float_addition_08008cd8(inputPtr2[inputByte3],*(undefined4 *)((uint)inputByte3 * 4 + inputPtr1));\n  temp16 = *(uint *)((uint)inputByte1 * 4 + inputPtr3) ^ 0x80000000;\n  result4 = *(uint *)((uint)inputByte2 * 4 + inputPtr3) ^ 0x80000000;\n  temp12 = calculate_float_addition_08008cd8(inputPtr2[inputByte1],temp15);\n  temp11 = calculate_float_addition_08008cd8(inputPtr2[inputByte2],temp14);\n  result1 = calculate_float_08008eec(temp16,temp11);\n  result2 = calculate_float_08008eec(result4,temp12);\n  result1 = calculate_float_addition_08008cd8(result1,result2);\n  temp2 = bitwise_conversion_08008590(result1);\n  result1 = calculate_float_08008eec(temp16,temp12);\n  result2 = calculate_float_08008eec(result4,temp11);\n  result1 = reverse_number_operation_08008cdc(result1,result2);\n  temp3 = bitwise_conversion_08008590(result1);\n  temp2 = calculate_double_value_thunk_08009990((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                             (int)((ulonglong)temp3 >> 0x20));\n  result3 = calculate_result_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  if (inputChar2 == '\\0') {\n    checkResult = check_concatenation_result_0800923c(result3,0);\n    if (checkResult != 0) {\n      temp2 = bitwise_conversion_08008590(result3);\n      temp2 = calculate_sum_080082d4((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      result3 = calculate_result_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  else {\n    checkResult = check_concatenated_values_08009250(result3,0);\n    if (checkResult != 0) {\n      temp2 = bitwise_conversion_08008590(result3);\n      temp2 = calculate_extended_multiplication_080082d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      result3 = calculate_result_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  result1 = calculate_float_08008eec(result3,inputFloat2);\n  temp2 = bitwise_conversion_08008590(result1);\n  temp3 = bitwise_conversion_08008590(temp13 & 0x7fffffff);\n  temp2 = initialize_calculation_0800981c((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                       (int)((ulonglong)temp3 >> 0x20));\n  temp10 = calculate_result_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  checkResult = check_concatenated_values_08009214(temp10,0);\n  if (checkResult == 0) {\n    result1 = calculate_floating_point_08009054(temp10,DAT_20000ed8);\n    temp2 = bitwise_conversion_08008590(result1);\n    temp2 = process_data_080094c0((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    loopVar1 = calculate_result_08008bf0((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if (inputChar1 != '\\0') {\n      result1 = calculate_updated_value_08008e44(loopVar1);\n      inputFloat1 = calculate_float_08008eec(inputFloat1,result1);\n    }\n    result1 = calculate_updated_value_08008e44(loopVar1);\n    temp9 = calculate_floating_point_08009054(result3,result1);\n    result1 = calculate_updated_value_08008e44(loopVar1);\n    temp8 = calculate_floating_point_08009054(temp13,result1);\n    temp2 = bitwise_conversion_08008590(temp9);\n    temp2 = calculate_bitwise_operation_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n    temp3 = bitwise_conversion_08008590(temp9);\n    temp2 = calculate_bitwise_operation_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                         (int)((ulonglong)temp3 >> 0x20));\n    temp2 = calculate_extended_multiplication_080082d0(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    temp7 = calculate_result_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    temp6 = temp9;\n    loopVar2 = '\\0';\n    resultArray[inputByte3] = *(uint *)(inputPtr1 + (uint)inputByte3 * 4);\n    for (loopVar3 = 1; loopVar3 < loopVar1; loopVar3 = loopVar3 + 1) {\n      if ((int)loopVar2 < (int)(uint)DAT_20000efa) {\n        result1 = calculate_float_08008eec(temp16,temp6);\n        result2 = calculate_float_08008eec(result4,temp7);\n        resultArray[3] = reverse_number_operation_08008cdc(result1,result2);\n        result1 = calculate_float_08008eec(temp16,temp7);\n        result2 = calculate_float_08008eec(result4,temp6);\n        temp16 = calculate_float_addition_08008cd8(result1,result2);\n        result4 = resultArray[3];\n        loopVar2 = loopVar2 + '\\x01';\n      }\n      else {\n        result1 = calculate_updated_value_08008e44(loopVar3);\n        result1 = calculate_float_08008eec(result1,temp9);\n        temp2 = bitwise_conversion_08008590(result1);\n        temp2 = calculate_08009410((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        temp5 = calculate_result_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = calculate_updated_value_08008e44(loopVar3);\n        result1 = calculate_float_08008eec(result1,temp9);\n        temp2 = bitwise_conversion_08008590(result1);\n        temp2 = calculate_result_080096e8((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        temp4 = calculate_result_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = calculate_float_08008eec(*(uint *)((uint)inputByte1 * 4 + inputPtr3) ^ 0x80000000,temp5);\n        result2 = calculate_float_08008eec(*(undefined4 *)((uint)inputByte2 * 4 + inputPtr3),temp4);\n        temp16 = reverse_number_operation_08008cdc(result1,result2);\n        result1 = calculate_float_08008eec(*(uint *)((uint)inputByte1 * 4 + inputPtr3) ^ 0x80000000,temp4);\n        result2 = calculate_float_08008eec(*(undefined4 *)((uint)inputByte2 * 4 + inputPtr3),temp5);\n        result4 = calculate_float_addition_08008cd8(result1,result2);\n        loopVar2 = '\\0';\n      }\n      temp1 = reverse_number_operation_08008cdc(temp15,temp16);\n      resultArray[inputByte1] = temp1;\n      temp1 = reverse_number_operation_08008cdc(temp14,result4);\n      resultArray[inputByte2] = temp1;\n      temp1 = reverse_number_operation_08008cdc(resultArray[inputByte3],temp8);\n      resultArray[inputByte3] = temp1;\n      handle_data_processing_08001e98(resultArray[0],resultArray[1],resultArray[2],inputFloat1,inputChar1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    handle_data_processing_08001e98(*inputPtr2,inputPtr2[1],inputPtr2[2],inputFloat1,inputChar1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "process_data_08001f00",
                "param_1": "inputPtr1",
                "param_2": "inputPtr2",
                "param_3": "inputPtr3",
                "param_4": "inputByte1",
                "param_5": "inputByte2",
                "param_6": "inputByte3",
                "param_7": "inputFloat1",
                "param_8": "inputChar1",
                "param_9": "inputFloat2",
                "param_10": "inputChar2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "checkResult",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "local_6c": "resultArray",
                "local_5c": "temp4",
                "local_58": "temp5",
                "local_54": "temp6",
                "local_50": "temp7",
                "local_4c": "temp8",
                "local_48": "temp9",
                "local_42": "loopVar1",
                "local_40": "temp10",
                "local_3c": "temp11",
                "local_38": "temp12",
                "local_34": "temp13",
                "local_30": "temp14",
                "local_2c": "temp15",
                "local_27": "loopVar2",
                "local_26": "loopVar3",
                "local_24": "result3",
                "local_20": "result4",
                "local_1c": "temp16"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_data_08002408",
            "code": "\nvoid process_data_08002408(undefined4 input_param)\n\n{\n  undefined2 result_1;\n  undefined4 float_calculation_1;\n  undefined4 updated_value;\n  undefined8 bitwise_conversion;\n  ushort loop_counter;\n  \n  float_calculation_1 = calculate_float_08008eec(input_param,0x41a00000);\n  bitwise_conversion = bitwise_conversion_08008590(float_calculation_1);\n  bitwise_conversion = process_data_08002408_080094c0((int)bitwise_conversion,(int)((ulonglong)bitwise_conversion >> 0x20));\n  loop_counter = calculate_result_08008bf0((int)bitwise_conversion,(int)((ulonglong)bitwise_conversion >> 0x20));\n  check_memory_availability_08002fd4();\n  float_calculation_1 = calculate_float_08008eec(input_param,0x447a0000);\n  updated_value = calculate_updated_value_08008e44((uint)loop_counter * 0x32);\n  float_calculation_1 = calculate_float_addition_08008cd8(float_calculation_1,updated_value);\n  bitwise_conversion = bitwise_conversion_08008590(float_calculation_1);\n  bitwise_conversion = process_data_08002408_080094c0((int)bitwise_conversion,(int)((ulonglong)bitwise_conversion >> 0x20));\n  result_1 = calculate_result_08008bf0((int)bitwise_conversion,(int)((ulonglong)bitwise_conversion >> 0x20));\n  FUNC_08002814(result_1);\n  while ((loop_counter != 0 && (handle_alarm_08003a74(), DAT_20000ea8 == '\\0'))) {\n    check_limit_and_advance_080002a0(0x32);\n    loop_counter = loop_counter - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "param_1": "input_param",
                "uVar1": "result_1",
                "uVar2": "float_calculation_1",
                "uVar3": "updated_value",
                "uVar4": "bitwise_conversion",
                "local_12": "loop_counter"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_program_080024c4",
            "code": "\nvoid initializeProgram_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char isThirdFlagSet;\n  char isSecondFlagSet;\n  char isFirstFlagSet;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initializeAndCalculateValues();\n  handleAlarm();\n  if (DAT_20000ea8 == '\\0') {\n    fillMemory(&DAT_20000eac,0,0xc);\n    initializeAndUpdateData();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      isFirstFlagSet = -1;\n    }\n    else {\n      isFirstFlagSet = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      isSecondFlagSet = -1;\n    }\n    else {\n      isSecondFlagSet = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      isThirdFlagSet = -1;\n    }\n    else {\n      isThirdFlagSet = '\\x01';\n    }\n    uVar1 = calculateUpdatedValue((int)isFirstFlagSet);\n    uVar1 = calculateFloat(uVar1,DAT_20000ef4);\n    uVar2 = calculateUpdatedValue((int)isSecondFlagSet);\n    uVar2 = calculateFloat(uVar2,DAT_20000ef4);\n    uVar3 = calculateUpdatedValue((int)isThirdFlagSet);\n    uVar3 = calculateFloat(uVar3,DAT_20000ef4);\n    handleDataProcessing(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initializeProgram_080024c4IfNeeded();\n    checkMemoryAvailability();\n    initializeAndUpdateData();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_program_080024c4",
                "local_13": "isThirdFlagSet",
                "local_12": "isSecondFlagSet",
                "local_11": "isFirstFlagSet",
                "initialize_and_calculate_values_08001d4c": "initializeAndCalculateValues",
                "handle_alarm_08003a74": "handleAlarm",
                "fill_memory_with_0800b430": "fillMemory",
                "initialize_and_update_data_0800283a": "initializeAndUpdateData",
                "calculate_updated_value_08008e44": "calculateUpdatedValue",
                "calculate_float_08008eec": "calculateFloat",
                "handle_data_processing_08001e98": "handleDataProcessing",
                "initialize_program_if_needed_0800585c": "initializeProgramIfNeeded",
                "check_memory_availability_08002fd4": "checkMemoryAvailability"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_system_and_check_flag_080025e8",
            "code": "\nvoid initializeSystemAndCheckFlag_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    initializeSystem();\n    initialize();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      clearBitsAndCheckFlag();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_system_and_check_flag_080025e8",
                "initialize_system_08005250": "initializeSystem",
                "initialize_08000210": "initialize",
                "clear_bits_and_check_flag_080057e4": "clearBitsAndCheckFlag"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_number_08002638",
            "code": "\nundefined4 parseNumber_08002638(int baseAddress,byte *inputString,uint *outputData)\n\n{\n  byte digit;\n  bool isNegative;\n  bool isDecimal;\n  int validationResult;\n  char *currentChar;\n  char *nextChar;\n  undefined4 returnCode;\n  undefined8 calculationResult;\n  uint checksum;\n  byte digitCount;\n  char decimalOffset;\n  int numberValue;\n  char currentDigit;\n  char *nextDigit;\n  \n  nextChar = (char *)(baseAddress + (uint)*inputString);\n  currentChar = nextChar + 1;\n  currentDigit = *nextChar;\n  isNegative = false;\n  if (currentDigit == '-') {\n    isNegative = true;\n    currentDigit = *currentChar;\n    nextDigit = nextChar + 2;\n  }\n  else {\n    nextDigit = currentChar;\n    if (currentDigit == '+') {\n      nextDigit = nextChar + 2;\n      currentDigit = *currentChar;\n    }\n  }\n  numberValue = 0;\n  decimalOffset = '\\0';\n  digitCount = 0;\n  isDecimal = false;\n  do {\n    digit = currentDigit - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (isDecimal) {\n          decimalOffset = decimalOffset + -1;\n        }\n        numberValue = (uint)digit + numberValue * 10;\n      }\n      else if (!isDecimal) {\n        decimalOffset = decimalOffset + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (isDecimal)) {\n        if (digitCount == 0) {\n          returnCode = 0;\n        }\n        else {\n          checksum = calculate_checksum_08008e3c(numberValue);\n          validationResult = check_concatenated_values_08009214(checksum,0);\n          if (validationResult == 0) {\n            for (; decimalOffset < -1; decimalOffset = decimalOffset + '\\x02') {\n              calculationResult = bitwise_conversion_08008590(checksum);\n              calculationResult = calculate_bitwise_operation_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              checksum = calculate_result_08008c30((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n            }\n            if (decimalOffset < '\\0') {\n              calculationResult = bitwise_conversion_08008590(checksum);\n              calculationResult = calculate_bitwise_operation_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              checksum = calculate_result_08008c30((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimalOffset; decimalOffset = decimalOffset + -1) {\n                checksum = calculate_float_08008eec(checksum,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *outputData = checksum ^ 0x80000000;\n          }\n          else {\n            *outputData = checksum;\n          }\n          *inputString = ((char)nextDigit - (char)baseAddress) - 1;\n          returnCode = 1;\n        }\n        return returnCode;\n      }\n      isDecimal = true;\n    }\n    currentDigit = *nextDigit;\n    nextDigit = nextDigit + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_number_08002638",
                "param_1": "baseAddress",
                "param_2": "inputString",
                "param_3": "outputData",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "isDecimal",
                "iVar4": "validationResult",
                "pcVar5": "currentChar",
                "pcVar6": "nextChar",
                "uVar7": "returnCode",
                "uVar8": "calculationResult",
                "local_1c": "checksum",
                "local_16": "digitCount",
                "local_15": "decimalOffset",
                "local_14": "numberValue",
                "local_d": "currentDigit",
                "local_c": "nextDigit"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_update_data_0800283a",
            "code": "\nvoid initialize_and_update_data_0800283a(void)\n\n{\n  initialize_data_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  update_floating_point_values_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_update_data_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_limit_value_08002870",
            "code": "\nchar incrementAndLimitValue_08002870(char inputValue)\n\n{\n  char result;\n  \n  result = inputValue + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_limit_value_08002870",
                "param_1": "inputValue",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_set_default_08002896",
            "code": "\nchar decrementAndSetDefault_08002896(char inputChar)\n\n{\n  char result;\n  \n  result = inputChar;\n  if (inputChar == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_set_default_08002896",
                "param_1": "inputChar",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_and_reverse_080028bc",
            "code": "\nundefined4 calculate_and_reverse_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 float1;\n  undefined4 float2;\n  \n  float1 = calculate_float_08008eec(input_2,input_2);\n  float2 = calculate_float_08008eec(input_1,input_1);\n  float1 = calculate_float_addition_08008cd8(float1,float2);\n  float2 = reverse_number_operation_08008cdc(input_3,input_3);\n  float1 = calculate_floating_point_08009054(float1,float2);\n  return float1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_and_reverse_080028bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "float1",
                "uVar2": "float2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = reverse_number_operation_08008cdc(input_3,input_3);\n  result_1 = calculate_float_08008eec(result_1,input_4);\n  result_2 = calculate_float_08008eec(input_1,input_1);\n  result_1 = calculate_float_addition_08008cd8(result_1,result_2);\n  result_2 = calculate_float_08008eec(input_2,input_2);\n  result_1 = reverse_number_operation_08008cdc(result_1,result_2);\n  result_2 = calculate_float_08008eec(input_3,0x40800000);\n  result_1 = calculate_floating_point_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_improved_result_08002978",
            "code": "\nundefined4 calculateImprovedResult_08002978(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 floatResult1;\n  undefined4 reverseResult;\n  undefined8 bitwiseConversionResult;\n  \n  floatResult1 = calculate_float_08008eec(input2,input2);\n  reverseResult = reverse_number_operation_08008cdc(input1,input1);\n  reverseResult = calculate_float_08008eec(reverseResult,input3);\n  floatResult1 = calculate_float_addition_08008cd8(floatResult1,reverseResult);\n  bitwiseConversionResult = bitwise_conversion_08008590(floatResult1);\n  bitwiseConversionResult = process_data_080098d0((int)bitwiseConversionResult,(int)((ulonglong)bitwiseConversionResult >> 0x20));\n  floatResult1 = calculate_result_08008c30((int)bitwiseConversionResult,(int)((ulonglong)bitwiseConversionResult >> 0x20));\n  return floatResult1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_improved_result_08002978",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "floatResult1",
                "uVar2": "reverseResult",
                "uVar3": "bitwiseConversionResult"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "improve_and_set_result_080029d8",
            "code": "\nvoid improve_and_set_result_080029d8(undefined4 unknown_param,int data1,int data2)\n\n{\n  int result;\n  undefined4 improved_result;\n  undefined4 data1_cpy;\n  \n  if (((data1 != 0) && (data2 != 0)) &&\n     (result = check_concatenated_values_08009214(*(undefined4 *)(data1 + 0x18),*(undefined4 *)(data1 + 0x1c)),\n     result == 0)) {\n    if ((*(char *)(data1 + 0x25) == '\\0') &&\n       (result = check_concatenated_values_08009264(*(undefined4 *)(data1 + 0x1c),*(undefined4 *)(data2 + 0x18)),\n       result != 0)) {\n      data1_cpy = *(undefined4 *)(data1 + 0x1c);\n      improved_result = calculate_improved_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data2 + 0x18),\n                           *(undefined4 *)(data1 + 0x20));\n      result = is_concatenated_value_null_08009228(data1_cpy,improved_result);\n      if (result == 0) {\n        improved_result = calculate_improved_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data2 + 0x18),\n                             *(undefined4 *)(data1 + 0x20));\n      }\n      else {\n        improved_result = *(undefined4 *)(data1 + 0x1c);\n      }\n      *(undefined4 *)(data1 + 0x18) = improved_result;\n    }\n    else {\n      *(undefined4 *)(data1 + 0x18) = *(undefined4 *)(data1 + 0x1c);\n    }\n    *(undefined *)(data1 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "improve_and_set_result_080029d8",
                "param_1": "unknown_param",
                "param_2": "data1",
                "param_3": "data2",
                "iVar1": "result",
                "uVar2": "improved_result",
                "uVar3": "data1_cpy"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "decrement_and_improve_results_08002a94",
            "code": "\nvoid decrement_and_improve_results_08002a94(void)\n\n{\n  undefined *previous_ptr_copy;\n  undefined *previous_ptr;\n  undefined *current_ptr;\n  byte input_byte;\n  \n  input_byte = DAT_20000cf0;\n  previous_ptr = (undefined *)0x0;\n  current_ptr = (undefined *)0x0;\n  while (previous_ptr_copy = current_ptr, input_byte != DAT_20000cf1) {\n    input_byte = decrement_and_set_default_08002896(input_byte);\n    current_ptr = previous_ptr;\n    improve_and_set_result_080029d8(&DAT_20000870 + (uint)input_byte * 0x40,previous_ptr,previous_ptr_copy);\n    previous_ptr = &DAT_20000870 + (uint)input_byte * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "decrement_and_improve_results_08002a94",
                "local_9": "input_byte",
                "local_18": "previous_ptr",
                "local_14": "current_ptr",
                "puVar1": "previous_ptr_copy"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_concatenated_value_08002afc",
            "code": "\nvoid updateConcatenatedValue_08002afc(int value1,int value2)\n\n{\n  int isConcatenatedNull;\n  undefined4 improvedResult;\n  undefined4 value2Modified;\n  \n  if (((value1 != 0) && (*(char *)(value1 + 0x25) == '\\0')) &&\n     (isConcatenatedNull = is_concatenated_value_null_08009228(*(undefined4 *)(value1 + 0x18),*(undefined4 *)(value2 + 0x18)),\n     isConcatenatedNull != 0)) {\n    value2Modified = *(undefined4 *)(value2 + 0x18);\n    improvedResult = calculate_improved_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(value1 + 0x18),\n                         *(undefined4 *)(value1 + 0x20));\n    isConcatenatedNull = is_concatenated_value_null_08009228(value2Modified,improvedResult);\n    if (isConcatenatedNull == 0) {\n      improvedResult = calculate_improved_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(value1 + 0x18),\n                           *(undefined4 *)(value1 + 0x20));\n    }\n    else {\n      improvedResult = *(undefined4 *)(value2 + 0x18);\n    }\n    isConcatenatedNull = check_concatenated_values_08009214(improvedResult,*(undefined4 *)(value2 + 0x18));\n    if (isConcatenatedNull == 0) {\n      *(undefined4 *)(value2 + 0x18) = improvedResult;\n      *(undefined *)(value2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_concatenated_value_08002afc",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "isConcatenatedNull",
                "uVar2": "improvedResult",
                "uVar3": "value2Modified"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "update_concatenated_value_08002ba8",
            "code": "\nvoid update_concatenated_value_08002ba8(void)\n\n{\n  uint current_value_as_uint;\n  undefined *previous_value_pointer;\n  undefined *previous_concatenated_value_pointer;\n  undefined *previous_concatenated_value;\n  undefined *current_concatenated_value;\n  byte current_value;\n  \n  previous_concatenated_value = (undefined *)0x0;\n  current_concatenated_value = (undefined *)0x0;\n  current_value = DAT_20000cf1;\n  previous_concatenated_value_pointer = (undefined *)0x0;\n  while (previous_value_pointer = previous_concatenated_value, current_value != DAT_20000cf0) {\n    previous_concatenated_value = current_concatenated_value;\n    current_value_as_uint = (uint)current_value;\n    update_concatenated_value_08002ba8_08002afc(previous_value_pointer,current_concatenated_value,&DAT_20000870 + current_value_as_uint * 0x40);\n    current_value = increment_and_limit_value_08002870(current_value);\n    previous_concatenated_value_pointer = previous_value_pointer;\n    current_concatenated_value = &DAT_20000870 + current_value_as_uint * 0x40;\n  }\n  update_concatenated_value_08002ba8_08002afc(previous_concatenated_value,current_concatenated_value,0,previous_concatenated_value,previous_concatenated_value_pointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "update_concatenated_value_08002ba8",
                "local_14": "previous_concatenated_value",
                "local_10": "current_concatenated_value",
                "local_9": "current_value",
                "puVar2": "previous_value_pointer",
                "puVar3": "previous_concatenated_value_pointer",
                "uVar1": "current_value_as_uint"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_and_update_values_08002c18",
            "code": "\nvoid calculateAndUpdateValues_08002c18(int input,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 checksum1;\n  int updatedValue;\n  undefined4 checksum2;\n  undefined4 updatedValue2;\n  undefined4 updatedValue3;\n  uint bitwiseResult;\n  undefined8 floatingPointValue;\n  int localVar1;\n  uint localVar2;\n  \n  checksum1 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x3c));\n  checksum1 = calculate_float_08008eec(checksum1,param2);\n  floatingPointValue = bitwise_conversion_08008590(checksum1);\n  floatingPointValue = calculate_floating_point_value_08009318((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  checksum1 = calculate_result_08008bf0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  *(undefined4 *)(input + 0x28) = checksum1;\n  checksum1 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x3c));\n  checksum1 = calculate_float_08008eec(checksum1,param3);\n  floatingPointValue = bitwise_conversion_08008590(checksum1);\n  floatingPointValue = calculate_floating_point_value_08009318((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  checksum1 = calculate_result_08008bf0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  *(undefined4 *)(input + 0x2c) = checksum1;\n  floatingPointValue = bitwise_shift_and_concatenate_0800856c(*(int *)(input + 0x30) * 0x32);\n  floatingPointValue = calculate_bitwise_operation_08008640((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20),0,0x404e0000);\n  updatedValue = calculate_unsigned_division_08008ba0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  checksum1 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x28));\n  checksum2 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x3c));\n  updatedValue2 = calculate_updated_value_08008e44(updatedValue);\n  checksum1 = calculate_and_reverse_080028bc(checksum1,checksum2,updatedValue2);\n  floatingPointValue = bitwise_conversion_08008590(checksum1);\n  floatingPointValue = calculate_floating_point_value_08009318((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  localVar2 = calculate_unsigned_division_08008ba0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  checksum1 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x3c));\n  checksum2 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x2c));\n  updatedValue2 = calculate_updated_value_08008e44(-updatedValue);\n  checksum1 = calculate_and_reverse_080028bc(checksum1,checksum2,updatedValue2);\n  floatingPointValue = bitwise_conversion_08008590(checksum1);\n  floatingPointValue = process_data_080094c0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  localVar1 = calculate_unsigned_division_08008ba0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n  localVar1 = (*(int *)(input + 0x10) - localVar2) - localVar1;\n  if (localVar1 < 0) {\n    checksum1 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x28));\n    checksum2 = calculate_checksum_08008e3c(*(undefined4 *)(input + 0x2c));\n    updatedValue2 = calculate_updated_value_08008e44(updatedValue);\n    updatedValue3 = calculate_updated_value_08008e44(*(undefined4 *)(input + 0x10));\n    checksum1 = calculate_result_08002908(checksum1,checksum2,updatedValue2,updatedValue3);\n    floatingPointValue = bitwise_conversion_08008590(checksum1);\n    floatingPointValue = calculate_floating_point_value_08009318((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n    bitwiseResult = calculate_unsigned_division_08008ba0((int)floatingPointValue,(int)((ulonglong)floatingPointValue >> 0x20));\n    bitwiseResult = bitwiseResult & ~((int)bitwiseResult >> 0x1f);\n    localVar2 = *(uint *)(input + 0x10);\n    if ((int)bitwiseResult <= (int)*(uint *)(input + 0x10)) {\n      localVar2 = bitwiseResult;\n    }\n    localVar1 = 0;\n  }\n  *(uint *)(input + 0x34) = localVar2;\n  *(uint *)(input + 0x38) = localVar1 + localVar2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_and_update_values_08002c18",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "checksum1",
                "iVar2": "updatedValue",
                "uVar3": "checksum2",
                "uVar4": "updatedValue2",
                "uVar5": "updatedValue3",
                "uVar6": "bitwiseResult",
                "uVar7": "floatingPointValue",
                "local_20": "localVar1",
                "local_1c": "localVar2"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_and_update_08002e08",
            "code": "\nvoid calculateAndUpdate_08002e08(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index;\n  undefined *dataPtr;\n  byte byteValue;\n  \n  dataPtr = (undefined *)0x0;\n  byteValue = DAT_20000cf1;\n  while (byteValue != DAT_20000cf0) {\n    index = (uint)byteValue * 0x40;\n    if ((dataPtr != (undefined *)0x0) &&\n       ((dataPtr[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result1 = calculate_floating_point_08009054(*(undefined4 *)(dataPtr + 0x18),*(undefined4 *)(dataPtr + 0x14));\n      result2 = calculate_floating_point_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(dataPtr + 0x14));\n      calculate_and_update_values_08002c18(dataPtr,result1,result2);\n      dataPtr[0x24] = 0;\n    }\n    byteValue = increment_and_limit_value_08002870(byteValue);\n    dataPtr = &DAT_20000870 + index;\n  }\n  result1 = calculate_floating_point_08009054(*(undefined4 *)(dataPtr + 0x18),*(undefined4 *)(dataPtr + 0x14));\n  result2 = calculate_floating_point_08009054(0,*(undefined4 *)(dataPtr + 0x14));\n  calculate_and_update_values_08002c18(dataPtr,result1,result2);\n  dataPtr[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_and_update_08002e08",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "index",
                "local_18": "dataPtr",
                "local_11": "byteValue"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "update_results_08002edc",
            "code": "\nvoid update_results_08002edc(void)\n\n{\n  decrement_and_improve_results();\n  update_concatenated_value();\n  calculate_and_update();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "update_results_08002edc",
                "decrement_and_improve_results_08002a94": "decrement_and_improve_results",
                "update_concatenated_value_08002ba8": "update_concatenated_value",
                "calculate_and_update_08002e08": "calculate_and_update"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "initialize_value_and_limit_08002ef0",
            "code": "\nvoid initializeValueAndLimit_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_limit_value_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "initialize_value_and_limit_08002ef0"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_memory_08002f24",
            "code": "\nvoid initializeMemory_08002f24(void)\n\n{\n  initializeValueAndLimit();\n  fillMemoryWith(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_memory_08002f24",
                "initialize_value_and_limit_08002ef0": "initializeValueAndLimit",
                "fill_memory_with_0800b430": "fillMemoryWith"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_value_if_needed_08002f40",
            "code": "\nvoid updateValueIfNeeded_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_limit_value_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_value_if_needed_08002f40"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_memory_address_08002f74",
            "code": "\nundefined * getMemoryAddress_08002f74(void)\n\n{\n  undefined *memoryAddress;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    memoryAddress = (undefined *)0x0;\n  }\n  else {\n    memoryAddress = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_memory_address_08002f74",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_data_values_equal_08002fac",
            "code": "\nbool areDataValuesEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_data_values_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "check_memory_availability_08002fd4",
            "code": "\nvoid check_memory_availability_08002fd4(void)\n\n{\n  int memory_address;\n  \n  while ((memory_address = get_memory_address(), memory_address != 0 || (DAT_20000ea9 == '\\x03'))) {\n    handle_alarm();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "check_memory_availability_08002fd4",
                "iVar1": "memory_address",
                "get_memory_address_08002f74": "get_memory_address",
                "handle_alarm_08003a74": "handle_alarm"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_and_update_results_08003004",
            "code": "\nvoid calculateAndUpdateResults_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char flag)\n\n{\n  undefined4 floatValue1;\n  int divisionResult1;\n  int divisionResult2;\n  int divisionResult3;\n  undefined4 floatValue2;\n  undefined4 floatValue3;\n  undefined4 reverseResult;\n  undefined4 floatValue4;\n  uint minValue;\n  int index;\n  ushort *arrayPtr;\n  int absDifference;\n  uint maxValue;\n  undefined8 bitwiseConversion;\n  undefined8 improvedDoublePrecisionValue;\n  undefined8 tempFloat;\n  undefined4 valueToUpdateH;\n  undefined4 local_1c;\n  \n  index = (uint)DAT_20000cf0 * 0x40;\n  arrayPtr = (ushort *)(&DAT_20000870 + index);\n  floatValue1 = calculate_float_08008eec(DAT_20000ebc,input1);\n  bitwiseConversion = bitwise_conversion_08008590(floatValue1);\n  divisionResult1 = calculate_signed_division_080095b8((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n  floatValue1 = calculate_float_08008eec(DAT_20000ec0,input2);\n  bitwiseConversion = bitwise_conversion_08008590(floatValue1);\n  divisionResult2 = calculate_signed_division_080095b8((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n  floatValue1 = calculate_float_08008eec(DAT_20000ec4,input3);\n  bitwiseConversion = bitwise_conversion_08008590(floatValue1);\n  divisionResult3 = calculate_signed_division_080095b8((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n  *arrayPtr = 0;\n  if (divisionResult1 < DAT_20000cf4) {\n    *arrayPtr = *arrayPtr | 0x20;\n  }\n  if (divisionResult2 < DAT_20000cf8) {\n    *arrayPtr = *arrayPtr | 0x880;\n  }\n  if (divisionResult3 < DAT_20000cfc) {\n    *arrayPtr = *arrayPtr | 0x200;\n  }\n  absDifference = divisionResult1 - DAT_20000cf4;\n  if (absDifference < 0) {\n    absDifference = -absDifference;\n  }\n  *(int *)(&DAT_20000874 + index) = absDifference;\n  absDifference = divisionResult2 - DAT_20000cf8;\n  if (absDifference < 0) {\n    absDifference = -absDifference;\n  }\n  *(int *)(&DAT_20000878 + index) = absDifference;\n  absDifference = divisionResult3 - DAT_20000cfc;\n  if (absDifference < 0) {\n    absDifference = -absDifference;\n  }\n  *(int *)(&DAT_2000087c + index) = absDifference;\n  minValue = *(uint *)(&DAT_2000087c + index);\n  if (*(uint *)(&DAT_2000087c + index) < *(uint *)(&DAT_20000878 + index)) {\n    minValue = *(uint *)(&DAT_20000878 + index);\n  }\n  maxValue = *(uint *)(&DAT_20000874 + index);\n  if (*(uint *)(&DAT_20000874 + index) < minValue) {\n    maxValue = minValue;\n  }\n  *(uint *)(&DAT_20000880 + index) = maxValue;\n  if (*(int *)(&DAT_20000880 + index) != 0) {\n    floatValue1 = calculate_updated_value_08008e44(divisionResult1 - DAT_20000cf4);\n    floatValue1 = calculate_floating_point_08009054(floatValue1,DAT_20000ebc);\n    floatValue2 = calculate_updated_value_08008e44(divisionResult2 - DAT_20000cf8);\n    floatValue2 = calculate_floating_point_08009054(floatValue2,DAT_20000ec0);\n    floatValue3 = calculate_updated_value_08008e44(divisionResult3 - DAT_20000cfc);\n    floatValue3 = calculate_floating_point_08009054(floatValue3,DAT_20000ec4);\n    reverseResult = calculate_float_08008eec(floatValue1,floatValue1);\n    floatValue4 = calculate_float_08008eec(floatValue2,floatValue2);\n    reverseResult = reverse_number_operation_08008cdc(reverseResult,floatValue4);\n    floatValue4 = calculate_float_08008eec(floatValue3,floatValue3);\n    reverseResult = reverse_number_operation_08008cdc(reverseResult,floatValue4);\n    bitwiseConversion = bitwise_conversion_08008590(reverseResult);\n    bitwiseConversion = process_data_080098d0((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n    reverseResult = calculate_result_08008c30((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + index) = reverseResult;\n    reverseResult = calculate_floating_point_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + index));\n    if (flag == '\\0') {\n      local_1c = calculate_float_08008eec(input4,reverseResult);\n    }\n    else {\n      local_1c = calculate_floating_point_08009054(0x3f800000,input4);\n    }\n    floatValue4 = calculate_float_08008eec(*(undefined4 *)(&DAT_20000890 + index),local_1c);\n    *(undefined4 *)(&DAT_20000884 + index) = floatValue4;\n    floatValue4 = calculate_updated_value_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    floatValue4 = calculate_float_08008eec(floatValue4,local_1c);\n    bitwiseConversion = bitwise_conversion_08008590(floatValue4);\n    bitwiseConversion = calculate_floating_point_value_08009318((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n    floatValue4 = calculate_result_08008bf0((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + index) = floatValue4;\n    floatValue4 = calculate_updated_value_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    floatValue4 = calculate_float_08008eec(floatValue4,reverseResult);\n    floatValue4 = calculate_float_08008eec(floatValue4,DAT_20000edc);\n    floatValue4 = calculate_floating_point_08009054(floatValue4,0x453b8000);\n    bitwiseConversion = bitwise_conversion_08008590(floatValue4);\n    bitwiseConversion = calculate_floating_point_value_08009318((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n    floatValue4 = calculate_unsigned_division_08008ba0((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + index) = floatValue4;\n    minValue = calculate_float_08008eec(floatValue1,reverseResult);\n    floatValue1 = calculate_float_08008eec(floatValue2,reverseResult);\n    floatValue2 = calculate_float_08008eec(floatValue3,reverseResult);\n    valueToUpdateH = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (absDifference = check_concatenated_values_08009264(DAT_20000d0c,0), absDifference != 0)) {\n      floatValue3 = calculate_float_08008eec(DAT_20000d00 ^ 0x80000000,minValue);\n      reverseResult = calculate_float_08008eec(DAT_20000d04,floatValue1);\n      floatValue3 = calculate_float_addition_08008cd8(floatValue3,reverseResult);\n      reverseResult = calculate_float_08008eec(DAT_20000d08,floatValue2);\n      floatValue3 = calculate_float_addition_08008cd8(floatValue3,reverseResult);\n      bitwiseConversion = bitwise_conversion_08008590(floatValue3);\n      absDifference = is_null_terminated_08008b24((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20),0x66666666,0x3fee6666);\n      if (absDifference != 0) {\n        absDifference = is_concatenated_value_null_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + index));\n        valueToUpdateH = DAT_20000d0c;\n        if (absDifference == 0) {\n          valueToUpdateH = *(undefined4 *)(&DAT_20000884 + index);\n        }\n        bitwiseConversion = bitwise_conversion_08008590(floatValue3);\n        absDifference = check_if_c_string_empty_08008b60((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20),0x66666666,0xbfee6666);\n        if (absDifference != 0) {\n          bitwiseConversion = bitwise_conversion_08008590(floatValue3);\n          bitwiseConversion = calculate_extended_multiplication_080082d0(0,0x3ff00000,(int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n          bitwiseConversion = calculate_bitwise_operation_08008640((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20),0,0x3fe00000);\n          bitwiseConversion = process_data_080098d0((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n          floatValue3 = calculate_result_08008c30((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n          bitwiseConversion = bitwise_conversion_08008590(valueToUpdateH);\n          reverseResult = calculate_float_08008eec(DAT_20000edc,DAT_20000ee0);\n          reverseResult = calculate_float_08008eec(reverseResult,floatValue3);\n          improvedDoublePrecisionValue = bitwise_conversion_08008590(reverseResult);\n          tempFloat = bitwise_conversion_08008590(floatValue3);\n          tempFloat = calculate_extended_multiplication_080082d0(0,0x3ff00000,(int)tempFloat,(int)((ulonglong)tempFloat >> 0x20));\n          improvedDoublePrecisionValue = calculate_improved_double_precision_value_08008894((int)improvedDoublePrecisionValue,(int)((ulonglong)improvedDoublePrecisionValue >> 0x20),(int)tempFloat,\n                                (int)((ulonglong)tempFloat >> 0x20));\n          improvedDoublePrecisionValue = process_data_080098d0((int)improvedDoublePrecisionValue,(int)((ulonglong)improvedDoublePrecisionValue >> 0x20));\n          absDifference = is_null_terminated_08008b24((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20),(int)improvedDoublePrecisionValue,\n                                (int)((ulonglong)improvedDoublePrecisionValue >> 0x20));\n          if (absDifference == 0) {\n            reverseResult = calculate_float_08008eec(DAT_20000edc,DAT_20000ee0);\n            reverseResult = calculate_float_08008eec(reverseResult,floatValue3);\n            bitwiseConversion = bitwise_conversion_08008590(reverseResult);\n            improvedDoublePrecisionValue = bitwise_conversion_08008590(floatValue3);\n            improvedDoublePrecisionValue = calculate_extended_multiplication_080082d0(0,0x3ff00000,(int)improvedDoublePrecisionValue,(int)((ulonglong)improvedDoublePrecisionValue >> 0x20));\n            bitwiseConversion = calculate_improved_double_precision_value_08008894((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20),(int)improvedDoublePrecisionValue,\n                                  (int)((ulonglong)improvedDoublePrecisionValue >> 0x20));\n            bitwiseConversion = process_data_080098d0((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n            valueToUpdateH = calculate_result_08008c30((int)bitwiseConversion,(int)((ulonglong)bitwiseConversion >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + index) = valueToUpdateH;\n    reverseResult = calculate_improved_result_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + index));\n    absDifference = is_concatenated_value_null_08009228(valueToUpdateH,reverseResult);\n    floatValue3 = reverseResult;\n    if (absDifference != 0) {\n      floatValue3 = valueToUpdateH;\n    }\n    *(undefined4 *)(&DAT_20000888 + index) = floatValue3;\n    absDifference = check_concatenated_values_08009250(reverseResult,*(undefined4 *)(&DAT_20000884 + index));\n    if (absDifference == 0) {\n      (&DAT_20000895)[index] = 0;\n    }\n    else {\n      (&DAT_20000895)[index] = 1;\n    }\n    (&DAT_20000894)[index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = minValue;\n    DAT_20000d04 = floatValue1;\n    DAT_20000d08 = floatValue2;\n    DAT_20000cf2 = increment_and_limit_value_08002870(DAT_20000cf2);\n    DAT_20000cf4 = divisionResult1;\n    DAT_20000cf8 = divisionResult2;\n    DAT_20000cfc = divisionResult3;\n    update_results_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_and_update_results_08003004",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "uVar1": "floatValue1",
                "iVar2": "divisionResult1",
                "iVar3": "divisionResult2",
                "iVar4": "divisionResult3",
                "uVar5": "floatValue2",
                "uVar6": "floatValue3",
                "uVar7": "reverseResult",
                "uVar8": "floatValue4",
                "uVar9": "minValue",
                "iVar10": "index",
                "puVar11": "arrayPtr",
                "iVar12": "absDifference",
                "uVar13": "maxValue",
                "uVar14": "bitwiseConversion",
                "uVar15": "improvedDoublePrecisionValue",
                "uVar16": "tempFloat",
                "local_20": "valueToUpdateH"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_data_080035ec",
            "code": "\nvoid initializeData_080035ec(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  DAT_20000cf4 = input1;\n  DAT_20000cf8 = input2;\n  DAT_20000cfc = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_data_080035ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_values_08003618",
            "code": "\nvoid update_values_08003618(undefined4 updated_param)\n\n{\n  undefined4 calculated_value1;\n  int index;\n  undefined4 calculated_value2;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  calculated_value2 = *(undefined4 *)(&DAT_20000890 + index);\n  calculated_value1 = calculate_updated_value_08008e44(updated_param);\n  calculated_value1 = calculate_float_08008eec(calculated_value2,calculated_value1);\n  calculated_value2 = calculate_updated_value_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n  calculated_value1 = calculate_floating_point_08009054(calculated_value1,calculated_value2);\n  *(undefined4 *)(&DAT_20000890 + index) = calculated_value1;\n  *(undefined4 *)(&DAT_20000880 + index) = updated_param;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  update_results_08002edc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_values_08003618",
                "param_1": "updated_param",
                "uVar1": "calculated_value1",
                "iVar2": "index",
                "uVar3": "calculated_value2"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "send_string_to_device_0800369c",
            "code": "\nvoid sendStringToDevice_0800369c(char *inputString)\n\n{\n  char *currentCharacter;\n  \n  currentCharacter = inputString;\n  while (*currentCharacter != '\\0') {\n    send_byte_to_device_08008250(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "send_string_to_device_0800369c",
                "param_1": "inputString",
                "local_c": "currentCharacter"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "send_string_to_device_080036c6",
            "code": "\nvoid send_string_to_device_080036c6(char *string)\n\n{\n  char *current_character;\n  \n  current_character = string;\n  while (*current_character != '\\0') {\n    send_byte_to_device_08008250(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "send_string_to_device_080036c6",
                "param_1": "string",
                "local_c": "current_character"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "send_bits_to_device_080036f0",
            "code": "\nvoid send_bits_to_device_080036f0(uint data,int num_bits)\n\n{\n  undefined4 bit_value;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_index = 0; bit_index < num_bits; bit_index = bit_index + 1) {\n    if ((bit_mask & data) == 0) {\n      bit_value = 0x30;\n    }\n    else {\n      bit_value = 0x31;\n    }\n    send_byte_to_device_08008250(bit_value);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "send_bits_to_device_080036f0",
                "param_1": "data",
                "param_2": "num_bits",
                "local_10": "bit_index",
                "local_c": "bit_mask",
                "uVar1": "bit_value"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "send_bits_to_device_08003740",
            "code": "\nvoid send_bits_to_device_08003740(undefined data)\n\n{\n  send_bits(data,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "send_bits_to_device_08003740",
                "param_1": "data",
                "send_bits_to_device_080036f0": "send_bits"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "send_bits_0800375c",
            "code": "\nvoid send_bits_0800375c(undefined2 data)\n\n{\n  send_bits_0800375c_to_device(data,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "send_bits_0800375c",
                "param_1": "data",
                "send_bits_to_device_080036f0": "send_bits_to_device"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "send_integer_to_device_08003778",
            "code": "\nvoid send_integer_to_device_08003778(uint number)\n\n{\n  uint counter;\n  uint current_number;\n  char number_stack [12];\n  byte stack_top;\n  \n  stack_top = 0;\n  current_number = number;\n  if (number == 0) {\n    send_byte_to_device_08008250(0x30);\n  }\n  else {\n    for (; current_number != 0; current_number = current_number / 10) {\n      counter = (uint)stack_top;\n      stack_top = stack_top + 1;\n      number_stack[counter + 1] = (char)(current_number % 10) + '0';\n    }\n    for (; stack_top != 0; stack_top = stack_top - 1) {\n      send_byte_to_device_08008250(number_stack[stack_top]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "send_integer_to_device_08003778",
                "param_1": "number",
                "uVar1": "counter",
                "local_1c": "current_number",
                "acStack_15": "number_stack",
                "local_9": "stack_top"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "send_absolute_value_080037fc",
            "code": "\nvoid sendAbsoluteValue_080037fc(int value)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = value;\n  if (value < 0) {\n    send_byte_to_device_08008250(0x2d);\n    absoluteValue = -value;\n  }\n  send_integer_to_device_08003778(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "send_absolute_value_080037fc",
                "param_1": "value",
                "local_c": "absoluteValue"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_float_to_ascii_08003826",
            "code": "\nvoid convertFloatToASCII_08003826(uint value)\n\n{\n  int isValueNegative;\n  undefined4 reversedValue;\n  byte digit;\n  uint index;\n  uint floatValue;\n  char asciiValue [13];\n  uint extractedValue;\n  byte digitIndex;\n  byte loopCounter;\n  \n  isValueNegative = is_concatenated_value_null_08009228(value,0);\n  floatValue = value;\n  if (isValueNegative != 0) {\n    send_byte_to_device_08008250(0x2d);\n    floatValue = value ^ 0x80000000;\n  }\n  for (loopCounter = DAT_20000ef9; 1 < loopCounter; loopCounter = loopCounter - 2) {\n    floatValue = calculate_float_08008eec(floatValue,0x42c80000);\n  }\n  if (loopCounter != 0) {\n    floatValue = calculate_float_08008eec(floatValue,0x41200000);\n  }\n  reversedValue = reverse_number_operation_08008cdc(floatValue,0x3f000000);\n  digitIndex = 0;\n  extractedValue = extract_and_convert_08009278(reversedValue);\n  asciiValue[DAT_20000ef9 + 1] = '.';\n  for (; extractedValue != 0; extractedValue = extractedValue / 10) {\n    if (digitIndex == DAT_20000ef9) {\n      digitIndex = digitIndex + 1;\n    }\n    index = (uint)digitIndex;\n    digitIndex = digitIndex + 1;\n    asciiValue[index + 1] = (char)(extractedValue % 10) + '0';\n  }\n  while (digitIndex < DAT_20000ef9) {\n    index = (uint)digitIndex;\n    digitIndex = digitIndex + 1;\n    asciiValue[index + 1] = '0';\n  }\n  if (digitIndex == DAT_20000ef9) {\n    digit = digitIndex + 1;\n    digitIndex = digitIndex + 2;\n    asciiValue[digit + 1] = '0';\n  }\n  for (; digitIndex != 0; digitIndex = digitIndex - 1) {\n    send_byte_to_device_08008250(asciiValue[digitIndex]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_float_to_ascii_08003826",
                "param_1": "value",
                "iVar1": "isValueNegative",
                "uVar2": "reversedValue",
                "bVar3": "digit",
                "uVar4": "index",
                "local_24": "floatValue",
                "acStack_1d": "asciiValue",
                "local_10": "extractedValue",
                "local_a": "digitIndex",
                "local_9": "loopCounter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_and_print_grbl_version_080039a0",
            "code": "\nvoid initialize_and_print_grbl_version_080039a0(void)\n\n{\n  initialize_data_08003980();\n  print_grbl_version_08004228();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_and_print_grbl_version_080039a0"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_data_080039bc",
            "code": "\nvoid process_data_080039bc(void)\n\n{\n  int result;\n  undefined4 function_result;\n  byte iteration_count;\n  \n  for (iteration_count = 0; iteration_count < 2; iteration_count = iteration_count + 1) {\n    result = validate_and_process_data_080039bc_08004d2c(iteration_count,&DAT_20000d10);\n    if (result == 0) {\n      FUNC_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      send_string_to_device_0800369c(&DAT_20000d10);\n      function_result = process_binary_function_080005b4(&DAT_20000d10);\n      FUNC_08004030(function_result);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_data_080039bc",
                "iVar1": "result",
                "uVar2": "function_result",
                "local_9": "iteration_count"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "check_flag_and_initialize_system_08003a18",
            "code": "\nvoid checkFlagAndInitializeSystem_08003a18(uint flag)\n\n{\n  if ((flag & 0x80) == 0) {\n    if ((flag & 0x40) == 0) {\n      if ((flag & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initialize_system_and_check_flag_080025e8();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "check_flag_and_initialize_system_08003a18",
                "param_1": "flag"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "handle_alarm_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid handleAlarm_08003a74(void)\n\n{\n  byte currentStatus;\n  \n  currentStatus = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        printAlarmMessage(0xffffffff);\n        displayStatusMessage(1);\n        do {\n        } while( true );\n      }\n      printAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((currentStatus & 0x10) == 0) {\n      if ((currentStatus & 1) != 0) {\n        printDeviceStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((currentStatus & 8) != 0) {\n        updateStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((currentStatus & 4) != 0) {\n        FUNC_080058a0();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((currentStatus & 2) != 0) {\n        initializeIfNeeded();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "handle_alarm_08003a74",
                "bVar1": "currentStatus",
                "print_alarm_message_08004148": "printAlarmMessage",
                "display_status_message_080041a0": "displayStatusMessage",
                "print_device_status_08004940": "printDeviceStatus",
                "update_status_0800587c": "updateStatus",
                "initialize_program_if_needed_0800585c": "initializeIfNeeded"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_command_08003b98",
            "code": "\nuint processCommand_08003b98(char *command)\n\n{\n  byte firstChar;\n  int returnValue;\n  undefined4 convertedValue;\n  uint result;\n  undefined8 bitwiseResult;\n  undefined4 secondNumber;\n  undefined4 firstNumber;\n  byte index;\n  byte flag;\n  \n  if (*command != '$') {\n    result = process_binary_function_080005b4(command);\n    return result;\n  }\n  index = 1;\n  flag = '\\0';\n  firstChar = command[1];\n  if (firstChar == 0) {\n    print_grbl_commands_0800423c();\n    return 0;\n  }\n  if ((0x58 < firstChar) || (firstChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(firstChar) {\n  case 0x23:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    convert_and_send_float_data_080044e8();\n    break;\n  case 0x24:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    display_device_settings_08004250();\n    break;\n  case 0x43:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_system_and_check_flag_080025e8();\n      display_status_message_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    send_device_info_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_program_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      process_data_080039bc();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (command[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        returnValue = validate_and_process_data_08004d2c(flag,command);\n        if (returnValue == 0) {\n          FUNC_08004030(10);\n        }\n        else {\n          send_data_to_device_08004900(flag,command);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    returnValue = parse_number_08002638(command,&index,&firstNumber);\n    if (returnValue == 0) {\n      return 1;\n    }\n    firstChar = index + 1;\n    if (command[index] != '=') {\n      return 3;\n    }\n    index = firstChar;\n    if (flag == '\\0') {\n      returnValue = parse_number_08002638(command,&index,&secondNumber);\n      if (returnValue == 0) {\n        return 1;\n      }\n      if (command[index] == '\\0') {\n        convertedValue = extract_and_convert_08009278(firstNumber);\n        result = process_input_08004e30(convertedValue,secondNumber);\n        return result;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index - (uint)firstChar] = command[index];\n      result = (uint)index;\n      index = index + 1;\n    } while (command[result] != '\\0');\n    flag = firstChar;\n    flag = process_binary_function_080005b4(command);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    bitwiseResult = bitwise_conversion_08008590(firstNumber);\n    bitwiseResult = calculate_value_08009798((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20));\n    flag = calculate_result_08008bf0((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20));\n    process_data_08004bc0(flag,command);\n    break;\n  case 0x58:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "command",
                "uVar4": "result",
                "bVar1": "firstChar",
                "iVar2": "returnValue",
                "uVar3": "convertedValue",
                "uVar5": "bitwiseResult",
                "local_14": "secondNumber",
                "local_10": "firstNumber",
                "local_a": "index",
                "local_9": "flag"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "handle_user_input_08003f34",
            "code": "\nvoid handle_user_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 return_value;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = check_and_get_lowest_byte_08008286();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            FUNC_08004030(0xd);\n            initialize_data_08003980();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    handle_alarm_08003a74();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      FUNC_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      return_value = process_command_08003b98(&DAT_20000d10);\n      FUNC_08004030(return_value);\n    }\n    initialize_data_08003980();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "handle_user_input_08003f34",
                "bVar1": "input_byte",
                "uVar2": "return_value",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "FUNC_08004030",
            "code": "\nvoid FUNC_08004030(char param_1)\n\n{\n  if (param_1 == '\\0') {\n    send_string_to_device_080036c6(&DAT_0800b5c8);\n  }\n  else {\n    send_string_to_device_080036c6(\"error: \");\n    switch(param_1) {\n    case '\\x01':\n      send_string_to_device_080036c6(\"Bad number format\");\n      break;\n    case '\\x02':\n      send_string_to_device_080036c6(\"Expected command letter\");\n      break;\n    case '\\x03':\n      send_string_to_device_080036c6(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      send_string_to_device_080036c6(\"Invalid radius\");\n      break;\n    case '\\x05':\n      send_string_to_device_080036c6(\"Modal group violation\");\n      break;\n    case '\\x06':\n      send_string_to_device_080036c6(\"Invalid statement\");\n      break;\n    case '\\a':\n      send_string_to_device_080036c6(\"Setting disabled\");\n      break;\n    case '\\b':\n      send_string_to_device_080036c6(\"Value < 0.0\");\n      break;\n    case '\\t':\n      send_string_to_device_080036c6(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      send_string_to_device_080036c6(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      send_string_to_device_080036c6(\"Busy or queued\");\n      break;\n    case '\\f':\n      send_string_to_device_080036c6(\"Alarm lock\");\n      break;\n    case '\\r':\n      send_string_to_device_080036c6(\"Line overflow\");\n    }\n    send_string_to_device_080036c6(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "FUNC_08004030"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "print_alarm_message_08004148",
            "code": "\nvoid printAlarmMessage_08004148(char errorCode)\n\n{\n  sendStringToDevice(\"ALARM: \");\n  if (errorCode == -2) {\n    sendStringToDevice(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    sendStringToDevice(\"Hard limit\");\n  }\n  sendStringToDevice(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "print_alarm_message_08004148",
                "param_1": "errorCode",
                "send_string_to_device_080036c6": "sendStringToDevice"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined status)\n\n{\n  send_string_to_device_080036c6(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    send_string_to_device_080036c6(\"Reset to continue\");\n    break;\n  case 2:\n    send_string_to_device_080036c6(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    send_string_to_device_080036c6(\"Caution: Unlocked\");\n    break;\n  case 4:\n    send_string_to_device_080036c6(\"Enabled\");\n    break;\n  case 5:\n    send_string_to_device_080036c6(\"Disabled\");\n  }\n  send_string_to_device_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "status"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\nvoid printGrblVersion_08004228(void)\n\n{\n  sendStringToDevice(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "send_string_to_device_080036c6": "sendStringToDevice"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_commands_0800423c",
            "code": "\nvoid print_grbl_commands_0800423c(void)\n\n{\n  send_string_to_device(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_commands_0800423c",
                "send_string_to_device_080036c6": "send_string_to_device"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "display_device_settings_08004250",
            "code": "\nvoid displayDeviceSettings_08004250(void)\n\n{\n  undefined4 uVar1;\n  \n  sendStringToDevice(&DAT_0800b8b8);\n  convertFloatToAscii(DAT_20000ebc);\n  sendStringToDevice(\" (x, step/mm)\\r\\n$1=\");\n  convertFloatToAscii(DAT_20000ec0);\n  sendStringToDevice(\" (y, step/mm)\\r\\n$2=\");\n  convertFloatToAscii(DAT_20000ec4);\n  sendStringToDevice(\" (z, step/mm)\\r\\n$3=\");\n  sendAbsoluteValue(DAT_20000ec9);\n  sendStringToDevice(\" (step pulse, usec)\\r\\n$4=\");\n  convertFloatToAscii(DAT_20000ecc);\n  sendStringToDevice(\" (default feed, mm/min)\\r\\n$5=\");\n  convertFloatToAscii(DAT_20000ed0);\n  sendStringToDevice(\" (default seek, mm/min)\\r\\n$6=\");\n  sendAbsoluteValue(DAT_20000ed4);\n  sendStringToDevice(\" (step port invert mask, int:\");\n  sendBits(DAT_20000ed4);\n  sendStringToDevice(\")\\r\\n$7=\");\n  sendAbsoluteValue(DAT_20000ef8);\n  sendStringToDevice(\" (step idle delay, msec)\\r\\n$8=\");\n  uVar1 = calculateFloatingPoint(DAT_20000edc,0x45610000);\n  convertFloatToAscii(uVar1);\n  sendStringToDevice(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convertFloatToAscii(DAT_20000ee0);\n  sendStringToDevice(\" (junction deviation, mm)\\r\\n$10=\");\n  convertFloatToAscii(DAT_20000ed8);\n  sendStringToDevice(\" (arc, mm/segment)\\r\\n$11=\");\n  sendAbsoluteValue(DAT_20000efa);\n  sendStringToDevice(\" (n-arc correction, int)\\r\\n$12=\");\n  sendAbsoluteValue(DAT_20000ef9);\n  sendStringToDevice(\" (n-decimals, int)\\r\\n$13=\");\n  sendAbsoluteValue((DAT_20000ee4 & 1) != 0);\n  sendStringToDevice(\" (report inches, bool)\\r\\n$14=\");\n  sendAbsoluteValue((DAT_20000ee4 & 2) != 0);\n  sendStringToDevice(\" (auto start, bool)\\r\\n$15=\");\n  sendAbsoluteValue((DAT_20000ee4 & 4) != 0);\n  sendStringToDevice(\" (invert step enable, bool)\\r\\n$16=\");\n  sendAbsoluteValue((DAT_20000ee4 & 8) != 0);\n  sendStringToDevice(\" (hard limits, bool)\\r\\n$17=\");\n  sendAbsoluteValue((DAT_20000ee4 & 0x10) != 0);\n  sendStringToDevice(\" (homing cycle, bool)\\r\\n$18=\");\n  sendAbsoluteValue(DAT_20000ee6);\n  sendStringToDevice(\" (homing dir invert mask, int:\");\n  sendBits(DAT_20000ee6);\n  sendStringToDevice(\")\\r\\n$19=\");\n  convertFloatToAscii(DAT_20000ee8);\n  sendStringToDevice(\" (homing feed, mm/min)\\r\\n$20=\");\n  convertFloatToAscii(DAT_20000eec);\n  sendStringToDevice(\" (homing seek, mm/min)\\r\\n$21=\");\n  sendAbsoluteValue(DAT_20000ef0);\n  sendStringToDevice(\" (homing debounce, msec)\\r\\n$22=\");\n  convertFloatToAscii(DAT_20000ef4);\n  sendStringToDevice(\" (homing pull-off, mm)\\r\\n$23=\");\n  sendAbsoluteValue(DAT_20000ed6);\n  sendStringToDevice(\" (dir port invert mask, int:\");\n  sendBits(DAT_20000ed6);\n  sendStringToDevice(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "display_device_settings_08004250",
                "send_string_to_device_080036c6": "sendStringToDevice",
                "convert_float_to_ascii_08003826": "convertFloatToAscii",
                "send_absolute_value_080037fc": "sendAbsoluteValue",
                "send_bits_0800375c": "sendBits",
                "calculate_floating_point_08009054": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "convert_and_send_float_data_080044e8",
            "code": "\nvoid convertAndSendFloatData_080044e8(void)\n\n{\n  int dataProcessingResult;\n  undefined4 conversionResult;\n  undefined8 bitwiseConversionResult;\n  undefined4 floatDataArray [3];\n  byte index;\n  byte iterationCount;\n  \n  iterationCount = 0;\n  while( true ) {\n    if (7 < iterationCount) {\n      send_string_to_device_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convert_float_to_ascii_08003826(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          bitwiseConversionResult = bitwise_conversion_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          bitwiseConversionResult = calculate_bitwise_operation_08008640((int)bitwiseConversionResult,(int)((ulonglong)bitwiseConversionResult >> 0x20),0x57e16865,0x3fa42851);\n          conversionResult = calculate_result_08008c30((int)bitwiseConversionResult,(int)((ulonglong)bitwiseConversionResult >> 0x20));\n          convert_float_to_ascii_08003826(conversionResult);\n        }\n        if (index < 2) {\n          send_string_to_device_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          send_string_to_device_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    dataProcessingResult = validate_and_process_data_08004d7c(iterationCount,floatDataArray);\n    if (dataProcessingResult == 0) break;\n    send_string_to_device_080036c6(&DAT_0800bb98);\n    switch(iterationCount) {\n    case 0:\n      send_string_to_device_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      send_string_to_device_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      send_string_to_device_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      send_string_to_device_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      send_string_to_device_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      send_string_to_device_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      send_string_to_device_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      send_string_to_device_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convert_float_to_ascii_08003826(floatDataArray[index]);\n      }\n      else {\n        bitwiseConversionResult = bitwise_conversion_08008590(floatDataArray[index]);\n        bitwiseConversionResult = calculate_bitwise_operation_08008640((int)bitwiseConversionResult,(int)((ulonglong)bitwiseConversionResult >> 0x20),0x57e16865,0x3fa42851);\n        conversionResult = calculate_result_08008c30((int)bitwiseConversionResult,(int)((ulonglong)bitwiseConversionResult >> 0x20));\n        convert_float_to_ascii_08003826(conversionResult);\n      }\n      if (index < 2) {\n        send_string_to_device_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        send_string_to_device_080036c6(&DAT_0800b764);\n      }\n    }\n    iterationCount = iterationCount + 1;\n  }\n  FUNC_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "convert_and_send_float_data_080044e8",
                "iVar1": "dataProcessingResult",
                "uVar2": "conversionResult",
                "uVar3": "bitwiseConversionResult",
                "auStack_18": "floatDataArray",
                "local_a": "index",
                "local_9": "iterationCount"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "send_device_info_080046d0",
            "code": "\nvoid sendDeviceInfo_080046d0(void)\n\n{\n  undefined4 result;\n  undefined8 bitwiseResult;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    send_string_to_device_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    send_string_to_device_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    send_string_to_device_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    send_string_to_device_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    send_string_to_device_080036c6(&DAT_0800bbd8);\n  }\n  send_string_to_device_080036c6(&DAT_0800bbe0);\n  send_absolute_value_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      send_string_to_device_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      send_string_to_device_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    send_string_to_device_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    send_string_to_device_080036c6(&DAT_0800bc04);\n  }\n  else {\n    send_string_to_device_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    send_string_to_device_080036c6(&DAT_0800bc14);\n  }\n  else {\n    send_string_to_device_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    send_string_to_device_080036c6(&DAT_0800bc24);\n  }\n  else {\n    send_string_to_device_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    send_string_to_device_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      send_string_to_device_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      send_string_to_device_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    send_string_to_device_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      send_string_to_device_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      send_string_to_device_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    send_string_to_device_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      send_string_to_device_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      send_string_to_device_080036c6(&DAT_0800bc48);\n    }\n  }\n  send_string_to_device_080036c6(&DAT_0800bc50);\n  send_absolute_value_080037fc(DAT_20000e88);\n  send_string_to_device_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convert_float_to_ascii_08003826(DAT_20000e78);\n  }\n  else {\n    bitwiseResult = bitwise_conversion_08008590(DAT_20000e78);\n    bitwiseResult = calculate_bitwise_operation_08008640((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20),0x57e16865,0x3fa42851);\n    result = calculate_result_08008c30((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20));\n    convert_float_to_ascii_08003826(result);\n  }\n  send_string_to_device_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "send_device_info_080046d0",
                "uVar1": "result",
                "uVar2": "bitwiseResult"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "send_data_to_device_08004900",
            "code": "\nvoid send_data_to_device_08004900(undefined data_1,undefined4 data_2)\n\n{\n  send_string_to_device_080036c6(&DAT_0800bc58);\n  send_absolute_value_080037fc(data_1);\n  send_string_to_device_080036c6(&DAT_0800bc5c);\n  send_string_to_device_0800369c(data_2);\n  send_string_to_device_080036c6(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "send_data_to_device_08004900",
                "param_1": "data_1",
                "param_2": "data_2"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_device_status_08004940",
            "code": "\nvoid printDeviceStatus_08004940(void)\n\n{\n  undefined4 newValue;\n  uint tempValue;\n  undefined4 reverseValue;\n  undefined8 bitwiseValue1;\n  undefined8 bitwiseValue2;\n  undefined4 updatedValues [6];\n  byte index;\n  \n  updatedValues[3] = DAT_20000eac;\n  updatedValues[4] = DAT_20000eb0;\n  updatedValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    send_string_to_device_080036c6(\"<Idle\");\n    break;\n  case 2:\n    send_string_to_device_080036c6(\"<Queue\");\n    break;\n  case 3:\n    send_string_to_device_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    send_string_to_device_080036c6(\"<Hold\");\n    break;\n  case 5:\n    send_string_to_device_080036c6(\"<Home\");\n    break;\n  case 6:\n    send_string_to_device_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    send_string_to_device_080036c6(\"<Check\");\n  }\n  send_string_to_device_080036c6(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    newValue = calculate_updated_value_08008e44(updatedValues[index + 3]);\n    tempValue = (uint)index;\n    newValue = calculate_floating_point_08009054(newValue,(&DAT_20000ebc)[index]);\n    updatedValues[tempValue] = newValue;\n    if ((DAT_20000ee4 & 1) != 0) {\n      bitwiseValue1 = bitwise_conversion_08008590(updatedValues[index]);\n      bitwiseValue1 = calculate_bitwise_operation_08008640((int)bitwiseValue1,(int)((ulonglong)bitwiseValue1 >> 0x20),0x57e16865,0x3fa42851);\n      tempValue = (uint)index;\n      newValue = calculate_result_08008c30((int)bitwiseValue1,(int)((ulonglong)bitwiseValue1 >> 0x20));\n      updatedValues[tempValue] = newValue;\n    }\n    convert_float_to_ascii_08003826(updatedValues[index]);\n    send_string_to_device_080036c6(&DAT_0800bbbc);\n  }\n  send_string_to_device_080036c6(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      reverseValue = updatedValues[index];\n      newValue = reverse_number_operation_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      tempValue = (uint)index;\n      newValue = calculate_float_addition_08008cd8(reverseValue,newValue);\n      updatedValues[tempValue] = newValue;\n    }\n    else {\n      bitwiseValue1 = bitwise_conversion_08008590(updatedValues[index]);\n      newValue = reverse_number_operation_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      bitwiseValue2 = bitwise_conversion_08008590(newValue);\n      bitwiseValue2 = calculate_bitwise_operation_08008640((int)bitwiseValue2,(int)((ulonglong)bitwiseValue2 >> 0x20),0x57e16865,0x3fa42851);\n      bitwiseValue1 = calculate_extended_multiplication_080082d0((int)bitwiseValue1,(int)((ulonglong)bitwiseValue1 >> 0x20),(int)bitwiseValue2,\n                           (int)((ulonglong)bitwiseValue2 >> 0x20));\n      tempValue = (uint)index;\n      newValue = calculate_result_08008c30((int)bitwiseValue1,(int)((ulonglong)bitwiseValue1 >> 0x20));\n      updatedValues[tempValue] = newValue;\n    }\n    convert_float_to_ascii_08003826(updatedValues[index]);\n    if (index < 2) {\n      send_string_to_device_080036c6(&DAT_0800bbbc);\n    }\n  }\n  send_string_to_device_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_device_status_08004940",
                "auStack_2c": "updatedValues",
                "local_11": "index",
                "uVar1": "newValue",
                "uVar2": "tempValue",
                "uVar3": "reverseValue",
                "uVar4": "bitwiseValue1",
                "uVar5": "bitwiseValue2"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "process_data_08004bc0",
            "code": "\nvoid process_data_08004bc0(byte input_byte,undefined4 input_arg)\n\n{\n  process_data_08004bc0_helper((unsigned_short)input_byte * 0x101 + 0x300,input_arg,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "process_data_08004bc0",
                "param_1": "input_byte",
                "param_2": "input_arg",
                "process_data_08000374": "process_data_helper",
                "ushort": "unsigned_short"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "process_and_store_data_08004bf4",
            "code": "\nvoid process_and_store_data_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  process_data((unsigned_short)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "process_and_store_data_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value",
                "process_data_08000374": "process_data",
                "ushort": "unsigned_short"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_and_process_data_08004c2a",
            "code": "\nvoid initialize_and_process_data_08004c2a(void)\n\n{\n  storeData(0,5);\n  processData(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_and_process_data_08004c2a",
                "store_data_08000340": "storeData",
                "process_data_08000374": "processData"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_data_08004c48",
            "code": "\nvoid initialize_data_08004c48(char input_param)\n\n{\n  if (input_param != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_and_process_data_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "validate_and_process_data_08004d2c",
            "code": "\nbool validate_and_process_data_08004d2c(byte input_byte,undefined *data_buffer)\n\n{\n  int result;\n  \n  result = check_memory_values_080003ec(data_buffer,(ushort)input_byte * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *data_buffer = 0;\n    process_data_08004bc0(input_byte,data_buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "validate_and_process_data_08004d2c",
                "param_1": "input_byte",
                "param_2": "data_buffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "validate_and_process_data_08004d7c",
            "code": "\nbool validateAndProcessData_08004d7c(byte inputByte,undefined4 dataPointer)\n\n{\n  int result;\n  \n  result = checkMemoryValues(dataPointer,(ushort)inputByte * 0xd + 0x200,0xc);\n  if (result == 0) {\n    fillMemory(dataPointer,0,0xc);\n    processAndStoreData(inputByte,dataPointer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "validate_and_process_data_08004d7c",
                "param_1": "inputByte",
                "param_2": "dataPointer",
                "iVar1": "result",
                "check_memory_values_080003ec": "checkMemoryValues",
                "fill_memory_with_0800b430": "fillMemory",
                "process_and_store_data_08004bf4": "processAndStoreData"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_memory_and_initialize_08004dd2",
            "code": "\nundefined4 check_memory_and_initialize_08004dd2(void)\n\n{\n  byte memory_value;\n  int check_result;\n  \n  memory_value = retrieve_memory_value_08000310(0);\n  if (memory_value == 5) {\n    check_result = check_memory_values_080003ec(&DAT_20000ebc,1,0x40);\n    if (check_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < memory_value) {\n      return 0;\n    }\n    check_result = check_memory_values_080003ec(&DAT_20000ebc,1,0x28);\n    if (check_result == 0) {\n      return 0;\n    }\n    initialize_data_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_memory_and_initialize_08004dd2",
                "bVar1": "memory_value",
                "iVar2": "check_result"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "process_input_08004e30",
            "code": "\nundefined4 processInput_08004e30(int inputType,uint inputValue)\n\n{\n  undefined4 result;\n  int checkResult;\n  undefined8 convertedValue;\n  \n  switch(inputType) {\n  case 0:\n  case 1:\n  case 2:\n    checkResult = check_concatenation_result_0800923c(inputValue,0);\n    if (checkResult != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[inputType] = inputValue;\n    break;\n  case 3:\n    checkResult = is_concatenated_value_null_08009228(inputValue,0x40400000);\n    if (checkResult != 0) {\n      return 9;\n    }\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_double_precision_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ec9 = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = inputValue;\n    break;\n  case 5:\n    DAT_20000ed0 = inputValue;\n    break;\n  case 6:\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed4 = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 7:\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_double_precision_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef8 = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 8:\n    result = calculate_float_08008eec(inputValue,0x42700000);\n    DAT_20000edc = calculate_float_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = inputValue & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = inputValue;\n    break;\n  case 0xb:\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_double_precision_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000efa = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xc:\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_double_precision_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef9 = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xd:\n    checkResult = check_concatenated_values_08009214(inputValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    checkResult = check_concatenated_values_08009214(inputValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    checkResult = check_concatenated_values_08009214(inputValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    checkResult = check_concatenated_values_08009214(inputValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    check_flag_status_0800192c();\n    break;\n  case 0x11:\n    checkResult = check_concatenated_values_08009214(inputValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ee6 = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = inputValue;\n    break;\n  case 0x14:\n    DAT_20000eec = inputValue;\n    break;\n  case 0x15:\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_double_precision_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef0 = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = inputValue;\n    break;\n  case 0x17:\n    convertedValue = bitwise_conversion_08008590(inputValue);\n    convertedValue = calculate_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed6 = calculate_result_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_and_process_data_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "process_input_08004e30",
                "param_1": "inputType",
                "param_2": "inputValue",
                "uVar1": "result",
                "iVar2": "checkResult",
                "uVar3": "convertedValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "process_device_data_080051b4",
            "code": "\nvoid processDeviceData_080051b4(void)\n\n{\n  int checkResult;\n  undefined dataBuffer [15];\n  byte deviceIndex;\n  \n  checkResult = check_memory_and_initialize_08004dd2();\n  if (checkResult == 0) {\n    FUNC_08004030(10);\n    initialize_data_08004c48(1);\n    display_device_settings_08004250();\n  }\n  for (deviceIndex = 0; deviceIndex < 8; deviceIndex = deviceIndex + 1) {\n    checkResult = validate_and_process_data_08004d7c(deviceIndex,dataBuffer);\n    if (checkResult == 0) {\n      FUNC_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "process_device_data_080051b4",
                "auStack_18": "dataBuffer",
                "local_9": "deviceIndex",
                "iVar1": "checkResult"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_system_08005238",
            "code": "\nvoid initialize_system_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  initialize_system_08005238_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_system_08005238"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "initialize_system_08005250",
            "code": "\nvoid initialize_system_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "initialize_system_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "manage_param_0800525c_0800525c",
            "code": "\nvoid manage_param_0800525c_0800525c(byte input_parameter)\n\n{\n  if ((int)(char)input_parameter != (uint)DAT_20000e12) {\n    check_memory_availability();\n    if (input_parameter == 0) {\n      initialize_system();\n      DAT_20000e12 = input_parameter;\n    }\n    else {\n      if ((char)input_parameter < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input_parameter;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "manage_param_0800525c_0800525c",
                "param_1": "input_parameter",
                "check_memory_availability_08002fd4": "check_memory_availability",
                "initialize_system_08005250": "initialize_system"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_data_080052ac",
            "code": "\n\n\nvoid updateData_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_data_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_flags_080052dc",
            "code": "\n\n\nvoid updateFlags_080052dc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_flags_080052dc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_minimum_value_08005324",
            "code": "\nvoid calculateMinimumValue_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_minimum_value_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_minimum_value_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_and_check_threshold_08005360",
            "code": "\nbool updateCounterAndCheckThreshold_08005360(void)\n\n{\n  bool isThresholdExceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isThresholdExceeded = 420000 < DAT_20000e2c;\n  if (isThresholdExceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isThresholdExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_and_check_threshold_08005360",
                "bVar1": "isThresholdExceeded"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_data_080053a0",
            "code": "\nvoid updateData_080053a0(void)\n\n{\n  int iVar1;\n  \n  updateFlags(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)getMemoryAddress();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      clearBitsAndCheckFlag();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculateMinValue(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = updateCounterAndCheckThreshold();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculateMinValue(DAT_20000e30);\n          }\n          else {\n            clearBitsAndCheckFlag();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = updateCounterAndCheckThreshold();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculateMinValue(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculateMinValue(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = updateCounterAndCheckThreshold();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculateMinValue(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      updateValueIfNeeded();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_data_080053a0",
                "update_flags_080052dc": "updateFlags",
                "get_memory_address_08002f74": "getMemoryAddress",
                "clear_bits_and_check_flag_080057e4": "clearBitsAndCheckFlag",
                "calculate_minimum_value_08005324": "calculateMinValue",
                "update_counter_and_check_threshold_08005360": "updateCounterAndCheckThreshold",
                "update_value_if_needed_08002f40": "updateValueIfNeeded"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initializeData_08005760(void)\n\n{\n  updateData(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "update_data_080052ac": "updateData"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_data_08005778",
            "code": "\nvoid initializeData_08005778(void)\n\n{\n  update_data_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_data_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_program_08005790",
            "code": "\nvoid initialize_program_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_global_data(0x69);\n    store_parameter((DAT_20000ec9 + 5) * 0x15);\n    initialize_flags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_program_08005790",
                "set_global_data_08007c40": "set_global_data",
                "store_parameter_08007c5e": "store_parameter",
                "initialize_flags_08007b70": "initialize_flags"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "clear_bits_and_check_flag_080057e4",
            "code": "\nvoid clear_bits_and_check_flag_080057e4(void)\n\n{\n  clear_bits_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "clear_bits_and_check_flag_080057e4"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_memory_08005814",
            "code": "\nvoid initializeMemory_08005814(void)\n\n{\n  fill_memory_with_0800b430(&DAT_20000e14,0,0x24);\n  findMinimumValue(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_memory_08005814",
                "calculate_minimum_value_08005324": "findMinimumValue"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_program_and_check_flags_0800583c",
            "code": "\nvoid initialize_program_and_check_flags_0800583c(void)\n\n{\n  update_data(DAT_20000ed4);\n  initialize_program();\n  clear_bits_and_check_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_program_and_check_flags_0800583c",
                "update_data_080052ac": "update_data",
                "initialize_program_08005790": "initialize_program",
                "clear_bits_and_check_flag_080057e4": "clear_bits_and_check_flags"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_program_if_needed_0800585c",
            "code": "\nvoid initialize_program_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_program_08005790();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_program_if_needed_0800585c"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "FUNC_080058a0",
            "code": "\nvoid FUNC_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    update_values_08003618(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculate_minimum_value_08005324(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "FUNC_080058a0"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_flag_08005900",
            "code": "\nundefined4 checkFlag_08005900(byte byteValue)\n\n{\n  if (byteValue == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byteValue < 0x7f) {\n    if (byteValue == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byteValue < 0x40) {\n      if (byteValue == 0x18) {\n        initializeSystemAndCheckFlag();\n        return 1;\n      }\n      if (byteValue == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_flag_08005900",
                "param_1": "byteValue",
                "initialize_system_and_check_flag_080025e8": "initializeSystemAndCheckFlag"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_system_interrupt_0800597c",
            "code": "\nvoid execute_system_interrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_system_interrupt_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_interrupt_or_zero_08005984",
            "code": "\nundefined4 execute_interrupt_or_zero_08005984(undefined4 input_parameter)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_system_interrupt_0800597c(1,input_parameter,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_interrupt_or_zero_08005984",
                "param_1": "input_parameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_and_update_memory_080059b4",
            "code": "\n\n\nundefined4 initialize_and_update_memory_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_memory(16000);\n  initialize_memory(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_and_update_memory_080059b4",
                "update_memory_08006d72": "update_memory",
                "initialize_memory_08006ce0": "initialize_memory"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\n\n\nundefined4 FUNC_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_from_memory_08005a84",
            "code": "\nundefined4 get_data_from_memory_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_from_memory_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "check_limit_and_advance_08005a98",
            "code": "\nvoid check_limit_and_advance_08005a98(int limit)\n\n{\n  int data;\n  uint current_data;\n  \n  data = get_data_from_memory_08005a84();\n  do {\n    current_data = get_data_from_memory_08005a84();\n  } while (current_data < (uint)(limit + data));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "check_limit_and_advance_08005a98",
                "param_1": "limit",
                "iVar1": "data",
                "uVar2": "current_data"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_byte_to_memory_08005bdc",
            "code": "\nvoid write_byte_to_memory_08005bdc(byte input_byte,uint value)\n\n{\n  if ((char)input_byte < '\\0') {\n    *(char *)((input_byte & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input_byte + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_byte_to_memory_08005bdc",
                "param_1": "input_byte",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_set_parameters_08005c30",
            "code": "\n\n\nbool checkAndSetParameters_08005c30(int value)\n\n{\n  bool isValueValid;\n  \n  isValueValid = value - 1U < 0x1000000;\n  if (isValueValid) {\n    _DAT_e000e014 = value + -1;\n    writeByteToMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_set_parameters_08005c30",
                "param_1": "value",
                "bVar1": "isValueValid",
                "write_byte_to_memory_08005bdc": "writeByteToMemory"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_flag_conditions_08005cec",
            "code": "\n\n\nundefined4 check_flag_conditions_08005cec(uint *flags)\n\n{\n  int data;\n  uint data_comparison;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flag_value1 != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 5000U <= data_comparison) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)flag_value1,_DAT_40023800));\n      if (flag_value1 == 1) {\n        data = get_data_from_memory_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          data_comparison = get_data_from_memory_08005a84();\n          if (data + 5000U <= data_comparison) {\n            return 3;\n          }\n        }\n      }\n      else {\n        data = get_data_from_memory_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          data_comparison = get_data_from_memory_08005a84();\n          if (data + 5000U <= data_comparison) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flag_value3 != 1)) {\n        return 1;\n      }\n    }\n    else if (flag_value3 == 0) {\n      _DAT_42470000 = 0;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 100U <= data_comparison) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 100U <= data_comparison) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = flag_value4 << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flag_value5 == 0) {\n      _DAT_42470e80 = 0;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 100U <= data_comparison) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 100U <= data_comparison) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    data = get_data_from_memory_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      data_comparison = get_data_from_memory_08005a84();\n      if (data + 100U <= data_comparison) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    data = get_data_from_memory_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      data_comparison = get_data_from_memory_08005a84();\n      if (data + 5000U <= data_comparison) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)flag_value2);\n    if (flag_value2 == 1) {\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 5000U <= data_comparison) {\n          return 3;\n        }\n      }\n    }\n    else {\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 5000U <= data_comparison) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (flag_value6 != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (flag_value6 == 2) {\n      _DAT_42470060 = 0;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 100U <= data_comparison) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           sys_config3 << 0x18 |\n           sys_config4 | sys_config5 << 6 | ((sys_config6 >> 1) - 1) * 0x10000 | sys_config7 |\n           0x20000000;\n      _DAT_42470060 = 1;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 100U <= data_comparison) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      data = get_data_from_memory_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        data_comparison = get_data_from_memory_08005a84();\n        if (data + 100U <= data_comparison) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_flag_conditions_08005cec",
                "param_1": "flags",
                "iVar1": "data",
                "uVar2": "data_comparison",
                "param_1[1]": "flag_value1",
                "param_1[2]": "flag_value2",
                "param_1[3]": "flag_value3",
                "param_1[4]": "flag_value4",
                "param_1[5]": "flag_value5",
                "param_1[6]": "flag_value6",
                "param_1[0xb]": "sys_config3",
                "param_1[8]": "sys_config4",
                "param_1[9]": "sys_config5",
                "param_1[10]": "sys_config6",
                "param_1[7]": "sys_config7"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "check_clock_frequency_0800618c",
            "code": "\n\n\nundefined4 checkClockFrequency_0800618c(uint *settings,uint value)\n\n{\n  int data;\n  uint currentData;\n  uint targetData;\n  undefined8 clockFrequency;\n  \n  if ((_DAT_40023c00 & 0xf) < value) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)value);\n    if (value != (value & 0xf)) {\n      return 1;\n    }\n    if ((*settings & 1) != 0) {\n      if (settings[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((settings[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = settings[1] | _DAT_40023808 & 0xfffffffc;\n      data = get_data_from_memory_08005a84();\n      targetData = data + 5000;\n      if (settings[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentData = get_data_from_memory_08005a84();\n          if (targetData <= currentData) {\n            return 3;\n          }\n        }\n      }\n      else if (settings[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentData = get_data_from_memory_08005a84();\n          if (targetData <= currentData) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentData = get_data_from_memory_08005a84();\n          if (targetData <= currentData) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*settings & 1) != 0) {\n      if (settings[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (settings[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = settings[1] | _DAT_40023808 & 0xfffffffc;\n      data = get_data_from_memory_08005a84();\n      targetData = data + 5000;\n      if (settings[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentData = get_data_from_memory_08005a84();\n          if (targetData <= currentData) {\n            return 3;\n          }\n        }\n      }\n      else if (settings[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentData = get_data_from_memory_08005a84();\n          if (targetData <= currentData) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentData = get_data_from_memory_08005a84();\n          if (targetData <= currentData) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)value);\n    if (value != (value & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    _DAT_40023808 = settings[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*settings & 4) != 0) {\n    _DAT_40023808 = settings[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*settings & 8) != 0) {\n    _DAT_40023808 = settings[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clockFrequency = calculate_and_set_clock_frequency_08006628();\n  check_and_set_parameters_08005c30((uint)clockFrequency / 1000,(int)((ulonglong)clockFrequency >> 0x20),(uint)clockFrequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "check_clock_frequency_0800618c",
                "param_1": "settings",
                "param_2": "value",
                "iVar1": "data",
                "uVar2": "currentData",
                "uVar3": "targetData",
                "uVar4": "clockFrequency"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_memory_configuration_0800640c",
            "code": "\n\n\nvoid updateMemoryConfiguration_0800640c(int mode,uint flag1,uint flag2)\n\n{\n  undefined4 size;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  \n  if (mode == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    size = 0x100;\n    var1 = 2;\n    var3 = 3;\n    var2 = 0;\n    var4 = 0;\n    update_memory_08006e88(0x40020000,&size);\n    _DAT_40023808 = flag2 | flag1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    size = 0x200;\n    var1 = 2;\n    var3 = 3;\n    var2 = 0;\n    var4 = 0;\n    update_memory_08006e88(0x40020800,&size);\n    _DAT_40023808 = flag1 | flag2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_memory_configuration_0800640c",
                "param_1": "mode",
                "param_2": "flag1",
                "param_3": "flag2",
                "local_1c": "size",
                "local_18": "var1",
                "local_14": "var2",
                "local_10": "var3",
                "local_c": "var4"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculateClockFrequency_080064ec(void)\n\n{\n  uint uVar1;\n  uint clockFrequency;\n  \n  uVar1 = _DAT_40023808 & 0xc;\n  if (uVar1 == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockFrequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (uVar1 < 9) {\n    if (uVar1 == 0) {\n      return 16000000;\n    }\n    if (uVar1 == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "local_c": "clockFrequency"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_and_set_clock_frequency_08006628",
            "code": "\n\n\nuint calculate_and_set_clock_frequency_08006628(void)\n\n{\n  uint clock_frequency;\n  \n  clock_frequency = calculate_clock_frequency_080064ec();\n  DAT_20000000 = clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_and_set_clock_frequency_08006628",
                "uVar1": "clock_frequency"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_frequency_08006680",
            "code": "\n\n\nuint calculateClockFrequency_08006680(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_and_set_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_frequency_08006680",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_clock_frequency_080066cc",
            "code": "\n\n\nuint calculateClockFrequency_080066cc(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_and_set_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_clock_frequency_080066cc",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "configure_memory_08006950",
            "code": "\n\n\nvoid configureMemory_08006950(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (inputValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "configure_memory_08006950",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_shifted_bits_08006998",
            "code": "\n\n\nuint get_shifted_bits_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_shifted_bits_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_array_080069b4",
            "code": "\nvoid setBitInArray_080069b4(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_array_080069b4",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "FUNC_080069e4",
            "code": "\nvoid FUNC_080069e4(byte param_1)\n\n{\n  *(int *)((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (param_1 & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "FUNC_080069e4"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool checkBit_08006a18(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_memory_08006a58",
            "code": "\nvoid setBitInMemory_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_08006a8c",
            "code": "\nvoid setBit_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool checkBit_08006ac0(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "update_memory_08006b00",
            "code": "\nvoid updateMemory_08006b00(byte memoryAddress,uint dataValue)\n\n{\n  if ((char)memoryAddress < '\\0') {\n    *(char *)((memoryAddress & 0xf) + 0xe000ed14) = (char)((dataValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)memoryAddress + -0x1fff1c00) = (char)((dataValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "update_memory_08006b00",
                "param_1": "memoryAddress",
                "param_2": "dataValue"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "get_shifted_nibble_08006b54",
            "code": "\nbyte getShiftedNibble_08006b54(byte inputByte)\n\n{\n  byte resultByte;\n  \n  if ((char)inputByte < '\\0') {\n    resultByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    resultByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return resultByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "get_shifted_nibble_08006b54",
                "param_1": "inputByte",
                "bVar1": "resultByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "bitwise_operation_08006ba0",
            "code": "\nuint bitwiseOperation_08006ba0(uint inputBits,uint inputValue,uint outputBits)\n\n{\n  uint shiftAmount;\n  \n  inputBits = inputBits & 7;\n  shiftAmount = 7 - inputBits;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (inputBits + 4 < 7) {\n    inputBits = 0;\n  }\n  else {\n    inputBits = inputBits - 3;\n  }\n  return outputBits & (1 << (inputBits & 0xff)) - 1U |\n         ((1 << (shiftAmount & 0xff)) - 1U & inputValue) << (inputBits & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "inputBits",
                "param_2": "inputValue",
                "param_3": "outputBits",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint input,uint bitIndex,uint *output1,uint *output2)\n\n{\n  uint shiftAmount;\n  \n  bitIndex = bitIndex & 7;\n  shiftAmount = 7 - bitIndex;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (bitIndex + 4 < 7) {\n    bitIndex = 0;\n  }\n  else {\n    bitIndex = bitIndex - 3;\n  }\n  *output1 = (1 << (shiftAmount & 0xff)) - 1U & input >> (bitIndex & 0xff);\n  *output2 = (1 << (bitIndex & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "bitIndex",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_update_memory_08006c9c",
            "code": "\n\n\nbool checkAndUpdateMemory_08006c9c(int inputValue)\n\n{\n  bool isInputValid;\n  \n  isInputValid = inputValue - 1U < 0x1000000;\n  if (isInputValid) {\n    _DAT_e000e014 = inputValue + -1;\n    update_memory_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInputValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_update_memory_08006c9c",
                "param_1": "inputValue",
                "bVar1": "isInputValid"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "initialize_memory_08006ce0",
            "code": "\nvoid initialize_memory_08006ce0(undefined4 config)\n\n{\n  configure_memory(config);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "initialize_memory_08006ce0",
                "param_1": "config",
                "configure_memory_08006950": "configure_memory"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "update_memory_with_shifted_bits_08006cf6",
            "code": "\nvoid update_memory_with_shifted_bits_08006cf6(char input_character,undefined4 param_2,undefined4 param_3)\n\n{\n  undefined4 shifted_bits;\n  \n  shifted_bits = get_shifted_bits();\n  shifted_bits = perform_bitwise_operation(shifted_bits,param_2,param_3);\n  update_memory((int)input_character,shifted_bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "update_memory_with_shifted_bits_08006cf6",
                "param_1": "input_character",
                "uVar1": "shifted_bits",
                "get_shifted_bits_08006998": "get_shifted_bits",
                "bitwise_operation_08006ba0": "perform_bitwise_operation",
                "update_memory_08006b00": "update_memory"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_array_08006d2e",
            "code": "\nvoid setBitInArray_08006d2e(char input)\n\n{\n  setBitInArray_08006d2e080069b4((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_array_08006d2e",
                "param_1": "input",
                "set_bit_in_array_080069b4": "setBitInArray080069b4"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "execute_function_08006d4a",
            "code": "\nvoid executeFunction_08006d4a(char character)\n\n{\n  FUNC_080069e4((int)character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "execute_function_08006d4a",
                "param_1": "character"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "execute_infinite_loop_08006d66",
            "code": "\nvoid execute_infinite_loop_08006d66(void)\n\n{\n  infinite_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "execute_infinite_loop_08006d66",
                "infinite_loop_08006c70": "infinite_loop"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "update_memory_08006d72",
            "code": "\nundefined4 update_memory_08006d72(undefined4 memory)\n\n{\n  undefined4 result;\n  \n  result = check_and_update_memory_08006d72_08006c9c(memory);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "update_memory_08006d72",
                "param_1": "memory",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_shifted_bits_08006d8a",
            "code": "\nundefined4 get_shifted_bits_08006d8a(void)\n\n{\n  undefined4 shifted_bits;\n  \n  shifted_bits = get_shifted_bits_08006d8a_08006998();\n  return shifted_bits;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_shifted_bits_08006d8a",
                "uVar1": "shifted_bits"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_and_shift_bits_08006d98",
            "code": "\nvoid extractAndShiftBits_08006d98(char inputCharacter,undefined4 outputParam1,undefined4 outputParam2,undefined4 outputParam3)\n\n{\n  undefined4 shiftedNibble;\n  \n  shiftedNibble = getShiftedNibble((int)inputCharacter);\n  extractBits(shiftedNibble,outputParam1,outputParam2,outputParam3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_and_shift_bits_08006d98",
                "param_1": "inputCharacter",
                "param_2": "outputParam1",
                "param_3": "outputParam2",
                "param_4": "outputParam3",
                "uVar1": "shiftedNibble",
                "get_shifted_nibble_08006b54": "getShiftedNibble",
                "extract_bits_08006c04": "extractBits"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_in_memory_08006dc4",
            "code": "\nvoid setBitInMemory_08006dc4(char character)\n\n{\n  setBitAtAddress((int)character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_in_memory_08006dc4",
                "param_1": "character",
                "set_bit_in_memory_08006a58": "setBitAtAddress"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_bit_08006de0",
            "code": "\nundefined4 check_bit_08006de0(char input_value)\n\n{\n  undefined4 bit_check_result;\n  \n  bit_check_result = check_bit_08006de0_08006a18((int)input_value);\n  return bit_check_result;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "input_value",
                "uVar1": "bit_check_result"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_in_param_08006dfe",
            "code": "\nvoid set_bit_in_param_08006dfe(char input_parameter)\n\n{\n  set_bit_08006a8c((int)input_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_in_param_08006dfe",
                "param_1": "input_parameter"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_08006e1a",
            "code": "\nundefined4 checkBit_08006e1a(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006ac0((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_08006e1a",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_memory_08006e88",
            "code": "\n\n\nvoid updateMemory_08006e88(uint *memoryArray,uint *dataArray)\n\n{\n  uint bitMask;\n  uint bitValue;\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    bitMask = 1 << (counter & 0xff);\n    bitValue = *dataArray & bitMask;\n    if (bitValue == bitMask) {\n      if ((dataArray[1] == 2) || (dataArray[1] == 0x12)) {\n        bitMask = dataArray[4];\n        memoryArray[(counter >> 3) + 8] = memoryArray[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        memoryArray[(counter >> 3) + 8] = memoryArray[(counter >> 3) + 8] | bitMask << ((counter & 7) << 2);\n      }\n      *memoryArray = *memoryArray & ~(3 << ((counter & 0x7f) << 1));\n      *memoryArray = *memoryArray | (dataArray[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((dataArray[1] == 1) || (dataArray[1] == 2)) || (dataArray[1] == 0x11)) || (dataArray[1] == 0x12)\n         ) {\n        memoryArray[2] = memoryArray[2] & ~(3 << ((counter & 0x7f) << 1));\n        memoryArray[2] = memoryArray[2] | dataArray[3] << ((counter & 0x7f) << 1);\n        memoryArray[1] = memoryArray[1] & ~(1 << (counter & 0xff));\n        memoryArray[1] = memoryArray[1] | (dataArray[1] >> 4 & 1) << (counter & 0xff);\n      }\n      memoryArray[3] = memoryArray[3] & ~(3 << ((counter & 0x7f) << 1));\n      memoryArray[3] = memoryArray[3] | dataArray[2] << ((counter & 0x7f) << 1);\n      if ((dataArray[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        if (memoryArray == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (memoryArray == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (memoryArray == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (memoryArray == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (memoryArray == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (memoryArray == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (memoryArray == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (memoryArray == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (memoryArray == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (memoryArray == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((counter & 3) << 2) | *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitValue & _DAT_40013c00;\n        _DAT_40013c04 = ~bitValue & _DAT_40013c04;\n        if ((dataArray[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitValue | _DAT_40013c00;\n        }\n        if ((dataArray[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitValue | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitValue & _DAT_40013c08;\n        _DAT_40013c0c = ~bitValue & _DAT_40013c0c;\n        if ((dataArray[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitValue | _DAT_40013c08;\n        }\n        if ((dataArray[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitValue | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_memory_08006e88",
                "param_1": "memoryArray",
                "param_2": "dataArray",
                "uVar1": "bitMask",
                "uVar2": "bitValue",
                "iVar3": "index",
                "local_c": "counter"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "assign_param_value_0800733e",
            "code": "\nvoid assignParamValue_0800733e(int objectAddress,undefined2 value,char isNull)\n\n{\n  if (isNull == '\\0') {\n    *(undefined2 *)(objectAddress + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(objectAddress + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "assign_param_value_0800733e",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "isNull"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_data_if_flag_set_0800738e",
            "code": "\n\n\nvoid updateDataIfFlagSet_0800738e(ushort inputValue)\n\n{\n  if ((inputValue & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)inputValue;\n    FUNC_080073c0(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_data_if_flag_set_0800738e",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x40020018) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "FUNC_08007430",
            "code": "\nvoid FUNC_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "FUNC_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "configure_features_08007436",
            "code": "\n\n\nvoid configure_features_08007436(void)\n\n{\n  int iVar1;\n  undefined4 flag_condition_1;\n  undefined4 flag_condition_2;\n  undefined4 flag_condition_3;\n  undefined4 flag_condition_4;\n  undefined4 flag_condition_5;\n  undefined4 flag_condition_6;\n  undefined4 flag_condition_7;\n  undefined4 flag_condition_8;\n  undefined4 clock_frequency_1;\n  undefined4 clock_frequency_2;\n  undefined4 clock_frequency_3;\n  undefined4 clock_frequency_4;\n  undefined4 clock_frequency_5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag_condition_1 = 1;\n  flag_condition_2 = 1;\n  flag_condition_3 = 2;\n  flag_condition_4 = 0x400000;\n  flag_condition_5 = 8;\n  flag_condition_6 = 0x150;\n  flag_condition_7 = 2;\n  flag_condition_8 = 7;\n  iVar1 = check_flag_conditions_08005cec(&flag_condition_1);\n  if (iVar1 != 0) {\n    FUNC_08007430();\n  }\n  clock_frequency_1 = 0xf;\n  clock_frequency_2 = 2;\n  clock_frequency_3 = 0;\n  clock_frequency_4 = 0x1400;\n  clock_frequency_5 = 0x1000;\n  iVar1 = check_clock_frequency_0800618c(&clock_frequency_1,5);\n  if (iVar1 != 0) {\n    FUNC_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "configure_features_08007436",
                "local_4c": "flag_condition_1",
                "local_48": "flag_condition_2",
                "local_34": "flag_condition_3",
                "local_30": "flag_condition_4",
                "local_2c": "flag_condition_5",
                "local_28": "flag_condition_6",
                "local_24": "flag_condition_7",
                "local_20": "flag_condition_8",
                "local_1c": "clock_frequency_1",
                "local_18": "clock_frequency_2",
                "local_14": "clock_frequency_3",
                "local_10": "clock_frequency_4",
                "local_c": "clock_frequency_5"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "process_flags_080074c8",
            "code": "\nvoid processFlags_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    initializeSystemAndCheckFlag();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    checkFlagAndInitializeSystem(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "process_flags_080074c8",
                "param_1": "flags",
                "set_bit_in_memory_08007402": "setMemoryBit",
                "initialize_system_and_check_flag_0800195c": "initializeSystemAndCheckFlag",
                "check_flag_and_initialize_system_08003a18": "checkFlagAndInitializeSystem"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_in_memory_if_needed_08007520",
            "code": "\nvoid setBitInMemoryIfNeeded_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    setBitInMemory(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_in_memory_if_needed_08007520",
                "param_1": "inputValue",
                "set_bit_in_memory_080073d4": "setBitInMemory"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_system_08007540",
            "code": "\nundefined4 initialize_system_08007540(void)\n\n{\n  initialize_and_update_memory();\n  configure_features();\n  initialize_memory();\n  initialize_system_08007540();\n  initialize_memory();\n  configure_clock();\n  execute_interrupt_or_zero(0);\n  execute_program();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_system_08007540",
                "initialize_and_update_memory_080059b4": "initialize_and_update_memory",
                "configure_features_08007436": "configure_features",
                "initialize_memory_0800778c": "initialize_memory",
                "initialize_system_08007e08": "initialize_system",
                "initialize_memory_080079c0": "initialize_memory",
                "configure_clock_08008190": "configure_clock",
                "execute_interrupt_or_zero_08005984": "execute_interrupt_or_zero",
                "execute_program_08001ddc": "execute_program"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n\nvoid initializeSystem_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_in_memory_080076c8",
            "code": "\nvoid updateBitInMemory_080076c8(uint inputValue)\n\n{\n  *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) ^ 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_in_memory_080076c8",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_memory_08007756",
            "code": "\nvoid update_memory_08007756(void)\n\n{\n  uint data;\n  \n  data = get_memory_data();\n  if ((data & 0x1ff) == 0) {\n    update_bit_in_memory(0x3c);\n  }\n  if ((data & 0xf) == 0) {\n    update_combined_value_and_flags();\n  }\n  increment_counter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_memory_08007756",
                "uVar1": "data",
                "get_data_from_memory_08005a84": "get_memory_data",
                "update_bit_in_memory_080076c8": "update_bit_in_memory",
                "update_combined_value_and_flags_08007930": "update_combined_value_and_flags",
                "increment_counter_08005a68": "increment_counter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_memory_0800778c",
            "code": "\n\n\nvoid initializeMemory_0800778c(void)\n\n{\n  int offset;\n  int mask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  uint *dataPointer;\n  uint count;\n  \n  for (count = 0; count < 0x11; count = count + 1) {\n    offset = count * 0x18;\n    dataPointer = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*dataPointer >> 4 & 0xff);\n    mask = 1 << (*dataPointer & 0xf);\n    value1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    value2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    value3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    value4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    update_memory_08006e88(((*dataPointer >> 4) + 0x100080) * 0x400,&mask);\n    if (-1 < (int)dataPointer[5]) {\n      assign_param_value_0800733e(((*dataPointer >> 4) + 0x100080) * 0x400,1 << (*dataPointer & 0xf) & 0xffff,\n                   dataPointer[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_memory_0800778c",
                "local_c": "count",
                "iVar1": "offset",
                "local_10": "dataPointer",
                "local_24": "mask",
                "local_20": "value1",
                "local_1c": "value2",
                "local_18": "value3",
                "local_14": "value4"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_for_index_08007854",
            "code": "\nuint checkBitForIndex_08007854(uint input)\n\n{\n  return *(uint *)(((int)input >> 4) * 0x400 + 0x40020010) >> (input & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_for_index_08007854",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "get_bitmask_08007884",
            "code": "\nuint get_bitmask_08007884(void)\n\n{\n  int bit_0x36;\n  int bit_0x37;\n  int bit_0x38;\n  int bit_0x39;\n  int bit_0xf;\n  uint bit_0x0;\n  \n  bit_0x36 = check_bit_for_index_08007854(0x36);\n  bit_0x37 = check_bit_for_index_08007854(0x37);\n  bit_0x38 = check_bit_for_index_08007854(0x38);\n  bit_0x39 = check_bit_for_index_08007854(0x39);\n  bit_0xf = check_bit_for_index_08007854(0xf);\n  bit_0x0 = check_bit_for_index_08007854(0);\n  return bit_0x0 | bit_0x36 << 4 | bit_0x37 << 3 | bit_0x38 << 2 | bit_0x39 << 1 | bit_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "get_bitmask_08007884",
                "iVar1": "bit_0x36",
                "iVar2": "bit_0x37",
                "iVar3": "bit_0x38",
                "iVar4": "bit_0x39",
                "iVar5": "bit_0xf",
                "uVar6": "bit_0x0"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_combined_value_080078f4",
            "code": "\nuint calculate_combined_value_080078f4(void)\n\n{\n  int index;\n  uint combined_value;\n  \n  combined_value = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    combined_value = *(uint *)(&DAT_20000e54 + index * 4) | combined_value;\n  }\n  return combined_value;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_combined_value_080078f4",
                "local_10": "index",
                "local_c": "combined_value"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_combined_value_and_flags_08007930",
            "code": "\nvoid updateCombinedValueAndFlags_08007930(void)\n\n{\n  int bitmaskIndex;\n  uint previousCombinedValue;\n  undefined4 bitmask;\n  uint calculatedCombinedValue;\n  uint changedBits;\n  \n  bitmaskIndex = DAT_20000e68;\n  previousCombinedValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    bitmask = get_bitmask_08007884();\n    *(undefined4 *)(&DAT_20000e54 + bitmaskIndex * 4) = bitmask;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    calculatedCombinedValue = calculate_combined_value_080078f4();\n    previousCombinedValue = DAT_20000e64;\n    if (calculatedCombinedValue != DAT_20000e64) {\n      changedBits = ~calculatedCombinedValue & DAT_20000e64;\n      if ((~DAT_20000e64 & calculatedCombinedValue) != 0) {\n        process_flags_080074c8(~DAT_20000e64 & calculatedCombinedValue);\n      }\n      previousCombinedValue = calculatedCombinedValue;\n      if (changedBits != 0) {\n        set_bit_in_memory_if_needed_08007520(changedBits);\n      }\n    }\n  }\n  DAT_20000e64 = previousCombinedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_combined_value_and_flags_08007930",
                "iVar1": "bitmaskIndex",
                "uVar2": "previousCombinedValue",
                "uVar3": "bitmask",
                "uVar4": "calculatedCombinedValue",
                "uVar5": "changedBits"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_memory_080079c0",
            "code": "\nvoid initializeMemory_080079c0(void)\n\n{\n  fill_memory_with_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_in_memory_080079e0",
            "code": "\nvoid setBitInMemory_080079e0(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_status_flags_08007a10",
            "code": "\n\n\nvoid updateStatusFlags_08007a10(undefined *pointer)\n\n{\n  if (pointer == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (pointer == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (pointer == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_status_flags_08007a10",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "process_memory_update_08007a70",
            "code": "\nvoid processMemoryUpdate_08007a70(undefined *memoryAddress,undefined4 value1,undefined4 value2)\n\n{\n  undefined shiftedBits;\n  \n  if (memoryAddress == (undefined *)0x40000000) {\n    shiftedBits = 0x1c;\n  }\n  else if (memoryAddress == (undefined *)0x40000400) {\n    shiftedBits = 0x1d;\n  }\n  else {\n    if (memoryAddress != &DAT_40000800) {\n      return;\n    }\n    shiftedBits = 0x1e;\n  }\n  updateMemoryWithShiftedBits(shiftedBits,value1,value2);\n  setBitInMemory(shiftedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "process_memory_update_08007a70",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "local_c": "shiftedBits",
                "update_memory_with_shifted_bits_08006cf6": "updateMemoryWithShiftedBits",
                "set_bit_in_memory_080079e0": "setBitInMemory"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  updateStatusFlags(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  processMemoryUpdate(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "update_status_flags_08007a10": "updateStatusFlags",
                "process_memory_update_08007a70": "processMemoryUpdate"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "initialize_flags_08007b70",
            "code": "\n\n\nvoid initializeFlags_08007b70(void)\n\n{\n  uint flagValue;\n  \n  flagValue = 1;\n  if (_DAT_40000034 != 0) {\n    flagValue = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flagValue = flagValue | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flagValue;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "initialize_flags_08007b70",
                "local_c": "flagValue"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_bits_08007bc2",
            "code": "\n\n\nvoid clearBits_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_minimum_value_08007bf0",
            "code": "\n\n\nvoid update_minimum_value_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_minimum_value_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_global_data_08007c40",
            "code": "\n\n\nvoid setGlobalData_08007c40(undefined4 data)\n\n{\n  _DAT_40000034 = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_global_data_08007c40",
                "param_1": "data"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "store_parameter_08007c5e",
            "code": "\n\n\nvoid storeParameter_08007c5e(undefined4 newParameter)\n\n{\n  _DAT_40000038 = newParameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "store_parameter_08007c5e",
                "param_1": "newParameter"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "initialize_and_update_data_08007c7c",
            "code": "\n\n\nvoid initialize_and_update_data_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    initialize_data_1();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    initialize_data_2();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "initialize_and_update_data_08007c7c",
                "initialize_data_08005778": "initialize_data_1",
                "initialize_data_08005760": "initialize_data_2",
                "update_data_080053a0": "update_data"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_registers_08007d08",
            "code": "\n\n\nvoid initializeRegisters_08007d08(void)\n\n{\n  update_status_flags_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_registers_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid setFlags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_system_08007e08",
            "code": "\nvoid initialize_system_08007e08(void)\n\n{\n  initialize_memory();\n  initialize_registers();\n  set_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08",
                "initialize_memory_08007ad0": "initialize_memory",
                "initialize_registers_08007d08": "initialize_registers",
                "set_flags_08007da8": "set_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "send_byte_to_device_08007e1c",
            "code": "\n\n\nvoid send_byte_to_device_08007e1c(byte byte_to_send)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)byte_to_send;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "send_byte_to_device_08007e1c",
                "param_1": "byte_to_send"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_flag_set_08007e58",
            "code": "\n\n\nbool checkFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_flags_08007ea4",
            "code": "\n\n\nvoid updateFlags_08007ea4(undefined *address)\n\n{\n  if (address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_flags_08007ea4",
                "param_1": "address"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_configuration_08007f54",
            "code": "\nvoid calculateClockConfiguration_08007f54(int configPtr,int clockDivider)\n\n{\n  ulonglong frequency;\n  int frequency1;\n  int frequency2;\n  undefined8 clockFrequency;\n  \n  if ((*(uint *)(configPtr + 0xc) & 0x8000) == 0) {\n    if ((configPtr != 0x40011000) && (configPtr != 0x40011400)) {\n      clockFrequency = getFrequency1();\n      frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(clockDivider << 2);\n      frequency1 = getFrequency1((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n      frequency2 = getFrequency1();\n      *(uint *)(configPtr + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(frequency1 * 0x19) / (uint)(clockDivider << 2) +\n            (int)(((ulonglong)(uint)(frequency2 * 0x19) / (ulonglong)(uint)(clockDivider << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = getFrequency2();\n    frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(clockDivider << 2);\n    frequency1 = getFrequency2((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n    frequency2 = getFrequency2();\n    *(uint *)(configPtr + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(frequency1 * 0x19) / (uint)(clockDivider << 2) +\n          (int)(((ulonglong)(uint)(frequency2 * 0x19) / (ulonglong)(uint)(clockDivider << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((configPtr != 0x40011000) && (configPtr != 0x40011400)) {\n      clockFrequency = getFrequency1();\n      frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(clockDivider << 1);\n      frequency1 = getFrequency1((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n      frequency2 = getFrequency1();\n      *(uint *)(configPtr + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(frequency1 * 0x19) / (uint)(clockDivider << 1) +\n            (int)(((ulonglong)(uint)(frequency2 * 0x19) / (ulonglong)(uint)(clockDivider << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = getFrequency2();\n    frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(clockDivider << 1);\n    frequency1 = getFrequency2((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n    frequency2 = getFrequency2();\n    *(uint *)(configPtr + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(frequency1 * 0x19) / (uint)(clockDivider << 1) +\n          (int)(((ulonglong)(uint)(frequency2 * 0x19) / (ulonglong)(uint)(clockDivider << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_configuration_08007f54",
                "param_1": "configPtr",
                "param_2": "clockDivider",
                "uVar1": "frequency",
                "iVar2": "frequency1",
                "iVar3": "frequency2",
                "uVar4": "clockFrequency",
                "calculate_clock_frequency_08006680": "getFrequency1",
                "calculate_clock_frequency_080066cc": "getFrequency2"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "configure_clock_08008190",
            "code": "\n\n\nvoid configure_clock_08008190(void)\n\n{\n  update_flags_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculate_clock_configuration(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "configure_clock_08008190",
                "calculate_clock_configuration_08007f54": "calculate_clock_configuration"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "send_byte_to_device_08008250",
            "code": "\nvoid sendByteToDevice_08008250(undefined data)\n\n{\n  send_byte_to_device_08007e1c(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "send_byte_to_device_08008250",
                "param_1": "data"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "send_byte_to_device_0800826a",
            "code": "\nundefined4 send_byte_to_device_0800826a(undefined byte_to_send)\n\n{\n  send_byte_to_device_0800826a_08007e1c(byte_to_send);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "send_byte_to_device_0800826a",
                "param_1": "byte_to_send"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_and_get_lowest_byte_08008286",
            "code": "\nundefined check_and_get_lowest_byte_08008286(void)\n\n{\n  undefined lowest_byte;\n  int flag_check_result;\n  \n  flag_check_result = check_flag_set();\n  if (flag_check_result != 0) {\n    lowest_byte = get_lowest_byte();\n    flag_check_result = check_flag(lowest_byte);\n    if (flag_check_result == 0) {\n      return lowest_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_and_get_lowest_byte_08008286",
                "iVar2": "flag_check_result",
                "uVar1": "lowest_byte",
                "check_flag_set_08007e58": "check_flag_set",
                "get_lowest_byte_08007e84": "get_lowest_byte",
                "check_flag_08005900": "check_flag"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_extended_multiplication_080082d0",
            "code": "\nulonglong calculate_extended_multiplication_080082d0(uint input_x,uint input_y,uint input_z,uint input_w)\n\n{\n  int high_bit_shift;\n  byte carry;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int high_bit_shift_2;\n  uint result_x;\n  uint result_y;\n  uint carry_shifted;\n  uint carry_extended;\n  bool check_1;\n  bool check_2;\n  bool check_3;\n  \n  temp_4 = input_w ^ 0x80000000;\n  result_x = input_y << 1;\n  input_w = input_w << 1;\n  check_1 = ((input_y ^ temp_4) & 0x7fffffff) == 0;\n  check_2 = check_1 && input_x == input_z;\n  if (!check_1 || input_x != input_z) {\n    check_2 = (result_x | input_x) == 0;\n  }\n  if (!check_2) {\n    check_2 = (input_w | input_z) == 0;\n  }\n  high_bit_shift_2 = (int)result_x >> 0x15;\n  if (!check_2) {\n    check_2 = high_bit_shift_2 == -1;\n  }\n  high_bit_shift = (int)input_w >> 0x15;\n  if (!check_2) {\n    check_2 = high_bit_shift == -1;\n  }\n  if (check_2) {\n    if (high_bit_shift_2 == -1 || high_bit_shift == -1) {\n      result_x = temp_4;\n      carry_shifted = input_z;\n      if (high_bit_shift_2 == -1) {\n        result_x = input_y;\n        carry_shifted = input_x;\n      }\n      if (high_bit_shift_2 != -1 || high_bit_shift != -1) {\n        input_z = carry_shifted;\n        temp_4 = result_x;\n      }\n      check_2 = (carry_shifted | result_x << 0xc) == 0;\n      if (check_2) {\n        check_2 = (input_z | temp_4 << 0xc) == 0;\n      }\n      if (check_2) {\n        check_2 = result_x == temp_4;\n      }\n      if (!check_2) {\n        result_x = result_x | 0x80000;\n      }\n      return CONCAT44(result_x,carry_shifted);\n    }\n    if (((input_y ^ temp_4) & 0x7fffffff) != 0 || input_x != input_z) {\n      if ((result_x | input_x) == 0) {\n        input_x = input_z;\n        input_y = temp_4;\n      }\n      return CONCAT44(input_y,input_x);\n    }\n    if (input_y != temp_4) {\n      return 0;\n    }\n    if (result_x >> 0x15 == 0) {\n      check_2 = (input_x & 0x80000000) != 0;\n      temp_4 = input_y * 2 + (uint)check_2;\n      if (CARRY4(input_y,input_y) || CARRY4(input_y * 2,(uint)check_2)) {\n        temp_4 = temp_4 | 0x80000000;\n      }\n      return CONCAT44(temp_4,input_x << 1);\n    }\n    if (result_x < 0xffc00000) {\n      return CONCAT44(input_y + 0x100000,input_x);\n    }\n    input_y = input_y & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_y | 0x7ff00000) << 0x20;\n  }\n  result_x = result_x >> 0x15;\n  input_w = input_w >> 0x15;\n  carry_shifted = input_w - result_x;\n  check_2 = carry_shifted != 0;\n  if (input_w < result_x) {\n    carry_shifted = -carry_shifted;\n  }\n  result_y = input_x;\n  temp_5 = input_y;\n  if (check_2 && result_x <= input_w) {\n    result_x = result_x + carry_shifted;\n    result_y = input_z;\n    temp_5 = temp_4;\n    input_z = input_x;\n    temp_4 = input_y;\n  }\n  if (0x36 < carry_shifted) {\n    return CONCAT44(temp_5,result_y);\n  }\n  temp_2 = temp_5 & 0xfffff | 0x100000;\n  if ((temp_5 & 0x80000000) != 0) {\n    check_2 = result_y != 0;\n    result_y = -result_y;\n    temp_2 = -temp_2 - (uint)check_2;\n  }\n  temp_5 = temp_4 & 0xfffff | 0x100000;\n  if ((temp_4 & 0x80000000) != 0) {\n    check_2 = input_z != 0;\n    input_z = -input_z;\n    temp_5 = -temp_5 - (uint)check_2;\n  }\n  if (result_x == carry_shifted) {\n    temp_5 = temp_5 ^ 0x100000;\n    if (result_x == 0) {\n      temp_2 = temp_2 ^ 0x100000;\n      result_x = 1;\n    }\n    else {\n      carry_shifted = carry_shifted - 1;\n    }\n  }\n  temp_4 = -carry_shifted + 0x20;\n  if ((int)carry_shifted < 0x21) {\n    carry_extended = input_z << (temp_4 & 0xff);\n    input_z = input_z >> (carry_shifted & 0xff);\n    temp_1 = result_y + input_z;\n    temp_3 = temp_5 << (temp_4 & 0xff);\n    temp_4 = temp_1 + temp_3;\n    temp_2 = temp_2 + CARRY4(result_y,input_z) + ((int)temp_5 >> (carry_shifted & 0xff)) +\n            (uint)CARRY4(temp_1,temp_3);\n  }\n  else {\n    carry_extended = temp_5 << (-carry_shifted + 0x40 & 0xff);\n    if (input_z != 0) {\n      carry_extended = carry_extended | 2;\n    }\n    temp_5 = (int)temp_5 >> (carry_shifted - 0x20 & 0xff);\n    temp_4 = result_y + temp_5;\n    temp_2 = temp_2 + ((int)temp_5 >> 0x1f) + (uint)CARRY4(result_y,temp_5);\n  }\n  input_y = temp_2 & 0x80000000;\n  carry_shifted = temp_2;\n  if ((int)temp_2 < 0) {\n    check_2 = carry_extended == 0;\n    carry_extended = -carry_extended;\n    carry_shifted = -temp_4;\n    temp_4 = -(uint)!check_2 - temp_4;\n    carry_shifted = -(uint)(check_2 <= carry_shifted) - temp_2;\n  }\n  if (0xfffff < carry_shifted) {\n    result_y = result_x - 1;\n    if (0x1fffff < carry_shifted) {\n      result_y = carry_shifted & 1;\n      carry_shifted = carry_shifted >> 1;\n      carry = (byte)temp_4;\n      temp_4 = (uint)(result_y != 0) << 0x1f | temp_4 >> 1;\n      carry_extended = (uint)(carry & 1) << 0x1f | carry_extended >> 1;\n      result_y = result_x;\n      if (0xffbfffff < result_x * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    check_2 = 0x7fffffff < carry_extended;\n    if (carry_extended == 0x80000000) {\n      check_2 = (temp_4 & 1) != 0;\n    }\n    return CONCAT44(carry_shifted + result_y * 0x100000 + (uint)CARRY4(temp_4,(uint)check_2) | input_y,\n                    temp_4 + check_2);\n  }\n  check_1 = (carry_extended & 0x80000000) != 0;\n  carry_extended = carry_extended << 1;\n  result_y = temp_4 * 2;\n  check_2 = CARRY4(temp_4,temp_4);\n  temp_4 = temp_4 * 2 + (uint)check_1;\n  carry_shifted = carry_shifted * 2 + (uint)(check_2 || CARRY4(result_y,(uint)check_1));\n  result_y = result_x - 2;\n  if (result_x - 1 != 0 && 0xfffff < carry_shifted) goto LAB_080083e0;\n  temp_5 = temp_4;\n  result_x = carry_shifted;\n  if (carry_shifted == 0) {\n    temp_5 = 0;\n    result_x = temp_4;\n  }\n  high_bit_shift_2 = LZCOUNT(result_x);\n  if (carry_shifted == 0) {\n    high_bit_shift_2 = high_bit_shift_2 + 0x20;\n  }\n  carry_shifted = high_bit_shift_2 - 0xb;\n  check_3 = SBORROW4(carry_shifted,0x20);\n  temp_4 = high_bit_shift_2 - 0x2b;\n  check_2 = (int)temp_4 < 0;\n  check_1 = temp_4 == 0;\n  if ((int)carry_shifted < 0x20) {\n    check_3 = SCARRY4(temp_4,0xc);\n    high_bit_shift_2 = high_bit_shift_2 + -0x1f;\n    check_2 = high_bit_shift_2 < 0;\n    check_1 = high_bit_shift_2 == 0;\n    temp_4 = carry_shifted;\n    if (!check_1 && check_2 == check_3) {\n      temp_5 = result_x << (carry_shifted & 0xff);\n      result_x = result_x >> (0xcU - high_bit_shift_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (check_1 || check_2 != check_3) {\n    carry_extended = 0x20 - temp_4;\n  }\n  result_x = result_x << (temp_4 & 0xff);\n  if (check_1 || check_2 != check_3) {\n    result_x = result_x | temp_5 >> (carry_extended & 0xff);\n  }\n  if (check_1 || check_2 != check_3) {\n    temp_5 = temp_5 << (temp_4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)carry_shifted <= (int)result_y) {\n    return CONCAT44(result_x + (result_y - carry_shifted) * 0x100000 | input_y,temp_5);\n  }\n  temp_4 = ~(result_y - carry_shifted);\n  if ((int)temp_4 < 0x1f) {\n    high_bit_shift_2 = temp_4 - 0x13;\n    if (high_bit_shift_2 != 0 && high_bit_shift_2 < 0 == SCARRY4(temp_4 - 0x1f,0xc)) {\n      return CONCAT44(temp_2,temp_5 >> (0x20 - (0xcU - high_bit_shift_2) & 0xff) | result_x << (0xcU - high_bit_shift_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_4 = temp_4 + 1;\n    return CONCAT44(input_y | result_x >> (temp_4 & 0xff),\n                    temp_5 >> (temp_4 & 0xff) | result_x << (0x20 - temp_4 & 0xff));\n  }\n  return CONCAT44(temp_2,result_x >> (temp_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_extended_multiplication_080082d0",
                "param_1": "input_x",
                "param_2": "input_y",
                "param_3": "input_z",
                "param_4": "input_w",
                "iVar1": "high_bit_shift",
                "bVar2": "carry",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "uVar6": "temp_4",
                "uVar7": "temp_5",
                "iVar8": "high_bit_shift_2",
                "uVar9": "result_x",
                "uVar10": "result_y",
                "uVar11": "carry_shifted",
                "uVar12": "carry_extended",
                "bVar13": "check_1",
                "bVar14": "check_2",
                "bVar15": "check_3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_sum_080082d4",
            "code": "\nulonglong calculate_sum_080082d4(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_num2;\n  uint sum1;\n  uint sum2;\n  uint difference;\n  uint shifted_sum1;\n  uint shifted_sum2;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_num2 = num2 << 1;\n  sum2 = num4 << 1;\n  is_equal = ((num2 ^ num4) & 0x7fffffff) == 0;\n  is_zero = is_equal && num1 == num3;\n  if (!is_equal || num1 != num3) {\n    is_zero = (shifted_num2 | num1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (sum2 | num3) == 0;\n  }\n  shift2 = (int)shifted_num2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)sum2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      sum2 = num4;\n      shifted_num2 = num3;\n      if (shift2 == -1) {\n        sum2 = num2;\n        shifted_num2 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = shifted_num2;\n        num4 = sum2;\n      }\n      is_zero = (shifted_num2 | sum2 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (num3 | num4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = sum2 == num4;\n      }\n      if (!is_zero) {\n        sum2 = sum2 | 0x80000;\n      }\n      return CONCAT44(sum2,shifted_num2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shifted_num2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shifted_num2 >> 0x15 == 0) {\n      is_zero = (num1 & 0x80000000) != 0;\n      sum2 = num2 * 2 + (uint)is_zero;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)is_zero)) {\n        sum2 = sum2 | 0x80000000;\n      }\n      return CONCAT44(sum2,num1 << 1);\n    }\n    if (shifted_num2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shifted_num2 = shifted_num2 >> 0x15;\n  sum2 = sum2 >> 0x15;\n  difference = sum2 - shifted_num2;\n  is_zero = difference != 0;\n  if (sum2 < shifted_num2) {\n    difference = -difference;\n  }\n  sum1 = num1;\n  temp3 = num2;\n  if (is_zero && shifted_num2 <= sum2) {\n    shifted_num2 = shifted_num2 + difference;\n    sum1 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,sum1);\n  }\n  sum2 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = sum1 != 0;\n    sum1 = -sum1;\n    sum2 = -sum2 - (uint)is_zero;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    is_zero = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_num2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_num2 == 0) {\n      sum2 = sum2 ^ 0x100000;\n      shifted_num2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_sum2 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    shifted_sum1 = num3 << (shifted_sum2 & 0xff);\n    num3 = num3 >> (difference & 0xff);\n    temp1 = sum1 + num3;\n    temp2 = temp3 << (shifted_sum2 & 0xff);\n    shifted_sum2 = temp1 + temp2;\n    sum2 = sum2 + CARRY4(sum1,num3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    shifted_sum1 = temp3 << (-difference + 0x40 & 0xff);\n    if (num3 != 0) {\n      shifted_sum1 = shifted_sum1 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    shifted_sum2 = sum1 + temp3;\n    sum2 = sum2 + ((int)temp3 >> 0x1f) + (uint)CARRY4(sum1,temp3);\n  }\n  num2 = sum2 & 0x80000000;\n  difference = sum2;\n  if ((int)sum2 < 0) {\n    is_zero = shifted_sum1 == 0;\n    shifted_sum1 = -shifted_sum1;\n    difference = -shifted_sum2;\n    shifted_sum2 = -(uint)!is_zero - shifted_sum2;\n    difference = -(uint)(is_zero <= difference) - sum2;\n  }\n  if (0xfffff < difference) {\n    sum1 = shifted_num2 - 1;\n    if (0x1fffff < difference) {\n      sum2 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)shifted_sum2;\n      shifted_sum2 = (uint)(sum2 != 0) << 0x1f | shifted_sum2 >> 1;\n      shifted_sum1 = (uint)(carry & 1) << 0x1f | shifted_sum1 >> 1;\n      sum1 = shifted_num2;\n      if (0xffbfffff < shifted_num2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    is_zero = 0x7fffffff < shifted_sum1;\n    if (shifted_sum1 == 0x80000000) {\n      is_zero = (shifted_sum2 & 1) != 0;\n    }\n    return CONCAT44(difference + sum1 * 0x100000 + (uint)CARRY4(shifted_sum2,(uint)is_zero) | num2,\n                    shifted_sum2 + is_zero);\n  }\n  is_equal = (shifted_sum1 & 0x80000000) != 0;\n  shifted_sum1 = shifted_sum1 << 1;\n  sum1 = shifted_sum2 * 2;\n  is_zero = CARRY4(shifted_sum2,shifted_sum2);\n  shifted_sum2 = shifted_sum2 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(sum1,(uint)is_equal));\n  sum1 = shifted_num2 - 2;\n  if (shifted_num2 - 1 != 0 && 0xfffff < difference) goto LAB_080083e0;\n  temp3 = shifted_sum2;\n  shifted_num2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_num2 = shifted_sum2;\n  }\n  shift2 = LZCOUNT(shifted_num2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  shifted_sum2 = shift2 - 0xb;\n  is_negative = SBORROW4(shifted_sum2,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)shifted_sum2 < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = shifted_sum2;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_num2 << (shifted_sum2 & 0xff);\n      shifted_num2 = shifted_num2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    shifted_sum1 = 0x20 - difference;\n  }\n  shifted_num2 = shifted_num2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_num2 = shifted_num2 | temp3 >> (shifted_sum1 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)shifted_sum2 <= (int)sum1) {\n    return CONCAT44(shifted_num2 + (sum1 - shifted_sum2) * 0x100000 | num2,temp3);\n  }\n  difference = ~(sum1 - shifted_sum2);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(sum2,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_num2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(num2 | shifted_num2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_num2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(sum2,shifted_num2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_sum_080082d4",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shifted_num2",
                "uVar8": "sum1",
                "uVar9": "sum2",
                "uVar10": "difference",
                "uVar11": "shifted_sum1",
                "uVar12": "shifted_sum2",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "FUNC_0800854c",
            "code": "\nulonglong FUNC_0800854c(uint param_1)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  uint in_r12;\n  bool bVar5;\n  bool bVar6;\n  bool bVar7;\n  \n  if (param_1 == 0) {\n    return 0;\n  }\n  uVar1 = 0;\n  iVar3 = LZCOUNT(param_1);\n  uVar4 = iVar3 + 0x15;\n  bVar7 = SBORROW4(uVar4,0x20);\n  uVar2 = iVar3 - 0xb;\n  bVar5 = (int)uVar2 < 0;\n  bVar6 = uVar2 == 0;\n  if (uVar4 < 0x20) {\n    bVar7 = SCARRY4(uVar2,0xc);\n    bVar5 = false;\n    bVar6 = iVar3 + 1 == 0;\n    uVar2 = uVar4;\n    if (!bVar6 && bVar7 == false) {\n      uVar1 = param_1 << uVar4;\n      param_1 = param_1 >> (0xcU - (iVar3 + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar6 || bVar5 != bVar7) {\n    in_r12 = 0x20 - uVar2;\n  }\n  param_1 = param_1 << (uVar2 & 0xff);\n  if (bVar6 || bVar5 != bVar7) {\n    param_1 = param_1 | 0U >> (in_r12 & 0xff);\n  }\n  if (bVar6 || bVar5 != bVar7) {\n    uVar1 = 0 << (uVar2 & 0xff);\n  }\nLAB_08008458:\n  if (uVar4 < 0x433) {\n    return CONCAT44(param_1 + (0x432 - uVar4) * 0x100000,uVar1);\n  }\n  uVar2 = ~(0x432 - uVar4);\n  if (0x1e < (int)uVar2) {\n    return (ulonglong)(param_1 >> (uVar2 - 0x1f & 0xff));\n  }\n  iVar3 = uVar2 - 0x13;\n  if (iVar3 == 0 || iVar3 < 0 != SCARRY4(uVar2 - 0x1f,0xc)) {\n    uVar2 = uVar2 + 1;\n    return CONCAT44(param_1 >> (uVar2 & 0xff),\n                    uVar1 >> (uVar2 & 0xff) | param_1 << (0x20 - uVar2 & 0xff));\n  }\n  return (ulonglong)(uVar1 >> (0x20 - (0xcU - iVar3) & 0xff) | param_1 << (0xcU - iVar3 & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "FUNC_0800854c"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "bitwise_shift_and_concatenate_0800856c",
            "code": "\nulonglong bitwiseShiftAndConcatenate_0800856c(uint input)\n\n{\n  uint output1;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedAmount;\n  uint highBit;\n  uint mask;\n  bool isNegative;\n  bool isZero;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  highBit = input & 0x80000000;\n  absInput = input;\n  if ((int)highBit < 0) {\n    absInput = -input;\n  }\n  output1 = 0;\n  leadingZeros = LZCOUNT(absInput);\n  shiftedAmount = leadingZeros + 0x15;\n  overflow = SBORROW4(shiftedAmount,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedAmount < 0x20) {\n    overflow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedAmount;\n    if (!isZero && overflow == false) {\n      output1 = absInput << shiftedAmount;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != overflow) {\n    mask = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != overflow) {\n    absInput = absInput | 0U >> (mask & 0xff);\n  }\n  if (isZero || isNegative != overflow) {\n    output1 = 0 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if (shiftedAmount < 0x433) {\n    return CONCAT44(absInput + (0x432 - shiftedAmount) * 0x100000 | highBit,output1);\n  }\n  shiftAmount = ~(0x432 - shiftedAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(highBit | absInput >> (shiftAmount & 0xff),\n                    output1 >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,output1 >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "bitwise_shift_and_concatenate_0800856c",
                "param_1": "input",
                "uVar1": "output1",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedAmount",
                "uVar6": "highBit",
                "in_r12": "mask",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "overflow"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "bitwise_conversion_08008590",
            "code": "\nulonglong bitwiseConversion_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint carryFlag;\n  uint shiftedInput;\n  uint result;\n  uint shiftedInput2;\n  uint shiftedInput1;\n  int bitCount;\n  uint shiftAmount;\n  uint temp;\n  bool conditionFlag1;\n  bool conditionFlag2;\n  bool conditionFlag3;\n  \n  shiftedInput1 = input << 1;\n  conditionFlag2 = shiftedInput1 == 0;\n  carryFlag = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInput2 = (uint)((int)shiftedInput1 >> 3) >> 1;\n  result = carryFlag | shiftedInput2;\n  input = input << 0x1d;\n  if (!conditionFlag2) {\n    param4 = shiftedInput1 & 0xff000000;\n    conditionFlag2 = param4 == 0;\n  }\n  if (!conditionFlag2) {\n    conditionFlag2 = param4 == 0xff000000;\n  }\n  if (!conditionFlag2) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((shiftedInput1 & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  shiftedInput = input;\n  shiftedInput1 = shiftedInput2;\n  if (shiftedInput2 == 0) {\n    shiftedInput = 0;\n    shiftedInput1 = input;\n  }\n  bitCount = LZCOUNT(shiftedInput1);\n  if (shiftedInput2 == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shiftAmount = bitCount - 0xb;\n  conditionFlag3 = SBORROW4(shiftAmount,0x20);\n  shiftedInput2 = bitCount - 0x2b;\n  conditionFlag2 = (int)shiftedInput2 < 0;\n  conditionFlag1 = shiftedInput2 == 0;\n  if ((int)shiftAmount < 0x20) {\n    conditionFlag3 = SCARRY4(shiftedInput2,0xc);\n    bitCount = bitCount + -0x1f;\n    conditionFlag2 = bitCount < 0;\n    conditionFlag1 = bitCount == 0;\n    shiftedInput2 = shiftAmount;\n    if (!conditionFlag1 && conditionFlag2 == conditionFlag3) {\n      shiftedInput = shiftedInput1 << (shiftAmount & 0xff);\n      shiftedInput1 = shiftedInput1 >> (0xcU - bitCount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (conditionFlag1 || conditionFlag2 != conditionFlag3) {\n    temp = 0x20 - shiftedInput2;\n  }\n  shiftedInput1 = shiftedInput1 << (shiftedInput2 & 0xff);\n  if (conditionFlag1 || conditionFlag2 != conditionFlag3) {\n    shiftedInput1 = shiftedInput1 | shiftedInput >> (temp & 0xff);\n  }\n  if (conditionFlag1 || conditionFlag2 != conditionFlag3) {\n    shiftedInput = shiftedInput << (shiftedInput2 & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(shiftedInput1 + (0x380 - shiftAmount) * 0x100000 | carryFlag,shiftedInput);\n  }\n  shiftedInput2 = ~(0x380 - shiftAmount);\n  if (0x1e < (int)shiftedInput2) {\n    return CONCAT44(result,shiftedInput1 >> (shiftedInput2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftedInput2 - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftedInput2 - 0x1f,0xc)) {\n    shiftedInput2 = shiftedInput2 + 1;\n    return CONCAT44(carryFlag | shiftedInput1 >> (shiftedInput2 & 0xff),\n                    shiftedInput >> (shiftedInput2 & 0xff) | shiftedInput1 << (0x20 - shiftedInput2 & 0xff));\n  }\n  return CONCAT44(result,shiftedInput >> (0x20 - (0xcU - bitCount) & 0xff) | shiftedInput1 << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "bitwise_conversion_08008590",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "carryFlag",
                "uVar2": "shiftedInput",
                "uVar3": "result",
                "uVar4": "shiftedInput2",
                "uVar5": "shiftedInput1",
                "iVar6": "bitCount",
                "uVar7": "shiftAmount",
                "in_r12": "temp",
                "bVar8": "conditionFlag1",
                "bVar9": "conditionFlag2",
                "bVar10": "conditionFlag3"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_bitwise_operation_08008640",
            "code": "\nulonglong calculate_bitwise_operation_08008640(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  ulonglong temp_var_1;\n  longlong temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  int temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  uint temp_var_8;\n  uint temp_var_9;\n  bool temp_var_10;\n  bool temp_var_11;\n  bool temp_var_12;\n  ulonglong result;\n  \n  result = CONCAT44(input_param_2,input_param_1);\n  temp_var_8 = 0x7ff;\n  temp_var_4 = input_param_2 >> 0x14 & 0x7ff;\n  temp_var_10 = temp_var_4 == 0;\n  if (!temp_var_10) {\n    temp_var_7 = input_param_4 >> 0x14 & 0x7ff;\n    temp_var_10 = temp_var_7 == 0;\n  }\n  if (!temp_var_10) {\n    temp_var_10 = temp_var_4 == 0x7ff;\n  }\n  if (!temp_var_10) {\n    temp_var_10 = temp_var_7 == 0x7ff;\n  }\n  if (temp_var_10) {\n    result = calculate_bitwise_operation_08008640_0800881c();\n  }\n  temp_var_3 = (uint)(result >> 0x20);\n  temp_var_5 = temp_var_4 + temp_var_7;\n  temp_var_4 = temp_var_3 ^ input_param_4;\n  temp_var_3 = temp_var_3 & ~(temp_var_8 << 0x15);\n  input_param_4 = input_param_4 & ~(temp_var_8 << 0x15);\n  temp_var_10 = ((uint)result | temp_var_3 << 0xc) == 0;\n  if (!temp_var_10) {\n    temp_var_10 = (input_param_3 | input_param_4 << 0xc) == 0;\n  }\n  temp_var_3 = temp_var_3 | 0x100000;\n  input_param_4 = input_param_4 | 0x100000;\n  if (temp_var_10) {\n    input_param_3 = (uint)result | input_param_3;\n    input_param_4 = (temp_var_4 & 0x80000000 | temp_var_3) ^ input_param_4;\n    temp_var_4 = temp_var_8 >> 1;\n    temp_var_12 = SBORROW4(temp_var_5,temp_var_4);\n    temp_var_6 = temp_var_5 - temp_var_4;\n    temp_var_10 = temp_var_6 == 0;\n    temp_var_3 = temp_var_6;\n    if (!temp_var_10 && (int)temp_var_4 <= temp_var_5) {\n      temp_var_12 = SBORROW4(temp_var_8,temp_var_6);\n      temp_var_3 = temp_var_8 - temp_var_6;\n      temp_var_10 = temp_var_8 == temp_var_6;\n    }\n    if (!temp_var_10 && (int)temp_var_3 < 0 == temp_var_12) {\n      input_param_4 = input_param_4 | temp_var_6 * 0x100000;\n    }\n    if (!temp_var_10 && (int)temp_var_3 < 0 == temp_var_12) {\n      return CONCAT44(input_param_4,input_param_3);\n    }\n    input_param_4 = input_param_4 | 0x100000;\n    temp_var_8 = 0;\n    temp_var_12 = SBORROW4(temp_var_6,1);\n    temp_var_6 = temp_var_6 - 1;\n    temp_var_10 = temp_var_6 == 0;\n    temp_var_4 = temp_var_6;\n  }\n  else {\n    temp_var_1 = (result & 0xffffffff) * (ulonglong)input_param_3;\n    result = (result & 0xffffffff) * (ulonglong)input_param_4 +\n             (ulonglong)temp_var_3 * (ulonglong)input_param_3 + (temp_var_1 >> 0x20);\n    temp_var_9 = (uint)result;\n    temp_var_2 = (ulonglong)temp_var_3 * (ulonglong)input_param_4 + (result >> 0x20);\n    temp_var_8 = (uint)temp_var_2;\n    temp_var_3 = (uint)((ulonglong)temp_var_2 >> 0x20);\n    if ((int)temp_var_1 != 0) {\n      temp_var_9 = temp_var_9 | 1;\n    }\n    temp_var_6 = (temp_var_5 + -0x3ff) - (uint)(temp_var_3 < 0x200);\n    if (temp_var_3 < 0x200) {\n      temp_var_10 = (temp_var_9 & 0x80000000) != 0;\n      temp_var_9 = temp_var_9 << 1;\n      temp_var_2 = CONCAT44(temp_var_3 * 2 + (uint)(CARRY4(temp_var_8,temp_var_8) || CARRY4(temp_var_8 * 2,(uint)temp_var_10)),\n                       temp_var_8 * 2 + (uint)temp_var_10);\n    }\n    input_param_4 = temp_var_4 & 0x80000000 | (int)((ulonglong)temp_var_2 >> 0x20) << 0xb | (uint)temp_var_2 >> 0x15;\n    input_param_3 = (uint)temp_var_2 << 0xb | temp_var_9 >> 0x15;\n    temp_var_8 = temp_var_9 * 0x800;\n    temp_var_11 = 0xfc < temp_var_6;\n    temp_var_12 = SBORROW4(temp_var_6,0xfd);\n    temp_var_3 = temp_var_6 - 0xfd;\n    temp_var_10 = temp_var_3 == 0;\n    temp_var_4 = temp_var_3;\n    if (temp_var_11 && !temp_var_10) {\n      temp_var_11 = 0x6ff < temp_var_3;\n      temp_var_12 = SBORROW4(temp_var_3,0x700);\n      temp_var_4 = temp_var_6 - 0x7fd;\n      temp_var_10 = temp_var_3 == 0x700;\n    }\n    if (!temp_var_11 || temp_var_10) {\n      temp_var_10 = 0x7fffffff < temp_var_8;\n      if (temp_var_8 == 0x80000000) {\n        temp_var_10 = (temp_var_9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param_4 + temp_var_6 * 0x100000 + (uint)CARRY4(input_param_3,(uint)temp_var_10),input_param_3 + temp_var_10\n                     );\n    }\n  }\n  if (!temp_var_10 && (int)temp_var_4 < 0 == temp_var_12) {\n    return (ulonglong)(input_param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_var_11 = SCARRY4(temp_var_6,0x36);\n  temp_var_10 = (int)(temp_var_6 + 0x36) < 0;\n  temp_var_12 = temp_var_6 == 0xffffffca;\n  if (temp_var_12 || temp_var_10 != temp_var_11) {\n    input_param_3 = 0;\n  }\n  if (temp_var_12 || temp_var_10 != temp_var_11) {\n    input_param_4 = input_param_4 & 0x80000000;\n  }\n  if (temp_var_12 || temp_var_10 != temp_var_11) {\n    return CONCAT44(input_param_4,input_param_3);\n  }\n  temp_var_4 = -temp_var_6;\n  temp_var_3 = temp_var_4 - 0x20;\n  if (0x1f < (int)temp_var_4) {\n    temp_var_6 = input_param_3 >> (temp_var_3 & 0xff) | input_param_4 << (0x20 - temp_var_3 & 0xff);\n    temp_var_4 = (input_param_4 >> (temp_var_3 & 0xff) & ~((input_param_4 & 0x80000000) >> (temp_var_3 & 0xff))) -\n            ((int)temp_var_6 >> 0x1f);\n    if ((temp_var_8 | input_param_3 << (0x20 - temp_var_3 & 0xff) | temp_var_6 << 1) == 0) {\n      temp_var_4 = temp_var_4 & ~(temp_var_6 >> 0x1f);\n    }\n    return CONCAT44(input_param_4,temp_var_4) & 0x80000000ffffffff;\n  }\n  temp_var_5 = temp_var_4 - 0x14;\n  if (temp_var_5 == 0 || temp_var_5 < 0 != SCARRY4(temp_var_3,0xc)) {\n    temp_var_9 = input_param_3 << (temp_var_6 + 0x20 & 0xff);\n    temp_var_3 = input_param_3 >> (temp_var_4 & 0xff) | input_param_4 << (temp_var_6 + 0x20 & 0xff);\n    temp_var_6 = temp_var_3 + -((int)temp_var_9 >> 0x1f);\n    if ((temp_var_8 | temp_var_9 << 1) == 0) {\n      temp_var_6 = temp_var_6 & ~(temp_var_9 >> 0x1f);\n    }\n    return CONCAT44((input_param_4 & 0x80000000) +\n                    ((input_param_4 & 0x7fffffff) >> (temp_var_4 & 0xff)) +\n                    (uint)CARRY4(temp_var_3,-((int)temp_var_9 >> 0x1f)),temp_var_6);\n  }\n  temp_var_4 = 0xc - temp_var_5;\n  temp_var_6 = input_param_3 << (temp_var_4 & 0xff);\n  temp_var_4 = input_param_3 >> (0x20 - temp_var_4 & 0xff) | input_param_4 << (temp_var_4 & 0xff);\n  temp_var_3 = temp_var_4 + -((int)temp_var_6 >> 0x1f);\n  if ((temp_var_8 | temp_var_6 << 1) == 0) {\n    temp_var_3 = temp_var_3 & ~(temp_var_6 >> 0x1f);\n  }\n  return CONCAT44((input_param_4 & 0x80000000) + (uint)CARRY4(temp_var_4,-((int)temp_var_6 >> 0x1f)),temp_var_3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_bitwise_operation_08008640",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_var_1",
                "lVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "iVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "unaff_r5": "temp_var_7",
                "uVar7": "temp_var_8",
                "uVar8": "temp_var_9",
                "bVar9": "temp_var_10",
                "bVar10": "temp_var_11",
                "bVar11": "temp_var_12",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_bitwise_operation_0800881c",
            "code": "\nulonglong calculate_bitwise_operation_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input2 & 0x80000000;\n      do {\n        bit_1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit_1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit_3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit_3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit_4 = input2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input1 = input3, bit_4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_operation_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_improved_double_precision_value_08008894",
            "code": "\nulonglong calculateImprovedDoublePrecisionValue_08008894(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  int temp_var_8;\n  uint temp_var_9;\n  uint temp_var_10;\n  uint temp_var_11;\n  uint temp_var_12;\n  uint temp_var_13;\n  uint temp_var_14;\n  bool temp_var_15;\n  bool temp_var_16;\n  bool temp_var_17;\n  undefined8 temp_var_18;\n  \n  temp_var_18 = CONCAT44(input_param_2,input_param_1);\n  temp_var_14 = 0x7ff;\n  temp_var_7 = input_param_2 >> 0x14 & 0x7ff;\n  temp_var_15 = temp_var_7 == 0;\n  if (!temp_var_15) {\n    temp_var_10 = input_param_4 >> 0x14 & 0x7ff;\n    temp_var_15 = temp_var_10 == 0;\n  }\n  if (!temp_var_15) {\n    temp_var_15 = temp_var_7 == 0x7ff;\n  }\n  if (!temp_var_15) {\n    temp_var_15 = temp_var_10 == 0x7ff;\n  }\n  if (temp_var_15) {\n    temp_var_18 = calculate_double_precision_value_08008a02();\n  }\n  temp_var_9 = (uint)((ulonglong)temp_var_18 >> 0x20);\n  temp_var_12 = (uint)temp_var_18;\n  temp_var_8 = temp_var_7 - temp_var_10;\n  if ((input_param_3 | input_param_4 << 0xc) == 0) {\n    temp_var_7 = (temp_var_9 ^ input_param_4) & 0x80000000 | temp_var_9 & 0xfffff;\n    temp_var_17 = SCARRY4(temp_var_8,temp_var_14 >> 1);\n    temp_var_9 = temp_var_8 + (temp_var_14 >> 1);\n    temp_var_15 = (int)temp_var_9 < 0;\n    temp_var_16 = temp_var_9 == 0;\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      temp_var_17 = SBORROW4(temp_var_14,temp_var_9);\n      temp_var_15 = (int)(temp_var_14 - temp_var_9) < 0;\n      temp_var_16 = temp_var_14 == temp_var_9;\n    }\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      temp_var_7 = temp_var_7 | temp_var_9 * 0x100000;\n    }\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      return CONCAT44(temp_var_7,temp_var_12);\n    }\n    temp_var_7 = temp_var_7 | 0x100000;\n    temp_var_14 = 0;\n    temp_var_16 = SBORROW4(temp_var_9,1);\n    temp_var_9 = temp_var_9 - 1;\n    temp_var_15 = temp_var_9 == 0;\n    temp_var_3 = temp_var_9;\n  }\n  else {\n    temp_var_3 = (input_param_4 << 0xc) >> 4 | 0x10000000 | input_param_3 >> 0x18;\n    temp_var_14 = input_param_3 << 8;\n    temp_var_11 = (temp_var_9 << 0xc) >> 4 | 0x10000000 | temp_var_12 >> 0x18;\n    temp_var_12 = temp_var_12 * 0x100;\n    temp_var_7 = (temp_var_9 ^ input_param_4) & 0x80000000;\n    temp_var_15 = temp_var_3 <= temp_var_11;\n    if (temp_var_11 == temp_var_3) {\n      temp_var_15 = temp_var_14 <= temp_var_12;\n    }\n    temp_var_8 = temp_var_8 + (uint)temp_var_15;\n    temp_var_9 = temp_var_8 + 0x3fd;\n    if (temp_var_15 == false) {\n      temp_var_3 = temp_var_3 >> 1;\n      temp_var_14 = (uint)((input_param_3 >> 0x18 & 1) != 0) << 0x1f | temp_var_14 >> 1;\n    }\n    temp_var_13 = temp_var_12 - temp_var_14;\n    temp_var_11 = (temp_var_11 - temp_var_3) - (uint)(temp_var_12 < temp_var_14);\n    temp_var_4 = temp_var_3 >> 1;\n    temp_var_1 = (uint)((temp_var_3 & 1) != 0) << 0x1f | temp_var_14 >> 1;\n    temp_var_12 = 0x100000;\n    temp_var_3 = 0x80000;\n    while( true ) {\n      temp_var_15 = temp_var_1 <= temp_var_13;\n      if (temp_var_4 < temp_var_11 || temp_var_11 - temp_var_4 < (uint)temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_12 = temp_var_12 | temp_var_3;\n        temp_var_11 = (temp_var_11 - temp_var_4) - (uint)!temp_var_15;\n      }\n      temp_var_5 = temp_var_4 >> 1;\n      temp_var_1 = (uint)((temp_var_4 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_var_16 = temp_var_1 <= temp_var_13;\n      temp_var_15 = temp_var_11 - temp_var_5 < (uint)temp_var_16;\n      temp_var_14 = temp_var_11;\n      if (temp_var_5 < temp_var_11 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_14 = (temp_var_11 - temp_var_5) - (uint)!temp_var_16;\n      }\n      if (temp_var_5 < temp_var_11 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 1;\n      }\n      temp_var_11 = temp_var_4 >> 2;\n      temp_var_2 = (uint)((temp_var_5 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_var_16 = temp_var_2 <= temp_var_13;\n      temp_var_15 = temp_var_14 - temp_var_11 < (uint)temp_var_16;\n      temp_var_5 = temp_var_14;\n      if (temp_var_11 < temp_var_14 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_2;\n        temp_var_5 = (temp_var_14 - temp_var_11) - (uint)!temp_var_16;\n      }\n      if (temp_var_11 < temp_var_14 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 2;\n      }\n      temp_var_6 = temp_var_4 >> 3;\n      temp_var_1 = (uint)((temp_var_11 & 1) != 0) << 0x1f | temp_var_2 >> 1;\n      temp_var_16 = temp_var_1 <= temp_var_13;\n      temp_var_15 = temp_var_5 - temp_var_6 < (uint)temp_var_16;\n      temp_var_11 = temp_var_5;\n      if (temp_var_6 < temp_var_5 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_11 = (temp_var_5 - temp_var_6) - (uint)!temp_var_16;\n      }\n      if (temp_var_6 < temp_var_5 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 3;\n      }\n      temp_var_14 = temp_var_11 | temp_var_13;\n      if (temp_var_14 == 0) break;\n      temp_var_11 = temp_var_11 << 4 | temp_var_13 >> 0x1c;\n      temp_var_13 = temp_var_13 << 4;\n      temp_var_4 = temp_var_4 & 0xfffffff8 | temp_var_1 >> 0x1d;\n      temp_var_1 = (temp_var_2 >> 1) << 3;\n      temp_var_3 = temp_var_3 >> 4;\n      if (temp_var_3 == 0) {\n        temp_var_6 = temp_var_4;\n        if ((temp_var_7 & 0x100000) != 0) goto LAB_080089b2;\n        temp_var_7 = temp_var_7 | temp_var_12;\n        temp_var_12 = 0;\n        temp_var_3 = 0x80000000;\n      }\n    }\n    if ((temp_var_7 & 0x100000) == 0) {\n      temp_var_7 = temp_var_7 | temp_var_12;\n      temp_var_12 = 0;\n    }\nLAB_080089b2:\n    temp_var_17 = 0xfc < temp_var_9;\n    temp_var_16 = SBORROW4(temp_var_9,0xfd);\n    temp_var_4 = temp_var_8 + 0x300;\n    temp_var_15 = temp_var_4 == 0;\n    temp_var_3 = temp_var_4;\n    if (temp_var_17 && !temp_var_15) {\n      temp_var_17 = 0x6ff < temp_var_4;\n      temp_var_16 = SBORROW4(temp_var_4,0x700);\n      temp_var_3 = temp_var_8 - 0x400;\n      temp_var_15 = temp_var_4 == 0x700;\n    }\n    if (!temp_var_17 || temp_var_15) {\n      temp_var_15 = temp_var_6 <= temp_var_11;\n      if (temp_var_11 == temp_var_6) {\n        temp_var_15 = temp_var_1 <= temp_var_13;\n      }\n      if (temp_var_11 == temp_var_6 && temp_var_13 == temp_var_1) {\n        temp_var_15 = (temp_var_12 & 1) != 0;\n      }\n      return CONCAT44(temp_var_7 + temp_var_9 * 0x100000 + (uint)CARRY4(temp_var_12,(uint)temp_var_15),temp_var_12 + temp_var_15);\n    }\n  }\n  if (!temp_var_15 && (int)temp_var_3 < 0 == temp_var_16) {\n    return (ulonglong)(temp_var_7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_var_17 = SCARRY4(temp_var_9,0x36);\n  temp_var_15 = (int)(temp_var_9 + 0x36) < 0;\n  temp_var_16 = temp_var_9 == 0xffffffca;\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    temp_var_12 = 0;\n  }\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    temp_var_7 = temp_var_7 & 0x80000000;\n  }\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    return CONCAT44(temp_var_7,temp_var_12);\n  }\n  temp_var_3 = -temp_var_9;\n  temp_var_11 = temp_var_3 - 0x20;\n  if (0x1f < (int)temp_var_3) {\n    temp_var_3 = temp_var_12 >> (temp_var_11 & 0xff) | temp_var_7 << (0x20 - temp_var_11 & 0xff);\n    temp_var_9 = (temp_var_7 >> (temp_var_11 & 0xff) & ~((temp_var_7 & 0x80000000) >> (temp_var_11 & 0xff))) -\n            ((int)temp_var_3 >> 0x1f);\n    if ((temp_var_14 | temp_var_12 << (0x20 - temp_var_11 & 0xff) | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44(temp_var_7,temp_var_9) & 0x80000000ffffffff;\n  }\n  temp_var_8 = temp_var_3 - 0x14;\n  if (temp_var_8 != 0 && temp_var_8 < 0 == SCARRY4(temp_var_11,0xc)) {\n    temp_var_9 = 0xc - temp_var_8;\n    temp_var_3 = temp_var_12 << (temp_var_9 & 0xff);\n    temp_var_12 = temp_var_12 >> (0x20 - temp_var_9 & 0xff) | temp_var_7 << (temp_var_9 & 0xff);\n    temp_var_9 = temp_var_12 + -((int)temp_var_3 >> 0x1f);\n    if ((temp_var_14 | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44((temp_var_7 & 0x80000000) + (uint)CARRY4(temp_var_12,-((int)temp_var_3 >> 0x1f)),temp_var_9);\n  }\n  temp_var_11 = temp_var_12 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_12 = temp_var_12 >> (temp_var_3 & 0xff) | temp_var_7 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_9 = temp_var_12 + -((int)temp_var_11 >> 0x1f);\n  if ((temp_var_14 | temp_var_11 << 1) == 0) {\n    temp_var_9 = temp_var_9 & ~(temp_var_11 >> 0x1f);\n  }\n  return CONCAT44((temp_var_7 & 0x80000000) +\n                  ((temp_var_7 & 0x7fffffff) >> (temp_var_3 & 0xff)) +\n                  (uint)CARRY4(temp_var_12,-((int)temp_var_11 >> 0x1f)),temp_var_9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_improved_double_precision_value_08008894",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "uVar7": "temp_var_7",
                "iVar8": "temp_var_8",
                "uVar9": "temp_var_9",
                "unaff_r5": "temp_var_10",
                "uVar10": "temp_var_11",
                "uVar11": "temp_var_12",
                "uVar12": "temp_var_13",
                "uVar13": "temp_var_14",
                "bVar14": "temp_var_15",
                "bVar15": "temp_var_16",
                "bVar16": "temp_var_17",
                "uVar17": "temp_var_18"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "calculate_double_precision_value_08008a02",
            "code": "\nulonglong calculate_double_precision_value_08008a02(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint bit_mask1;\n  uint constant1;\n  uint masked_value;\n  uint result;\n  uint constant2;\n  bool conditions_met;\n  \n  masked_value = constant2 & input_param4 >> 0x14;\n  result = input_param2;\n  if (constant1 != constant2 || masked_value != constant2) {\n    if (constant1 == constant2) {\n      if (((input_param1 | input_param2 << 0xc) == 0) && (input_param1 = input_param3, result = input_param4, masked_value != constant2)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input_param2 ^ input_param4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (masked_value == constant2) {\n      input_param1 = input_param3;\n      result = input_param4;\n      if ((input_param3 | input_param4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input_param2 ^ input_param4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      conditions_met = (input_param1 | input_param2 << 1) == 0;\n      if (!conditions_met) {\n        conditions_met = (input_param3 | input_param4 << 1) == 0;\n      }\n      if (!conditions_met) {\n        if (constant1 == 0) {\n          result = input_param2 & 0x80000000;\n          do {\n            bit_mask1 = input_param1 & 0x80000000;\n            input_param1 = input_param1 << 1;\n            input_param2 = input_param2 * 2 + (uint)(bit_mask1 != 0);\n          } while ((input_param2 & 0x100000) == 0);\n          input_param2 = input_param2 | result;\n          if (masked_value != 0) {\n            return CONCAT44(input_param2,input_param1);\n          }\n        }\n        do {\n          result = input_param3 & 0x80000000;\n          input_param3 = input_param3 << 1;\n          input_param4 = input_param4 * 2 + (uint)(result != 0);\n        } while ((input_param4 & 0x100000) == 0);\n        return CONCAT44(input_param2,input_param1);\n      }\n      if ((input_param1 | input_param2 << 1) != 0) goto LAB_08008874;\n      if ((input_param3 | input_param4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(result,input_param1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "calculate_double_precision_value_08008a02",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "bit_mask1",
                "unaff_r4": "constant1",
                "uVar2": "masked_value",
                "uVar3": "result",
                "in_r12": "constant2",
                "bVar4": "conditions_met"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp1;\n  bool is_zero;\n  bool is_less_than;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = input_2 == input_4;\n  }\n  if (is_zero) {\n    is_zero = input_1 == input_3;\n  }\n  if (!is_zero) {\n    temp1 = input_2 ^ input_4;\n    is_zero = temp1 == 0;\n    if (-1 < (int)temp1) {\n      is_zero = input_2 == input_4;\n    }\n    is_less_than = -1 < (int)temp1 && input_4 <= input_2;\n    if (is_zero) {\n      is_less_than = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!is_less_than) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp1",
                "bVar2": "is_zero",
                "bVar3": "is_less_than"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "validate_and_return_08008af0",
            "code": "\nvoid validate_and_return_08008af0(undefined4 input_1,undefined4 input_2,undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  validate_and_return_08008af0_parameter_08008b00(parameter_1,parameter_2,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "validate_and_return_08008af0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "parameter_1",
                "param_4": "parameter_2"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "validate_and_return_parameter_08008b00",
            "code": "\nundefined4 validate_and_return_parameter_08008b00(undefined4 input_parameter)\n\n{\n  check_parameters_08008a74();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "validate_and_return_parameter_08008b00",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "is_parameter_valid_08008b10",
            "code": "\nbool is_parameter_valid_08008b10(void)\n\n{\n  char is_zero_result;\n  \n  validate_and_return_parameter_08008b00();\n  return is_zero_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "is_parameter_valid_08008b10",
                "in_ZR": "is_zero_result"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_null_terminated_08008b24",
            "code": "\nbool is_null_terminated_08008b24(void)\n\n{\n  char input_character;\n  \n  validate_and_return_parameter_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_null_terminated_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "validate_and_return_08008b4c",
            "code": "\nbool validate_and_return_08008b4c(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  validate_and_return_08008b4c_08008af0();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "validate_and_return_08008b4c",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_if_c_string_empty_08008b60",
            "code": "\nbool check_if_c_string_empty_08008b60(void)\n\n{\n  char input_character;\n  \n  validate_and_return_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_if_c_string_empty_08008b60",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_parameters_08008b74",
            "code": "\nundefined4 check_parameters_08008b74(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_unsigned_division_08008ba0",
            "code": "\nuint calculateUnsignedDivision_08008ba0(uint dividend,uint divisor)\n\n{\n  uint quotient;\n  int temp;\n  uint shiftCount;\n  \n  temp = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < temp) {\n      return 0;\n    }\n    quotient = temp >> 0x15;\n    shiftCount = -quotient - 0x3e1;\n    if (quotient < 0xfffffc20 && shiftCount != 0) {\n      quotient = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shiftCount & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_unsigned_division_08008ba0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "temp",
                "uVar3": "shiftCount"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_result_08008bf0",
            "code": "\nuint calculateResult_08008bf0(uint input1,uint input2)\n\n{\n  int modifiedInput2;\n  uint shiftAmount;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  modifiedInput2 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < modifiedInput2) {\n      return 0;\n    }\n    shiftAmount = -(modifiedInput2 >> 0x15) - 0x3e1;\n    if (-1 < (int)shiftAmount) {\n      return (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shiftAmount & 0xff);\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_result_08008bf0",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "modifiedInput2",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_result_08008c30",
            "code": "\nuint calculateResult_08008c30(uint inputValue1,uint inputValue2)\n\n{\n  uint result;\n  uint temp;\n  uint temp2;\n  uint temp3;\n  bool isConditionMet;\n  bool isConditionMet2;\n  \n  temp = inputValue2 * 2;\n  isConditionMet2 = temp < 0x70000000;\n  temp2 = temp + 0x90000000;\n  result = temp2;\n  if (!isConditionMet2) {\n    temp3 = temp + 0x8fe00000;\n    result = temp3;\n  }\n  isConditionMet = result == 0;\n  if (!isConditionMet2 && temp2 >= 0x200000) {\n    isConditionMet = temp3 == 0x1fc00000;\n  }\n  if (((isConditionMet2 || temp2 < 0x200000) || 0x1fc00000 < temp3) || isConditionMet) {\n    if ((inputValue2 & 0x40000000) != 0) {\n      if (((int)temp >> 0x15 == -1) && ((inputValue1 | inputValue2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputValue2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return inputValue2 & 0x80000000;\n    }\n    temp = 0x18 - (temp + 0x92e00000 >> 0x15);\n    result = inputValue1 >> (temp & 0xff);\n    if (inputValue1 << (0x20 - temp & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = inputValue2 & 0x1fffff | 0x100000;\n    inputValue1 = result | temp2 << (0x20 - temp & 0xff);\n    temp2 = (temp2 >> (temp & 0xff)) << 1;\n  }\n  result = (inputValue2 & 0x80000000 | inputValue1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputValue1 * 8);\n  if (inputValue1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_result_08008c30",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isConditionMet",
                "bVar5": "isConditionMet2"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_float_addition_08008cd8",
            "code": "\nuint calculate_float_addition_08008cd8(uint float_a,uint float_b,undefined4 float_c,uint float_d)\n\n{\n  int shifted_a;\n  int shifted_b;\n  uint xor_result;\n  uint abs_shifted_a;\n  uint abs_shifted_b;\n  uint loop_iteration;\n  uint abs_diff_shifted_a_b;\n  bool are_shifted_a_b_equal;\n  \n  xor_result = float_b ^ 0x80000000;\n  abs_shifted_b = float_a << 1;\n  are_shifted_a_b_equal = abs_shifted_b == 0;\n  if (!are_shifted_a_b_equal) {\n    float_d = float_b << 1;\n    are_shifted_a_b_equal = float_d == 0;\n  }\n  if (!are_shifted_a_b_equal) {\n    are_shifted_a_b_equal = abs_shifted_b == float_d;\n  }\n  shifted_a = (int)abs_shifted_b >> 0x18;\n  if (!are_shifted_a_b_equal) {\n    are_shifted_a_b_equal = shifted_a == -1;\n  }\n  if (!are_shifted_a_b_equal) {\n    are_shifted_a_b_equal = (int)float_d >> 0x18 == -1;\n  }\n  if (are_shifted_a_b_equal) {\n    shifted_b = (int)(float_b << 1) >> 0x18;\n    if (shifted_a == -1 || shifted_b == -1) {\n      abs_shifted_b = xor_result;\n      if (shifted_a == -1) {\n        abs_shifted_b = float_a;\n      }\n      if (shifted_a != -1 || shifted_b != -1) {\n        xor_result = abs_shifted_b;\n      }\n      are_shifted_a_b_equal = (abs_shifted_b & 0x7fffff) == 0;\n      if (are_shifted_a_b_equal) {\n        are_shifted_a_b_equal = (xor_result & 0x7fffff) == 0;\n      }\n      if (are_shifted_a_b_equal) {\n        are_shifted_a_b_equal = abs_shifted_b == xor_result;\n      }\n      if (!are_shifted_a_b_equal) {\n        abs_shifted_b = abs_shifted_b | 0x400000;\n      }\n      return abs_shifted_b;\n    }\n    if (((float_a ^ xor_result) & 0x7fffffff) != 0) {\n      if (abs_shifted_b == 0) {\n        float_a = xor_result;\n      }\n      return float_a;\n    }\n    if (float_a != xor_result) {\n      return 0;\n    }\n    if ((abs_shifted_b & 0xff000000) == 0) {\n      xor_result = float_a << 1;\n      if ((float_a & 0x80000000) != 0) {\n        xor_result = xor_result | 0x80000000;\n      }\n      return xor_result;\n    }\n    if (abs_shifted_b < 0xfe000000) {\n      return float_a + 0x800000;\n    }\n    float_a = float_a & 0x80000000;\nLAB_08008e12:\n    return float_a | 0x7f800000;\n  }\n  abs_shifted_b = abs_shifted_b >> 0x18;\n  float_d = float_d >> 0x18;\n  abs_diff_shifted_a_b = float_d - abs_shifted_b;\n  are_shifted_a_b_equal = abs_diff_shifted_a_b != 0;\n  loop_iteration = abs_shifted_b;\n  if (are_shifted_a_b_equal && abs_shifted_b <= float_d) {\n    loop_iteration = abs_shifted_b + abs_diff_shifted_a_b;\n  }\n  if (are_shifted_a_b_equal && abs_shifted_b <= float_d) {\n    xor_result = xor_result ^ float_a;\n  }\n  if (are_shifted_a_b_equal && abs_shifted_b <= float_d) {\n    float_a = float_a ^ xor_result;\n  }\n  if (are_shifted_a_b_equal && abs_shifted_b <= float_d) {\n    xor_result = xor_result ^ float_a;\n  }\n  if (float_d < abs_shifted_b) {\n    abs_diff_shifted_a_b = -abs_diff_shifted_a_b;\n  }\n  if (0x19 < abs_diff_shifted_a_b) {\n    return float_a;\n  }\n  abs_shifted_b = float_a & 0xffffff | 0x800000;\n  if ((float_a & 0x80000000) != 0) {\n    abs_shifted_b = -abs_shifted_b;\n  }\n  abs_shifted_a = xor_result & 0xffffff | 0x800000;\n  if ((xor_result & 0x80000000) != 0) {\n    abs_shifted_a = -abs_shifted_a;\n  }\n  if (loop_iteration == abs_diff_shifted_a_b) {\n    abs_shifted_a = abs_shifted_a ^ 0x800000;\n    if (loop_iteration == 0) {\n      abs_shifted_b = abs_shifted_b ^ 0x800000;\n      loop_iteration = 1;\n    }\n    else {\n      abs_diff_shifted_a_b = abs_diff_shifted_a_b - 1;\n    }\n  }\n  abs_shifted_b = abs_shifted_b + ((int)abs_shifted_a >> (abs_diff_shifted_a_b & 0xff));\n  abs_shifted_a = abs_shifted_a << (0x20 - abs_diff_shifted_a_b & 0xff);\n  float_a = abs_shifted_b & 0x80000000;\n  if ((int)abs_shifted_b < 0) {\n    are_shifted_a_b_equal = abs_shifted_a != 0;\n    abs_shifted_a = -abs_shifted_a;\n    abs_shifted_b = -abs_shifted_b - (uint)are_shifted_a_b_equal;\n  }\n  if (abs_shifted_b < 0x800000) {\n    xor_result = abs_shifted_a & 0x80000000;\n    abs_shifted_a = abs_shifted_a << 1;\n    abs_shifted_b = abs_shifted_b * 2 + (uint)(xor_result != 0);\n    xor_result = loop_iteration - 2;\n    if (loop_iteration - 1 == 0 || abs_shifted_b < 0x800000) {\n      abs_diff_shifted_a_b = LZCOUNT(abs_shifted_b) - 8;\n      abs_shifted_b = abs_shifted_b << (abs_diff_shifted_a_b & 0xff);\n      if ((int)xor_result < (int)abs_diff_shifted_a_b) {\n        abs_shifted_b = abs_shifted_b >> (-(xor_result - abs_diff_shifted_a_b) & 0xff);\n      }\n      else {\n        abs_shifted_b = abs_shifted_b + (xor_result - abs_diff_shifted_a_b) * 0x800000;\n      }\n      return abs_shifted_b | float_a;\n    }\n  }\n  else {\n    xor_result = loop_iteration - 1;\n    if (0xffffff < abs_shifted_b) {\n      xor_result = abs_shifted_b & 1;\n      abs_shifted_b = abs_shifted_b >> 1;\n      abs_shifted_a = (uint)(xor_result != 0) << 0x1f | abs_shifted_a >> 1;\n      xor_result = loop_iteration;\n      if (0xfd < loop_iteration) goto LAB_08008e12;\n    }\n  }\n  abs_shifted_b = abs_shifted_b + xor_result * 0x800000 + (uint)(0x7fffffff < abs_shifted_a);\n  if (abs_shifted_a == 0x80000000) {\n    abs_shifted_b = abs_shifted_b & 0xfffffffe;\n  }\n  return abs_shifted_b | float_a;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_float_addition_08008cd8",
                "param_1": "float_a",
                "param_2": "float_b",
                "param_3": "float_c",
                "param_4": "float_d",
                "iVar1": "shifted_a",
                "iVar2": "shifted_b",
                "uVar3": "xor_result",
                "uVar4": "abs_shifted_a",
                "uVar5": "abs_shifted_b",
                "uVar6": "loop_iteration",
                "uVar7": "abs_diff_shifted_a_b",
                "bVar8": "are_shifted_a_b_equal"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "reverse_number_operation_08008cdc",
            "code": "\nuint reverseNumberOperation_08008cdc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1Sign;\n  int shiftedInput2Sign;\n  uint input2Masked;\n  uint shiftedInput1;\n  uint shiftedInput2;\n  uint difference;\n  bool isZero;\n  \n  shiftedInput1 = input1 << 1;\n  isZero = shiftedInput1 == 0;\n  if (!isZero) {\n    input4 = input2 << 1;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedInput1 == input4;\n  }\n  shiftedInput1Sign = (int)shiftedInput1 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1Sign == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2Sign = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1Sign == -1 || shiftedInput2Sign == -1) {\n      shiftedInput1 = input2;\n      if (shiftedInput1Sign == -1) {\n        shiftedInput1 = input1;\n      }\n      if (shiftedInput1Sign != -1 || shiftedInput2Sign != -1) {\n        input2 = shiftedInput1;\n      }\n      isZero = (shiftedInput1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedInput1 == input2;\n      }\n      if (!isZero) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      shiftedInput1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shiftedInput1 = shiftedInput1 | 0x80000000;\n      }\n      return shiftedInput1;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shiftedInput1;\n  isZero = difference != 0;\n  shiftedInput2 = shiftedInput1;\n  if (isZero && shiftedInput1 <= input4) {\n    shiftedInput2 = shiftedInput1 + difference;\n  }\n  if (isZero && shiftedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && shiftedInput1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && shiftedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shiftedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  input2Masked = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    input2Masked = -input2Masked;\n  }\n  if (shiftedInput2 == difference) {\n    input2Masked = input2Masked ^ 0x800000;\n    if (shiftedInput2 == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      shiftedInput2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)input2Masked >> (difference & 0xff));\n  input2Masked = input2Masked << (0x20 - difference & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isZero = input2Masked != 0;\n    input2Masked = -input2Masked;\n    shiftedInput1 = -shiftedInput1 - (uint)isZero;\n  }\n  if (shiftedInput1 < 0x800000) {\n    difference = input2Masked & 0x80000000;\n    input2Masked = input2Masked << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(difference != 0);\n    difference = shiftedInput2 - 2;\n    if (shiftedInput2 - 1 == 0 || shiftedInput1 < 0x800000) {\n      shiftedInput2 = leadingZeroCount(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (shiftedInput2 & 0xff);\n      if ((int)difference < (int)shiftedInput2) {\n        shiftedInput1 = shiftedInput1 >> (-(difference - shiftedInput2) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (difference - shiftedInput2) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    difference = shiftedInput2 - 1;\n    if (0xffffff < shiftedInput1) {\n      difference = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      input2Masked = (uint)(difference != 0) << 0x1f | input2Masked >> 1;\n      difference = shiftedInput2;\n      if (0xfd < shiftedInput2) goto LAB_08008e12;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + difference * 0x800000 + (uint)(0x7fffffff < input2Masked);\n  if (input2Masked == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "reverse_number_operation_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar4": "shiftedInput1",
                "uVar5": "shiftedInput2",
                "uVar6": "difference",
                "bVar7": "isZero",
                "iVar1": "shiftedInput1Sign",
                "iVar2": "shiftedInput2Sign",
                "uVar3": "input2Masked",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_checksum_08008e3c",
            "code": "\nuint calculateChecksum_08008e3c(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint bitShift;\n  int intermediateValue;\n  uint tempValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputValue);\n  bitShift = leadingZeroes - 8;\n  intermediateValue = bitShift * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    tempValue = 0 << (bitShift & 0xff);\n    leadingZeroes = intermediateValue + (inputValue << (bitShift & 0xff)) +\n            (0U >> (0x20 - bitShift & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  bitShift = inputValue << leadingZeroes + 0x18;\n  leadingZeroes = intermediateValue + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)bitShift >> 0x1f));\n  if ((bitShift & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(bitShift >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_checksum_08008e3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "bitShift",
                "iVar3": "intermediateValue",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_updated_value_08008e44",
            "code": "\nuint calculate_updated_value_08008e44(uint input_value)\n\n{\n  uint leading_zeroes;\n  uint shift_value;\n  uint is_negative;\n  int result_offset;\n  \n  is_negative = input_value & 0x80000000;\n  if ((int)is_negative < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = LZCOUNT(input_value);\n  shift_value = leading_zeroes - 8;\n  result_offset = ((is_negative | 0x4b000000) - 0x800000) + shift_value * -0x800000;\n  if (7 < leading_zeroes) {\n    leading_zeroes = 0 << (shift_value & 0xff);\n    is_negative = result_offset + (input_value << (shift_value & 0xff)) +\n            (0U >> (0x20 - shift_value & 0xff)) + (uint)(0x7fffffff < leading_zeroes);\n    if (leading_zeroes == 0x80000000) {\n      is_negative = is_negative & 0xfffffffe;\n    }\n    return is_negative;\n  }\n  shift_value = input_value << leading_zeroes + 0x18;\n  is_negative = result_offset + ((input_value >> (0x20 - (leading_zeroes + 0x18) & 0xff)) - ((int)shift_value >> 0x1f));\n  if ((shift_value & 0x7fffffff) == 0) {\n    is_negative = is_negative & ~(shift_value >> 0x1f);\n  }\n  return is_negative;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_updated_value_08008e44",
                "param_1": "input_value",
                "uVar1": "leading_zeroes",
                "uVar2": "shift_value",
                "uVar3": "is_negative",
                "iVar4": "result_offset"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_float_08008eec",
            "code": "\nuint calculateFloat_08008eec(uint inputA,uint inputB,undefined4 inputC,uint inputD)\n\n{\n  longlong tempVar1;\n  uint result;\n  uint bitValueA;\n  int sumAB;\n  int diffSumMinus1;\n  uint bitValueAxB;\n  int diffSumMinus2;\n  uint topBits;\n  bool isZero;\n  bool isNegative;\n  \n  bitValueA = inputA >> 0x17 & 0xff;\n  isZero = bitValueA == 0;\n  if (!isZero) {\n    inputD = inputB >> 0x17 & 0xff;\n    isZero = inputD == 0;\n  }\n  if (!isZero) {\n    isZero = bitValueA == 0xff;\n  }\n  if (!isZero) {\n    isZero = inputD == 0xff;\n  }\n  if (isZero) {\n    inputD = inputB >> 0x17 & 0xff;\n    if (bitValueA == 0xff || inputD == 0xff) {\n      isZero = inputA == 0 || inputA == 0x80000000;\n      result = inputB;\n      if (inputA != 0 && inputA != 0x80000000) {\n        isZero = inputB == 0;\n        result = inputA;\n      }\n      if (!isZero) {\n        isZero = inputB == 0x80000000;\n      }\n      topBits = result;\n      if (((isZero) || ((bitValueA == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((inputD == 0xff && (topBits = inputB, (inputB & 0x7fffff) != 0)))) {\n        return topBits | 0x7fc00000;\n      }\n      result = result ^ inputB;\n      goto LAB_0800903c;\n    }\n    isZero = (inputA & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (inputB & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (inputA ^ inputB) & 0x80000000;\n    }\n    isZero = bitValueA == 0;\n    result = inputA & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        inputA = inputA << 1;\n        isZero = (inputA & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bitValueA = bitValueA - 1;\n    }\n    inputA = inputA | result;\n    isZero = inputD == 0;\n    result = inputB & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        inputB = inputB << 1;\n        isZero = (inputB & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      inputD = inputD - 1;\n    }\n    inputB = inputB | result;\n  }\n  sumAB = bitValueA + inputD;\n  topBits = inputA ^ inputB;\n  bitValueA = inputA << 9;\n  isZero = bitValueA == 0;\n  if (!isZero) {\n    inputB = inputB << 9;\n    isZero = inputB == 0;\n  }\n  if (isZero) {\n    if (bitValueA == 0) {\n      inputB = inputB << 9;\n    }\n    result = topBits & 0x80000000 | inputA & 0x7fffff | inputB >> 9;\n    isNegative = SBORROW4(sumAB,0x7f);\n    diffSumMinus1 = sumAB + -0x7f;\n    isZero = diffSumMinus1 == 0;\n    diffSumMinus2 = diffSumMinus1;\n    if (!isZero && 0x7e < sumAB) {\n      isNegative = SBORROW4(0xff,diffSumMinus1);\n      diffSumMinus2 = 0xff - diffSumMinus1;\n      isZero = diffSumMinus1 == 0xff;\n    }\n    if (!isZero && diffSumMinus2 < 0 == isNegative) {\n      result = result | diffSumMinus1 * 0x800000;\n    }\n    if (!isZero && diffSumMinus2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    bitValueAxB = 0;\n    isNegative = SBORROW4(diffSumMinus1,1);\n    topBits = sumAB - 0x80;\n    isZero = topBits == 0;\n    bitValueA = topBits;\n  }\n  else {\n    tempVar1 = (ulonglong)(bitValueA >> 5 | 0x8000000) * (ulonglong)(inputB >> 5 | 0x8000000);\n    bitValueAxB = (uint)tempVar1;\n    result = (uint)((ulonglong)tempVar1 >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | bitValueAxB >> 0x1f;\n      bitValueAxB = bitValueAxB << 1;\n    }\n    result = topBits & 0x80000000 | result;\n    topBits = (sumAB + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(topBits,0xfd);\n    isZero = topBits == 0xfd;\n    bitValueA = topBits - 0xfd;\n    if (topBits < 0xfe) {\n      result = result + topBits * 0x800000 + (uint)(0x7fffffff < bitValueAxB);\n      if (bitValueAxB == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)bitValueA < 0 != isNegative) {\n    isZero = (int)(topBits + 0x19) < 0;\n    if (topBits == 0xffffffe7 || isZero != SCARRY4(topBits,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (topBits != 0xffffffe7 && isZero == SCARRY4(topBits,0x19)) {\n      bitValueA = (result << 1) >> (-topBits & 0xff);\n      topBits = result << (topBits + 0x20 & 0xff);\n      bitValueA = ((uint)((result & 0x80000000) != 0) << 0x1f | bitValueA >> 1) + (uint)((byte)bitValueA & 1);\n      if ((bitValueAxB | topBits << 1) == 0) {\n        bitValueA = bitValueA & ~(topBits >> 0x1f);\n      }\n      return bitValueA;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "param_4": "inputD",
                "lVar1": "tempVar1",
                "uVar2": "result",
                "uVar3": "bitValueA",
                "iVar4": "sumAB",
                "iVar5": "diffSumMinus1",
                "uVar6": "bitValueAxB",
                "iVar7": "diffSumMinus2",
                "uVar8": "topBits",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint num1,uint num2,undefined4 param3,uint param4)\n\n{\n  uint mask;\n  uint shiftedBits;\n  int difference;\n  uint temp1;\n  int temp2;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  shiftedBits = num1 >> 0x17 & 0xff;\n  condition1 = shiftedBits == 0;\n  if (!condition1) {\n    param4 = num2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = shiftedBits == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = num2 >> 0x17 & 0xff;\n    result = num1;\n    if (shiftedBits == 0xff) {\n      if (((num1 & 0x7fffff) != 0) || (result = num2, param4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = num2;\n        if ((num2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (num1 ^ num2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      condition1 = (num1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (num2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = shiftedBits == 0;\n        result = num1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            num1 = num1 << 1;\n            condition1 = (num1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          shiftedBits = shiftedBits - 1;\n        }\n        num1 = num1 | result;\n        condition1 = param4 == 0;\n        result = num2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            num2 = num2 << 1;\n            condition1 = (num2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        num2 = num2 | result;\n        goto LAB_0800906c;\n      }\n      if ((num1 & 0x7fffffff) == 0) {\n        if ((num2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    num1 = num1 ^ num2;\n  }\n  else {\nLAB_0800906c:\n    difference = shiftedBits - param4;\n    if (num2 << 9 == 0) {\n      num1 = (num1 ^ num2) & 0x80000000 | num1 & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      temp2 = difference + 0x7f;\n      condition1 = temp2 < 0;\n      condition2 = temp2 == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,temp2);\n        condition1 = 0xff - temp2 < 0;\n        condition2 = temp2 == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        num1 = num1 | temp2 * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return num1;\n      }\n      num1 = num1 | 0x800000;\n      shiftedBits = 0;\n      condition2 = SBORROW4(temp2,1);\n      temp1 = difference + 0x7e;\n      condition1 = temp1 == 0;\n      result = temp1;\n    }\n    else {\n      mask = (num2 << 9) >> 4 | 0x10000000;\n      shiftedBits = (num1 << 9) >> 4 | 0x10000000;\n      num1 = (num1 ^ num2) & 0x80000000;\n      condition1 = mask <= shiftedBits;\n      if (!condition1) {\n        shiftedBits = shiftedBits << 1;\n      }\n      temp1 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (mask <= shiftedBits) {\n          shiftedBits = shiftedBits - mask;\n          num1 = num1 | result;\n        }\n        condition1 = mask >> 1 <= shiftedBits;\n        if (condition1) {\n          shiftedBits = shiftedBits - (mask >> 1);\n        }\n        if (condition1) {\n          num1 = num1 | result >> 1;\n        }\n        condition1 = mask >> 2 <= shiftedBits;\n        if (condition1) {\n          shiftedBits = shiftedBits - (mask >> 2);\n        }\n        if (condition1) {\n          num1 = num1 | result >> 2;\n        }\n        condition1 = mask >> 3 <= shiftedBits;\n        if (condition1) {\n          shiftedBits = shiftedBits - (mask >> 3);\n        }\n        if (condition1) {\n          num1 = num1 | result >> 3;\n        }\n        shiftedBits = shiftedBits * 0x10;\n        condition1 = shiftedBits == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(temp1,0xfd);\n      condition1 = temp1 == 0xfd;\n      result = temp1 - 0xfd;\n      if (temp1 < 0xfe) {\n        num1 = num1 + temp1 * 0x800000 + (uint)(mask <= shiftedBits);\n        if (shiftedBits - mask == 0) {\n          num1 = num1 & 0xfffffffe;\n        }\n        return num1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(temp1 + 0x19) < 0;\n      if (temp1 == 0xffffffe7 || condition1 != SCARRY4(temp1,0x19)) {\n        num1 = num1 & 0x80000000;\n      }\n      if (temp1 == 0xffffffe7 || condition1 != SCARRY4(temp1,0x19)) {\n        return num1;\n      }\n      result = (num1 << 1) >> (-temp1 & 0xff);\n      temp1 = num1 << (temp1 + 0x20 & 0xff);\n      result = ((uint)((num1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((shiftedBits | temp1 << 1) == 0) {\n        result = result & ~(temp1 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return num1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "mask",
                "uVar2": "shiftedBits",
                "iVar3": "difference",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "check_overflow_0800919c",
            "code": "\nuint check_overflow_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_overflow;\n  uint input_1_double;\n  uint input_2_double;\n  uint combined_values;\n  bool is_zero;\n  \n  input_1_double = input_1 * 2;\n  input_2_double = input_2 * 2;\n  if (((int)input_1_double >> 0x18 == -1 || (int)input_2_double >> 0x18 == -1) &&\n     ((((int)input_1_double >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_double >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_values = input_1_double | input_2 & 0x7fffffff;\n  is_zero = combined_values == 0;\n  if (!is_zero) {\n    combined_values = input_1 ^ input_2;\n    is_zero = combined_values == 0;\n  }\n  is_overflow = -1 < (int)combined_values;\n  if (is_overflow) {\n    input_1 = input_1_double + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_overflow && input_2_double <= input_1_double) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_overflow || input_2_double > input_1_double) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "check_overflow_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_double",
                "uVar3": "input_2_double",
                "uVar4": "combined_values",
                "bVar1": "is_overflow",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_values_080091fc",
            "code": "\nvoid concatenateValues_080091fc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_values_08009204(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_values_080091fc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_values_08009204",
            "code": "\nundefined8 concatenateValues_08009204(undefined4 firstValue,undefined4 secondValue)\n\n{\n  check_overflow_0800919c();\n  return CONCAT44(secondValue,firstValue);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_values_08009204",
                "param_1": "firstValue",
                "param_2": "secondValue"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_concatenated_values_08009214",
            "code": "\nbool check_concatenated_values_08009214(void)\n\n{\n  char concatenated_result;\n  \n  concatenate_values_08009204();\n  return concatenated_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_concatenated_values_08009214",
                "in_ZR": "concatenated_result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_concatenated_value_null_08009228",
            "code": "\nbool is_concatenated_value_null_08009228(void)\n\n{\n  char input_character;\n  \n  concatenate_values_08009204();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_concatenated_value_null_08009228",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_concatenation_result_0800923c",
            "code": "\nbool check_concatenation_result_0800923c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_result;\n  \n  concatenate_values_08009204();\n  return !(bool)is_carry_result || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_concatenation_result_0800923c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_concatenated_values_08009250",
            "code": "\nbool check_concatenated_values_08009250(void)\n\n{\n  undefined is_zero_flag;\n  undefined is_carry_flag;\n  \n  concatenate_values_080091fc();\n  return !(bool)is_carry_flag || (bool)is_zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_concatenated_values_08009250",
                "in_ZR": "is_zero_flag",
                "in_CY": "is_carry_flag"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_concatenated_values_08009264",
            "code": "\nbool check_concatenated_values_08009264(void)\n\n{\n  char input_character;\n  \n  concatenate_values_080091fc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_concatenated_values_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "extract_and_convert_08009278",
            "code": "\nuint extract_and_convert_08009278(uint input_value)\n\n{\n  uint shift_result;\n  uint shift_offset;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shift_result = (input_value << 1) >> 0x18;\n  shift_offset = 0x9e - shift_result;\n  if (shift_result < 0x9f && shift_offset != 0) {\n    shift_result = (input_value << 8 | 0x80000000) >> (shift_offset & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shift_result = -shift_result;\n    }\n    return shift_result;\n  }\n  if ((shift_offset == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08009278": "extract_and_convert_08009278",
                "param_1": "input_value",
                "uVar1": "shift_result",
                "uVar2": "shift_offset"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_0800756c();\n  execute_function_set_twice_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_system_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_floating_point_value_08009318",
            "code": "\nlonglong calculateFloatingPointValue_08009318(uint inputValue1,uint inputValue2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint exponent;\n  uint mask;\n  bool carry;\n  undefined8 sum;\n  longlong outputValue;\n  \n  mask = (inputValue2 << 1) >> 0x15;\n  exponent = mask - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      sum = calculateSum(inputValue1,inputValue2,0x8800759c,0x7e37e43c,param4);\n      result = checkIfStringEmpty((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      outputValue = CONCAT44(inputValue2,inputValue1);\n      if (result != 0) {\n        if ((int)inputValue2 < 0) {\n          outputValue = -0x8000000000000000;\n        }\n        else if ((inputValue1 | inputValue2) == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (exponent & 0xff);\n      outputValue = CONCAT44(inputValue2,inputValue1);\n      if ((inputValue2 & mask | inputValue1) != 0) {\n        sum = calculateSum(inputValue1,inputValue2,0x8800759c,0x7e37e43c,param4);\n        result = checkIfStringEmpty((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n        outputValue = CONCAT44(inputValue2,inputValue1);\n        if (result != 0) {\n          if (0 < (int)inputValue2) {\n            inputValue2 = inputValue2 + (0x100000 >> (exponent & 0xff));\n          }\n          outputValue = (ulonglong)(inputValue2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    outputValue = CONCAT44(inputValue2,inputValue1);\n    if ((mask & inputValue1) != 0) {\n      sum = calculateSum(inputValue1,inputValue2,0x8800759c,0x7e37e43c,param4);\n      result = checkIfStringEmpty((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      outputValue = CONCAT44(inputValue2,inputValue1);\n      if (result != 0) {\n        if (0 < (int)inputValue2) {\n          if (exponent == 0x14) {\n            inputValue2 = inputValue2 + 1;\n          }\n          else {\n            exponent = 1 << (0x34 - exponent & 0xff);\n            carry = CARRY4(exponent,inputValue1);\n            inputValue1 = exponent + inputValue1;\n            if (carry != false) {\n              inputValue2 = inputValue2 + 1;\n            }\n          }\n        }\n        outputValue = CONCAT44(inputValue2,inputValue1 & ~mask);\n      }\n    }\n  }\n  else {\n    outputValue = CONCAT44(inputValue2,inputValue1);\n    if (exponent == 0x400) {\n      outputValue = calculateSum();\n    }\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_floating_point_value_08009318",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "exponent",
                "uVar3": "mask",
                "bVar4": "carry",
                "uVar5": "sum",
                "lVar6": "outputValue",
                "calculate_sum_080082d4": "calculateSum",
                "check_if_c_string_empty_08008b60": "checkIfStringEmpty"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_08009410",
            "code": "\nundefined4 calculate_08009410(undefined4 input1,uint input2)\n\n{\n  undefined4 result;\n  uint resultType;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  if (0x3fe921fb < (input2 & 0x7fffffff)) {\n    if ((input2 & 0x7fffffff) < 0x7ff00000) {\n      resultType = calculate_08009410_result_08009d78(input1,input2,&localVar1);\n      resultType = resultType & 3;\n      if (resultType == 1) {\n        result = calculate_08009410_result_0800adf0(localVar1,localVar2,localVar3,localVar4,1);\n      }\n      else if (resultType == 2) {\n        result = calculate_08009410_result_0800a348(localVar1,localVar2,localVar3,localVar4);\n      }\n      else if (resultType == 0) {\n        result = calculate_08009410_result_0800a348(localVar1,localVar2,localVar3,localVar4);\n      }\n      else {\n        result = calculate_08009410_result_0800adf0(localVar1,localVar2,localVar3,localVar4,1);\n      }\n    }\n    else {\n      result = calculate_08009410_extended_multiplication_080082d0(input1,input2,input1,input2);\n    }\n    return result;\n  }\n  result = calculate_08009410_result_0800a348(input1,input2,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_08009410",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "resultType",
                "local_28": "localVar1",
                "uStack_24": "localVar2",
                "local_20": "localVar3",
                "uStack_1c": "localVar4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "process_data_080094c0",
            "code": "\nlonglong processData_080094c0(uint inputVal1,uint inputVal2,undefined4 constant1,undefined4 constant2)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  bool tempVar4;\n  undefined8 tempVar5;\n  longlong outputVal;\n  \n  tempVar3 = (inputVal2 << 1) >> 0x15;\n  tempVar2 = tempVar3 - 0x3ff;\n  if ((int)tempVar2 < 0x14) {\n    if ((int)tempVar2 < 0) {\n      tempVar5 = calculate_sum_080082d4(inputVal1,inputVal2,0x8800759c,0x7e37e43c,constant2);\n      tempVar1 = check_if_c_string_empty_08008b60((int)tempVar5,(int)((ulonglong)tempVar5 >> 0x20),0,0);\n      outputVal = CONCAT44(inputVal2,inputVal1);\n      if (tempVar1 != 0) {\n        if ((int)inputVal2 < 0) {\n          if ((inputVal1 | inputVal2 & 0x7fffffff) != 0) {\n            inputVal2 = 0xbff00000;\n          }\n          outputVal = (ulonglong)inputVal2 << 0x20;\n        }\n        else {\n          outputVal = 0;\n        }\n      }\n    }\n    else {\n      tempVar3 = 0xfffff >> (tempVar2 & 0xff);\n      outputVal = CONCAT44(inputVal2,inputVal1);\n      if ((inputVal2 & tempVar3 | inputVal1) != 0) {\n        tempVar5 = calculate_sum_080082d4(inputVal1,inputVal2,0x8800759c,0x7e37e43c,constant2);\n        tempVar1 = check_if_c_string_empty_08008b60((int)tempVar5,(int)((ulonglong)tempVar5 >> 0x20),0,0);\n        outputVal = CONCAT44(inputVal2,inputVal1);\n        if (tempVar1 != 0) {\n          if ((int)inputVal2 < 0) {\n            inputVal2 = inputVal2 + (0x100000 >> (tempVar2 & 0xff));\n          }\n          outputVal = (ulonglong)(inputVal2 & ~tempVar3) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)tempVar2 < 0x34) {\n    tempVar3 = 0xffffffff >> (tempVar3 - 0x413 & 0xff);\n    outputVal = CONCAT44(inputVal2,inputVal1);\n    if ((tempVar3 & inputVal1) != 0) {\n      tempVar5 = calculate_sum_080082d4(inputVal1,inputVal2,0x8800759c,0x7e37e43c,constant2);\n      tempVar1 = check_if_c_string_empty_08008b60((int)tempVar5,(int)((ulonglong)tempVar5 >> 0x20),0,0);\n      outputVal = CONCAT44(inputVal2,inputVal1);\n      if (tempVar1 != 0) {\n        if ((int)inputVal2 < 0) {\n          if (tempVar2 == 0x14) {\n            inputVal2 = inputVal2 + 1;\n          }\n          else {\n            tempVar2 = 1 << (0x34 - tempVar2 & 0xff);\n            tempVar4 = CARRY4(tempVar2,inputVal1);\n            inputVal1 = tempVar2 + inputVal1;\n            if (tempVar4 != false) {\n              inputVal2 = inputVal2 + 1;\n            }\n          }\n        }\n        outputVal = CONCAT44(inputVal2,inputVal1 & ~tempVar3);\n      }\n    }\n  }\n  else {\n    outputVal = CONCAT44(inputVal2,inputVal1);\n    if (tempVar2 == 0x400) {\n      outputVal = calculate_sum_080082d4();\n    }\n  }\n  return outputVal;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "process_data_080094c0",
                "param_1": "inputVal1",
                "param_2": "inputVal2",
                "param_3": "constant1",
                "param_4": "constant2",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "bVar4": "tempVar4",
                "uVar5": "tempVar5",
                "lVar6": "outputVal"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_signed_division_080095b8",
            "code": "\nint calculate_signed_division_080095b8(uint dividend,uint divisor)\n\n{\n  uint quotient;\n  uint shift_count;\n  uint result;\n  int sign;\n  uint temp;\n  \n  shift_count = (divisor << 1) >> 0x15;\n  temp = shift_count - 0x3ff;\n  if ((int)divisor < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = divisor & 0xfffff | 0x100000;\n  if ((int)temp < 0x14) {\n    if ((int)temp < 0) {\n      if (temp != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (temp & 0xff)) >> (0x14 - temp & 0xff);\n  }\n  else {\n    if (0x1e < temp) {\n      sign = calculate_unsigned_division_08008ba0();\n      return sign;\n    }\n    if ((int)temp < 0x34) {\n      quotient = 0x80000000 >> (shift_count - 0x413 & 0xff);\n      if (CARRY4(quotient,dividend) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_count - 0x413 & 0xff);\n      if (temp != 0x14) {\n        result = result | quotient + dividend >> (0x34 - temp & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_count - 0x413 & 0xff) | dividend << (shift_count - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_signed_division_080095b8",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "shift_count",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "temp"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_double_precision_value_08009654",
            "code": "\nlonglong calculate_double_precision_value_08009654(uint first_part,uint second_part)\n\n{\n  uint shifted_amount;\n  uint shifted_result;\n  longlong result;\n  \n  result = CONCAT44(second_part,first_part);\n  shifted_result = (second_part << 1) >> 0x15;\n  shifted_amount = shifted_result - 0x3ff;\n  if ((int)shifted_amount < 0x14) {\n    if ((int)shifted_amount < 0) {\n      second_part = second_part & 0x80000000;\n      if (shifted_amount == 0xffffffff) {\n        second_part = second_part | 0x3ff00000;\n      }\n      result = (ulonglong)second_part << 0x20;\n    }\n    else {\n      shifted_result = 0xfffff >> (shifted_amount & 0xff);\n      result = CONCAT44(second_part,first_part);\n      if ((second_part & shifted_result | first_part) != 0) {\n        result = (ulonglong)(second_part + (0x80000 >> (shifted_amount & 0xff)) & ~shifted_result) << 0x20;\n      }\n    }\n  }\n  else if ((int)shifted_amount < 0x34) {\n    shifted_result = 0xffffffff >> (shifted_result - 0x413 & 0xff);\n    if ((first_part & shifted_result) != 0) {\n      shifted_amount = 1 << (0x33 - shifted_amount & 0xff);\n      if (has_carry(first_part,shifted_amount) != false) {\n        second_part = second_part + 1;\n      }\n      result = CONCAT44(second_part,first_part + shifted_amount & ~shifted_result);\n    }\n  }\n  else {\n    result = CONCAT44(second_part,first_part);\n    if (shifted_amount == 0x400) {\n      result = calculate_sum();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_double_precision_value_08009654",
                "param_1": "first_part",
                "param_2": "second_part",
                "uVar1": "shifted_amount",
                "uVar2": "shifted_result",
                "lVar3": "result",
                "CARRY4": "has_carry",
                "calculate_sum_080082d4": "calculate_sum"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_result_080096e8",
            "code": "\nundefined4 calculate_result_080096e8(undefined4 input_parameter,uint input_value)\n\n{\n  undefined4 result;\n  uint result_flag;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      result_flag = calculate_result_080096e8_08009d78(input_parameter,input_value,&local_var1);\n      result_flag = result_flag & 3;\n      if (result_flag == 1) {\n        result = calculate_result_080096e8_0800a348(local_var1,local_var2,local_var3,local_var4);\n      }\n      else if (result_flag == 2) {\n        result = calculate_result_080096e8_0800adf0(local_var1,local_var2,local_var3,local_var4,1);\n      }\n      else if (result_flag == 0) {\n        result = calculate_result_080096e8_0800adf0(local_var1,local_var2,local_var3,local_var4,1);\n      }\n      else {\n        result = calculate_result_080096e8_0800a348(local_var1,local_var2,local_var3,local_var4);\n      }\n    }\n    else {\n      result = calculate_extended_multiplication_080082d0(input_parameter,input_value,input_parameter,input_value);\n    }\n    return result;\n  }\n  result = calculate_result_080096e8_0800adf0(input_parameter,input_value,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "param_1": "input_parameter",
                "param_2": "input_value",
                "uVar1": "result",
                "uVar2": "result_flag",
                "local_28": "local_var1",
                "uStack_24": "local_var2",
                "local_20": "local_var3",
                "uStack_1c": "local_var4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_value_08009798",
            "code": "\nlonglong calculate_value_08009798(uint input_1,uint input_2,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  uint shifted_bits;\n  uint shifted_value;\n  longlong result;\n  \n  shifted_value = (input_2 << 1) >> 0x15;\n  shifted_bits = shifted_value - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input_2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return CONCAT44(input_2,input_1 & ~(0xffffffffU >> (shifted_value - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return CONCAT44(input_2,input_1);\n    }\n    result = calculate_sum_080082d4(input_1,input_2,input_1,input_2,unused_param_2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_value_08009798",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "shifted_bits",
                "uVar2": "shifted_value",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_double_value_thunk_08009990",
            "code": "\nuint calculateDoubleValue_thunk_08009990(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = value4 & 0x7fffffff;\n  if (((tempVar4 | (-value3 | value3) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = value2 & 0x7fffffff, (tempVar5 | (-value1 | value1) >> 0x1f) < 0x7ff00001)) {\n    if ((value4 + 0xc0100000 | value3) == 0) {\n      tempVar4 = calculate_value_0800af78();\n      return tempVar4;\n    }\n    tempVar3 = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n    if ((tempVar5 | value1) == 0) {\n      if (tempVar3 == 2) {\n        value1 = 0x54442d18;\n      }\n      else if (tempVar3 == 3) {\n        value1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((tempVar4 | value3) != 0) {\n        if (tempVar4 == 0x7ff00000) {\n          tempVar3 = tempVar3 - 1;\n          if (tempVar5 == 0x7ff00000) {\n            if (tempVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + tempVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (tempVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + tempVar3 * 8);\n          }\n          return 0;\n        }\n        if (tempVar5 != 0x7ff00000) {\n          tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n          if ((int)(tempVar5 - tempVar4) < 0x3d00000) {\n            if (((int)value4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n              tempVar6 = 0;\n            }\n            else {\n              calculate_improved_double_precision_value_08008894(value1,value2,value3,value4,value4);\n              FUNC_0800b2cc();\n              tempVar6 = calculate_value_0800af78();\n            }\n          }\n          else {\n            tempVar6 = 0x3ff921fb54442d18;\n          }\n          tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n          tempVar4 = (uint)tempVar6;\n          if (tempVar3 == 1) {\n            return tempVar4;\n          }\n          if (tempVar3 == 2) {\n            tempVar6 = calculate_extended_multiplication_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n            tempVar4 = calculate_extended_multiplication_080082d0(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n            return tempVar4;\n          }\n          if (tempVar3 == 0) {\n            return tempVar4;\n          }\n          tempVar6 = calculate_extended_multiplication_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n          tempVar4 = calculate_extended_multiplication_080082d0((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n          return tempVar4;\n        }\n      }\n      if ((int)value2 < 0) {\n        value1 = 0x54442d18;\n      }\n      else {\n        value1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    value1 = calculate_sum_080082d4(value3,value4,value1,value2);\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_double_value_thunk_08009990",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "initialize_calculation_0800981c",
            "code": "\nundefined8 initialize_calculation_0800981c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  int *data_offset_ptr;\n  undefined8 final_result;\n  undefined4 calculation_type;\n  char *calculation_name;\n  undefined4 input_1;\n  undefined4 input_2;\n  undefined4 input_3;\n  undefined4 input_4;\n  undefined4 lower_limit;\n  undefined4 upper_limit;\n  int bit_extraction_result;\n  \n  final_result = calculate_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return final_result;\n  }\n  bit_extraction_result = extract_bit_0800b2d4();\n  if (bit_extraction_result != 0) {\n    return final_result;\n  }\n  result = extract_bit_0800b2d4(input_1,input_2);\n  if (result == 0) {\n    return final_result;\n  }\n  result = extract_bit_0800b2d4(input_3,input_4);\n  if (result == 0) {\n    return final_result;\n  }\n  calculation_type = 3;\n  calculation_name = \"hypot\";\n  input_1 = input_1;\n  input_2 = input_2;\n  input_3 = input_3;\n  input_4 = input_4;\n  if (DAT_20000014 == '\\0') {\n    lower_limit = 0xe0000000;\n    upper_limit = 0x47efffff;\nLAB_080098aa:\n    result = initialize_0800b2e0(&calculation_type);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    lower_limit = 0;\n    upper_limit = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  data_ptr = (undefined4 *)get_data_offset_0800b3dc();\n  *data_ptr = 0x22;\nLAB_08009896:\n  final_result = CONCAT44(upper_limit,lower_limit);\n  if (bit_extraction_result != 0) {\n    data_offset_ptr = (int *)get_data_offset_0800b3dc();\n    final_result = CONCAT44(upper_limit,lower_limit);\n    *data_offset_ptr = bit_extraction_result;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "initialize_calculation_0800981c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "piVar3": "data_offset_ptr",
                "uVar4": "final_result",
                "local_50": "calculation_type",
                "pcStack_4c": "calculation_name",
                "local_48": "input_1",
                "uStack_44": "input_2",
                "local_40": "input_3",
                "uStack_3c": "input_4",
                "local_38": "lower_limit",
                "uStack_34": "upper_limit",
                "local_30": "bit_extraction_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "process_data_080098d0",
            "code": "\nundefined4 processData_080098d0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  char flagValue;\n  undefined4 calculatedValue;\n  int checkResult;\n  undefined4 *dataOffsetPtr;\n  int *dataOffsetIntPtr;\n  undefined4 flag;\n  undefined *charPtr;\n  undefined4 outputParam1;\n  undefined4 outputParam2;\n  undefined4 tempParam1;\n  undefined4 tempParam2;\n  undefined8 resultValue;\n  int checkValue;\n  \n  calculatedValue = calculate_0800a1bc();\n  flagValue = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (checkValue = check_parameters_08008b74(inputParam1,inputParam2,inputParam1,inputParam2), checkValue != 0)) ||\n     (checkResult = is_null_terminated_08008b24(inputParam1,inputParam2,0,0), checkResult == 0)) {\n    return calculatedValue;\n  }\n  flag = 1;\n  charPtr = &DAT_0800be5c;\n  outputParam1 = inputParam1;\n  outputParam2 = inputParam2;\n  tempParam1 = inputParam1;\n  tempParam2 = inputParam2;\n  if (flagValue == '\\0') {\n    resultValue = 0;\nLAB_0800996c:\n    checkResult = initialize_0800b2e0(&flag);\n    if (checkResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    resultValue = calculate_improved_double_precision_value_08008894(0,0,0,0);\n    if (flagValue != '\\x02') goto LAB_0800996c;\n  }\n  dataOffsetPtr = (undefined4 *)get_data_offset_0800b3dc();\n  *dataOffsetPtr = 0x21;\njoined_r0x0800997a:\n  if (checkValue != 0) {\n    dataOffsetIntPtr = (int *)get_data_offset_0800b3dc();\n    *dataOffsetIntPtr = checkValue;\n  }\n  return (undefined4)resultValue;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar2": "calculatedValue",
                "iVar3": "checkResult",
                "puVar4": "dataOffsetPtr",
                "piVar5": "dataOffsetIntPtr",
                "local_50": "flag",
                "local_4c": "charPtr",
                "local_48": "outputParam1",
                "uStack_44": "outputParam2",
                "local_40": "tempParam1",
                "uStack_3c": "tempParam2",
                "cVar1": "flagValue",
                "local_38": "resultValue",
                "local_30": "checkValue"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_value_08009990",
            "code": "\nuint calculate_value_08009990(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  int difference;\n  undefined4 upper_value;\n  uint shift_value;\n  uint masked_value_4;\n  uint masked_value_2;\n  undefined8 result;\n  \n  masked_value_4 = value_4 & 0x7fffffff;\n  if (((masked_value_4 | (-value_3 | value_3) >> 0x1f) < 0x7ff00001) &&\n     (masked_value_2 = value_2 & 0x7fffffff, (masked_value_2 | (-value_1 | value_1) >> 0x1f) < 0x7ff00001)) {\n    if ((value_4 + 0xc0100000 | value_3) == 0) {\n      masked_value_4 = calculate_value_08009990_0800af78();\n      return masked_value_4;\n    }\n    shift_value = (int)value_4 >> 0x1e & 2U | value_2 >> 0x1f;\n    if ((masked_value_2 | value_1) == 0) {\n      if (shift_value == 2) {\n        value_1 = 0x54442d18;\n      }\n      else if (shift_value == 3) {\n        value_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((masked_value_4 | value_3) != 0) {\n        if (masked_value_4 == 0x7ff00000) {\n          shift_value = shift_value - 1;\n          if (masked_value_2 == 0x7ff00000) {\n            if (shift_value < 3) {\n              return *(uint *)(&DAT_0800be68 + shift_value * 8);\n            }\n            return 0x54442d18;\n          }\n          if (shift_value < 3) {\n            return *(uint *)(&DAT_0800be80 + shift_value * 8);\n          }\n          return 0;\n        }\n        if (masked_value_2 != 0x7ff00000) {\n          difference = (int)(masked_value_2 - masked_value_4) >> 0x14;\n          if ((int)(masked_value_2 - masked_value_4) < 0x3d00000) {\n            if (((int)value_4 < 0) && (difference + 0x3c < 0 != signed_carry(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              calculate_improved_double_precision_value_08008894(value_1,value_2,value_3,value_4,value_4);\n              FUNC_0800b2cc();\n              result = calculate_value_08009990_0800af78();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          upper_value = (undefined4)((ulonglong)result >> 0x20);\n          masked_value_4 = (uint)result;\n          if (shift_value == 1) {\n            return masked_value_4;\n          }\n          if (shift_value == 2) {\n            result = calculate_extended_multiplication_080082d0(masked_value_4,upper_value,0x33145c07,0x3ca1a626);\n            masked_value_4 = calculate_extended_multiplication_080082d0(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return masked_value_4;\n          }\n          if (shift_value == 0) {\n            return masked_value_4;\n          }\n          result = calculate_extended_multiplication_080082d0(masked_value_4,upper_value,0x33145c07,0x3ca1a626);\n          masked_value_4 = calculate_extended_multiplication_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return masked_value_4;\n        }\n      }\n      if ((int)value_2 < 0) {\n        value_1 = 0x54442d18;\n      }\n      else {\n        value_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    value_1 = calculate_sum_080082d4(value_3,value_4,value_1,value_2);\n  }\n  return value_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_value_08009990",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "iVar1": "difference",
                "uVar2": "upper_value",
                "uVar3": "shift_value",
                "uVar4": "masked_value_4",
                "uVar5": "masked_value_2",
                "uVar6": "result",
                "SCARRY4": "signed_carry"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_result_08009b24",
            "code": "\nuint calculate_result_08009b24(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  int result_2;\n  uint output_1;\n  int output_2;\n  undefined4 result_3;\n  int result_4;\n  uint max_value;\n  undefined4 val_1;\n  undefined4 val_2;\n  undefined8 calc_result_1;\n  undefined8 calc_result_2;\n  undefined8 calc_result_3;\n  undefined8 calc_result_4;\n  int offset;\n  \n  input_2 = input_2 & 0x7fffffff;\n  input_4 = input_4 & 0x7fffffff;\n  output_1 = input_1;\n  max_value = input_2;\n  if (input_2 < input_4) {\n    output_1 = input_3;\n    input_3 = input_1;\n    max_value = input_4;\n    input_4 = input_2;\n  }\n  if (0x3c00000 < (int)(max_value - input_4)) {\n    output_1 = calculate_sum_080082d4(output_1,max_value,input_3,input_4);\n    return output_1;\n  }\n  if (max_value < 0x5f300001) {\n    offset = 0;\n  }\n  else {\n    if (0x7fefffff < max_value) {\n      if ((max_value & 0xfffff | output_1) != 0) {\n        output_1 = calculate_sum_080082d4(output_1,max_value,input_3,input_4);\n      }\n      if ((input_4 ^ 0x7ff00000 | input_3) != 0) {\n        return output_1;\n      }\n      return input_3;\n    }\n    max_value = max_value + 0xda800000;\n    input_4 = input_4 + 0xda800000;\n    offset = 600;\n  }\n  calc_result_2 = CONCAT44(max_value,output_1);\n  calc_result_1 = CONCAT44(input_4,input_3);\n  if ((int)input_4 < 0x20b00000) {\n    if ((int)input_4 < 0x100000) {\n      if ((input_4 | input_3) == 0) {\n        return output_1;\n      }\n      calc_result_1 = calculate_bitwise_operation_08008640(input_3,input_4,0,0x7fd00000);\n      calc_result_2 = calculate_bitwise_operation_08008640(output_1,max_value,0,0x7fd00000);\n      offset = offset + -0x3fe;\n    }\n    else {\n      max_value = max_value + 0x25800000;\n      calc_result_2 = CONCAT44(max_value,output_1);\n      input_4 = input_4 + 0x25800000;\n      calc_result_1 = CONCAT44(input_4,input_3);\n      offset = offset + -600;\n    }\n  }\n  val_2 = (undefined4)((ulonglong)calc_result_2 >> 0x20);\n  val_1 = (undefined4)calc_result_2;\n  result_4 = (int)((ulonglong)calc_result_1 >> 0x20);\n  result_3 = (undefined4)calc_result_1;\n  calc_result_1 = calculate_extended_multiplication_080082d0(val_1,val_2,result_3,result_4);\n  output_2 = (int)((ulonglong)calc_result_1 >> 0x20);\n  result_1 = (undefined4)calc_result_1;\n  result_2 = is_null_terminated_08008b24(result_3,result_4,result_1,output_2);\n  if (result_2 == 0) {\n    calc_result_1 = calculate_bitwise_operation_08008640(0,input_4,0);\n    calc_result_2 = calculate_bitwise_operation_08008640(result_1,output_2 + -0x80000000,result_1,output_2);\n    calc_result_3 = calculate_sum_080082d4(val_1,val_2,val_1,val_2);\n    calc_result_3 = calculate_extended_multiplication_080082d0((int)calc_result_3,(int)((ulonglong)calc_result_3 >> 0x20),0,max_value + 0x100000);\n    calc_result_3 = calculate_bitwise_operation_08008640((int)calc_result_3,(int)((ulonglong)calc_result_3 >> 0x20),result_3,result_4);\n    calc_result_4 = calculate_extended_multiplication_080082d0(result_3,result_4,0,input_4);\n    calc_result_4 = calculate_bitwise_operation_08008640((int)calc_result_4,(int)((ulonglong)calc_result_4 >> 0x20),0,max_value + 0x100000);\n    calc_result_3 = calculate_sum_080082d4((int)calc_result_3,(int)((ulonglong)calc_result_3 >> 0x20),(int)calc_result_4,\n                          (int)((ulonglong)calc_result_4 >> 0x20));\n    calc_result_2 = calculate_extended_multiplication_080082d0((int)calc_result_2,(int)((ulonglong)calc_result_2 >> 0x20),(int)calc_result_3,\n                          (int)((ulonglong)calc_result_3 >> 0x20));\n    calculate_extended_multiplication_080082d0((int)calc_result_1,(int)((ulonglong)calc_result_1 >> 0x20),(int)calc_result_2,\n                 (int)((ulonglong)calc_result_2 >> 0x20));\n    calc_result_1 = calculate_0800a1bc();\n  }\n  else {\n    calc_result_1 = calculate_bitwise_operation_08008640(0,max_value,0,max_value);\n    calc_result_2 = calculate_bitwise_operation_08008640(result_3,result_4 + -0x80000000,result_3,result_4);\n    calc_result_3 = calculate_sum_080082d4(val_1,val_2,0,max_value);\n    calc_result_4 = calculate_extended_multiplication_080082d0(val_1,val_2,0,max_value);\n    calc_result_3 = calculate_bitwise_operation_08008640((int)calc_result_3,(int)((ulonglong)calc_result_3 >> 0x20),(int)calc_result_4,\n                          (int)((ulonglong)calc_result_4 >> 0x20));\n    calc_result_2 = calculate_extended_multiplication_080082d0((int)calc_result_2,(int)((ulonglong)calc_result_2 >> 0x20),(int)calc_result_3,\n                          (int)((ulonglong)calc_result_3 >> 0x20));\n    calculate_extended_multiplication_080082d0((int)calc_result_1,(int)((ulonglong)calc_result_1 >> 0x20),(int)calc_result_2,\n                 (int)((ulonglong)calc_result_2 >> 0x20));\n    calc_result_1 = calculate_0800a1bc();\n  }\n  output_1 = (uint)calc_result_1;\n  if (offset != 0) {\n    output_1 = calculate_bitwise_operation_08008640(output_1,(int)((ulonglong)calc_result_1 >> 0x20),0,offset * 0x100000 + 0x3ff00000);\n  }\n  return output_1;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "iVar2": "result_2",
                "uVar3": "output_1",
                "iVar4": "output_2",
                "uVar5": "result_3",
                "iVar6": "result_4",
                "uVar7": "max_value",
                "uVar8": "val_1",
                "uVar9": "val_2",
                "uVar10": "calc_result_1",
                "uVar11": "calc_result_2",
                "uVar12": "calc_result_3",
                "uVar13": "calc_result_4",
                "local_3c": "offset"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculateResult_08009d78(undefined4 originalVal,uint paramVal,undefined8 *resultArray)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  uint tempVal;\n  int result;\n  undefined8 tempResult1;\n  undefined8 tempResult2;\n  undefined8 finalResult;\n  undefined4 local1;\n  undefined4 local2;\n  undefined8 local3;\n  undefined8 local4;\n  undefined8 local5;\n  \n  tempVal = paramVal & 0x7fffffff;\n  if (tempVal < 0x3fe921fc) {\n    *(undefined4 *)resultArray = originalVal;\n    *(uint *)((int)resultArray + 4) = paramVal;\n    *(undefined4 *)(resultArray + 1) = 0;\n    *(undefined4 *)((int)resultArray + 0xc) = 0;\n    return 0;\n  }\n  if (tempVal < 0x4002d97c) {\n    if ((int)paramVal < 1) {\n      tempResult1 = calculate_sum_080082d4(originalVal,paramVal,0x54400000,0x3ff921fb);\n      temp1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      result1 = (undefined4)tempResult1;\n      if (tempVal != 0x3ff921fb) {\n        tempResult1 = calculate_sum_080082d4(result1,temp1,0x1a626331,0x3dd0b461);\n        *resultArray = tempResult1;\n        tempResult1 = calculate_extended_multiplication_080082d0(result1,temp1);\n        tempResult1 = calculate_sum_080082d4((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x1a626331,0x3dd0b461);\n        resultArray[1] = tempResult1;\n        return -1;\n      }\n      tempResult1 = calculate_sum_080082d4(result1,temp1,0x1a600000,0x3dd0b461);\n      result1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      tempResult2 = calculate_sum_080082d4((int)tempResult1,result1,0x2e037073,0x3ba3198a);\n      *resultArray = tempResult2;\n      tempResult1 = calculate_extended_multiplication_080082d0((int)tempResult1,result1);\n      tempResult1 = calculate_sum_080082d4((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x2e037073,0x3ba3198a);\n      resultArray[1] = tempResult1;\n      return -1;\n    }\n    tempResult1 = calculate_extended_multiplication_080082d0();\n    temp1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    result1 = (undefined4)tempResult1;\n    if (tempVal != 0x3ff921fb) {\n      tempResult1 = calculate_extended_multiplication_080082d0(result1,temp1,0x1a626331,0x3dd0b461);\n      *resultArray = tempResult1;\n      tempResult1 = calculate_extended_multiplication_080082d0(result1,temp1);\n      tempResult1 = calculate_extended_multiplication_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x1a626331,0x3dd0b461);\n      resultArray[1] = tempResult1;\n      return 1;\n    }\n    tempResult1 = calculate_extended_multiplication_080082d0(result1,temp1,0x1a600000,0x3dd0b461);\n    result1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    tempResult2 = calculate_extended_multiplication_080082d0((int)tempResult1,result1,0x2e037073,0x3ba3198a);\n    *resultArray = tempResult2;\n    tempResult1 = calculate_extended_multiplication_080082d0((int)tempResult1,result1);\n    tempResult1 = calculate_extended_multiplication_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x2e037073,0x3ba3198a);\n    resultArray[1] = tempResult1;\n    return 1;\n  }\n  if (0x413921fb < tempVal) {\n    if (0x7fefffff < tempVal) {\n      tempResult1 = calculate_extended_multiplication_080082d0(originalVal,paramVal,originalVal,paramVal);\n      resultArray[1] = tempResult1;\n      *resultArray = tempResult1;\n      return 0;\n    }\n    result = ((int)tempVal >> 0x14) + -0x416;\n    calculate_unsigned_division_08008ba0();\n    local3 = bitwise_shift_and_concatenate_0800856c();\n    tempResult1 = calculate_extended_multiplication_080082d0(originalVal,tempVal + result * -0x100000,(int)local3,\n                          (int)((ulonglong)local3 >> 0x20));\n    tempResult1 = calculate_bitwise_operation_08008640((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,0x41700000);\n    calculate_unsigned_division_08008ba0();\n    local4 = bitwise_shift_and_concatenate_0800856c();\n    tempResult1 = calculate_extended_multiplication_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n    local5 = calculate_bitwise_operation_08008640((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,0x41700000);\n    is_parameter_valid_08008b10((int)local5,(int)((ulonglong)local5 >> 0x20),0,0);\n    result = calculate_result_0800a5a0(&local3,resultArray,result);\n    if (-1 < (int)paramVal) {\n      return result;\n    }\n    *(int *)((int)resultArray + 4) = *(int *)((int)resultArray + 4) + -0x80000000;\n    *(int *)((int)resultArray + 0xc) = *(int *)((int)resultArray + 0xc) + -0x80000000;\n    return -result;\n  }\n  tempResult1 = FUNC_0800b2cc();\n  temp1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n  tempResult2 = calculate_bitwise_operation_08008640((int)tempResult1,temp1,0x6dc9c883,0x3fe45f30);\n  calculate_sum_080082d4((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,0x3fe00000);\n  result = calculate_unsigned_division_08008ba0();\n  tempResult2 = bitwise_shift_and_concatenate_0800856c();\n  temp2 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n  result1 = (undefined4)tempResult2;\n  tempResult2 = calculate_bitwise_operation_08008640(result1,temp2,0x54400000,0x3ff921fb);\n  tempResult1 = calculate_extended_multiplication_080082d0((int)tempResult1,temp1,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n  temp3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n  temp1 = (undefined4)tempResult1;\n  tempResult2 = calculate_bitwise_operation_08008640(result1,temp2,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == tempVal)) {\n    finalResult = calculate_extended_multiplication_080082d0(temp1,temp3,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    if ((int)((tempVal >> 0x14) - ((uint)((int)((ulonglong)finalResult >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    tempResult2 = calculate_bitwise_operation_08008640(result1,temp2,0x1a600000,0x3dd0b461);\n    temp4 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n    tempResult1 = calculate_extended_multiplication_080082d0(temp1,temp3,(int)tempResult2,temp4);\n    temp5 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    result2 = (undefined4)tempResult1;\n    finalResult = calculate_extended_multiplication_080082d0(temp1,temp3,result2,temp5);\n    tempResult2 = calculate_extended_multiplication_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult2,temp4);\n    finalResult = calculate_bitwise_operation_08008640(result1,temp2,0x2e037073,0x3ba3198a);\n    tempResult2 = calculate_extended_multiplication_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult2,\n                          (int)((ulonglong)tempResult2 >> 0x20));\n    finalResult = calculate_extended_multiplication_080082d0(result2,temp5,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    if ((int)(((int)tempVal >> 0x14) - ((uint)((int)((ulonglong)finalResult >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    tempResult2 = calculate_bitwise_operation_08008640(result1,temp2,0x2e000000,0x3ba3198a);\n    temp1 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n    tempResult1 = calculate_extended_multiplication_080082d0(result2,temp5,(int)tempResult2,temp1);\n    finalResult = calculate_extended_multiplication_080082d0(result2,temp5);\n    tempResult2 = calculate_extended_multiplication_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult2,temp1);\n    finalResult = calculate_bitwise_operation_08008640(result1,temp2,0x252049c1,0x397b839a);\n    tempResult2 = calculate_extended_multiplication_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult2,\n                          (int)((ulonglong)tempResult2 >> 0x20));\n  }\n  finalResult = calculate_extended_multiplication_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                        (int)((ulonglong)tempResult2 >> 0x20));\nLAB_0800a0ce:\n  local2 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n  local1 = (undefined4)tempResult1;\n  *resultArray = finalResult;\n  tempResult1 = calculate_extended_multiplication_080082d0(local1,local2);\n  tempResult1 = calculate_extended_multiplication_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                        (int)((ulonglong)tempResult2 >> 0x20));\n  resultArray[1] = tempResult1;\n  if ((int)paramVal < 0) {\n    *(int *)resultArray = (int)finalResult;\n    *(int *)((int)resultArray + 4) = (int)((ulonglong)finalResult >> 0x20) + -0x80000000;\n    *(int *)(resultArray + 1) = (int)tempResult1;\n    *(int *)((int)resultArray + 0xc) = (int)((ulonglong)tempResult1 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "originalVal",
                "param_2": "paramVal",
                "param_3": "resultArray",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "tempVal",
                "iVar9": "result",
                "uVar10": "tempResult1",
                "uVar11": "tempResult2",
                "uVar12": "finalResult",
                "local_50": "local1",
                "uStack_4c": "local2",
                "local_40": "local3",
                "local_38": "local4",
                "local_30": "local5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_0800a1bc",
            "code": "\nuint calculate_0800a1bc(uint input1,uint input2)\n\n{\n  uint shift;\n  int count;\n  uint mask;\n  undefined4 resultHigh;\n  uint shiftCount;\n  uint shiftMask;\n  uint shiftedInput;\n  uint shiftedResult;\n  uint tempInput;\n  int shiftCounter;\n  uint remainingShifts;\n  uint bitCount;\n  undefined8 result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    result = calculate_0800a1bc_bitwise_operation_08008640(input1,input2,input1,input2);\n    shiftedInput = calculate_0800a1bc_sum_080082d4((int)result,(int)((ulonglong)result >> 0x20),input1,input2);\n    return shiftedInput;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      result = calculate_0800a1bc_extended_multiplication_080082d0(input1,input2,input1);\n      resultHigh = (undefined4)((ulonglong)result >> 0x20);\n      shiftedInput = calculate_0800a1bc_improved_double_precision_value_08008894((int)result,resultHigh,(int)result,resultHigh);\n      return shiftedInput;\n    }\n    do {\n      tempInput = input1;\n      shiftedInput = tempInput >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = tempInput << 0x15;\n    } while (shiftedInput == 0);\n    shift = input2;\n    if (-1 < (int)tempInput) goto LAB_0800a290;\n    bitCount = 0x20;\n    shiftCount = 0xffffffff;\n    tempInput = input1;\n  }\n  else {\n    shift = (int)input2 >> 0x14;\n    shiftedInput = input2;\n    tempInput = input1;\n    if (shift != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    tempInput = 0;\n    bitCount = shiftedInput;\n    do {\n      shiftCount = tempInput;\n      shiftedInput = bitCount << 1;\n      shiftCounter = bitCount << 0xc;\n      tempInput = shiftCount + 1;\n      bitCount = shiftedInput;\n    } while (-1 < shiftCounter);\n    bitCount = 0x20 - tempInput;\n    input2 = shift;\n    tempInput = input1 << (tempInput & 0xff);\n  }\n  shiftedInput = input1 >> (bitCount & 0xff) | shiftedInput;\n  shift = input2 - shiftCount;\nLAB_0800a1da:\n  shiftedInput = shiftedInput & 0xfffff | 0x100000;\n  if (-1 < (int)(shift << 0x1f)) {\n    shiftedInput = shiftedInput * 2 - ((int)tempInput >> 0x1f);\n    tempInput = tempInput << 1;\n  }\n  bitCount = 0;\n  shiftedInput = shiftedInput * 2 - ((int)tempInput >> 0x1f);\n  tempInput = tempInput << 1;\n  shift = 0;\n  shiftCounter = 0x16;\n  shiftCount = 0x200000;\n  do {\n    count = shift + shiftCount;\n    if (count <= (int)shiftedInput) {\n      shiftedInput = shiftedInput - count;\n      shift = count + shiftCount;\n      bitCount = bitCount + shiftCount;\n    }\n    shiftCounter = shiftCounter + -1;\n    shiftedInput = shiftedInput * 2 - ((int)tempInput >> 0x1f);\n    shiftCount = shiftCount >> 1;\n    tempInput = tempInput << 1;\n  } while (shiftCounter != 0);\n  count = 0x20;\n  shiftMask = 0x80000000;\n  shiftCounter = 0;\n  shiftCount = 0;\n  do {\n    mask = shiftMask + shiftCounter;\n    remainingShifts = shift;\n    if ((int)shift < (int)shiftedInput) {\n      if ((int)mask < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(mask + shiftMask)) {\n          remainingShifts = shift + 1;\n        }\n      }\n      shiftedResult = shiftedInput - shift;\n      shift = remainingShifts;\n      if (tempInput < mask) {\n        shiftedResult = shiftedResult - 1;\n      }\nLAB_0800a262:\n      shiftCounter = mask + shiftMask;\n      tempInput = tempInput - mask;\n      shiftCount = shiftCount + shiftMask;\n      shiftedInput = shiftedResult;\n    }\n    else if ((shiftedInput == shift) && (mask <= tempInput)) {\n      if ((int)mask < 0) goto LAB_0800a26a;\n      shiftedResult = 0;\n      shift = shiftedInput;\n      goto LAB_0800a262;\n    }\n    count = count + -1;\n    shiftMask = shiftMask >> 1;\n    shiftedInput = shiftedInput * 2 - ((int)tempInput >> 0x1f);\n    tempInput = tempInput << 1;\n    if (count == 0) {\n      if ((shiftedInput | tempInput) == 0) {\n        shiftCount = shiftCount >> 1;\n      }\n      else if (shiftCount == 0xffffffff) {\n        bitCount = bitCount + 1;\n        shiftCount = 0;\n      }\n      else {\n        shiftCount = shiftCount + 1 >> 1;\n      }\n      if ((bitCount & 1) != 0) {\n        shiftCount = shiftCount | 0x80000000;\n      }\n      return shiftCount;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shift",
                "iVar2": "count",
                "uVar3": "mask",
                "uVar4": "resultHigh",
                "uVar5": "shiftCount",
                "uVar6": "shiftMask",
                "uVar7": "shiftedInput",
                "uVar8": "shiftedResult",
                "uVar9": "tempInput",
                "iVar10": "shiftCounter",
                "uVar11": "remainingShifts",
                "uVar12": "bitCount",
                "uVar13": "result"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_result_0800a348",
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input_param_1,uint input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  int division_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  uint abs_input_param_2;\n  undefined8 tmp_result;\n  undefined8 final_result_low;\n  undefined8 tmp_result_high;\n  undefined4 tmp_var_1;\n  undefined4 tmp_var_2;\n  undefined4 tmp_var_3;\n  undefined4 tmp_var_4;\n  \n  abs_input_param_2 = input_param_2 & 0x7fffffff;\n  if (abs_input_param_2 < 0x3e400000) {\n    division_result = calculate_unsigned_division_08008ba0();\n    if (division_result == 0) {\n      return 0;\n    }\n    tmp_result = calculate_bitwise_operation_08008640(input_param_1,input_param_2,input_param_1,input_param_2);\n    result_high = (undefined4)((ulonglong)tmp_result >> 0x20);\n    result_low = (undefined4)tmp_result;\n    final_result_low = calculate_bitwise_operation_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result_low = calculate_sum_080082d4((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_extended_multiplication_080082d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_sum_080082d4((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_extended_multiplication_080082d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x16c15177,0x3f56c16c);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_sum_080082d4((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x5555554c,0x3fa55555);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n  }\n  else {\n    tmp_result = calculate_bitwise_operation_08008640(input_param_1,input_param_2,input_param_1,input_param_2);\n    result_high = (undefined4)((ulonglong)tmp_result >> 0x20);\n    result_low = (undefined4)tmp_result;\n    final_result_low = calculate_bitwise_operation_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result_low = calculate_sum_080082d4((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_extended_multiplication_080082d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_sum_080082d4((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_extended_multiplication_080082d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x16c15177,0x3f56c16c);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    final_result_low = calculate_sum_080082d4((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x5555554c,0x3fa55555);\n    final_result_low = calculate_bitwise_operation_08008640((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_low,result_high);\n    if (0x3fd33332 < abs_input_param_2) {\n      if (abs_input_param_2 < 0x3fe90001) {\n        division_result = abs_input_param_2 - 0x200000;\n        tmp_result = calculate_extended_multiplication_080082d0(0,0x3ff00000,0,division_result);\n      }\n      else {\n        division_result = 0x3fd20000;\n        tmp_result = 0x3fe7000000000000;\n      }\n      tmp_var_4 = (undefined4)((ulonglong)tmp_result >> 0x20);\n      tmp_var_3 = (undefined4)tmp_result;\n      tmp_result = calculate_bitwise_operation_08008640(result_low,result_high,0,0x3fe00000);\n      tmp_result = calculate_extended_multiplication_080082d0((int)tmp_result,(int)((ulonglong)tmp_result >> 0x20),0,division_result);\n      final_result_low = calculate_bitwise_operation_08008640(result_low,result_high,(int)final_result_low,(int)((ulonglong)final_result_low >> 0x20));\n      tmp_result_high = calculate_bitwise_operation_08008640(input_param_1,input_param_2,input_param_3,input_param_4);\n      final_result_low = calculate_extended_multiplication_080082d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),(int)tmp_result_high,\n                           (int)((ulonglong)tmp_result_high >> 0x20));\n      tmp_result = calculate_extended_multiplication_080082d0((int)tmp_result,(int)((ulonglong)tmp_result >> 0x20),(int)final_result_low,\n                           (int)((ulonglong)final_result_low >> 0x20));\n      result_low = calculate_extended_multiplication_080082d0(tmp_var_3,tmp_var_4,(int)tmp_result,(int)((ulonglong)tmp_result >> 0x20));\n      return result_low;\n    }\n  }\n  tmp_var_2 = (undefined4)((ulonglong)final_result_low >> 0x20);\n  tmp_var_1 = (undefined4)final_result_low;\n  result_low = (undefined4)((ulonglong)tmp_result >> 0x20);\n  final_result_low = calculate_bitwise_operation_08008640((int)tmp_result,result_low,0,0x3fe00000);\n  tmp_result = calculate_bitwise_operation_08008640((int)tmp_result,result_low,tmp_var_1,tmp_var_2);\n  tmp_result_high = calculate_bitwise_operation_08008640(input_param_1,input_param_2,input_param_3,input_param_4);\n  tmp_result = calculate_extended_multiplication_080082d0((int)tmp_result,(int)((ulonglong)tmp_result >> 0x20),(int)tmp_result_high,\n                       (int)((ulonglong)tmp_result_high >> 0x20));\n  tmp_result = calculate_extended_multiplication_080082d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),(int)tmp_result,\n                       (int)((ulonglong)tmp_result >> 0x20));\n  result_low = calculate_extended_multiplication_080082d0(0,0x3ff00000,(int)tmp_result,(int)((ulonglong)tmp_result >> 0x20));\n  return result_low;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "division_result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "abs_input_param_2",
                "uVar5": "tmp_result",
                "uVar6": "final_result_low",
                "uVar7": "tmp_result_high",
                "local_30": "tmp_var_1",
                "uStack_2c": "tmp_var_2",
                "local_28": "tmp_var_3",
                "uStack_24": "tmp_var_4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculateResult_0800a5a0(int input,undefined8 *output,int length,int start,int operation,int values)\n\n{\n  undefined4 *pointer1;\n  uint result;\n  uint temp1;\n  int counter1;\n  uint *pointer2;\n  undefined4 temp2;\n  uint **doublePointer;\n  undefined4 temp3;\n  int counter2;\n  undefined4 *pointer3;\n  undefined4 temp4;\n  uint temp5;\n  uint *pointer4;\n  int counter3;\n  int counter4;\n  undefined8 *pointer16;\n  int counter5;\n  undefined4 *pointer5;\n  undefined8 *pointer19;\n  undefined4 temp8;\n  int temp9;\n  undefined8 *pointer6;\n  undefined4 *pointer7;\n  bool flag;\n  undefined8 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 *register3;\n  int register4;\n  int register5;\n  int register6;\n  uint *register7 [2];\n  uint register8 [20];\n  undefined8 temp6;\n  undefined8 register1;\n  int register2 [38];\n  undefined8 temp7;\n  \n  counter4 = *(int *)(&DAT_0800c060 + operation * 4);\n  counter2 = start + -1;\n  register7[1] = (uint *)output;\n  if (length + 0x14 < 0 == SCARRY4(length,0x14)) {\n    register6 = (length + -3) / 0x18;\n    register5 = (register6 + 1) * -0x18;\n  }\n  else {\n    register5 = -0x18;\n    register6 = 0;\n  }\n  register5 = length + register5;\n  counter5 = register6 - counter2;\n  if (-1 < counter4 + counter2) {\n    temp9 = counter4 + counter2 + 1 + counter5;\n    pointer16 = &temp6;\n    do {\n      while (counter5 < 0) {\n        counter5 = counter5 + 1;\n        *(undefined4 *)pointer16 = 0;\n        *(undefined4 *)((int)pointer16 + 4) = 0;\n        pointer16 = pointer16 + 1;\n        if (counter5 == temp9) goto LAB_0800a626;\n      }\n      temp11 = bitwise_shift_and_concatenate_0800856c(*(undefined4 *)(values + counter5 * 4));\n      counter5 = counter5 + 1;\n      *pointer16 = temp11;\n      pointer16 = pointer16 + 1;\n    } while (counter5 != temp9);\n  }\nLAB_0800a626:\n  pointer3 = (undefined4 *)(input + -8);\n  if (-1 < counter4) {\n    pointer6 = &temp6 + start;\n    counter5 = counter2;\n    pointer16 = &temp7;\n    do {\n      if (counter2 < 0) {\n        temp11 = 0;\n      }\n      else {\n        temp11 = 0;\n        pointer7 = pointer3;\n        pointer19 = pointer6;\n        do {\n          pointer5 = pointer7 + 2;\n          temp10 = calculate_bitwise_operation_08008640(*pointer5,pointer7[3],*(undefined4 *)(pointer19 + -1),\n                                *(undefined4 *)((int)pointer19 + -4));\n          temp11 = calculate_sum_080082d4((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                (int)((ulonglong)temp10 >> 0x20));\n          pointer7 = pointer5;\n          pointer19 = pointer19 + -1;\n        } while (pointer5 != pointer3 + start * 2);\n      }\n      counter5 = counter5 + 1;\n      *pointer16 = temp11;\n      pointer6 = pointer6 + 1;\n      pointer16 = pointer16 + 1;\n    } while (counter5 != counter4 + start);\n  }\n  register7[0] = register8 + counter4 + -1;\n  counter5 = counter4;\n  do {\n    temp11 = CONCAT44(*(undefined4 *)((int)&temp7 + counter5 * 8 + 4),\n                      *(undefined4 *)(&temp7 + counter5));\n    if (0 < counter5) {\n      pointer16 = &temp7 + counter5;\n      pointer2 = register8;\n      do {\n        temp2 = (undefined4)((ulonglong)temp11 >> 0x20);\n        calculate_bitwise_operation_08008640((int)temp11,temp2,0,0x3e700000);\n        calculate_unsigned_division_08008ba0();\n        temp10 = bitwise_shift_and_concatenate_0800856c();\n        temp3 = (undefined4)((ulonglong)temp10 >> 0x20);\n        temp12 = calculate_bitwise_operation_08008640((int)temp10,temp3,0,0x41700000);\n        calculate_extended_multiplication_080082d0((int)temp11,temp2,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n        result = calculate_unsigned_division_08008ba0();\n        pointer6 = pointer16 + -1;\n        temp2 = *(undefined4 *)pointer6;\n        temp4 = *(undefined4 *)((int)pointer16 + -4);\n        *pointer2 = result;\n        temp11 = calculate_sum_080082d4((int)temp10,temp3,temp2,temp4);\n        pointer16 = pointer6;\n        pointer2 = pointer2 + 1;\n      } while (pointer6 != &temp7);\n    }\n    temp11 = calculate_result_0800b2e8((int)temp11,(int)((ulonglong)temp11 >> 0x20),register5);\n    temp3 = (undefined4)((ulonglong)temp11 >> 0x20);\n    calculate_bitwise_operation_08008640((int)temp11,temp3,0,0x3fc00000);\n    temp10 = process_data_080094c0();\n    temp10 = calculate_bitwise_operation_08008640((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,0x40200000);\n    temp11 = calculate_extended_multiplication_080082d0((int)temp11,temp3,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n    result = calculate_unsigned_division_08008ba0();\n    temp10 = bitwise_shift_and_concatenate_0800856c();\n    temp11 = calculate_extended_multiplication_080082d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                          (int)((ulonglong)temp10 >> 0x20));\n    temp2 = (undefined4)((ulonglong)temp11 >> 0x20);\n    temp3 = (undefined4)temp11;\n    if (register5 < 1) {\n      if (register5 == 0) {\n        temp9 = (int)register8[counter5 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      temp9 = validate_and_return_08008b4c(temp3,temp2,0,0x3fe00000);\n      if (temp9 != 0) {\n        result = result + 1;\n        if (counter5 < 1) {\n          temp11 = calculate_extended_multiplication_080082d0(0,0x3ff00000,temp3,temp2);\n          temp9 = 2;\n          goto LAB_0800a7a4;\n        }\n        temp9 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      counter1 = (int)register8[counter5 + -1] >> (0x18U - register5 & 0xff);\n      temp5 = register8[counter5 + -1] - (counter1 << (0x18U - register5 & 0xff));\n      temp9 = (int)temp5 >> (0x17U - register5 & 0xff);\n      register8[counter5 + -1] = temp5;\n      result = result + counter1;\njoined_r0x0800a8b8:\n      if (0 < temp9) {\n        result = result + 1;\n        if (counter5 < 1) {\n          flag = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (register8[0] == 0) {\n            flag = false;\n            if (counter5 != 1) {\n              pointer2 = register8;\n              counter1 = 1;\n              do {\n                pointer2 = pointer2 + 1;\n                if (*pointer2 != 0) {\n                  counter3 = counter1 + 1;\n                  temp5 = *pointer2;\n                  goto LAB_0800a8e2;\n                }\n                counter1 = counter1 + 1;\n              } while (counter1 != counter5);\n              flag = false;\n            }\n          }\n          else {\n            counter3 = 1;\n            counter1 = 0;\n            temp5 = register8[0];\nLAB_0800a8e2:\n            register8[counter1] = 0x1000000 - temp5;\n            if (counter3 < counter5) {\n              temp5 = register8[counter3];\n              pointer2 = register8 + counter3;\n              while( true ) {\n                pointer4 = pointer2 + 1;\n                *pointer2 = 0xffffff - temp5;\n                if (pointer4 == register8 + counter5) break;\n                temp5 = *pointer4;\n                pointer2 = pointer4;\n              }\n            }\n            flag = true;\n          }\n        }\n        if (0 < register5) {\n          if (register5 == 1) {\n            register8[counter5 + -1] = register8[counter5 + -1] & 0x7fffff;\n          }\n          else if (register5 == 2) {\n            register8[counter5 + -1] = register8[counter5 + -1] & 0x3fffff;\n          }\n        }\n        if (temp9 == 2) {\n          temp11 = calculate_extended_multiplication_080082d0(0,0x3ff00000,temp3,temp2);\n          if (flag) {\n            temp10 = calculate_result_0800b2e8(0,0x3ff00000,register5);\n            temp11 = calculate_extended_multiplication_080082d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                  (int)((ulonglong)temp10 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp3 = (undefined4)((ulonglong)temp11 >> 0x20);\n    counter1 = is_parameter_valid_08008b10((int)temp11,temp3,0,0);\n    if (counter1 == 0) {\n      temp11 = calculate_result_0800b2e8((int)temp11,temp3,-register5);\n      temp2 = (undefined4)((ulonglong)temp11 >> 0x20);\n      temp3 = (undefined4)temp11;\n      counter2 = validate_and_return_08008b4c(temp3,temp2,0,0x41700000);\n      if (counter2 == 0) {\n        temp5 = calculate_unsigned_division_08008ba0(temp3,temp2);\n        register8[counter5] = temp5;\n        counter1 = counter5;\n      }\n      else {\n        calculate_bitwise_operation_08008640(temp3,temp2,0,0x3e700000);\n        temp5 = calculate_unsigned_division_08008ba0();\n        temp11 = bitwise_shift_and_concatenate_0800856c();\n        temp11 = calculate_bitwise_operation_08008640((int)temp11,(int)((ulonglong)temp11 >> 0x20),0,0x41700000);\n        calculate_extended_multiplication_080082d0(temp3,temp2,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n        temp1 = calculate_unsigned_division_08008ba0();\n        register5 = register5 + 0x18;\n        register8[counter5] = temp1;\n        register8[counter5 + 1] = temp5;\n        counter1 = counter5 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    counter1 = counter5 + -1;\n    if (counter4 <= counter1) {\n      temp5 = 0;\n      pointer2 = register8 + counter5 + 0x3fffffff;\n      do {\n        pointer4 = pointer2 + -1;\n        temp5 = temp5 | *pointer2;\n        pointer2 = pointer4;\n      } while (pointer4 != register7[0]);\n      if (temp5 != 0) break;\n    }\n    if (register8[counter4 + -1] == 0) {\n      register4 = 1;\n      doublePointer = register7 + counter4;\n      do {\n        pointer2 = *doublePointer;\n        register4 = register4 + 1;\n        doublePointer = doublePointer + -1;\n      } while (pointer2 == (uint *)0x0);\n      register4 = counter5 + register4;\n    }\n    else {\n      register4 = counter5 + 1;\n    }\n    temp9 = counter5 + 1;\n    pointer7 = (undefined4 *)(values + (temp9 + register6 + 0x3fffffff) * 4);\n    pointer16 = &temp6 + counter5 + start;\n    register3 = &temp7 + temp9;\n    do {\n      pointer7 = pointer7 + 1;\n      temp11 = bitwise_shift_and_concatenate_0800856c(*pointer7);\n      *pointer16 = temp11;\n      pointer6 = pointer16 + 1;\n      if (counter2 < 0) {\n        temp10 = 0;\n      }\n      else {\n        temp10 = 0;\n        pointer5 = pointer3;\n        while( true ) {\n          pointer16 = pointer16 + -1;\n          pointer1 = pointer5 + 2;\n          temp11 = calculate_bitwise_operation_08008640((int)temp11,(int)((ulonglong)temp11 >> 0x20),*pointer1,pointer5[3]);\n          temp10 = calculate_sum_080082d4((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                (int)((ulonglong)temp11 >> 0x20));\n          if (pointer1 == pointer3 + start * 2) break;\n          temp11 = *pointer16;\n          pointer5 = pointer1;\n        }\n      }\n      *register3 = temp10;\n      temp9 = temp9 + 1;\n      counter5 = register4;\n      pointer16 = pointer6;\n      register3 = register3 + 1;\n    } while (temp9 <= register4);\n  } while( true );\n  register5 = register5 + -0x18;\n  if (register8[counter1] == 0) {\n    pointer2 = register8 + counter5 + 0x3ffffffe;\n    do {\n      temp5 = *pointer2;\n      counter1 = counter1 + -1;\n      register5 = register5 + -0x18;\n      pointer2 = pointer2 + -1;\n    } while (temp5 == 0);\n  }\nLAB_0800a9f6:\n  temp11 = calculate_result_0800b2e8(0,0x3ff00000,register5);\n  if (counter1 < 0) {\n    if (2 < operation) {\n      if (operation == 3) {\n        temp11 = 0;\nLAB_0800abe4:\n        if (temp9 == 0) {\n          *register7[1] = (undefined4)register1;\n          *(int *)((int)register7[1] + 4) = register1._4_4_;\n          *(undefined8 *)((int)register7[1] + 0x10) = temp11;\n          *(int *)((int)register7[1] + 8) = register2[0];\n          *(int *)((int)register7[1] + 0xc) = register2[1];\n          return result & 7;\n        }\n        *(int *)((int)register7[1] + 0x10) = (int)temp11;\n        *(int *)((int)register7[1] + 8) = register2[0];\n        *(int *)((int)register7[1] + 0x14) = (int)((ulonglong)temp11 >> 0x20) + -0x80000000;\n        *(int *)((int)register7[1] + 4) = register1._4_4_ + -0x80000000;\n        *(int *)((int)register7[1] + 0xc) = register2[1] + -0x80000000;\n        *register7[1] = (undefined4)register1;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation < 1) {\n      if (operation != 0) goto LAB_0800ab0e;\n      temp11 = 0;\nLAB_0800aafc:\n      counter2 = (int)((ulonglong)temp11 >> 0x20);\n      if (temp9 != 0) {\n        counter2 = counter2 + -0x80000000;\n      }\n      *register7[1] = (int)temp11;\n      *(int *)((int)register7[1] + 4) = counter2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    temp11 = 0;\n  }\n  else {\n    pointer6 = &temp7 + counter1;\n    pointer2 = register8 + counter1 + 1;\n    pointer16 = &temp7 + counter1 + 1;\n    do {\n      temp3 = (undefined4)((ulonglong)temp11 >> 0x20);\n      pointer2 = pointer2 + -1;\n      temp10 = bitwise_shift_and_concatenate_0800856c(*pointer2);\n      temp10 = calculate_bitwise_operation_08008640((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,temp3);\n      pointer16 = pointer16 + -1;\n      *pointer16 = temp10;\n      temp11 = calculate_bitwise_operation_08008640((int)temp11,temp3,0,0x3e700000);\n    } while (pointer2 != register8);\n    counter2 = 0;\n    do {\n      if (counter4 < 0) {\n        temp11 = 0;\n      }\n      else {\n        temp3 = 0x40000000;\n        temp2 = 0x3ff921fb;\n        temp11 = 0;\n        counter5 = 0;\n        pointer16 = pointer6;\n        pointer3 = &DAT_0800c028;\n        while( true ) {\n          temp10 = calculate_bitwise_operation_08008640(*(undefined4 *)pointer16,*(undefined4 *)((int)pointer16 + 4),temp3,temp2\n                               );\n          temp11 = calculate_sum_080082d4((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                (int)((ulonglong)temp10 >> 0x20));\n          counter5 = counter5 + 1;\n          if ((counter4 < counter5) || (counter2 < counter5)) break;\n          temp3 = *pointer3;\n          temp2 = pointer3[1];\n          pointer16 = pointer16 + 1;\n          pointer3 = pointer3 + 2;\n        }\n      }\n      flag = counter2 != counter1;\n      *(int *)(&register1 + counter2) = (int)temp11;\n      *(int *)((int)&register1 + (counter2 * 2 + 1) * 4) = (int)((ulonglong)temp11 >> 0x20);\n      pointer6 = pointer6 + -1;\n      counter2 = counter2 + 1;\n    } while (flag);\n    if (2 < operation) {\n      if (operation == 3) {\n        if (counter1 != 0) {\n          pointer16 = &register1 + counter1;\n          temp11 = CONCAT44(*(undefined4 *)((int)&register1 + (counter1 * 2 + 1) * 4),\n                            *(undefined4 *)pointer16);\n          do {\n            temp2 = (undefined4)((ulonglong)temp11 >> 0x20);\n            temp3 = (undefined4)temp11;\n            temp4 = *(undefined4 *)(pointer16 + -1);\n            temp8 = *(undefined4 *)((int)pointer16 + -4);\n            temp11 = calculate_sum_080082d4(temp3,temp2,temp4,temp8);\n            temp10 = calculate_extended_multiplication_080082d0(temp4,temp8,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n            temp10 = calculate_sum_080082d4((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp3,temp2);\n            *pointer16 = temp10;\n            pointer16 = pointer16 + -1;\n            *pointer16 = temp11;\n          } while (&register1 != pointer16);\n          if (1 < counter1) {\n            pointer16 = &register1 + counter1;\n            temp11 = CONCAT44(*(undefined4 *)((int)&register1 + (counter1 * 2 + 1) * 4),\n                              *(undefined4 *)pointer16);\n            do {\n              temp2 = (undefined4)((ulonglong)temp11 >> 0x20);\n              temp3 = (undefined4)temp11;\n              temp4 = *(undefined4 *)(pointer16 + -1);\n              temp8 = *(undefined4 *)((int)pointer16 + -4);\n              temp11 = calculate_sum_080082d4(temp3,temp2,temp4,temp8);\n              temp10 = calculate_extended_multiplication_080082d0(temp4,temp8,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n              temp10 = calculate_sum_080082d4((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp3,temp2);\n              *pointer16 = temp10;\n              pointer16 = pointer16 + -1;\n              *pointer16 = temp11;\n            } while (&register1 + 1 != pointer16);\n            temp11 = 0;\n            pointer16 = &register1 + counter1 + 1;\n            do {\n              pointer6 = pointer16 + -1;\n              temp11 = calculate_sum_080082d4((int)temp11,(int)((ulonglong)temp11 >> 0x20),\n                                    *(undefined4 *)pointer6,*(undefined4 *)((int)pointer16 + -4));\n              pointer16 = pointer6;\n            } while (&register1 + 2 != pointer6);\n            goto LAB_0800abe4;\n          }\n        }\n        temp11 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation < 1) {\n      if (operation != 0) goto LAB_0800ab0e;\n      temp11 = 0;\n      pointer16 = &register1 + counter1 + 1;\n      do {\n        pointer6 = pointer16 + -1;\n        temp11 = calculate_sum_080082d4((int)temp11,(int)((ulonglong)temp11 >> 0x20),*(undefined4 *)pointer6,\n                              *(undefined4 *)((int)pointer16 + -4));\n        pointer16 = pointer6;\n      } while (&register1 != pointer6);\n      goto LAB_0800aafc;\n    }\n    temp11 = 0;\n    pointer16 = &register1 + counter1 + 1;\n    do {\n      pointer6 = pointer16 + -1;\n      temp11 = calculate_sum_080082d4((int)temp11,(int)((ulonglong)temp11 >> 0x20),*(undefined4 *)pointer6,\n                            *(undefined4 *)((int)pointer16 + -4));\n      pointer16 = pointer6;\n    } while (&register1 != pointer6);\n  }\n  counter2 = (int)((ulonglong)temp11 >> 0x20);\n  temp3 = (undefined4)temp11;\n  if (temp9 == 0) {\n    *(undefined8 *)register7[1] = temp11;\n    temp11 = calculate_extended_multiplication_080082d0((undefined4)register1,register1._4_4_,temp3,counter2);\n    if (counter1 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    counter2 = 1;\n    pointer16 = &register1;\n    do {\n      temp11 = calculate_sum_080082d4((int)temp11,(int)((ulonglong)temp11 >> 0x20),\n                            *(undefined4 *)(pointer16 + 1),*(undefined4 *)((int)pointer16 + 0xc));\n      counter2 = counter2 + 1;\n      pointer16 = pointer16 + 1;\n    } while (counter2 <= counter1);\n    if (temp9 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *register7[1] = temp3;\n    *(int *)((int)register7[1] + 4) = counter2 + -0x80000000;\n    temp11 = calculate_extended_multiplication_080082d0((undefined4)register1,register1._4_4_,temp3,counter2);\n    if (0 < counter1) goto LAB_0800ad04;\n  }\n  temp11 = CONCAT44((int)((ulonglong)temp11 >> 0x20) + -0x80000000,(int)temp11);\nLAB_0800ad26:\n  *(undefined8 *)((int)register7[1] + 8) = temp11;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "param_1": "input",
                "param_2": "output",
                "param_3": "length",
                "param_4": "start",
                "param_5": "operation",
                "param_6": "values",
                "puVar1": "pointer1",
                "uVar2": "result",
                "uVar3": "temp1",
                "iVar4": "counter1",
                "puVar5": "pointer2",
                "uVar6": "temp2",
                "ppuVar7": "doublePointer",
                "uVar8": "temp3",
                "iVar9": "counter2",
                "puVar10": "pointer3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "puVar13": "pointer4",
                "iVar14": "counter3",
                "iVar15": "counter4",
                "uStack_208": "temp6",
                "local_168": "register1",
                "local_160": "register2",
                "uStack_c8": "temp7",
                "iVar17": "counter5",
                "puVar18": "pointer5",
                "uVar20": "temp8",
                "iVar21": "temp9",
                "puVar22": "pointer6",
                "puVar23": "pointer7",
                "bVar24": "flag",
                "uVar25": "temp10",
                "uVar26": "temp11",
                "uVar27": "temp12",
                "local_284": "register3",
                "local_280": "register4",
                "local_270": "register5",
                "local_26c": "register6",
                "local_260": "register7",
                "local_258": "register8"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_result_0800adf0",
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 input_data,uint param_value,undefined4 operand_1,undefined4 operand_2,int is_condition_met)\n\n{\n  int division_result;\n  undefined4 bitwise_res_1;\n  undefined4 bitwise_res_2;\n  undefined4 bitwise_res_3;\n  undefined4 bitwise_res_4;\n  undefined4 bitwise_res_5;\n  undefined8 result;\n  undefined8 uVar8;\n  \n  if (((param_value & 0x7fffffff) < 0x3e400000) && (division_result = calculate_unsigned_division_08008ba0(), division_result == 0)) {\n    return input_data;\n  }\n  result = calculate_bitwise_operation_08008640(input_data,param_value,input_data);\n  bitwise_res_3 = (undefined4)((ulonglong)result >> 0x20);\n  bitwise_res_2 = (undefined4)result;\n  result = calculate_bitwise_operation_08008640(input_data,param_value,bitwise_res_2,bitwise_res_3);\n  bitwise_res_4 = (undefined4)((ulonglong)result >> 0x20);\n  bitwise_res_1 = (undefined4)result;\n  result = calculate_bitwise_operation_08008640(bitwise_res_2,bitwise_res_3,0x5acfd57c,0x3de5d93a);\n  result = calculate_extended_multiplication_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  result = calculate_bitwise_operation_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_res_2,bitwise_res_3);\n  result = calculate_sum_080082d4((int)result,(int)((ulonglong)result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  result = calculate_bitwise_operation_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_res_2,bitwise_res_3);\n  result = calculate_extended_multiplication_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x19c161d5,0x3f2a01a0);\n  result = calculate_bitwise_operation_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_res_2,bitwise_res_3);\n  result = calculate_sum_080082d4((int)result,(int)((ulonglong)result >> 0x20),0x1110f8a6,0x3f811111);\n  bitwise_res_5 = (undefined4)((ulonglong)result >> 0x20);\n  if (is_condition_met != 0) {\n    uVar8 = calculate_bitwise_operation_08008640(operand_1,operand_2,0,0x3fe00000);\n    result = calculate_bitwise_operation_08008640(bitwise_res_1,bitwise_res_4,(int)result,bitwise_res_5);\n    result = calculate_extended_multiplication_080082d0((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),(int)result,\n                         (int)((ulonglong)result >> 0x20));\n    result = calculate_bitwise_operation_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_res_2,bitwise_res_3);\n    result = calculate_extended_multiplication_080082d0((int)result,(int)((ulonglong)result >> 0x20),operand_1,operand_2);\n    uVar8 = calculate_bitwise_operation_08008640(bitwise_res_1,bitwise_res_4,0x55555549,0x3fc55555);\n    result = calculate_sum_080082d4((int)result,(int)((ulonglong)result >> 0x20),(int)uVar8,\n                         (int)((ulonglong)uVar8 >> 0x20));\n    bitwise_res_2 = calculate_extended_multiplication_080082d0(input_data,param_value,(int)result,(int)((ulonglong)result >> 0x20));\n    return bitwise_res_2;\n  }\n  result = calculate_bitwise_operation_08008640(bitwise_res_2,bitwise_res_3,(int)result,bitwise_res_5);\n  result = calculate_extended_multiplication_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x55555549,0x3fc55555);\n  result = calculate_bitwise_operation_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_res_1,bitwise_res_4);\n  bitwise_res_2 = calculate_sum_080082d4((int)result,(int)((ulonglong)result >> 0x20),input_data,param_value);\n  return bitwise_res_2;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "input_data",
                "param_2": "param_value",
                "param_3": "operand_1",
                "param_4": "operand_2",
                "param_5": "is_condition_met",
                "iVar1": "division_result",
                "uVar2": "bitwise_res_1",
                "uVar3": "bitwise_res_2",
                "uVar4": "bitwise_res_3",
                "uVar5": "bitwise_res_4",
                "uVar6": "bitwise_res_5",
                "uVar7": "result"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_value_0800af78",
            "code": "\nint calculate_value_0800af78(int input_1,uint input_2)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  int output;\n  undefined4 temp_1;\n  uint temp_2;\n  undefined8 temp_3;\n  undefined8 temp_4;\n  undefined4 temp_5;\n  \n  temp_3 = CONCAT44(input_2,input_1);\n  temp_2 = input_2 & 0x7fffffff;\n  if (temp_2 < 0x44100000) {\n    if (temp_2 < 0x3fdc0000) {\n      if (temp_2 < 0x3e200000) {\n        temp_4 = calculate_sum_080082d4(input_1,input_2,0x8800759c,0x7e37e43c);\n        output = check_if_c_string_empty_08008b60((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0,0x3ff00000);\n        if (output != 0) {\n          return input_1;\n        }\n      }\n      output = -1;\n    }\n    else {\n      temp_3 = FUNC_0800b2cc();\n      result_4 = (undefined4)((ulonglong)temp_3 >> 0x20);\n      result_1 = (undefined4)temp_3;\n      if (temp_2 < 0x3ff30000) {\n        if (temp_2 < 0x3fe60000) {\n          temp_3 = calculate_sum_080082d4(result_1,result_4,result_1,result_4);\n          temp_3 = calculate_extended_multiplication_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0,0x3ff00000);\n          temp_4 = calculate_sum_080082d4(result_1,result_4,0,0x40000000);\n          temp_3 = calculate_improved_double_precision_value_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                               (int)((ulonglong)temp_4 >> 0x20));\n          output = 0;\n        }\n        else {\n          temp_3 = calculate_extended_multiplication_080082d0(result_1,result_4,0,0x3ff00000);\n          temp_4 = calculate_sum_080082d4(result_1,result_4,0,0x3ff00000);\n          temp_3 = calculate_improved_double_precision_value_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                               (int)((ulonglong)temp_4 >> 0x20));\n          output = 1;\n        }\n      }\n      else if (temp_2 < 0x40038000) {\n        temp_3 = calculate_extended_multiplication_080082d0(result_1,result_4,0,0x3ff80000);\n        temp_4 = calculate_bitwise_operation_08008640(result_1,result_4,0,0x3ff80000);\n        temp_4 = calculate_sum_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0,0x3ff00000);\n        temp_3 = calculate_improved_double_precision_value_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                             (int)((ulonglong)temp_4 >> 0x20));\n        output = 2;\n      }\n      else {\n        temp_3 = calculate_improved_double_precision_value_08008894(0,0xbff00000,result_1,result_4);\n        output = 3;\n      }\n    }\n    temp_5 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_1 = (undefined4)temp_3;\n    temp_3 = calculate_bitwise_operation_08008640(temp_1,temp_5,temp_1);\n    result_2 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    result_1 = (undefined4)temp_3;\n    temp_3 = calculate_bitwise_operation_08008640(result_1,result_2,result_1,result_2);\n    result_3 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    result_4 = (undefined4)temp_3;\n    temp_3 = calculate_bitwise_operation_08008640(result_4,result_3,0xe322da11,0x3f90ad3a);\n    temp_3 = calculate_sum_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_3 = calculate_bitwise_operation_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_sum_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_3 = calculate_bitwise_operation_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_sum_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_3 = calculate_bitwise_operation_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_sum_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x920083ff,0x3fc24924);\n    temp_3 = calculate_bitwise_operation_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_sum_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x5555550d,0x3fd55555);\n    temp_3 = calculate_bitwise_operation_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_1,result_2);\n    result_1 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_4 = calculate_bitwise_operation_08008640(result_4,result_3,0x2c6a6c2f,0xbfa2b444);\n    temp_4 = calculate_extended_multiplication_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_4 = calculate_bitwise_operation_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = calculate_extended_multiplication_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_4 = calculate_bitwise_operation_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = calculate_extended_multiplication_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_4 = calculate_bitwise_operation_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = calculate_extended_multiplication_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_4 = calculate_bitwise_operation_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    result_4 = (undefined4)((ulonglong)temp_4 >> 0x20);\n    if (output == -1) {\n      temp_3 = calculate_sum_080082d4((int)temp_3,result_1,(int)temp_4,result_4);\n      temp_3 = calculate_bitwise_operation_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,temp_5);\n      output = calculate_extended_multiplication_080082d0(temp_1,temp_5,(int)temp_3,(int)((ulonglong)temp_3 >> 0x20));\n      return output;\n    }\n    temp_3 = calculate_sum_080082d4((int)temp_3,result_1,(int)temp_4,result_4);\n    temp_3 = calculate_bitwise_operation_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,temp_5);\n    temp_3 = calculate_extended_multiplication_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + output * 8),\n                         *(undefined4 *)(&UNK_0800c094 + output * 8));\n    temp_3 = calculate_extended_multiplication_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,temp_5);\n    output = calculate_extended_multiplication_080082d0(*(undefined4 *)(&UNK_0800c070 + output * 8),\n                         *(undefined4 *)(&UNK_0800c074 + output * 8),(int)temp_3,\n                         (int)((ulonglong)temp_3 >> 0x20));\n    if ((int)input_2 < 0) {\n      return output;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp_2) || ((temp_2 == 0x7ff00000 && (input_1 != 0)))) {\n      output = calculate_sum_080082d4(input_1,input_2,input_1);\n      return output;\n    }\n    output = 0x54442d18;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_value_0800af78",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "iVar5": "output",
                "uVar6": "temp_1",
                "uVar7": "temp_2",
                "uVar8": "temp_3",
                "uVar9": "temp_4",
                "local_2c": "temp_5"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "extract_bit_0800b2d4",
            "code": "\nuint extract_bit_0800b2d4(undefined4 input_value,uint bit_mask)\n\n{\n  return (bit_mask | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "extract_bit_0800b2d4",
                "param_1": "input_value",
                "param_2": "bit_mask"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nundefined4 initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input_1,uint input_2,int offset,undefined4 constant)\n\n{\n  uint shifted_input;\n  int sum;\n  uint high_bits;\n  undefined8 combined_input;\n  \n  combined_input = CONCAT44(input_2,input_1);\n  shifted_input = (input_2 << 1) >> 0x15;\n  if (shifted_input == 0) {\n    if ((input_1 | input_2 & 0x7fffffff) == 0) {\n      return input_1;\n    }\n    combined_input = calculate_bitwise_operation_08008640(input_1,input_2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_input = ((uint)((int)((ulonglong)combined_input >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input == 0x7ff) {\n    shifted_input = calculate_sum_080082d4(input_1,input_2,input_1,input_2,constant);\n    return shifted_input;\n  }\n  high_bits = (uint)((ulonglong)combined_input >> 0x20);\n  sum = shifted_input + offset;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)combined_input;\n    }\n    if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n      shifted_input = calculate_bitwise_operation_08008640((uint)combined_input,high_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input;\n    }\n    if (offset < 0xc351) {\n      combined_input = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input = calculate_bitwise_operation_08008640((int)combined_input,(int)((ulonglong)combined_input >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input;\n    }\n  }\n  shifted_input = calculate_bitwise_operation_08008640(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shifted_input",
                "iVar2": "sum",
                "uVar3": "high_bits",
                "uVar4": "combined_input"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_data_offset_0800b3dc",
            "code": "\nundefined4 get_data_offset_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_data_offset_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_function_set_twice_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeFunctionSetTwice_0800b3e8(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  FUNC_0800b5b0();\n  iterationCount = 0;\n  functionPointerArray = (code **)&DAT_0800c0b4;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_function_set_twice_0800b3e8",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_with_0800b430",
            "code": "\nvoid fillMemoryWith_0800b430(undefined4 *buffer,undefined value,uint length)\n\n{\n  undefined4 *currentPtr;\n  undefined4 *nextPtr;\n  uint remainingLength;\n  undefined4 combinedValue;\n  bool isLengthZero;\n  \n  if (((uint)buffer & 3) != 0) {\n    remainingLength = length - 1;\n    currentPtr = buffer;\n    if (length == 0) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)currentPtr + 1);\n      *(undefined *)currentPtr = value;\n      length = remainingLength;\n      if (((uint)buffer & 3) == 0) break;\n      isLengthZero = remainingLength == 0;\n      remainingLength = remainingLength - 1;\n      currentPtr = buffer;\n      if (isLengthZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    combinedValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < length) {\n      currentPtr = buffer + 4;\n      do {\n        currentPtr[-4] = combinedValue;\n        currentPtr[-3] = combinedValue;\n        currentPtr[-2] = combinedValue;\n        currentPtr[-1] = combinedValue;\n        currentPtr = currentPtr + 4;\n      } while (currentPtr != (undefined4 *)((int)buffer + (length - 0x10 & 0xfffffff0) + 0x20));\n      remainingLength = length & 0xc;\n      buffer = buffer + ((length - 0x10 >> 4) + 1) * 4;\n      length = length & 0xf;\n      if (remainingLength == 0) goto joined_r0x0800b4a8;\n    }\n    currentPtr = (undefined4 *)((length - 4 & 0xfffffffc) + 4 + (int)buffer);\n    do {\n      nextPtr = buffer + 1;\n      *buffer = combinedValue;\n      buffer = nextPtr;\n    } while (currentPtr != nextPtr);\n    length = length & 3;\n    buffer = currentPtr;\n  }\njoined_r0x0800b4a8:\n  if (length != 0) {\n    currentPtr = buffer;\n    do {\n      nextPtr = (undefined4 *)((int)currentPtr + 1);\n      *(undefined *)currentPtr = value;\n      currentPtr = nextPtr;\n    } while ((undefined4 *)(length + (int)buffer) != nextPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_with_0800b430",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "currentPtr",
                "puVar2": "nextPtr",
                "uVar3": "remainingLength",
                "uVar4": "combinedValue",
                "bVar5": "isLengthZero"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int inputValue,undefined4 newValue,undefined4 dataValue,undefined4 extraData)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint currentSize;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  currentSize = *(uint *)(DAT_20000168 + 4);\n  if ((int)currentSize < 0x20) {\n    if (inputValue != 0) {\n      *(undefined4 *)(DAT_20000168 + currentSize * 4 + 0x88) = dataValue;\n      bitMask = 1 << (currentSize & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + currentSize * 4 + 0x108) = extraData;\n      if (inputValue == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    returnValue = DAT_20000448;\n    *(uint *)(dataPtr + 4) = currentSize + 1;\n    *(undefined4 *)(dataPtr + (currentSize + 2) * 4) = newValue;\n    FUNC_0800b520(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "inputValue",
                "param_2": "newValue",
                "param_3": "dataValue",
                "param_4": "extraData",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "currentSize"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 186342,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}