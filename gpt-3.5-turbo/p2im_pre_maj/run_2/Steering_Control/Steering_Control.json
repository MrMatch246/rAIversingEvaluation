{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "perform_interpolation_00080164",
            "code": "\nvoid performInterpolation_00080164(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  interpolation_calculation_000806f8(&DAT_200708e8,0x5a);\n  interpolation_calculation_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "perform_interpolation_00080164",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_system_000801e0",
            "code": "\nundefined8 initializeSystem_000801e0(undefined4 input1,undefined4 input2,undefined4 param3,undefined4 param4)\n\n{\n  updateBitMask(&DAT_20070be8,0xe100,param3,param4,param4);\n  updateParameterValue(0xd,1);\n  updateParameterValue(6,1);\n  updateParameterValue(0x39,0);\n  updateParameterValue(4,0);\n  updateParameterValue(3,0);\n  updateParameterValue(2,0);\n  updateParameter(&DAT_200708d4,5);\n  updateParameter(&DAT_200708e8,6);\n  performInterpolation();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "update_bit_mask_000813dc": "updateBitMask",
                "update_parameter_value_00080f0c": "updateParameterValue",
                "update_parameter_000806a0": "updateParameter",
                "perform_interpolation_00080164": "performInterpolation"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_mode_switch_00080250",
            "code": "\nvoid controlModeSwitch_00080250(void)\n\n{\n  undefined4 result;\n  int difference;\n  undefined *bufferPtr;\n  undefined buffer [12];\n  \n  DAT_200708c0 = calculateResult(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  update_parameter_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        performInterpolation2();\n        calculateSum2(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      result = calculateResult(3,1,20000);\n      DAT_200708d8 = calculateInterpolation(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculateInterpolation(result,1000,2000,0x28,0x96);\n      while (difference = calculateDifference2(&DAT_20070be8), 0 < difference) {\n        extractByte2(&DAT_20070be8);\n        processParam(&DAT_20070be8,DAT_200708d8,10);\n        processData(&DAT_20070be8,&DAT_00084b13);\n        addProcessedNumbers(&DAT_20070be8,DAT_200708ec,10);\n      }\n      interpolationCalculation(&DAT_200708e8,DAT_200708ec);\n      interpolationCalculation(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        performInterpolation2();\n        calculateSum2(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      difference = calculateDifference2(&DAT_20070be8);\n      if (0 < difference) {\n        processAndCopyStrings(buffer,&DAT_20070be8,0x2c);\n        checkAndUpdateParameters(&DAT_200708dc,buffer);\n        reorderRelocations(buffer);\n        processAndCopyStrings(buffer,&DAT_20070be8,10);\n        checkAndUpdateParameters(&DAT_200708c8,buffer);\n        reorderRelocations(buffer);\n        extractByte2(&DAT_20070be8);\n        difference = checkInputValidity(&DAT_200708dc,\"steer\");\n        if (difference == 0) goto LAB_0008039c;\n        result = parseInteger(&DAT_200708c8);\n        bufferPtr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    performInterpolation2();\n    calculateSum2(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  difference = checkInputValidity(&DAT_200708dc,\"motor\");\n  if (difference != 0) {\n    result = parseInteger(&DAT_200708c8);\n    bufferPtr = &DAT_200708e8;\nLAB_000803b2:\n    interpolationCalculation(bufferPtr,result);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_mode_switch_00080250",
                "uVar1": "result",
                "iVar2": "difference",
                "puVar3": "bufferPtr",
                "auStack_1c": "buffer",
                "calculate_result_00081624": "calculateResult",
                "perform_interpolation_00080164": "performInterpolation2",
                "calculate_sum_000810e8": "calculateSum2",
                "calculate_interpolation_0008145c": "calculateInterpolation",
                "calculate_difference_00081248": "calculateDifference2",
                "extract_byte_from_buffer_00081276": "extractByte2",
                "process_param_thunk_0008113a": "processParam",
                "process_data_000810c4": "processData",
                "add_processed_numbers_0008117a": "addProcessedNumbers",
                "interpolation_calculation_000806f8": "interpolationCalculation",
                "process_and_copy_strings_00081214": "processAndCopyStrings",
                "check_and_update_parameters_00081560": "checkAndUpdateParameters",
                "reorder_relocations_00081472": "reorderRelocations",
                "check_input_validity_000815b8": "checkInputValidity",
                "parse_integer_000815de": "parseInteger"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_tc_channel_000803fc",
            "code": "\nvoid initializeTCChannel_000803fc(int channelNumber,uint paramValue,undefined4 maskValue,uint bitPosition)\n\n{\n  undefined4 temporaryRegister;\n  undefined4 linkRegister;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(paramValue,channelNumber);\n  check_and_update_bit_mask_00080aa8(maskValue);\n  configure_tc_channel_00080b2c(channelNumber,paramValue,0xc002);\n  write_to_memory_00080b90(channelNumber,paramValue,0xa41);\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  *(undefined4 *)(channelNumber + paramValue * 0x40 + 0x24) = 4;\n  if (2 < paramValue) {\n    combinedParams = handle_assertion_failure_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         temporaryRegister,linkRegister);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "param_1": "channelNumber",
                "param_2": "paramValue",
                "param_3": "maskValue",
                "param_4": "bitPosition",
                "unaff_r4": "temporaryRegister",
                "in_lr": "linkRegister",
                "uVar1": "combinedParams"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid updateData_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int offset2;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    offset2 = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + offset2 < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset2) * 8] << 0x19) < 0\n       )) {\n      update_parameter_00081014((&DAT_200708f8)[(offset2 + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  offset2 = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + offset2 < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + offset2) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset2) * 8] << 0x19\n                  )) {\n      return;\n    }\n    update_parameter_00081014((&DAT_200708f8)[(offset2 + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit",
                "iVar2": "offset2"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_param_with_offset_000805a8",
            "code": "\nvoid updateParamWithOffset_000805a8(byte *parameter)\n\n{\n  char nextValue;\n  uint currentValue;\n  \n  currentValue = (uint)DAT_200708f0;\n  if (currentValue < 0x3c) {\n    nextValue = DAT_200708f0 + 1;\n    *parameter = DAT_200708f0;\n    DAT_200708f0 = nextValue;\n    *(uint *)(&DAT_200708fc + currentValue * 8) =\n         (arrayVariable[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *parameter = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_param_with_offset_000805a8",
                "param_1": "parameter",
                "cVar1": "nextValue",
                "uVar2": "currentValue",
                "Elf32_Rel_ARRAY_20070000": "arrayVariable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "update_parameter_000806a0",
            "code": "\nbyte updateParameter_000806a0(byte *inputArray,undefined4 param2)\n\n{\n  byte resultByte;\n  undefined4 baseAddress;\n  uint arrayIndex;\n  undefined4 value;\n  int loopCounter;\n  uint element;\n  \n  if (0x3b < *inputArray) goto LAB_00080660;\n  updateParameter_000806a0Value(param2,1,0x220,*inputArray,0x960);\n  element = (uint)*inputArray;\n  resultByte = (&DAT_200708f8)[element * 8];\n  inputArray[2] = 0;\n  arrayIndex = element / 0xc;\n  (&DAT_200708f8)[element * 8] = resultByte & 0xc0 | (byte)param2 & 0x3f;\n  inputArray[1] = 0;\n  loopCounter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(loopCounter + arrayIndex * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    loopCounter = loopCounter + 1;\n  } while (loopCounter != 0xc);\n  if (arrayIndex == 0) {\n    baseAddress = 0x40084000;\n    value = 0x1e;\nLAB_0008064c:\n    initializeTCChannel(baseAddress,arrayIndex,value,value);\n  }\n  else {\n    if (arrayIndex == 1) {\n      baseAddress = 0x40084000;\n      value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (arrayIndex == 2) {\n      baseAddress = 0x40084000;\n      value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (arrayIndex == 3) {\n      baseAddress = 0x40080000;\n      arrayIndex = 2;\n      value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (arrayIndex == 4) {\n      baseAddress = 0x40080000;\n      arrayIndex = 0;\n      value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*inputArray * 8] = (&DAT_200708f8)[(uint)*inputArray * 8] | 0x40;\nLAB_00080660:\n  return *inputArray;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "update_parameter_000806a0",
                "param_1": "inputArray",
                "param_2": "param2",
                "bVar1": "resultByte",
                "uVar2": "baseAddress",
                "uVar3": "arrayIndex",
                "uVar4": "value",
                "iVar5": "loopCounter",
                "uVar6": "element",
                "update_parameter_value_00080f0c": "updateParameterValue",
                "initialize_tc_channel_000803fc": "initializeTCChannel"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "interpolation_calculation_000806f8",
            "code": "\nvoid interpolationCalculation_000806f8(byte *data,uint size)\n\n{\n  uint convertedSize;\n  \n  if ((int)size < 0x220) {\n    convertedSize = size;\n    if (0xb3 < (int)size) {\n      convertedSize = 0xb4;\n    }\n    size = calculateInterpolation(convertedSize & ~((int)convertedSize >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                           (600 - (char)data[2]) * 4,size);\n  }\n  if (*data < 0x3c) {\n    convertedSize = (0x88 - (char)data[1]) * 4;\n    if (((int)(size + (0x88 - (char)data[1]) * -4) < 0 == hasBorrowed(size,convertedSize)) &&\n       (convertedSize = (600 - (char)data[2]) * 4, (int)size <= (int)convertedSize)) {\n      convertedSize = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (arrayRelocation[6].r_offset / 1000000) * (convertedSize - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "interpolation_calculation_000806f8",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "convertedSize",
                "calculate_interpolation_0008145c": "calculateInterpolation",
                "SBORROW4": "hasBorrowed",
                "Elf32_Rel_ARRAY_20070000": "arrayRelocation"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_and_configure_system_00080774",
            "code": "\n\n\nvoid initialize_and_configure_system_00080774(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  initialize_memory_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set_four_times_00081778();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    update_parameter_00081014(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter_value_00080a30(0x400e0e00,1,0x300,0);\n  update_parameter_00081014(0,1);\n  update_parameter_value_00080a30(0x400e0e00,1,0xc00,0);\n  update_parameter_value_00080a30(0x400e0e00,1,0x3000,0);\n  update_parameter_value_00080a30(0x400e1400,2,0x30,0);\n  update_parameter_value_00080a30(0x400e1000,1,0xc00,0);\n  update_parameter_value_00080a30(0x400e0e00,1,3,0);\n  update_parameter_value_00080a30(0x400e1000,1,0xc000,0);\n  check_and_update_bit_mask_00080aa8(0x25);\n  calculate_threshold_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  update_parameter_value_00080d3e(0x400c0000,0,0x300000,1);\n  update_register_00080d30(0x400c0000,0,0);\n  set_param_value_00080d6a(0x400c0000,0xffffffff);\n  initialize_memory_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_and_configure_system_00080774",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_system_0008089c",
            "code": "\nvoid initialize_system_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory(&DAT_20070c0c);\n  initialize_memory(&DAT_20070b60);\n  initialize_function(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initialize_memory(&DAT_20070e6c);\n  initialize_memory(&DAT_20070ef4);\n  initialize_memory(&DAT_20070f7c);\n  initialize_memory(&DAT_20070ad8);\n  initialize_memory(&DAT_20070d0c);\n  initialize_memory(&DAT_20070d94);\n  initialize_param_updater(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_param_updater(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_param_updater(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_system_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "initialize_memory_000811b0": "initialize_memory",
                "initialize_function_00081348": "initialize_function",
                "initialize_param_updater_00081438": "initialize_param_updater"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_functions_00080970",
            "code": "\nvoid checkAndExecuteFunctions_00080970(void)\n\n{\n  int difference;\n  \n  difference = calculateDifference(&DAT_20070be8);\n  if (difference != 0) {\n    FUNC_0008073a();\n  }\n  difference = calculateDifference(&DAT_20070c94);\n  if (difference != 0) {\n    FUNC_00080748();\n  }\n  difference = calculateDifference(&DAT_20070cbc);\n  if (difference != 0) {\n    FUNC_0008074a();\n  }\n  difference = calculateDifference(&DAT_20070ce4);\n  if (difference != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "difference",
                "calculate_difference_00081248": "calculateDifference"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_value_000809be",
            "code": "\nvoid updateParameterValue_000809be(int baseAddress,undefined4 switchValue,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(switchValue) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_value_000809be",
                "param_1": "baseAddress",
                "param_2": "switchValue",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_based_on_flag_000809e4",
            "code": "\nvoid setValuesBasedOnFlag_000809e4(undefined4 *array,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flag << 0x1f) < 0;\n  array[0x11] = value;\n  if (isNegative) {\n    array[0x19] = value;\n  }\n  if (!isNegative) {\n    array[0x18] = value;\n  }\n  isNegative = (flag & 10) != 0;\n  if (isNegative) {\n    array[8] = value;\n  }\n  if (!isNegative) {\n    array[9] = value;\n  }\n  if (((int)(flag << 0x1e) < 0) || ((int)(flag << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_based_on_flag_000809e4",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "update_parameter_values_00080a0a",
            "code": "\nvoid updateParameterValues_00080a0a(undefined4 *params,undefined4 newValue,int condition1,int condition2,int condition3)\n\n{\n  params[0x11] = newValue;\n  if (condition3 == 0) {\n    params[0x18] = newValue;\n  }\n  else {\n    params[0x19] = newValue;\n  }\n  if (condition2 == 0) {\n    params[0x15] = newValue;\n  }\n  else {\n    params[0x14] = newValue;\n  }\n  if (condition1 == 0) {\n    params[0xd] = newValue;\n  }\n  else {\n    params[0xc] = newValue;\n  }\n  params[4] = newValue;\n  *params = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "update_parameter_values_00080a0a",
                "param_1": "params",
                "param_2": "newValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameter_value_00080a30",
            "code": "\nundefined4 updateParameterValue_00080a30(int deviceAddress,int parameterType,undefined4 newValue,uint flag)\n\n{\n  bool isNegativeFlag;\n  \n  switch(parameterType) {\n  case 1:\n  case 2:\n    updateParameterValue_00080a30Helper(deviceAddress,parameterType,newValue);\n    isNegativeFlag = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = newValue;\n    if (isNegativeFlag) {\n      *(undefined4 *)(deviceAddress + 100) = newValue;\n    }\n    if (!isNegativeFlag) {\n      *(undefined4 *)(deviceAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    setValuesBasedOnFlag(deviceAddress,newValue,flag,0x809e5,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    updateParameterValue_00080a30s(deviceAddress,newValue,parameterType == 5,(flag << 0x1d) >> 0x1f,flag & 1,parameterType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameter_value_00080a30",
                "param_1": "deviceAddress",
                "param_2": "parameterType",
                "param_3": "newValue",
                "param_4": "flag",
                "bVar1": "isNegativeFlag",
                "update_parameter_value_000809be": "updateParameterValueHelper",
                "set_values_based_on_flag_000809e4": "setValuesBasedOnFlag",
                "update_parameter_values_00080a0a": "updateParameterValues"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "filter_bits_00080a94",
            "code": "\nuint filterBits_00080a94(int inputPointer,uint filterMask)\n\n{\n  uint filteredValue;\n  \n  filteredValue = *(uint *)(inputPointer + 8) & filterMask;\n  if (filteredValue != 0) {\n    if ((filterMask & *(uint *)(inputPointer + 0x18)) == 0) {\n      filteredValue = 0;\n    }\n    else {\n      filteredValue = 1;\n    }\n  }\n  return filteredValue;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "filter_bits_00080a94",
                "param_1": "inputPointer",
                "param_2": "filterMask",
                "uVar1": "filteredValue"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_mask_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBitMask_00080aa8(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_mask_00080aa8",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTCChannel_00080b2c(undefined4 param1,uint numChannels,char *channelName)\n\n{\n  int channelOffset;\n  int channelAddress;\n  undefined8 channelID;\n  \n  channelID = CONCAT44(numChannels,param1);\n  if (2 < numChannels) {\n    channelName = \"TC_Configure\";\n    channelID = handle_assertion_failure_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  channelOffset = (int)((ulonglong)channelID >> 0x20) * 0x40;\n  channelAddress = (int)channelID + channelOffset;\n  *(undefined4 *)((int)channelID + channelOffset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = channelName;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "param1",
                "param_2": "numChannels",
                "param_3": "channelName",
                "uVar3": "channelID",
                "iVar1": "channelOffset",
                "iVar2": "channelAddress"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "write_to_memory_00080b90",
            "code": "\nvoid writeToMemory_00080b90(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + offset * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "write_to_memory_00080b90",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_main_loop_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *outputArray,uint inputValue,int paramA,int paramB)\n\n{\n  uint dividedValue;\n  uint loopCounter;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *outputArray = 1;\n  outputArray[1] = 0;\n  outputArray[0x48] = 0x202;\n  outputArray[0x41] = 0;\n  outputArray[0x45] = 0;\n  dividedValue = inputValue / (uint)(paramA * 2);\n  if (inputValue == paramA * 2 * dividedValue) {\n    dividedValue = dividedValue - 1;\n  }\n  loopCounter = 0;\n  do {\n    if ((uint)(paramB * (int)(((ulonglong)inputValue / (ulonglong)((dividedValue + 1) * 2)) / 1000000)) <=\n        thresholdValues[loopCounter]) {\n      outputArray[1] = (loopCounter & 0xf) << 0x10 | (dividedValue & 0xff) << 8 | outputArray[1];\n      return 0;\n    }\n    loopCounter = loopCounter + 1;\n  } while (loopCounter != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "paramA",
                "param_4": "paramB",
                "uVar1": "dividedValue",
                "uVar2": "loopCounter",
                "local_58": "thresholdValues"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_register_00080d30",
            "code": "\nvoid updateRegister_00080d30(int registerAddress,uint valueToSet,uint bitmask)\n\n{\n  *(uint *)(registerAddress + 4) = valueToSet | *(uint *)(registerAddress + 4) | (bitmask & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_register_00080d30",
                "param_1": "registerAddress",
                "param_2": "valueToSet",
                "param_3": "bitmask"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_parameter_value_00080d3e",
            "code": "\nvoid updateParameterValue_00080d3e(int parameterAddress,uint value2,uint value3,uint value4)\n\n{\n  *(uint *)(parameterAddress + 4) =\n       value3 | *(uint *)(parameterAddress + 4) | (value2 & 0xf) << 0x18 | (value4 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_parameter_value_00080d3e",
                "param_1": "parameterAddress",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_memory_00080d62",
            "code": "\nvoid initializeMemory_00080d62(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_memory_00080d62",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_application_00080e80",
            "code": "\nundefined4 initializeApplication_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_application_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_and_update_value_00080e88",
            "code": "\nint addAndUpdateValue_00080e88(int newValue)\n\n{\n  int oldValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  oldValue = DAT_20071208;\n  DAT_20071208 = newValue + DAT_20071208;\n  return oldValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_and_update_value_00080e88",
                "param_1": "newValue",
                "iVar1": "oldValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_original_return_value_00080eaa",
            "code": "\nundefined4 getOriginalReturnValue_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_original_return_value_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "determine_error_code_00080eba",
            "code": "\nundefined4 determineErrorCode_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "determine_error_code_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_00080ebe",
            "code": "\nundefined4 initialize_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nreturn_type initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2",
                "undefined4": "return_type"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param_1,int srcArray,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(srcArray + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_2": "srcArray",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 unused1,undefined4 unused2,undefined4 unused3)\n\n{\n  printMessage(\"Exiting with status %d.\\n\",status,unused2,unused3,unused3);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "process_data_000817c8": "printMessage"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_unsigned_value_00080efe",
            "code": "\nunsignedValue getUnsignedValue_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_unsigned_value_00080efe",
                "undefined4": "unsignedValue"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_data_thunk_000816d8",
            "code": "\nundefined4 get_data_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_data_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "update_parameter_value_00080f0c",
            "code": "\n\n\nint updateParameterValue_00080f0c(int inputIndex,int value)\n\n{\n  int updatedValue;\n  uint bitMask;\n  undefined4 updateType;\n  uint tempMask;\n  byte lowNibble;\n  byte byteVal;\n  int paramOffset;\n  int paramValue;\n  \n  updatedValue = inputIndex;\n  if ((&DAT_00084b50)[inputIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[inputIndex] & 0xf) == 4) {\n      updatedValue = set_bit_00080d58(0x400c0000,(&DAT_00084b5d)[inputIndex * 0x1c]);\n    }\n    byteVal = (&DAT_20070e1c)[inputIndex];\n    lowNibble = byteVal & 0xf;\n    if ((lowNibble < 3) && (byteVal != 0)) {\n      if (lowNibble == 2) {\n        if (value == 0) {\n          return updatedValue;\n        }\n      }\n      else if (lowNibble == 1) {\n        if (value == 2) {\n          return updatedValue;\n        }\n      }\n      else if (lowNibble == 3) {\n        if (value == 1) {\n          return updatedValue;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (value != 1) {\nLAB_00080f68:\n      if (value == 0) {\n        updatedValue = inputIndex * 0x1c;\n        check_and_update_bit_mask_00080aa8(*(undefined4 *)(&DAT_00084b4c + updatedValue));\n        updatedValue = update_parameter_value_00080a30(*(undefined4 *)(&DAT_00084b44 + updatedValue),3,\n                             *(undefined4 *)(&DAT_00084b48 + updatedValue),0);\n        byteVal = (&DAT_20070e1c)[inputIndex] & 0xf0 | 2;\n      }\n      else {\n        if (value != 2) {\n          return updatedValue;\n        }\n        updatedValue = inputIndex * 0x1c;\n        check_and_update_bit_mask_00080aa8(*(undefined4 *)(&DAT_00084b4c + updatedValue));\n        updatedValue = update_parameter_value_00080a30(*(undefined4 *)(&DAT_00084b44 + updatedValue),3,\n                             *(undefined4 *)(&DAT_00084b48 + updatedValue),1);\n        byteVal = (&DAT_20070e1c)[inputIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[inputIndex] = byteVal;\n      return updatedValue;\n    }\n    paramOffset = inputIndex * 0x1c;\n    paramValue = *(int *)(&DAT_00084b44 + paramOffset);\n    if (byteVal >> 4 == 0) {\n      updateType = 4;\n    }\n    else {\n      updateType = 5;\n    }\n    updatedValue = update_parameter_value_00080a30(paramValue,updateType,*(undefined4 *)(&DAT_00084b48 + paramOffset),\n                         *(undefined4 *)(&DAT_00084b54 + paramOffset));\n    (&DAT_20070e1c)[inputIndex] = (&DAT_20070e1c)[inputIndex] & 0xf0 | 3;\n    if (*(int *)(paramValue + 0x18) == -1) {\n      bitMask = *(uint *)(&DAT_00084b4c + paramOffset);\n      if (0x2c < bitMask) {\n        return 1;\n      }\n      if (bitMask < 0x20) {\n        bitMask = 1 << (bitMask & 0xff);\n        tempMask = _DAT_400e0618 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0614 = tempMask;\n        }\n      }\n      else {\n        bitMask = 1 << (bitMask - 0x20 & 0xff);\n        tempMask = _DAT_400e0708 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0704 = tempMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return updatedValue;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "update_parameter_value_00080f0c",
                "param_1": "inputIndex",
                "param_2": "value",
                "iVar1": "updatedValue",
                "uVar2": "bitMask",
                "uVar3": "updateType",
                "uVar4": "tempMask",
                "bVar5": "lowNibble",
                "bVar6": "byteVal",
                "iVar7": "paramOffset",
                "iVar8": "paramValue"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_parameter_00081014",
            "code": "\nvoid updateParameter_00081014(int index,int value,undefined4 newValue)\n\n{\n  int filterResult;\n  undefined4 parameterValue;\n  int filterAddress;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      update_parameter_value_00080f0c(index,1,newValue,5,index,value,newValue);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    filterAddress = *(int *)(&DAT_00084b44 + index * 0x1c);\n    parameterValue = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    filterResult = filter_bits_00080a94(filterAddress,parameterValue);\n    if (filterResult == 0) {\n      if (value != 0) {\n        *(undefined4 *)(filterAddress + 100) = parameterValue;\n        return;\n      }\n      *(undefined4 *)(filterAddress + 0x60) = parameterValue;\n      return;\n    }\n    update_parameter_values_00080a0a(filterAddress,parameterValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_parameter_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "newValue",
                "iVar1": "filterResult",
                "uVar2": "parameterValue",
                "iVar3": "filterAddress"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_data_000810a6",
            "code": "\nvoid processData_000810a6(int *dataArray,int inputValue,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 leadingZerosCount;\n  \n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082688(inputValue);\n    (**(code **)(*dataArray + 4))(dataArray,inputValue,leadingZerosCount,*(code **)(*dataArray + 4),value2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "dataArray",
                "param_2": "inputValue",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "process_data_000810c4",
            "code": "\nvoid processData_000810c4(void)\n\n{\n  processData_000810c4Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "process_data_000810c4",
                "process_data_000810a6": "processDataHelper"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_data_000810d8",
            "code": "\nvoid process_data_000810d8(undefined4 input_param,undefined4 unused_param,undefined4 buffer_param,undefined4 size_param)\n\n{\n  process_data_000810d8_000810a6(input_param,&DAT_00085635,buffer_param,size_param,size_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_data_000810d8",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "buffer_param",
                "param_4": "size_param"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 inputValue)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_data_000810a6();\n  result2 = process_data_000810d8(inputValue);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "inputValue",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "extract_digits_000810fc",
            "code": "\nvoid extract_digits_000810fc(undefined4 data_address,uint input_number,uint base)\n\n{\n  char *output_buffer;\n  uint quotient;\n  char *temp_buffer;\n  char digit;\n  uint remainder;\n  char buffer [5];\n  \n  buffer[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  output_buffer = buffer;\n  do {\n    temp_buffer = output_buffer;\n    quotient = input_number / base;\n    remainder = input_number - base * quotient & 0xff;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *temp_buffer = digit;\n    input_number = quotient;\n    output_buffer = temp_buffer + -1;\n  } while (quotient != 0);\n  process_data_000810a6(data_address,temp_buffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "extract_digits_000810fc",
                "param_1": "data_address",
                "param_2": "input_number",
                "param_3": "base",
                "pcVar1": "output_buffer",
                "uVar2": "quotient",
                "pcVar3": "temp_buffer",
                "cVar4": "digit",
                "uVar5": "remainder",
                "local_15": "buffer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "process_number_0008113a",
            "code": "\nint processNumber_0008113a(undefined4 *pointer,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negativeDigits;\n  \n  if (base == 0) {\n    result = (**(code **)*pointer)(pointer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_function_000810cc(pointer,0x2d);\n      negativeDigits = extract_digits_000810fc(pointer,-number,10);\n      return negativeDigits + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = extract_digits_000810fc(pointer,number,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "process_number_0008113a",
                "param_1": "pointer",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negativeDigits"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "process_param_thunk_0008113a",
            "code": "\nint processParam_thunk_0008113a(undefined4 *inputPointer,uint value,uint base,undefined4 argument)\n\n{\n  int result;\n  int negativeResult;\n  \n  if (base == 0) {\n    result = (**(code **)*inputPointer)(inputPointer,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = execute_function_000810cc(inputPointer,0x2d);\n      negativeResult = extract_digits_000810fc(inputPointer,-value,10);\n      return negativeResult + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = extract_digits_000810fc(inputPointer,value,base,argument);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "process_param_thunk_0008113a",
                "param_1": "inputPointer",
                "param_2": "value",
                "param_3": "base",
                "param_4": "argument",
                "iVar1": "result",
                "iVar2": "negativeResult"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "add_processed_numbers_0008117a",
            "code": "\nint addProcessedNumbers_0008117a(undefined4 number)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_number_0008113a();\n  result2 = process_data_000810d8(number);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "add_processed_numbers_0008117a",
                "param_1": "number",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_relocation_info_zero_00081190",
            "code": "\nvoid executeIfRelocationInfoZero_00081190(void)\n\n{\n  if ((relocationArray[6].info != 0xffffffff) &&\n     (relocationArray[6].info = relocationArray[6].info - 1,\n     relocationArray[6].info == 0)) {\n    (*(functionToExecute *)((int)&relocationArray[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_relocation_info_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "info",
                "r_offset": "offset",
                "code": "functionToExecute"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  fillMemory(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress",
                "fill_memory_00081f00": "fillMemory"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_param_and_save_000811ca",
            "code": "\nvoid updateParamAndSave_000811ca(int ptr,undefined data)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(ptr + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(ptr + 0x84)) {\n    *(undefined *)(ptr + *(int *)(ptr + 0x80)) = data;\n    *(uint *)(ptr + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_param_and_save_000811ca",
                "param_1": "ptr",
                "param_2": "data",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "process_data_000811e8",
            "code": "\nint processData_000811e8(int *inputArray)\n\n{\n  int dataValue;\n  \n  dataValue = getDataValue();\n  outputValue = dataValue;\n  do {\n    dataValue = (**(code **)(*inputArray + 0xc))(inputArray);\n    if (-1 < dataValue) {\n      return dataValue;\n    }\n    dataValue = getDataValue();\n  } while ((uint)(dataValue - outputValue) < (uint)threshold);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "param_1": "inputArray",
                "iVar1": "dataValue",
                "get_data_thunk_000816d8": "getDataValue",
                "param_1[3]": "outputValue",
                "param_1[2]": "threshold"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_and_copy_strings_00081214",
            "code": "\nvoid process_and_copy_strings_00081214(undefined4 data_pointer,undefined4 string_pointer,uint target_string)\n\n{\n  uint result;\n  \n  initialize_data(data_pointer,&DAT_00085637);\n  while ((result = process_data(string_pointer), -1 < (int)result && (result != target_string))) {\n    copy_and_relocate_string(data_pointer,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_and_copy_strings_00081214",
                "param_1": "data_pointer",
                "param_2": "string_pointer",
                "param_3": "target_string",
                "uVar1": "result",
                "initialize_data_000814f6": "initialize_data",
                "process_data_000811e8": "process_data",
                "copy_and_relocate_string_0008159e": "copy_and_relocate_string"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculate_difference_00081248(int input_param)\n\n{\n  return *(int *)(*(int *)(input_param + 0x10) + 0x80) - *(int *)(*(int *)(input_param + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extractByteFromBuffer_00081276(int buffer)\n\n{\n  byte extractedByte;\n  int bufferPointer;\n  \n  bufferPointer = *(int *)(buffer + 0x10);\n  if (*(int *)(bufferPointer + 0x80) != *(int *)(bufferPointer + 0x84)) {\n    extractedByte = *(byte *)(bufferPointer + *(int *)(bufferPointer + 0x84));\n    *(uint *)(bufferPointer + 0x84) = *(int *)(bufferPointer + 0x84) + 1U & 0x7f;\n    return (uint)extractedByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "buffer",
                "bVar1": "extractedByte",
                "iVar2": "bufferPointer"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "handle_param_update_000812b8",
            "code": "\nundefined4 handleParamUpdate_000812b8(int data,undefined4 newParam)\n\n{\n  int ptrData;\n  uint modifiedIndex;\n  \n  ptrData = *(int *)(data + 0x14);\n  if ((*(int *)(*(int *)(data + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrData + 0x84) == *(int *)(ptrData + 0x80))) {\n    *(undefined4 *)(*(int *)(data + 0x18) + 0x1c) = newParam;\n  }\n  else {\n    modifiedIndex = *(int *)(ptrData + 0x80) + 1U & 0x8000007f;\n    if ((int)modifiedIndex < 0) {\n      modifiedIndex = (modifiedIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrData + 0x84) == modifiedIndex);\n    *(char *)(ptrData + *(int *)(ptrData + 0x80)) = (char)newParam;\n    *(uint *)(*(int *)(data + 0x14) + 0x80) = modifiedIndex;\n    *(undefined4 *)(*(int *)(data + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "handle_param_update_000812b8",
                "param_1": "data",
                "param_2": "newParam",
                "iVar1": "ptrData",
                "uVar2": "modifiedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_00081348",
            "code": "\nvoid initializeFunction_00081348(undefined4 *functionParams,undefined4 param2,undefined param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  functionParams[1] = 0;\n  functionParams[2] = 1000;\n  functionParams[6] = param2;\n  *functionParams = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(functionParams + 7) = param3;\n  functionParams[4] = param5;\n  functionParams[8] = param4;\n  functionParams[5] = param6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_00081348",
                "param_1": "functionParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "update_bit_mask_000813dc",
            "code": "\nvoid updateBitMask_000813dc(int param,uint divisor)\n\n{\n  int var1;\n  undefined4 *pointerVar2;\n  \n  check_and_update_bit_mask_00080aa8(*(undefined4 *)(param + 0x20));\n  pointerVar2 = *(undefined4 **)(param + 0x18);\n  pointerVar2[0x48] = 0x202;\n  *pointerVar2 = 0xac;\n  pointerVar2[1] = 0x800;\n  pointerVar2[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / divisor >> 4;\n  pointerVar2[3] = 0xffffffff;\n  pointerVar2[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param + 0x1c) & 0x1f);\n  var1 = *(int *)(param + 0x10);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  var1 = *(int *)(param + 0x14);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  *pointerVar2 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "update_bit_mask_000813dc",
                "param_1": "param",
                "param_2": "divisor",
                "iVar1": "var1",
                "puVar2": "pointerVar2"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_param_updater_00081438",
            "code": "\nundefined4 * initializeParamUpdater_00081438(undefined4 *paramArray,undefined4 initialValue)\n\n{\n  initialize_function_00081348();\n  *paramArray = &PTR_handle_param_update_000812b8_1_00085680;\n  paramArray[9] = initialValue;\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_param_updater_00081438",
                "param_1": "paramArray",
                "param_2": "initialValue"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculateInterpolation_0008145c(int startValue,int startRange,int endRange,int startDomain,int endDomain)\n\n{\n  return (uint)((startValue - startRange) * (endDomain - startDomain)) / (uint)(endRange - startRange) + startDomain;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "startValue",
                "param_2": "startRange",
                "param_3": "endRange",
                "param_4": "startDomain",
                "param_5": "endDomain"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "reorder_relocations_00081472",
            "code": "\nundefined4 * reorderRelocations_00081472(undefined4 *relocations)\n\n{\n  reorder_relocations_00081800(*relocations);\n  return relocations;\n}\n\n",
            "renaming": {
                "FUN_00081472": "reorder_relocations_00081472",
                "param_1": "relocations"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_relocations_00081480",
            "code": "\nvoid reset_relocations_00081480(int *relocation_array)\n\n{\n  if (*relocation_array != 0) {\n    reorder_relocations_00081800();\n  }\n  *relocation_array = 0;\n  relocation_array[2] = 0;\n  relocation_array[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_relocations_00081480",
                "param_1": "relocation_array",
                "param_1[1]": "relocation_array[1]",
                "param_1[2]": "relocation_array[2]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "reorder_relocations_00081496",
            "code": "\nint reorderRelocations_00081496(int *relocationArray,int relocationCount,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = reorder_relocations_00081f9c(*relocationArray,relocationCount + 1,param3,param4,param4);\n  if (result != 0) {\n    *relocationArray = result;\n    relocationArray[1] = relocationCount;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "reorder_relocations_00081496",
                "param_1": "relocationArray",
                "param_2": "relocationCount",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "perform_relocation_checks_000814ae",
            "code": "\nundefined4 performRelocationChecks_000814ae(int *relocationArray,uint requiredRelocationCount)\n\n{\n  int reorderResult;\n  \n  if ((*relocationArray == 0) || ((uint)relocationArray[1] < requiredRelocationCount)) {\n    reorderResult = reorder_relocations_00081496(relocationArray);\n    if (reorderResult == 0) {\n      return 0;\n    }\n    if (relocationArray[2] == 0) {\n      *(undefined *)*relocationArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "perform_relocation_checks_000814ae",
                "param_1": "relocationArray",
                "param_2": "requiredRelocationCount",
                "iVar1": "reorderResult"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "relocate_000814d0",
            "code": "\nundefined4 * relocate_000814d0(undefined4 *relocation_data,undefined4 source_string,undefined4 relocation_value)\n\n{\n  int relocation_check_result;\n  \n  relocation_check_result = perform_relocation_checks_000814ae(relocation_data,relocation_value);\n  if (relocation_check_result == 0) {\n    reset_relocations_00081480(relocation_data);\n  }\n  else {\n    relocation_data[2] = relocation_value;\n    copy_string_000825cc(*relocation_data,source_string);\n  }\n  return relocation_data;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "relocate_000814d0",
                "param_1": "relocation_data",
                "param_2": "source_string",
                "param_3": "relocation_value",
                "iVar1": "relocation_check_result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_data_000814f6",
            "code": "\nundefined4 * initializeData_000814f6(undefined4 *dataPointer,int value)\n\n{\n  undefined4 leadingZeros;\n  \n  *dataPointer = 0;\n  dataPointer[1] = 0;\n  dataPointer[2] = 0;\n  if (value != 0) {\n    leadingZeros = count_leading_zeros_00082688(value);\n    relocate_000814d0(dataPointer,value,leadingZeros);\n  }\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_data_000814f6",
                "param_1": "dataPointer",
                "param_2": "value",
                "uVar1": "leadingZeros"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_parameters_0008151c",
            "code": "\nvoid updateParameters_0008151c(int *sourceParams,int *targetParams)\n\n{\n  if (*sourceParams != 0) {\n    if ((*targetParams != 0) && ((uint)targetParams[2] <= (uint)sourceParams[1])) {\n      copyString();\n      sourceParams[2] = targetParams[2];\n      goto endLabel;\n    }\n    reorderRelocations();\n  }\n  *sourceParams = *targetParams;\n  sourceParams[1] = targetParams[1];\n  sourceParams[2] = targetParams[2];\n  *targetParams = 0;\n  targetParams[1] = 0;\nendLabel:\n  targetParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_parameters_0008151c",
                "param_1": "sourceParams",
                "param_2": "targetParams",
                "copy_string_000825cc": "copyString",
                "reorder_relocations_00081800": "reorderRelocations",
                "LAB_00081558": "endLabel"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_update_parameters_00081560",
            "code": "\nint check_and_update_parameters_00081560(int input_param,int comparison_param)\n\n{\n  if (input_param != comparison_param) {\n    update_parameters_0008151c();\n  }\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_update_parameters_00081560",
                "param_1": "input_param",
                "param_2": "comparison_param"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "copy_and_relocate_string_00081570",
            "code": "\nundefined4 copyAndRelocateString_00081570(int *ptr,int size,int relocationOffset)\n\n{\n  int relocationResult;\n  int ptr2;\n  \n  ptr2 = ptr[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (relocationOffset != 0) {\n    relocationResult = perform_relocation_checks_000814ae(ptr,ptr2 + relocationOffset);\n    if (relocationResult == 0) {\n      return 0;\n    }\n    copy_string_000825cc(*ptr + ptr[2],size);\n    ptr[2] = ptr2 + relocationOffset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "copy_and_relocate_string_00081570",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "relocationOffset",
                "iVar1": "relocationResult",
                "iVar2": "ptr2"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "copy_and_relocate_string_0008159e",
            "code": "\nvoid copyAndRelocateString_0008159e(undefined4 sourceString,undefined4 destPointer,undefined4 param)\n\n{\n  undefined4 tempVariable;\n  undefined4 param3;\n  \n  param3 = param;\n  copy_and_relocate_string_00081570(sourceString,&tempVariable,1,0,sourceString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "copy_and_relocate_string_0008159e",
                "param_1": "sourceString",
                "param_2": "destPointer",
                "param_3": "param",
                "local_c": "tempVariable",
                "uStack_8": "param3"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_input_validity_000815b8",
            "code": "\nint checkInputValidity_000815b8(byte **inputArray,byte *inputData)\n\n{\n  uint memoryComparisonResult;\n  int isValid;\n  \n  if (inputArray[2] == (byte *)0x0) {\n    if (inputData == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (inputData != (byte *)0x0) {\n      memoryComparisonResult = compareMemory(*inputArray);\n      goto LAB_000815d4;\n    }\n    inputData = *inputArray;\n  }\n  memoryComparisonResult = (uint)*inputData;\nLAB_000815d4:\n  isValid = 1 - memoryComparisonResult;\n  if (1 < memoryComparisonResult) {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_input_validity_000815b8",
                "param_1": "inputArray",
                "param_2": "inputData",
                "uVar1": "memoryComparisonResult",
                "iVar2": "isValid",
                "compare_memory_00082390": "compareMemory"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseInteger_000815de(byte **byteArray)\n\n{\n  byte byte1;\n  byte byte2;\n  uint result;\n  byte *ptr;\n  uint byteVal;\n  byte *currentByte;\n  int offset;\n  int isNegative;\n  uint maxDivisor;\n  uint maxValue;\n  \n  ptr = *byteArray;\n  if (*byteArray == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    currentByte = ptr;\n    ptr = currentByte + 1;\n    byteVal = (uint)*currentByte;\n    byte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteVal + 1);\n    byte2 = byte1 & 8;\n  } while ((byte1 & 8) != 0);\n  if (byteVal == 0x2d) {\n    ptr = currentByte + 2;\n    byteVal = (uint)currentByte[1];\n    byte2 = 1;\n  }\n  else if (byteVal == 0x2b) {\n    byteVal = (uint)currentByte[1];\n    ptr = currentByte + 2;\n  }\n  if (byte2 == 0) {\n    maxValue = 0x7fffffff;\n  }\n  else {\n    maxValue = 0x80000000;\n  }\n  maxDivisor = maxValue / 10;\n  isNegative = 0;\n  result = 0;\n  do {\n    byte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteVal + 1);\n    if ((byte1 & 4) == 0) {\n      if ((byte1 & 3) == 0) {\nLAB_0008277e:\n        if (isNegative == -1) {\n          if (byte2 == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (byte2 != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byte1 & 3) == 1) {\n        offset = 0x37;\n      }\n      else {\n        offset = 0x57;\n      }\n      offset = byteVal - offset;\n    }\n    else {\n      offset = byteVal - 0x30;\n    }\n    if (9 < offset) goto LAB_0008277e;\n    if (isNegative != -1) {\n      if ((maxDivisor <= result && result != maxDivisor) || ((result == maxDivisor && ((int)(maxValue % 10) < offset))))\n      {\n        isNegative = -1;\n      }\n      else {\n        result = result * 10 + offset;\n        isNegative = 1;\n      }\n    }\n    byteVal = (uint)*ptr;\n    ptr = ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "byteArray",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "uVar3": "result",
                "pbVar4": "ptr",
                "uVar5": "byteVal",
                "pbVar6": "currentByte",
                "iVar7": "offset",
                "iVar8": "isNegative",
                "uVar9": "maxDivisor",
                "uVar10": "maxValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_main_loop_000815ec",
            "code": "\nvoid runMainLoop_000815ec(void)\n\n{\n  initializeMemory();\n  initializeAndConfigureSystem();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initializeSystem();\n  do {\n    switchControlMode();\n    checkAndExecuteFunctions();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_main_loop_000815ec",
                "initialize_memory_00081618": "initializeMemory",
                "initialize_and_configure_system_00080774": "initializeAndConfigureSystem",
                "initialize_system_000801e0": "initializeSystem",
                "control_mode_switch_00080250": "switchControlMode",
                "check_and_execute_functions_00080970": "checkAndExecuteFunctions"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int flag,int value,undefined4 constant)\n\n{\n  int result;\n  undefined4 data;\n  \n  data = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    data = 0;\n  }\n  result = checkBitPattern(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),data,\n                       ((Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * value) / 0x12,constant);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)Elf32_Rel_ARRAY_20070000[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "constant",
                "iVar1": "result",
                "uVar2": "data",
                "check_bit_pattern_00081684": "checkBitPattern"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bit_pattern_00081684",
            "code": "\nint check_bit_pattern_00081684(uint *bits,uint mask,uint pattern,int max_attempts)\n\n{\n  int match_count;\n  \n  do {\n    if ((*bits & mask) != pattern) {\n      do {\n        if ((*bits & mask) == pattern) {\n          match_count = 0;\n          do {\n            if ((*bits & mask) != pattern) {\n              return match_count;\n            }\n            match_count = match_count + 1;\n          } while (max_attempts != match_count);\n          return 0;\n        }\n        max_attempts = max_attempts + -1;\n      } while (max_attempts != 0);\n      return 0;\n    }\n    max_attempts = max_attempts + -1;\n  } while (max_attempts != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "param_1": "bits",
                "param_2": "mask",
                "param_3": "pattern",
                "param_4": "max_attempts",
                "iVar1": "match_count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_variable_value_000816d8",
            "code": "\nundefined4 getGlobalVariableValue_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_variable_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_entry_000816ec",
            "code": "\nvoid updateRelocationEntry_000816ec(dword newValue,dword extraData,dword flag)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitMask;\n  code *functionPtr;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)process_relocated_entries_000817f0(400);\n    if (relocationEntry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*functionPtr)(0xffffffff);\n      return;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = newValue;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[index + 0x42] = flag;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = extraData;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*functionPtr)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "param_1": "newValue",
                "param_2": "extraData",
                "param_3": "flag",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "functionPtr"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "handle_assertion_failure_000816f8",
            "code": "\nvoid handle_assertion_failure_000816f8(undefined4 assertion,undefined4 file,char *message,undefined4 line)\n\n{\n  undefined4 offset;\n  undefined4 line;\n  char *additional;\n  undefined8 relocation;\n  \n  offset = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (message == (char *)0x0) goto LAB_0008171c;\n  line = line;\n  additional = \", function: \";\n  do {\n    line = assertion;\n    apply_offset_and_call_function_00081750(offset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",line,assertion,file,\n                 additional,message);\n    relocation = initialize_relocation_entries_000836ec();\n    file = (undefined4)((ulonglong)relocation >> 0x20);\n    offset = (undefined4)relocation;\nLAB_0008171c:\n    message = \"\";\n    line = line;\n    additional = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "handle_assertion_failure_000816f8",
                "param_1": "assertion",
                "param_2": "file",
                "param_3": "message",
                "param_4": "line",
                "uVar1": "offset",
                "uVar2": "line",
                "pcVar3": "additional",
                "uVar4": "relocation"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "apply_offset_and_call_function_00081750",
            "code": "\nvoid applyOffsetAndCallFunction_00081750(undefined4 offset,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 modifiedArg2;\n  undefined4 modifiedArg3;\n  \n  modifiedArg2 = arg2;\n  modifiedArg3 = arg3;\n  parse_format_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,arg1,&modifiedArg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "apply_offset_and_call_function_00081750",
                "param_1": "offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "modifiedArg2",
                "uStack_4": "modifiedArg3"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_set_four_times_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSetFourTimes_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  FUNC_00085844();\n  functionPointerArray = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointerArray = functionPointerArray + 1;\n    (**functionPointerArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_set_four_times_00081778",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "process_data_000817c8",
            "code": "\nvoid processData_000817c8(undefined4 input,undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined4 data1_copy;\n  undefined4 data2_copy;\n  undefined4 data3_copy;\n  \n  data1_copy = data1;\n  data2_copy = data2;\n  data3_copy = data3;\n  parse_format_string_0008289c(elfSymbols[140].r_offset,\n               *(undefined4 *)(elfSymbols[140].r_offset + 8),input,&data1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "input",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "uStack_c": "data1_copy",
                "uStack_8": "data2_copy",
                "uStack_4": "data3_copy",
                "Elf32_Rel_ARRAY_20070000": "elfSymbols"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "process_relocated_entries_000817f0",
            "code": "\nvoid process_relocated_entries_000817f0(undefined4 entry)\n\n{\n  process_relocation_entries_00081810(relocated_entry_offset,entry);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "process_relocated_entries_000817f0",
                "param_1": "entry",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocated_entry_offset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "reorder_relocations_00081800",
            "code": "\nvoid reorderRelocations_00081800(undefined4 reorderedData)\n\n{\n  reorder_relocations_00083b10(relocationArray[140].offset,reorderedData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "reorder_relocations_00081800",
                "param_1": "reorderedData",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "process_relocation_entries_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * processRelocationEntries_00081810(undefined4 *result,uint size)\n\n{\n  dword entry;\n  int index;\n  uint mask;\n  uint diff;\n  int offset;\n  uint adjustedSize;\n  dword currentEntry;\n  uint newSize;\n  int prevOffset;\n  undefined *ptr;\n  dword prevEntry;\n  dword nextEntry;\n  int i;\n  dword *currentPtr;\n  uint minSize;\n  undefined *newEntry;\n  dword *relocEntry;\n  uint alignSize;\n  \n  if (size + 0xb < 0x17) {\n    minSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    minSize = size + 0xb & 0xfffffff8;\n    if (((int)minSize < 0) || (minSize < size)) {\nLAB_00081876:\n      *result = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(result);\n  entry = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (minSize < 0x1f8) {\n    i = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + minSize);\n    if ((i != minSize + 0x20070464) ||\n       (index = i + 8, i = *(int *)(i + 0x14), index != i)) {\n      offset = *(int *)(i + 0xc);\n      prevOffset = (*(uint *)(i + 4) & 0xfffffffc) + i;\n      minSize = *(uint *)(prevOffset + 4);\n      index = *(int *)(i + 8);\n      *(int *)(index + 0xc) = offset;\n      *(int *)(offset + 8) = index;\n      *(uint *)(prevOffset + 4) = minSize | 1;\n      FUNC_00081f98(result);\n      return (int *)(i + 8);\n    }\n    alignSize = (minSize >> 3) + 2;\n  }\n  else {\n    alignSize = minSize >> 9;\n    if (alignSize == 0) {\n      index = 0x7e;\n      i = 0x3f;\n    }\n    else if (alignSize < 5) {\n      i = (minSize >> 6) + 0x38;\n      index = i * 2;\n    }\n    else if (alignSize < 0x15) {\n      i = alignSize + 0x5b;\n      index = i * 2;\n    }\n    else if (alignSize < 0x55) {\n      i = (minSize >> 0xc) + 0x6e;\n      index = i * 2;\n    }\n    else if (alignSize < 0x155) {\n      i = (minSize >> 0xf) + 0x77;\n      index = i * 2;\n    }\n    else if (alignSize < 0x555) {\n      i = (minSize >> 0x12) + 0x7c;\n      index = i * 2;\n    }\n    else {\n      index = 0xfc;\n      i = 0x7e;\n    }\n    for (currentEntry = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[index]; index * 4 + 0x20070464U != currentEntry\n        ; currentEntry = *(dword *)(currentEntry + 0xc)) {\n      alignSize = *(uint *)(currentEntry + 4) & 0xfffffffc;\n      offset = alignSize - minSize;\n      if (0xf < offset) {\n        i = i + -1;\n        break;\n      }\n      if (-1 < offset) {\n        index = alignSize + currentEntry;\n        minSize = *(uint *)(index + 4);\n        offset = *(int *)(currentEntry + 0xc);\n        i = *(int *)(currentEntry + 8);\n        *(int *)(i + 0xc) = offset;\n        *(int *)(offset + 8) = i;\n        *(uint *)(index + 4) = minSize | 1;\n        FUNC_00081f98(result);\n        return (int *)(currentEntry + 8);\n      }\n    }\n    alignSize = i + 1;\n  }\n  currentEntry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    diff = mask & 0xfffffffc;\n    adjustedSize = diff - minSize;\n    if (0xf < (int)adjustedSize) {\n      currentEntry = minSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = minSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currentEntry;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currentEntry;\n      *(undefined4 *)(currentEntry + 0xc) = 0x2007046c;\n      *(undefined4 *)(currentEntry + 8) = 0x2007046c;\n      *(uint *)(currentEntry + 4) = adjustedSize | 1;\n      *(uint *)(currentEntry + adjustedSize) = adjustedSize;\n      FUNC_00081f98(result);\n      return (int *)(entry + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)adjustedSize) {\n      *(uint *)(diff + entry + 4) = *(uint *)(diff + entry + 4) | 1;\n      FUNC_00081f98(result);\n      return (int *)(entry + 8);\n    }\n    if (diff < 0x200) {\n      diff = mask & 0xfffffff8;\n      i = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + diff);\n      currentEntry = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(entry + 8) = i;\n      *(uint *)(entry + 0xc) = diff + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currentEntry;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + diff) = entry;\n      *(dword *)(i + 0xc) = entry;\n    }\n    else {\n      adjustedSize = mask >> 9;\n      if (adjustedSize < 5) {\n        index = (mask >> 6) + 0x38;\n        i = index * 2;\n      }\n      else if (adjustedSize < 0x15) {\n        index = adjustedSize + 0x5b;\n        i = index * 2;\n      }\n      else if (adjustedSize < 0x55) {\n        index = (mask >> 0xc) + 0x6e;\n        i = index * 2;\n      }\n      else if (adjustedSize < 0x155) {\n        index = (mask >> 0xf) + 0x77;\n        i = index * 2;\n      }\n      else if (adjustedSize < 0x555) {\n        index = (mask >> 0x12) + 0x7c;\n        i = index * 2;\n      }\n      else {\n        i = 0xfc;\n        index = 0x7e;\n      }\n      currentEntry = i * 4 + 0x20070464;\n      prevEntry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[i];\n      if (prevEntry == currentEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index >> 2 & 0xffU);\n        nextEntry = prevEntry;\n      }\n      else {\n        do {\n          nextEntry = prevEntry;\n          if ((*(uint *)(prevEntry + 4) & 0xfffffffc) <= diff) break;\n          prevEntry = *(dword *)(prevEntry + 8);\n          nextEntry = prevEntry;\n        } while (currentEntry != prevEntry);\n        prevEntry = *(dword *)(nextEntry + 0xc);\n      }\n      currentEntry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(entry + 0xc) = prevEntry;\n      *(dword *)(entry + 8) = nextEntry;\n      *(dword *)(prevEntry + 8) = entry;\n      *(dword *)(nextEntry + 0xc) = entry;\n    }\n  }\n  entry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)alignSize >> 2 & 0xffU);\n  if (mask <= currentEntry) {\n    if ((currentEntry & mask) == 0) {\n      alignSize = alignSize & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        alignSize = alignSize + 4;\n      } while ((currentEntry & mask) == 0);\n    }\n    do {\n      relocEntry = &Elf32_Rel_ARRAY_20070000[alignSize + 0x8c].r_info;\n      currentPtr = relocEntry;\n      diff = alignSize;\n      do {\n        for (ptr = (undefined *)currentPtr[3]; currentPtr != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          adjustedSize = *(uint *)(ptr + 4) & 0xfffffffc;\n          newSize = adjustedSize - minSize;\n          if (0xf < (int)newSize) {\n            index = *(int *)(ptr + 8);\n            i = *(int *)(ptr + 0xc);\n            newEntry = ptr + minSize;\n            *(uint *)(ptr + 4) = minSize | 1;\n            *(int *)(index + 0xc) = i;\n            *(int *)(i + 8) = index;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newEntry;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newEntry;\n            *(undefined4 *)(newEntry + 0xc) = 0x2007046c;\n            *(undefined4 *)(newEntry + 8) = 0x2007046c;\n            *(uint *)(newEntry + 4) = newSize | 1;\n            *(uint *)(newEntry + newSize) = newSize;\n            FUNC_00081f98(result);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)newSize) {\n            i = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + adjustedSize + 4) = *(uint *)(ptr + adjustedSize + 4) | 1;\n            *(int *)(i + 0xc) = index;\n            *(int *)(index + 8) = i;\n            FUNC_00081f98(result);\n            return (int *)(ptr + 8);\n          }\n        }\n        diff = diff + 1;\n        currentPtr = currentPtr + 2;\n      } while ((diff & 3) != 0);\n      do {\n        adjustedSize = alignSize & 3;\n        ptr = (undefined *)(relocEntry + -2);\n        alignSize = alignSize - 1;\n        if (adjustedSize == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        relocEntry = (dword *)*relocEntry;\n      } while (relocEntry == (dword *)ptr);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (alignSize = diff, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        alignSize = alignSize + 4;\n      }\n    } while( true );\n  }\n  alignSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((minSize <= alignSize) &&\n     (mask = alignSize - minSize, currentEntry = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto LAB_00081b1a;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + alignSize;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    diff = minSize + DAT_20071218 + 0x10;\n  }\n  else {\n    diff = minSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  currentEntry = update_and_return_result_0008236c(result,diff);\n  if ((currentEntry == 0xffffffff) || ((currentEntry < mask && (entry != 0x20070464)))) {\n    alignSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentEntry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    adjustedSize = DAT_2007121c + diff;\n    DAT_2007121c = adjustedSize;\n    if ((mask == currentEntry) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = diff + alignSize | 1;\n    }\n    else {\n      prevEntry = currentEntry;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevEntry = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = adjustedSize + (currentEntry - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevEntry;\n      mask = currentEntry & 7;\n      if (mask == 0) {\n        i = 0x1000;\n      }\n      else {\n        currentEntry = currentEntry + (8 - mask);\n        i = 0x1008 - mask;\n      }\n      i = i - (diff + currentEntry & 0xfff);\n      index = update_and_return_result_0008236c(result,i);\n      if (index == -1) {\n        mask = 1;\n        i = 0;\n      }\n      else {\n        mask = (index - currentEntry) + i | 1;\n      }\n      adjustedSize = DAT_2007121c + i;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currentEntry;\n      DAT_2007121c = adjustedSize;\n      *(uint *)(currentEntry + 4) = mask;\n      if (entry != 0x20070464) {\n        if (alignSize < 0x10) {\n          *(undefined4 *)(currentEntry + 4) = 1;\n          alignSize = 0;\n          goto LAB_00081b04;\n        }\n        alignSize = alignSize - 0xc & 0xfffffff8;\n        *(uint *)(entry + 4) = alignSize | *(uint *)(entry + 4) & 1;\n        *(undefined4 *)(entry + alignSize + 4) = 5;\n        *(undefined4 *)(entry + alignSize + 8) = 5;\n        if (0xf < alignSize) {\n          reorder_relocations_00083b10(result,entry + 8);\n          adjustedSize = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < adjustedSize) {\n      DAT_20071214 = adjustedSize;\n    }\n    if (DAT_20071210 < adjustedSize) {\n      DAT_20071210 = adjustedSize;\n    }\n    alignSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentEntry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  mask = alignSize - minSize;\n  if ((alignSize < minSize) || ((int)mask < 0x10)) {\n    FUNC_00081f98(result);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = minSize + currentEntry;\n  *(uint *)(currentEntry + 4) = minSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  FUNC_00081f98(result);\n  return (int *)(currentEntry + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "process_relocation_entries_00081810",
                "param_1": "result",
                "param_2": "size",
                "dVar1": "entry",
                "iVar2": "index",
                "uVar3": "mask",
                "uVar4": "diff",
                "iVar5": "offset",
                "uVar6": "adjustedSize",
                "dVar7": "currentEntry",
                "uVar8": "newSize",
                "iVar9": "prevOffset",
                "puVar10": "ptr",
                "dVar11": "prevEntry",
                "dVar12": "nextEntry",
                "iVar13": "i",
                "pdVar14": "currentPtr",
                "uVar15": "minSize",
                "puVar16": "newEntry",
                "pdVar17": "relocEntry",
                "uVar18": "alignSize"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_data_00081d48",
            "code": "\nundefined4 * copyData_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *dest;\n  undefined4 *src;\n  uint remainingSize;\n  uint loopSize;\n  bool isLooping;\n  \n  dest = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      loopSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          src = dest;\n          isLooping = loopSize != 0;\n          loopSize = loopSize - 1;\n          *(undefined *)src = *(undefined *)destPtr;\n          dest = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isLooping);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      loopSize = 4 - ((uint)destination & 3);\n      size = size - loopSize;\n      destPtr = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest = destPtr;\n      source = src;\n      if ((loopSize & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dest = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest = *source;\n    dest[1] = source[1];\n    dest[2] = source[2];\n    dest[3] = source[3];\n    dest[4] = source[4];\n    dest[5] = source[5];\n    dest[6] = source[6];\n    dest[7] = source[7];\n    dest[8] = source[8];\n    dest[9] = source[9];\n    dest[10] = source[10];\n    dest[0xb] = source[0xb];\n    dest[0xc] = source[0xc];\n    dest[0xd] = source[0xd];\n    dest[0xe] = source[0xe];\n    dest[0xf] = source[0xf];\n    dest = dest + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest = *source;\n      dest[1] = source[1];\n      dest[2] = source[2];\n      dest[3] = source[3];\n      dest = dest + 4;\n      source = source + 4;\n      isLooping = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isLooping);\n  }\n  loopSize = remainingSize + 0xc;\n  src = dest;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *src = *destPtr;\n      isLooping = 3 < loopSize;\n      loopSize = loopSize - 4;\n      dest = src + 1;\n      src = src + 1;\n      destPtr = source;\n    } while (isLooping);\n  }\nLAB_00081dcc:\n  if (loopSize + 4 != 0) {\n    destPtr = dest;\n    src = source;\n    if ((loopSize & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)dest + 1);\n      *(undefined *)dest = *(undefined *)source;\n    }\n    if ((loopSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_data_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "dest",
                "puVar3": "src",
                "uVar4": "remainingSize",
                "uVar5": "loopSize",
                "bVar6": "isLooping"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "reverse_copy_00081e34",
            "code": "\nvoid reverseCopy_00081e34(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp;\n  undefined *temp_byte;\n  uint temp_length;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + length), dest < temp_ptr)) {\n    temp_byte = (undefined *)((int)dest + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_byte = temp_byte + -1;\n        *temp_byte = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    temp_length = length & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp = temp_length;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < temp_length) {\n      do {\n        temp = temp - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp);\n      index = (temp_length - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      temp_length = length & 3;\n    }\n    length = temp_length;\n    if (length == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "temp",
                "puVar6": "temp_byte",
                "uVar7": "temp_length"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "fill_memory_00081f00",
            "code": "\nvoid fillMemory_00081f00(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  undefined4 fillValue;\n  uint remainingSize;\n  bool isSizeZero;\n  \n  if (((uint)destination & 3) != 0) {\n    isSizeZero = size == 0;\n    destPtr = destination;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)destination & 3) == 0) break;\n      isSizeZero = size == 0;\n      destPtr = destination;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fillValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    destPtr = destination;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *destPtr = fillValue;\n        destPtr[1] = fillValue;\n        destPtr[2] = fillValue;\n        destPtr[3] = fillValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      destPtr = destination;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *destination = fillValue;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)destPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    destPtr = destination;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "fill_memory_00081f00",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "fillValue",
                "uVar4": "remainingSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reorder_relocations_00081f9c",
            "code": "\nvoid reorderRelocations_00081f9c(undefined4 reorderedOffset,undefined4 param2)\n\n{\n  reorder_relocations_00081fac(relocations[140].r_offset,reorderedOffset,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reorder_relocations_00081f9c",
                "param_1": "reorderedOffset",
                "param_2": "param2",
                "Elf32_Rel_ARRAY_20070000": "relocations"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "reorder_relocations_00081fac",
            "code": "\nint * reorderRelocations_00081fac(undefined4 *paramArray,int *relocationTable,uint tableSize)\n\n{\n  dword dwordVar;\n  int *newRelocationTable;\n  uint var3;\n  int var4;\n  uint var5;\n  int var6;\n  int *var7;\n  uint var8;\n  uint var9;\n  int *var10;\n  \n  if (relocationTable == (int *)0x0) {\n    newRelocationTable = (int *)process_relocation_entries_00081810(paramArray,tableSize);\n    return newRelocationTable;\n  }\n  FUNC_00081f94();\n  var5 = relocationTable[-1];\n  var8 = var5 & 0xfffffffc;\n  newRelocationTable = relocationTable + -2;\n  if (tableSize + 0xb < 0x17) {\n    var9 = 0x10;\n  }\n  else {\n    var9 = tableSize + 0xb & 0xfffffff8;\n    if ((int)var9 < 0) goto LAB_00082078;\n  }\n  if (var9 < tableSize) {\nLAB_00082078:\n    *paramArray = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)var8 < (int)var9) {\n    dwordVar = (int)newRelocationTable + var8;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == dwordVar) {\n      var3 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      dwordVar = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(var9 + 0x10) <= (int)(var3 + var8)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newRelocationTable + var9;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (var3 + var8) - var9 | 1;\n        relocationTable[-1] = var9 | relocationTable[-1] & 1U;\n        FUNC_00081f98(paramArray);\n        return relocationTable;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(dwordVar + 4) & 0xfffffffe) + dwordVar + 4) & 1) == 0) {\n      var3 = *(uint *)(dwordVar + 4) & 0xfffffffc;\n      if ((int)var9 <= (int)(var3 + var8)) {\n        var6 = *(int *)(dwordVar + 0xc);\n        var4 = *(int *)(dwordVar + 8);\n        *(int *)(var4 + 0xc) = var6;\n        *(int *)(var6 + 8) = var4;\n        var8 = var3 + var8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      var3 = 0;\n      dwordVar = 0;\n    }\n    if (-1 < (int)(var5 << 0x1f)) {\n      var10 = (int *)((int)newRelocationTable - relocationTable[-2]);\n      var5 = (var10[1] & 0xfffffffcU) + var8;\n      if (dwordVar != 0) {\n        if (dwordVar == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(var9 + 0x10) <= (int)(var3 + var5)) {\n            newRelocationTable = var10 + 2;\n            var4 = *newRelocationTable;\n            var6 = var10[3];\n            var8 = var8 - 4;\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            if (var8 < 0x25) {\n              var7 = newRelocationTable;\n              if (0x13 < var8) {\n                var10[2] = *relocationTable;\n                var10[3] = relocationTable[1];\n                if (var8 < 0x1c) {\n                  relocationTable = relocationTable + 2;\n                  var7 = var10 + 4;\n                }\n                else {\n                  var10[4] = relocationTable[2];\n                  var10[5] = relocationTable[3];\n                  if (var8 == 0x24) {\n                    var10[6] = relocationTable[4];\n                    var7 = relocationTable + 5;\n                    relocationTable = relocationTable + 6;\n                    var10[7] = *var7;\n                    var7 = var10 + 8;\n                  }\n                  else {\n                    relocationTable = relocationTable + 4;\n                    var7 = var10 + 6;\n                  }\n                }\n              }\n              *var7 = *relocationTable;\n              var7[1] = relocationTable[1];\n              var7[2] = relocationTable[2];\n            }\n            else {\n              reverse_copy_00081e34(newRelocationTable,relocationTable);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)var10 + var9;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (var3 + var5) - var9 | 1;\n            var10[1] = var9 | var10[1] & 1U;\n            FUNC_00081f98(paramArray);\n            return newRelocationTable;\n          }\n        }\n        else {\n          var3 = var3 + var5;\n          if ((int)var9 <= (int)var3) {\n            var6 = *(int *)(dwordVar + 0xc);\n            var4 = *(int *)(dwordVar + 8);\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            var7 = var10 + 2;\n            var4 = *var7;\n            var6 = var10[3];\n            var5 = var8 - 4;\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            var8 = var3;\n            if (var5 < 0x25) {\n              newRelocationTable = var7;\n              if (0x13 < var5) {\n                var10[2] = *relocationTable;\n                var10[3] = relocationTable[1];\n                if (var5 < 0x1c) {\n                  relocationTable = relocationTable + 2;\n                  newRelocationTable = var10 + 4;\n                }\n                else {\n                  var10[4] = relocationTable[2];\n                  var10[5] = relocationTable[3];\n                  if (var5 == 0x24) {\n                    var10[6] = relocationTable[4];\n                    newRelocationTable = relocationTable + 5;\n                    relocationTable = relocationTable + 6;\n                    var10[7] = *newRelocationTable;\n                    newRelocationTable = var10 + 8;\n                  }\n                  else {\n                    relocationTable = relocationTable + 4;\n                    newRelocationTable = var10 + 6;\n                  }\n                }\n              }\n              *newRelocationTable = *relocationTable;\n              newRelocationTable[1] = relocationTable[1];\n              newRelocationTable[2] = relocationTable[2];\n              var5 = var10[1];\n              newRelocationTable = var10;\n              relocationTable = var7;\n            }\n            else {\n              reverse_copy_00081e34(var7,relocationTable);\n              var5 = var10[1];\n              newRelocationTable = var10;\n              relocationTable = var7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)var9 <= (int)var5) {\n        var7 = var10 + 2;\n        var4 = *var7;\n        var6 = var10[3];\n        var3 = var8 - 4;\n        *(int *)(var4 + 0xc) = var6;\n        *(int *)(var6 + 8) = var4;\n        var8 = var5;\n        if (var3 < 0x25) {\n          newRelocationTable = var7;\n          if (0x13 < var3) {\n            var10[2] = *relocationTable;\n            var10[3] = relocationTable[1];\n            if (var3 < 0x1c) {\n              relocationTable = relocationTable + 2;\n              newRelocationTable = var10 + 4;\n            }\n            else {\n              var10[4] = relocationTable[2];\n              var10[5] = relocationTable[3];\n              if (var3 == 0x24) {\n                var10[6] = relocationTable[4];\n                newRelocationTable = relocationTable + 5;\n                relocationTable = relocationTable + 6;\n                var10[7] = *newRelocationTable;\n                newRelocationTable = var10 + 8;\n              }\n              else {\n                relocationTable = relocationTable + 4;\n                newRelocationTable = var10 + 6;\n              }\n            }\n          }\n          *newRelocationTable = *relocationTable;\n          newRelocationTable[1] = relocationTable[1];\n          newRelocationTable[2] = relocationTable[2];\n          var5 = var10[1];\n          newRelocationTable = var10;\n          relocationTable = var7;\n        }\n        else {\n          reverse_copy_00081e34(var7,relocationTable);\n          var5 = var10[1];\n          newRelocationTable = var10;\n          relocationTable = var7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    var10 = (int *)process_relocation_entries_00081810(paramArray,tableSize);\n    if (var10 == (int *)0x0) goto LAB_000820a0;\n    var5 = relocationTable[-1];\n    if (var10 + -2 != (int *)((var5 & 0xfffffffe) + (int)newRelocationTable)) {\n      var8 = var8 - 4;\n      if (var8 < 0x25) {\n        newRelocationTable = relocationTable;\n        var7 = var10;\n        if (0x13 < var8) {\n          *var10 = *relocationTable;\n          var10[1] = relocationTable[1];\n          if (var8 < 0x1c) {\n            newRelocationTable = relocationTable + 2;\n            var7 = var10 + 2;\n          }\n          else {\n            var10[2] = relocationTable[2];\n            var10[3] = relocationTable[3];\n            if (var8 == 0x24) {\n              var10[4] = relocationTable[4];\n              var10[5] = relocationTable[5];\n              newRelocationTable = relocationTable + 6;\n              var7 = var10 + 6;\n            }\n            else {\n              newRelocationTable = relocationTable + 4;\n              var7 = var10 + 4;\n            }\n          }\n        }\n        *var7 = *newRelocationTable;\n        var7[1] = newRelocationTable[1];\n        var7[2] = newRelocationTable[2];\n      }\n      else {\n        reverse_copy_00081e34(var10,relocationTable);\n      }\n      reorder_relocations_00083b10(paramArray,relocationTable);\n      goto LAB_000820a0;\n    }\n    var8 = var8 + (var10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  var3 = var8 - var9;\n  var10 = relocationTable;\n  if (var3 < 0x10) {\n    newRelocationTable[1] = var5 & 1 | var8;\n    *(uint *)((int)newRelocationTable + var8 + 4) = *(uint *)((int)newRelocationTable + var8 + 4) | 1;\n  }\n  else {\n    newRelocationTable[1] = var5 & 1 | var9;\n    *(uint *)((int)newRelocationTable + var9 + 4) = var3 | 1;\n    *(uint *)((int)newRelocationTable + var3 + var9 + 4) = *(uint *)((int)newRelocationTable + var3 + var9 + 4) | 1;\n    reorder_relocations_00083b10(paramArray,(int)newRelocationTable + var9 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(paramArray);\n  return var10;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "reorder_relocations_00081fac",
                "param_1": "paramArray",
                "param_2": "relocationTable",
                "param_3": "tableSize",
                "dVar1": "dwordVar",
                "piVar2": "newRelocationTable",
                "uVar3": "var3",
                "iVar4": "var4",
                "uVar5": "var5",
                "iVar6": "var6",
                "piVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "piVar10": "var10"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "update_and_return_result_0008236c",
            "code": "\nvoid updateAndReturnResult_0008236c(int *resultPointer,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = add_and_update_value_00080e88(inputValue);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "update_and_return_result_0008236c",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_memory_00082390",
            "code": "\nint compareMemory_00082390(uint *memory1,uint *memory2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)memory1 | (uint)memory2) & 7) != 0) {\n    ptr1 = memory1;\n    if (((uint)memory1 & 3) != 0) {\n      ptr1 = (uint *)((uint)memory1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)memory1 & 0xfffffffc);\n      ptr2 = memory2;\n      if (((uint)memory1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = memory2;\n        if (((uint)memory1 & 2) == 0) {\n          ptr2 = (uint *)((int)memory2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - *(byte *)memory2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      memory2 = (uint *)((int)ptr3 + 1);\n      result = (val1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)memory2 & 3;\n    if (val1 != 0) {\n      memory2 = (uint *)((uint)memory2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *memory2;\n        do {\n          memory2 = memory2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *memory2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *memory2;\n        do {\n          memory2 = memory2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *memory2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *memory2;\n        do {\n          memory2 = memory2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *memory2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    memory1 = ptr1;\n    ptr2 = memory2;\n    if (((uint)ptr1 & 4) != 0) {\n      memory1 = ptr1 + 1;\n      val1 = *ptr1;\n      ptr2 = memory2 + 1;\n      val3 = *memory2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\nLAB_0008259a:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    memory2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *memory1;\n        val3 = memory1[1];\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto LAB_0008258e;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        memory1 = memory1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    val1 = *memory1;\n    val2 = memory1[1];\n    val3 = *memory2;\n    val4 = memory2[1];\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto LAB_0008259a;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    memory1 = memory1 + 2;\n    memory2 = memory2 + 2;\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\nLAB_0008259e:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 | val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - LZCOUNT(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\nLAB_0008258e:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_memory_00082390",
                "param_1": "memory1",
                "param_2": "memory2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "val1",
                "uVar6": "val2",
                "uVar7": "val3",
                "uVar8": "val4",
                "uVar9": "val5"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copyString_000825cc(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *currentPointer;\n  uint currentData;\n  uint tempData;\n  uint *destinationPointer;\n  bool isZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    currentPointer = source;\n    if (((uint)source & 1) != 0) {\n      currentPointer = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = currentPointer;\n    if (((uint)currentPointer & 2) != 0) {\n      source = (uint *)((int)currentPointer + 2);\n      currentShort = *(ushort *)currentPointer;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  currentData = *source;\n  currentPointer = source + 1;\n  destinationPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentData + 0xfefefeff & ~currentData & 0x80808080) != 0) goto LAB_00082630;\n    destinationPointer = destination + 1;\n    *destination = currentData;\n    currentPointer = source + 2;\n    currentData = source[1];\n  }\n  while( true ) {\n    nextPointer = currentPointer + 1;\n    tempData = *currentPointer;\n    destination = destinationPointer;\n    if ((currentData + 0xfefefeff & ~currentData & 0x80808080) != 0) break;\n    destination = destinationPointer + 1;\n    *destinationPointer = currentData;\n    currentData = tempData;\n    if ((tempData + 0xfefefeff & ~tempData & 0x80808080) != 0) break;\n    currentPointer = currentPointer + 2;\n    currentData = *nextPointer;\n    destinationPointer = destinationPointer + 2;\n    *destination = tempData;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)currentData;\n    tempData = currentData & 0xff;\n    currentData = currentData >> 8 | currentData << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (tempData != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "currentPointer",
                "uVar5": "currentData",
                "uVar6": "tempData",
                "puVar7": "destinationPointer",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint countLeadingZeros_00082688(uint input)\n\n{\n  int leadingZerosCount;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZerosCount = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZerosCount + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZerosCount = leadingZerosCount + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "leadingZerosCount",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 param1,int param2,int **param3)\n\n{\n  int *arrayPointer;\n  int returnValue;\n  int *tempPointer;\n  uint loopCounter;\n  undefined4 *dataPointer;\n  uint tempVariable1;\n  uint tempVariable2;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    returnValue = process_data_00083ca8();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return returnValue;\n  }\n  tempPointer = param3[2];\n  arrayPointer = *param3;\n  while (tempPointer != (int *)0x0) {\n    tempVariable1 = arrayPointer[1];\n    tempVariable2 = tempVariable1 >> 2;\n    if (tempVariable2 != 0) {\n      dataPointer = (undefined4 *)(*arrayPointer + -4);\n      loopCounter = 0;\n      do {\n        dataPointer = dataPointer + 1;\n        returnValue = process_data_000839b4(param1,*dataPointer,param2);\n        loopCounter = loopCounter + 1;\n        if (returnValue == -1) goto LAB_00082864;\n      } while (tempVariable2 != loopCounter);\n      tempPointer = param3[2];\n    }\n    tempPointer = (int *)((int)tempPointer - (tempVariable1 & 0xfffffffc));\n    param3[2] = tempPointer;\n    arrayPointer = arrayPointer + 2;\n  }\n  returnValue = 0;\nLAB_00082864:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "arrayPointer",
                "iVar2": "returnValue",
                "piVar3": "tempPointer",
                "uVar4": "loopCounter",
                "puVar5": "dataPointer",
                "uVar6": "tempVariable1",
                "uVar7": "tempVariable2"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "parse_format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_0008289c(int input1,int input2,int *******formatString,int **data)\n\n{\n  bool isSigned;\n  bool isLong;\n  bool isAlternate;\n  char signChar;\n  bool isZeroPad;\n  int ********args;\n  int *var7;\n  int result;\n  char tempChar;\n  int *******tempPtr;\n  uint tempNum1;\n  int **ptrArray;\n  uint tempNum2;\n  uint tempNum3;\n  int count;\n  int ********pptrTemp1;\n  int index;\n  int *******ptrTemp2;\n  int *var19;\n  int *******ptrTemp3;\n  uint tempNum4;\n  int *var22;\n  int *******ptrTemp4;\n  undefined4 tempNum5;\n  int ********pptrTemp5;\n  bool isNegative;\n  longlong tempPtr2;\n  int *******minFieldWidth;\n  int *******maxFieldWidth;\n  int **currentArg;\n  int totalCharsWritten;\n  char *hexChars;\n  char formatChar;\n  undefined zeroPadChar;\n  undefined hexPrintLower;\n  int ********argList;\n  int argCount;\n  int *******argPointer;\n  undefined tempChar2;\n  char cStack_6a;\n  undefined tempChar3;\n  undefined formatBuffer [4];\n  int *******local_64 [16];\n  \n  if ((input1 != 0) && (*(int *)(input1 + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  tempNum2 = (uint)*(ushort *)(input2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(input2 + 0xc) << 0x12)) {\n    tempNum2 = tempNum2 | 0x2000;\n    *(short *)(input2 + 0xc) = (short)tempNum2;\n    *(uint *)(input2 + 100) = *(uint *)(input2 + 100) & 0xffffdfff;\n  }\n  if (((int)(tempNum2 << 0x1c) < 0) && (*(int *)(input2 + 0x10) != 0)) {\n    if ((tempNum2 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = initialize_and_check_relocation_0008356c(input1,input2);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(input2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(input2 + 0xe)) {\n    result = process_data_000834f0(input1,input2,formatString,data);\n    return result;\n  }\nLAB_000828ee:\n  hexChars = (char *)0x0;\n  argPointer = (int *******)0x0;\n  argCount = 0;\n  totalCharsWritten = 0;\n  args = (int ********)formatBuffer;\n  currentArg = data;\n  argList = (int ********)formatBuffer;\nLAB_00082902:\n  tempPtr = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      tempPtr = (int *******)((int)tempPtr + 1);\n      if (*(char *)tempPtr == '\\0') break;\n    } while (*(char *)tempPtr != '%');\n    ptrTemp3 = (int *******)((int)tempPtr - (int)formatString);\n    if (ptrTemp3 != (int *******)0x0) {\n      argCount = argCount + 1;\n      argPointer = (int *******)((int)argPointer + (int)ptrTemp3);\n      *args = formatString;\n      args[1] = ptrTemp3;\n      if (argCount < 8) {\n        args = args + 2;\n      }\n      else {\n        if (argPointer == (int *******)0x0) {\n          totalCharsWritten = totalCharsWritten + (int)ptrTemp3;\n          argCount = 0;\n          args = (int ********)formatBuffer;\n          goto LAB_00082952;\n        }\n        result = process_data_00082824(input1,input2,&argList);\n        args = (int ********)formatBuffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      totalCharsWritten = totalCharsWritten + (int)ptrTemp3;\n    }\n  }\nLAB_00082952:\n  if (*(char *)tempPtr != '\\0') {\n    formatChar = '\\0';\n    tempNum3 = (uint)*(byte *)((int)tempPtr + 1);\n    tempNum2 = 0;\n    isZeroPad = false;\n    isLong = false;\n    isSigned = false;\n    isAlternate = false;\n    isNegative = false;\n    ptrTemp3 = (int *******)0x0;\n    maxFieldWidth = (int *******)0xffffffff;\n    formatString = (int *******)((int)tempPtr + 1);\nLAB_00082976:\n    formatString = (int *******)((int)formatString + 1);\nLAB_0008297a:\n    switch(tempNum3) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (tempNum3 != 0) {\n        minFieldWidth = (int *******)0x1;\n        maxFieldWidth = (int *******)0x1;\n        pptrTemp5 = (int ********)&tempChar2;\n        tempChar2 = (char)tempNum3;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isAlternate = true;\n      tempNum3 = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2a:\n      ptrTemp3 = (int *******)*currentArg;\n      currentArg = currentArg + 1;\n      if ((int)ptrTemp3 < 0) {\n        ptrTemp3 = (int *******)-(int)ptrTemp3;\n        goto switchD_00082984_caseD_2d;\n      }\n      tempNum3 = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2b:\n      tempNum3 = (uint)*(byte *)formatString;\n      formatChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      tempNum2 = tempNum2 | 4;\n      tempNum3 = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2e:\n      tempNum3 = (uint)*(byte *)formatString;\n      tempPtr = (int *******)((int)formatString + 1);\n      if (tempNum3 == 0x2a) {\n        tempNum3 = (uint)*(byte *)((int)formatString + 1);\n        maxFieldWidth = (int *******)*currentArg;\n        currentArg = currentArg + 1;\n        formatString = tempPtr;\n        if ((int)maxFieldWidth < 0) {\n          maxFieldWidth = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      tempNum1 = tempNum3 - 0x30;\n      if (tempNum1 < 10) {\n        tempNum4 = 0;\n        do {\n          formatString = (int *******)((int)tempPtr + 1);\n          tempNum3 = (uint)*(byte *)tempPtr;\n          tempNum4 = tempNum1 + tempNum4 * 10;\n          tempNum1 = tempNum3 - 0x30;\n          tempPtr = formatString;\n        } while (tempNum1 < 10);\n        maxFieldWidth = (int *******)(tempNum4 | (int)tempNum4 >> 0x1f);\n      }\n      else {\n        maxFieldWidth = (int *******)0x0;\n        formatString = tempPtr;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      tempNum2 = tempNum2 | 0x80;\n      tempNum3 = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isLong = true;\n      if (isSigned == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      currentArg = (int **)((int)currentArg + 7U & 0xfffffff8);\n      var19 = *currentArg;\n      var22 = currentArg[1];\n      currentArg = currentArg + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isLong = true;\n      if (isSigned != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)isLong << 4;\n      count = (uint)isSigned << 5;\n      if ((isLong == 0) && (count = (uint)isNegative << 6, isNegative != 0)) {\n        var19 = (int *)(uint)*(ushort *)currentArg;\n        currentArg = currentArg + 1;\n        var22 = (int *)0x0;\n      }\n      else {\n        result = count;\n        var19 = *currentArg;\n        currentArg = currentArg + 1;\n        var22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isLong = true;\n      if (isSigned != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isLong) || (isNegative == false)) {\n        result = 1;\n        var19 = *currentArg;\n        currentArg = currentArg + 1;\n        var22 = (int *)0x0;\n      }\n      else {\n        var22 = (int *)0x0;\n        var19 = (int *)(uint)*(ushort *)currentArg;\n        currentArg = currentArg + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexChars = \"0123456789ABCDEF\";\n      if (isSigned == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ptrArray = (int **)((int)currentArg + 7U & 0xfffffff8);\n      currentArg = ptrArray + 2;\n      var19 = *ptrArray;\n      var22 = ptrArray[1];\n      goto LAB_00082d2e;\n    case 99:\n      var19 = *currentArg;\n      currentArg = currentArg + 1;\n      minFieldWidth = (int *******)0x1;\n      tempChar2 = SUB41(var19,0);\n      maxFieldWidth = (int *******)0x1;\n      pptrTemp5 = (int ********)&tempChar2;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isSigned != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isLong == false) && (isNegative != false)) {\n        var19 = (int *)(int)*(short *)currentArg;\n        currentArg = currentArg + 1;\n        var22 = (int *)((int)var19 >> 0x1f);\n      }\n      else {\n        var19 = *currentArg;\n        currentArg = currentArg + 1;\n        var22 = (int *)((int)var19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)var22 < 0) {\n        isNegative = var19 != (int *)0x0;\n        var19 = (int *)-(int)var19;\n        var22 = (int *)(-(int)var22 - (uint)isNegative);\n        formatChar = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)maxFieldWidth) {\n        tempNum2 = tempNum2 & 0xffffff7f;\n      }\n      isZeroPad = false;\n      tempNum3 = (uint)var19 | (uint)var22;\n      result = 1;\n      signChar = formatChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isNegative = true;\n      tempNum3 = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x6c:\n      tempNum3 = (uint)*(byte *)formatString;\n      if (tempNum3 == 0x6c) {\n        isSigned = true;\n        tempNum3 = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        isLong = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isSigned == false) {\n        if (isLong == false) {\n          if (isNegative) {\n            var19 = *currentArg;\n            currentArg = currentArg + 1;\n            *(short *)var19 = (short)totalCharsWritten;\n          }\n          else {\n            var19 = *currentArg;\n            currentArg = currentArg + 1;\n            *var19 = totalCharsWritten;\n          }\n        }\n        else {\n          var19 = *currentArg;\n          currentArg = currentArg + 1;\n          *var19 = totalCharsWritten;\n        }\n      }\n      else {\n        var19 = *currentArg;\n        currentArg = currentArg + 1;\n        *var19 = totalCharsWritten;\n        var19[1] = totalCharsWritten >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isSigned == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ptrArray = (int **)((int)currentArg + 7U & 0xfffffff8);\n      currentArg = ptrArray + 2;\n      var19 = *ptrArray;\n      var22 = ptrArray[1];\n      result = 0;\n      break;\n    case 0x70:\n      var19 = *currentArg;\n      currentArg = currentArg + 1;\n      hexPrintLower = 0x78;\n      isZeroPad = true;\n      var22 = (int *)0x0;\n      zeroPadChar = 0x30;\n      hexChars = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isSigned = true;\n      tempNum3 = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x73:\n      pptrTemp5 = (int ********)*currentArg;\n      formatChar = '\\0';\n      currentArg = currentArg + 1;\n      if (pptrTemp5 != (int ********)0x0) {\n        if ((int)maxFieldWidth < 0) {\n          maxFieldWidth = (int *******)count_leading_zeros_00082688(pptrTemp5);\n          tempPtr = (int *******)0x0;\n          signChar = formatChar;\n        }\n        else {\n          result = find_character_000840f8(pptrTemp5,0,maxFieldWidth);\n          signChar = formatChar;\n          if (result == 0) {\n            tempPtr = (int *******)0x0;\n          }\n          else {\n            ptrTemp2 = (int *******)(result - (int)pptrTemp5);\n            if ((int)maxFieldWidth <= (int)(int *******)(result - (int)pptrTemp5)) {\n              ptrTemp2 = maxFieldWidth;\n            }\n            tempPtr = (int *******)0x0;\n            maxFieldWidth = ptrTemp2;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < maxFieldWidth) {\n        maxFieldWidth = (int *******)0x6;\n      }\n      minFieldWidth = (int *******)((uint)maxFieldWidth & ~((int)maxFieldWidth >> 0x1f));\n      pptrTemp5 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      formatChar = '\\0';\n      tempPtr = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isSigned) goto LAB_00082ce0;\nLAB_00082bc6:\n      ptrArray = (int **)((int)currentArg + 7U & 0xfffffff8);\n      currentArg = ptrArray + 2;\n      var19 = *ptrArray;\n      var22 = ptrArray[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexChars = \"0123456789abcdef\";\n      if (isSigned != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isLong == false) && (isNegative != false)) {\n        var22 = (int *)0x0;\n        var19 = (int *)(uint)*(ushort *)currentArg;\n        currentArg = currentArg + 1;\n      }\n      else {\n        var19 = *currentArg;\n        currentArg = currentArg + 1;\n        var22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isAlternate) && (((uint)var19 | (uint)var22) != 0)) {\n        isZeroPad = true;\n        zeroPadChar = 0x30;\n        result = 2;\n        hexPrintLower = (char)tempNum3;\n      }\n      else {\n        result = 2;\n      }\n    }\n    formatChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)maxFieldWidth) {\n      tempNum2 = tempNum2 & 0xffffff7f;\n    }\n    tempNum3 = (uint)var19 | (uint)var22;\njoined_r0x00082adc:\n    tempPtr2 = CONCAT44(var22,var19);\n    tempPtr = maxFieldWidth;\n    if ((tempNum3 == 0) && (maxFieldWidth == (int *******)0x0)) {\n      pptrTemp5 = (int ********)formatBuffer;\n      if ((result != 0) || (!isAlternate)) goto LAB_00082b04;\n      pptrTemp5 = (int ********)(&cStack_6a + 1);\n      tempChar3 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (var22 != (int *)0x0 || (int *)0x9 < var19) {\n        pptrTemp1 = (int ********)(&cStack_6a + 1);\n        do {\n          pptrTemp5 = pptrTemp1;\n          tempNum5 = (undefined4)((ulonglong)tempPtr2 >> 0x20);\n          tempChar = '\\n';\n          check_subtraction_result_00084530((int)tempPtr2,tempNum5,10,0);\n          *(char *)pptrTemp5 = tempChar + '0';\n          tempPtr2 = check_subtraction_result_00084530((int)tempPtr2,tempNum5,10,0);\n          pptrTemp1 = (int ********)((int)pptrTemp5 + -1);\n        } while (tempPtr2 != 0);\n        maxFieldWidth = (int *******)((int)formatBuffer - (int)pptrTemp5);\n        goto LAB_00082b04;\n      }\n      tempChar3 = (char)var19 + '0';\n      pptrTemp5 = (int ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    pptrTemp1 = (int ********)(&cStack_6a + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      pptrTemp5 = pptrTemp1;\n      tempNum3 = (uint)var19 & 0xf;\n      var19 = (int *)((uint)var19 >> 4 | (int)var22 << 0x1c);\n      var22 = (int *)((uint)var22 >> 4);\n      *(char *)pptrTemp5 = hexChars[tempNum3];\n      pptrTemp1 = (int ********)((int)pptrTemp5 + -1);\n    } while (((uint)var19 | (uint)var22) != 0);\n    maxFieldWidth = (int *******)((int)formatBuffer - (int)pptrTemp5);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (argPointer != (int *******)0x0) {\n    process_data_00082824(input1,input2,&argList);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(input2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalCharsWritten;\nLAB_000830e2:\n  do {\n    pptrTemp5 = pptrTemp1;\n    var7 = (int *)((uint)var19 >> 3 | (int)var22 << 0x1d);\n    var22 = (int *)((uint)var22 >> 3);\n    result = ((uint)var19 & 7) + 0x30;\n    *(char *)pptrTemp5 = (char)result;\n    pptrTemp1 = (int ********)((int)pptrTemp5 + -1);\n    var19 = var7;\n  } while (((uint)var7 | (uint)var22) != 0);\n  if (isAlternate) {\n    if (result == 0x30) {\nLAB_00082afe:\n      maxFieldWidth = (int *******)((int)formatBuffer - (int)pptrTemp5);\n    }\n    else {\n      *(undefined *)((int)pptrTemp5 + -1) = 0x30;\n      pptrTemp5 = pptrTemp1;\n      maxFieldWidth = (int *******)((int)formatBuffer - (int)pptrTemp1);\n    }\n  }\n  else {\nLAB_00083282:\n    maxFieldWidth = (int *******)((int)formatBuffer - (int)pptrTemp5);\n  }\nLAB_00082b04:\n  minFieldWidth = maxFieldWidth;\n  if ((int)maxFieldWidth < (int)tempPtr) {\n    minFieldWidth = tempPtr;\n  }\n  if (signChar != '\\0') {\n    minFieldWidth = (int *******)((int)minFieldWidth + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPad) {\n    minFieldWidth = (int *******)((int)minFieldWidth + 2);\n  }\n  if ((tempNum2 == 0) &&\n     (ptrTemp2 = (int *******)((int)ptrTemp3 - (int)minFieldWidth), 0 < (int)ptrTemp2)) {\n    if ((int)ptrTemp2 < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        ptrTemp4 = ptrTemp2;\n        result = argCount + 1;\n        argPointer = argPointer + 4;\n        *args = (int *******)0x856f0;\n        args[1] = (int *******)0x10;\n        if (result < 8) {\n          count = argCount + 2;\n          args = args + 2;\n          argCount = result;\n        }\n        else if (argPointer == (int *******)0x0) {\n          count = 1;\n          args = (int ********)formatBuffer;\n          argCount = 0;\n        }\n        else {\n          argCount = result;\n          result = process_data_00082824(input1,input2,&argList);\n          if (result != 0) goto LAB_00083142;\n          count = argCount + 1;\n          args = (int ********)formatBuffer;\n        }\n        ptrTemp2 = ptrTemp4 + -4;\n      } while (0x10 < (int)ptrTemp2);\n      ptrTemp2 = ptrTemp4 + -4;\n      argCount = count;\n    }\n    argPointer = (int *******)((int)argPointer + (int)ptrTemp2);\n    *args = (int *******)0x856f0;\n    args[1] = ptrTemp2;\n    if (argCount < 8) {\n      result = argCount + 1;\n      args = args + 2;\n    }\n    else if (argPointer == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      args = (int ********)formatBuffer;\n    }\n    else {\n      result = process_data_00082824(input1,input2,&argList);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      args = (int ********)formatBuffer;\n    }\n  }\n  else {\n    result = argCount + 1;\n  }\n  count = result;\n  if (formatChar != '\\0') {\n    argPointer = (int *******)((int)argPointer + 1);\n    count = 1;\n    *args = (int *******)&formatChar;\n    args[1] = (int *******)0x1;\n    argCount = result;\n    if (result < 8) {\n      count = result + 1;\n      args = args + 2;\n    }\n    else if (argPointer == (int *******)0x0) {\n      argCount = 0;\n      args = (int ********)formatBuffer;\n    }\n    else {\n      result = process_data_00082824(input1,input2,&argList);\n      if (result != 0) goto LAB_00083142;\n      count = argCount + 1;\n      args = (int ********)formatBuffer;\n    }\n  }\n  result = count;\n  index = argCount;\n  if (isZeroPad) {\n    argPointer = (int *******)((int)argPointer + 2);\n    *args = (int *******)&zeroPadChar;\n    args[1] = (int *******)0x2;\n    if (count < 8) {\n      result = count + 1;\n      index = count;\n      args = args + 2;\n    }\n    else if (argPointer == (int *******)0x0) {\n      result = 1;\n      index = 0;\n      args = (int ********)formatBuffer;\n    }\n    else {\n      argCount = count;\n      result = process_data_00082824(input1,input2,&argList);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      index = argCount;\n      args = (int ********)formatBuffer;\n    }\n  }\n  argCount = index;\n  if ((tempNum2 == 0x80) &&\n     (ptrTemp2 = (int *******)((int)ptrTemp3 - (int)minFieldWidth), 0 < (int)ptrTemp2)) {\n    if (0x10 < (int)ptrTemp2) {\n      do {\n        while( true ) {\n          ptrTemp4 = ptrTemp2;\n          argCount = index + 1;\n          argPointer = argPointer + 4;\n          *args = (int *******)\"0000000000000000\";\n          args[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = index + 2;\n          args = args + 2;\nLAB_000831f2:\n          index = argCount;\n          ptrTemp2 = ptrTemp4 + -4;\n          if ((int)(ptrTemp4 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (argPointer != (int *******)0x0) {\n          result = process_data_00082824(input1,input2,&argList);\n          if (result == 0) {\n            result = argCount + 1;\n            args = (int ********)formatBuffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        index = 0;\n        ptrTemp2 = ptrTemp4 + -4;\n        args = (int ********)formatBuffer;\n      } while (0x10 < (int)(ptrTemp4 + -4));\nLAB_00083218:\n      ptrTemp2 = ptrTemp4 + -4;\n    }\n    argPointer = (int *******)((int)argPointer + (int)ptrTemp2);\n    *args = (int *******)\"0000000000000000\";\n    args[1] = ptrTemp2;\n    argCount = result;\n    if (result < 8) {\n      result = result + 1;\n      args = args + 2;\n    }\n    else if (argPointer == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      args = (int ********)formatBuffer;\n    }\n    else {\n      result = process_data_00082824(input1,input2,&argList);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      args = (int ********)formatBuffer;\n    }\n  }\n  tempPtr = (int *******)((int)tempPtr - (int)maxFieldWidth);\n  pptrTemp1 = (int ********)formatBuffer;\n  if ((int)tempPtr < 1) {\nLAB_0008302a:\n    argPointer = (int *******)((int)argPointer + (int)maxFieldWidth);\n    *args = (int *******)pptrTemp5;\n    args[1] = maxFieldWidth;\n    maxFieldWidth = argPointer;\n    argCount = result;\n    if (result < 8) goto LAB_000831be;\n    if (argPointer == (int *******)0x0) {\n      argCount = 0;\n    }\n    else {\n      result = process_data_00082824(input1,input2,&argList);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    count = argCount;\n    if (0x10 < (int)tempPtr) {\n      do {\n        while( true ) {\n          ptrTemp2 = tempPtr;\n          argCount = count + 1;\n          argPointer = argPointer + 4;\n          *args = (int *******)\"0000000000000000\";\n          args[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = count + 2;\n          args = args + 2;\nLAB_00082fe6:\n          count = argCount;\n          tempPtr = ptrTemp2 + -4;\n          if ((int)(ptrTemp2 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (argPointer != (int *******)0x0) {\n          result = process_data_00082824(input1,input2,&argList);\n          if (result == 0) {\n            result = argCount + 1;\n            args = (int ********)formatBuffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        args = (int ********)formatBuffer;\n        count = 0;\n        tempPtr = ptrTemp2 + -4;\n      } while (0x10 < (int)(ptrTemp2 + -4));\nLAB_0008300e:\n      tempPtr = ptrTemp2 + -4;\n    }\n    argPointer = (int *******)((int)argPointer + (int)tempPtr);\n    *args = (int *******)\"0000000000000000\";\n    args[1] = tempPtr;\n    if (result < 8) {\n      result = result + 1;\n      args = args + 2;\n      goto LAB_0008302a;\n    }\n    if (argPointer != (int *******)0x0) {\n      argCount = result;\n      result = process_data_00082824(input1,input2,&argList);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      args = (int ********)formatBuffer;\n      goto LAB_0008302a;\n    }\n    local_64[0] = maxFieldWidth;\n    argCount = 1;\n    args = (int ********)formatBuffer;\n    formatBuffer = (undefined  [4])pptrTemp5;\nLAB_000831be:\n    pptrTemp1 = args + 2;\n    argPointer = maxFieldWidth;\n  }\n  if (((tempNum2 & 4) != 0) &&\n     (tempPtr = (int *******)((int)ptrTemp3 - (int)minFieldWidth), 0 < (int)tempPtr)) {\n    result = argCount;\n    if ((int)tempPtr < 0x11) {\n      count = argCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argCount = result + 1;\n          argPointer = argPointer + 4;\n          *pptrTemp1 = (int *******)0x856f0;\n          pptrTemp1[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          count = result + 2;\n          pptrTemp1 = pptrTemp1 + 2;\nLAB_0008307a:\n          tempPtr = tempPtr + -4;\n          result = argCount;\n          if ((int)tempPtr < 0x11) goto LAB_000830a2;\n        }\n        if (argPointer != (int *******)0x0) {\n          result = process_data_00082824(input1,input2,&argList);\n          if (result == 0) {\n            count = argCount + 1;\n            pptrTemp1 = (int ********)formatBuffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        tempPtr = tempPtr + -4;\n        count = 1;\n        result = 0;\n        pptrTemp1 = (int ********)formatBuffer;\n      } while (0x10 < (int)tempPtr);\n    }\nLAB_000830a2:\n    argPointer = (int *******)((int)argPointer + (int)tempPtr);\n    *pptrTemp1 = (int *******)0x856f0;\n    pptrTemp1[1] = tempPtr;\n    argCount = count;\n    if (7 < count) {\n      if (argPointer == (int *******)0x0) {\n        if ((int)minFieldWidth < (int)ptrTemp3) {\n          minFieldWidth = ptrTemp3;\n        }\n        totalCharsWritten = totalCharsWritten + (int)minFieldWidth;\n        goto LAB_00083186;\n      }\n      result = process_data_00082824(input1,input2,&argList);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)minFieldWidth < (int)ptrTemp3) {\n    minFieldWidth = ptrTemp3;\n  }\n  totalCharsWritten = totalCharsWritten + (int)minFieldWidth;\n  if ((argPointer != (int *******)0x0) &&\n     (result = process_data_00082824(input1,input2,&argList), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  argCount = 0;\n  args = (int ********)formatBuffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  tempNum1 = tempNum3 - 0x30;\n  ptrTemp3 = (int *******)0x0;\n  tempPtr = formatString;\n  do {\n    formatString = (int *******)((int)tempPtr + 1);\n    tempNum3 = (uint)*(byte *)tempPtr;\n    ptrTemp3 = (int *******)(tempNum1 + (int)ptrTemp3 * 10);\n    tempNum1 = tempNum3 - 0x30;\n    tempPtr = formatString;\n  } while (tempNum1 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  tempNum3 = (uint)*(byte *)formatString;\n  if (formatChar == '\\0') {\n    formatChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "parse_format_string_0008289c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "formatString",
                "param_4": "data",
                "bVar1": "isSigned",
                "bVar2": "isLong",
                "bVar3": "isAlternate",
                "cVar4": "signChar",
                "bVar5": "isZeroPad",
                "ppppppppiVar6": "args",
                "piVar7": "var7",
                "iVar8": "result",
                "cVar9": "tempChar",
                "pppppppiVar10": "tempPtr",
                "uVar11": "tempNum1",
                "ppiVar12": "ptrArray",
                "uVar13": "tempNum2",
                "uVar14": "tempNum3",
                "iVar15": "count",
                "pppppppiVar16": "ptrTemp1",
                "iVar17": "index",
                "pppppppiVar18": "ptrTemp2",
                "piVar19": "var19",
                "pppppppiVar20": "ptrTemp3",
                "uVar21": "tempNum4",
                "piVar22": "var22",
                "pppppppiVar23": "ptrTemp4",
                "uVar24": "tempNum5",
                "pppppppiVar25": "ptrTemp5",
                "bVar26": "isNegative",
                "lVar27": "tempPtr2",
                "local_dc": "minFieldWidth",
                "local_d4": "maxFieldWidth",
                "local_c8": "currentArg",
                "local_c4": "totalCharsWritten",
                "local_c0": "hexChars",
                "local_a1": "formatChar",
                "local_a0": "zeroPadChar",
                "local_9f": "hexPrintLower",
                "local_9c": "argList",
                "local_98": "argCount",
                "local_94": "argPointer",
                "local_90": "tempChar2",
                "local_69": "tempChar3",
                "local_68": "formatBuffer"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint process_data_000834f0(undefined4 input_param,int binary_offset)\n\n{\n  int result;\n  int data_processing_result;\n  undefined *stack_buffers [2];\n  undefined4 buffer_size_1;\n  ushort modified_value;\n  undefined2 extracted_value;\n  undefined *buffer_address;\n  undefined4 buffer_size_2;\n  undefined4 flag;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined data_buffer [1024];\n  \n  value_3 = *(undefined4 *)(binary_offset + 100);\n  value_1 = *(undefined4 *)(binary_offset + 0x1c);\n  extracted_value = *(undefined2 *)(binary_offset + 0xe);\n  value_2 = *(undefined4 *)(binary_offset + 0x24);\n  stack_buffers[0] = data_buffer;\n  modified_value = *(ushort *)(binary_offset + 0xc) & 0xfffd;\n  buffer_size_1 = 0x400;\n  buffer_size_2 = 0x400;\n  flag = 0;\n  buffer_address = stack_buffers[0];\n  result = parse_format_string_0008289c(input_param,stack_buffers);\n  if ((-1 < result) && (data_processing_result = process_data_000834f0_00083850(input_param,stack_buffers), data_processing_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)modified_value << 0x19) < 0) {\n    *(ushort *)(binary_offset + 0xc) = *(ushort *)(binary_offset + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "input_param",
                "param_2": "binary_offset",
                "iVar1": "result",
                "iVar2": "data_processing_result",
                "local_488": "stack_buffers",
                "local_480": "buffer_size_1",
                "local_47c": "modified_value",
                "local_47a": "extracted_value",
                "local_478": "buffer_address",
                "local_474": "buffer_size_2",
                "local_470": "flag",
                "local_46c": "value_1",
                "local_464": "value_2",
                "local_424": "value_3",
                "auStack_420": "data_buffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_and_check_relocation_0008356c",
            "code": "\nundefined4 initialize_and_check_relocation_0008356c(undefined4 *status,int *relocation_data)\n\n{\n  int value;\n  int value;\n  uint relocation_value;\n  ushort relocation_flags;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  relocation_flags = *(ushort *)(relocation_data + 3);\n  relocation_value = (uint)relocation_flags;\n  if ((int)(relocation_value << 0x1c) < 0) {\n    value = relocation_data[4];\n  }\n  else {\n    if (-1 < (int)(relocation_value << 0x1b)) {\n      *status = 9;\n      *(ushort *)(relocation_data + 3) = relocation_flags | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(relocation_value << 0x1d) < 0) {\n      if ((int *)relocation_data[0xc] != (int *)0x0) {\n        if ((int *)relocation_data[0xc] != relocation_data + 0x10) {\n          reorder_relocations_00083b10(status);\n          relocation_flags = *(ushort *)(relocation_data + 3);\n        }\n        relocation_data[0xc] = 0;\n      }\n      value = relocation_data[4];\n      relocation_flags = relocation_flags & 0xffdb;\n      *relocation_data = value;\n      relocation_data[1] = 0;\n    }\n    else {\n      value = relocation_data[4];\n    }\n    *(ushort *)(relocation_data + 3) = relocation_flags | 8;\n    relocation_value = (uint)(relocation_flags | 8);\n  }\n  if ((value == 0) && ((relocation_value & 0x280) != 0x200)) {\n    initialize_program_00084018(status,relocation_data);\n    relocation_value = (uint)*(ushort *)(relocation_data + 3);\n    value = relocation_data[4];\n  }\n  if ((relocation_value & 1) == 0) {\n    value = 0;\n    if (-1 < (int)(relocation_value << 0x1e)) {\n      value = relocation_data[5];\n    }\n    relocation_data[2] = value;\n  }\n  else {\n    relocation_data[6] = -relocation_data[5];\n    relocation_data[2] = 0;\n  }\n  if ((value == 0) && ((int)((uint)*(ushort *)(relocation_data + 3) << 0x18) < 0)) {\n    *(ushort *)(relocation_data + 3) = *(ushort *)(relocation_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_and_check_relocation_0008356c",
                "param_1": "status",
                "param_2": "relocation_data",
                "iVar1": "value",
                "iVar2": "value",
                "uVar3": "relocation_value",
                "uVar4": "relocation_flags"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_relocation_entries_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeRelocationEntries_000836ec(void)\n\n{\n  dword *relocatedEntriesPointer;\n  dword exitStatus;\n  int index;\n  code *jumpTableFunction;\n  \n  execute_function_000841e4(6);\n  jumpTableFunction = (code *)0x836fb;\n  exitStatus = exit_with_status_00080eec(1);\n  if (relocationEntries[48].r_offset == 0) {\n    relocationEntries[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(relocationEntries[48].r_offset + 4);\n  relocatedEntriesPointer = (dword *)relocationEntries[48].r_offset;\n  if (0x1f < index) {\n    relocatedEntriesPointer = (dword *)process_relocated_entries_000817f0(400);\n    if (relocatedEntriesPointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunction)(0xffffffff);\n      return;\n    }\n    *relocatedEntriesPointer = relocationEntries[48].r_offset;\n    relocatedEntriesPointer[1] = 0;\n    index = 0;\n    relocationEntries[48].r_offset = (dword)relocatedEntriesPointer;\n    relocatedEntriesPointer[0x62] = 0;\n    relocatedEntriesPointer[99] = 0;\n  }\n  relocatedEntriesPointer[1] = index + 1;\n  relocatedEntriesPointer[index + 2] = exitStatus;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunction)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_relocation_entries_000836ec",
                "pdVar1": "relocatedEntriesPointer",
                "dVar2": "exitStatus",
                "iVar3": "index",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunction",
                "Elf32_Rel_ARRAY_20070000": "relocationEntries"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *inputArray,int *outputArray)\n\n{\n  int *tempPtr1;\n  int tempVar1;\n  ushort tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  code *functionPtr;\n  undefined4 statusVar;\n  int tempVar5;\n  \n  if ((inputArray != (int *)0x0) && (inputArray[0xe] == 0)) {\n    initialize_data_structures_00083888();\n  }\n  if (*(short *)(outputArray + 3) == 0) {\n    return 0;\n  }\n  tempVar2 = *(ushort *)(outputArray + 3);\n  if ((int)((uint)tempVar2 << 0x1c) < 0) {\n    tempVar5 = outputArray[4];\n    if (tempVar5 == 0) {\n      return 0;\n    }\n    tempVar1 = *outputArray;\n    if ((tempVar2 & 3) == 0) {\n      tempVar4 = outputArray[5];\n    }\n    else {\n      tempVar4 = 0;\n    }\n    *outputArray = tempVar5;\n    tempVar1 = tempVar1 - tempVar5;\n    outputArray[2] = tempVar4;\n    do {\n      if (tempVar1 < 1) {\n        return 0;\n      }\n      tempVar4 = (*(code *)outputArray[9])(inputArray,outputArray[7],tempVar5,tempVar1,statusVar);\n      tempVar1 = tempVar1 - tempVar4;\n      tempVar5 = tempVar5 + tempVar4;\n    } while (0 < tempVar4);\nLAB_000837c8:\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(outputArray + 3) = tempVar2 | 0x800;\n  if ((outputArray[1] < 1) && (outputArray[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)outputArray[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  tempVar3 = (uint)(tempVar2 | 0x800);\n  tempVar5 = *inputArray;\n  *inputArray = 0;\n  if ((tempVar2 & 0x1000) == 0) {\n    tempVar1 = (*functionPtr)(inputArray,outputArray[7],tempVar3 & 0x1000,1);\n    if ((tempVar1 == -1) && (tempVar4 = *inputArray, tempVar4 != 0)) {\n      if ((tempVar4 == 0x1d) || (tempVar4 == 0x16)) {\n        *inputArray = tempVar5;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    tempVar3 = (uint)*(ushort *)(outputArray + 3);\n    functionPtr = (code *)outputArray[10];\n  }\n  else {\n    tempVar1 = outputArray[0x14];\n  }\n  if (((int)(tempVar3 << 0x1d) < 0) && (tempVar1 = tempVar1 - outputArray[1], outputArray[0xc] != 0)) {\n    tempVar1 = tempVar1 - outputArray[0xf];\n  }\n  tempVar1 = (*functionPtr)(inputArray,outputArray[7],tempVar1,0);\n  if (tempVar1 == -1) {\n    tempVar4 = *inputArray;\n    if (tempVar4 != 0) {\n      if ((tempVar4 != 0x1d) && (tempVar4 != 0x16)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xf7ff;\n      *outputArray = outputArray[4];\n      outputArray[1] = 0;\n      goto LAB_00083774;\n    }\n    tempVar2 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    outputArray[1] = 0;\n    *(ushort *)(outputArray + 3) = tempVar2;\n    *outputArray = outputArray[4];\n  }\n  else {\n    tempVar2 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    *outputArray = outputArray[4];\n    *(ushort *)(outputArray + 3) = tempVar2;\n    outputArray[1] = 0;\n  }\n  if ((int)((uint)tempVar2 << 0x13) < 0) {\n    outputArray[0x14] = tempVar1;\n  }\nLAB_00083774:\n  tempPtr1 = (int *)outputArray[0xc];\n  *inputArray = tempVar5;\n  if (tempPtr1 == (int *)0x0) {\n    return 0;\n  }\n  if (tempPtr1 != outputArray + 0x10) {\n    reorder_relocations_00083b10(inputArray);\n  }\n  outputArray[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "piVar1": "tempPtr1",
                "iVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "iVar5": "tempVar4",
                "pcVar6": "functionPtr",
                "unaff_r4": "statusVar",
                "iVar7": "tempVar5"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructures)\n\n{\n  undefined4 *pointer1;\n  undefined4 *pointer2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    pointer1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(pointer1 + 3) = 4;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    *(undefined2 *)((int)pointer1 + 0xe) = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    fill_memory_00081f00(pointer1 + 0x17,0,8);\n    pointer2 = *(undefined4 **)(dataStructures + 8);\n    pointer1[7] = pointer1;\n    pointer1[8] = 0x84221;\n    pointer1[9] = 0x84245;\n    pointer1[10] = 0x8427d;\n    pointer1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)pointer2 + 0xe) = 1;\n    *(undefined2 *)(pointer2 + 3) = 9;\n    *pointer2 = 0;\n    pointer2[1] = 0;\n    pointer2[2] = 0;\n    pointer2[0x19] = 0;\n    pointer2[4] = 0;\n    pointer2[5] = 0;\n    pointer2[6] = 0;\n    fill_memory_00081f00(pointer2 + 0x17,0,8);\n    pointer1 = *(undefined4 **)(dataStructures + 0xc);\n    pointer2[7] = pointer2;\n    pointer2[8] = 0x84221;\n    pointer2[9] = 0x84245;\n    pointer2[10] = 0x8427d;\n    pointer2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(pointer1 + 3) = 0x12;\n    *(undefined2 *)((int)pointer1 + 0xe) = 2;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    fill_memory_00081f00(pointer1 + 0x17,0,8);\n    pointer1[7] = pointer1;\n    pointer1[8] = 0x84221;\n    pointer1[9] = 0x84245;\n    pointer1[10] = 0x8427d;\n    pointer1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructures",
                "puVar1": "pointer1",
                "puVar2": "pointer2"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 offset,uint length,byte **data)\n\n{\n  int relocationOffset;\n  uint result;\n  uint byteValue;\n  byte *currentByte;\n  uint index;\n  byte tempByte;\n  byte stackBytes [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  relocationOffset = get_relocation_offset_0008400c();\n  if ((relocationOffset == 1) && (length - 1 < 0xff)) {\n    byteValue = length & 0xff;\n    tempByte = (byte)byteValue;\n    result = 1;\n  }\n  else {\n    result = execute_function_0008434c(offset,&tempByte,length,data + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return length;\n    }\n    byteValue = (uint)tempByte;\n  }\n  index = 0;\n  do {\n    currentByte = data[2] + -1;\n    data[2] = currentByte;\n    if ((int)currentByte < 0) {\n      if ((int)data[6] <= (int)currentByte) {\n        **data = (byte)byteValue;\n        currentByte = *data;\n        byteValue = (uint)*currentByte;\n        if (byteValue != 10) goto LAB_00083a04;\n      }\n      relocationOffset = process_input_000842a4(offset,byteValue,data);\n      if (relocationOffset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)byteValue;\n      currentByte = *data;\nLAB_00083a04:\n      *data = currentByte + 1;\n    }\n    if (result <= index + 1) {\n      return length;\n    }\n    byteValue = (uint)stackBytes[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "offset",
                "param_2": "length",
                "param_3": "data",
                "iVar1": "relocationOffset",
                "uVar2": "result",
                "uVar3": "byteValue",
                "pbVar4": "currentByte",
                "uVar5": "index",
                "local_1c": "tempByte",
                "abStack_1b": "stackBytes"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "process_relocation_00083a74",
            "code": "\nundefined4 processRelocation_00083a74(undefined4 param,int offset)\n\n{\n  int result;\n  uint relOffset;\n  int newOffset;\n  \n  FUNC_00081f94();\n  relOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((relOffset - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result = update_and_return_result_0008236c(param,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relOffset) {\n      result = update_and_return_result_0008236c(param,-newOffset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relOffset - newOffset | 1;\n        FUNC_00081f98(param);\n        return 1;\n      }\n      newOffset = update_and_return_result_0008236c(param,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "process_relocation_00083a74",
                "param_1": "param",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "relOffset",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "reorder_relocations_00083b10",
            "code": "\nvoid reorderRelocations_00083b10(undefined4 arg1,int arg2)\n\n{\n  int index1;\n  bool isVar2True;\n  uint flag;\n  dword currentRelocation;\n  int index2;\n  uint offset;\n  dword prevRelocation;\n  uint newOffset;\n  dword oldOffset;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  flag = *(uint *)(arg2 + -4);\n  prevRelocation = arg2 - 8;\n  offset = flag & 0xfffffffe;\n  currentRelocation = prevRelocation + offset;\n  newOffset = *(uint *)(currentRelocation + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentRelocation) {\n    newOffset = newOffset + offset;\n    if (-1 < (int)(flag << 0x1f)) {\n      prevRelocation = prevRelocation - *(int *)(arg2 + -8);\n      index2 = *(int *)(prevRelocation + 0xc);\n      index1 = *(int *)(prevRelocation + 8);\n      newOffset = newOffset + *(int *)(arg2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    currentRelocation = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(prevRelocation + 4) = newOffset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = prevRelocation;\n    if (currentRelocation <= newOffset) {\n      process_relocation_00083a74(arg1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(currentRelocation + 4) = newOffset;\n    if ((flag & 1) == 0) {\n      prevRelocation = prevRelocation - *(int *)(arg2 + -8);\n      index1 = *(int *)(prevRelocation + 8);\n      offset = offset + *(int *)(arg2 + -8);\n      if (index1 == 0x2007046c) {\n        isVar2True = true;\n      }\n      else {\n        index2 = *(int *)(prevRelocation + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isVar2True = false;\n      }\n    }\n    else {\n      isVar2True = false;\n    }\n    if (-1 < *(int *)(currentRelocation + newOffset + 4) << 0x1f) {\n      offset = offset + newOffset;\n      index1 = *(int *)(currentRelocation + 8);\n      if ((!isVar2True) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = prevRelocation;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = prevRelocation;\n        *(undefined4 *)(prevRelocation + 0xc) = 0x2007046c;\n        *(undefined4 *)(prevRelocation + 8) = 0x2007046c;\n        *(uint *)(prevRelocation + 4) = offset | 1;\n        *(uint *)(prevRelocation + offset) = offset;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(currentRelocation + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(prevRelocation + 4) = offset | 1;\n    *(uint *)(prevRelocation + offset) = offset;\n    if (!isVar2True) {\n      if (offset < 0x200) {\n        flag = offset & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flag);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(prevRelocation + 8) = index1;\n        *(uint *)(prevRelocation + 0xc) = flag + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flag) = prevRelocation;\n        *(dword *)(index1 + 0xc) = prevRelocation;\n        FUNC_00081f98(arg1);\n        return;\n      }\n      flag = offset >> 9;\n      if (flag < 5) {\n        index1 = (offset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x15) {\n        index1 = flag + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x55) {\n        index1 = (offset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x155) {\n        index1 = (offset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x555) {\n        index1 = (offset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      oldOffset = index2 * 4 + 0x20070464;\n      currentRelocation = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (currentRelocation == oldOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        oldOffset = currentRelocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentRelocation + 4) & 0xfffffffc) <= offset) break;\n          currentRelocation = *(dword *)(currentRelocation + 8);\n        } while (oldOffset != currentRelocation);\n        oldOffset = *(dword *)(currentRelocation + 0xc);\n      }\n      *(dword *)(prevRelocation + 0xc) = oldOffset;\n      *(dword *)(prevRelocation + 8) = currentRelocation;\n      *(dword *)(oldOffset + 8) = prevRelocation;\n      *(dword *)(currentRelocation + 0xc) = prevRelocation;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "reorder_relocations_00083b10",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "index1",
                "bVar2": "isVar2True",
                "uVar3": "flag",
                "dVar4": "currentRelocation",
                "iVar5": "index2",
                "uVar6": "offset",
                "dVar7": "prevRelocation",
                "uVar8": "newOffset",
                "dVar9": "oldOffset"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int errorCode;\n  uint var1;\n  uint var2;\n  ushort flag;\n  uint tempVar;\n  uint *ptrVar1;\n  uint *ptrVar2;\n  uint count;\n  uint size;\n  uint offset;\n  uint reorderedSize;\n  uint localVar;\n  \n  if (param_3[2] != (uint *)0x0) {\n    flag = *(ushort *)(param_2 + 3);\n    tempVar = (uint)flag;\n    if (((int)(tempVar << 0x1c) < 0) && (param_2[4] != 0)) {\n      ptrVar2 = *param_3;\n    }\n    else {\n      errorCode = initializeAndCheckRelocation(param_1,param_2);\n      if (errorCode != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(param_2 + 3);\n      tempVar = (uint)flag;\n      ptrVar2 = *param_3;\n    }\n    if ((flag & 2) == 0) {\n      var1 = tempVar & 2;\n      offset = var1;\n      count = var1;\n      localVar = var1;\n      if ((tempVar & 1) == 0) {\n        var1 = 0;\n        offset = 0;\n        while( true ) {\n          while (var1 == 0) {\n            offset = *ptrVar2;\n            ptrVar1 = ptrVar2 + 1;\n            ptrVar2 = ptrVar2 + 2;\n            var1 = *ptrVar1;\n          }\n          count = param_2[2];\n          if ((int)(tempVar << 0x16) < 0) {\n            if (var1 < count) {\n              tempVar = *param_2;\n              count = var1;\n            }\n            else if ((tempVar & 0x480) == 0) {\n              tempVar = *param_2;\n            }\n            else {\n              errorCode = *param_2 - param_2[4];\n              count = errorCode + 1 + var1;\n              size = (int)(param_2[5] * 3) / 2;\n              if (count <= size) {\n                count = size;\n              }\n              if ((int)(tempVar << 0x15) < 0) {\n                size = processRelocationEntries(param_1,count);\n                if (size == 0) {\n                  *param_1 = 0xc;\n                  flag = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                copyData(size,param_2[4],errorCode);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = reorderRelocations(param_1);\n                if (size == 0) {\n                  anotherReorderRelocations(param_1,param_2[4]);\n                  flag = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              tempVar = size + errorCode;\n              param_2[4] = size;\n              param_2[5] = count;\n              *param_2 = tempVar;\n              param_2[2] = count - errorCode;\n              count = var1;\n            }\n            reverseCopy(tempVar,offset,count);\n            param_2[2] = param_2[2] - count;\n            *param_2 = *param_2 + count;\n            count = var1;\n          }\n          else if ((param_2[4] < *param_2) || (tempVar = param_2[5], var1 < tempVar)) {\n            if (var1 < count) {\n              count = var1;\n            }\n            reverseCopy(*param_2,offset,count);\n            tempVar = param_2[2];\n            param_2[2] = tempVar - count;\n            *param_2 = *param_2 + count;\n            if ((tempVar - count == 0) && (errorCode = processData_00083ca8Again(param_1,param_2), errorCode != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            count = 0x7fffffff;\n            if (var1 < 0x7fffffff) {\n              count = var1;\n            }\n            count = (*(code *)param_2[9])(param_1,param_2[7],offset,(count / tempVar) * tempVar);\n            if ((int)count < 1) goto LAB_00083da2;\n          }\n          ptrVar1 = param_3[2];\n          offset = offset + count;\n          var1 = var1 - count;\n          param_3[2] = (uint *)((int)ptrVar1 - count);\n          if ((uint *)((int)ptrVar1 - count) == (uint *)0x0) break;\n          tempVar = (uint)*(ushort *)(param_2 + 3);\n        }\n      }\n      else {\n        do {\n          while (var1 == 0) {\n            count = *ptrVar2;\n            var1 = ptrVar2[1];\n            localVar = 0;\n            ptrVar2 = ptrVar2 + 2;\n          }\n          if (localVar == 0) {\n            errorCode = findCharacter(count,10,var1);\n            if (errorCode == 0) {\n              offset = var1 + 1;\n              localVar = 1;\n            }\n            else {\n              offset = (errorCode + 1) - count;\n              localVar = 1;\n            }\n          }\n          size = *param_2;\n          tempVar = offset;\n          if (var1 <= offset) {\n            tempVar = var1;\n          }\n          var2 = param_2[5];\n          if ((param_2[4] < size) && (reorderedSize = param_2[2] + var2, (int)reorderedSize < (int)tempVar)) {\n            reverseCopy(size,count,reorderedSize);\n            *param_2 = *param_2 + reorderedSize;\n            errorCode = processData_00083ca8Again(param_1,param_2);\n            if (errorCode != 0) goto LAB_00083da2;\n          }\n          else if ((int)tempVar < (int)var2) {\n            reverseCopy(size,count,tempVar);\n            param_2[2] = param_2[2] - tempVar;\n            *param_2 = tempVar + *param_2;\n            reorderedSize = tempVar;\n          }\n          else {\n            reorderedSize = (*(code *)param_2[9])(param_1,param_2[7],count,var2);\n            if ((int)reorderedSize < 1) goto LAB_00083da2;\n          }\n          offset = offset - reorderedSize;\n          if (offset == 0) {\n            errorCode = processData_00083ca8Again(param_1,param_2);\n            if (errorCode != 0) goto LAB_00083da2;\n            localVar = 0;\n          }\n          ptrVar1 = param_3[2];\n          count = count + reorderedSize;\n          var1 = var1 - reorderedSize;\n          param_3[2] = (uint *)((int)ptrVar1 - reorderedSize);\n        } while ((uint *)((int)ptrVar1 - reorderedSize) != (uint *)0x0);\n      }\n    }\n    else {\n      var1 = 0;\n      tempVar = 0;\n      do {\n        while( true ) {\n          offset = tempVar;\n          if (0x7ffffbff < tempVar) {\n            offset = 0x7ffffc00;\n          }\n          if (tempVar != 0) break;\n          var1 = *ptrVar2;\n          tempVar = ptrVar2[1];\n          ptrVar2 = ptrVar2 + 2;\n        }\n        errorCode = (*(code *)param_2[9])(param_1,param_2[7],var1,offset);\n        if (errorCode < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptrVar1 = param_3[2];\n        var1 = var1 + errorCode;\n        tempVar = tempVar - errorCode;\n        param_3[2] = (uint *)((int)ptrVar1 - errorCode);\n      } while ((uint *)((int)ptrVar1 - errorCode) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "iVar1": "errorCode",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "flag",
                "uVar5": "tempVar",
                "puVar6": "ptrVar1",
                "puVar7": "ptrVar2",
                "uVar8": "count",
                "uVar9": "size",
                "uVar10": "offset",
                "uVar11": "reorderedSize",
                "local_2c": "localVar",
                "initialize_and_check_relocation_0008356c": "initializeAndCheckRelocation",
                "process_relocation_entries_00081810": "processRelocationEntries",
                "copy_data_00081d48": "copyData",
                "reorder_relocations_00081fac": "reorderRelocations",
                "reorder_relocations_00083b10": "anotherReorderRelocations",
                "reverse_copy_00081e34": "reverseCopy",
                "process_data_00083850": "processDataAgain",
                "find_character_000840f8": "findCharacter"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_initial_value_00084004",
            "code": "\nuint32_t getInitialValue_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_initial_value_00084004",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_relocation_offset_0008400c",
            "code": "\ndword getRelocationOffset_0008400c(void)\n\n{\n  return relocationTable[275].offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_program_00084018",
            "code": "\nvoid initializeProgram_00084018(int programHandle,int *programInfo)\n\n{\n  ushort relocationFlag;\n  int memoryResult;\n  int relocationResult;\n  uint relocationValue;\n  bool isRelocated;\n  undefined memoryBuffer [4];\n  uint relocationMask;\n  \n  relocationFlag = *(ushort *)(programInfo + 3);\n  relocationValue = (uint)relocationFlag;\n  if ((int)(relocationValue << 0x1e) < 0) {\n    *programInfo = (int)programInfo + 0x43;\n    programInfo[4] = (int)programInfo + 0x43;\n    programInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)programInfo + 0xe)) {\n    memoryResult = initialize_and_check_memory_00084494(programHandle,(int)*(short *)((int)programInfo + 0xe),memoryBuffer);\n    if (-1 < memoryResult) {\n      isRelocated = (relocationMask & 0xf000) == 0x2000;\n      if (((relocationMask & 0xf000) == 0x8000) && (programInfo[10] == 0x8427d)) {\n        memoryResult = 0x400;\n        *(ushort *)(programInfo + 3) = *(ushort *)(programInfo + 3) | 0x400;\n        programInfo[0x13] = 0x400;\n      }\n      else {\n        memoryResult = 0x400;\n        *(ushort *)(programInfo + 3) = *(ushort *)(programInfo + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    relocationFlag = *(ushort *)(programInfo + 3);\n    relocationValue = (uint)relocationFlag;\n  }\n  *(ushort *)(programInfo + 3) = relocationFlag | 0x800;\n  if ((relocationValue & 0x80) == 0) {\n    memoryResult = 0x400;\n  }\n  else {\n    memoryResult = 0x40;\n  }\n  isRelocated = false;\nLAB_00084074:\n  relocationResult = process_relocation_entries_00081810(programHandle,memoryResult);\n  relocationFlag = *(ushort *)(programInfo + 3);\n  if (relocationResult == 0) {\n    if (-1 < (int)((uint)relocationFlag << 0x16)) {\n      *(ushort *)(programInfo + 3) = relocationFlag | 2;\n      *programInfo = (int)programInfo + 0x43;\n      programInfo[4] = (int)programInfo + 0x43;\n      programInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(programHandle + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(programInfo + 3) = relocationFlag | 0x80;\n    *programInfo = relocationResult;\n    programInfo[4] = relocationResult;\n    programInfo[5] = memoryResult;\n    if ((isRelocated) && (memoryResult = check_error_code_and_assign_000844bc(programHandle,(int)*(short *)((int)programInfo + 0xe)), memoryResult != 0))\n    {\n      *(ushort *)(programInfo + 3) = *(ushort *)(programInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_program_00084018",
                "param_1": "programHandle",
                "param_2": "programInfo",
                "uVar1": "relocationFlag",
                "iVar2": "memoryResult",
                "iVar3": "relocationResult",
                "uVar4": "relocationValue",
                "bVar5": "isRelocated",
                "auStack_54": "memoryBuffer",
                "local_50": "relocationMask"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_character_000840f8",
            "code": "\nuint * find_character_000840f8(uint *input_array,char character,uint array_length)\n\n{\n  uint result;\n  int index;\n  uint *ptr;\n  bool is_last_index;\n  \n  if (((uint)input_array & 3) == 0) {\ncheck_input_alignment:\n    if (3 < array_length) {\n      ptr = input_array;\n      do {\n        result = *ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        input_array = ptr;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        input_array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else if (*(char *)input_array != character) {\n      index = 0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto not_found;\n      } while (*(char *)input_array != character);\n    }\n  }\n  else if (array_length == 0) {\nnot_found:\n    input_array = (uint *)0x0;\n  }\n  else if (*(char *)input_array != character) {\n    ptr = (uint *)((int)input_array + 1);\n    array_length = array_length - 1;\n    do {\n      input_array = ptr;\n      if (((uint)input_array & 3) == 0) goto check_input_alignment;\n      if (array_length == 0) goto not_found;\n      ptr = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)input_array != character);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_character_000840f8",
                "param_1": "input_array",
                "param_2": "character",
                "param_3": "array_length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_index",
                "LAB_00084128": "check_input_alignment",
                "LAB_00084150": "not_found"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "execute_function_000841e4",
            "code": "\nint executeFunction_000841e4(uint index)\n\n{\n  dword relOffset;\n  undefined4 unsignedValue;\n  int functionPointer;\n  code *targetFunction;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 linkRegister;\n  undefined4 constantValue;\n  \n  relOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constantValue = 0x20070460;\n  if (0x1f < index) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  functionPointer = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((functionPointer == 0) || (targetFunction = *(code **)(functionPointer + index * 4), targetFunction == (code *)0x0)) {\n    unsignedValue = thunk_get_unsigned_value_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    functionPointer = FUNC_00080efc(unsignedValue,index,index,0,constantValue,register4,register5,linkRegister);\n    if ((functionPointer == -1) && (DAT_20071244 != 0)) {\n      *(int *)relOffset = DAT_20071244;\n      return -1;\n    }\n    return functionPointer;\n  }\n  if (targetFunction == (code *)0x1) {\n    return 0;\n  }\n  if (targetFunction != (code *)0xffffffff) {\n    *(undefined4 *)(functionPointer + index * 4) = 0;\n    (*targetFunction)(index);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "execute_function_000841e4",
                "param_1": "index",
                "dVar1": "relOffset",
                "uVar2": "unsignedValue",
                "iVar3": "functionPointer",
                "pcVar4": "targetFunction",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "linkRegister",
                "uVar5": "constantValue"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_default_value_thunk_00080efe",
            "code": "\nundefined4 get_default_value_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_default_value_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_values_00084220",
            "code": "\nvoid updateValues_00084220(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = initializeAndCheck(param1,(int)*(short *)(param2 + 0xe));\n  if (-1 < result) {\n    *(int *)(param2 + 0x50) = *(int *)(param2 + 0x50) + result;\n    return;\n  }\n  *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_values_00084220",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "initialize_and_check_00084508": "initializeAndCheck"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *result,int data,undefined4 param1,undefined4 param2)\n\n{\n  int copyResult;\n  ushort value;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 register6;\n  undefined4 linkRegister;\n  \n  value = *(ushort *)(data + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    initialize_and_check_result_000844e0(result,(int)*(short *)(data + 0xe),0,2);\n    value = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  copyResult = copy_bytes_00080ec8((int)*(short *)(data + 0xe),param1,param2,param2,register4,register5,\n                       register6,linkRegister);\n  if ((copyResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "copyResult",
                "uVar2": "value",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "unaff_r6": "register6",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "initialize_and_update_value_0008427c",
            "code": "\nvoid initialize_and_update_value_0008427c(undefined4 param,int input_ptr)\n\n{\n  int result;\n  ushort updated_value;\n  \n  result = initialize_and_check_result_000844e0(param,(int)*(short *)(input_ptr + 0xe));\n  if (result == -1) {\n    updated_value = *(ushort *)(input_ptr + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(input_ptr + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(input_ptr + 0x50) = result;\n  }\n  *(ushort *)(input_ptr + 0xc) = updated_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "initialize_and_update_value_0008427c",
                "param_1": "param",
                "param_2": "input_ptr",
                "iVar1": "result",
                "uVar2": "updated_value"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_input_000842a4",
            "code": "\nuint processInput_000842a4(int inputData,uint dataLength,undefined4 *outputData,undefined4 flag)\n\n{\n  ushort dataValue;\n  uint dataValue_uint;\n  undefined *ptr;\n  int index;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x38) == 0)) {\n    initializeDataStructures();\n  }\n  dataValue = *(ushort *)(outputData + 3);\n  dataValue_uint = (uint)dataValue;\n  outputData[2] = outputData[6];\n  if ((-1 < (int)(dataValue_uint << 0x1c)) || (index = outputData[4], index == 0)) {\n    index = initializeAndCheckRelocation(inputData,outputData,dataValue,dataValue_uint,flag);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    dataValue = *(ushort *)(outputData + 3);\n    index = outputData[4];\n    dataValue_uint = (uint)dataValue;\n  }\n  dataLength = dataLength & 0xff;\n  if ((int)(dataValue_uint << 0x12) < 0) {\n    ptr = (undefined *)*outputData;\n    index = (int)ptr - index;\n    if (index < (int)outputData[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    outputData[0x19] = outputData[0x19] & 0xffffdfff;\n    ptr = (undefined *)*outputData;\n    *(ushort *)(outputData + 3) = dataValue | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)outputData[5]) goto LAB_000842d6;\n  }\n  index = processData(inputData,outputData);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*outputData;\n  index = 1;\nLAB_000842d8:\n  outputData[2] = outputData[2] + -1;\n  *outputData = ptr + 1;\n  *ptr = (char)dataLength;\n  if (((outputData[5] == index) ||\n      (((int)((uint)*(ushort *)(outputData + 3) << 0x1f) < 0 && (dataLength == 10)))) &&\n     (index = processData(inputData,outputData), index != 0)) {\n    return 0xffffffff;\n  }\n  return dataLength;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_input_000842a4",
                "param_1": "inputData",
                "param_2": "dataLength",
                "param_3": "outputData",
                "param_4": "flag",
                "uVar1": "dataValue",
                "uVar2": "dataValue_uint",
                "puVar3": "ptr",
                "iVar4": "index",
                "initialize_data_structures_00083888": "initializeDataStructures",
                "initialize_and_check_relocation_0008356c": "initializeAndCheckRelocation",
                "process_data_00083850": "processData"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_function_0008434c",
            "code": "\nvoid executeFunction_0008434c(undefined4 *outParameter,int flag,undefined4 constantValue,undefined4 *result)\n\n{\n  dword relocationInfo;\n  undefined4 initialValue;\n  int returnValue;\n  undefined auxiliaryStack [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (flag == 0) {\n    initialValue = get_initial_value_00084004();\n    returnValue = (*(code *)relocationInfo)(outParameter,auxiliaryStack,0,initialValue,result);\n  }\n  else {\n    initialValue = get_initial_value_00084004();\n    returnValue = (*(code *)relocationInfo)(outParameter,flag,constantValue,initialValue,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *outParameter = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_function_0008434c",
                "param_1": "outParameter",
                "param_2": "flag",
                "param_3": "constantValue",
                "param_4": "result",
                "dVar1": "relocationInfo",
                "uVar2": "initialValue",
                "iVar3": "returnValue",
                "auStack_24": "auxiliaryStack"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "convert_int_to_byte_0008439c",
            "code": "\nundefined4 convertIntToByte_0008439c(undefined4 *outputByte,undefined *inputByte,uint inputInt)\n\n{\n  if (inputByte == (undefined *)0x0) {\n    return 0;\n  }\n  if (inputInt < 0x100) {\n    *inputByte = (char)inputInt;\n    return 1;\n  }\n  *outputByte = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "convert_int_to_byte_0008439c",
                "param_1": "outputByte",
                "param_2": "inputByte",
                "param_3": "inputInt"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_relocations_00084484",
            "code": "\nundefined4 process_relocations_00084484(int relocation)\n\n{\n  dword r_offset;\n  undefined4 result;\n  int status;\n  \n  r_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (relocation != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083888();\n    }\n    if (*(short *)(relocation + 0xc) != 0) {\n      result = process_data_00083850(r_offset,relocation);\n      if ((*(code **)(relocation + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(relocation + 0x2c))(r_offset,*(undefined4 *)(relocation + 0x1c)), status < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(relocation + 0xc) << 0x18) < 0) {\n        reorder_relocations_00083b10(r_offset,*(undefined4 *)(relocation + 0x10));\n      }\n      if (*(int *)(relocation + 0x30) != 0) {\n        if (*(int *)(relocation + 0x30) != relocation + 0x40) {\n          reorder_relocations_00083b10(r_offset);\n        }\n        *(undefined4 *)(relocation + 0x30) = 0;\n      }\n      if (*(int *)(relocation + 0x44) != 0) {\n        reorder_relocations_00083b10(r_offset);\n        *(undefined4 *)(relocation + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(relocation + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_relocations_00084484",
                "param_1": "relocation",
                "dVar1": "r_offset",
                "uVar2": "result",
                "iVar3": "status"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "initialize_and_check_memory_00084494",
            "code": "\nvoid initializeAndCheckMemory_00084494(int *resultPtr,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  int iVar1;\n  \n  DAT_20071244 = 0;\n  iVar1 = initialize_memory_00080eb0(param1,param2,param2,0,param3);\n  if ((iVar1 == -1) && (DAT_20071244 != 0)) {\n    *resultPtr = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "initialize_and_check_memory_00084494",
                "param_1": "resultPtr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_error_code_and_assign_000844bc",
            "code": "\nvoid checkErrorCodeAndAssign_000844bc(int *resultPointer,undefined4 errorCode)\n\n{\n  int determinedErrorCode;\n  \n  DAT_20071244 = 0;\n  determinedErrorCode = determine_error_code_00080eba(errorCode);\n  if ((determinedErrorCode == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_error_code_and_assign_000844bc",
                "param_1": "resultPointer",
                "param_2": "errorCode",
                "iVar1": "determinedErrorCode"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "initialize_and_check_result_000844e0",
            "code": "\nvoid initializeAndCheckResult_000844e0(int *resultPointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize_00080ebe(value1,value2,value3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "initialize_and_check_result_000844e0",
                "param_1": "resultPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "initialize_and_check_00084508",
            "code": "\nvoid initializeAndCheck_00084508(int *result,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int initResult;\n  \n  DAT_20071244 = 0;\n  initResult = initialize_00080ec2(arg2,arg3,arg4);\n  if ((initResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "initialize_and_check_00084508",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_subtraction_result_00084530",
            "code": "\nint checkSubtractionResult_00084530(int input1,int input2,int flag1,int flag2)\n\n{\n  int result;\n  \n  if ((flag2 == 0) && (flag1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = subtract_and_adjust_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_subtraction_result_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_store_0008455c",
            "code": "\nvoid subtractAndStore_0008455c(uint inputValue,int intValue,undefined4 firstMultiplier,undefined4 secondMultiplier,int *outputValues)\n\n{\n  uint result;\n  longlong product;\n  \n  product = division_with_remainder_000845c0();\n  product = product * CONCAT44(secondMultiplier,firstMultiplier);\n  result = (uint)product;\n  *outputValues = inputValue - result;\n  outputValues[1] = (intValue - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_store_0008455c",
                "param_1": "inputValue",
                "param_2": "intValue",
                "param_3": "firstMultiplier",
                "param_4": "secondMultiplier",
                "param_5": "outputValues",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_adjust_0008458c",
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int second_input,undefined4 lower_half,undefined4 upper_half,int *output_values)\n\n{\n  uint result;\n  longlong multiplied_result;\n  \n  multiplied_result = divide_and_remainder_00084860();\n  multiplied_result = multiplied_result * CONCAT44(upper_half,lower_half);\n  result = (uint)multiplied_result;\n  *output_values = input_value - result;\n  output_values[1] = (second_input - (int)((ulonglong)multiplied_result >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "param_1": "input_value",
                "param_2": "second_input",
                "param_3": "lower_half",
                "param_4": "upper_half",
                "param_5": "output_values",
                "uVar1": "result",
                "lVar2": "multiplied_result"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "division_with_remainder_000845c0",
            "code": "\nundefined8 divisionWithRemainder_000845c0(uint dividend,uint dividendLow,uint divisorHigh,uint divisor)\n\n{\n  longlong tempLongVar;\n  uint quotientLow;\n  uint quotientHigh;\n  uint tempVar1;\n  uint tempVar2;\n  int tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint isNegativeDivisor;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  bool tempBool;\n  \n  if ((int)dividendLow < 0) {\n    tempBool = dividend != 0;\n    dividend = -dividend;\n    dividendLow = -dividendLow - (uint)tempBool;\n    isNegativeDivisor = 0xffffffff;\n  }\n  else {\n    isNegativeDivisor = 0;\n  }\n  if ((int)divisor < 0) {\n    isNegativeDivisor = ~isNegativeDivisor;\n    tempBool = divisorHigh != 0;\n    divisorHigh = -divisorHigh;\n    divisor = -divisor - (uint)tempBool;\n  }\n  if (divisor == 0) {\n    if (dividendLow < divisorHigh) {\n      tempVar3 = LZCOUNT(divisorHigh);\n      if (tempVar3 != 0) {\n        quotientHigh = dividend >> (0x20U - tempVar3 & 0xff);\n        divisorHigh = divisorHigh << tempVar3;\n        dividend = dividend << tempVar3;\n        dividendLow = dividendLow << tempVar3 | quotientHigh;\n      }\n      quotientLow = divisorHigh >> 0x10;\n      tempVar1 = dividendLow / quotientLow;\n      tempVar4 = (divisorHigh & 0xffff) * tempVar1;\n      tempVar9 = dividend >> 0x10 | (dividendLow - quotientLow * tempVar1) * 0x10000;\n      quotientHigh = tempVar1;\n      if (tempVar9 <= tempVar4 && tempVar4 - tempVar9 != 0) {\n        tempBool = CARRY4(tempVar9,divisorHigh);\n        tempVar9 = tempVar9 + divisorHigh;\n        quotientHigh = tempVar1 - 1;\n        if ((tempBool == false) && (tempVar9 <= tempVar4 && tempVar4 - tempVar9 != 0)) {\n          quotientHigh = tempVar1 - 2;\n          tempVar9 = tempVar9 + divisorHigh;\n        }\n      }\n      tempVar5 = (tempVar9 - tempVar4) / quotientLow;\n      tempVar1 = (divisorHigh & 0xffff) * tempVar5;\n      tempVar4 = dividend & 0xffff | ((tempVar9 - tempVar4) - quotientLow * tempVar5) * 0x10000;\n      quotientLow = tempVar5;\n      if (tempVar4 <= tempVar1 && tempVar1 - tempVar4 != 0) {\n        quotientLow = tempVar5 - 1;\n        if ((CARRY4(tempVar4,divisorHigh) == false) &&\n           (tempVar4 + divisorHigh <= tempVar1 && tempVar1 - (tempVar4 + divisorHigh) != 0)) {\n          quotientLow = tempVar5 - 2;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotientHigh = 0;\n    }\n    else {\n      if (divisorHigh == 0) {\n        divisorHigh = 1 / 0;\n      }\n      tempVar3 = LZCOUNT(divisorHigh);\n      if (tempVar3 == 0) {\n        dividendLow = dividendLow - divisorHigh;\n        tempVar1 = divisorHigh >> 0x10;\n        tempVar11 = divisorHigh & 0xffff;\n        quotientHigh = 1;\n      }\n      else {\n        divisorHigh = divisorHigh << tempVar3;\n        quotientHigh = dividendLow >> (0x20U - tempVar3 & 0xff);\n        tempVar1 = divisorHigh >> 0x10;\n        tempVar9 = quotientHigh / tempVar1;\n        tempVar11 = divisorHigh & 0xffff;\n        tempVar4 = tempVar11 * tempVar9;\n        tempVar5 = dividend >> (0x20U - tempVar3 & 0xff) | dividendLow << tempVar3;\n        quotientHigh = tempVar5 >> 0x10 | (quotientHigh - tempVar1 * tempVar9) * 0x10000;\n        dividend = dividend << tempVar3;\n        quotientLow = tempVar9;\n        if (quotientHigh <= tempVar4 && tempVar4 - quotientHigh != 0) {\n          tempBool = CARRY4(quotientHigh,divisorHigh);\n          quotientHigh = quotientHigh + divisorHigh;\n          quotientLow = tempVar9 - 1;\n          if ((tempBool == false) && (quotientHigh <= tempVar4 && tempVar4 - quotientHigh != 0)) {\n            quotientLow = tempVar9 - 2;\n            quotientHigh = quotientHigh + divisorHigh;\n          }\n        }\n        tempVar2 = (quotientHigh - tempVar4) / tempVar1;\n        tempVar9 = tempVar11 * tempVar2;\n        dividendLow = tempVar5 & 0xffff | ((quotientHigh - tempVar4) - tempVar1 * tempVar2) * 0x10000;\n        quotientHigh = tempVar2;\n        if (dividendLow <= tempVar9 && tempVar9 - dividendLow != 0) {\n          tempBool = CARRY4(dividendLow,divisorHigh);\n          dividendLow = dividendLow + divisorHigh;\n          quotientHigh = tempVar2 - 1;\n          if ((tempBool == false) && (dividendLow <= tempVar9 && tempVar9 - dividendLow != 0)) {\n            quotientHigh = tempVar2 - 2;\n            dividendLow = dividendLow + divisorHigh;\n          }\n        }\n        dividendLow = dividendLow - tempVar9;\n        quotientHigh = quotientHigh | quotientLow << 0x10;\n      }\n      quotientLow = dividendLow / tempVar1;\n      tempVar9 = tempVar11 * quotientLow;\n      tempVar5 = dividend >> 0x10 | (dividendLow - tempVar1 * quotientLow) * 0x10000;\n      tempVar4 = quotientLow;\n      if (tempVar5 <= tempVar9 && tempVar9 - tempVar5 != 0) {\n        tempBool = CARRY4(tempVar5,divisorHigh);\n        tempVar5 = tempVar5 + divisorHigh;\n        tempVar4 = quotientLow - 1;\n        if ((tempBool == false) && (tempVar5 <= tempVar9 && tempVar9 - tempVar5 != 0)) {\n          tempVar4 = quotientLow - 2;\n          tempVar5 = tempVar5 + divisorHigh;\n        }\n      }\n      tempVar2 = (tempVar5 - tempVar9) / tempVar1;\n      tempVar11 = tempVar11 * tempVar2;\n      tempVar1 = dividend & 0xffff | ((tempVar5 - tempVar9) - tempVar1 * tempVar2) * 0x10000;\n      quotientLow = tempVar2;\n      if (tempVar1 <= tempVar11 && tempVar11 - tempVar1 != 0) {\n        quotientLow = tempVar2 - 1;\n        if ((CARRY4(tempVar1,divisorHigh) == false) &&\n           (tempVar1 + divisorHigh <= tempVar11 && tempVar11 - (tempVar1 + divisorHigh) != 0)) {\n          quotientLow = tempVar2 - 2;\n        }\n      }\n      quotientLow = quotientLow | tempVar4 << 0x10;\n    }\n  }\n  else if (dividendLow < divisor) {\n    quotientHigh = 0;\n    quotientLow = 0;\n  }\n  else {\n    tempVar3 = LZCOUNT(divisor);\n    if (tempVar3 == 0) {\n      if ((divisor < dividendLow) || (divisorHigh <= dividend)) {\n        quotientHigh = 0;\n        quotientLow = 1;\n      }\n      else {\n        quotientLow = 0;\n        quotientHigh = 0;\n      }\n    }\n    else {\n      quotientHigh = 0x20 - tempVar3;\n      tempVar1 = dividendLow >> (quotientHigh & 0xff);\n      tempVar11 = divisorHigh >> (quotientHigh & 0xff) | divisor << tempVar3;\n      tempVar9 = tempVar11 >> 0x10;\n      quotientLow = tempVar1 / tempVar9;\n      tempVar5 = (tempVar11 & 0xffff) * quotientLow;\n      tempVar4 = dividendLow << tempVar3 | dividend >> (quotientHigh & 0xff);\n      tempVar1 = tempVar4 >> 0x10 | (tempVar1 - tempVar9 * quotientLow) * 0x10000;\n      quotientHigh = quotientLow;\n      if (tempVar1 <= tempVar5 && tempVar5 - tempVar1 != 0) {\n        tempBool = CARRY4(tempVar1,tempVar11);\n        tempVar1 = tempVar1 + tempVar11;\n        quotientHigh = quotientLow - 1;\n        if ((tempBool == false) && (tempVar1 <= tempVar5 && tempVar5 - tempVar1 != 0)) {\n          quotientHigh = quotientLow - 2;\n          tempVar1 = tempVar1 + tempVar11;\n        }\n      }\n      tempVar2 = (tempVar1 - tempVar5) / tempVar9;\n      tempVar10 = (tempVar11 & 0xffff) * tempVar2;\n      tempVar1 = tempVar4 & 0xffff | ((tempVar1 - tempVar5) - tempVar9 * tempVar2) * 0x10000;\n      quotientLow = tempVar2;\n      if (tempVar1 <= tempVar10 && tempVar10 - tempVar1 != 0) {\n        tempBool = CARRY4(tempVar1,tempVar11);\n        tempVar1 = tempVar1 + tempVar11;\n        quotientLow = tempVar2 - 1;\n        if ((tempBool == false) && (tempVar1 <= tempVar10 && tempVar10 - tempVar1 != 0)) {\n          quotientLow = tempVar2 - 2;\n          tempVar1 = tempVar1 + tempVar11;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      tempLongVar = (ulonglong)quotientLow * (ulonglong)(divisorHigh << tempVar3);\n      tempVar4 = (uint)((ulonglong)tempLongVar >> 0x20);\n      quotientHigh = 0;\n      if ((tempVar1 - tempVar10 < tempVar4) ||\n         ((tempVar1 - tempVar10 == tempVar4 && (dividend << tempVar3 < (uint)tempLongVar)))) {\n        quotientLow = quotientLow - 1;\n        quotientHigh = 0;\n      }\n    }\n  }\n  if (isNegativeDivisor != 0) {\n    tempBool = quotientLow != 0;\n    quotientLow = -quotientLow;\n    quotientHigh = -quotientHigh - (uint)tempBool;\n  }\n  return CONCAT44(quotientHigh,quotientLow);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "division_with_remainder_000845c0",
                "param_1": "dividend",
                "param_2": "dividendLow",
                "param_3": "divisorHigh",
                "param_4": "divisor",
                "lVar1": "tempLongVar",
                "uVar2": "quotientLow",
                "uVar3": "quotientHigh",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "iVar6": "tempVar3",
                "uVar7": "tempVar4",
                "uVar8": "tempVar5",
                "uVar9": "isNegativeDivisor",
                "uVar10": "tempVar9",
                "uVar11": "tempVar10",
                "uVar12": "tempVar11",
                "bVar13": "tempBool"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "divide_and_remainder_00084860",
            "code": "\nulonglong divideAndRemainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong finalResult;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int numberOfShifts;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      numberOfShifts = LZCOUNT(quotient);\n      if (numberOfShifts == 0) {\n        divisor = divisor - quotient;\n        temp2 = quotient >> 0x10;\n        temp4 = quotient & 0xffff;\n        temp1 = 1;\n      }\n      else {\n        quotient = quotient << numberOfShifts;\n        temp7 = divisor >> (0x20U - numberOfShifts & 0xff);\n        temp2 = quotient >> 0x10;\n        temp8 = temp7 / temp2;\n        temp4 = quotient & 0xffff;\n        temp1 = temp4 * temp8;\n        temp5 = dividend >> (0x20U - numberOfShifts & 0xff) | divisor << numberOfShifts;\n        temp3 = temp5 >> 0x10 | (temp7 - temp2 * temp8) * 0x10000;\n        dividend = dividend << numberOfShifts;\n        temp7 = temp8;\n        if (temp3 <= temp1 && temp1 - temp3 != 0) {\n          carryFlag = CARRY4(temp3,quotient);\n          temp3 = temp3 + quotient;\n          temp7 = temp8 - 1;\n          if ((carryFlag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n            temp7 = temp8 - 2;\n            temp3 = temp3 + quotient;\n          }\n        }\n        temp6 = (temp3 - temp1) / temp2;\n        temp8 = temp4 * temp6;\n        divisor = temp5 & 0xffff | ((temp3 - temp1) - temp2 * temp6) * 0x10000;\n        temp1 = temp6;\n        if (divisor <= temp8 && temp8 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          temp1 = temp6 - 1;\n          if ((carryFlag == false) && (divisor <= temp8 && temp8 - divisor != 0)) {\n            temp1 = temp6 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp8;\n        temp1 = temp1 | temp7 << 0x10;\n      }\n      temp8 = divisor / temp2;\n      temp3 = temp4 * temp8;\n      temp5 = dividend >> 0x10 | (divisor - temp2 * temp8) * 0x10000;\n      temp7 = temp8;\n      if (temp5 <= temp3 && temp3 - temp5 != 0) {\n        carryFlag = CARRY4(temp5,quotient);\n        temp5 = temp5 + quotient;\n        temp7 = temp8 - 1;\n        if ((carryFlag == false) && (temp5 <= temp3 && temp3 - temp5 != 0)) {\n          temp7 = temp8 - 2;\n          temp5 = temp5 + quotient;\n        }\n      }\n      temp8 = (temp5 - temp3) / temp2;\n      temp4 = temp4 * temp8;\n      temp5 = dividend & 0xffff | ((temp5 - temp3) - temp2 * temp8) * 0x10000;\n      temp2 = temp8;\n      if (temp5 <= temp4 && temp4 - temp5 != 0) {\n        temp2 = temp8 - 1;\n        if ((CARRY4(temp5,quotient) == false) &&\n           (temp5 + quotient <= temp4 && temp4 - (temp5 + quotient) != 0)) {\n          temp2 = temp8 - 2;\n        }\n      }\n      return CONCAT44(temp1,temp2 | temp7 << 0x10);\n    }\n    numberOfShifts = LZCOUNT(quotient);\n    if (numberOfShifts != 0) {\n      temp7 = dividend >> (0x20U - numberOfShifts & 0xff);\n      quotient = quotient << numberOfShifts;\n      dividend = dividend << numberOfShifts;\n      divisor = temp7 | divisor << numberOfShifts;\n    }\n    temp1 = quotient >> 0x10;\n    temp2 = divisor / temp1;\n    temp4 = (quotient & 0xffff) * temp2;\n    temp8 = dividend >> 0x10 | (divisor - temp1 * temp2) * 0x10000;\n    temp7 = temp2;\n    if (temp8 <= temp4 && temp4 - temp8 != 0) {\n      carryFlag = CARRY4(temp8,quotient);\n      temp8 = temp8 + quotient;\n      temp7 = temp2 - 1;\n      if ((carryFlag == false) && (temp8 <= temp4 && temp4 - temp8 != 0)) {\n        temp7 = temp2 - 2;\n        temp8 = temp8 + quotient;\n      }\n    }\n    temp5 = (temp8 - temp4) / temp1;\n    temp2 = (quotient & 0xffff) * temp5;\n    temp4 = dividend & 0xffff | ((temp8 - temp4) - temp1 * temp5) * 0x10000;\n    temp1 = temp5;\n    if (temp4 <= temp2 && temp2 - temp4 != 0) {\n      temp1 = temp5 - 1;\n      if ((CARRY4(temp4,quotient) == false) &&\n         (temp4 + quotient <= temp2 && temp2 - (temp4 + quotient) != 0)) {\n        temp1 = temp5 - 2;\n      }\n    }\n    temp1 = temp1 | temp7 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    numberOfShifts = LZCOUNT(remainder);\n    if (numberOfShifts == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      temp1 = 0;\n    }\n    else {\n      temp1 = 0x20 - numberOfShifts;\n      temp7 = divisor >> (temp1 & 0xff);\n      temp2 = remainder << numberOfShifts | quotient >> (temp1 & 0xff);\n      temp4 = temp2 >> 0x10;\n      temp3 = temp7 / temp4;\n      temp8 = (temp2 & 0xffff) * temp3;\n      temp5 = dividend >> (temp1 & 0xff) | divisor << numberOfShifts;\n      temp1 = temp5 >> 0x10 | (temp7 - temp4 * temp3) * 0x10000;\n      temp7 = temp3;\n      if (temp1 <= temp8 && temp8 - temp1 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp1 = temp1 + temp2;\n        temp7 = temp3 - 1;\n        if ((carryFlag == false) && (temp1 <= temp8 && temp8 - temp1 != 0)) {\n          temp7 = temp3 - 2;\n          temp1 = temp1 + temp2;\n        }\n      }\n      temp3 = (temp1 - temp8) / temp4;\n      temp6 = (temp2 & 0xffff) * temp3;\n      temp4 = temp5 & 0xffff | ((temp1 - temp8) - temp4 * temp3) * 0x10000;\n      temp1 = temp3;\n      if (temp4 <= temp6 && temp6 - temp4 != 0) {\n        carryFlag = CARRY4(temp4,temp2);\n        temp4 = temp4 + temp2;\n        temp1 = temp3 - 1;\n        if ((carryFlag == false) && (temp4 <= temp6 && temp6 - temp4 != 0)) {\n          temp1 = temp3 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp1 = temp1 | temp7 << 0x10;\n      finalResult = (ulonglong)temp1 * (ulonglong)(quotient << numberOfShifts);\n      temp7 = (uint)((ulonglong)finalResult >> 0x20);\n      if ((temp4 - temp6 < temp7) || ((temp4 - temp6 == temp7 && (dividend << numberOfShifts < (uint)finalResult)))\n         ) {\n        temp1 = temp1 - 1;\n      }\n    }\n  }\n  return (ulonglong)temp1;\n}\n\n",
            "renaming": {
                "FUN_00084860": "divide_and_remainder_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "finalResult",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "numberOfShifts",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 95360,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}