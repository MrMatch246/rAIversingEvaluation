{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_map_and_store_values_00080164",
            "code": "\nvoid initializeMapAndStoreValues_00080164(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  mapAndStoreValues(&DAT_200708e8,0x5a);\n  mapAndStoreValues(&DAT_200708d4,0x5a,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_map_and_store_values_00080164",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "map_and_store_values_000806f8": "mapAndStoreValues"
            },
            "calling": [
                "setup",
                "loop"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_peripheral_and_check_status_000801e0",
            "code": "\nundefined8 initializePeripheralAndCheckStatus_000801e0(undefined4 status1,undefined4 status2,undefined4 parameter3,undefined4 parameter4)\n\n{\n  initialize_peripheral_000813dc(&DAT_20070be8,0xe100,parameter3,parameter4,parameter4);\n  setPinMode(0xd,1);\n  setPinMode(6,1);\n  setPinMode(0x39,0);\n  setPinMode(4,0);\n  setPinMode(3,0);\n  setPinMode(2,0);\n  attach(&DAT_200708d4,5);\n  attach(&DAT_200708e8,6);\n  performStraightAndStop();\n  addDelay(1000);\n  if (DAT_200708bc == 0) {\n    triggerSoftwareInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_peripheral_and_check_status_000801e0",
                "param_1": "status1",
                "param_2": "status2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "pinMode": "setPinMode",
                "straightAndStop": "performStraightAndStop",
                "delay": "addDelay",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "main"
            ],
            "called": [
                "pinMode",
                "attach",
                "straightAndStop",
                "delay",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_process_00080250",
            "code": "\nvoid controlProcess_00080250(void)\n\n{\n  undefined4 result;\n  int count;\n  undefined *ptr;\n  undefined inputData [12];\n  \n  DAT_200708c0 = pulseIn(4,1,20000);\n  delay(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  digitalWrite(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        straightAndStop();\n        calculate_sum_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      delay(10);\n      result = pulseIn(3,1,20000);\n      DAT_200708d8 = map(0,1000,2000,0x28,0x96);\n      DAT_200708ec = map(result,1000,2000,0x28,0x96);\n      while (count = available(&DAT_20070be8), 0 < count) {\n        read(&DAT_20070be8);\n        print(&DAT_20070be8,DAT_200708d8,10);\n        process_initialization_000810c4(&DAT_20070be8,&DAT_00084b13);\n        println(&DAT_20070be8,DAT_200708ec,10);\n      }\n      map_and_store_values_000806f8(&DAT_200708e8,DAT_200708ec);\n      map_and_store_values_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        straightAndStop();\n        calculate_sum_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      count = available(&DAT_20070be8);\n      if (0 < count) {\n        readStringUntil(inputData,&DAT_20070be8,0x2c);\n        operator=(&DAT_200708dc,inputData);\n        ~String(inputData);\n        readStringUntil(inputData,&DAT_20070be8,10);\n        operator=(&DAT_200708c8,inputData);\n        ~String(inputData);\n        read(&DAT_20070be8);\n        count = equals(&DAT_200708dc,\"steer\");\n        if (count == 0) goto LAB_0008039c;\n        result = toInt(&DAT_200708c8);\n        ptr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    straightAndStop();\n    calculate_sum_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  count = equals(&DAT_200708dc,\"motor\");\n  if (count != 0) {\n    result = toInt(&DAT_200708c8);\n    ptr = &DAT_200708e8;\nLAB_000803b2:\n    map_and_store_values_000806f8(ptr,result);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_process_00080250",
                "uVar1": "result",
                "iVar2": "count",
                "puVar3": "ptr",
                "auStack_1c": "inputData"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "FUN_000806f8",
                "~String",
                "delay",
                "FUN_000810c4",
                "operator=",
                "pulseIn",
                "read",
                "toInt",
                "map",
                "print",
                "readStringUntil",
                "straightAndStop",
                "available",
                "FUN_000810e8",
                "equals",
                "println"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_tc_channel_000803fc",
            "code": "\nvoid initializeTCChannel_000803fc(int channel,uint mode,undefined4 clockSource,uint bitIndex)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined8 functionResult;\n  \n  functionResult = CONCAT44(mode,channel);\n  pmc_enable_periph_clk(clockSource);\n  TC_Configure(channel,mode,0xc002);\n  TC_SetRA(channel,mode,0xa41);\n  *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  *(undefined4 *)(channel + mode * 0x40 + 0x24) = 4;\n  if (2 < mode) {\n    functionResult = __assert_func(\"../source/tc.c\",0x5c,\"TC_Start\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                          tempVar1,tempVar2);\n  }\n  *(undefined4 *)((int)functionResult + (int)((ulonglong)functionResult >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "param_1": "channel",
                "param_2": "mode",
                "param_3": "clockSource",
                "param_4": "bitIndex",
                "unaff_r4": "tempVar1",
                "in_lr": "tempVar2",
                "uVar1": "functionResult"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "__assert_func",
                "TC_Configure",
                "TC_SetRA"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "process_data_0008044c",
            "code": "\nvoid processData_0008044c(int index,int dataBuffer,int offset)\n\n{\n  uint tempVar;\n  int tempIndex;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    tempIndex = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + tempIndex < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempIndex) * 8] << 0x19) < 0\n       )) {\n      digitalWrite((&DAT_200708f8)[(tempIndex + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(dataBuffer + offset) = *(uint *)(dataBuffer + offset) | 4;\n  }\n  tempVar = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  tempIndex = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + tempIndex < (int)tempVar) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(dataBuffer + offset + 0x14) =\n         *(int *)(dataBuffer + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + tempIndex) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempIndex) * 8] << 0x19\n                  )) {\n      return;\n    }\n    digitalWrite((&DAT_200708f8)[(tempIndex + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  dataBuffer = dataBuffer + offset;\n  tempVar = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (tempVar <= *(int *)(dataBuffer + 0x10) + 4U) {\n    tempVar = *(int *)(dataBuffer + 0x10) + 4;\n  }\n  *(uint *)(dataBuffer + 0x14) = tempVar;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "process_data_0008044c",
                "param_1": "index",
                "param_2": "dataBuffer",
                "param_3": "offset",
                "uVar1": "tempVar",
                "iVar2": "tempIndex"
            },
            "calling": [],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "extract_relocation_entry_000805a8",
            "code": "\nvoid extractRelocationEntry_000805a8(byte *outputBuffer)\n\n{\n  char newValue;\n  uint value;\n  \n  value = (uint)DAT_200708f0;\n  if (value < 0x3c) {\n    newValue = DAT_200708f0 + 1;\n    *outputBuffer = DAT_200708f0;\n    DAT_200708f0 = newValue;\n    *(uint *)(&DAT_200708fc + value * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *outputBuffer = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "extract_relocation_entry_000805a8",
                "param_1": "outputBuffer",
                "uVar2": "value",
                "cVar1": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "pin_mode_setup_000806a0",
            "code": "\nbyte pinModeSetup_000806a0(byte *data,undefined4 pinMode)\n\n{\n  byte tempByte;\n  undefined4 address;\n  uint index;\n  undefined4 value;\n  int loopIndex;\n  uint dataValue;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  pinMode(pinMode,1,0x220,*data,0x960);\n  dataValue = (uint)*data;\n  tempByte = (&DAT_200708f8)[dataValue * 8];\n  data[2] = 0;\n  index = dataValue / 0xc;\n  (&DAT_200708f8)[dataValue * 8] = tempByte & 0xc0 | (byte)pinMode & 0x3f;\n  data[1] = 0;\n  loopIndex = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(loopIndex + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    loopIndex = loopIndex + 1;\n  } while (loopIndex != 0xc);\n  if (index == 0) {\n    address = 0x40084000;\n    value = 0x1e;\nLAB_0008064c:\n    initializeISR(address,index,value,value);\n  }\n  else {\n    if (index == 1) {\n      address = 0x40084000;\n      value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      address = 0x40084000;\n      value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      address = 0x40080000;\n      index = 2;\n      value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      address = 0x40080000;\n      index = 0;\n      value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "pin_mode_setup_000806a0",
                "param_1": "data",
                "param_2": "pinMode",
                "bVar1": "tempByte",
                "uVar2": "address",
                "uVar3": "index",
                "uVar4": "value",
                "iVar5": "loopIndex",
                "uVar6": "dataValue",
                "_initISR": "initializeISR"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "_initISR"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "map_and_store_values_000806f8",
            "code": "\nvoid map_and_store_values_000806f8(byte *input_data,uint size)\n\n{\n  uint temp_value;\n  \n  if ((int)size < 0x220) {\n    temp_value = size;\n    if (0xb3 < (int)size) {\n      temp_value = 0xb4;\n    }\n    size = map(temp_value & ~((int)temp_value >> 0x1f),0,0xb4,(0x88 - (char)input_data[1]) * 4,\n                  (600 - (char)input_data[2]) * 4,size);\n  }\n  if (*input_data < 0x3c) {\n    temp_value = (0x88 - (char)input_data[1]) * 4;\n    if (((int)(size + (0x88 - (char)input_data[1]) * -4) < 0 == SBORROW4(size,temp_value)) &&\n       (temp_value = (600 - (char)input_data[2]) * 4, (int)size <= (int)temp_value)) {\n      temp_value = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*input_data * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * (temp_value - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "map_and_store_values_000806f8",
                "param_1": "input_data",
                "param_2": "size",
                "uVar1": "temp_value"
            },
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "called": [
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = elfArray[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    digitalWrite(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(0x400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(0x400e0e00,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,0x3000,0);\n  PIO_Configure(0x400e1400,2,0x30,0);\n  PIO_Configure(0x400e1000,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,3,0);\n  PIO_Configure(0x400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,elfArray[6].r_offset,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  adc_disable_all_channel(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "index",
                "iVar2": "nextIndex",
                "Elf32_Rel_ARRAY_20070000": "elfArray"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "adc_disable_all_channel",
                "adc_init",
                "adc_disable_interrupt",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_configure_timing",
                "__libc_init_array",
                "adc_configure_trigger",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_communication_0008089c",
            "code": "\nvoid initializeCommunication_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initializeRingBuffer(&DAT_20070c0c);\n  initializeRingBuffer(&DAT_20070b60);\n  initializeUART(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initializeRingBuffer(&DAT_20070e6c);\n  initializeRingBuffer(&DAT_20070ef4);\n  initializeRingBuffer(&DAT_20070f7c);\n  initializeRingBuffer(&DAT_20070ad8);\n  initializeRingBuffer(&DAT_20070d0c);\n  initializeRingBuffer(&DAT_20070d94);\n  initializeUSART(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initializeUSART(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initializeUSART(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_communication_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "RingBuffer": "initializeRingBuffer",
                "UARTClass": "initializeUART",
                "USARTClass": "initializeUSART"
            },
            "calling": [],
            "called": [
                "USARTClass",
                "UARTClass",
                "RingBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_handle_serial_events_00080970",
            "code": "\nvoid checkAndHandleSerialEvents_00080970(void)\n\n{\n  int isAvailable;\n  \n  isAvailable = available(&DAT_20070be8);\n  if (isAvailable != 0) {\n    serialEvent();\n  }\n  isAvailable = available(&DAT_20070c94);\n  if (isAvailable != 0) {\n    serialEvent1();\n  }\n  isAvailable = available(&DAT_20070cbc);\n  if (isAvailable != 0) {\n    serialEvent2();\n  }\n  isAvailable = available(&DAT_20070ce4);\n  if (isAvailable != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_handle_serial_events_00080970",
                "iVar1": "isAvailable"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent3",
                "available",
                "serialEvent2",
                "serialEvent1",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_000809be",
            "code": "\nvoid updateParameter_000809be(int baseAddress,undefined4 actionType,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(actionType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "baseAddress",
                "param_2": "actionType",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_values_000809e4",
            "code": "\nvoid updateValues_000809e4(undefined4 *array,undefined4 value,uint mask)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(mask << 0x1f) < 0;\n  array[0x11] = value;\n  if (isNegative) {\n    array[0x19] = value;\n  }\n  if (!isNegative) {\n    array[0x18] = value;\n  }\n  isNegative = (mask & 10) != 0;\n  if (isNegative) {\n    array[8] = value;\n  }\n  if (!isNegative) {\n    array[9] = value;\n  }\n  if (((int)(mask << 0x1e) < 0) || ((int)(mask << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_values_000809e4",
                "param_1": "array",
                "param_2": "value",
                "param_3": "mask",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_parameters_00080a0a",
            "code": "\nvoid setParameters_00080a0a(undefined4 *output,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  output[0x11] = value;\n  if (condition3 == 0) {\n    output[0x18] = value;\n  }\n  else {\n    output[0x19] = value;\n  }\n  if (condition2 == 0) {\n    output[0x15] = value;\n  }\n  else {\n    output[0x14] = value;\n  }\n  if (condition1 == 0) {\n    output[0xd] = value;\n  }\n  else {\n    output[0xc] = value;\n  }\n  output[4] = value;\n  *output = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "output",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "set_peripheral_00080a30",
            "code": "\nundefined4 setPeripheral_00080a30(int device,int mode,undefined4 peripheral,uint setting)\n\n{\n  bool isNegative;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    PIO_SetPeripheral(device,mode,peripheral);\n    isNegative = (int)(setting << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = peripheral;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = peripheral;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = peripheral;\n    }\n    break;\n  case 3:\n    PIO_SetInput(device,peripheral,setting,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    PIO_SetOutput(device,peripheral,mode == 5,(setting << 0x1d) >> 0x1f,setting & 1,mode,peripheral\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "set_peripheral_00080a30",
                "param_1": "device",
                "param_2": "mode",
                "param_3": "peripheral",
                "param_4": "setting",
                "bVar1": "isNegative"
            },
            "calling": [
                "pinMode",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_conditions_00080a94",
            "code": "\nuint check_bitwise_conditions_00080a94(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_conditions_00080a94",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "set_bit_00080aa8",
            "code": "\n\n\nundefined4 setBit_00080aa8(uint bitPosition)\n\n{\n  uint bitMask;\n  \n  if (bitPosition < 0x2d) {\n    if (bitPosition < 0x20) {\n      bitMask = 1 << (bitPosition & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (bitPosition - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "set_bit_00080aa8",
                "param_1": "bitPosition",
                "uVar1": "bitMask"
            },
            "calling": [
                "pinMode",
                "_initISR",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_00080b2c",
            "code": "\nvoid configureTC_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int channelOffset;\n  int channelAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  channelOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelAddress = (int)combinedParams + channelOffset;\n  *(undefined4 *)((int)combinedParams + channelOffset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "channelOffset",
                "iVar2": "channelAddress",
                "uVar3": "combinedParams"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "write_param_to_memory_00080b90",
            "code": "\nvoid writeParamToMemory_00080b90(int memoryBaseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(memoryBaseAddress + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "write_param_to_memory_00080b90",
                "param_1": "memoryBaseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "_initISR"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "initialize_relocation_entries_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid initializeRelocationEntries_00080c20(void)\n\n{\n  int index;\n  undefined4 *pDestination;\n  \n  for (index = 0; (undefined4 *)((int)sourceAddress + index) < &DAT_200708a0\n      ; index = index + 4) {\n    *(undefined4 *)((int)sourceAddress + index) =\n         *(undefined4 *)(&DAT_00085878 + index);\n  }\n  for (pDestination = &DAT_200708a0; pDestination < (undefined4 *)0x20071248; pDestination = pDestination + 1) {\n    *pDestination = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "initialize_relocation_entries_00080c20",
                "iVar1": "index",
                "puVar2": "pDestination",
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": "sourceAddress"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_index_00080c98",
            "code": "\nundefined4 calculate_index_00080c98(undefined4 *output_array,uint input_value,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output_array = 1;\n  output_array[1] = 0;\n  output_array[72] = 0x202;\n  output_array[65] = 0;\n  output_array[69] = 0;\n  quotient = input_value / (uint)(divisor * 2);\n  if (input_value == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_value / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_index_00080c98",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholds",
                "param_1[1]": "output_array[1]",
                "param_1[0x48]": "output_array[72]",
                "param_1[0x41]": "output_array[65]",
                "param_1[0x45]": "output_array[69]"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_flags_00080d30",
            "code": "\nvoid updateFlags_00080d30(int dataPointer,uint value,uint flag)\n\n{\n  *(uint *)(dataPointer + 4) = value | *(uint *)(dataPointer + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_flags_00080d30",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_config_value_00080d3e",
            "code": "\nvoid updateConfigValue_00080d3e(int configBaseAddress,uint paramMask,uint paramValue,uint additionalValue)\n\n{\n  *(uint *)(configBaseAddress + 4) =\n       paramValue | *(uint *)(configBaseAddress + 4) | (paramMask & 0xf) << 0x18 | (additionalValue & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_config_value_00080d3e",
                "param_1": "configBaseAddress",
                "param_2": "paramMask",
                "param_3": "paramValue",
                "param_4": "additionalValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int pointer,uint bitPosition)\n\n{\n  *(int *)(pointer + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "pointer",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_memory_00080d62",
            "code": "\nvoid initializeMemory_00080d62(int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_memory_00080d62",
                "param_1": "memory_address"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_data_00080e80",
            "code": "\nundefined4 initializeData_00080e80()()(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_data_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_param_and_return_previous_value_00080e88",
            "code": "\nint addParamAndReturnPreviousValue_00080e88(int input)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = input + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_param_and_return_previous_value_00080e88",
                "param_1": "input",
                "iVar1": "previousValue"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_negative_one_00080eaa",
            "code": "\nint getNegativeOne_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_negative_one_00080eaa",
                "undefined4": "int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_memory_permission_00080eb0",
            "code": "\nundefined4 setMemoryPermission_00080eb0(undefined4 pointer,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_memory_permission_00080eb0",
                "param_1": "pointer",
                "param_2": "address"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "get_return_value_00080eba",
            "code": "\nuint32_t getReturnValue_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "undefined4": "uint32_t"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_default_value_00080ebe",
            "code": "\nundefined4 getDefaultValue_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_default_value_00080ebe"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nvoid initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2",
                "undefined4": "void"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param,int src,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(src + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "param",
                "param_2": "src",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_message_00080eec",
            "code": "\nvoid exitWithStatusMessage_00080eec(undefined4 status,undefined4 UNUSED,undefined4 UNUSED,undefined4 UNUSED)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status,UNUSED,UNUSED,UNUSED);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_message_00080eec",
                "param_1": "status",
                "param_2": "UNUSED",
                "param_3": "UNUSED",
                "param_4": "UNUSED"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_code_00080efe",
            "code": "\nErrorCode get_error_code_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "undefined4": "ErrorCode"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "FUN_00080f04",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {},
            "calling": [
                "timedRead"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "setup",
                "loop",
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "configure_peripheral_00080f0c",
            "code": "\n\n\nint configurePeripheral_00080f0c(int channel,int state)\n\n{\n  int result;\n  uint bitMask;\n  undefined4 pinType;\n  uint checkMask;\n  byte pinConfiguration;\n  byte pinValue;\n  int index;\n  int pinConfig;\n  \n  result = channel;\n  if ((&DAT_00084b50)[channel * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[channel] & 0xf) == 4) {\n      result = adc_disable_channel(0x400c0000,(&DAT_00084b5d)[channel * 0x1c]);\n    }\n    pinValue = (&DAT_20070e1c)[channel];\n    pinConfiguration = pinValue & 0xf;\n    if ((pinConfiguration < 3) && (pinValue != 0)) {\n      if (pinConfiguration == 2) {\n        if (state == 0) {\n          return result;\n        }\n      }\n      else if (pinConfiguration == 1) {\n        if (state == 2) {\n          return result;\n        }\n      }\n      else if (pinConfiguration == 3) {\n        if (state == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (state != 1) {\nLAB_00080f68:\n      if (state == 0) {\n        result = channel * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084b4c + result));\n        result = configurePin(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),0);\n        pinValue = (&DAT_20070e1c)[channel] & 0xf0 | 2;\n      }\n      else {\n        if (state != 2) {\n          return result;\n        }\n        result = channel * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084b4c + result));\n        result = configurePin(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),1);\n        pinValue = (&DAT_20070e1c)[channel] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[channel] = pinValue;\n      return result;\n    }\n    index = channel * 0x1c;\n    pinConfig = *(int *)(&DAT_00084b44 + index);\n    if (pinValue >> 4 == 0) {\n      pinType = 4;\n    }\n    else {\n      pinType = 5;\n    }\n    result = configurePin(pinConfig,pinType,*(undefined4 *)(&DAT_00084b48 + index),\n                          *(undefined4 *)(&DAT_00084b54 + index));\n    (&DAT_20070e1c)[channel] = (&DAT_20070e1c)[channel] & 0xf0 | 3;\n    if (*(int *)(pinConfig + 0x18) == -1) {\n      bitMask = *(uint *)(&DAT_00084b4c + index);\n      if (0x2c < bitMask) {\n        return 1;\n      }\n      if (bitMask < 0x20) {\n        bitMask = 1 << (bitMask & 0xff);\n        checkMask = _DAT_400e0618 & bitMask;\n        if (checkMask == bitMask) {\n          _DAT_400e0614 = checkMask;\n        }\n      }\n      else {\n        bitMask = 1 << (bitMask - 0x20 & 0xff);\n        checkMask = _DAT_400e0708 & bitMask;\n        if (checkMask == bitMask) {\n          _DAT_400e0704 = checkMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "configure_peripheral_00080f0c",
                "param_1": "channel",
                "param_2": "state",
                "iVar1": "result",
                "uVar2": "bitMask",
                "uVar3": "pinType",
                "uVar4": "checkMask",
                "bVar5": "pinConfiguration",
                "bVar6": "pinValue",
                "iVar7": "index",
                "iVar8": "pinConfig",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "PIO_Configure": "configurePin"
            },
            "calling": [
                "attach",
                "digitalWrite",
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "configure_pin_00081014",
            "code": "\nvoid configurePin_00081014(int pin,int state,undefined4 mode)\n\n{\n  int outputStatus;\n  undefined4 outputData;\n  int pinConfig;\n  \n  if ((&DAT_00084b50)[pin * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pin] & 0xf) == 5) {\n      pinMode(pin,1,mode,5,pin,state,mode);\n    }\n    (&DAT_20070e1c)[pin] = (&DAT_20070e1c)[pin] & 0xf | (byte)(state << 4);\n    pinConfig = *(int *)(&DAT_00084b44 + pin * 0x1c);\n    outputData = *(undefined4 *)(&DAT_00084b48 + pin * 0x1c);\n    outputStatus = PIO_GetOutputDataStatus(pinConfig,outputData);\n    if (outputStatus == 0) {\n      if (state != 0) {\n        *(undefined4 *)(pinConfig + 100) = outputData;\n        return;\n      }\n      *(undefined4 *)(pinConfig + 0x60) = outputData;\n      return;\n    }\n    PIO_SetOutput(pinConfig,outputData,state,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "configure_pin_00081014",
                "param_1": "pin",
                "param_2": "state",
                "param_3": "mode",
                "iVar1": "outputStatus",
                "uVar2": "outputData",
                "iVar3": "pinConfig"
            },
            "calling": [
                "Servo_Handler",
                "loop",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "pinMode",
                "PIO_GetOutputDataStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_string_000810a6",
            "code": "\nvoid processString_000810a6(int *ptr_array,int str,undefined4 length1,undefined4 length2)\n\n{\n  undefined4 strLength;\n  \n  if (str != 0) {\n    strLength = strlen(str);\n    (**(code **)(*ptr_array + 4))(ptr_array,str,strLength,*(code **)(*ptr_array + 4),length2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_string_000810a6",
                "param_1": "ptr_array",
                "param_2": "str",
                "param_3": "length1",
                "param_4": "length2",
                "uVar1": "strLength"
            },
            "calling": [
                "FUN_000810d8",
                "printNumber",
                "FUN_000810c4",
                "FUN_000810e8"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "process_initialization_000810c4",
            "code": "\nvoid process_initialization_000810c4(void)\n\n{\n  initialize_string_processing();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "process_initialization_000810c4",
                "process_string_000810a6": "initialize_string_processing"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "FUNC_000810d8",
            "code": "\nvoid FUNC_000810d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  process_string_000810a6(param_1,&DAT_00085635,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "FUNC_000810d8"
            },
            "calling": [
                "FUN_000810e8",
                "println"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int stringResult;\n  int functionResult;\n  \n  stringResult = process_string_000810a6();\n  functionResult = FUNC_000810d8(input);\n  return functionResult + stringResult;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "stringResult",
                "iVar2": "functionResult"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_decimal_to_base_000810fc",
            "code": "\nvoid convertDecimalToBase_000810fc(undefined4 outputBuffer,uint decimalNumber,uint base)\n\n{\n  char *outputPointer;\n  uint quotient;\n  char *currentDigit;\n  char convertedDigit;\n  uint remainder;\n  char convertedNumber [5];\n  \n  convertedNumber[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  outputPointer = convertedNumber;\n  do {\n    currentDigit = outputPointer;\n    quotient = decimalNumber / base;\n    remainder = decimalNumber - base * quotient & 0xff;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *currentDigit = convertedDigit;\n    decimalNumber = quotient;\n    outputPointer = currentDigit + -1;\n  } while (quotient != 0);\n  process_string_000810a6(outputBuffer,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_000810fc",
                "param_1": "outputBuffer",
                "param_2": "decimalNumber",
                "param_3": "base",
                "pcVar1": "outputPointer",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "convertedDigit",
                "uVar5": "remainder",
                "local_15": "convertedNumber"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_formatted_number_0008113a",
            "code": "\nint printFormattedNumber_0008113a(undefined4 *inputData,uint number,uint base,undefined4 extra)\n\n{\n  int result;\n  int additionalResult;\n  \n  if (base == 0) {\n    result = (**(code **)*inputData)(inputData,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_function_000810cc(inputData,0x2d);\n      additionalResult = printNumber(inputData,-number,10);\n      return additionalResult + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = printNumber(inputData,number,base,extra);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_formatted_number_0008113a",
                "param_1": "inputData",
                "param_2": "number",
                "param_3": "base",
                "param_4": "extra",
                "iVar1": "result",
                "iVar2": "additionalResult"
            },
            "calling": [
                "print",
                "println"
            ],
            "called": [
                "printNumber",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "FUN_00081176",
            "code": "\nint thunk_print_formatted_number_0008113a(undefined4 *param_1,uint param_2,uint param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_3 == 0) {\n    iVar1 = (**(code **)*param_1)(param_1,param_2 & 0xff);\n    return iVar1;\n  }\n  if (param_3 == 10) {\n    param_3 = 10;\n    if ((int)param_2 < 0) {\n      iVar1 = execute_function_000810cc(param_1,0x2d);\n      iVar2 = printNumber(param_1,-param_2,10);\n      return iVar2 + iVar1;\n    }\n  }\n  else {\n    param_3 = param_3 & 0xff;\n  }\n  iVar1 = printNumber(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculateSum_0008117a(undefined4 input_param)\n\n{\n  int formatted_number;\n  int result;\n  \n  formatted_number = getFormattedNumber();\n  result = FUNC_000810d8(input_param);\n  return result + formatted_number;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "input_param",
                "iVar1": "formatted_number",
                "iVar2": "result",
                "print_formatted_number_0008113a": "getFormattedNumber"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "perform_action_if_not_max_value_00081190",
            "code": "\nvoid performActionIfNotMaxValue_00081190(void)\n\n{\n  if ((array[6].info != 0xffffffff) &&\n     (array[6].info = array[6].info - 1,\n     array[6].info == 0)) {\n    (*(functionToCall *)((int)&array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "perform_action_if_not_max_value_00081190",
                "Elf32_Rel_ARRAY_20070000": "array",
                "r_info": "info",
                "r_offset": "offset",
                "code": "functionToCall"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memory)\n\n{\n  memset(memory,0,0x80);\n  *(undefined4 *)(memory + 0x80) = 0;\n  *(undefined4 *)(memory + 0x84) = 0;\n  return memory;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memory"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_param_and_index_000811ca",
            "code": "\nvoid updateParamAndIndex_000811ca(int ptr,undefined data)\n\n{\n  uint index;\n  \n  index = *(int *)(ptr + 0x80) + 1U & 0x7f;\n  if (index != *(uint *)(ptr + 0x84)) {\n    *(undefined *)(ptr + *(int *)(ptr + 0x80)) = data;\n    *(uint *)(ptr + 0x80) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_param_and_index_000811ca",
                "param_1": "ptr",
                "param_2": "data",
                "uVar1": "index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "wait_until_condition_000811e8",
            "code": "\nint wait_until_condition_000811e8(int *array)\n\n{\n  int current_time;\n  \n  current_time = get_current_time_millis();\n  start_time = current_time;\n  do {\n    current_time = (**(function_ptr **)(*array + 0xc))(array);\n    if (-1 < current_time) {\n      return current_time;\n    }\n    current_time = get_current_time_millis();\n  } while ((uint)(current_time - start_time) < (uint)timeout);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "wait_until_condition_000811e8",
                "param_1": "array",
                "iVar1": "current_time",
                "millis": "get_current_time_millis",
                "code": "function_ptr",
                "param_1[3]": "start_time",
                "param_1[2]": "timeout"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_and_concatenate_00081214",
            "code": "\nvoid readAndConcatenate_00081214(undefined4 outputBuffer,undefined4 inputStream,uint endMarker)\n\n{\n  uint readValue;\n  \n  String(outputBuffer,&DAT_00085637);\n  while ((readValue = timedRead(inputStream), -1 < (int)readValue && (readValue != endMarker))) {\n    concat(outputBuffer,readValue & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "read_and_concatenate_00081214",
                "param_1": "outputBuffer",
                "param_2": "inputStream",
                "param_3": "endMarker",
                "uVar1": "readValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "String",
                "timedRead",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "get_value_from_buffer_00081276",
            "code": "\nuint getValueFromBuffer_00081276(int bufferAddress)\n\n{\n  byte byteValue;\n  int bufferPtr;\n  \n  bufferPtr = *(int *)(bufferAddress + 0x10);\n  if (*(int *)(bufferPtr + 0x80) != *(int *)(bufferPtr + 0x84)) {\n    byteValue = *(byte *)(bufferPtr + *(int *)(bufferPtr + 0x84));\n    *(uint *)(bufferPtr + 0x84) = *(int *)(bufferPtr + 0x84) + 1U & 0x7f;\n    return (uint)byteValue;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "get_value_from_buffer_00081276",
                "param_1": "bufferAddress",
                "bVar1": "byteValue",
                "iVar2": "bufferPtr"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_value_000812b8",
            "code": "\nundefined4 updateValue_000812b8(int data,undefined4 newValue)\n\n{\n  int ptrData;\n  uint newIndex;\n  \n  ptrData = *(int *)(data + 0x14);\n  if ((*(int *)(*(int *)(data + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrData + 0x84) == *(int *)(ptrData + 0x80))) {\n    *(undefined4 *)(*(int *)(data + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(ptrData + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrData + 0x84) == newIndex);\n    *(char *)(ptrData + *(int *)(ptrData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(data + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(data + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_value_000812b8",
                "param_1": "data",
                "param_2": "newValue",
                "iVar1": "ptrData",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_params_00081348",
            "code": "\nvoid initializeParams_00081348(undefined4 *parameters,undefined4 value1,undefined flag,undefined4 value2,\n                 undefined4 value3,undefined4 value4)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_write_1_00085650;\n  *(undefined *)(parameters + 7) = flag;\n  parameters[4] = value3;\n  parameters[8] = value2;\n  parameters[5] = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_params_00081348",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "flag",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_peripheral_000813dc",
            "code": "\nvoid initializePeripheral_000813dc(int peripheralAddress,uint divisor)\n\n{\n  int tempVar1;\n  undefined4 *pointerVar;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(peripheralAddress + 0x20));\n  pointerVar = *(undefined4 **)(peripheralAddress + 0x18);\n  pointerVar[0x48] = 0x202;\n  *pointerVar = 0xac;\n  pointerVar[1] = 0x800;\n  pointerVar[8] = relocationArray[6].relocationOffset / divisor >> 4;\n  pointerVar[3] = 0xffffffff;\n  pointerVar[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheralAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheralAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(peripheralAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(peripheralAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *pointerVar = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_peripheral_000813dc",
                "param_1": "peripheralAddress",
                "param_2": "divisor",
                "iVar1": "tempVar1",
                "puVar2": "pointerVar",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_uart_00081438",
            "code": "\nundefined4 * initializeUART_00081438(undefined4 *uartObject,undefined4 initialValue)\n\n{\n  UARTClass();\n  *uartObject = &PTR_write_1_00085680;\n  uartObject[9] = initialValue;\n  return uartObject;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_uart_00081438",
                "param_1": "uartObject",
                "param_2": "initialValue"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_linear_interpolation_0008145c",
            "code": "\nint calculateLinearInterpolation_0008145c(int startValue,int startRange,int endRange,int startOutput,int endOutput)\n\n{\n  return (uint)((startValue - startRange) * (endOutput - startOutput)) / (uint)(endRange - startRange) + startOutput;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_linear_interpolation_0008145c",
                "param_1": "startValue",
                "param_2": "startRange",
                "param_3": "endRange",
                "param_4": "startOutput",
                "param_5": "endOutput"
            },
            "calling": [
                "FUN_000806f8",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "free_memory_00081472",
            "code": "\nundefined4 * freeMemory_00081472(undefined4 *memoryPtr)\n\n{\n  free(*memoryPtr);\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_00081472": "free_memory_00081472",
                "param_1": "memoryPtr"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_memory_00081480",
            "code": "\nvoid resetMemory_00081480(int *memoryBlock)\n\n{\n  if (*memoryBlock != 0) {\n    free();\n  }\n  *memoryBlock = 0;\n  memoryBlock[2] = 0;\n  memoryBlock[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_memory_00081480",
                "param_1": "memoryBlock",
                "param_1[1]": "memoryBlock[1]",
                "param_1[2]": "memoryBlock[2]"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_array_00081496",
            "code": "\nint resizeArray_00081496(int *array,int newSize,undefined4 elementSize,undefined4 alignment)\n\n{\n  int newArray;\n  \n  newArray = realloc(*array,newSize + 1,elementSize,alignment,alignment);\n  if (newArray != 0) {\n    *array = newArray;\n    array[1] = newSize;\n    newArray = 1;\n  }\n  return newArray;\n}\n\n",
            "renaming": {
                "FUN_00081496": "resize_array_00081496",
                "param_1": "array",
                "param_2": "newSize",
                "param_3": "elementSize",
                "param_4": "alignment",
                "iVar1": "newArray"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_update_buffer_000814ae",
            "code": "\nundefined4 checkAndUpdateBuffer_000814ae(int *buffer,uint maxSize)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < maxSize)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_update_buffer_000814ae",
                "param_1": "buffer",
                "param_2": "maxSize",
                "iVar1": "result"
            },
            "calling": [
                "copy",
                "FUN_00081570"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "update_data_if_reserved_000814d0",
            "code": "\nundefined4 * updateDataIfReserved_000814d0(undefined4 *dataPointer,undefined4 sourceString,undefined4 newDataSize)\n\n{\n  int reservationResult;\n  \n  reservationResult = reserve(dataPointer,newDataSize);\n  if (reservationResult == 0) {\n    invalidate(dataPointer);\n  }\n  else {\n    dataPointer[2] = newDataSize;\n    strcpy(*dataPointer,sourceString);\n  }\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "update_data_if_reserved_000814d0",
                "param_1": "dataPointer",
                "param_2": "sourceString",
                "param_3": "newDataSize",
                "iVar1": "reservationResult"
            },
            "calling": [
                "String"
            ],
            "called": [
                "reserve",
                "invalidate",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_buffer_000814f6",
            "code": "\nundefined4 * initializeBuffer_000814f6(undefined4 *buffer,int inputString)\n\n{\n  undefined4 stringLength;\n  \n  *buffer = 0;\n  buffer[1] = 0;\n  buffer[2] = 0;\n  if (inputString != 0) {\n    stringLength = strlen(inputString);\n    copy(buffer,inputString,stringLength);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_buffer_000814f6",
                "param_1": "buffer",
                "param_2": "inputString",
                "uVar1": "stringLength"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "copy_parameters_0008151c",
            "code": "\nvoid copyParameters_0008151c(int *destination,int *source)\n\n{\n  if (*destination != 0) {\n    if ((*source != 0) && ((uint)source[2] <= (uint)destination[1])) {\n      copyString();\n      destination[2] = source[2];\n      goto LAB_00081558;\n    }\n    deallocateMemory();\n  }\n  *destination = *source;\n  destination[1] = source[1];\n  destination[2] = source[2];\n  *source = 0;\n  source[1] = 0;\nLAB_00081558:\n  source[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "copy_parameters_0008151c",
                "param_1": "destination",
                "param_2": "source",
                "strcpy": "copyString",
                "free": "deallocateMemory"
            },
            "calling": [
                "operator="
            ],
            "called": [
                "free",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_move_00081560",
            "code": "\nint check_and_move_00081560(int input1,int input2)\n\n{\n  if (input1 != input2) {\n    move();\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_move_00081560",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "move"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "update_array_with_param_00081570",
            "code": "\nundefined4 updateArrayWithParam_00081570(int *array,int value,int size)\n\n{\n  int reserved;\n  int arraySize;\n  \n  arraySize = array[2];\n  if (value == 0) {\n    return 0;\n  }\n  if (size != 0) {\n    reserved = reserve(array,arraySize + size);\n    if (reserved == 0) {\n      return 0;\n    }\n    strcpy(*array + array[2],value);\n    array[2] = arraySize + size;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "update_array_with_param_00081570",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "iVar1": "reserved",
                "iVar2": "arraySize"
            },
            "calling": [
                "concat"
            ],
            "called": [
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "update_array_with_param_0008159e",
            "code": "\nvoid updateArrayWithParam_0008159e(undefined4 input,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 localVariableC;\n  undefined4 stackValue;\n  \n  stackValue = param3;\n  update_array_with_param_00081570(input,&localVariableC,1,0,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "update_array_with_param_0008159e",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "local_c": "localVariableC",
                "uStack_8": "stackValue"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "compare_and_return_result_000815b8",
            "code": "\nint compareAndReturnResult_000815b8(byte **dataPointerArray,byte *data)\n\n{\n  uint comparisonResult;\n  int result;\n  \n  if (dataPointerArray[2] == (byte *)0x0) {\n    if (data == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (data != (byte *)0x0) {\n      comparisonResult = strcmp(*dataPointerArray);\n      goto LAB_000815d4;\n    }\n    data = *dataPointerArray;\n  }\n  comparisonResult = (uint)*data;\nLAB_000815d4:\n  result = 1 - comparisonResult;\n  if (1 < comparisonResult) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "compare_and_return_result_000815b8",
                "param_1": "dataPointerArray",
                "param_2": "data",
                "uVar1": "comparisonResult",
                "iVar2": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseInteger_000815de(byte **input)\n\n{\n  byte currentByte;\n  byte isNegative;\n  uint result;\n  byte *ptr;\n  uint byteValue;\n  byte *currentPtr;\n  int digitValue;\n  int hasDigit;\n  uint maxDiv;\n  uint minusMaxDiv;\n  \n  ptr = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    currentPtr = ptr;\n    ptr = currentPtr + 1;\n    byteValue = (uint)*currentPtr;\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    isNegative = currentByte & 8;\n  } while ((currentByte & 8) != 0);\n  if (byteValue == 0x2d) {\n    ptr = currentPtr + 2;\n    byteValue = (uint)currentPtr[1];\n    isNegative = 1;\n  }\n  else if (byteValue == 0x2b) {\n    byteValue = (uint)currentPtr[1];\n    ptr = currentPtr + 2;\n  }\n  if (isNegative == 0) {\n    minusMaxDiv = 0x7fffffff;\n  }\n  else {\n    minusMaxDiv = 0x80000000;\n  }\n  maxDiv = minusMaxDiv / 10;\n  hasDigit = 0;\n  result = 0;\n  do {\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    if ((currentByte & 4) == 0) {\n      if ((currentByte & 3) == 0) {\nLAB_0008277e:\n        if (hasDigit == -1) {\n          if (isNegative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (isNegative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((currentByte & 3) == 1) {\n        digitValue = 0x37;\n      }\n      else {\n        digitValue = 0x57;\n      }\n      digitValue = byteValue - digitValue;\n    }\n    else {\n      digitValue = byteValue - 0x30;\n    }\n    if (9 < digitValue) goto LAB_0008277e;\n    if (hasDigit != -1) {\n      if ((maxDiv <= result && result != maxDiv) || ((result == maxDiv && ((int)(minusMaxDiv % 10) < digitValue))))\n      {\n        hasDigit = -1;\n      }\n      else {\n        result = result * 10 + digitValue;\n        hasDigit = 1;\n      }\n    }\n    byteValue = (uint)*ptr;\n    ptr = ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input",
                "bVar1": "currentByte",
                "bVar2": "isNegative",
                "uVar3": "result",
                "pbVar4": "ptr",
                "uVar5": "byteValue",
                "pbVar6": "currentPtr",
                "iVar7": "digitValue",
                "iVar8": "hasDigit",
                "uVar9": "maxDiv",
                "uVar10": "minusMaxDiv"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_system_000815ec",
            "code": "\nvoid runSystem_000815ec(void)\n\n{\n  setupWatchdog();\n  initializeSystem();\n  initializeVariant();\n  shortDelay(1);\n  setupSystem();\n  do {\n    systemLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_system_000815ec",
                "_watchdogDefaultSetup": "setupWatchdog",
                "initialize_system_00080774": "initializeSystem",
                "initVariant": "initializeVariant",
                "delay": "shortDelay",
                "setup": "setupSystem",
                "loop": "systemLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_watchdogDefaultSetup",
                "serialEventRun",
                "setup",
                "delay",
                "loop",
                "initVariant",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_pulse_00081624",
            "code": "\nint calculatePulse_00081624(int index,int flag,int multiplier,undefined4 param_4)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = countPulse(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                        *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                        ((offset / 1000000) * multiplier) / 0x12,param_4)\n  ;\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_pulse_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "iVar1": "result",
                "uVar2": "value",
                "countPulseASM": "countPulse",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "offset"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "countPulseASM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_conditions_00081684",
            "code": "\nint check_conditions_00081684(uint *data_array,uint mask,uint comparison_value,int iterations)\n\n{\n  int match_count;\n  \n  do {\n    if ((*data_array & mask) != comparison_value) {\n      do {\n        if ((*data_array & mask) == comparison_value) {\n          match_count = 0;\n          do {\n            if ((*data_array & mask) != comparison_value) {\n              return match_count;\n            }\n            match_count = match_count + 1;\n          } while (iterations != match_count);\n          return 0;\n        }\n        iterations = iterations + -1;\n      } while (iterations != 0);\n      return 0;\n    }\n    iterations = iterations + -1;\n  } while (iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_conditions_00081684",
                "param_1": "data_array",
                "param_2": "mask",
                "param_3": "comparison_value",
                "param_4": "iterations",
                "iVar1": "match_count"
            },
            "calling": [
                "pulseIn"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_data_000816d8",
            "code": "\nundefined4 getGlobalData_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_data_000816d8"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_data_000816ec",
            "code": "\nvoid updateData_000816ec(dword data1,dword data2,dword data3)\n\n{\n  dword *pointer;\n  uint index;\n  uint mask;\n  code *jumpTable;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  pointer = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    pointer = (dword *)malloc(400);\n    if (pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    *pointer = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    pointer[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)pointer;\n    pointer[0x62] = 0;\n    pointer[99] = 0;\n  }\n  mask = 1 << (index & 0xff);\n  pointer[index + 0x22] = data1;\n  pointer[0x62] = pointer[0x62] | mask;\n  pointer[index + 0x42] = data3;\n  pointer[99] = mask | pointer[99];\n  pointer[1] = index + 1;\n  pointer[index + 2] = data2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_data_000816ec",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "pdVar1": "pointer",
                "uVar2": "index",
                "uVar3": "mask",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_error_000816f8",
            "code": "\nvoid printAssertionError_000816f8(undefined4 file,undefined4 line,char *message,undefined4 function)\n\n{\n  undefined4 filePtr;\n  undefined4 functionPtr;\n  char *commaFuncStr;\n  undefined8 abortResult;\n  \n  filePtr = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (message == (char *)0x0) goto LAB_0008171c;\n  functionPtr = function;\n  commaFuncStr = \", function: \";\n  do {\n    function = file;\n    fiprintf(filePtr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionPtr,file,line,\n             commaFuncStr,message);\n    abortResult = abort();\n    line = (undefined4)((ulonglong)abortResult >> 0x20);\n    filePtr = (undefined4)abortResult;\nLAB_0008171c:\n    message = \"\";\n    functionPtr = function;\n    commaFuncStr = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_error_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "message",
                "param_4": "function",
                "uVar1": "filePtr",
                "uVar2": "functionPtr",
                "pcVar3": "commaFuncStr",
                "uVar4": "abortResult"
            },
            "calling": [
                "_initISR",
                "TC_Configure"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "print_with_offset_00081750",
            "code": "\nvoid print_with_offset_00081750(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,format_string,arg1,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "print_with_offset_00081750",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "initialize_and_execute_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid initialize_and_execute_00081778(void)\n\n{\n  int counter;\n  code **function_pointers;\n  \n  _init();\n  function_pointers = (code **)0x8584c;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "initialize_and_execute_00081778",
                "iVar1": "counter",
                "ppcVar2": "function_pointers"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_with_params_000817c8",
            "code": "\nvoid printWithParams_000817c8(undefined4 formatString,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stackC;\n  undefined4 stack8;\n  undefined4 stack4;\n  \n  stackC = param2;\n  stack8 = param3;\n  stack4 = param4;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),formatString,&stackC);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_with_params_000817c8",
                "param_1": "formatString",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "stackC",
                "uStack_8": "stack8",
                "uStack_4": "stack4"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid allocateMemory_000817f0(undefined4 size)\n\n{\n  _malloc_r(relocationArray[140].r_offset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "param_1": "size",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "free_elf32_rel_array_elem_00081800",
            "code": "\nvoid freeElf32RelArrayElem_00081800(undefined4 param)\n\n{\n  _free_r(elfRelArray[140].r_offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "free_elf32_rel_array_elem_00081800",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray"
            },
            "calling": [
                "invalidate",
                "~String",
                "move"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081810(undefined4 *lock,uint size)\n\n{\n  dword info1;\n  int temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  dword info2;\n  uint temp6;\n  int temp7;\n  undefined *ptr1;\n  dword info3;\n  dword info4;\n  int temp8;\n  dword *ptr2;\n  uint newSize;\n  undefined *ptr3;\n  dword *ptr4;\n  uint index;\n  \n  if1 (size + 0xb < 0x17) {\n    newSize = 0x10;\n    if1 (0x10 < size) goto1 label1;\n  }\n  else1 {\n    newSize = size + 0xb & 0xfffffff8;\n    if1 (((int)newSize < 0) || (newSize < size)) {\nlabel1:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  lockMemory(lock);\n  info1 = array[142].r_info;\n  if1 (newSize < 0x1f8) {\n    temp8 = *(int *)((int)&array[0x8e].r_offset + newSize);\n    if1 ((temp8 != newSize + 0x20070464) ||\n       (temp1 = temp8 + 8, temp8 = *(int *)(temp8 + 0x14), temp1 != temp8)) {\n      temp4 = *(int *)(temp8 + 0xc);\n      temp7 = (*(uint *)(temp8 + 4) & 0xfffffffc) + temp8;\n      newSize = *(uint *)(temp7 + 4);\n      temp1 = *(int *)(temp8 + 8);\n      *(int *)(temp1 + 0xc) = temp4;\n      *(int *)(temp4 + 8) = temp1;\n      *(uint *)(temp7 + 4) = newSize | 1;\n      unlockMemory(lock);\n      return (int *)(temp8 + 8);\n    }\n    index = (newSize >> 3) + 2;\n  }\n  else1 {\n    index = newSize >> 9;\n    if1 (index == 0) {\n      temp1 = 0x7e;\n      temp8 = 0x3f;\n    }\n    else1 if1 (index < 5) {\n      temp8 = (newSize >> 6) + 0x38;\n      temp1 = temp8 * 2;\n    }\n    else1 if1 (index < 0x15) {\n      temp8 = index + 0x5b;\n      temp1 = temp8 * 2;\n    }\n    else1 if1 (index < 0x55) {\n      temp8 = (newSize >> 0xc) + 0x6e;\n      temp1 = temp8 * 2;\n    }\n    else1 if1 (index < 0x155) {\n      temp8 = (newSize >> 0xf) + 0x77;\n      temp1 = temp8 * 2;\n    }\n    else1 if1 (index < 0x555) {\n      temp8 = (newSize >> 0x12) + 0x7c;\n      temp1 = temp8 * 2;\n    }\n    else1 {\n      temp1 = 0xfc;\n      temp8 = 0x7e;\n    }\n    for (info2 = (&array[0x8e].r_offset)[temp1]; temp1 * 4 + 0x20070464U != info2\n        ; info2 = *(dword *)(info2 + 0xc)) {\n      index = *(uint *)(info2 + 4) & 0xfffffffc;\n      temp4 = index - newSize;\n      if1 (0xf < temp4) {\n        temp8 = temp8 + -1;\n        break;\n      }\n      if1 (-1 < temp4) {\n        temp1 = index + info2;\n        newSize = *(uint *)(temp1 + 4);\n        temp4 = *(int *)(info2 + 0xc);\n        temp8 = *(int *)(info2 + 8);\n        *(int *)(temp8 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp8;\n        *(uint *)(temp1 + 4) = newSize | 1;\n        unlockMemory(lock);\n        return (int *)(info2 + 8);\n      }\n    }\n    index = temp8 + 1;\n  }\n  info2 = array[141].r_offset;\n  if1 (array[142].r_info != 0x2007046c) {\n    temp2 = *(uint *)(array[142].r_info + 4);\n    temp3 = temp2 & 0xfffffffc;\n    temp5 = temp3 - newSize;\n    if1 (0xf < (int)temp5) {\n      info2 = newSize + array[142].r_info;\n      *(uint *)(array[142].r_info + 4) = newSize | 1;\n      array[142].r_info = info2;\n      array[143].r_offset = info2;\n      *(undefined4 *)(info2 + 0xc) = 0x2007046c;\n      *(undefined4 *)(info2 + 8) = 0x2007046c;\n      *(uint *)(info2 + 4) = temp5 | 1;\n      *(uint *)(info2 + temp5) = temp5;\n      unlockMemory(lock);\n      return (int *)(info1 + 8);\n    }\n    array[143].r_offset = 0x2007046c;\n    array[142].r_info = 0x2007046c;\n    if1 (-1 < (int)temp5) {\n      *(uint *)(temp3 + info1 + 4) = *(uint *)(temp3 + info1 + 4) | 1;\n      unlockMemory(lock);\n      return (int *)(info1 + 8);\n    }\n    if1 (temp3 < 0x200) {\n      temp3 = temp2 & 0xfffffff8;\n      temp8 = *(int *)((int)&array[0x8d].r_info + temp3);\n      info2 = 1 << ((int)(temp2 >> 3) >> 2 & 0xffU) | array[141].r_offset;\n      *(int *)(info1 + 8) = temp8;\n      *(uint *)(info1 + 0xc) = temp3 + 0x20070464;\n      array[141].r_offset = info2;\n      *(dword *)((int)&array[0x8d].r_info + temp3) = info1;\n      *(dword *)(temp8 + 0xc) = info1;\n    }\n    else1 {\n      temp5 = temp2 >> 9;\n      if1 (temp5 < 5) {\n        temp1 = (temp2 >> 6) + 0x38;\n        temp8 = temp1 * 2;\n      }\n      else1 if1 (temp5 < 0x15) {\n        temp1 = temp5 + 0x5b;\n        temp8 = temp1 * 2;\n      }\n      else1 if1 (temp5 < 0x55) {\n        temp1 = (temp2 >> 0xc) + 0x6e;\n        temp8 = temp1 * 2;\n      }\n      else1 if1 (temp5 < 0x155) {\n        temp1 = (temp2 >> 0xf) + 0x77;\n        temp8 = temp1 * 2;\n      }\n      else1 if1 (temp5 < 0x555) {\n        temp1 = (temp2 >> 0x12) + 0x7c;\n        temp8 = temp1 * 2;\n      }\n      else1 {\n        temp8 = 0xfc;\n        temp1 = 0x7e;\n      }\n      info2 = temp8 * 4 + 0x20070464;\n      info3 = (&array[0x8d].r_info)[temp8];\n      if1 (info3 == info2) {\n        array[141].r_offset =\n             array[141].r_offset | 1 << (temp1 >> 2 & 0xffU);\n        info4 = info3;\n      }\n      else1 {\n        do1 {\n          info4 = info3;\n          if1 ((*(uint *)(info3 + 4) & 0xfffffffc) <= temp3) break;\n          info3 = *(dword *)(info3 + 8);\n          info4 = info3;\n        } while1 (info2 != info3);\n        info3 = *(dword *)(info4 + 0xc);\n      }\n      info2 = array[141].r_offset;\n      *(dword *)(info1 + 0xc) = info3;\n      *(dword *)(info1 + 8) = info4;\n      *(dword *)(info3 + 8) = info1;\n      *(dword *)(info4 + 0xc) = info1;\n    }\n  }\n  info1 = array[141].r_info;\n  temp2 = 1 << ((int)index >> 2 & 0xffU);\n  if1 (temp2 <= info2) {\n    if1 ((info2 & temp2) == 0) {\n      index = index & 0xfffffffc;\n      do1 {\n        temp2 = temp2 << 1;\n        index = index + 4;\n      } while1 ((info2 & temp2) == 0);\n    }\n    do1 {\n      ptr4 = &array[index + 0x8c].r_info;\n      ptr2 = ptr4;\n      temp3 = index;\n      do1 {\n        for (ptr1 = (undefined *)ptr2[3]; ptr2 != (dword *)ptr1;\n            ptr1 = *(undefined **)(ptr1 + 0xc)) {\n          temp5 = *(uint *)(ptr1 + 4) & 0xfffffffc;\n          temp6 = temp5 - newSize;\n          if1 (0xf < (int)temp6) {\n            temp1 = *(int *)(ptr1 + 8);\n            temp8 = *(int *)(ptr1 + 0xc);\n            ptr3 = ptr1 + newSize;\n            *(uint *)(ptr1 + 4) = newSize | 1;\n            *(int *)(temp1 + 0xc) = temp8;\n            *(int *)(temp8 + 8) = temp1;\n            array[142].r_info = (dword)ptr3;\n            array[143].r_offset = (dword)ptr3;\n            *(undefined4 *)(ptr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr3 + 8) = 0x2007046c;\n            *(uint *)(ptr3 + 4) = temp6 | 1;\n            *(uint *)(ptr3 + temp6) = temp6;\n            unlockMemory(lock);\n            return (int *)(ptr1 + 8);\n          }\n          if1 (-1 < (int)temp6) {\n            temp8 = *(int *)(ptr1 + 8);\n            temp1 = *(int *)(ptr1 + 0xc);\n            *(uint *)(ptr1 + temp5 + 4) = *(uint *)(ptr1 + temp5 + 4) | 1;\n            *(int *)(temp8 + 0xc) = temp1;\n            *(int *)(temp1 + 8) = temp8;\n            unlockMemory(lock);\n            return (int *)(ptr1 + 8);\n          }\n        }\n        temp3 = temp3 + 1;\n        ptr2 = ptr2 + 2;\n      } while1 ((temp3 & 3) != 0);\n      do1 {\n        temp5 = index & 3;\n        ptr1 = (undefined *)(ptr4 + -2);\n        index = index - 1;\n        if1 (temp5 == 0) {\n          array[141].r_offset = array[141].r_offset & ~temp2;\n          break;\n        }\n        ptr4 = (dword *)*ptr4;\n      } while1 (ptr4 == (dword *)ptr1);\n      temp2 = temp2 * 2;\n      if1 ((array[141].r_offset <= temp2 &&\n           temp2 - array[141].r_offset != 0) || (index = temp3, temp2 == 0))\n      break;\n      for (; (array[141].r_offset & temp2) == 0; temp2 = temp2 << 1) {\n        index = index + 4;\n      }\n    } while1( true );\n  }\n  index = *(uint *)(array[141].r_info + 4) & 0xfffffffc;\n  if1 ((newSize <= index) &&\n     (temp2 = index - newSize, info2 = array[141].r_info, 0xf < (int)temp2))\n  goto1 LAB_00081b1a;\n  temp2 = array[141].r_info + index;\n  if1 (array[270].r_offset == 0xffffffff) {\n    temp3 = newSize + DAT_20071218 + 0x10;\n  }\n  else1 {\n    temp3 = newSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  info2 = _sbrk_r(lock,uVar4);\n  if1 ((info2 == 0xffffffff) || ((info2 < temp2 && (info1 != 0x20070464)))) {\n    index = *(uint *)(array[141].r_info + 4) & 0xfffffffc;\n    info2 = array[141].r_info;\n  }\n  else1 {\n    temp5 = DAT_2007121c + temp3;\n    DAT_2007121c = temp5;\n    if1 ((temp2 == info2) && ((temp2 & 0xfff) == 0)) {\n      *(uint *)(array[141].r_info + 4) = temp3 + index | 1;\n    }\n    else1 {\n      info3 = info2;\n      if1 (array[270].r_offset != 0xffffffff) {\n        info3 = array[270].r_offset;\n        DAT_2007121c = temp5 + (info2 - temp2);\n      }\n      array[270].r_offset = info3;\n      temp2 = info2 & 7;\n      if1 (temp2 == 0) {\n        temp8 = 0x1000;\n      }\n      else1 {\n        info2 = info2 + (8 - temp2);\n        temp8 = 0x1008 - temp2;\n      }\n      temp8 = temp8 - (temp3 + info2 & 0xfff);\n      temp1 = _sbrk_r(lock,temp8);\n      if1 (temp1 == -1) {\n        temp2 = 1;\n        temp8 = 0;\n      }\n      else1 {\n        temp2 = (temp1 - info2) + temp8 | 1;\n      }\n      temp5 = DAT_2007121c + temp8;\n      array[141].r_info = info2;\n      DAT_2007121c = temp5;\n      *(uint *)(info2 + 4) = temp2;\n      if1 (info1 != 0x20070464) {\n        if1 (index < 0x10) {\n          *(undefined4 *)(info2 + 4) = 1;\n          index = 0;\n          goto1 LAB_00081b04;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(info1 + 4) = index | *(uint *)(info1 + 4) & 1;\n        *(undefined4 *)(info1 + index + 4) = 5;\n        *(undefined4 *)(info1 + index + 8) = 5;\n        if1 (0xf < index) {\n          _free_r(lock,info1 + 8);\n          temp5 = DAT_2007121c;\n        }\n      }\n    }\n    if1 (DAT_20071214 < temp5) {\n      DAT_20071214 = temp5;\n    }\n    if1 (DAT_20071210 < temp5) {\n      DAT_20071210 = temp5;\n    }\n    index = *(uint *)(array[141].r_info + 4) & 0xfffffffc;\n    info2 = array[141].r_info;\n  }\nLAB_00081b04:\n  temp2 = index - newSize;\n  if1 ((index < newSize) || ((int)temp2 < 0x10)) {\n    unlockMemory(lock);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  array[141].r_info = newSize + info2;\n  *(uint *)(info2 + 4) = newSize | 1;\n  *(uint *)(array[141].r_info + 4) = temp2 | 1;\n  unlockMemory(lock);\n  return (int *)(info2 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "lock",
                "param_2": "size",
                "dVar1": "info1",
                "iVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "dVar7": "info2",
                "uVar8": "temp6",
                "iVar9": "temp7",
                "puVar10": "ptr1",
                "dVar11": "info3",
                "dVar12": "info4",
                "iVar13": "temp8",
                "pdVar14": "ptr2",
                "uVar15": "newSize",
                "puVar16": "ptr3",
                "pdVar17": "ptr4",
                "uVar18": "index",
                "if": "if1",
                "else": "else1",
                "LAB_00081876": "label1",
                "__malloc_lock": "lockMemory",
                "__malloc_unlock": "unlockMemory",
                "Elf32_Rel_ARRAY_20070000": "array",
                "goto": "goto1",
                "while": "while1",
                "do": "do1",
                "_sbrk_r(param_1,uVar4)": "_sbrk_r(lock,uVar4)"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "__smakebuf_r",
                "malloc"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_data_00081d48",
            "code": "\nundefined4 * copyData_00081d48(undefined4 *dst,undefined4 *src,uint size)\n\n{\n  undefined4 *dstPtr;\n  undefined4 *dstNextPtr;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint remainingSizeMinus4;\n  bool isRemainingSizePositive;\n  \n  dstNextPtr = dst;\n  if ((((uint)src | (uint)dst) & 3) != 0) {\n    if (size < 8) {\n      remainingSizeMinus4 = size - 4;\n      if (3 < size) {\n        do {\n          dstPtr = src;\n          srcPtr = dstNextPtr;\n          isRemainingSizePositive = remainingSizeMinus4 != 0;\n          remainingSizeMinus4 = remainingSizeMinus4 - 1;\n          *(undefined *)srcPtr = *(undefined *)dstPtr;\n          dstNextPtr = (undefined4 *)((int)srcPtr + 1);\n          src = (undefined4 *)((int)dstPtr + 1);\n        } while (isRemainingSizePositive);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)dstPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)dstPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)dstPtr + 3);\n        return dst;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dst & 3) != 0)) {\n      remainingSizeMinus4 = 4 - ((uint)dst & 3);\n      size = size - remainingSizeMinus4;\n      dstPtr = dst;\n      srcPtr = src;\n      if (((uint)dst & 1) != 0) {\n        srcPtr = (undefined4 *)((int)src + 1);\n        dstPtr = (undefined4 *)((int)dst + 1);\n        *(undefined *)dst = *(undefined *)src;\n      }\n      dstNextPtr = dstPtr;\n      src = srcPtr;\n      if ((remainingSizeMinus4 & 2) != 0) {\n        src = (undefined4 *)((int)srcPtr + 2);\n        dstNextPtr = (undefined4 *)((int)dstPtr + 2);\n        *(undefined2 *)dstPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dstNextPtr = *src;\n    dstNextPtr[1] = src[1];\n    dstNextPtr[2] = src[2];\n    dstNextPtr[3] = src[3];\n    dstNextPtr[4] = src[4];\n    dstNextPtr[5] = src[5];\n    dstNextPtr[6] = src[6];\n    dstNextPtr[7] = src[7];\n    dstNextPtr[8] = src[8];\n    dstNextPtr[9] = src[9];\n    dstNextPtr[10] = src[10];\n    dstNextPtr[0xb] = src[0xb];\n    dstNextPtr[0xc] = src[0xc];\n    dstNextPtr[0xd] = src[0xd];\n    dstNextPtr[0xe] = src[0xe];\n    dstNextPtr[0xf] = src[0xf];\n    dstNextPtr = dstNextPtr + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dstNextPtr = *src;\n      dstNextPtr[1] = src[1];\n      dstNextPtr[2] = src[2];\n      dstNextPtr[3] = src[3];\n      dstNextPtr = dstNextPtr + 4;\n      src = src + 4;\n      isRemainingSizePositive = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemainingSizePositive);\n  }\n  remainingSizeMinus4 = remainingSize + 0xc;\n  srcPtr = dstNextPtr;\n  dstPtr = src;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      src = dstPtr + 1;\n      *srcPtr = *dstPtr;\n      isRemainingSizePositive = 3 < remainingSizeMinus4;\n      remainingSizeMinus4 = remainingSizeMinus4 - 4;\n      dstNextPtr = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      dstPtr = src;\n    } while (isRemainingSizePositive);\n  }\nLAB_00081dcc:\n  if (remainingSizeMinus4 + 4 != 0) {\n    dstPtr = dstNextPtr;\n    srcPtr = src;\n    if ((remainingSizeMinus4 & 1) != 0) {\n      srcPtr = (undefined4 *)((int)src + 1);\n      dstPtr = (undefined4 *)((int)dstNextPtr + 1);\n      *(undefined *)dstNextPtr = *(undefined *)src;\n    }\n    if ((remainingSizeMinus4 + 4 & 2) != 0) {\n      *(undefined2 *)dstPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return dst;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_data_00081d48",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dstPtr",
                "puVar2": "dstNextPtr",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "remainingSizeMinus4",
                "bVar6": "isRemainingSizePositive"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *source,undefined4 *destination,uint length)\n\n{\n  int index;\n  undefined4 *srcPtr;\n  undefined4 *destPtr;\n  undefined4 *tempPtr;\n  uint tempVal;\n  undefined *tempByte;\n  uint remainder;\n  \n  if ((destination < source) && (tempPtr = (undefined4 *)((int)destination + length), source < tempPtr)) {\n    tempByte = (undefined *)((int)source + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        index = index + -1;\n        tempByte = tempByte + -1;\n        *tempByte = *(undefined *)tempPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)source | (uint)destination) & 3) == 0) {\n    tempPtr = source;\n    destPtr = destination;\n    do {\n      srcPtr = tempPtr + 4;\n      *tempPtr = *destPtr;\n      tempPtr[1] = destPtr[1];\n      tempPtr[2] = destPtr[2];\n      tempPtr[3] = destPtr[3];\n      tempPtr = srcPtr;\n      destPtr = destPtr + 4;\n    } while (srcPtr != (undefined4 *)((int)source + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    remainder = length & 0xf;\n    destination = destination + index * 4;\n    source = source + index * 4;\n    tempVal = remainder;\n    tempPtr = source;\n    destPtr = destination;\n    if (3 < remainder) {\n      do {\n        tempVal = tempVal - 4;\n        *tempPtr = *destPtr;\n        tempPtr = tempPtr + 1;\n        destPtr = destPtr + 1;\n      } while (3 < tempVal);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      source = (undefined4 *)((int)source + index);\n      destination = (undefined4 *)((int)destination + index);\n      remainder = length & 3;\n    }\n    length = remainder;\n    if (length == 0) {\n      return;\n    }\n  }\n  tempPtr = source;\n  do {\n    destPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)destination;\n    destination = (undefined4 *)((int)destination + 1);\n    tempPtr = destPtr;\n  } while (destPtr != (undefined4 *)(length + (int)source));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "srcPtr",
                "puVar3": "destPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempVal",
                "puVar6": "tempByte",
                "uVar7": "remainder"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid memset_00081f00(undefined4 *destination,undefined value,uint length)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 fill_value;\n  uint remaining_length;\n  bool is_length_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_length_zero = length == 0;\n    dest_ptr = destination;\n    length = length - 1;\n    if (is_length_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)destination & 3) == 0) break;\n      is_length_zero = length == 0;\n      dest_ptr = destination;\n      length = length - 1;\n      if (is_length_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_length = length;\n    dest_ptr = destination;\n    if (0xf < length) {\n      remaining_length = length - 0x10;\n      do {\n        *dest_ptr = fill_value;\n        dest_ptr[1] = fill_value;\n        dest_ptr[2] = fill_value;\n        dest_ptr[3] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_length & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      destination = destination + ((remaining_length >> 4) + 1) * 4;\n      remaining_length = length;\n      dest_ptr = destination;\n      if (length < 4) goto LAB_00081f7c;\n    }\n    do {\n      length = length - 4;\n      *destination = fill_value;\n      destination = destination + 1;\n    } while (3 < length);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_length - 4 & 0xfffffffc) + 4);\n    length = remaining_length & 3;\n  }\nLAB_00081f7c:\n  if (length != 0) {\n    dest_ptr = destination;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(length + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "fill_value",
                "uVar4": "remaining_length",
                "bVar5": "is_length_zero"
            },
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reallocate_relocation_array_00081f9c",
            "code": "\nvoid reallocateRelocationArray_00081f9c(undefined4 newSize,undefined4 elementSize)\n\n{\n  _realloc_r(Elf32_Rel_ARRAY_20070000[140].r_offset,newSize,elementSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reallocate_relocation_array_00081f9c",
                "param_1": "newSize",
                "param_2": "elementSize"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_or_resize_memory_00081fac",
            "code": "\nint * allocateOrResizeMemory_00081fac(undefined4 *param_initializationFunction,int *param_existingMemory,uint param_newMemorySize)\n\n{\n  dword temp_offset;\n  int *newMemory;\n  uint temp_value1;\n  int temp_value2;\n  uint existingMemorySize;\n  int temp_value3;\n  int *temp_memoryPointer;\n  uint updatedMemorySize;\n  uint adjustedMemorySize;\n  int *temp_memoryPointer2;\n  \n  if (param_existingMemory == (int *)0x0) {\n    newMemory = (int *)_malloc_r(param_initializationFunction,param_newMemorySize);\n    return newMemory;\n  }\n  __malloc_lock();\n  existingMemorySize = param_existingMemory[-1];\n  updatedMemorySize = existingMemorySize & 0xfffffffc;\n  newMemory = param_existingMemory + -2;\n  if (param_newMemorySize + 0xb < 0x17) {\n    adjustedMemorySize = 0x10;\n  }\n  else {\n    adjustedMemorySize = param_newMemorySize + 0xb & 0xfffffff8;\n    if ((int)adjustedMemorySize < 0) goto LAB_00082078;\n  }\n  if (adjustedMemorySize < param_newMemorySize) {\nLAB_00082078:\n    *param_initializationFunction = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)updatedMemorySize < (int)adjustedMemorySize) {\n    temp_offset = (int)newMemory + updatedMemorySize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_offset) {\n      temp_value1 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(adjustedMemorySize + 0x10) <= (int)(temp_value1 + updatedMemorySize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemory + adjustedMemorySize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_value1 + updatedMemorySize) - adjustedMemorySize | 1;\n        param_existingMemory[-1] = adjustedMemorySize | param_existingMemory[-1] & 1U;\n        __malloc_unlock(param_initializationFunction);\n        return param_existingMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_offset + 4) & 0xfffffffe) + temp_offset + 4) & 1) == 0) {\n      temp_value1 = *(uint *)(temp_offset + 4) & 0xfffffffc;\n      if ((int)adjustedMemorySize <= (int)(temp_value1 + updatedMemorySize)) {\n        temp_value3 = *(int *)(temp_offset + 0xc);\n        temp_value2 = *(int *)(temp_offset + 8);\n        *(int *)(temp_value2 + 0xc) = temp_value3;\n        *(int *)(temp_value3 + 8) = temp_value2;\n        updatedMemorySize = temp_value1 + updatedMemorySize;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp_value1 = 0;\n      temp_offset = 0;\n    }\n    if (-1 < (int)(existingMemorySize << 0x1f)) {\n      temp_memoryPointer2 = (int *)((int)newMemory - param_existingMemory[-2]);\n      existingMemorySize = (temp_memoryPointer2[1] & 0xfffffffcU) + updatedMemorySize;\n      if (temp_offset != 0) {\n        if (temp_offset == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(adjustedMemorySize + 0x10) <= (int)(temp_value1 + existingMemorySize)) {\n            newMemory = temp_memoryPointer2 + 2;\n            temp_value2 = *newMemory;\n            temp_value3 = temp_memoryPointer2[3];\n            updatedMemorySize = updatedMemorySize - 4;\n            *(int *)(temp_value2 + 0xc) = temp_value3;\n            *(int *)(temp_value3 + 8) = temp_value2;\n            if (updatedMemorySize < 0x25) {\n              temp_memoryPointer = newMemory;\n              if (0x13 < updatedMemorySize) {\n                temp_memoryPointer2[2] = *param_existingMemory;\n                temp_memoryPointer2[3] = param_existingMemory[1];\n                if (updatedMemorySize < 0x1c) {\n                  param_existingMemory = param_existingMemory + 2;\n                  temp_memoryPointer = temp_memoryPointer2 + 4;\n                }\n                else {\n                  temp_memoryPointer2[4] = param_existingMemory[2];\n                  temp_memoryPointer2[5] = param_existingMemory[3];\n                  if (updatedMemorySize == 0x24) {\n                    temp_memoryPointer2[6] = param_existingMemory[4];\n                    temp_memoryPointer = param_existingMemory + 5;\n                    param_existingMemory = param_existingMemory + 6;\n                    temp_memoryPointer2[7] = *temp_memoryPointer;\n                    temp_memoryPointer = temp_memoryPointer2 + 8;\n                  }\n                  else {\n                    param_existingMemory = param_existingMemory + 4;\n                    temp_memoryPointer = temp_memoryPointer2 + 6;\n                  }\n                }\n              }\n              *temp_memoryPointer = *param_existingMemory;\n              temp_memoryPointer[1] = param_existingMemory[1];\n              temp_memoryPointer[2] = param_existingMemory[2];\n            }\n            else {\n              memmove(newMemory,param_existingMemory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_memoryPointer2 + adjustedMemorySize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_value1 + existingMemorySize) - adjustedMemorySize | 1;\n            temp_memoryPointer2[1] = adjustedMemorySize | temp_memoryPointer2[1] & 1U;\n            __malloc_unlock(param_initializationFunction);\n            return newMemory;\n          }\n        }\n        else {\n          temp_value1 = temp_value1 + existingMemorySize;\n          if ((int)adjustedMemorySize <= (int)temp_value1) {\n            temp_value3 = *(int *)(temp_offset + 0xc);\n            temp_value2 = *(int *)(temp_offset + 8);\n            *(int *)(temp_value2 + 0xc) = temp_value3;\n            *(int *)(temp_value3 + 8) = temp_value2;\n            temp_memoryPointer = temp_memoryPointer2 + 2;\n            temp_value2 = *temp_memoryPointer;\n            temp_value3 = temp_memoryPointer2[3];\n            existingMemorySize = updatedMemorySize - 4;\n            *(int *)(temp_value2 + 0xc) = temp_value3;\n            *(int *)(temp_value3 + 8) = temp_value2;\n            updatedMemorySize = temp_value1;\n            if (existingMemorySize < 0x25) {\n              newMemory = temp_memoryPointer;\n              if (0x13 < existingMemorySize) {\n                temp_memoryPointer2[2] = *param_existingMemory;\n                temp_memoryPointer2[3] = param_existingMemory[1];\n                if (existingMemorySize < 0x1c) {\n                  param_existingMemory = param_existingMemory + 2;\n                  newMemory = temp_memoryPointer2 + 4;\n                }\n                else {\n                  temp_memoryPointer2[4] = param_existingMemory[2];\n                  temp_memoryPointer2[5] = param_existingMemory[3];\n                  if (existingMemorySize == 0x24) {\n                    temp_memoryPointer2[6] = param_existingMemory[4];\n                    newMemory = param_existingMemory + 5;\n                    param_existingMemory = param_existingMemory + 6;\n                    temp_memoryPointer2[7] = *newMemory;\n                    newMemory = temp_memoryPointer2 + 8;\n                  }\n                  else {\n                    param_existingMemory = param_existingMemory + 4;\n                    newMemory = temp_memoryPointer2 + 6;\n                  }\n                }\n              }\n              *newMemory = *param_existingMemory;\n              newMemory[1] = param_existingMemory[1];\n              newMemory[2] = param_existingMemory[2];\n              existingMemorySize = temp_memoryPointer2[1];\n              newMemory = temp_memoryPointer2;\n              param_existingMemory = temp_memoryPointer;\n            }\n            else {\n              memmove(temp_memoryPointer,param_existingMemory);\n              existingMemorySize = temp_memoryPointer2[1];\n              newMemory = temp_memoryPointer2;\n              param_existingMemory = temp_memoryPointer;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)adjustedMemorySize <= (int)existingMemorySize) {\n        temp_memoryPointer = temp_memoryPointer2 + 2;\n        temp_value2 = *temp_memoryPointer;\n        temp_value3 = temp_memoryPointer2[3];\n        temp_value1 = updatedMemorySize - 4;\n        *(int *)(temp_value2 + 0xc) = temp_value3;\n        *(int *)(temp_value3 + 8) = temp_value2;\n        updatedMemorySize = existingMemorySize;\n        if (temp_value1 < 0x25) {\n          newMemory = temp_memoryPointer;\n          if (0x13 < temp_value1) {\n            temp_memoryPointer2[2] = *param_existingMemory;\n            temp_memoryPointer2[3] = param_existingMemory[1];\n            if (temp_value1 < 0x1c) {\n              param_existingMemory = param_existingMemory + 2;\n              newMemory = temp_memoryPointer2 + 4;\n            }\n            else {\n              temp_memoryPointer2[4] = param_existingMemory[2];\n              temp_memoryPointer2[5] = param_existingMemory[3];\n              if (temp_value1 == 0x24) {\n                temp_memoryPointer2[6] = param_existingMemory[4];\n                newMemory = param_existingMemory + 5;\n                param_existingMemory = param_existingMemory + 6;\n                temp_memoryPointer2[7] = *newMemory;\n                newMemory = temp_memoryPointer2 + 8;\n              }\n              else {\n                param_existingMemory = param_existingMemory + 4;\n                newMemory = temp_memoryPointer2 + 6;\n              }\n            }\n          }\n          *newMemory = *param_existingMemory;\n          newMemory[1] = param_existingMemory[1];\n          newMemory[2] = param_existingMemory[2];\n          existingMemorySize = temp_memoryPointer2[1];\n          newMemory = temp_memoryPointer2;\n          param_existingMemory = temp_memoryPointer;\n        }\n        else {\n          memmove(temp_memoryPointer,param_existingMemory);\n          existingMemorySize = temp_memoryPointer2[1];\n          newMemory = temp_memoryPointer2;\n          param_existingMemory = temp_memoryPointer;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_memoryPointer2 = (int *)_malloc_r(param_initializationFunction,param_newMemorySize);\n    if (temp_memoryPointer2 == (int *)0x0) goto LAB_000820a0;\n    existingMemorySize = param_existingMemory[-1];\n    if (temp_memoryPointer2 + -2 != (int *)((existingMemorySize & 0xfffffffe) + (int)newMemory)) {\n      updatedMemorySize = updatedMemorySize - 4;\n      if (updatedMemorySize < 0x25) {\n        newMemory = param_existingMemory;\n        temp_memoryPointer = temp_memoryPointer2;\n        if (0x13 < updatedMemorySize) {\n          *temp_memoryPointer2 = *param_existingMemory;\n          temp_memoryPointer2[1] = param_existingMemory[1];\n          if (updatedMemorySize < 0x1c) {\n            newMemory = param_existingMemory + 2;\n            temp_memoryPointer = temp_memoryPointer2 + 2;\n          }\n          else {\n            temp_memoryPointer2[2] = param_existingMemory[2];\n            temp_memoryPointer2[3] = param_existingMemory[3];\n            if (updatedMemorySize == 0x24) {\n              temp_memoryPointer2[4] = param_existingMemory[4];\n              temp_memoryPointer2[5] = param_existingMemory[5];\n              newMemory = param_existingMemory + 6;\n              temp_memoryPointer = temp_memoryPointer2 + 6;\n            }\n            else {\n              newMemory = param_existingMemory + 4;\n              temp_memoryPointer = temp_memoryPointer2 + 4;\n            }\n          }\n        }\n        *temp_memoryPointer = *newMemory;\n        temp_memoryPointer[1] = newMemory[1];\n        temp_memoryPointer[2] = newMemory[2];\n      }\n      else {\n        memmove(temp_memoryPointer2,param_existingMemory);\n      }\n      _free_r(param_initializationFunction,param_existingMemory);\n      goto LAB_000820a0;\n    }\n    updatedMemorySize = updatedMemorySize + (temp_memoryPointer2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp_value1 = updatedMemorySize - adjustedMemorySize;\n  temp_memoryPointer2 = param_existingMemory;\n  if (temp_value1 < 0x10) {\n    newMemory[1] = existingMemorySize & 1 | updatedMemorySize;\n    *(uint *)((int)newMemory + updatedMemorySize + 4) = *(uint *)((int)newMemory + updatedMemorySize + 4) | 1;\n  }\n  else {\n    newMemory[1] = existingMemorySize & 1 | adjustedMemorySize;\n    *(uint *)((int)newMemory + adjustedMemorySize + 4) = temp_value1 | 1;\n    *(uint *)((int)newMemory + temp_value1 + adjustedMemorySize + 4) = *(uint *)((int)newMemory + temp_value1 + adjustedMemorySize + 4) | 1;\n    _free_r(param_initializationFunction,(int)newMemory + adjustedMemorySize + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_initializationFunction);\n  return temp_memoryPointer2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_or_resize_memory_00081fac",
                "param_1": "param_initializationFunction",
                "param_2": "param_existingMemory",
                "param_3": "param_newMemorySize",
                "dVar1": "temp_offset",
                "piVar2": "newMemory",
                "uVar3": "temp_value1",
                "iVar4": "temp_value2",
                "uVar5": "existingMemorySize",
                "iVar6": "temp_value3",
                "piVar7": "temp_memoryPointer",
                "uVar8": "updatedMemorySize",
                "uVar9": "adjustedMemorySize",
                "piVar10": "temp_memoryPointer2"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "__malloc_unlock",
                "_free_r",
                "_malloc_r",
                "memmove",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "allocate_memory_0008236c",
            "code": "\nvoid allocateMemory_0008236c(int *result,undefined4 size)\n\n{\n  int allocatedMemory;\n  \n  DAT_20071244 = 0;\n  allocatedMemory = _sbrk(size);\n  if ((allocatedMemory == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocatedMemory"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_arrays_00082390",
            "code": "\nint compareArrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint byte1;\n  uint byte2;\n  uint byte3;\n  uint byte4;\n  uint temp;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      byte1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        byte2 = byte1 >> 0x10 & 0xff;\n        result = byte2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (byte2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          byte2 = byte1 >> 8 & 0xff;\n          result = byte2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (byte2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (byte1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (byte1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    byte1 = (uint)array2 & 3;\n    if (byte1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (byte1 == 2) {\n        byte1 = *array2;\n        do {\n          array2 = array2 + 1;\n          byte3 = *ptr1;\n          byte1 = byte1 >> 0x10;\n          byte4 = byte3 + 0xfefefeff & ~byte3;\n          temp = byte4 & 0x80808080;\n          byte2 = byte3 & 0xffff;\n          if ((byte4 & 0x8080) != 0 || byte2 != byte1) goto LAB_0008258e;\n          byte1 = *array2;\n          byte2 = byte2 ^ byte3;\n          byte3 = byte1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp == 0 && byte2 == byte3);\n      }\n      else if (byte1 < 2) {\n        byte1 = *array2;\n        do {\n          array2 = array2 + 1;\n          byte3 = *ptr1;\n          byte1 = byte1 >> 8;\n          byte4 = byte3 + 0xfefefeff & ~byte3;\n          temp = byte4 & 0x80808080;\n          byte2 = byte3 & 0xffffff;\n          if ((byte4 & 0x808080) != 0 || byte2 != byte1) goto LAB_0008258e;\n          byte1 = *array2;\n          byte2 = byte2 ^ byte3;\n          byte3 = byte1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp == 0 && byte2 == byte3);\n      }\n      else {\n        byte1 = *array2;\n        do {\n          array2 = array2 + 1;\n          byte3 = *ptr1;\n          byte1 = byte1 >> 0x18;\n          byte4 = byte3 + 0xfefefeff & ~byte3;\n          temp = byte4 & 0x80808080;\n          byte2 = byte3 & 0xff;\n          if ((byte4 & 0x80) != 0 || byte2 != byte1) goto LAB_0008258e;\n          byte1 = *array2;\n          byte2 = byte2 ^ byte3;\n          byte3 = byte1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp == 0 && byte2 == byte3);\n      }\n      byte2 = byte2 << 0x18 | (byte2 >> 8 & 0xff) << 0x10 | (byte2 >> 0x10 & 0xff) << 8 |\n              byte2 >> 0x18;\n      byte1 = (byte3 >> 8 & 0xff) << 0x10 | (byte3 >> 0x10 & 0xff) << 8 | byte3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      byte1 = *ptr1;\n      ptr2 = array2 + 1;\n      byte3 = *array2;\n      temp = byte1 + 0xfefefeff & ~byte1 & 0x80808080;\n      if (byte1 != byte3 || temp != 0) {\nLAB_0008259a:\n        byte2 = byte1 << 0x18 | (byte1 >> 8 & 0xff) << 0x10 | (byte1 >> 0x10 & 0xff) << 8 |\n                byte1 >> 0x18;\n        byte1 = byte3 << 0x18 | (byte3 >> 8 & 0xff) << 0x10 | (byte3 >> 0x10 & 0xff) << 8 |\n                byte3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      byte1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        byte2 = *array1;\n        byte3 = array1[1];\n        temp = byte2 + 0xfefefeff & ~byte2 & 0x80808080;\n        if (byte2 != byte1 || temp != 0) goto LAB_0008258e;\n        byte4 = *ptr1;\n        byte1 = ptr1[1];\n        temp = byte3 + 0xfefefeff & ~byte3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (byte3 == byte4 && temp == 0);\n      byte2 = byte3 << 0x18 | (byte3 >> 8 & 0xff) << 0x10 | (byte3 >> 0x10 & 0xff) << 8 |\n              byte3 >> 0x18;\n      byte1 = byte4 << 0x18 | (byte4 >> 8 & 0xff) << 0x10 | (byte4 >> 0x10 & 0xff) << 8 |\n              byte4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    byte1 = *array1;\n    byte2 = array1[1];\n    byte3 = *array2;\n    byte4 = array2[1];\n    temp = byte1 + 0xfefefeff & ~byte1 & 0x80808080;\n    if (byte1 != byte3 || temp != 0) goto LAB_0008259a;\n    temp = byte2 + 0xfefefeff & ~byte2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (byte2 == byte4 && temp == 0);\n  byte2 = byte2 << 0x18 | (byte2 >> 8 & 0xff) << 0x10 | (byte2 >> 0x10 & 0xff) << 8 | byte2 >> 0x18;\n  byte1 = byte4 << 0x18 | (byte4 >> 8 & 0xff) << 0x10 | (byte4 >> 0x10 & 0xff) << 8 | byte4 >> 0x18;\nLAB_0008259e:\n  byte3 = temp << 0x18 | (temp >> 8 & 0xff) << 0x10 | (temp >> 0x10 & 0xff) << 8 | temp >> 0x18;\n  if (byte3 != 0) {\n    byte3 = 0x18 - LZCOUNT(byte3);\n    byte2 = byte2 >> (byte3 & 0xff);\n    byte1 = byte1 >> (byte3 & 0xff);\n  }\n  result = 1;\n  if (byte2 <= byte1) {\n    result = -(uint)(byte2 < byte1);\n  }\n  return result;\nLAB_0008258e:\n  byte2 = byte2 << 0x18 | (byte2 >> 8 & 0xff) << 0x10 | (byte2 >> 0x10 & 0xff) << 8 | byte2 >> 0x18;\n  byte1 = byte1 << 0x18 | (byte1 >> 8 & 0xff) << 0x10 | (byte1 >> 0x10 & 0xff) << 8 | byte1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "byte1",
                "uVar6": "byte2",
                "uVar7": "byte3",
                "uVar8": "byte4",
                "uVar9": "temp"
            },
            "calling": [
                "equals"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_with_alignment_000825cc",
            "code": "\nvoid copyStringWithAlignment_000825cc(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextSource;\n  uint *nextByteSource;\n  uint currentUInt;\n  uint currentByte;\n  uint *nextDestination;\n  bool isShortZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextByteSource = source;\n    if (((uint)source & 1) != 0) {\n      nextByteSource = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextByteSource;\n    if (((uint)nextByteSource & 2) != 0) {\n      source = (uint *)((int)nextByteSource + 2);\n      currentShort = *(ushort *)nextByteSource;\n      isShortZero = (currentShort & 0xff) == 0;\n      if (isShortZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isShortZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isShortZero) {\n        return;\n      }\n    }\n  }\n  currentUInt = *source;\n  nextByteSource = source + 1;\n  nextDestination = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentUInt + 0xfefefeff & ~currentUInt & 0x80808080) != 0) goto LAB_00082630;\n    nextDestination = destination + 1;\n    *destination = currentUInt;\n    nextByteSource = source + 2;\n    currentUInt = source[1];\n  }\n  while( true ) {\n    nextSource = nextByteSource + 1;\n    currentByte = *nextByteSource;\n    destination = nextDestination;\n    if ((currentUInt + 0xfefefeff & ~currentUInt & 0x80808080) != 0) break;\n    destination = nextDestination + 1;\n    *nextDestination = currentUInt;\n    currentUInt = currentByte;\n    if ((currentByte + 0xfefefeff & ~currentByte & 0x80808080) != 0) break;\n    nextByteSource = nextByteSource + 2;\n    currentUInt = *nextSource;\n    nextDestination = nextDestination + 2;\n    *destination = currentByte;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)currentUInt;\n    currentByte = currentUInt & 0xff;\n    currentUInt = currentUInt >> 8 | currentUInt << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (currentByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextSource",
                "puVar4": "nextByteSource",
                "uVar5": "currentUInt",
                "uVar6": "currentByte",
                "puVar7": "nextDestination",
                "bVar8": "isShortZero"
            },
            "calling": [
                "move",
                "copy",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint countLeadingZeros_00082688(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "FUN_000810a6",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_to_file_00082824",
            "code": "\nint writeToFile_00082824(undefined4 fileDescriptor,int numOfElements,int **data)\n\n{\n  int *dataPtr;\n  int returnValue;\n  int *currentDataPtr;\n  uint counter;\n  undefined4 *currentElementPtr;\n  uint elementSize;\n  uint numOfElements;\n  \n  if (-1 < *(int *)(numOfElements + 100) << 0x12) {\n    returnValue = __sfvwrite_r();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return returnValue;\n  }\n  currentDataPtr = data[2];\n  dataPtr = *data;\n  while (currentDataPtr != (int *)0x0) {\n    elementSize = dataPtr[1];\n    numOfElements = elementSize >> 2;\n    if (numOfElements != 0) {\n      currentElementPtr = (undefined4 *)(*dataPtr + -4);\n      counter = 0;\n      do {\n        currentElementPtr = currentElementPtr + 1;\n        returnValue = _fputwc_r(fileDescriptor,*currentElementPtr,numOfElements);\n        counter = counter + 1;\n        if (returnValue == -1) goto errorOccurred;\n      } while (numOfElements != counter);\n      currentDataPtr = data[2];\n    }\n    currentDataPtr = (int *)((int)currentDataPtr - (elementSize & 0xfffffffc));\n    data[2] = currentDataPtr;\n    dataPtr = dataPtr + 2;\n  }\n  returnValue = 0;\nerrorOccurred:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_to_file_00082824",
                "param_1": "fileDescriptor",
                "param_2": "numOfElements",
                "param_3": "data",
                "piVar1": "dataPtr",
                "iVar2": "returnValue",
                "piVar3": "currentDataPtr",
                "uVar4": "counter",
                "puVar5": "currentElementPtr",
                "uVar6": "elementSize",
                "uVar7": "numOfElements",
                "LAB_00082864": "errorOccurred"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "print_formatted_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint printFormattedString_0008289c(int outputBuffer,int formatString,int *******argList,int **argPtr)\n\n{\n  bool hasLeadingZeros;\n  bool isNegative;\n  bool hasPrefix;\n  char prefixChar;\n  bool isZeroPadded;\n  int ********ppart;\n  int *var7;\n  int index;\n  char char9;\n  int *******inptr;\n  uint tempVar;\n  int **intPtrPointer;\n  uint tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  int ********ppart2;\n  int index2;\n  int *******partLength;\n  int *dataPtr;\n  int *******pppppppiVar20;\n  uint undefinedVar;\n  int *ptr2;\n  int *******tempPtr;\n  undefined4 undefinedVar2;\n  int ********ppart3;\n  bool isNonZero;\n  longlong longVar;\n  int *******totalLength;\n  int *******formatSpecifier;\n  int **argPtrPointer;\n  int formattedLength;\n  char *maskChar;\n  char leadingChar;\n  undefined paddingChar;\n  undefined undefined3;\n  int ********ppart4;\n  int numParts;\n  int *******partOffset;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******localBuffer [16];\n  \n  if ((outputBuffer != 0) && (*(int *)(outputBuffer + 0x38) == 0)) {\n    __sinit();\n  }\n  tempVar2 = (uint)*(ushort *)(formatString + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(formatString + 0xc) << 0x12)) {\n    tempVar2 = tempVar2 | 0x2000;\n    *(short *)(formatString + 0xc) = (short)tempVar2;\n    *(uint *)(formatString + 100) = *(uint *)(formatString + 100) & 0xffffdfff;\n  }\n  if (((int)(tempVar2 << 0x1c) < 0) && (*(int *)(formatString + 0x10) != 0)) {\n    if ((tempVar2 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    index = __swsetup_r(outputBuffer,formatString);\n    if (index != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(formatString + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(formatString + 0xe)) {\n    index = __sbprintf(outputBuffer,formatString,argList,argPtr);\n    return index;\n  }\nLAB_000828ee:\n  maskChar = (char *)0x0;\n  partOffset = (int *******)0x0;\n  numParts = 0;\n  formattedLength = 0;\n  ppart = (int ********)local_68;\n  argPtrPointer = argPtr;\n  ppart4 = (int ********)local_68;\nLAB_00082902:\n  inptr = argList;\n  if ((*(char *)argList != '\\0') && (*(char *)argList != '%')) {\n    do {\n      inptr = (int *******)((int)inptr + 1);\n      if (*(char *)inptr == '\\0') break;\n    } while (*(char *)inptr != '%');\n    pppppppiVar20 = (int *******)((int)inptr - (int)argList);\n    if (pppppppiVar20 != (int *******)0x0) {\n      numParts = numParts + 1;\n      partOffset = (int *******)((int)partOffset + (int)pppppppiVar20);\n      *ppart = argList;\n      ppart[1] = pppppppiVar20;\n      if (numParts < 8) {\n        ppart = ppart + 2;\n      }\n      else {\n        if (partOffset == (int *******)0x0) {\n          formattedLength = formattedLength + (int)pppppppiVar20;\n          numParts = 0;\n          ppart = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n        ppart = (int ********)local_68;\n        if (index != 0) goto LAB_00083142;\n      }\n      formattedLength = formattedLength + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)inptr != '\\0') {\n    leadingChar = '\\0';\n    tempVar3 = (uint)*(byte *)((int)inptr + 1);\n    tempVar2 = 0;\n    isZeroPadded = false;\n    isNegative = false;\n    hasLeadingZeros = false;\n    hasPrefix = false;\n    isNonZero = false;\n    pppppppiVar20 = (int *******)0x0;\n    formatSpecifier = (int *******)0xffffffff;\n    argList = (int *******)((int)inptr + 1);\nLAB_00082976:\n    argList = (int *******)((int)argList + 1);\nLAB_0008297a:\n    switch(tempVar3) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (tempVar3 != 0) {\n        totalLength = (int *******)0x1;\n        formatSpecifier = (int *******)0x1;\n        ppart3 = (int ********)&local_90;\n        local_90 = (char)tempVar3;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      hasPrefix = true;\n      tempVar3 = (uint)*(byte *)argList;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*argPtrPointer;\n      argPtrPointer = argPtrPointer + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      tempVar3 = (uint)*(byte *)argList;\n      goto LAB_00082976;\n    case 0x2b:\n      tempVar3 = (uint)*(byte *)argList;\n      leadingChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      tempVar2 = tempVar2 | 4;\n      tempVar3 = (uint)*(byte *)argList;\n      goto LAB_00082976;\n    case 0x2e:\n      tempVar3 = (uint)*(byte *)argList;\n      inptr = (int *******)((int)argList + 1);\n      if (tempVar3 == 0x2a) {\n        tempVar3 = (uint)*(byte *)((int)argList + 1);\n        formatSpecifier = (int *******)*argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        argList = inptr;\n        if ((int)formatSpecifier < 0) {\n          formatSpecifier = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      tempVar = tempVar3 - 0x30;\n      if (tempVar < 10) {\n        undefinedVar = 0;\n        do {\n          argList = (int *******)((int)inptr + 1);\n          tempVar3 = (uint)*(byte *)inptr;\n          undefinedVar = tempVar + undefinedVar * 10;\n          tempVar = tempVar3 - 0x30;\n          inptr = argList;\n        } while (tempVar < 10);\n        formatSpecifier = (int *******)(undefinedVar | (int)undefinedVar >> 0x1f);\n      }\n      else {\n        formatSpecifier = (int *******)0x0;\n        argList = inptr;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      tempVar2 = tempVar2 | 0x80;\n      tempVar3 = (uint)*(byte *)argList;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isNegative = true;\n      if (hasLeadingZeros == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argPtrPointer = (int **)((int)argPtrPointer + 7U & 0xfffffff8);\n      dataPtr = *argPtrPointer;\n      ptr2 = argPtrPointer[1];\n      argPtrPointer = argPtrPointer + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isNegative = true;\n      if (hasLeadingZeros != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      index = (uint)isNegative << 4;\n      tempVar4 = (uint)hasLeadingZeros << 5;\n      if ((isNegative == 0) && (tempVar4 = (uint)isNonZero << 6, isNonZero != 0)) {\n        dataPtr = (int *)(uint)*(ushort *)argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        ptr2 = (int *)0x0;\n      }\n      else {\n        index = tempVar4;\n        dataPtr = *argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        ptr2 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isNegative = true;\n      if (hasLeadingZeros != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isNegative) || (isNonZero == false)) {\n        index = 1;\n        dataPtr = *argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        ptr2 = (int *)0x0;\n      }\n      else {\n        ptr2 = (int *)0x0;\n        dataPtr = (int *)(uint)*(ushort *)argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        index = 1;\n      }\n      break;\n    case 0x58:\n      maskChar = \"0123456789ABCDEF\";\n      if (hasLeadingZeros == false) goto LAB_00082efa;\nLAB_00082d1a:\n      intPtrPointer = (int **)((int)argPtrPointer + 7U & 0xfffffff8);\n      argPtrPointer = intPtrPointer + 2;\n      dataPtr = *intPtrPointer;\n      ptr2 = intPtrPointer[1];\n      goto LAB_00082d2e;\n    case 99:\n      dataPtr = *argPtrPointer;\n      argPtrPointer = argPtrPointer + 1;\n      totalLength = (int *******)0x1;\n      local_90 = SUB41(dataPtr,0);\n      formatSpecifier = (int *******)0x1;\n      ppart3 = (int ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (hasLeadingZeros != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isNegative == false) && (isNonZero != false)) {\n        dataPtr = (int *)(int)*(short *)argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        ptr2 = (int *)((int)dataPtr >> 0x1f);\n      }\n      else {\n        dataPtr = *argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        ptr2 = (int *)((int)dataPtr >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)ptr2 < 0) {\n        isNonZero = dataPtr != (int *)0x0;\n        dataPtr = (int *)-(int)dataPtr;\n        ptr2 = (int *)(-(int)ptr2 - (uint)isNonZero);\n        leadingChar = '-';\n        prefixChar = '-';\n        index = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)formatSpecifier) {\n        tempVar2 = tempVar2 & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      tempVar3 = (uint)dataPtr | (uint)ptr2;\n      index = 1;\n      prefixChar = leadingChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isNonZero = true;\n      tempVar3 = (uint)*(byte *)argList;\n      goto LAB_00082976;\n    case 0x6c:\n      tempVar3 = (uint)*(byte *)argList;\n      if (tempVar3 == 0x6c) {\n        hasLeadingZeros = true;\n        tempVar3 = (uint)*(byte *)((int)argList + 1);\n        argList = (int *******)((int)argList + 1);\n      }\n      else {\n        isNegative = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (hasLeadingZeros == false) {\n        if (isNegative == false) {\n          if (isNonZero) {\n            dataPtr = *argPtrPointer;\n            argPtrPointer = argPtrPointer + 1;\n            *(short *)dataPtr = (short)formattedLength;\n          }\n          else {\n            dataPtr = *argPtrPointer;\n            argPtrPointer = argPtrPointer + 1;\n            *dataPtr = formattedLength;\n          }\n        }\n        else {\n          dataPtr = *argPtrPointer;\n          argPtrPointer = argPtrPointer + 1;\n          *dataPtr = formattedLength;\n        }\n      }\n      else {\n        dataPtr = *argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        *dataPtr = formattedLength;\n        dataPtr[1] = formattedLength >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (hasLeadingZeros == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      intPtrPointer = (int **)((int)argPtrPointer + 7U & 0xfffffff8);\n      argPtrPointer = intPtrPointer + 2;\n      dataPtr = *intPtrPointer;\n      ptr2 = intPtrPointer[1];\n      index = 0;\n      break;\n    case 0x70:\n      dataPtr = *argPtrPointer;\n      argPtrPointer = argPtrPointer + 1;\n      undefined3 = 0x78;\n      isZeroPadded = true;\n      ptr2 = (int *)0x0;\n      paddingChar = 0x30;\n      maskChar = \"0123456789abcdef\";\n      index = 2;\n      break;\n    case 0x71:\n      hasLeadingZeros = true;\n      tempVar3 = (uint)*(byte *)argList;\n      goto LAB_00082976;\n    case 0x73:\n      ppart3 = (int ********)*argPtrPointer;\n      leadingChar = '\\0';\n      argPtrPointer = argPtrPointer + 1;\n      if (ppart3 != (int ********)0x0) {\n        if ((int)formatSpecifier < 0) {\n          formatSpecifier = (int *******)strlen(ppart3);\n          inptr = (int *******)0x0;\n          prefixChar = leadingChar;\n        }\n        else {\n          index = memchr(ppart3,0,formatSpecifier);\n          prefixChar = leadingChar;\n          if (index == 0) {\n            inptr = (int *******)0x0;\n          }\n          else {\n            partLength = (int *******)(index - (int)ppart3);\n            if ((int)formatSpecifier <= (int)(int *******)(index - (int)ppart3)) {\n              partLength = formatSpecifier;\n            }\n            inptr = (int *******)0x0;\n            formatSpecifier = partLength;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < formatSpecifier) {\n        formatSpecifier = (int *******)0x6;\n      }\n      totalLength = (int *******)((uint)formatSpecifier & ~((int)formatSpecifier >> 0x1f));\n      ppart3 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      leadingChar = '\\0';\n      inptr = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!hasLeadingZeros) goto LAB_00082ce0;\nLAB_00082bc6:\n      intPtrPointer = (int **)((int)argPtrPointer + 7U & 0xfffffff8);\n      argPtrPointer = intPtrPointer + 2;\n      dataPtr = *intPtrPointer;\n      ptr2 = intPtrPointer[1];\n      index = 1;\n      break;\n    case 0x78:\n      maskChar = \"0123456789abcdef\";\n      if (hasLeadingZeros != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isNegative == false) && (isNonZero != false)) {\n        ptr2 = (int *)0x0;\n        dataPtr = (int *)(uint)*(ushort *)argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n      }\n      else {\n        dataPtr = *argPtrPointer;\n        argPtrPointer = argPtrPointer + 1;\n        ptr2 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((hasPrefix) && (((uint)dataPtr | (uint)ptr2) != 0)) {\n        isZeroPadded = true;\n        paddingChar = 0x30;\n        index = 2;\n        undefined3 = (char)tempVar3;\n      }\n      else {\n        index = 2;\n      }\n    }\n    leadingChar = '\\0';\n    prefixChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)formatSpecifier) {\n      tempVar2 = tempVar2 & 0xffffff7f;\n    }\n    tempVar3 = (uint)dataPtr | (uint)ptr2;\njoined_r0x00082adc:\n    longVar = CONCAT44(ptr2,dataPtr);\n    inptr = formatSpecifier;\n    if ((tempVar3 == 0) && (formatSpecifier == (int *******)0x0)) {\n      ppart3 = (int ********)local_68;\n      if ((index != 0) || (!hasPrefix)) goto LAB_00082b04;\n      ppart3 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (index == 1) {\n      if (ptr2 != (int *)0x0 || (int *)0x9 < dataPtr) {\n        ppart2 = (int ********)(&cStack_6a + 1);\n        do {\n          ppart3 = ppart2;\n          undefinedVar2 = (undefined4)((ulonglong)longVar >> 0x20);\n          char9 = '\\n';\n          __aeabi_uldivmod((int)longVar,undefinedVar2,10,0);\n          *(char *)ppart3 = char9 + '0';\n          longVar = __aeabi_uldivmod((int)longVar,undefinedVar2,10,0);\n          ppart2 = (int ********)((int)ppart3 + -1);\n        } while (longVar != 0);\n        formatSpecifier = (int *******)((int)local_68 - (int)ppart3);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)dataPtr + '0';\n      ppart3 = (int ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppart2 = (int ********)(&cStack_6a + 1);\n    if (index != 2) goto LAB_000830e2;\n    do {\n      ppart3 = ppart2;\n      tempVar3 = (uint)dataPtr & 0xf;\n      dataPtr = (int *)((uint)dataPtr >> 4 | (int)ptr2 << 0x1c);\n      ptr2 = (int *)((uint)ptr2 >> 4);\n      *(char *)ppart3 = maskChar[tempVar3];\n      ppart2 = (int ********)((int)ppart3 + -1);\n    } while (((uint)dataPtr | (uint)ptr2) != 0);\n    formatSpecifier = (int *******)((int)local_68 - (int)ppart3);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (partOffset != (int *******)0x0) {\n    __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(formatString + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return formattedLength;\nLAB_000830e2:\n  do {\n    ppart3 = ppart2;\n    var7 = (int *)((uint)dataPtr >> 3 | (int)ptr2 << 0x1d);\n    ptr2 = (int *)((uint)ptr2 >> 3);\n    index = ((uint)dataPtr & 7) + 0x30;\n    *(char *)ppart3 = (char)index;\n    ppart2 = (int ********)((int)ppart3 + -1);\n    dataPtr = var7;\n  } while (((uint)var7 | (uint)ptr2) != 0);\n  if (hasPrefix) {\n    if (index == 0x30) {\nLAB_00082afe:\n      formatSpecifier = (int *******)((int)local_68 - (int)ppart3);\n    }\n    else {\n      *(undefined *)((int)ppart3 + -1) = 0x30;\n      ppart3 = ppart2;\n      formatSpecifier = (int *******)((int)local_68 - (int)ppart2);\n    }\n  }\n  else {\nLAB_00083282:\n    formatSpecifier = (int *******)((int)local_68 - (int)ppart3);\n  }\nLAB_00082b04:\n  totalLength = formatSpecifier;\n  if ((int)formatSpecifier < (int)inptr) {\n    totalLength = inptr;\n  }\n  if (prefixChar != '\\0') {\n    totalLength = (int *******)((int)totalLength + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPadded) {\n    totalLength = (int *******)((int)totalLength + 2);\n  }\n  if ((tempVar2 == 0) &&\n     (partLength = (int *******)((int)pppppppiVar20 - (int)totalLength), 0 < (int)partLength)) {\n    if ((int)partLength < 0x11) {\n      numParts = numParts + 1;\n    }\n    else {\n      do {\n        tempPtr = partLength;\n        index = numParts + 1;\n        partOffset = partOffset + 4;\n        *ppart = (int *******)0x856f0;\n        ppart[1] = (int *******)0x10;\n        if (index < 8) {\n          tempVar4 = numParts + 2;\n          ppart = ppart + 2;\n          numParts = index;\n        }\n        else if (partOffset == (int *******)0x0) {\n          tempVar4 = 1;\n          ppart = (int ********)local_68;\n          numParts = 0;\n        }\n        else {\n          numParts = index;\n          index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n          if (index != 0) goto LAB_00083142;\n          tempVar4 = numParts + 1;\n          ppart = (int ********)local_68;\n        }\n        partLength = tempPtr + -4;\n      } while (0x10 < (int)partLength);\n      partLength = tempPtr + -4;\n      numParts = tempVar4;\n    }\n    partOffset = (int *******)((int)partOffset + (int)partLength);\n    *ppart = (int *******)0x856f0;\n    ppart[1] = partLength;\n    if (numParts < 8) {\n      index = numParts + 1;\n      ppart = ppart + 2;\n    }\n    else if (partOffset == (int *******)0x0) {\n      index = 1;\n      numParts = 0;\n      ppart = (int ********)local_68;\n    }\n    else {\n      index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n      if (index != 0) goto LAB_00083142;\n      index = numParts + 1;\n      ppart = (int ********)local_68;\n    }\n  }\n  else {\n    index = numParts + 1;\n  }\n  tempVar4 = index;\n  if (leadingChar != '\\0') {\n    partOffset = (int *******)((int)partOffset + 1);\n    tempVar4 = 1;\n    *ppart = (int *******)&leadingChar;\n    ppart[1] = (int *******)0x1;\n    numParts = index;\n    if (index < 8) {\n      tempVar4 = index + 1;\n      ppart = ppart + 2;\n    }\n    else if (partOffset == (int *******)0x0) {\n      numParts = 0;\n      ppart = (int ********)local_68;\n    }\n    else {\n      index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n      if (index != 0) goto LAB_00083142;\n      tempVar4 = numParts + 1;\n      ppart = (int ********)local_68;\n    }\n  }\n  index = tempVar4;\n  index2 = numParts;\n  if (isZeroPadded) {\n    partOffset = (int *******)((int)partOffset + 2);\n    *ppart = (int *******)&paddingChar;\n    ppart[1] = (int *******)0x2;\n    if (tempVar4 < 8) {\n      index = tempVar4 + 1;\n      index2 = tempVar4;\n      ppart = ppart + 2;\n    }\n    else if (partOffset == (int *******)0x0) {\n      index = 1;\n      index2 = 0;\n      ppart = (int ********)local_68;\n    }\n    else {\n      numParts = tempVar4;\n      index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n      if (index != 0) goto LAB_00083142;\n      index = numParts + 1;\n      index2 = numParts;\n      ppart = (int ********)local_68;\n    }\n  }\n  numParts = index2;\n  if ((tempVar2 == 0x80) &&\n     (partLength = (int *******)((int)pppppppiVar20 - (int)totalLength), 0 < (int)partLength)) {\n    if (0x10 < (int)partLength) {\n      do {\n        while( true ) {\n          tempPtr = partLength;\n          numParts = index2 + 1;\n          partOffset = partOffset + 4;\n          *ppart = (int *******)\"0000000000000000\";\n          ppart[1] = (int *******)0x10;\n          if (7 < numParts) break;\n          index = index2 + 2;\n          ppart = ppart + 2;\nLAB_000831f2:\n          index2 = numParts;\n          partLength = tempPtr + -4;\n          if ((int)(tempPtr + -4) < 0x11) goto LAB_00083218;\n        }\n        if (partOffset != (int *******)0x0) {\n          index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n          if (index == 0) {\n            index = numParts + 1;\n            ppart = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        index = 1;\n        index2 = 0;\n        partLength = tempPtr + -4;\n        ppart = (int ********)local_68;\n      } while (0x10 < (int)(tempPtr + -4));\nLAB_00083218:\n      partLength = tempPtr + -4;\n    }\n    partOffset = (int *******)((int)partOffset + (int)partLength);\n    *ppart = (int *******)\"0000000000000000\";\n    ppart[1] = partLength;\n    numParts = index;\n    if (index < 8) {\n      index = index + 1;\n      ppart = ppart + 2;\n    }\n    else if (partOffset == (int *******)0x0) {\n      index = 1;\n      numParts = 0;\n      ppart = (int ********)local_68;\n    }\n    else {\n      index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n      if (index != 0) goto LAB_00083142;\n      index = numParts + 1;\n      ppart = (int ********)local_68;\n    }\n  }\n  inptr = (int *******)((int)inptr - (int)formatSpecifier);\n  ppart2 = (int ********)local_68;\n  if ((int)inptr < 1) {\nLAB_0008302a:\n    partOffset = (int *******)((int)partOffset + (int)formatSpecifier);\n    *ppart = (int *******)ppart3;\n    ppart[1] = formatSpecifier;\n    formatSpecifier = partOffset;\n    numParts = index;\n    if (index < 8) goto LAB_000831be;\n    if (partOffset == (int *******)0x0) {\n      numParts = 0;\n    }\n    else {\n      index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n      if (index != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    tempVar4 = numParts;\n    if (0x10 < (int)inptr) {\n      do {\n        while( true ) {\n          partLength = inptr;\n          numParts = tempVar4 + 1;\n          partOffset = partOffset + 4;\n          *ppart = (int *******)\"0000000000000000\";\n          ppart[1] = (int *******)0x10;\n          if (7 < numParts) break;\n          index = tempVar4 + 2;\n          ppart = ppart + 2;\nLAB_00082fe6:\n          tempVar4 = numParts;\n          inptr = partLength + -4;\n          if ((int)(partLength + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (partOffset != (int *******)0x0) {\n          index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n          if (index == 0) {\n            index = numParts + 1;\n            ppart = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        index = 1;\n        ppart = (int ********)local_68;\n        tempVar4 = 0;\n        inptr = partLength + -4;\n      } while (0x10 < (int)(partLength + -4));\nLAB_0008300e:\n      inptr = partLength + -4;\n    }\n    partOffset = (int *******)((int)partOffset + (int)inptr);\n    *ppart = (int *******)\"0000000000000000\";\n    ppart[1] = inptr;\n    if (index < 8) {\n      index = index + 1;\n      ppart = ppart + 2;\n      goto LAB_0008302a;\n    }\n    if (partOffset != (int *******)0x0) {\n      numParts = index;\n      index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n      if (index != 0) goto LAB_00083142;\n      index = numParts + 1;\n      ppart = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    localBuffer[0] = formatSpecifier;\n    numParts = 1;\n    ppart = (int ********)local_68;\n    local_68 = (undefined  [4])ppart3;\nLAB_000831be:\n    ppart2 = ppart + 2;\n    partOffset = formatSpecifier;\n  }\n  if (((tempVar2 & 4) != 0) &&\n     (inptr = (int *******)((int)pppppppiVar20 - (int)totalLength), 0 < (int)inptr)) {\n    index = numParts;\n    if ((int)inptr < 0x11) {\n      tempVar4 = numParts + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numParts = index + 1;\n          partOffset = partOffset + 4;\n          *ppart2 = (int *******)0x856f0;\n          ppart2[1] = (int *******)0x10;\n          if (7 < numParts) break;\n          tempVar4 = index + 2;\n          ppart2 = ppart2 + 2;\nLAB_0008307a:\n          inptr = inptr + -4;\n          index = numParts;\n          if ((int)inptr < 0x11) goto LAB_000830a2;\n        }\n        if (partOffset != (int *******)0x0) {\n          index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n          if (index == 0) {\n            tempVar4 = numParts + 1;\n            ppart2 = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        inptr = inptr + -4;\n        tempVar4 = 1;\n        index = 0;\n        ppart2 = (int ********)local_68;\n      } while (0x10 < (int)inptr);\n    }\nLAB_000830a2:\n    partOffset = (int *******)((int)partOffset + (int)inptr);\n    *ppart2 = (int *******)0x856f0;\n    ppart2[1] = inptr;\n    numParts = tempVar4;\n    if (7 < tempVar4) {\n      if (partOffset == (int *******)0x0) {\n        if ((int)totalLength < (int)pppppppiVar20) {\n          totalLength = pppppppiVar20;\n        }\n        formattedLength = formattedLength + (int)totalLength;\n        goto LAB_00083186;\n      }\n      index = __sprint_r_part_0(outputBuffer,formatString,&ppart4);\n      if (index != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)totalLength < (int)pppppppiVar20) {\n    totalLength = pppppppiVar20;\n  }\n  formattedLength = formattedLength + (int)totalLength;\n  if ((partOffset != (int *******)0x0) &&\n     (index = __sprint_r_part_0(outputBuffer,formatString,&ppart4), index != 0)) goto LAB_00083142;\nLAB_00083186:\n  numParts = 0;\n  ppart = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  tempVar = tempVar3 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  inptr = argList;\n  do {\n    argList = (int *******)((int)inptr + 1);\n    tempVar3 = (uint)*(byte *)inptr;\n    pppppppiVar20 = (int *******)(tempVar + (int)pppppppiVar20 * 10);\n    tempVar = tempVar3 - 0x30;\n    inptr = argList;\n  } while (tempVar < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  tempVar3 = (uint)*(byte *)argList;\n  if (leadingChar == '\\0') {\n    leadingChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "print_formatted_string_0008289c",
                "param_1": "outputBuffer",
                "param_2": "formatString",
                "param_3": "argList",
                "param_4": "argPtr",
                "bVar1": "hasLeadingZeros",
                "bVar2": "isNegative",
                "bVar3": "hasPrefix",
                "cVar4": "prefixChar",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "ppart",
                "piVar7": "var7",
                "iVar8": "index",
                "cVar9": "char9",
                "pppppppiVar10": "inptr",
                "uVar11": "tempVar",
                "ppiVar12": "intPtrPointer",
                "uVar13": "tempVar2",
                "uVar14": "tempVar3",
                "iVar15": "tempVar4",
                "ppppppppiVar16": "ppart2",
                "iVar17": "index2",
                "pppppppiVar18": "partLength",
                "piVar19": "dataPtr",
                "uVar21": "undefinedVar",
                "piVar22": "ptr2",
                "pppppppiVar23": "tempPtr",
                "uVar24": "undefinedVar2",
                "ppppppppiVar25": "ppart3",
                "bVar26": "isNonZero",
                "lVar27": "longVar",
                "local_dc": "totalLength",
                "local_d4": "formatSpecifier",
                "local_c8": "argPtrPointer",
                "local_c4": "formattedLength",
                "local_c0": "maskChar",
                "local_a1": "leadingChar",
                "local_a0": "paddingChar",
                "local_9f": "undefined3",
                "local_9c": "ppart4",
                "local_98": "numParts",
                "local_94": "partOffset",
                "local_64": "localBuffer"
            },
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__aeabi_uldivmod",
                "__sbprintf",
                "strlen",
                "__swsetup_r",
                "__sinit",
                "__sprint_r.part.0",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_formatted_text_000834f0",
            "code": "\nint print_formatted_text_000834f0(undefined4 output_stream,int data_ptr)\n\n{\n  int return_value;\n  int flush_result;\n  undefined *input_buffer [2];\n  undefined4 buffer_size;\n  ushort short_data;\n  undefined2 short_data_2;\n  undefined *output_buffer;\n  undefined4 buffer_size_2;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined stack_buffer [1024];\n  \n  value_4 = *(undefined4 *)(data_ptr + 100);\n  value_2 = *(undefined4 *)(data_ptr + 0x1c);\n  short_data_2 = *(undefined2 *)(data_ptr + 0xe);\n  value_3 = *(undefined4 *)(data_ptr + 0x24);\n  input_buffer[0] = stack_buffer;\n  short_data = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_2 = 0x400;\n  value_1 = 0;\n  output_buffer = input_buffer[0];\n  return_value = _vfiprintf_r(output_stream,input_buffer);\n  if ((-1 < return_value) && (flush_result = _fflush_r(output_stream,input_buffer), flush_result != 0)) {\n    return_value = -1;\n  }\n  if ((int)((uint)short_data << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_formatted_text_000834f0",
                "param_1": "output_stream",
                "param_2": "data_ptr",
                "iVar1": "return_value",
                "iVar2": "flush_result",
                "local_488": "input_buffer",
                "local_480": "buffer_size",
                "local_47c": "short_data",
                "local_47a": "short_data_2",
                "local_478": "output_buffer",
                "local_474": "buffer_size_2",
                "local_470": "value_1",
                "local_46c": "value_2",
                "local_464": "value_3",
                "local_424": "value_4",
                "auStack_420": "stack_buffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_data_0008356c",
            "code": "\nundefined4 processData_0008356c(undefined4 *output,int *input)\n\n{\n  int temp1;\n  int temp2;\n  uint value1;\n  ushort value2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  value2 = *(ushort *)(input + 3);\n  value1 = (uint)value2;\n  if ((int)(value1 << 0x1c) < 0) {\n    temp2 = input[4];\n  }\n  else {\n    if (-1 < (int)(value1 << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = value2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(value1 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          _free_r(output);\n          value2 = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      temp2 = input[4];\n      value2 = value2 & 0xffdb;\n      *input = temp2;\n      input[1] = 0;\n    }\n    else {\n      temp2 = input[4];\n    }\n    *(ushort *)(input + 3) = value2 | 8;\n    value1 = (uint)(value2 | 8);\n  }\n  if ((temp2 == 0) && ((value1 & 0x280) != 0x200)) {\n    __smakebuf_r(output,input);\n    value1 = (uint)*(ushort *)(input + 3);\n    temp2 = input[4];\n  }\n  if ((value1 & 1) == 0) {\n    temp1 = 0;\n    if (-1 < (int)(value1 << 0x1e)) {\n      temp1 = input[5];\n    }\n    input[2] = temp1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((temp2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "raise_error_and_log_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid raise_error_and_log_000836ec(void)\n\n{\n  dword *data_ptr;\n  dword exit_code;\n  int counter;\n  code *jump_table;\n  \n  raise(6);\n  jump_table = (code *)0x836fb;\n  exit_code = _exit(1);\n  if (relocation_array[48].r_offset == 0) {\n    relocation_array[48].r_offset = 0x20070184;\n  }\n  counter = *(int *)(relocation_array[48].r_offset + 4);\n  data_ptr = (dword *)relocation_array[48].r_offset;\n  if (0x1f < counter) {\n    data_ptr = (dword *)malloc(400);\n    if (data_ptr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *data_ptr = relocation_array[48].r_offset;\n    data_ptr[1] = 0;\n    counter = 0;\n    relocation_array[48].r_offset = (dword)data_ptr;\n    data_ptr[0x62] = 0;\n    data_ptr[99] = 0;\n  }\n  data_ptr[1] = counter + 1;\n  data_ptr[counter + 2] = exit_code;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "raise_error_and_log_000836ec",
                "pdVar1": "data_ptr",
                "dVar2": "exit_code",
                "iVar3": "counter",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_exit",
                "raise",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "decompile_and_improve_00083850",
            "code": "\nundefined4 decompile_and_improve_00083850(int *input_array,int *output_array)\n\n{\n  int *pointer_var1;\n  int int_var1;\n  ushort ushort_var1;\n  uint uint_var1;\n  int int_var2;\n  code *function_ptr_var1;\n  undefined4 undefined_var1;\n  int int_var3;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  ushort_var1 = *(ushort *)(output_array + 3);\n  if ((int)((uint)ushort_var1 << 0x1c) < 0) {\n    int_var3 = output_array[4];\n    if (int_var3 == 0) {\n      return 0;\n    }\n    int_var1 = *output_array;\n    if ((ushort_var1 & 3) == 0) {\n      int_var2 = output_array[5];\n    }\n    else {\n      int_var2 = 0;\n    }\n    *output_array = int_var3;\n    int_var1 = int_var1 - int_var3;\n    output_array[2] = int_var2;\n    do {\n      if (int_var1 < 1) {\n        return 0;\n      }\n      int_var2 = (*(code *)output_array[9])(input_array,output_array[7],int_var3,int_var1,undefined_var1);\n      int_var1 = int_var1 - int_var2;\n      int_var3 = int_var3 + int_var2;\n    } while (0 < int_var2);\nLAB_000837c8:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = ushort_var1 | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr_var1 = (code *)output_array[10];\n  if (function_ptr_var1 == (code *)0x0) {\n    return 0;\n  }\n  uint_var1 = (uint)(ushort_var1 | 0x800);\n  int_var3 = *input_array;\n  *input_array = 0;\n  if ((ushort_var1 & 0x1000) == 0) {\n    int_var1 = (*function_ptr_var1)(input_array,output_array[7],uint_var1 & 0x1000,1);\n    if ((int_var1 == -1) && (int_var2 = *input_array, int_var2 != 0)) {\n      if ((int_var2 == 0x1d) || (int_var2 == 0x16)) {\n        *input_array = int_var3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    uint_var1 = (uint)*(ushort *)(output_array + 3);\n    function_ptr_var1 = (code *)output_array[10];\n  }\n  else {\n    int_var1 = output_array[0x14];\n  }\n  if (((int)(uint_var1 << 0x1d) < 0) && (int_var1 = int_var1 - output_array[1], output_array[0xc] != 0)) {\n    int_var1 = int_var1 - output_array[0xf];\n  }\n  int_var1 = (*function_ptr_var1)(input_array,output_array[7],int_var1,0);\n  if (int_var1 == -1) {\n    int_var2 = *input_array;\n    if (int_var2 != 0) {\n      if ((int_var2 != 0x1d) && (int_var2 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083774;\n    }\n    ushort_var1 = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = ushort_var1;\n    *output_array = output_array[4];\n  }\n  else {\n    ushort_var1 = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = ushort_var1;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)ushort_var1 << 0x13) < 0) {\n    output_array[0x14] = int_var1;\n  }\nLAB_00083774:\n  pointer_var1 = (int *)output_array[0xc];\n  *input_array = int_var3;\n  if (pointer_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (pointer_var1 != output_array + 0x10) {\n    _free_r(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "decompile_and_improve_00083850",
                "param_1": "input_array",
                "param_2": "output_array",
                "piVar1": "pointer_var1",
                "iVar2": "int_var1",
                "uVar3": "ushort_var1",
                "uVar4": "uint_var1",
                "iVar5": "int_var2",
                "pcVar6": "function_ptr_var1",
                "unaff_r4": "undefined_var1",
                "iVar7": "int_var3"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructures)\n\n{\n  undefined4 *ptrDataStructure1;\n  undefined4 *ptrDataStructure2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptrDataStructure1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptrDataStructure1 + 3) = 4;\n    *ptrDataStructure1 = 0;\n    ptrDataStructure1[1] = 0;\n    ptrDataStructure1[2] = 0;\n    ptrDataStructure1[0x19] = 0;\n    *(undefined2 *)((int)ptrDataStructure1 + 0xe) = 0;\n    ptrDataStructure1[4] = 0;\n    ptrDataStructure1[5] = 0;\n    ptrDataStructure1[6] = 0;\n    memset(ptrDataStructure1 + 0x17,0,8);\n    ptrDataStructure2 = *(undefined4 **)(dataStructures + 8);\n    ptrDataStructure1[7] = ptrDataStructure1;\n    ptrDataStructure1[8] = 0x84221;\n    ptrDataStructure1[9] = 0x84245;\n    ptrDataStructure1[10] = 0x8427d;\n    ptrDataStructure1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptrDataStructure2 + 0xe) = 1;\n    *(undefined2 *)(ptrDataStructure2 + 3) = 9;\n    *ptrDataStructure2 = 0;\n    ptrDataStructure2[1] = 0;\n    ptrDataStructure2[2] = 0;\n    ptrDataStructure2[0x19] = 0;\n    ptrDataStructure2[4] = 0;\n    ptrDataStructure2[5] = 0;\n    ptrDataStructure2[6] = 0;\n    memset(ptrDataStructure2 + 0x17,0,8);\n    ptrDataStructure1 = *(undefined4 **)(dataStructures + 0xc);\n    ptrDataStructure2[7] = ptrDataStructure2;\n    ptrDataStructure2[8] = 0x84221;\n    ptrDataStructure2[9] = 0x84245;\n    ptrDataStructure2[10] = 0x8427d;\n    ptrDataStructure2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptrDataStructure1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrDataStructure1 + 0xe) = 2;\n    *ptrDataStructure1 = 0;\n    ptrDataStructure1[1] = 0;\n    ptrDataStructure1[2] = 0;\n    ptrDataStructure1[0x19] = 0;\n    ptrDataStructure1[4] = 0;\n    ptrDataStructure1[5] = 0;\n    ptrDataStructure1[6] = 0;\n    memset(ptrDataStructure1 + 0x17,0,8);\n    ptrDataStructure1[7] = ptrDataStructure1;\n    ptrDataStructure1[8] = 0x84221;\n    ptrDataStructure1[9] = 0x84245;\n    ptrDataStructure1[10] = 0x8427d;\n    ptrDataStructure1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructures",
                "puVar1": "ptrDataStructure1",
                "puVar2": "ptrDataStructure2"
            },
            "calling": [
                "fclose",
                "__swsetup_r",
                "__swbuf_r",
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "convert_character_to_unicode_000839b4",
            "code": "\nuint convertCharacterToUnicode_000839b4(undefined4 locale,uint inputCharacter,byte **outputBuffer)\n\n{\n  int maxBytes;\n  uint conversionResult;\n  uint convertedCharacter;\n  byte *bufferPointer;\n  uint iterationCounter;\n  byte convertedByte;\n  byte additionalBuffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(outputBuffer + 3) << 0x12)) {\n    *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) | 0x2000;\n    outputBuffer[0x19] = (byte *)((uint)outputBuffer[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (inputCharacter - 1 < 0xff)) {\n    convertedCharacter = inputCharacter & 0xff;\n    convertedByte = (byte)convertedCharacter;\n    conversionResult = 1;\n  }\n  else {\n    conversionResult = _wcrtomb_r(locale,&convertedByte,inputCharacter,outputBuffer + 0x17);\n    if (conversionResult == 0xffffffff) {\n      *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (conversionResult == 0) {\n      return inputCharacter;\n    }\n    convertedCharacter = (uint)convertedByte;\n  }\n  iterationCounter = 0;\n  do {\n    bufferPointer = outputBuffer[2] + -1;\n    outputBuffer[2] = bufferPointer;\n    if ((int)bufferPointer < 0) {\n      if ((int)outputBuffer[6] <= (int)bufferPointer) {\n        **outputBuffer = (byte)convertedCharacter;\n        bufferPointer = *outputBuffer;\n        convertedCharacter = (uint)*bufferPointer;\n        if (convertedCharacter != 10) goto LAB_00083a04;\n      }\n      maxBytes = __swbuf_r(locale,convertedCharacter,outputBuffer);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **outputBuffer = (byte)convertedCharacter;\n      bufferPointer = *outputBuffer;\nLAB_00083a04:\n      *outputBuffer = bufferPointer + 1;\n    }\n    if (conversionResult <= iterationCounter + 1) {\n      return inputCharacter;\n    }\n    convertedCharacter = (uint)additionalBuffer[iterationCounter];\n    iterationCounter = iterationCounter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "convert_character_to_unicode_000839b4",
                "param_1": "locale",
                "param_2": "inputCharacter",
                "param_3": "outputBuffer",
                "iVar1": "maxBytes",
                "uVar2": "conversionResult",
                "uVar3": "convertedCharacter",
                "pbVar4": "bufferPointer",
                "uVar5": "iterationCounter",
                "local_1c": "convertedByte",
                "abStack_1b": "additionalBuffer"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "__locale_mb_cur_max",
                "_wcrtomb_r",
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "allocate_memory_00083a74",
            "code": "\nundefined4 allocate_memory_00083a74(undefined4 lock,int offset)\n\n{\n  int result;\n  uint data;\n  int calculated_offset;\n  \n  __malloc_lock();\n  data = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  calculated_offset = ((data - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < calculated_offset) {\n    result = _sbrk_r(lock,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + data) {\n      result = _sbrk_r(lock,-calculated_offset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - calculated_offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = data - calculated_offset | 1;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      calculated_offset = _sbrk_r(lock,0);\n      if (0xf < (int)(calculated_offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = calculated_offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             calculated_offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "lock",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "calculated_offset"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "deallocate_memory_block_00083b10",
            "code": "\nvoid deallocateMemoryBlock_00083b10(undefined4 memoryPool,int block)\n\n{\n  int currentBlock;\n  bool isSpecialBlock;\n  uint blockSize;\n  dword previousBlock;\n  int nextBlock;\n  uint combinedSize;\n  dword currentPointer;\n  uint remainingSize;\n  dword newBlockPointer;\n  \n  if (block == 0) {\n    return;\n  }\n  __malloc_lock();\n  blockSize = *(uint *)(block + -4);\n  currentPointer = block - 8;\n  combinedSize = blockSize & 0xfffffffe;\n  previousBlock = currentPointer + combinedSize;\n  remainingSize = *(uint *)(previousBlock + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == previousBlock) {\n    remainingSize = remainingSize + combinedSize;\n    if (-1 < (int)(blockSize << 0x1f)) {\n      currentPointer = currentPointer - *(int *)(block + -8);\n      nextBlock = *(int *)(currentPointer + 0xc);\n      currentBlock = *(int *)(currentPointer + 8);\n      remainingSize = remainingSize + *(int *)(block + -8);\n      *(int *)(currentBlock + 0xc) = nextBlock;\n      *(int *)(nextBlock + 8) = currentBlock;\n    }\n    previousBlock = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(currentPointer + 4) = remainingSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = currentPointer;\n    if (previousBlock <= remainingSize) {\n      _malloc_trim_r(memoryPool,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(previousBlock + 4) = remainingSize;\n    if ((blockSize & 1) == 0) {\n      currentPointer = currentPointer - *(int *)(block + -8);\n      currentBlock = *(int *)(currentPointer + 8);\n      combinedSize = combinedSize + *(int *)(block + -8);\n      if (currentBlock == 0x2007046c) {\n        isSpecialBlock = true;\n      }\n      else {\n        nextBlock = *(int *)(currentPointer + 0xc);\n        *(int *)(currentBlock + 0xc) = nextBlock;\n        *(int *)(nextBlock + 8) = currentBlock;\n        isSpecialBlock = false;\n      }\n    }\n    else {\n      isSpecialBlock = false;\n    }\n    if (-1 < *(int *)(previousBlock + remainingSize + 4) << 0x1f) {\n      combinedSize = combinedSize + remainingSize;\n      currentBlock = *(int *)(previousBlock + 8);\n      if ((!isSpecialBlock) && (currentBlock == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = currentPointer;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = currentPointer;\n        *(undefined4 *)(currentPointer + 0xc) = 0x2007046c;\n        *(undefined4 *)(currentPointer + 8) = 0x2007046c;\n        *(uint *)(currentPointer + 4) = combinedSize | 1;\n        *(uint *)(currentPointer + combinedSize) = combinedSize;\n        goto LAB_00083ba4;\n      }\n      nextBlock = *(int *)(previousBlock + 0xc);\n      *(int *)(currentBlock + 0xc) = nextBlock;\n      *(int *)(nextBlock + 8) = currentBlock;\n    }\n    *(uint *)(currentPointer + 4) = combinedSize | 1;\n    *(uint *)(currentPointer + combinedSize) = combinedSize;\n    if (!isSpecialBlock) {\n      if (combinedSize < 0x200) {\n        blockSize = combinedSize & 0xfffffff8;\n        currentBlock = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + blockSize);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(combinedSize >> 3) >> 2 & 0xffU);\n        *(int *)(currentPointer + 8) = currentBlock;\n        *(uint *)(currentPointer + 0xc) = blockSize + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + blockSize) = currentPointer;\n        *(dword *)(currentBlock + 0xc) = currentPointer;\n        __malloc_unlock(memoryPool);\n        return;\n      }\n      blockSize = combinedSize >> 9;\n      if (blockSize < 5) {\n        currentBlock = (combinedSize >> 6) + 0x38;\n        nextBlock = currentBlock * 2;\n      }\n      else if (blockSize < 0x15) {\n        currentBlock = blockSize + 0x5b;\n        nextBlock = currentBlock * 2;\n      }\n      else if (blockSize < 0x55) {\n        currentBlock = (combinedSize >> 0xc) + 0x6e;\n        nextBlock = currentBlock * 2;\n      }\n      else if (blockSize < 0x155) {\n        currentBlock = (combinedSize >> 0xf) + 0x77;\n        nextBlock = currentBlock * 2;\n      }\n      else if (blockSize < 0x555) {\n        currentBlock = (combinedSize >> 0x12) + 0x7c;\n        nextBlock = currentBlock * 2;\n      }\n      else {\n        nextBlock = 0xfc;\n        currentBlock = 0x7e;\n      }\n      newBlockPointer = nextBlock * 4 + 0x20070464;\n      previousBlock = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextBlock];\n      if (previousBlock == newBlockPointer) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (currentBlock >> 2 & 0xffU);\n        newBlockPointer = previousBlock;\n      }\n      else {\n        do {\n          if ((*(uint *)(previousBlock + 4) & 0xfffffffc) <= combinedSize) break;\n          previousBlock = *(dword *)(previousBlock + 8);\n        } while (newBlockPointer != previousBlock);\n        newBlockPointer = *(dword *)(previousBlock + 0xc);\n      }\n      *(dword *)(currentPointer + 0xc) = newBlockPointer;\n      *(dword *)(currentPointer + 8) = previousBlock;\n      *(dword *)(newBlockPointer + 8) = currentPointer;\n      *(dword *)(previousBlock + 0xc) = currentPointer;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(memoryPool);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "deallocate_memory_block_00083b10",
                "param_1": "memoryPool",
                "param_2": "block",
                "iVar1": "currentBlock",
                "bVar2": "isSpecialBlock",
                "uVar3": "blockSize",
                "dVar4": "previousBlock",
                "iVar5": "nextBlock",
                "uVar6": "combinedSize",
                "dVar7": "currentPointer",
                "uVar8": "remainingSize",
                "dVar9": "newBlockPointer"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "__swsetup_r",
                "_malloc_r",
                "free",
                "_fflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "_malloc_trim_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *outputStatus,uint *inputData,uint **buffer)\n\n{\n  int setupResult;\n  uint tempVar1;\n  uint tempVar2;\n  ushort tempVar3;\n  uint tempVar4;\n  uint *pointerVar1;\n  uint *pointerVar2;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  uint tempVar8;\n  uint localVar;\n  \n  if (bufferLengthPtr != (uint *)0x0) {\n    tempVar3 = *(ushort *)(inputData + 3);\n    tempVar4 = (uint)tempVar3;\n    if (((int)(tempVar4 << 0x1c) < 0) && (dataStart != 0)) {\n      pointerVar2 = *buffer;\n    }\n    else {\n      setupResult = __swsetup_r(outputStatus,inputData);\n      if (setupResult != 0) {\n        return 0xffffffff;\n      }\n      tempVar3 = *(ushort *)(inputData + 3);\n      tempVar4 = (uint)tempVar3;\n      pointerVar2 = *buffer;\n    }\n    if ((tempVar3 & 2) == 0) {\n      tempVar1 = tempVar4 & 2;\n      tempVar7 = tempVar1;\n      tempVar5 = tempVar1;\n      localVar = tempVar1;\n      if ((tempVar4 & 1) == 0) {\n        tempVar1 = 0;\n        tempVar7 = 0;\n        while( true ) {\n          while (tempVar1 == 0) {\n            tempVar7 = *pointerVar2;\n            pointerVar1 = pointerVar2 + 1;\n            pointerVar2 = pointerVar2 + 2;\n            tempVar1 = *pointerVar1;\n          }\n          tempVar5 = availableLength;\n          if ((int)(tempVar4 << 0x16) < 0) {\n            if (tempVar1 < tempVar5) {\n              tempVar4 = *inputData;\n              tempVar5 = tempVar1;\n            }\n            else if ((tempVar4 & 0x480) == 0) {\n              tempVar4 = *inputData;\n            }\n            else {\n              setupResult = *inputData - dataStart;\n              tempVar5 = setupResult + 1 + tempVar1;\n              tempVar6 = (int)(blockLength * 3) / 2;\n              if (tempVar5 <= tempVar6) {\n                tempVar5 = tempVar6;\n              }\n              if ((int)(tempVar4 << 0x15) < 0) {\n                tempVar6 = allocateMemory(outputStatus,tempVar5);\n                if (tempVar6 == 0) {\n                  *outputStatus = 0xc;\n                  tempVar3 = *(ushort *)(inputData + 3);\n                  goto LAB_00083da4;\n                }\n                copyMemory(tempVar6,dataStart,setupResult);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempVar6 = resizeMemory(outputStatus);\n                if (tempVar6 == 0) {\n                  freeMemory(outputStatus,dataStart);\n                  tempVar3 = *(ushort *)(inputData + 3) & 0xff7f;\n                  *outputStatus = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              tempVar4 = tempVar6 + setupResult;\n              dataStart = tempVar6;\n              blockLength = tempVar5;\n              *inputData = tempVar4;\n              availableLength = tempVar5 - setupResult;\n              tempVar5 = tempVar1;\n            }\n            moveMemory(tempVar4,tempVar7,tempVar5);\n            availableLength = availableLength - tempVar5;\n            *inputData = *inputData + tempVar5;\n            tempVar5 = tempVar1;\n          }\n          else if ((dataStart < *inputData) || (tempVar4 = blockLength, tempVar1 < tempVar4)) {\n            if (tempVar1 < tempVar5) {\n              tempVar5 = tempVar1;\n            }\n            moveMemory(*inputData,tempVar7,tempVar5);\n            tempVar4 = availableLength;\n            availableLength = tempVar4 - tempVar5;\n            *inputData = *inputData + tempVar5;\n            if ((tempVar4 - tempVar5 == 0) && (setupResult = flushOutput(outputStatus,inputData), setupResult != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            tempVar5 = 0x7fffffff;\n            if (tempVar1 < 0x7fffffff) {\n              tempVar5 = tempVar1;\n            }\n            tempVar5 = (*(code *)outputFunction)(outputStatus,inputData[7],tempVar7,(tempVar5 / tempVar4) * tempVar4);\n            if ((int)tempVar5 < 1) goto LAB_00083da2;\n          }\n          pointerVar1 = bufferLengthPtr;\n          tempVar7 = tempVar7 + tempVar5;\n          tempVar1 = tempVar1 - tempVar5;\n          bufferLengthPtr = (uint *)((int)pointerVar1 - tempVar5);\n          if ((uint *)((int)pointerVar1 - tempVar5) == (uint *)0x0) break;\n          tempVar4 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (tempVar1 == 0) {\n            tempVar5 = *pointerVar2;\n            tempVar1 = pointerVar2[1];\n            localVar = 0;\n            pointerVar2 = pointerVar2 + 2;\n          }\n          if (localVar == 0) {\n            setupResult = findChar(tempVar5,10,tempVar1);\n            if (setupResult == 0) {\n              tempVar7 = tempVar1 + 1;\n              localVar = 1;\n            }\n            else {\n              tempVar7 = (setupResult + 1) - tempVar5;\n              localVar = 1;\n            }\n          }\n          tempVar6 = *inputData;\n          tempVar4 = tempVar7;\n          if (tempVar1 <= tempVar7) {\n            tempVar4 = tempVar1;\n          }\n          tempVar2 = blockLength;\n          if ((dataStart < tempVar6) && (tempVar8 = availableLength + tempVar2, (int)tempVar8 < (int)tempVar4)) {\n            moveMemory(tempVar6,tempVar5,tempVar8);\n            *inputData = *inputData + tempVar8;\n            setupResult = flushOutput(outputStatus,inputData);\n            if (setupResult != 0) goto LAB_00083da2;\n          }\n          else if ((int)tempVar4 < (int)tempVar2) {\n            moveMemory(tempVar6,tempVar5,tempVar4);\n            availableLength = availableLength - tempVar4;\n            *inputData = tempVar4 + *inputData;\n            tempVar8 = tempVar4;\n          }\n          else {\n            tempVar8 = (*(code *)outputFunction)(outputStatus,inputData[7],tempVar5,tempVar2);\n            if ((int)tempVar8 < 1) goto LAB_00083da2;\n          }\n          tempVar7 = tempVar7 - tempVar8;\n          if (tempVar7 == 0) {\n            setupResult = flushOutput(outputStatus,inputData);\n            if (setupResult != 0) goto LAB_00083da2;\n            localVar = 0;\n          }\n          pointerVar1 = bufferLengthPtr;\n          tempVar5 = tempVar5 + tempVar8;\n          tempVar1 = tempVar1 - tempVar8;\n          bufferLengthPtr = (uint *)((int)pointerVar1 - tempVar8);\n        } while ((uint *)((int)pointerVar1 - tempVar8) != (uint *)0x0);\n      }\n    }\n    else {\n      tempVar1 = 0;\n      tempVar4 = 0;\n      do {\n        while( true ) {\n          tempVar7 = tempVar4;\n          if (0x7ffffbff < tempVar4) {\n            tempVar7 = 0x7ffffc00;\n          }\n          if (tempVar4 != 0) break;\n          tempVar1 = *pointerVar2;\n          tempVar4 = pointerVar2[1];\n          pointerVar2 = pointerVar2 + 2;\n        }\n        setupResult = (*(code *)outputFunction)(outputStatus,inputData[7],tempVar1,tempVar7);\n        if (setupResult < 1) {\nLAB_00083da2:\n          tempVar3 = *(ushort *)(inputData + 3);\nLAB_00083da4:\n          *(ushort *)(inputData + 3) = tempVar3 | 0x40;\n          return 0xffffffff;\n        }\n        pointerVar1 = bufferLengthPtr;\n        tempVar1 = tempVar1 + setupResult;\n        tempVar4 = tempVar4 - setupResult;\n        bufferLengthPtr = (uint *)((int)pointerVar1 - setupResult);\n      } while ((uint *)((int)pointerVar1 - setupResult) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "outputStatus",
                "param_2": "inputData",
                "param_3": "buffer",
                "iVar1": "setupResult",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "puVar6": "pointerVar1",
                "puVar7": "pointerVar2",
                "uVar8": "tempVar5",
                "uVar9": "tempVar6",
                "uVar10": "tempVar7",
                "uVar11": "tempVar8",
                "local_2c": "localVar",
                "_malloc_r": "allocateMemory",
                "_realloc_r": "resizeMemory",
                "_free_r": "freeMemory",
                "_fflush_r": "flushOutput",
                "memcpy": "copyMemory",
                "memmove": "moveMemory",
                "memchr": "findChar",
                "param_2[4]": "dataStart",
                "param_2[5]": "blockLength",
                "param_2[9]": "outputFunction",
                "param_2[2]": "availableLength",
                "param_3[2]": "bufferLengthPtr",
                "(int)uVar8": "(int)tempVar5"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memcpy",
                "_realloc_r",
                "_free_r",
                "__swsetup_r",
                "_malloc_r",
                "_fflush_r",
                "memchr",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_magic_number_00084004",
            "code": "\nuint32_t getMagicNumber_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_magic_number_00084004",
                "undefined4": "uint32_t"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_array_offset_0008400c",
            "code": "\ndword get_array_offset_0008400c(void)\n\n{\n  return rel_arrayindex.offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_array_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "[275]": "index",
                "r_offset": "offset"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "process_data_00084018",
            "code": "\nvoid processData_00084018(int data,int *output)\n\n{\n  ushort flags;\n  int status;\n  int result;\n  uint temp;\n  bool isSpecial;\n  undefined buffer [4];\n  uint fileMode;\n  \n  flags = *(ushort *)(output + 3);\n  temp = (uint)flags;\n  if ((int)(temp << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    status = _fstat_r(data,(int)*(short *)((int)output + 0xe),buffer);\n    if (-1 < status) {\n      isSpecial = (fileMode & 0xf000) == 0x2000;\n      if (((fileMode & 0xf000) == 0x8000) && (output[10] == 0x8427d)) {\n        status = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    flags = *(ushort *)(output + 3);\n    temp = (uint)flags;\n  }\n  *(ushort *)(output + 3) = flags | 0x800;\n  if ((temp & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n  isSpecial = false;\nLAB_00084074:\n  result = _malloc_r(data,status);\n  flags = *(ushort *)(output + 3);\n  if (result == 0) {\n    if (-1 < (int)((uint)flags << 0x16)) {\n      *(ushort *)(output + 3) = flags | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(output + 3) = flags | 0x80;\n    *output = result;\n    output[4] = result;\n    output[5] = status;\n    if ((isSpecial) && (status = _isatty_r(data,(int)*(short *)((int)output + 0xe)), status != 0)) {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "process_data_00084018",
                "param_1": "data",
                "param_2": "output",
                "uVar1": "flags",
                "iVar2": "status",
                "iVar3": "result",
                "uVar4": "temp",
                "bVar5": "isSpecial",
                "auStack_54": "buffer",
                "local_50": "fileMode"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_first_occurrence_000840f8",
            "code": "\nuint * find_first_occurrence_000840f8(uint *array,char target_character,uint array_length)\n\n{\n  uint result;\n  int index;\n  uint *current_element;\n  bool is_last_element;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < array_length) {\n      current_element = array;\n      do {\n        result = *current_element ^ CONCAT22(CONCAT11(target_character,target_character),CONCAT11(target_character,target_character));\n        array = current_element;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = current_element + 1;\n        current_element = current_element + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target_character) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_element = index == array_length - 1;\n        index = index + 1;\n        if (is_last_element) goto LAB_00084150;\n      } while (*(char *)array != target_character);\n    }\n  }\n  else if (array_length == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target_character) {\n    current_element = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = current_element;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (array_length == 0) goto LAB_00084150;\n      current_element = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != target_character);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "param_1": "array",
                "param_2": "target_character",
                "param_3": "array_length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "current_element",
                "bVar4": "is_last_element"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "handle_process_000841e4",
            "code": "\nint handleProcess_000841e4(uint processId)\n\n{\n  dword offset;\n  undefined4 pid;\n  int pointer;\n  code *functionPtr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 uVar5;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  uVar5 = 0x20070460;\n  if (0x1f < processId) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  pointer = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((pointer == 0) || (functionPtr = *(code **)(pointer + processId * 4), functionPtr == (code *)0x0)) {\n    pid = _getpid_r(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    pointer = _kill(pid,processId,processId,0,uVar5,unaff_r4,unaff_r5,in_lr);\n    if ((pointer == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return pointer;\n  }\n  if (functionPtr == (code *)0x1) {\n    return 0;\n  }\n  if (functionPtr != (code *)0xffffffff) {\n    *(undefined4 *)(pointer + processId * 4) = 0;\n    (*functionPtr)(processId);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "handle_process_000841e4",
                "param_1": "processId",
                "dVar1": "offset",
                "uVar2": "pid",
                "iVar3": "pointer",
                "pcVar4": "functionPtr"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_data_00084220",
            "code": "\nvoid updateData_00084220(undefined4 stream,int data)\n\n{\n  int bytesRead;\n  \n  bytesRead = _read_r(stream,(int)*(short *)(data + 0xe));\n  if (-1 < bytesRead) {\n    *(int *)(data + 0x50) = *(int *)(data + 0x50) + bytesRead;\n    return;\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_data_00084220",
                "param_1": "stream",
                "param_2": "data",
                "iVar1": "bytesRead"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "write_to_file_00084244",
            "code": "\nvoid writeToFile_00084244(int *fileDescriptor,int bufferAddress,undefined4 data,undefined4 size)\n\n{\n  int bytesWritten;\n  ushort fileOffset;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  fileOffset = *(ushort *)(bufferAddress + 0xc);\n  if ((int)((uint)fileOffset << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe),0,2);\n    fileOffset = *(ushort *)(bufferAddress + 0xc);\n  }\n  *(ushort *)(bufferAddress + 0xc) = fileOffset & 0xefff;\n  DAT_20071244 = 0;\n  bytesWritten = _write((int)*(short *)(bufferAddress + 0xe),data,size,size,unused1,unused2,unused3,\n                 unused4);\n  if ((bytesWritten == -1) && (DAT_20071244 != 0)) {\n    *fileDescriptor = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "write_to_file_00084244",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "bytesWritten",
                "uVar2": "fileOffset",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "set_file_offset_0008427c",
            "code": "\nvoid setFileOffset_0008427c(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  int result;\n  ushort updatedValue;\n  \n  result = _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  if (result == -1) {\n    updatedValue = *(ushort *)(bufferAddress + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(bufferAddress + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(bufferAddress + 0x50) = result;\n  }\n  *(ushort *)(bufferAddress + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "set_file_offset_0008427c",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "iVar1": "result",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "extracted_function_000842a4",
            "code": "\nuint extractedFunction_000842a4(int inputInteger,uint inputValue,undefined4 *outputArray,undefined4 inputValue2)\n\n{\n  ushort thirdValueInArray;\n  uint convertedValue;\n  undefined *pointerToOutput;\n  int tempVar;\n  \n  if ((inputInteger != 0) && (*(int *)(inputInteger + 0x38) == 0)) {\n    initializeSomething();\n  }\n  thirdValueInArray = *(ushort *)(outputArray + 3);\n  convertedValue = (uint)thirdValueInArray;\n  outputArray[2] = outputArray[6];\n  if ((-1 < (int)(convertedValue << 0x1c)) || (tempVar = outputArray[4], tempVar == 0)) {\n    tempVar = performSetup(inputInteger,outputArray,thirdValueInArray,convertedValue,inputValue2);\n    if (tempVar != 0) {\n      return 0xffffffff;\n    }\n    thirdValueInArray = *(ushort *)(outputArray + 3);\n    tempVar = outputArray[4];\n    convertedValue = (uint)thirdValueInArray;\n  }\n  inputValue = inputValue & 0xff;\n  if ((int)(convertedValue << 0x12) < 0) {\n    pointerToOutput = (undefined *)*outputArray;\n    tempVar = (int)pointerToOutput - tempVar;\n    if (tempVar < (int)outputArray[5]) {\nLAB_000842d6:\n      tempVar = tempVar + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    outputArray[0x19] = outputArray[0x19] & 0xffffdfff;\n    pointerToOutput = (undefined *)*outputArray;\n    *(ushort *)(outputArray + 3) = thirdValueInArray | 0x2000;\n    tempVar = (int)pointerToOutput - tempVar;\n    if (tempVar < (int)outputArray[5]) goto LAB_000842d6;\n  }\n  tempVar = flushData(inputInteger,outputArray);\n  if (tempVar != 0) {\n    return 0xffffffff;\n  }\n  pointerToOutput = (undefined *)*outputArray;\n  tempVar = 1;\nLAB_000842d8:\n  outputArray[2] = outputArray[2] + -1;\n  *outputArray = pointerToOutput + 1;\n  *pointerToOutput = (char)inputValue;\n  if (((outputArray[5] == tempVar) ||\n      (((int)((uint)*(ushort *)(outputArray + 3) << 0x1f) < 0 && (inputValue == 10)))) &&\n     (tempVar = flushData(inputInteger,outputArray), tempVar != 0)) {\n    return 0xffffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "extracted_function_000842a4",
                "param_1": "inputInteger",
                "param_2": "inputValue",
                "param_3": "outputArray",
                "param_4": "inputValue2",
                "uVar1": "thirdValueInArray",
                "uVar2": "convertedValue",
                "puVar3": "pointerToOutput",
                "iVar4": "tempVar",
                "__sinit": "initializeSomething",
                "__swsetup_r": "performSetup",
                "_fflush_r": "flushData"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__swsetup_r",
                "__sinit",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "process_function_0008434c",
            "code": "\nvoid processFunction_0008434c(undefined4 *result,int length,undefined4 value,undefined4 *errorCode)\n\n{\n  dword functionPointer;\n  undefined4 charset;\n  int returnValue;\n  undefined buffer [12];\n  \n  functionPointer = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (length == 0) {\n    charset = __locale_charset();\n    returnValue = (*(code *)functionPointer)(result,buffer,0,charset,errorCode);\n  }\n  else {\n    charset = __locale_charset();\n    returnValue = (*(code *)functionPointer)(result,length,value,charset,errorCode);\n  }\n  if (returnValue == -1) {\n    *errorCode = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "process_function_0008434c",
                "param_1": "result",
                "param_2": "length",
                "param_3": "value",
                "param_4": "errorCode",
                "dVar1": "functionPointer",
                "uVar2": "charset",
                "iVar3": "returnValue",
                "auStack_24": "buffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "convert_to_byte_0008439c",
            "code": "\nundefined4 convertToByte_0008439c(undefined4 *output,undefined *input,uint value)\n\n{\n  if (input == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *input = (char)value;\n    return 1;\n  }\n  *output = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "convert_to_byte_0008439c",
                "param_1": "output",
                "param_2": "input",
                "param_3": "value"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_data_00084484",
            "code": "\nundefined4 processData_00084484(int inputData)\n\n{\n  dword relocationOffset;\n  undefined4 result;\n  int returnValue;\n  \n  relocationOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (inputData != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(inputData + 0xc) != 0) {\n      result = _fflush_r(relocationOffset,inputData);\n      if ((*(code **)(inputData + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(inputData + 0x2c))(relocationOffset,*(undefined4 *)(inputData + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputData + 0xc) << 0x18) < 0) {\n        _free_r(relocationOffset,*(undefined4 *)(inputData + 0x10));\n      }\n      if (*(int *)(inputData + 0x30) != 0) {\n        if (*(int *)(inputData + 0x30) != inputData + 0x40) {\n          _free_r(relocationOffset);\n        }\n        *(undefined4 *)(inputData + 0x30) = 0;\n      }\n      if (*(int *)(inputData + 0x44) != 0) {\n        _free_r(relocationOffset);\n        *(undefined4 *)(inputData + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(inputData + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "inputData",
                "dVar1": "relocationOffset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "_free_r",
                "__sinit",
                "__sfp_lock_release",
                "__sfp_lock_acquire",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "check_file_status_00084494",
            "code": "\nvoid checkFileStatus_00084494(int *result,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 statSize)\n\n{\n  int statResult;\n  \n  DAT_20071244 = 0;\n  statResult = _fstat(fileDescriptor,statBuffer,statBuffer,0,statSize);\n  if ((statResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "check_file_status_00084494",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "statSize",
                "iVar1": "statResult"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_if_terminal_and_save_000844bc",
            "code": "\nvoid checkIfTerminalAndSave_000844bc(int *outputValue,undefined4 fileDescriptor)\n\n{\n  int isTerminal;\n  \n  DAT_20071244 = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_if_terminal_and_save_000844bc",
                "param_1": "outputValue",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "seek_and_assign_value_000844e0",
            "code": "\nvoid seekAndAssignValue_000844e0(int *resultPointer,undefined4 fileDescriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seekResult;\n  \n  DAT_20071244 = 0;\n  seekResult = _lseek(fileDescriptor,offset,whence);\n  if ((seekResult == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "seek_and_assign_value_000844e0",
                "param_1": "resultPointer",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seekResult"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_and_set_return_value_00084508",
            "code": "\nvoid readAndSetReturnValue_00084508(int *outputVariable,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readReturnValue;\n  \n  DAT_20071244 = 0;\n  readReturnValue = _read(fileDescriptor,buffer,count);\n  if ((readReturnValue == -1) && (DAT_20071244 != 0)) {\n    *outputVariable = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_and_set_return_value_00084508",
                "param_1": "outputVariable",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readReturnValue"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_result_00084530",
            "code": "\nint calculateResult_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_result_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_store_result_0008455c",
            "code": "\nvoid subtractAndStoreResult_0008455c(uint inputValue,int param2Value,undefined4 lowerPartConstant,undefined4 upperPartConstant,int *resultArray)\n\n{\n  uint lowerPartResult;\n  longlong product;\n  \n  product = __divdi3();\n  product = product * CONCAT44(upperPartConstant,lowerPartConstant);\n  lowerPartResult = (uint)product;\n  *resultArray = inputValue - lowerPartResult;\n  resultArray[1] = (param2Value - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < lowerPartResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_store_result_0008455c",
                "param_1": "inputValue",
                "param_2": "param2Value",
                "param_3": "lowerPartConstant",
                "param_4": "upperPartConstant",
                "param_5": "resultArray",
                "uVar1": "lowerPartResult",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_residual_0008458c",
            "code": "\nvoid calculate_residual_0008458c(uint input_value,int offset,undefined4 first_operand,undefined4 second_operand,int *output_values)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(second_operand,first_operand);\n  result = (uint)product;\n  *output_values = input_value - result;\n  output_values[1] = (offset - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_residual_0008458c",
                "param_1": "input_value",
                "param_2": "offset",
                "param_3": "first_operand",
                "param_4": "second_operand",
                "param_5": "output_values",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_000845c0",
            "code": "\nundefined8 divide_000845c0(uint divide_000845c0nd,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong lVar1;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint quotient4;\n  int bitCount;\n  uint temp;\n  uint temp1;\n  uint isNegativeDividend;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool carryFlag;\n  \n  if ((int)divisor < 0) {\n    carryFlag = divide_000845c0nd != 0;\n    divide_000845c0nd = -divide_000845c0nd;\n    divisor = -divisor - (uint)carryFlag;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)remainder < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    carryFlag = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)carryFlag;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      bitCount = LZCOUNT(quotient);\n      if (bitCount != 0) {\n        quotient2 = divide_000845c0nd >> (0x20U - bitCount & 0xff);\n        quotient = quotient << bitCount;\n        divide_000845c0nd = divide_000845c0nd << bitCount;\n        divisor = divisor << bitCount | quotient2;\n      }\n      quotient1 = quotient >> 0x10;\n      quotient3 = divisor / quotient1;\n      temp = (quotient & 0xffff) * quotient3;\n      temp2 = divide_000845c0nd >> 0x10 | (divisor - quotient1 * quotient3) * 0x10000;\n      quotient2 = quotient3;\n      if (temp2 <= temp && temp - temp2 != 0) {\n        carryFlag = CARRY4(temp2,quotient);\n        temp2 = temp2 + quotient;\n        quotient2 = quotient3 - 1;\n        if ((carryFlag == false) && (temp2 <= temp && temp - temp2 != 0)) {\n          quotient2 = quotient3 - 2;\n          temp2 = temp2 + quotient;\n        }\n      }\n      temp1 = (temp2 - temp) / quotient1;\n      quotient3 = (quotient & 0xffff) * temp1;\n      temp = divide_000845c0nd & 0xffff | ((temp2 - temp) - quotient1 * temp1) * 0x10000;\n      quotient1 = temp1;\n      if (temp <= quotient3 && quotient3 - temp != 0) {\n        quotient1 = temp1 - 1;\n        if ((CARRY4(temp,quotient) == false) &&\n           (temp + quotient <= quotient3 && quotient3 - (temp + quotient) != 0)) {\n          quotient1 = temp1 - 2;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      quotient2 = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      bitCount = LZCOUNT(quotient);\n      if (bitCount == 0) {\n        divisor = divisor - quotient;\n        quotient3 = quotient >> 0x10;\n        temp4 = quotient & 0xffff;\n        quotient2 = 1;\n      }\n      else {\n        quotient = quotient << bitCount;\n        quotient2 = divisor >> (0x20U - bitCount & 0xff);\n        quotient3 = quotient >> 0x10;\n        temp2 = quotient2 / quotient3;\n        temp4 = quotient & 0xffff;\n        temp = temp4 * temp2;\n        temp1 = divide_000845c0nd >> (0x20U - bitCount & 0xff) | divisor << bitCount;\n        quotient2 = temp1 >> 0x10 | (quotient2 - quotient3 * temp2) * 0x10000;\n        divide_000845c0nd = divide_000845c0nd << bitCount;\n        quotient1 = temp2;\n        if (quotient2 <= temp && temp - quotient2 != 0) {\n          carryFlag = CARRY4(quotient2,quotient);\n          quotient2 = quotient2 + quotient;\n          quotient1 = temp2 - 1;\n          if ((carryFlag == false) && (quotient2 <= temp && temp - quotient2 != 0)) {\n            quotient1 = temp2 - 2;\n            quotient2 = quotient2 + quotient;\n          }\n        }\n        quotient4 = (quotient2 - temp) / quotient3;\n        temp2 = temp4 * quotient4;\n        divisor = temp1 & 0xffff | ((quotient2 - temp) - quotient3 * quotient4) * 0x10000;\n        quotient2 = quotient4;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient2 = quotient4 - 1;\n          if ((carryFlag == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            quotient2 = quotient4 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        quotient2 = quotient2 | quotient1 << 0x10;\n      }\n      quotient1 = divisor / quotient3;\n      temp2 = temp4 * quotient1;\n      temp1 = divide_000845c0nd >> 0x10 | (divisor - quotient3 * quotient1) * 0x10000;\n      temp = quotient1;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carryFlag = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        temp = quotient1 - 1;\n        if ((carryFlag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          temp = quotient1 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      quotient4 = (temp1 - temp2) / quotient3;\n      temp4 = temp4 * quotient4;\n      quotient3 = divide_000845c0nd & 0xffff | ((temp1 - temp2) - quotient3 * quotient4) * 0x10000;\n      quotient1 = quotient4;\n      if (quotient3 <= temp4 && temp4 - quotient3 != 0) {\n        quotient1 = quotient4 - 1;\n        if ((CARRY4(quotient3,quotient) == false) &&\n           (quotient3 + quotient <= temp4 && temp4 - (quotient3 + quotient) != 0)) {\n          quotient1 = quotient4 - 2;\n        }\n      }\n      quotient1 = quotient1 | temp << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    quotient2 = 0;\n    quotient1 = 0;\n  }\n  else {\n    bitCount = LZCOUNT(remainder);\n    if (bitCount == 0) {\n      if ((remainder < divisor) || (quotient <= divide_000845c0nd)) {\n        quotient2 = 0;\n        quotient1 = 1;\n      }\n      else {\n        quotient1 = 0;\n        quotient2 = 0;\n      }\n    }\n    else {\n      quotient2 = 0x20 - bitCount;\n      quotient3 = divisor >> (quotient2 & 0xff);\n      temp4 = quotient >> (quotient2 & 0xff) | remainder << bitCount;\n      temp2 = temp4 >> 0x10;\n      quotient1 = quotient3 / temp2;\n      temp1 = (temp4 & 0xffff) * quotient1;\n      temp = divisor << bitCount | divide_000845c0nd >> (quotient2 & 0xff);\n      quotient3 = temp >> 0x10 | (quotient3 - temp2 * quotient1) * 0x10000;\n      quotient2 = quotient1;\n      if (quotient3 <= temp1 && temp1 - quotient3 != 0) {\n        carryFlag = CARRY4(quotient3,temp4);\n        quotient3 = quotient3 + temp4;\n        quotient2 = quotient1 - 1;\n        if ((carryFlag == false) && (quotient3 <= temp1 && temp1 - quotient3 != 0)) {\n          quotient2 = quotient1 - 2;\n          quotient3 = quotient3 + temp4;\n        }\n      }\n      quotient4 = (quotient3 - temp1) / temp2;\n      temp3 = (temp4 & 0xffff) * quotient4;\n      quotient3 = temp & 0xffff | ((quotient3 - temp1) - temp2 * quotient4) * 0x10000;\n      quotient1 = quotient4;\n      if (quotient3 <= temp3 && temp3 - quotient3 != 0) {\n        carryFlag = CARRY4(quotient3,temp4);\n        quotient3 = quotient3 + temp4;\n        quotient1 = quotient4 - 1;\n        if ((carryFlag == false) && (quotient3 <= temp3 && temp3 - quotient3 != 0)) {\n          quotient1 = quotient4 - 2;\n          quotient3 = quotient3 + temp4;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      lVar1 = (ulonglong)quotient1 * (ulonglong)(quotient << bitCount);\n      temp = (uint)((ulonglong)lVar1 >> 0x20);\n      quotient2 = 0;\n      if ((quotient3 - temp3 < temp) ||\n         ((quotient3 - temp3 == temp && (divide_000845c0nd << bitCount < (uint)lVar1)))) {\n        quotient1 = quotient1 - 1;\n        quotient2 = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    carryFlag = quotient1 != 0;\n    quotient1 = -quotient1;\n    quotient2 = -quotient2 - (uint)carryFlag;\n  }\n  return CONCAT44(quotient2,quotient1);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_000845c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "quotient4",
                "iVar6": "bitCount",
                "uVar7": "temp",
                "uVar8": "temp1",
                "uVar9": "isNegativeDividend",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "carryFlag"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_quotient_00084860",
            "code": "\nulonglong calculateQuotient_00084860(uint dividend,uint divisor,uint quotientPart1,uint quotientPart2)\n\n{\n  longlong product;\n  uint quotientResult;\n  uint quotientDividend;\n  uint quotientDivisor;\n  uint quotientRemainder;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (quotientPart2 == 0) {\n    if (quotientPart1 <= divisor) {\n      if (quotientPart1 == 0) {\n        quotientPart1 = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotientPart1);\n      if (shiftCount == 0) {\n        divisor = divisor - quotientPart1;\n        quotientDividend = quotientPart1 >> 0x10;\n        quotientRemainder = quotientPart1 & 0xffff;\n        quotientResult = 1;\n      }\n      else {\n        quotientPart1 = quotientPart1 << shiftCount;\n        tempVar3 = divisor >> (0x20U - shiftCount & 0xff);\n        quotientDividend = quotientPart1 >> 0x10;\n        tempVar4 = tempVar3 / quotientDividend;\n        quotientRemainder = quotientPart1 & 0xffff;\n        quotientResult = quotientRemainder * tempVar4;\n        tempVar1 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        quotientDivisor = tempVar1 >> 0x10 | (tempVar3 - quotientDividend * tempVar4) * 0x10000;\n        dividend = dividend << shiftCount;\n        tempVar3 = tempVar4;\n        if (quotientDivisor <= quotientResult && quotientResult - quotientDivisor != 0) {\n          carryFlag = CARRY4(quotientDivisor,quotientPart1);\n          quotientDivisor = quotientDivisor + quotientPart1;\n          tempVar3 = tempVar4 - 1;\n          if ((carryFlag == false) && (quotientDivisor <= quotientResult && quotientResult - quotientDivisor != 0)) {\n            tempVar3 = tempVar4 - 2;\n            quotientDivisor = quotientDivisor + quotientPart1;\n          }\n        }\n        tempVar2 = (quotientDivisor - quotientResult) / quotientDividend;\n        tempVar4 = quotientRemainder * tempVar2;\n        divisor = tempVar1 & 0xffff | ((quotientDivisor - quotientResult) - quotientDividend * tempVar2) * 0x10000;\n        quotientResult = tempVar2;\n        if (divisor <= tempVar4 && tempVar4 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotientPart1);\n          divisor = divisor + quotientPart1;\n          quotientResult = tempVar2 - 1;\n          if ((carryFlag == false) && (divisor <= tempVar4 && tempVar4 - divisor != 0)) {\n            quotientResult = tempVar2 - 2;\n            divisor = divisor + quotientPart1;\n          }\n        }\n        divisor = divisor - tempVar4;\n        quotientResult = quotientResult | tempVar3 << 0x10;\n      }\n      tempVar4 = divisor / quotientDividend;\n      quotientDivisor = quotientRemainder * tempVar4;\n      tempVar1 = dividend >> 0x10 | (divisor - quotientDividend * tempVar4) * 0x10000;\n      tempVar3 = tempVar4;\n      if (tempVar1 <= quotientDivisor && quotientDivisor - tempVar1 != 0) {\n        carryFlag = CARRY4(tempVar1,quotientPart1);\n        tempVar1 = tempVar1 + quotientPart1;\n        tempVar3 = tempVar4 - 1;\n        if ((carryFlag == false) && (tempVar1 <= quotientDivisor && quotientDivisor - tempVar1 != 0)) {\n          tempVar3 = tempVar4 - 2;\n          tempVar1 = tempVar1 + quotientPart1;\n        }\n      }\n      tempVar4 = (tempVar1 - quotientDivisor) / quotientDividend;\n      quotientRemainder = quotientRemainder * tempVar4;\n      tempVar1 = dividend & 0xffff | ((tempVar1 - quotientDivisor) - quotientDividend * tempVar4) * 0x10000;\n      quotientDividend = tempVar4;\n      if (tempVar1 <= quotientRemainder && quotientRemainder - tempVar1 != 0) {\n        quotientDividend = tempVar4 - 1;\n        if ((CARRY4(tempVar1,quotientPart1) == false) &&\n           (tempVar1 + quotientPart1 <= quotientRemainder && quotientRemainder - (tempVar1 + quotientPart1) != 0)) {\n          quotientDividend = tempVar4 - 2;\n        }\n      }\n      return CONCAT44(quotientResult,quotientDividend | tempVar3 << 0x10);\n    }\n    shiftCount = LZCOUNT(quotientPart1);\n    if (shiftCount != 0) {\n      tempVar3 = dividend >> (0x20U - shiftCount & 0xff);\n      quotientPart1 = quotientPart1 << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = tempVar3 | divisor << shiftCount;\n    }\n    quotientResult = quotientPart1 >> 0x10;\n    quotientDividend = divisor / quotientResult;\n    quotientRemainder = (quotientPart1 & 0xffff) * quotientDividend;\n    tempVar4 = dividend >> 0x10 | (divisor - quotientResult * quotientDividend) * 0x10000;\n    tempVar3 = quotientDividend;\n    if (tempVar4 <= quotientRemainder && quotientRemainder - tempVar4 != 0) {\n      carryFlag = CARRY4(tempVar4,quotientPart1);\n      tempVar4 = tempVar4 + quotientPart1;\n      tempVar3 = quotientDividend - 1;\n      if ((carryFlag == false) && (tempVar4 <= quotientRemainder && quotientRemainder - tempVar4 != 0)) {\n        tempVar3 = quotientDividend - 2;\n        tempVar4 = tempVar4 + quotientPart1;\n      }\n    }\n    tempVar1 = (tempVar4 - quotientRemainder) / quotientResult;\n    quotientDividend = (quotientPart1 & 0xffff) * tempVar1;\n    quotientRemainder = dividend & 0xffff | ((tempVar4 - quotientRemainder) - quotientResult * tempVar1) * 0x10000;\n    quotientResult = tempVar1;\n    if (quotientRemainder <= quotientDividend && quotientDividend - quotientRemainder != 0) {\n      quotientResult = tempVar1 - 1;\n      if ((CARRY4(quotientRemainder,quotientPart1) == false) &&\n         (quotientRemainder + quotientPart1 <= quotientDividend && quotientDividend - (quotientRemainder + quotientPart1) != 0)) {\n        quotientResult = tempVar1 - 2;\n      }\n    }\n    quotientResult = quotientResult | tempVar3 << 0x10;\n  }\n  else {\n    if (divisor < quotientPart2) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(quotientPart2);\n    if (shiftCount == 0) {\n      if ((quotientPart2 < divisor) || (quotientPart1 <= dividend)) {\n        return 1;\n      }\n      quotientResult = 0;\n    }\n    else {\n      quotientResult = 0x20 - shiftCount;\n      tempVar3 = divisor >> (quotientResult & 0xff);\n      quotientDividend = quotientPart2 << shiftCount | quotientPart1 >> (quotientResult & 0xff);\n      quotientRemainder = quotientDividend >> 0x10;\n      quotientDivisor = tempVar3 / quotientRemainder;\n      tempVar4 = (quotientDividend & 0xffff) * quotientDivisor;\n      tempVar1 = dividend >> (quotientResult & 0xff) | divisor << shiftCount;\n      quotientResult = tempVar1 >> 0x10 | (tempVar3 - quotientRemainder * quotientDivisor) * 0x10000;\n      tempVar3 = quotientDivisor;\n      if (quotientResult <= tempVar4 && tempVar4 - quotientResult != 0) {\n        carryFlag = CARRY4(quotientResult,quotientDividend);\n        quotientResult = quotientResult + quotientDividend;\n        tempVar3 = quotientDivisor - 1;\n        if ((carryFlag == false) && (quotientResult <= tempVar4 && tempVar4 - quotientResult != 0)) {\n          tempVar3 = quotientDivisor - 2;\n          quotientResult = quotientResult + quotientDividend;\n        }\n      }\n      quotientDivisor = (quotientResult - tempVar4) / quotientRemainder;\n      tempVar2 = (quotientDividend & 0xffff) * quotientDivisor;\n      quotientRemainder = tempVar1 & 0xffff | ((quotientResult - tempVar4) - quotientRemainder * quotientDivisor) * 0x10000;\n      quotientResult = quotientDivisor;\n      if (quotientRemainder <= tempVar2 && tempVar2 - quotientRemainder != 0) {\n        carryFlag = CARRY4(quotientRemainder,quotientDividend);\n        quotientRemainder = quotientRemainder + quotientDividend;\n        quotientResult = quotientDivisor - 1;\n        if ((carryFlag == false) && (quotientRemainder <= tempVar2 && tempVar2 - quotientRemainder != 0)) {\n          quotientResult = quotientDivisor - 2;\n          quotientRemainder = quotientRemainder + quotientDividend;\n        }\n      }\n      quotientResult = quotientResult | tempVar3 << 0x10;\n      product = (ulonglong)quotientResult * (ulonglong)(quotientPart1 << shiftCount);\n      tempVar3 = (uint)((ulonglong)product >> 0x20);\n      if ((quotientRemainder - tempVar2 < tempVar3) || ((quotientRemainder - tempVar2 == tempVar3 && (dividend << shiftCount < (uint)product)))\n         ) {\n        quotientResult = quotientResult - 1;\n      }\n    }\n  }\n  return (ulonglong)quotientResult;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_quotient_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotientPart1",
                "param_4": "quotientPart2",
                "lVar1": "product",
                "uVar2": "quotientResult",
                "uVar3": "quotientDividend",
                "uVar4": "quotientDivisor",
                "uVar5": "quotientRemainder",
                "uVar6": "tempVar1",
                "uVar7": "tempVar2",
                "uVar8": "tempVar3",
                "uVar9": "tempVar4",
                "bVar11": "carryFlag",
                "iVar10": "shiftCount"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 107518,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_0008159e",
            "FUN_000815ec"
        ],
        [
            "FUN_000810e8",
            "FUN_0008117a"
        ],
        [
            "FUN_00080250"
        ]
    ],
    "locked_functions": []
}