{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_unset_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 set_flag_if_unset_000800f4(undefined4 input_value)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_unset_000800f4",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(undefined4 dataPointer1,undefined4 dataPointer2,undefined4 value1,undefined4 value2)\n\n{\n  FUN_000806f8(&DAT_200708e8,0x5a);\n  FUN_000806f8(&DAT_200708d4,0x5a,value1,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPointer1",
                "param_2": "dataPointer2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_system_000801e0",
            "code": "\nundefined8 initializeSystem_000801e0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000813dc(&DAT_20070be8,0xe100,arg3,arg4,arg4);\n  FUN_00080f0c(0xd,1);\n  FUN_00080f0c(6,1);\n  FUN_00080f0c(0x39,0);\n  FUN_00080f0c(4,0);\n  FUN_00080f0c(3,0);\n  FUN_00080f0c(2,0);\n  FUN_000806a0(&DAT_200708d4,5);\n  FUN_000806a0(&DAT_200708e8,6);\n  FUN_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    executeInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000806a0",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_mode_00080250",
            "code": "\nvoid controlMode_00080250(void)\n\n{\n  undefined4 result;\n  int count;\n  undefined *ptr;\n  undefined stackArray [12];\n  \n  DAT_200708c0 = FUN_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  FUN_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      result = FUN_00081624(3,1,20000);\n      DAT_200708d8 = FUN_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = FUN_0008145c(result,1000,2000,0x28,0x96);\n      while (count = FUN_00081248(&DAT_20070be8), 0 < count) {\n        FUN_00081276(&DAT_20070be8);\n        thunk_FUN_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        FUN_000810c4(&DAT_20070be8,&DAT_00084b13);\n        FUN_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUN_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUN_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      count = FUN_00081248(&DAT_20070be8);\n      if (0 < count) {\n        FUN_00081214(stackArray,&DAT_20070be8,0x2c);\n        FUN_00081560(&DAT_200708dc,stackArray);\n        FUN_00081472(stackArray);\n        FUN_00081214(stackArray,&DAT_20070be8,10);\n        FUN_00081560(&DAT_200708c8,stackArray);\n        FUN_00081472(stackArray);\n        FUN_00081276(&DAT_20070be8);\n        count = FUN_000815b8(&DAT_200708dc,\"steer\");\n        if (count == 0) goto LAB_0008039c;\n        result = FUN_000815de(&DAT_200708c8);\n        ptr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    FUN_00080164();\n    FUN_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  count = FUN_000815b8(&DAT_200708dc,\"motor\");\n  if (count != 0) {\n    result = FUN_000815de(&DAT_200708c8);\n    ptr = &DAT_200708e8;\nLAB_000803b2:\n    FUN_000806f8(ptr,result);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_mode_00080250",
                "uVar1": "result",
                "iVar2": "count",
                "puVar3": "ptr",
                "auStack_1c": "stackArray"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000810c4",
                "FUN_00081472",
                "FUN_000815b8",
                "FUN_00081248",
                "FUN_000806f8",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_000810e8",
                "FUN_00080f08",
                "FUN_00081276",
                "FUN_00081560",
                "FUN_00081014",
                "FUN_00081624",
                "thunk_FUN_0008113a",
                "FUN_000815de",
                "FUN_0008117a",
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_channel_000803fc",
            "code": "\nvoid initializeChannel_000803fc(int channelIndex,uint paramValue,undefined4 paramSize,uint bitIndex)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(paramValue,channelIndex);\n  FUN_00080aa8(paramSize);\n  FUN_00080b2c(channelIndex,paramValue,0xc002);\n  FUN_00080b90(channelIndex,paramValue,0xa41);\n  *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  *(undefined4 *)(channelIndex + paramValue * 0x40 + 0x24) = 4;\n  if (2 < paramValue) {\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         result1,result2);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_channel_000803fc",
                "param_1": "channelIndex",
                "param_2": "paramValue",
                "param_3": "paramSize",
                "param_4": "bitIndex",
                "unaff_r4": "result1",
                "in_lr": "result2",
                "uVar1": "combinedParams"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid updateData_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int temp;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    temp = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + temp < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19) < 0\n       )) {\n      FUN_00081014((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  temp = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + temp < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + temp) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19\n                  )) {\n      return;\n    }\n    FUN_00081014((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit",
                "iVar2": "temp"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_counter_000805a8",
            "code": "\nvoid updateCounter_000805a8(byte *buffer)\n\n{\n  char nextValue;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    nextValue = DAT_200708f0 + 1;\n    *buffer = DAT_200708f0;\n    DAT_200708f0 = nextValue;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (relativeArray[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *buffer = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_counter_000805a8",
                "param_1": "buffer",
                "cVar1": "nextValue",
                "uVar2": "counter",
                "Elf32_Rel_ARRAY_20070000": "relativeArray"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "decode_and_process_data_000806a0",
            "code": "\nbyte decode_and_process_data_000806a0(byte *data_buffer,undefined4 parameter)\n\n{\n  byte value;\n  undefined4 constant1;\n  uint index;\n  undefined4 constant2;\n  int counter;\n  uint data_value;\n  \n  if (0x3b < *data_buffer) goto LAB_00080660;\n  FUN_00080f0c(parameter,1,0x220,*data_buffer,0x960);\n  data_value = (uint)*data_buffer;\n  value = (&DAT_200708f8)[data_value * 8];\n  data_buffer[2] = 0;\n  index = data_value / 0xc;\n  (&DAT_200708f8)[data_value * 8] = value & 0xc0 | (byte)parameter & 0x3f;\n  data_buffer[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    constant1 = 0x40084000;\n    constant2 = 0x1e;\nLAB_0008064c:\n    FUN_000803fc(constant1,index,constant2,constant2);\n  }\n  else {\n    if (index == 1) {\n      constant1 = 0x40084000;\n      constant2 = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      constant1 = 0x40084000;\n      constant2 = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      constant1 = 0x40080000;\n      index = 2;\n      constant2 = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      constant1 = 0x40080000;\n      index = 0;\n      constant2 = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data_buffer * 8] = (&DAT_200708f8)[(uint)*data_buffer * 8] | 0x40;\nLAB_00080660:\n  return *data_buffer;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "decode_and_process_data_000806a0",
                "param_1": "data_buffer",
                "param_2": "parameter",
                "bVar1": "value",
                "uVar2": "constant1",
                "uVar3": "index",
                "uVar4": "constant2",
                "iVar5": "counter",
                "uVar6": "data_value"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "process_data_000806f8",
            "code": "\nvoid processData_000806f8(byte *dataPointer,uint dataSize)\n\n{\n  uint adjustedSize;\n  \n  if ((int)dataSize < 0x220) {\n    adjustedSize = dataSize;\n    if (0xb3 < (int)dataSize) {\n      adjustedSize = 0xb4;\n    }\n    dataSize = FUN_0008145c(adjustedSize & ~((int)adjustedSize >> 0x1f),0,0xb4,(0x88 - (char)dataPointer[1]) * 4,\n                           (600 - (char)dataPointer[2]) * 4,dataSize);\n  }\n  if (*dataPointer < 0x3c) {\n    adjustedSize = (0x88 - (char)dataPointer[1]) * 4;\n    if (((int)(dataSize + (0x88 - (char)dataPointer[1]) * -4) < 0 == SBORROW4(dataSize,adjustedSize)) &&\n       (adjustedSize = (600 - (char)dataPointer[2]) * 4, (int)dataSize <= (int)adjustedSize)) {\n      adjustedSize = dataSize;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*dataPointer * 8) =\n         (elfRelocArray[6].r_offset / 1000000) * (adjustedSize - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "uVar1": "adjustedSize",
                "Elf32_Rel_ARRAY_20070000": "elfRelocArray"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_peripheral_devices_00080774",
            "code": "\n\n\nvoid initializePeripheralDevices_00080774(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081778();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081014(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080a30(0x400e0e00,1,0x300,0);\n  FUN_00081014(0,1);\n  FUN_00080a30(0x400e0e00,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,0x3000,0);\n  FUN_00080a30(0x400e1400,2,0x30,0);\n  FUN_00080a30(0x400e1000,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,3,0);\n  FUN_00080a30(0x400e1000,1,0xc000,0);\n  FUN_00080aa8(0x25);\n  FUN_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00080d3e(0x400c0000,0,0x300000,1);\n  FUN_00080d30(0x400c0000,0,0);\n  FUN_00080d6a(0x400c0000,0xffffffff);\n  FUN_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_peripheral_devices_00080774",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080c98",
                "FUN_00080b98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080aa8",
                "FUN_00080d6a",
                "FUN_00080d62"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_components_0008089c",
            "code": "\nvoid initializeComponents_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000811b0(&DAT_20070c0c);\n  FUN_000811b0(&DAT_20070b60);\n  FUN_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  FUN_000811b0(&DAT_20070e6c);\n  FUN_000811b0(&DAT_20070ef4);\n  FUN_000811b0(&DAT_20070f7c);\n  FUN_000811b0(&DAT_20070ad8);\n  FUN_000811b0(&DAT_20070d0c);\n  FUN_000811b0(&DAT_20070d94);\n  FUN_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  FUN_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  FUN_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_components_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081348",
                "FUN_00081438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_functions_00080970",
            "code": "\nvoid checkAndExecuteFunctions_00080970(void)\n\n{\n  int result;\n  \n  result = FUN_00081248(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = FUN_00081248(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = FUN_00081248(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = FUN_00081248(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748",
                "FUN_0008074c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_value_000809be",
            "code": "\nvoid updateValue_000809be(int baseAddress,undefined4 flag,uint newValue)\n\n{\n  uint result;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(flag) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    result = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = result;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_value_000809be",
                "param_1": "baseAddress",
                "param_2": "flag",
                "param_3": "newValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "assign_values_based_on_conditions_000809e4",
            "code": "\nvoid assignValuesBasedOnConditions_000809e4(undefined4 *arrayPointer,undefined4 value,uint bitmask)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(bitmask << 0x1f) < 0;\n  arrayPointer[0x11] = value;\n  if (isNegative) {\n    arrayPointer[0x19] = value;\n  }\n  if (!isNegative) {\n    arrayPointer[0x18] = value;\n  }\n  isNegative = (bitmask & 10) != 0;\n  if (isNegative) {\n    arrayPointer[8] = value;\n  }\n  if (!isNegative) {\n    arrayPointer[9] = value;\n  }\n  if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n    arrayPointer[0x20] = value;\n  }\n  arrayPointer[5] = value;\n  *arrayPointer = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "assign_values_based_on_conditions_000809e4",
                "param_1": "arrayPointer",
                "param_2": "value",
                "param_3": "bitmask",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "update_param_values_00080a0a",
            "code": "\nvoid updateParamValues_00080a0a(undefined4 *paramArray,undefined4 newValue,int flag1,int flag2,int flag3)\n\n{\n  paramArray[0x11] = newValue;\n  if (flag3 == 0) {\n    paramArray[0x18] = newValue;\n  }\n  else {\n    paramArray[0x19] = newValue;\n  }\n  if (flag2 == 0) {\n    paramArray[0x15] = newValue;\n  }\n  else {\n    paramArray[0x14] = newValue;\n  }\n  if (flag1 == 0) {\n    paramArray[0xd] = newValue;\n  }\n  else {\n    paramArray[0xc] = newValue;\n  }\n  paramArray[4] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "update_param_values_00080a0a",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3"
            },
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_data_00080a30",
            "code": "\nundefined4 updateData_00080a30(int dataStruct,int option,undefined4 newValue,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    FUN_000809be(dataStruct,option,newValue);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(dataStruct + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(dataStruct + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(dataStruct + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_000809e4(dataStruct,newValue,flag,0x809e5,dataStruct);\n    break;\n  case 4:\n  case 5:\n    FUN_00080a0a(dataStruct,newValue,option == 5,(flag << 0x1d) >> 0x1f,flag & 1,option,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_data_00080a30",
                "param_1": "dataStruct",
                "param_2": "option",
                "param_3": "newValue",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_intersection_00080a94",
            "code": "\nuint checkBitwiseIntersection_00080a94(int dataPtr,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(dataPtr + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(dataPtr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_intersection_00080a94",
                "param_1": "dataPtr",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "set_bit_if_not_set_00080aa8",
            "code": "\n\n\nundefined4 setBitIfNotSet_00080aa8(uint bitIndex)\n\n{\n  uint bitMask;\n  \n  if (bitIndex < 0x2d) {\n    if (bitIndex < 0x20) {\n      bitMask = 1 << (bitIndex & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (bitIndex - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "set_bit_if_not_set_00080aa8",
                "param_1": "bitIndex",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080f0c",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_00080b2c",
            "code": "\nvoid configureTC_00080b2c(undefined4 inputParam,uint numChannels,char *errorString)\n\n{\n  int offset;\n  int adjustedPtr;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(numChannels,inputParam);\n  if (2 < numChannels) {\n    errorString = \"TC_Configure\";\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  adjustedPtr = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(adjustedPtr + 0x28) = 0xffffffff;\n  *(char **)(adjustedPtr + 4) = errorString;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_00080b2c",
                "param_1": "inputParam",
                "param_2": "numChannels",
                "param_3": "errorString",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "adjustedPtr"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "store_value_at_index_00080b90",
            "code": "\nvoid storeValueAtIndex_00080b90(int array,int index,undefined4 value)\n\n{\n  *(undefined4 *)(array + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "store_value_at_index_00080b90",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_data_00080b98",
            "code": "\n\n\nvoid initializeData_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elf32RelArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_data_00080b98",
                "Elf32_Rel_ARRAY_20070000": "elf32RelArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "find_optimal_value_00080c98",
            "code": "\nundefined4 findOptimalValue_00080c98(undefined4 *result,uint totalSize,int blockSize,int threshold)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[72] = 0x202;\n  result[65] = 0;\n  result[69] = 0;\n  quotient = totalSize / (uint)(blockSize * 2);\n  if (totalSize == blockSize * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(threshold * (int)(((ulonglong)totalSize / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "find_optimal_value_00080c98",
                "param_1": "result",
                "param_2": "totalSize",
                "param_3": "blockSize",
                "param_4": "threshold",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholds",
                "param_1[1]": "result[1]",
                "param_1[0x48]": "result[72]",
                "param_1[0x41]": "result[65]",
                "param_1[0x45]": "result[69]"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "set_flags_00080d30",
            "code": "\nvoid setFlags_00080d30(int dataAddress,uint value1,uint value2)\n\n{\n  *(uint *)(dataAddress + 4) = value1 | *(uint *)(dataAddress + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "set_flags_00080d30",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_data_fields_00080d3e",
            "code": "\nvoid updateDataFields_00080d3e(int dataAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataAddress + 4) =\n       value2 | *(uint *)(dataAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_data_fields_00080d3e",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_value_00080d62",
            "code": "\nvoid initializeValue_00080d62(int address)\n\n{\n  *(undefined4 *)(address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_value_00080d62",
                "param_1": "address"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "store_parameter_value_00080d6a",
            "code": "\nvoid storeParameterValue_00080d6a(int baseAddress,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "store_parameter_value_00080d6a",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "get_zero_00080e80",
            "code": "\nint getZero_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "get_zero_00080e80",
                "undefined4": "int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "calculate_sum_00080e88",
            "code": "\nint calculateSum_00080e88(int inputNumber)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = inputNumber + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "inputNumber",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_negative_one_00080eaa",
            "code": "\nint getNegativeOne_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_negative_one_00080eaa",
                "undefined4": "int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "get_success_status_00080eba",
            "code": "\nint getSuccessStatus_00080eba(void)\n\n{\n  status 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "get_success_status_00080eba",
                "undefined4": "int",
                "return": "status"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_00080ebe",
            "code": "\nundefined4 initialize_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "get_default_value_00080ec2",
            "code": "\nunsigned_int getDefaultValue_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "get_default_value_00080ec2",
                "undefined4": "unsigned_int"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "extract_bytes_00080ec8",
            "code": "\n\n\nuint extractBytes_00080ec8(undefined4 param_size,int input_array,uint array_length)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)array_length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(input_array + index);\n  }\n  return array_length & ~((int)array_length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "extract_bytes_00080ec8",
                "param_1": "param_size",
                "param_2": "input_array",
                "param_3": "array_length",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 param_2,undefined4 message,undefined4 param_4)\n\n{\n  FUN_000817c8(\"Exiting with status %d.\\n\",status,message,param_4,param_4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_3": "message"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_default_value_00080efe",
            "code": "\nuint32_t get_default_value_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_default_value_00080efe",
                "undefined4": "uint32_t"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_data_thunk_000816d8",
            "code": "\nundefined4 get_data_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_data_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "process_function_00080f0c",
            "code": "\n\n\nint processFunction_00080f0c(int inputParam,int typeParam)\n\n{\n  int output;\n  uint temp1;\n  undefined4 temp2;\n  uint temp3;\n  byte bit1;\n  byte bit2;\n  int temp4;\n  int temp5;\n  \n  output = inputParam;\n  if ((&DAT_00084b50)[inputParam * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[inputParam] & 0xf) == 4) {\n      output = FUN_00080d58(0x400c0000,(&DAT_00084b5d)[inputParam * 0x1c]);\n    }\n    bit2 = (&DAT_20070e1c)[inputParam];\n    bit1 = bit2 & 0xf;\n    if ((bit1 < 3) && (bit2 != 0)) {\n      if (bit1 == 2) {\n        if (typeParam == 0) {\n          return output;\n        }\n      }\n      else if (bit1 == 1) {\n        if (typeParam == 2) {\n          return output;\n        }\n      }\n      else if (bit1 == 3) {\n        if (typeParam == 1) {\n          return output;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (typeParam != 1) {\nLAB_00080f68:\n      if (typeParam == 0) {\n        output = inputParam * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + output));\n        output = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + output),3,\n                             *(undefined4 *)(&DAT_00084b48 + output),0);\n        bit2 = (&DAT_20070e1c)[inputParam] & 0xf0 | 2;\n      }\n      else {\n        if (typeParam != 2) {\n          return output;\n        }\n        output = inputParam * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + output));\n        output = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + output),3,\n                             *(undefined4 *)(&DAT_00084b48 + output),1);\n        bit2 = (&DAT_20070e1c)[inputParam] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[inputParam] = bit2;\n      return output;\n    }\n    temp4 = inputParam * 0x1c;\n    temp5 = *(int *)(&DAT_00084b44 + temp4);\n    if (bit2 >> 4 == 0) {\n      temp2 = 4;\n    }\n    else {\n      temp2 = 5;\n    }\n    output = FUN_00080a30(temp5,temp2,*(undefined4 *)(&DAT_00084b48 + temp4),\n                         *(undefined4 *)(&DAT_00084b54 + temp4));\n    (&DAT_20070e1c)[inputParam] = (&DAT_20070e1c)[inputParam] & 0xf0 | 3;\n    if (*(int *)(temp5 + 0x18) == -1) {\n      temp1 = *(uint *)(&DAT_00084b4c + temp4);\n      if (0x2c < temp1) {\n        return 1;\n      }\n      if (temp1 < 0x20) {\n        temp1 = 1 << (temp1 & 0xff);\n        temp3 = _DAT_400e0618 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0614 = temp3;\n        }\n      }\n      else {\n        temp1 = 1 << (temp1 - 0x20 & 0xff);\n        temp3 = _DAT_400e0708 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0704 = temp3;\n        }\n      }\n      return 0;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "process_function_00080f0c",
                "param_1": "inputParam",
                "param_2": "typeParam",
                "iVar1": "output",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "bVar5": "bit1",
                "bVar6": "bit2",
                "iVar7": "temp4",
                "iVar8": "temp5"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_data_00081014",
            "code": "\nvoid updateData_00081014(int index,int value,undefined4 data)\n\n{\n  int result;\n  undefined4 address;\n  int ptr;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      FUN_00080f0c(index,1,data,5,index,value,data);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084b44 + index * 0x1c);\n    address = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = FUN_00080a94(ptr,address);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = address;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = address;\n      return;\n    }\n    FUN_00080a0a(ptr,address,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data",
                "iVar1": "result",
                "uVar2": "address",
                "iVar3": "ptr"
            },
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "execute_function_000810a6",
            "code": "\nvoid executeFunction_000810a6(int *functionPtr,int numIterations,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 resultPtr;\n  \n  if (numIterations != 0) {\n    resultPtr = FUN_00082688(numIterations);\n    (**(code **)(*functionPtr + 4))(functionPtr,numIterations,resultPtr,*(code **)(*functionPtr + 4),arg2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "execute_function_000810a6",
                "param_1": "functionPtr",
                "param_2": "numIterations",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "resultPtr"
            },
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_initialization_000810c4",
            "code": "\nvoid executeInitialization_000810c4(void)\n\n{\n  FUN_000810a6();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_initialization_000810c4"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "execute_function_000810d8",
            "code": "\nvoid executeFunction_000810d8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000810a6(arg1,&DAT_00085635,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "execute_function_000810d8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 inputValue)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_000810a6();\n  result2 = FUN_000810d8(inputValue);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "inputValue",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convertToBase_000810fc(undefined4 outputArray,uint number,uint base)\n\n{\n  char *arrayPtr;\n  uint quotient;\n  char *currentChar;\n  char convertedChar;\n  uint remainder;\n  char convertedArray [5];\n  \n  convertedArray[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  arrayPtr = convertedArray;\n  do {\n    currentChar = arrayPtr;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    convertedChar = (char)remainder;\n    if (remainder < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *currentChar = convertedChar;\n    number = quotient;\n    arrayPtr = currentChar + -1;\n  } while (quotient != 0);\n  FUN_000810a6(outputArray,currentChar);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "outputArray",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "arrayPtr",
                "uVar2": "quotient",
                "pcVar3": "currentChar",
                "cVar4": "convertedChar",
                "uVar5": "remainder",
                "local_15": "convertedArray"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_number_with_base_0008113a",
            "code": "\nint printNumberWithBase_0008113a(undefined4 *stream,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative;\n  \n  if (base == 0) {\n    result = (**(code **)*stream)(stream,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(stream,0x2d);\n      negative = FUN_000810fc(stream,-number,10);\n      return negative + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(stream,number,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_number_with_base_0008113a",
                "param_1": "stream",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_number_to_string_thunk_0008113a",
            "code": "\nint convertNumberToString_thunk_0008113a(undefined4 *inputPtr,uint number,uint base,undefined4 flag)\n\n{\n  int result;\n  int negativeFlag;\n  \n  if (base == 0) {\n    result = (**(code **)*inputPtr)(inputPtr,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(inputPtr,0x2d);\n      negativeFlag = FUN_000810fc(inputPtr,-number,10);\n      return negativeFlag + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(inputPtr,number,base,flag);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_number_to_string_thunk_0008113a",
                "param_1": "inputPtr",
                "param_2": "number",
                "param_3": "base",
                "param_4": "flag",
                "iVar1": "result",
                "iVar2": "negativeFlag"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "sum_of_two_values_0008117a",
            "code": "\nint sumOfTwoValues_0008117a(undefined4 input)\n\n{\n  int value1;\n  int value2;\n  \n  value1 = FUN_0008113a();\n  value2 = FUN_000810d8(input);\n  return value2 + value1;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "sum_of_two_values_0008117a",
                "param_1": "input",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_relocation_zero_00081190",
            "code": "\nvoid executeIfRelocationZero_00081190(void)\n\n{\n  if ((relocationArray[6].relocationInfo != 0xffffffff) &&\n     (relocationArray[6].relocationInfo = relocationArray[6].relocationInfo - 1,\n     relocationArray[6].relocationInfo == 0)) {\n    (*(functionPointer *)((int)&relocationArray[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_relocation_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relocationInfo",
                "r_offset": "relocationOffset",
                "code": "functionPointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  FUN_00081f00(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_param_and_index_000811ca",
            "code": "\nvoid updateParamAndIndex_000811ca(int paramPtr,undefined paramVal)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(paramPtr + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(paramPtr + 0x84)) {\n    *(undefined *)(paramPtr + *(int *)(paramPtr + 0x80)) = paramVal;\n    *(uint *)(paramPtr + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_param_and_index_000811ca",
                "param_1": "paramPtr",
                "param_2": "paramVal",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "check_threshold_and_call_000811e8",
            "code": "\nint check_threshold_and_call_000811e8(int *param_arr)\n\n{\n  int result;\n  \n  result = thunk_FUN_000816d8();\n  threshold = result;\n  do {\n    result = (**(code **)(*param_arr + 0xc))(param_arr);\n    if (-1 < result) {\n      return result;\n    }\n    result = thunk_FUN_000816d8();\n  } while ((uint)(result - threshold) < (uint)max_value);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "check_threshold_and_call_000811e8",
                "param_1": "param_arr",
                "iVar1": "result",
                "param_1[3]": "threshold",
                "param_1[2]": "max_value"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "iterate_and_process_values_00081214",
            "code": "\nvoid iterateAndProcessValues_00081214(undefined4 inputBuffer,undefined4 dataBuffer,uint targetValue)\n\n{\n  uint returnValue;\n  \n  FUN_000814f6(inputBuffer,&DAT_00085637);\n  while ((returnValue = FUN_000811e8(dataBuffer), -1 < (int)returnValue && (returnValue != targetValue))) {\n    FUN_0008159e(inputBuffer,returnValue & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "iterate_and_process_values_00081214",
                "param_1": "inputBuffer",
                "param_2": "dataBuffer",
                "param_3": "targetValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_and_mask_00081248",
            "code": "\nuint calculateDifferenceAndMask_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_and_mask_00081248",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extractByteFromBuffer_00081276(int bufferAddress)\n\n{\n  byte extractedByte;\n  int bufferPointer;\n  \n  bufferPointer = *(int *)(bufferAddress + 0x10);\n  if (*(int *)(bufferPointer + 0x80) != *(int *)(bufferPointer + 0x84)) {\n    extractedByte = *(byte *)(bufferPointer + *(int *)(bufferPointer + 0x84));\n    *(uint *)(bufferPointer + 0x84) = *(int *)(bufferPointer + 0x84) + 1U & 0x7f;\n    return (uint)extractedByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "bufferAddress",
                "iVar2": "bufferPointer",
                "bVar1": "extractedByte"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataAddress,undefined4 newValue)\n\n{\n  int dataPointer;\n  uint newIndex;\n  \n  dataPointer = *(int *)(dataAddress + 0x14);\n  if ((*(int *)(*(int *)(dataAddress + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataPointer + 0x84) == *(int *)(dataPointer + 0x80))) {\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(dataPointer + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataPointer + 0x84) == newIndex);\n    *(char *)(dataPointer + *(int *)(dataPointer + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataAddress + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "iVar1": "dataPointer",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_parameters_00081348",
            "code": "\nvoid initializeParameters_00081348(undefined4 *parameters,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(parameters + 7) = value2;\n  parameters[4] = value4;\n  parameters[8] = value3;\n  parameters[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_data_000813dc",
            "code": "\nvoid initializeData_000813dc(int dataPointer,uint value)\n\n{\n  int offset;\n  undefined4 *dataStructPtr;\n  \n  FUN_00080aa8(*(undefined4 *)(dataPointer + 0x20));\n  dataStructPtr = *(undefined4 **)(dataPointer + 0x18);\n  dataStructPtr[0x48] = 0x202;\n  *dataStructPtr = 0xac;\n  dataStructPtr[1] = 0x800;\n  dataStructPtr[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / value >> 4;\n  dataStructPtr[3] = 0xffffffff;\n  dataStructPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(dataPointer + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(dataPointer + 0x1c) & 0x1f);\n  offset = *(int *)(dataPointer + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(dataPointer + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *dataStructPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_data_000813dc",
                "param_1": "dataPointer",
                "param_2": "value",
                "iVar1": "offset",
                "puVar2": "dataStructPtr"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_function_00081438",
            "code": "\nundefined4 * initializeFunction_00081438(undefined4 *outputPointer,undefined4 inputParameter)\n\n{\n  FUN_00081348();\n  *outputPointer = &PTR_FUN_000812b8_1_00085680;\n  outputPointer[9] = inputParameter;\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_function_00081438",
                "param_1": "outputPointer",
                "param_2": "inputParameter"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculateInterpolation_0008145c(int startValue,int startRange,int endRange,int startOutput,int endOutput)\n\n{\n  return (uint)((startValue - startRange) * (endOutput - startOutput)) / (uint)(endRange - startRange) + startOutput;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "startValue",
                "param_2": "startRange",
                "param_3": "endRange",
                "param_4": "startOutput",
                "param_5": "endOutput"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "execute_and_return_00081472",
            "code": "\nundefined4 * executeAndReturn_00081472(undefined4 *inputArray)\n\n{\n  FUN_00081800(*inputArray);\n  return inputArray;\n}\n\n",
            "renaming": {
                "FUN_00081472": "execute_and_return_00081472",
                "param_1": "inputArray"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_parameters_00081480",
            "code": "\nvoid resetParameters_00081480(int *parameters)\n\n{\n  if (*parameters != 0) {\n    FUN_00081800();\n  }\n  *parameters = 0;\n  parameters[2] = 0;\n  parameters[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_parameters_00081480",
                "param_1": "parameters",
                "param_1[1]": "parameters[1]",
                "param_1[2]": "parameters[2]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "check_and_update_value_00081496",
            "code": "\nint checkAndUpdateValue_00081496(int *ptr_data,int value,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  result = FUN_00081f9c(*ptr_data,value + 1,param_3,param_4,param_4);\n  if (result != 0) {\n    *ptr_data = result;\n    ptr_data[1] = value;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "check_and_update_value_00081496",
                "param_1": "ptr_data",
                "param_2": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_update_values_000814ae",
            "code": "\nundefined4 checkAndUpdateValues_000814ae(int *values,uint threshold)\n\n{\n  int result;\n  \n  if ((*values == 0) || ((uint)values[1] < threshold)) {\n    result = FUN_00081496(values);\n    if (result == 0) {\n      return 0;\n    }\n    if (values[2] == 0) {\n      *(undefined *)*values = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_update_values_000814ae",
                "param_1": "values",
                "param_2": "threshold",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "update_array_000814d0",
            "code": "\nundefined4 * updateArray_000814d0(undefined4 *array,undefined4 value,undefined4 newValue)\n\n{\n  int result;\n  \n  result = FUN_000814ae(array,newValue);\n  if (result == 0) {\n    FUN_00081480(array);\n  }\n  else {\n    array[2] = newValue;\n    FUN_000825cc(*array,value);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "update_array_000814d0",
                "param_1": "array",
                "param_2": "value",
                "param_3": "newValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_parameters_000814f6",
            "code": "\nundefined4 * initializeParameters_000814f6(undefined4 *outputArray,int inputValue)\n\n{\n  undefined4 resultValue;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputValue != 0) {\n    resultValue = FUN_00082688(inputValue);\n    FUN_000814d0(outputArray,inputValue,resultValue);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_parameters_000814f6",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "uVar1": "resultValue"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "copy_and_reset_params_0008151c",
            "code": "\nvoid copyAndResetParams_0008151c(int *source,int *destination)\n\n{\n  if (*source != 0) {\n    if ((*destination != 0) && ((uint)destination[2] <= (uint)source[1])) {\n      FUN_000825cc();\n      source[2] = destination[2];\n      goto copyParamsEnd;\n    }\n    FUN_00081800();\n  }\n  *source = *destination;\n  source[1] = destination[1];\n  source[2] = destination[2];\n  *destination = 0;\n  destination[1] = 0;\ncopyParamsEnd:\n  destination[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "copy_and_reset_params_0008151c",
                "param_1": "source",
                "param_2": "destination",
                "LAB_00081558": "copyParamsEnd",
                "(uint)param_2[2]": "(uint)destination[2]",
                "(uint)param_1[1]": "(uint)source[1]",
                "param_1[2]": "source[2]",
                "param_2[2]": "destination[2]"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_parameters_00081560",
            "code": "\nint check_parameters_00081560(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    FUN_0008151c();\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_parameters_00081560",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "check_and_update_value_00081570",
            "code": "\nundefined4 checkAndUpdateValue_00081570(int *arrayPointer,int size,int offset)\n\n{\n  int result;\n  int arrayThirdElement;\n  \n  arrayThirdElement = arrayPointer[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = FUN_000814ae(arrayPointer,arrayThirdElement + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*arrayPointer + arrayPointer[2],size);\n    arrayPointer[2] = arrayThirdElement + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "check_and_update_value_00081570",
                "param_1": "arrayPointer",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "arrayThirdElement"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "initialize_function_0008159e",
            "code": "\nvoid initializeFunction_0008159e(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  \n  localVariable2 = inputParam3;\n  FUN_00081570(inputParam1,&localVariable1,1,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "initialize_function_0008159e",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "local_c": "localVariable1",
                "uStack_8": "localVariable2"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_param_values_000815b8",
            "code": "\nint check_param_values_000815b8(byte **array_ptr,byte *element_ptr)\n\n{\n  uint array_length;\n  int result;\n  \n  if (array_ptr[2] == (byte *)0x0) {\n    if (element_ptr == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (element_ptr != (byte *)0x0) {\n      array_length = FUN_00082390(*array_ptr);\n      goto LAB_000815d4;\n    }\n    element_ptr = *array_ptr;\n  }\n  array_length = (uint)*element_ptr;\nLAB_000815d4:\n  result = 1 - array_length;\n  if (1 < array_length) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_param_values_000815b8",
                "param_1": "array_ptr",
                "param_2": "element_ptr",
                "uVar1": "array_length",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseInteger_000815de(byte **input)\n\n{\n  byte currentByte;\n  byte isNegative;\n  uint parsedValue;\n  byte *currentPos;\n  uint byteValue;\n  byte *nextPos;\n  int intValue;\n  int signStatus;\n  uint threshold;\n  uint maxValue;\n  \n  currentPos = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    nextPos = currentPos;\n    currentPos = nextPos + 1;\n    byteValue = (uint)*nextPos;\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    isNegative = currentByte & 8;\n  } while ((currentByte & 8) != 0);\n  if (byteValue == 0x2d) {\n    currentPos = nextPos + 2;\n    byteValue = (uint)nextPos[1];\n    isNegative = 1;\n  }\n  else if (byteValue == 0x2b) {\n    byteValue = (uint)nextPos[1];\n    currentPos = nextPos + 2;\n  }\n  if (isNegative == 0) {\n    maxValue = 0x7fffffff;\n  }\n  else {\n    maxValue = 0x80000000;\n  }\n  threshold = maxValue / 10;\n  signStatus = 0;\n  parsedValue = 0;\n  do {\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    if ((currentByte & 4) == 0) {\n      if ((currentByte & 3) == 0) {\nLAB_0008277e:\n        if (signStatus == -1) {\n          if (isNegative == 0) {\n            parsedValue = 0x7fffffff;\n          }\n          else {\n            parsedValue = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (isNegative != 0) {\n          parsedValue = -parsedValue;\n        }\n        return parsedValue;\n      }\n      if ((currentByte & 3) == 1) {\n        intValue = 0x37;\n      }\n      else {\n        intValue = 0x57;\n      }\n      intValue = byteValue - intValue;\n    }\n    else {\n      intValue = byteValue - 0x30;\n    }\n    if (9 < intValue) goto LAB_0008277e;\n    if (signStatus != -1) {\n      if ((threshold <= parsedValue && parsedValue != threshold) || ((parsedValue == threshold && ((int)(maxValue % 10) < intValue))))\n      {\n        signStatus = -1;\n      }\n      else {\n        parsedValue = parsedValue * 10 + intValue;\n        signStatus = 1;\n      }\n    }\n    byteValue = (uint)*currentPos;\n    currentPos = currentPos + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input",
                "bVar1": "currentByte",
                "bVar2": "isNegative",
                "uVar3": "parsedValue",
                "pbVar4": "currentPos",
                "uVar5": "byteValue",
                "pbVar6": "nextPos",
                "iVar7": "intValue",
                "iVar8": "signStatus",
                "uVar9": "threshold",
                "uVar10": "maxValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_continuous_loop_000815ec",
            "code": "\nvoid runContinuousLoop_000815ec(void)\n\n{\n  FUN_00081618();\n  FUN_00080774();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  FUN_000801e0();\n  do {\n    FUN_00080250();\n    FUN_00080970();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_continuous_loop_000815ec"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080250",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_000815e8",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_region_00081618",
            "code": "\n\n\nvoid initializeMemoryRegion_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_region_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_time_offset_00081624",
            "code": "\nint calculateTimeOffset_00081624(int index,int isZero,int multiplier,undefined4 param)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (isZero == 0) {\n    value = 0;\n  }\n  result = FUN_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((array[6].offset / 1000000) * multiplier) / 0x12,param);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)array[6].offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_time_offset_00081624",
                "param_1": "index",
                "param_2": "isZero",
                "param_3": "multiplier",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "value",
                "Elf32_Rel_ARRAY_20070000": "array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bit_sequence_00081684",
            "code": "\nint check_bit_sequence_00081684(uint *bit_sequence,uint mask,uint expected_value,int max_iterations)\n\n{\n  int iteration_count;\n  \n  do {\n    if ((*bit_sequence & mask) != expected_value) {\n      do {\n        if ((*bit_sequence & mask) == expected_value) {\n          iteration_count = 0;\n          do {\n            if ((*bit_sequence & mask) != expected_value) {\n              return iteration_count;\n            }\n            iteration_count = iteration_count + 1;\n          } while (max_iterations != iteration_count);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bit_sequence_00081684",
                "param_1": "bit_sequence",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "iVar1": "iteration_count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_dat_value_000816d8",
            "code": "\nundefined4 get_dat_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_dat_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_entry_000816ec",
            "code": "\nvoid updateRelocationEntry_000816ec(dword newValue,dword data,dword value)\n\n{\n  dword *relocationEntryPtr;\n  uint entryIndex;\n  uint bitMask;\n  code *handleErrorJump;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntryPtr = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)entryIndex) {\n    relocationEntryPtr = (dword *)FUN_000817f0(400);\n    if (relocationEntryPtr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*handleErrorJump)(0xffffffff);\n      return;\n    }\n    *relocationEntryPtr = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntryPtr[1] = 0;\n    entryIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntryPtr;\n    relocationEntryPtr[0x62] = 0;\n    relocationEntryPtr[99] = 0;\n  }\n  bitMask = 1 << (entryIndex & 0xff);\n  relocationEntryPtr[entryIndex + 0x22] = newValue;\n  relocationEntryPtr[0x62] = relocationEntryPtr[0x62] | bitMask;\n  relocationEntryPtr[entryIndex + 0x42] = value;\n  relocationEntryPtr[99] = bitMask | relocationEntryPtr[99];\n  relocationEntryPtr[1] = entryIndex + 1;\n  relocationEntryPtr[entryIndex + 2] = data;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*handleErrorJump)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "param_1": "newValue",
                "param_2": "data",
                "param_3": "value",
                "pdVar1": "relocationEntryPtr",
                "uVar2": "entryIndex",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "handleErrorJump"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failed_message_000816f8",
            "code": "\nvoid printAssertionFailedMessage_000816f8(undefined4 assertionMessage,undefined4 fileName,char *functionName,undefined4 lineNumber)\n\n{\n  undefined4 assertion;\n  undefined4 tempLineNumber;\n  char *extraInfo;\n  undefined8 timestamp;\n  \n  assertion = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (functionName == (char *)0x0) goto LAB_0008171c;\n  tempLineNumber = lineNumber;\n  extraInfo = \", function: \";\n  do {\n    lineNumber = assertionMessage;\n    FUN_00081750(assertion,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",tempLineNumber,assertionMessage,fileName,\n                 extraInfo,functionName);\n    timestamp = FUN_000836ec();\n    fileName = (undefined4)((ulonglong)timestamp >> 0x20);\n    assertion = (undefined4)timestamp;\nLAB_0008171c:\n    functionName = \"\";\n    tempLineNumber = lineNumber;\n    extraInfo = functionName;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "assertionMessage",
                "param_2": "fileName",
                "param_3": "functionName",
                "param_4": "lineNumber",
                "uVar1": "assertion",
                "uVar2": "tempLineNumber",
                "pcVar3": "extraInfo",
                "uVar4": "timestamp"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "process_relocation_00081750",
            "code": "\nvoid processRelocation_00081750(undefined4 offset,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 relocationAddress;\n  undefined4 relocationValue;\n  \n  relocationAddress = arg2;\n  relocationValue = arg3;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,arg1,&relocationAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "process_relocation_00081750",
                "param_1": "offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "relocationAddress",
                "uStack_4": "relocationValue"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctions_00081778(void)\n\n{\n  int iterationCount;\n  code **functionArray;\n  \n  FUNC_00085844();\n  functionArray = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionArray = functionArray + 1;\n    (**functionArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_functions_00081778",
                "ppcVar2": "functionArray",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "execute_relocation_000817c8",
            "code": "\nvoid executeRelocation_000817c8(undefined4 baseAddress,undefined4 relEntry,undefined4 symValue,undefined4 relocationType)\n\n{\n  undefined4 relEntryCopy;\n  undefined4 symValueCopy;\n  undefined4 relocationTypeCopy;\n  \n  relEntryCopy = relEntry;\n  symValueCopy = symValue;\n  relocationTypeCopy = relocationType;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),baseAddress,&relEntryCopy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "execute_relocation_000817c8",
                "param_1": "baseAddress",
                "param_2": "relEntry",
                "param_3": "symValue",
                "param_4": "relocationType",
                "uStack_c": "relEntryCopy",
                "uStack_8": "symValueCopy",
                "uStack_4": "relocationTypeCopy"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "execute_relocation_000817f0",
            "code": "\nvoid executeRelocation_000817f0(undefined4 data)\n\n{\n  FUN_00081810(relocationTable[140].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "execute_relocation_000817f0",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "apply_relocations_00081800",
            "code": "\nvoid applyRelocations_00081800(undefined4 input)\n\n{\n  FUN_00083b10(relocationTable[140].offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "apply_relocations_00081800",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081472",
                "FUN_00081480"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081810(undefined4 *outputBuffer,uint size)\n\n{\n  dword relInfo;\n  int temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  dword relOffset;\n  uint temp6;\n  int temp7;\n  undefined *tempPtr1;\n  dword tempRel1;\n  dword tempRel2;\n  int tempIndex;\n  dword *tempPtr2;\n  uint allocationSize;\n  undefined *tempPtr3;\n  dword *tempPtr4;\n  uint tempValue1;\n  \n  if (size + 0xb < 0x17) {\n    allocationSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    allocationSize = size + 0xb & 0xfffffff8;\n    if (((int)allocationSize < 0) || (allocationSize < size)) {\nLAB_00081876:\n      *outputBuffer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(outputBuffer);\n  relInfo = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (allocationSize < 0x1f8) {\n    tempIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + allocationSize);\n    if ((tempIndex != allocationSize + 0x20070464) ||\n       (temp1 = tempIndex + 8, tempIndex = *(int *)(tempIndex + 0x14), temp1 != tempIndex)) {\n      temp4 = *(int *)(tempIndex + 0xc);\n      temp7 = (*(uint *)(tempIndex + 4) & 0xfffffffc) + tempIndex;\n      allocationSize = *(uint *)(temp7 + 4);\n      temp1 = *(int *)(tempIndex + 8);\n      *(int *)(temp1 + 0xc) = temp4;\n      *(int *)(temp4 + 8) = temp1;\n      *(uint *)(temp7 + 4) = allocationSize | 1;\n      FUNC_00081f98(outputBuffer);\n      return (int *)(tempIndex + 8);\n    }\n    tempValue1 = (allocationSize >> 3) + 2;\n  }\n  else {\n    tempValue1 = allocationSize >> 9;\n    if (tempValue1 == 0) {\n      temp1 = 0x7e;\n      tempIndex = 0x3f;\n    }\n    else if (tempValue1 < 5) {\n      tempIndex = (allocationSize >> 6) + 0x38;\n      temp1 = tempIndex * 2;\n    }\n    else if (tempValue1 < 0x15) {\n      tempIndex = tempValue1 + 0x5b;\n      temp1 = tempIndex * 2;\n    }\n    else if (tempValue1 < 0x55) {\n      tempIndex = (allocationSize >> 0xc) + 0x6e;\n      temp1 = tempIndex * 2;\n    }\n    else if (tempValue1 < 0x155) {\n      tempIndex = (allocationSize >> 0xf) + 0x77;\n      temp1 = tempIndex * 2;\n    }\n    else if (tempValue1 < 0x555) {\n      tempIndex = (allocationSize >> 0x12) + 0x7c;\n      temp1 = tempIndex * 2;\n    }\n    else {\n      temp1 = 0xfc;\n      tempIndex = 0x7e;\n    }\n    for (relOffset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp1]; temp1 * 4 + 0x20070464U != relOffset\n        ; relOffset = *(dword *)(relOffset + 0xc)) {\n      tempValue1 = *(uint *)(relOffset + 4) & 0xfffffffc;\n      temp4 = tempValue1 - allocationSize;\n      if (0xf < temp4) {\n        tempIndex = tempIndex + -1;\n        break;\n      }\n      if (-1 < temp4) {\n        temp1 = tempValue1 + relOffset;\n        allocationSize = *(uint *)(temp1 + 4);\n        temp4 = *(int *)(relOffset + 0xc);\n        tempIndex = *(int *)(relOffset + 8);\n        *(int *)(tempIndex + 0xc) = temp4;\n        *(int *)(temp4 + 8) = tempIndex;\n        *(uint *)(temp1 + 4) = allocationSize | 1;\n        FUNC_00081f98(outputBuffer);\n        return (int *)(relOffset + 8);\n      }\n    }\n    tempValue1 = tempIndex + 1;\n  }\n  relOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp3 = temp2 & 0xfffffffc;\n    temp5 = temp3 - allocationSize;\n    if (0xf < (int)temp5) {\n      relOffset = allocationSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = allocationSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = relOffset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = relOffset;\n      *(undefined4 *)(relOffset + 0xc) = 0x2007046c;\n      *(undefined4 *)(relOffset + 8) = 0x2007046c;\n      *(uint *)(relOffset + 4) = temp5 | 1;\n      *(uint *)(relOffset + temp5) = temp5;\n      FUNC_00081f98(outputBuffer);\n      return (int *)(relInfo + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp5) {\n      *(uint *)(temp3 + relInfo + 4) = *(uint *)(temp3 + relInfo + 4) | 1;\n      FUNC_00081f98(outputBuffer);\n      return (int *)(relInfo + 8);\n    }\n    if (temp3 < 0x200) {\n      temp3 = temp2 & 0xfffffff8;\n      tempIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3);\n      relOffset = 1 << ((int)(temp2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relInfo + 8) = tempIndex;\n      *(uint *)(relInfo + 0xc) = temp3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = relOffset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3) = relInfo;\n      *(dword *)(tempIndex + 0xc) = relInfo;\n    }\n    else {\n      temp5 = temp2 >> 9;\n      if (temp5 < 5) {\n        temp1 = (temp2 >> 6) + 0x38;\n        tempIndex = temp1 * 2;\n      }\n      else if (temp5 < 0x15) {\n        temp1 = temp5 + 0x5b;\n        tempIndex = temp1 * 2;\n      }\n      else if (temp5 < 0x55) {\n        temp1 = (temp2 >> 0xc) + 0x6e;\n        tempIndex = temp1 * 2;\n      }\n      else if (temp5 < 0x155) {\n        temp1 = (temp2 >> 0xf) + 0x77;\n        tempIndex = temp1 * 2;\n      }\n      else if (temp5 < 0x555) {\n        temp1 = (temp2 >> 0x12) + 0x7c;\n        tempIndex = temp1 * 2;\n      }\n      else {\n        tempIndex = 0xfc;\n        temp1 = 0x7e;\n      }\n      relOffset = tempIndex * 4 + 0x20070464;\n      tempRel1 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tempIndex];\n      if (tempRel1 == relOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp1 >> 2 & 0xffU);\n        tempRel2 = tempRel1;\n      }\n      else {\n        do {\n          tempRel2 = tempRel1;\n          if ((*(uint *)(tempRel1 + 4) & 0xfffffffc) <= temp3) break;\n          tempRel1 = *(dword *)(tempRel1 + 8);\n          tempRel2 = tempRel1;\n        } while (relOffset != tempRel1);\n        tempRel1 = *(dword *)(tempRel2 + 0xc);\n      }\n      relOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relInfo + 0xc) = tempRel1;\n      *(dword *)(relInfo + 8) = tempRel2;\n      *(dword *)(tempRel1 + 8) = relInfo;\n      *(dword *)(tempRel2 + 0xc) = relInfo;\n    }\n  }\n  relInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp2 = 1 << ((int)tempValue1 >> 2 & 0xffU);\n  if (temp2 <= relOffset) {\n    if ((relOffset & temp2) == 0) {\n      tempValue1 = tempValue1 & 0xfffffffc;\n      do {\n        temp2 = temp2 << 1;\n        tempValue1 = tempValue1 + 4;\n      } while ((relOffset & temp2) == 0);\n    }\n    do {\n      tempPtr4 = &Elf32_Rel_ARRAY_20070000[tempValue1 + 0x8c].r_info;\n      tempPtr2 = tempPtr4;\n      temp3 = tempValue1;\n      do {\n        for (tempPtr1 = (undefined *)tempPtr2[3]; tempPtr2 != (dword *)tempPtr1;\n            tempPtr1 = *(undefined **)(tempPtr1 + 0xc)) {\n          temp5 = *(uint *)(tempPtr1 + 4) & 0xfffffffc;\n          temp6 = temp5 - allocationSize;\n          if (0xf < (int)temp6) {\n            temp1 = *(int *)(tempPtr1 + 8);\n            tempIndex = *(int *)(tempPtr1 + 0xc);\n            tempPtr3 = tempPtr1 + allocationSize;\n            *(uint *)(tempPtr1 + 4) = allocationSize | 1;\n            *(int *)(temp1 + 0xc) = tempIndex;\n            *(int *)(tempIndex + 8) = temp1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)tempPtr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)tempPtr3;\n            *(undefined4 *)(tempPtr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(tempPtr3 + 8) = 0x2007046c;\n            *(uint *)(tempPtr3 + 4) = temp6 | 1;\n            *(uint *)(tempPtr3 + temp6) = temp6;\n            FUNC_00081f98(outputBuffer);\n            return (int *)(tempPtr1 + 8);\n          }\n          if (-1 < (int)temp6) {\n            tempIndex = *(int *)(tempPtr1 + 8);\n            temp1 = *(int *)(tempPtr1 + 0xc);\n            *(uint *)(tempPtr1 + temp5 + 4) = *(uint *)(tempPtr1 + temp5 + 4) | 1;\n            *(int *)(tempIndex + 0xc) = temp1;\n            *(int *)(temp1 + 8) = tempIndex;\n            FUNC_00081f98(outputBuffer);\n            return (int *)(tempPtr1 + 8);\n          }\n        }\n        temp3 = temp3 + 1;\n        tempPtr2 = tempPtr2 + 2;\n      } while ((temp3 & 3) != 0);\n      do {\n        temp5 = tempValue1 & 3;\n        tempPtr1 = (undefined *)(tempPtr4 + -2);\n        tempValue1 = tempValue1 - 1;\n        if (temp5 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp2;\n          break;\n        }\n        tempPtr4 = (dword *)*tempPtr4;\n      } while (tempPtr4 == (dword *)tempPtr1);\n      temp2 = temp2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp2 &&\n           temp2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (tempValue1 = temp3, temp2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp2) == 0; temp2 = temp2 << 1) {\n        tempValue1 = tempValue1 + 4;\n      }\n    } while( true );\n  }\n  tempValue1 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((allocationSize <= tempValue1) &&\n     (temp2 = tempValue1 - allocationSize, relOffset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp2))\n  goto LAB_00081b1a;\n  temp2 = Elf32_Rel_ARRAY_20070000[141].r_info + tempValue1;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp3 = allocationSize + DAT_20071218 + 0x10;\n  }\n  else {\n    temp3 = allocationSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  relOffset = FUN_0008236c(outputBuffer,temp3);\n  if ((relOffset == 0xffffffff) || ((relOffset < temp2 && (relInfo != 0x20070464)))) {\n    tempValue1 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    relOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp5 = DAT_2007121c + temp3;\n    DAT_2007121c = temp5;\n    if ((temp2 == relOffset) && ((temp2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 + tempValue1 | 1;\n    }\n    else {\n      tempRel1 = relOffset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        tempRel1 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = temp5 + (relOffset - temp2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = tempRel1;\n      temp2 = relOffset & 7;\n      if (temp2 == 0) {\n        tempIndex = 0x1000;\n      }\n      else {\n        relOffset = relOffset + (8 - temp2);\n        tempIndex = 0x1008 - temp2;\n      }\n      tempIndex = tempIndex - (temp3 + relOffset & 0xfff);\n      temp1 = FUN_0008236c(outputBuffer,tempIndex);\n      if (temp1 == -1) {\n        temp2 = 1;\n        tempIndex = 0;\n      }\n      else {\n        temp2 = (temp1 - relOffset) + tempIndex | 1;\n      }\n      temp5 = DAT_2007121c + tempIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = relOffset;\n      DAT_2007121c = temp5;\n      *(uint *)(relOffset + 4) = temp2;\n      if (relInfo != 0x20070464) {\n        if (tempValue1 < 0x10) {\n          *(undefined4 *)(relOffset + 4) = 1;\n          tempValue1 = 0;\n          goto LAB_00081b04;\n        }\n        tempValue1 = tempValue1 - 0xc & 0xfffffff8;\n        *(uint *)(relInfo + 4) = tempValue1 | *(uint *)(relInfo + 4) & 1;\n        *(undefined4 *)(relInfo + tempValue1 + 4) = 5;\n        *(undefined4 *)(relInfo + tempValue1 + 8) = 5;\n        if (0xf < tempValue1) {\n          FUN_00083b10(outputBuffer,relInfo + 8);\n          temp5 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp5) {\n      DAT_20071214 = temp5;\n    }\n    if (DAT_20071210 < temp5) {\n      DAT_20071210 = temp5;\n    }\n    tempValue1 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    relOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp2 = tempValue1 - allocationSize;\n  if ((tempValue1 < allocationSize) || ((int)temp2 < 0x10)) {\n    FUNC_00081f98(outputBuffer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = allocationSize + relOffset;\n  *(uint *)(relOffset + 4) = allocationSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp2 | 1;\n  FUNC_00081f98(outputBuffer);\n  return (int *)(relOffset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "outputBuffer",
                "param_2": "size",
                "dVar1": "relInfo",
                "iVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "dVar7": "relOffset",
                "uVar8": "temp6",
                "iVar9": "temp7",
                "puVar10": "tempPtr1",
                "dVar11": "tempRel1",
                "dVar12": "tempRel2",
                "iVar13": "tempIndex",
                "pdVar14": "tempPtr2",
                "uVar15": "allocationSize",
                "puVar16": "tempPtr3",
                "pdVar17": "tempPtr4",
                "uVar18": "tempValue1"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_00083ca8",
                "FUN_000817f0"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destEnd;\n  undefined4 *srcPtr;\n  uint bytesRemaining;\n  uint bytesToCopy;\n  bool condition;\n  \n  destEnd = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      bytesToCopy = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          srcPtr = destEnd;\n          condition = bytesToCopy != 0;\n          bytesToCopy = bytesToCopy - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destEnd = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (condition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      bytesToCopy = 4 - ((uint)destination & 3);\n      size = size - bytesToCopy;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destEnd = destPtr;\n      source = srcPtr;\n      if ((bytesToCopy & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destEnd = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destEnd = *source;\n    destEnd[1] = source[1];\n    destEnd[2] = source[2];\n    destEnd[3] = source[3];\n    destEnd[4] = source[4];\n    destEnd[5] = source[5];\n    destEnd[6] = source[6];\n    destEnd[7] = source[7];\n    destEnd[8] = source[8];\n    destEnd[9] = source[9];\n    destEnd[10] = source[10];\n    destEnd[0xb] = source[0xb];\n    destEnd[0xc] = source[0xc];\n    destEnd[0xd] = source[0xd];\n    destEnd[0xe] = source[0xe];\n    destEnd[0xf] = source[0xf];\n    destEnd = destEnd + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  bytesRemaining = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destEnd = *source;\n      destEnd[1] = source[1];\n      destEnd[2] = source[2];\n      destEnd[3] = source[3];\n      destEnd = destEnd + 4;\n      source = source + 4;\n      condition = 0xf < bytesRemaining;\n      bytesRemaining = bytesRemaining - 0x10;\n    } while (condition);\n  }\n  bytesToCopy = bytesRemaining + 0xc;\n  srcPtr = destEnd;\n  destPtr = source;\n  if (0xfffffff3 < bytesRemaining) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      condition = 3 < bytesToCopy;\n      bytesToCopy = bytesToCopy - 4;\n      destEnd = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (condition);\n  }\nLAB_00081dcc:\n  if (bytesToCopy + 4 != 0) {\n    destPtr = destEnd;\n    srcPtr = source;\n    if ((bytesToCopy & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destEnd + 1);\n      *(undefined *)destEnd = *(undefined *)source;\n    }\n    if ((bytesToCopy + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destEnd",
                "puVar3": "srcPtr",
                "uVar4": "bytesRemaining",
                "uVar5": "bytesToCopy",
                "bVar6": "condition"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_and_reverse_00081e34",
            "code": "\nvoid copyAndReverse_00081e34(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint remainder;\n  undefined *tempByte;\n  uint alignment;\n  \n  if ((source < destination) && (tempPtr = (undefined4 *)((int)source + length), destination < tempPtr)) {\n    tempByte = (undefined *)((int)destination + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        index = index + -1;\n        tempByte = tempByte + -1;\n        *tempByte = *(undefined *)tempPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    tempPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    alignment = length & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    remainder = alignment;\n    tempPtr = destination;\n    srcPtr = source;\n    if (3 < alignment) {\n      do {\n        remainder = remainder - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < remainder);\n      index = (alignment - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      alignment = length & 3;\n    }\n    length = alignment;\n    if (length == 0) {\n      return;\n    }\n  }\n  tempPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_and_reverse_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "remainder",
                "puVar6": "tempByte",
                "uVar7": "alignment"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "fill_buffer_with_byte_00081f00",
            "code": "\nvoid fillBufferWithByte_00081f00(undefined4 *buffer,undefined byte,uint size)\n\n{\n  undefined4 *ptr;\n  undefined4 *tempPtr;\n  undefined4 pattern;\n  uint remaining;\n  bool isEmpty;\n  \n  if (((uint)buffer & 3) != 0) {\n    isEmpty = size == 0;\n    ptr = buffer;\n    size = size - 1;\n    if (isEmpty) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)ptr + 1);\n      *(undefined *)ptr = byte;\n      if (((uint)buffer & 3) == 0) break;\n      isEmpty = size == 0;\n      ptr = buffer;\n      size = size - 1;\n      if (isEmpty) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(byte,byte),CONCAT11(byte,byte));\n    remaining = size;\n    ptr = buffer;\n    if (0xf < size) {\n      remaining = size - 0x10;\n      do {\n        *ptr = pattern;\n        ptr[1] = pattern;\n        ptr[2] = pattern;\n        ptr[3] = pattern;\n        ptr = ptr + 4;\n      } while (ptr != (undefined4 *)((int)buffer + (remaining & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      buffer = buffer + ((remaining >> 4) + 1) * 4;\n      remaining = size;\n      ptr = buffer;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *buffer = pattern;\n      buffer = buffer + 1;\n    } while (3 < size);\n    buffer = (undefined4 *)((int)ptr + (remaining - 4 & 0xfffffffc) + 4);\n    size = remaining & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    ptr = buffer;\n    do {\n      tempPtr = (undefined4 *)((int)ptr + 1);\n      *(undefined *)ptr = byte;\n      ptr = tempPtr;\n    } while (tempPtr != (undefined4 *)(size + (int)buffer));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "fill_buffer_with_byte_00081f00",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "size",
                "puVar1": "ptr",
                "puVar2": "tempPtr",
                "uVar3": "pattern",
                "uVar4": "remaining",
                "bVar5": "isEmpty"
            },
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "process_and_forward_data_00081f9c",
            "code": "\nvoid process_and_forward_data_00081f9c(undefined4 input_param,undefined4 output_param)\n\n{\n  FUN_00081fac(rel_table[140].offset,input_param,output_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "process_and_forward_data_00081f9c",
                "param_1": "input_param",
                "param_2": "output_param",
                "Elf32_Rel_ARRAY_20070000": "rel_table",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocateMemory_00081fac(undefined4 *inputArray,int *existingMemory,uint sizeOfMemory)\n\n{\n  dword tempVar;\n  int *newMemoryPtr;\n  uint tempVar2;\n  int tempVar3;\n  uint existingSize;\n  int tempVar4;\n  int *tempPtr;\n  uint newSize;\n  uint roundedSize;\n  int *finalMemory;\n  \n  if (existingMemory == (int *)0x0) {\n    newMemoryPtr = (int *)FUN_00081810(inputArray,sizeOfMemory);\n    return newMemoryPtr;\n  }\n  FUNC_00081f94();\n  existingSize = existingMemory[-1];\n  newSize = existingSize & 0xfffffffc;\n  newMemoryPtr = existingMemory + -2;\n  if (sizeOfMemory + 0xb < 0x17) {\n    roundedSize = 0x10;\n  }\n  else {\n    roundedSize = sizeOfMemory + 0xb & 0xfffffff8;\n    if ((int)roundedSize < 0) goto LAB_00082078;\n  }\n  if (roundedSize < sizeOfMemory) {\nLAB_00082078:\n    *inputArray = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)newSize < (int)roundedSize) {\n    tempVar = (int)newMemoryPtr + newSize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == tempVar) {\n      tempVar2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      tempVar = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(roundedSize + 0x10) <= (int)(tempVar2 + newSize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemoryPtr + roundedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (tempVar2 + newSize) - roundedSize | 1;\n        existingMemory[-1] = roundedSize | existingMemory[-1] & 1U;\n        FUNC_00081f98(inputArray);\n        return existingMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(tempVar + 4) & 0xfffffffe) + tempVar + 4) & 1) == 0) {\n      tempVar2 = *(uint *)(tempVar + 4) & 0xfffffffc;\n      if ((int)roundedSize <= (int)(tempVar2 + newSize)) {\n        tempVar4 = *(int *)(tempVar + 0xc);\n        tempVar3 = *(int *)(tempVar + 8);\n        *(int *)(tempVar3 + 0xc) = tempVar4;\n        *(int *)(tempVar4 + 8) = tempVar3;\n        newSize = tempVar2 + newSize;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      tempVar2 = 0;\n      tempVar = 0;\n    }\n    if (-1 < (int)(existingSize << 0x1f)) {\n      finalMemory = (int *)((int)newMemoryPtr - existingMemory[-2]);\n      existingSize = (finalMemory[1] & 0xfffffffcU) + newSize;\n      if (tempVar != 0) {\n        if (tempVar == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(roundedSize + 0x10) <= (int)(tempVar2 + existingSize)) {\n            newMemoryPtr = finalMemory + 2;\n            tempVar3 = *newMemoryPtr;\n            tempVar4 = finalMemory[3];\n            newSize = newSize - 4;\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            if (newSize < 0x25) {\n              tempPtr = newMemoryPtr;\n              if (0x13 < newSize) {\n                finalMemory[2] = *existingMemory;\n                finalMemory[3] = existingMemory[1];\n                if (newSize < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  tempPtr = finalMemory + 4;\n                }\n                else {\n                  finalMemory[4] = existingMemory[2];\n                  finalMemory[5] = existingMemory[3];\n                  if (newSize == 0x24) {\n                    finalMemory[6] = existingMemory[4];\n                    tempPtr = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    finalMemory[7] = *tempPtr;\n                    tempPtr = finalMemory + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    tempPtr = finalMemory + 6;\n                  }\n                }\n              }\n              *tempPtr = *existingMemory;\n              tempPtr[1] = existingMemory[1];\n              tempPtr[2] = existingMemory[2];\n            }\n            else {\n              FUN_00081e34(newMemoryPtr,existingMemory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)finalMemory + roundedSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (tempVar2 + existingSize) - roundedSize | 1;\n            finalMemory[1] = roundedSize | finalMemory[1] & 1U;\n            FUNC_00081f98(inputArray);\n            return newMemoryPtr;\n          }\n        }\n        else {\n          tempVar2 = tempVar2 + existingSize;\n          if ((int)roundedSize <= (int)tempVar2) {\n            tempVar4 = *(int *)(tempVar + 0xc);\n            tempVar3 = *(int *)(tempVar + 8);\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            tempPtr = finalMemory + 2;\n            tempVar3 = *tempPtr;\n            tempVar4 = finalMemory[3];\n            existingSize = newSize - 4;\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            newSize = tempVar2;\n            if (existingSize < 0x25) {\n              newMemoryPtr = tempPtr;\n              if (0x13 < existingSize) {\n                finalMemory[2] = *existingMemory;\n                finalMemory[3] = existingMemory[1];\n                if (existingSize < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  newMemoryPtr = finalMemory + 4;\n                }\n                else {\n                  finalMemory[4] = existingMemory[2];\n                  finalMemory[5] = existingMemory[3];\n                  if (existingSize == 0x24) {\n                    finalMemory[6] = existingMemory[4];\n                    newMemoryPtr = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    finalMemory[7] = *newMemoryPtr;\n                    newMemoryPtr = finalMemory + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    newMemoryPtr = finalMemory + 6;\n                  }\n                }\n              }\n              *newMemoryPtr = *existingMemory;\n              newMemoryPtr[1] = existingMemory[1];\n              newMemoryPtr[2] = existingMemory[2];\n              existingSize = finalMemory[1];\n              newMemoryPtr = finalMemory;\n              existingMemory = tempPtr;\n            }\n            else {\n              FUN_00081e34(tempPtr,existingMemory);\n              existingSize = finalMemory[1];\n              newMemoryPtr = finalMemory;\n              existingMemory = tempPtr;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)roundedSize <= (int)existingSize) {\n        tempPtr = finalMemory + 2;\n        tempVar3 = *tempPtr;\n        tempVar4 = finalMemory[3];\n        tempVar2 = newSize - 4;\n        *(int *)(tempVar3 + 0xc) = tempVar4;\n        *(int *)(tempVar4 + 8) = tempVar3;\n        newSize = existingSize;\n        if (tempVar2 < 0x25) {\n          newMemoryPtr = tempPtr;\n          if (0x13 < tempVar2) {\n            finalMemory[2] = *existingMemory;\n            finalMemory[3] = existingMemory[1];\n            if (tempVar2 < 0x1c) {\n              existingMemory = existingMemory + 2;\n              newMemoryPtr = finalMemory + 4;\n            }\n            else {\n              finalMemory[4] = existingMemory[2];\n              finalMemory[5] = existingMemory[3];\n              if (tempVar2 == 0x24) {\n                finalMemory[6] = existingMemory[4];\n                newMemoryPtr = existingMemory + 5;\n                existingMemory = existingMemory + 6;\n                finalMemory[7] = *newMemoryPtr;\n                newMemoryPtr = finalMemory + 8;\n              }\n              else {\n                existingMemory = existingMemory + 4;\n                newMemoryPtr = finalMemory + 6;\n              }\n            }\n          }\n          *newMemoryPtr = *existingMemory;\n          newMemoryPtr[1] = existingMemory[1];\n          newMemoryPtr[2] = existingMemory[2];\n          existingSize = finalMemory[1];\n          newMemoryPtr = finalMemory;\n          existingMemory = tempPtr;\n        }\n        else {\n          FUN_00081e34(tempPtr,existingMemory);\n          existingSize = finalMemory[1];\n          newMemoryPtr = finalMemory;\n          existingMemory = tempPtr;\n        }\n        goto LAB_00082088;\n      }\n    }\n    finalMemory = (int *)FUN_00081810(inputArray,sizeOfMemory);\n    if (finalMemory == (int *)0x0) goto LAB_000820a0;\n    existingSize = existingMemory[-1];\n    if (finalMemory + -2 != (int *)((existingSize & 0xfffffffe) + (int)newMemoryPtr)) {\n      newSize = newSize - 4;\n      if (newSize < 0x25) {\n        newMemoryPtr = existingMemory;\n        tempPtr = finalMemory;\n        if (0x13 < newSize) {\n          *finalMemory = *existingMemory;\n          finalMemory[1] = existingMemory[1];\n          if (newSize < 0x1c) {\n            newMemoryPtr = existingMemory + 2;\n            tempPtr = finalMemory + 2;\n          }\n          else {\n            finalMemory[2] = existingMemory[2];\n            finalMemory[3] = existingMemory[3];\n            if (newSize == 0x24) {\n              finalMemory[4] = existingMemory[4];\n              finalMemory[5] = existingMemory[5];\n              newMemoryPtr = existingMemory + 6;\n              tempPtr = finalMemory + 6;\n            }\n            else {\n              newMemoryPtr = existingMemory + 4;\n              tempPtr = finalMemory + 4;\n            }\n          }\n        }\n        *tempPtr = *newMemoryPtr;\n        tempPtr[1] = newMemoryPtr[1];\n        tempPtr[2] = newMemoryPtr[2];\n      }\n      else {\n        FUN_00081e34(finalMemory,existingMemory);\n      }\n      FUN_00083b10(inputArray,existingMemory);\n      goto LAB_000820a0;\n    }\n    newSize = newSize + (finalMemory[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  tempVar2 = newSize - roundedSize;\n  finalMemory = existingMemory;\n  if (tempVar2 < 0x10) {\n    newMemoryPtr[1] = existingSize & 1 | newSize;\n    *(uint *)((int)newMemoryPtr + newSize + 4) = *(uint *)((int)newMemoryPtr + newSize + 4) | 1;\n  }\n  else {\n    newMemoryPtr[1] = existingSize & 1 | roundedSize;\n    *(uint *)((int)newMemoryPtr + roundedSize + 4) = tempVar2 | 1;\n    *(uint *)((int)newMemoryPtr + tempVar2 + roundedSize + 4) = *(uint *)((int)newMemoryPtr + tempVar2 + roundedSize + 4) | 1;\n    FUN_00083b10(inputArray,(int)newMemoryPtr + roundedSize + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(inputArray);\n  return finalMemory;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "inputArray",
                "param_2": "existingMemory",
                "param_3": "sizeOfMemory",
                "dVar1": "tempVar",
                "piVar2": "newMemoryPtr",
                "uVar3": "tempVar2",
                "iVar4": "tempVar3",
                "uVar5": "existingSize",
                "iVar6": "tempVar4",
                "piVar7": "tempPtr",
                "uVar8": "newSize",
                "uVar9": "roundedSize",
                "piVar10": "finalMemory"
            },
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "check_and_update_param_0008236c",
            "code": "\nvoid checkAndUpdateParam_0008236c(int *outputParam,undefined4 inputParam)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080e88(inputParam);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputParam = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "check_and_update_param_0008236c",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_and_order_00082390",
            "code": "\nint compareAndOrder_00082390(uint *input1,uint *input2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)input1 | (uint)input2) & 7) != 0) {\n    ptr1 = input1;\n    if (((uint)input1 & 3) != 0) {\n      ptr1 = (uint *)((uint)input1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)input1 & 0xfffffffc);\n      ptr2 = input2;\n      if (((uint)input1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = input2;\n        if (((uint)input1 & 2) == 0) {\n          ptr2 = (uint *)((int)input2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - *(byte *)input2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      input2 = (uint *)((int)ptr3 + 1);\n      result = (val1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)input2 & 3;\n    if (val1 != 0) {\n      input2 = (uint *)((uint)input2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *input2;\n        do {\n          input2 = input2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *input2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *input2;\n        do {\n          input2 = input2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *input2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *input2;\n        do {\n          input2 = input2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *input2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    input1 = ptr1;\n    ptr2 = input2;\n    if (((uint)ptr1 & 4) != 0) {\n      input1 = ptr1 + 1;\n      val1 = *ptr1;\n      ptr2 = input2 + 1;\n      val3 = *input2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\nLAB_0008259a:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    input2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *input1;\n        val3 = input1[1];\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto LAB_0008258e;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        input1 = input1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    val1 = *input1;\n    val2 = input1[1];\n    val3 = *input2;\n    val4 = input2[1];\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto LAB_0008259a;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    input1 = input1 + 2;\n    input2 = input2 + 2;\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\nLAB_0008259e:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 | val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - LZCOUNT(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\nLAB_0008258e:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_and_order_00082390",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "val1",
                "uVar6": "val2",
                "uVar7": "val3",
                "uVar8": "val4",
                "uVar9": "val5"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copyString_000825cc(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *sourcePtr;\n  uint *sourcePtr2;\n  uint currentValue;\n  uint rotatedValue;\n  uint *destinationPtr;\n  bool isZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    sourcePtr2 = source;\n    if (((uint)source & 1) != 0) {\n      sourcePtr2 = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = sourcePtr2;\n    if (((uint)sourcePtr2 & 2) != 0) {\n      source = (uint *)((int)sourcePtr2 + 2);\n      currentShort = *(ushort *)sourcePtr2;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  currentValue = *source;\n  sourcePtr2 = source + 1;\n  destinationPtr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_00082630;\n    destinationPtr = destination + 1;\n    *destination = currentValue;\n    sourcePtr2 = source + 2;\n    currentValue = source[1];\n  }\n  while( true ) {\n    sourcePtr = sourcePtr2 + 1;\n    rotatedValue = *sourcePtr2;\n    destination = destinationPtr;\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) break;\n    destination = destinationPtr + 1;\n    *destinationPtr = currentValue;\n    currentValue = rotatedValue;\n    if ((rotatedValue + 0xfefefeff & ~rotatedValue & 0x80808080) != 0) break;\n    sourcePtr2 = sourcePtr2 + 2;\n    currentValue = *sourcePtr;\n    destinationPtr = destinationPtr + 2;\n    *destination = rotatedValue;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)currentValue;\n    rotatedValue = currentValue & 0xff;\n    currentValue = currentValue >> 8 | currentValue << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (rotatedValue != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "sourcePtr",
                "puVar4": "sourcePtr2",
                "uVar5": "currentValue",
                "uVar6": "rotatedValue",
                "puVar7": "destinationPtr",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint countLeadingZeros_00082688(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint data;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  data = *ptr;\n  if ((input & 3) != 0) {\n    data = data | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (data + 0xfefefeff & ~data & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    data = *ptr;\n  }\n  isZero = (data & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (data & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (data & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "data",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000814f6",
                "FUN_000810a6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 param1,int param2,int **param3)\n\n{\n  int *currentArray;\n  int result;\n  int *currPtr;\n  uint count;\n  undefined4 *dataPtr;\n  uint val1;\n  uint val2;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = FUN_00083ca8();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  currPtr = param3[2];\n  currentArray = *param3;\n  while (currPtr != (int *)0x0) {\n    val1 = currentArray[1];\n    val2 = val1 >> 2;\n    if (val2 != 0) {\n      dataPtr = (undefined4 *)(*currentArray + -4);\n      count = 0;\n      do {\n        dataPtr = dataPtr + 1;\n        result = FUN_000839b4(param1,*dataPtr,param2);\n        count = count + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (val2 != count);\n      currPtr = param3[2];\n    }\n    currPtr = (int *)((int)currPtr - (val1 & 0xfffffffc));\n    param3[2] = currPtr;\n    currentArray = currentArray + 2;\n  }\n  result = 0;\nLAB_00082864:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "currentArray",
                "iVar2": "result",
                "piVar3": "currPtr",
                "uVar4": "count",
                "puVar5": "dataPtr",
                "uVar6": "val1",
                "uVar7": "val2"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "parse_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseString_0008289c(int input_string,int param_2,int *******format_string,int **args)\n\n{\n  bool is_long;\n  bool is_unsigned;\n  bool is_octal;\n  char sign_char;\n  bool is_zero_padding;\n  int ********format_args;\n  int *integer_value;\n  int result;\n  char temp_char;\n  int *******current_format;\n  uint temp_var_1;\n  int **temp_pointer_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  int iteration_counter;\n  int ********format_arg;\n  int temp_var_4;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint temp_var_5;\n  int *ptemp_var_6;\n  int *******temp_pointer_2;\n  undefined4 temp_var_7;\n  int ********temp_format_arg;\n  bool is_negative;\n  longlong long_long_value;\n  int *******num_format_args;\n  int *******max_num_args;\n  int **arg_pointers;\n  int result_length;\n  char *hexadecimal_chars;\n  char current_char;\n  undefined specifier_repr;\n  undefined hex_padding_char;\n  int ********current_arg;\n  int num_args_processed;\n  int *******current_arg_ptr;\n  undefined temp_char_2;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******arg_storage_array [16];\n  \n  if ((input_string != 0) && (*(int *)(input_string + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  temp_var_2 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    temp_var_2 = temp_var_2 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)temp_var_2;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(temp_var_2 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((temp_var_2 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = FUN_0008356c(input_string,param_2);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    result = FUN_000834f0(input_string,param_2,format_string,args);\n    return result;\n  }\nLAB_000828ee:\n  hexadecimal_chars = (char *)0x0;\n  current_arg_ptr = (int *******)0x0;\n  num_args_processed = 0;\n  result_length = 0;\n  format_args = (int ********)local_68;\n  arg_pointers = args;\n  current_arg = (int ********)local_68;\nLAB_00082902:\n  current_format = format_string;\n  if ((*(char *)format_string != '\\0') && (*(char *)format_string != '%')) {\n    do {\n      current_format = (int *******)((int)current_format + 1);\n      if (*(char *)current_format == '\\0') break;\n    } while (*(char *)current_format != '%');\n    pppppppiVar20 = (int *******)((int)current_format - (int)format_string);\n    if (pppppppiVar20 != (int *******)0x0) {\n      num_args_processed = num_args_processed + 1;\n      current_arg_ptr = (int *******)((int)current_arg_ptr + (int)pppppppiVar20);\n      *format_args = format_string;\n      format_args[1] = pppppppiVar20;\n      if (num_args_processed < 8) {\n        format_args = format_args + 2;\n      }\n      else {\n        if (current_arg_ptr == (int *******)0x0) {\n          result_length = result_length + (int)pppppppiVar20;\n          num_args_processed = 0;\n          format_args = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        result = FUN_00082824(input_string,param_2,&current_arg);\n        format_args = (int ********)local_68;\n        if (result != 0) goto LAB_00083142;\n      }\n      result_length = result_length + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)current_format != '\\0') {\n    current_char = '\\0';\n    temp_var_3 = (uint)*(byte *)((int)current_format + 1);\n    temp_var_2 = 0;\n    is_zero_padding = false;\n    is_unsigned = false;\n    is_long = false;\n    is_octal = false;\n    is_negative = false;\n    pppppppiVar20 = (int *******)0x0;\n    max_num_args = (int *******)0xffffffff;\n    format_string = (int *******)((int)current_format + 1);\nLAB_00082976:\n    format_string = (int *******)((int)format_string + 1);\nLAB_0008297a:\n    switch(temp_var_3) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (temp_var_3 != 0) {\n        num_format_args = (int *******)0x1;\n        max_num_args = (int *******)0x1;\n        temp_format_arg = (int ********)&temp_char_2;\n        temp_char_2 = (char)temp_var_3;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      is_octal = true;\n      temp_var_3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*arg_pointers;\n      arg_pointers = arg_pointers + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      temp_var_3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2b:\n      temp_var_3 = (uint)*(byte *)format_string;\n      current_char = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      temp_var_2 = temp_var_2 | 4;\n      temp_var_3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2e:\n      temp_var_3 = (uint)*(byte *)format_string;\n      current_format = (int *******)((int)format_string + 1);\n      if (temp_var_3 == 0x2a) {\n        temp_var_3 = (uint)*(byte *)((int)format_string + 1);\n        max_num_args = (int *******)*arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        format_string = current_format;\n        if ((int)max_num_args < 0) {\n          max_num_args = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      temp_var_1 = temp_var_3 - 0x30;\n      if (temp_var_1 < 10) {\n        temp_var_5 = 0;\n        do {\n          format_string = (int *******)((int)current_format + 1);\n          temp_var_3 = (uint)*(byte *)current_format;\n          temp_var_5 = temp_var_1 + temp_var_5 * 10;\n          temp_var_1 = temp_var_3 - 0x30;\n          current_format = format_string;\n        } while (temp_var_1 < 10);\n        max_num_args = (int *******)(temp_var_5 | (int)temp_var_5 >> 0x1f);\n      }\n      else {\n        max_num_args = (int *******)0x0;\n        format_string = current_format;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      temp_var_2 = temp_var_2 | 0x80;\n      temp_var_3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_unsigned = true;\n      if (is_long == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      arg_pointers = (int **)((int)arg_pointers + 7U & 0xfffffff8);\n      piVar19 = *arg_pointers;\n      ptemp_var_6 = arg_pointers[1];\n      arg_pointers = arg_pointers + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_unsigned = true;\n      if (is_long != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_unsigned << 4;\n      iteration_counter = (uint)is_long << 5;\n      if ((is_unsigned == 0) && (iteration_counter = (uint)is_negative << 6, is_negative != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        ptemp_var_6 = (int *)0x0;\n      }\n      else {\n        result = iteration_counter;\n        piVar19 = *arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        ptemp_var_6 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_unsigned = true;\n      if (is_long != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_unsigned) || (is_negative == false)) {\n        result = 1;\n        piVar19 = *arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        ptemp_var_6 = (int *)0x0;\n      }\n      else {\n        ptemp_var_6 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexadecimal_chars = \"0123456789ABCDEF\";\n      if (is_long == false) goto LAB_00082efa;\nLAB_00082d1a:\n      temp_pointer_1 = (int **)((int)arg_pointers + 7U & 0xfffffff8);\n      arg_pointers = temp_pointer_1 + 2;\n      piVar19 = *temp_pointer_1;\n      ptemp_var_6 = temp_pointer_1[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar19 = *arg_pointers;\n      arg_pointers = arg_pointers + 1;\n      num_format_args = (int *******)0x1;\n      temp_char_2 = SUB41(piVar19,0);\n      max_num_args = (int *******)0x1;\n      temp_format_arg = (int ********)&temp_char_2;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_long != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_unsigned == false) && (is_negative != false)) {\n        piVar19 = (int *)(int)*(short *)arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        ptemp_var_6 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        ptemp_var_6 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)ptemp_var_6 < 0) {\n        is_negative = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        ptemp_var_6 = (int *)(-(int)ptemp_var_6 - (uint)is_negative);\n        current_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)max_num_args) {\n        temp_var_2 = temp_var_2 & 0xffffff7f;\n      }\n      is_zero_padding = false;\n      temp_var_3 = (uint)piVar19 | (uint)ptemp_var_6;\n      result = 1;\n      sign_char = current_char;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_negative = true;\n      temp_var_3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x6c:\n      temp_var_3 = (uint)*(byte *)format_string;\n      if (temp_var_3 == 0x6c) {\n        is_long = true;\n        temp_var_3 = (uint)*(byte *)((int)format_string + 1);\n        format_string = (int *******)((int)format_string + 1);\n      }\n      else {\n        is_unsigned = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_long == false) {\n        if (is_unsigned == false) {\n          if (is_negative) {\n            piVar19 = *arg_pointers;\n            arg_pointers = arg_pointers + 1;\n            *(short *)piVar19 = (short)result_length;\n          }\n          else {\n            piVar19 = *arg_pointers;\n            arg_pointers = arg_pointers + 1;\n            *piVar19 = result_length;\n          }\n        }\n        else {\n          piVar19 = *arg_pointers;\n          arg_pointers = arg_pointers + 1;\n          *piVar19 = result_length;\n        }\n      }\n      else {\n        piVar19 = *arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        *piVar19 = result_length;\n        piVar19[1] = result_length >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_long == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      temp_pointer_1 = (int **)((int)arg_pointers + 7U & 0xfffffff8);\n      arg_pointers = temp_pointer_1 + 2;\n      piVar19 = *temp_pointer_1;\n      ptemp_var_6 = temp_pointer_1[1];\n      result = 0;\n      break;\n    case 0x70:\n      piVar19 = *arg_pointers;\n      arg_pointers = arg_pointers + 1;\n      hex_padding_char = 0x78;\n      is_zero_padding = true;\n      ptemp_var_6 = (int *)0x0;\n      specifier_repr = 0x30;\n      hexadecimal_chars = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_long = true;\n      temp_var_3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x73:\n      temp_format_arg = (int ********)*arg_pointers;\n      current_char = '\\0';\n      arg_pointers = arg_pointers + 1;\n      if (temp_format_arg != (int ********)0x0) {\n        if ((int)max_num_args < 0) {\n          max_num_args = (int *******)FUN_00082688(temp_format_arg);\n          current_format = (int *******)0x0;\n          sign_char = current_char;\n        }\n        else {\n          result = FUN_000840f8(temp_format_arg,0,max_num_args);\n          sign_char = current_char;\n          if (result == 0) {\n            current_format = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(result - (int)temp_format_arg);\n            if ((int)max_num_args <= (int)(int *******)(result - (int)temp_format_arg)) {\n              pppppppiVar18 = max_num_args;\n            }\n            current_format = (int *******)0x0;\n            max_num_args = pppppppiVar18;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < max_num_args) {\n        max_num_args = (int *******)0x6;\n      }\n      num_format_args = (int *******)((uint)max_num_args & ~((int)max_num_args >> 0x1f));\n      temp_format_arg = (int ********)&UNK_00085728;\nLAB_00082d76:\n      current_char = '\\0';\n      current_format = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_long) goto LAB_00082ce0;\nLAB_00082bc6:\n      temp_pointer_1 = (int **)((int)arg_pointers + 7U & 0xfffffff8);\n      arg_pointers = temp_pointer_1 + 2;\n      piVar19 = *temp_pointer_1;\n      ptemp_var_6 = temp_pointer_1[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexadecimal_chars = \"0123456789abcdef\";\n      if (is_long != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_unsigned == false) && (is_negative != false)) {\n        ptemp_var_6 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)arg_pointers;\n        arg_pointers = arg_pointers + 1;\n      }\n      else {\n        piVar19 = *arg_pointers;\n        arg_pointers = arg_pointers + 1;\n        ptemp_var_6 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((is_octal) && (((uint)piVar19 | (uint)ptemp_var_6) != 0)) {\n        is_zero_padding = true;\n        specifier_repr = 0x30;\n        result = 2;\n        hex_padding_char = (char)temp_var_3;\n      }\n      else {\n        result = 2;\n      }\n    }\n    current_char = '\\0';\n    sign_char = '\\0';\nLAB_00082ace:\n    if (-1 < (int)max_num_args) {\n      temp_var_2 = temp_var_2 & 0xffffff7f;\n    }\n    temp_var_3 = (uint)piVar19 | (uint)ptemp_var_6;\njoined_r0x00082adc:\n    long_long_value = CONCAT44(ptemp_var_6,piVar19);\n    current_format = max_num_args;\n    if ((temp_var_3 == 0) && (max_num_args == (int *******)0x0)) {\n      temp_format_arg = (int ********)local_68;\n      if ((result != 0) || (!is_octal)) goto LAB_00082b04;\n      temp_format_arg = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (ptemp_var_6 != (int *)0x0 || (int *)0x9 < piVar19) {\n        format_arg = (int ********)(&cStack_6a + 1);\n        do {\n          temp_format_arg = format_arg;\n          temp_var_7 = (undefined4)((ulonglong)long_long_value >> 0x20);\n          temp_char = '\\n';\n          FUN_00084530((int)long_long_value,temp_var_7,10,0);\n          *(char *)temp_format_arg = temp_char + '0';\n          long_long_value = FUN_00084530((int)long_long_value,temp_var_7,10,0);\n          format_arg = (int ********)((int)temp_format_arg + -1);\n        } while (long_long_value != 0);\n        max_num_args = (int *******)((int)local_68 - (int)temp_format_arg);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar19 + '0';\n      temp_format_arg = (int ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    format_arg = (int ********)(&cStack_6a + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      temp_format_arg = format_arg;\n      temp_var_3 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)ptemp_var_6 << 0x1c);\n      ptemp_var_6 = (int *)((uint)ptemp_var_6 >> 4);\n      *(char *)temp_format_arg = hexadecimal_chars[temp_var_3];\n      format_arg = (int ********)((int)temp_format_arg + -1);\n    } while (((uint)piVar19 | (uint)ptemp_var_6) != 0);\n    max_num_args = (int *******)((int)local_68 - (int)temp_format_arg);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (current_arg_ptr != (int *******)0x0) {\n    FUN_00082824(input_string,param_2,&current_arg);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result_length;\nLAB_000830e2:\n  do {\n    temp_format_arg = format_arg;\n    integer_value = (int *)((uint)piVar19 >> 3 | (int)ptemp_var_6 << 0x1d);\n    ptemp_var_6 = (int *)((uint)ptemp_var_6 >> 3);\n    result = ((uint)piVar19 & 7) + 0x30;\n    *(char *)temp_format_arg = (char)result;\n    format_arg = (int ********)((int)temp_format_arg + -1);\n    piVar19 = integer_value;\n  } while (((uint)integer_value | (uint)ptemp_var_6) != 0);\n  if (is_octal) {\n    if (result == 0x30) {\nLAB_00082afe:\n      max_num_args = (int *******)((int)local_68 - (int)temp_format_arg);\n    }\n    else {\n      *(undefined *)((int)temp_format_arg + -1) = 0x30;\n      temp_format_arg = format_arg;\n      max_num_args = (int *******)((int)local_68 - (int)format_arg);\n    }\n  }\n  else {\nLAB_00083282:\n    max_num_args = (int *******)((int)local_68 - (int)temp_format_arg);\n  }\nLAB_00082b04:\n  num_format_args = max_num_args;\n  if ((int)max_num_args < (int)current_format) {\n    num_format_args = current_format;\n  }\n  if (sign_char != '\\0') {\n    num_format_args = (int *******)((int)num_format_args + 1);\n  }\nLAB_00082b1e:\n  if (is_zero_padding) {\n    num_format_args = (int *******)((int)num_format_args + 2);\n  }\n  if ((temp_var_2 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)num_format_args), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      num_args_processed = num_args_processed + 1;\n    }\n    else {\n      do {\n        temp_pointer_2 = pppppppiVar18;\n        result = num_args_processed + 1;\n        current_arg_ptr = current_arg_ptr + 4;\n        *format_args = (int *******)0x856f0;\n        format_args[1] = (int *******)0x10;\n        if (result < 8) {\n          iteration_counter = num_args_processed + 2;\n          format_args = format_args + 2;\n          num_args_processed = result;\n        }\n        else if (current_arg_ptr == (int *******)0x0) {\n          iteration_counter = 1;\n          format_args = (int ********)local_68;\n          num_args_processed = 0;\n        }\n        else {\n          num_args_processed = result;\n          result = FUN_00082824(input_string,param_2,&current_arg);\n          if (result != 0) goto LAB_00083142;\n          iteration_counter = num_args_processed + 1;\n          format_args = (int ********)local_68;\n        }\n        pppppppiVar18 = temp_pointer_2 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = temp_pointer_2 + -4;\n      num_args_processed = iteration_counter;\n    }\n    current_arg_ptr = (int *******)((int)current_arg_ptr + (int)pppppppiVar18);\n    *format_args = (int *******)0x856f0;\n    format_args[1] = pppppppiVar18;\n    if (num_args_processed < 8) {\n      result = num_args_processed + 1;\n      format_args = format_args + 2;\n    }\n    else if (current_arg_ptr == (int *******)0x0) {\n      result = 1;\n      num_args_processed = 0;\n      format_args = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082824(input_string,param_2,&current_arg);\n      if (result != 0) goto LAB_00083142;\n      result = num_args_processed + 1;\n      format_args = (int ********)local_68;\n    }\n  }\n  else {\n    result = num_args_processed + 1;\n  }\n  iteration_counter = result;\n  if (current_char != '\\0') {\n    current_arg_ptr = (int *******)((int)current_arg_ptr + 1);\n    iteration_counter = 1;\n    *format_args = (int *******)&current_char;\n    format_args[1] = (int *******)0x1;\n    num_args_processed = result;\n    if (result < 8) {\n      iteration_counter = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (current_arg_ptr == (int *******)0x0) {\n      num_args_processed = 0;\n      format_args = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082824(input_string,param_2,&current_arg);\n      if (result != 0) goto LAB_00083142;\n      iteration_counter = num_args_processed + 1;\n      format_args = (int ********)local_68;\n    }\n  }\n  result = iteration_counter;\n  temp_var_4 = num_args_processed;\n  if (is_zero_padding) {\n    current_arg_ptr = (int *******)((int)current_arg_ptr + 2);\n    *format_args = (int *******)&specifier_repr;\n    format_args[1] = (int *******)0x2;\n    if (iteration_counter < 8) {\n      result = iteration_counter + 1;\n      temp_var_4 = iteration_counter;\n      format_args = format_args + 2;\n    }\n    else if (current_arg_ptr == (int *******)0x0) {\n      result = 1;\n      temp_var_4 = 0;\n      format_args = (int ********)local_68;\n    }\n    else {\n      num_args_processed = iteration_counter;\n      result = FUN_00082824(input_string,param_2,&current_arg);\n      if (result != 0) goto LAB_00083142;\n      result = num_args_processed + 1;\n      temp_var_4 = num_args_processed;\n      format_args = (int ********)local_68;\n    }\n  }\n  num_args_processed = temp_var_4;\n  if ((temp_var_2 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)num_format_args), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          temp_pointer_2 = pppppppiVar18;\n          num_args_processed = temp_var_4 + 1;\n          current_arg_ptr = current_arg_ptr + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < num_args_processed) break;\n          result = temp_var_4 + 2;\n          format_args = format_args + 2;\nLAB_000831f2:\n          temp_var_4 = num_args_processed;\n          pppppppiVar18 = temp_pointer_2 + -4;\n          if ((int)(temp_pointer_2 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (current_arg_ptr != (int *******)0x0) {\n          result = FUN_00082824(input_string,param_2,&current_arg);\n          if (result == 0) {\n            result = num_args_processed + 1;\n            format_args = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        temp_var_4 = 0;\n        pppppppiVar18 = temp_pointer_2 + -4;\n        format_args = (int ********)local_68;\n      } while (0x10 < (int)(temp_pointer_2 + -4));\nLAB_00083218:\n      pppppppiVar18 = temp_pointer_2 + -4;\n    }\n    current_arg_ptr = (int *******)((int)current_arg_ptr + (int)pppppppiVar18);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = pppppppiVar18;\n    num_args_processed = result;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (current_arg_ptr == (int *******)0x0) {\n      result = 1;\n      num_args_processed = 0;\n      format_args = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082824(input_string,param_2,&current_arg);\n      if (result != 0) goto LAB_00083142;\n      result = num_args_processed + 1;\n      format_args = (int ********)local_68;\n    }\n  }\n  current_format = (int *******)((int)current_format - (int)max_num_args);\n  format_arg = (int ********)local_68;\n  if ((int)current_format < 1) {\nLAB_0008302a:\n    current_arg_ptr = (int *******)((int)current_arg_ptr + (int)max_num_args);\n    *format_args = (int *******)temp_format_arg;\n    format_args[1] = max_num_args;\n    max_num_args = current_arg_ptr;\n    num_args_processed = result;\n    if (result < 8) goto LAB_000831be;\n    if (current_arg_ptr == (int *******)0x0) {\n      num_args_processed = 0;\n    }\n    else {\n      result = FUN_00082824(input_string,param_2,&current_arg);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    iteration_counter = num_args_processed;\n    if (0x10 < (int)current_format) {\n      do {\n        while( true ) {\n          pppppppiVar18 = current_format;\n          num_args_processed = iteration_counter + 1;\n          current_arg_ptr = current_arg_ptr + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < num_args_processed) break;\n          result = iteration_counter + 2;\n          format_args = format_args + 2;\nLAB_00082fe6:\n          iteration_counter = num_args_processed;\n          current_format = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (current_arg_ptr != (int *******)0x0) {\n          result = FUN_00082824(input_string,param_2,&current_arg);\n          if (result == 0) {\n            result = num_args_processed + 1;\n            format_args = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        format_args = (int ********)local_68;\n        iteration_counter = 0;\n        current_format = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_0008300e:\n      current_format = pppppppiVar18 + -4;\n    }\n    current_arg_ptr = (int *******)((int)current_arg_ptr + (int)current_format);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = current_format;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n      goto LAB_0008302a;\n    }\n    if (current_arg_ptr != (int *******)0x0) {\n      num_args_processed = result;\n      result = FUN_00082824(input_string,param_2,&current_arg);\n      if (result != 0) goto LAB_00083142;\n      result = num_args_processed + 1;\n      format_args = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    arg_storage_array[0] = max_num_args;\n    num_args_processed = 1;\n    format_args = (int ********)local_68;\n    local_68 = (undefined  [4])temp_format_arg;\nLAB_000831be:\n    format_arg = format_args + 2;\n    current_arg_ptr = max_num_args;\n  }\n  if (((temp_var_2 & 4) != 0) &&\n     (current_format = (int *******)((int)pppppppiVar20 - (int)num_format_args), 0 < (int)current_format)) {\n    result = num_args_processed;\n    if ((int)current_format < 0x11) {\n      iteration_counter = num_args_processed + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          num_args_processed = result + 1;\n          current_arg_ptr = current_arg_ptr + 4;\n          *format_arg = (int *******)0x856f0;\n          format_arg[1] = (int *******)0x10;\n          if (7 < num_args_processed) break;\n          iteration_counter = result + 2;\n          format_arg = format_arg + 2;\nLAB_0008307a:\n          current_format = current_format + -4;\n          result = num_args_processed;\n          if ((int)current_format < 0x11) goto LAB_000830a2;\n        }\n        if (current_arg_ptr != (int *******)0x0) {\n          result = FUN_00082824(input_string,param_2,&current_arg);\n          if (result == 0) {\n            iteration_counter = num_args_processed + 1;\n            format_arg = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        current_format = current_format + -4;\n        iteration_counter = 1;\n        result = 0;\n        format_arg = (int ********)local_68;\n      } while (0x10 < (int)current_format);\n    }\nLAB_000830a2:\n    current_arg_ptr = (int *******)((int)current_arg_ptr + (int)current_format);\n    *format_arg = (int *******)0x856f0;\n    format_arg[1] = current_format;\n    num_args_processed = iteration_counter;\n    if (7 < iteration_counter) {\n      if (current_arg_ptr == (int *******)0x0) {\n        if ((int)num_format_args < (int)pppppppiVar20) {\n          num_format_args = pppppppiVar20;\n        }\n        result_length = result_length + (int)num_format_args;\n        goto LAB_00083186;\n      }\n      result = FUN_00082824(input_string,param_2,&current_arg);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)num_format_args < (int)pppppppiVar20) {\n    num_format_args = pppppppiVar20;\n  }\n  result_length = result_length + (int)num_format_args;\n  if ((current_arg_ptr != (int *******)0x0) &&\n     (result = FUN_00082824(input_string,param_2,&current_arg), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  num_args_processed = 0;\n  format_args = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  temp_var_1 = temp_var_3 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  current_format = format_string;\n  do {\n    format_string = (int *******)((int)current_format + 1);\n    temp_var_3 = (uint)*(byte *)current_format;\n    pppppppiVar20 = (int *******)(temp_var_1 + (int)pppppppiVar20 * 10);\n    temp_var_1 = temp_var_3 - 0x30;\n    current_format = format_string;\n  } while (temp_var_1 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  temp_var_3 = (uint)*(byte *)format_string;\n  if (current_char == '\\0') {\n    current_char = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "parse_string_0008289c",
                "param_1": "input_string",
                "param_3": "format_string",
                "param_4": "args",
                "iVar8": "result",
                "cVar4": "sign_char",
                "bVar1": "is_long",
                "bVar2": "is_unsigned",
                "bVar3": "is_octal",
                "bVar5": "is_zero_padding",
                "ppppppppiVar6": "format_args",
                "piVar7": "integer_value",
                "iVar15": "iteration_counter",
                "cVar9": "temp_char",
                "pppppppiVar10": "current_format",
                "uVar11": "temp_var_1",
                "ppiVar12": "temp_pointer_1",
                "uVar13": "temp_var_2",
                "uVar14": "temp_var_3",
                "ppppppppiVar16": "format_arg",
                "iVar17": "temp_var_4",
                "uVar21": "temp_var_5",
                "iVar22": "temp_var_6",
                "pppppppiVar23": "temp_pointer_2",
                "uVar24": "temp_var_7",
                "ppppppppiVar25": "temp_format_arg",
                "bVar26": "is_negative",
                "lVar27": "long_long_value",
                "local_dc": "num_format_args",
                "local_d4": "max_num_args",
                "local_c8": "arg_pointers",
                "local_c4": "result_length",
                "local_c0": "hexadecimal_chars",
                "local_a1": "current_char",
                "local_a0": "specifier_repr",
                "local_9f": "hex_padding_char",
                "local_9c": "current_arg",
                "local_98": "num_args_processed",
                "local_94": "current_arg_ptr",
                "local_90": "temp_char_2",
                "local_64": "arg_storage_array"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int status;\n  undefined *buffer [2];\n  undefined4 bufferSize;\n  ushort flag;\n  undefined2 value;\n  undefined *ptrBuf;\n  undefined4 len1;\n  undefined4 len2;\n  undefined4 ptrVar1;\n  undefined4 ptrVar2;\n  undefined4 ptrVar3;\n  undefined stackBuffer [1024];\n  \n  ptrVar3 = *(undefined4 *)(param2 + 100);\n  ptrVar1 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  ptrVar2 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = stackBuffer;\n  flag = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  len1 = 0x400;\n  len2 = 0;\n  ptrBuf = buffer[0];\n  result = FUN_0008289c(param1,buffer);\n  if ((-1 < result) && (status = FUN_00083850(param1,buffer), status != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "status",
                "local_488": "buffer",
                "local_480": "bufferSize",
                "local_47c": "flag",
                "local_47a": "value",
                "local_478": "ptrBuf",
                "local_474": "len1",
                "local_470": "len2",
                "local_46c": "ptrVar1",
                "local_464": "ptrVar2",
                "local_424": "ptrVar3",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "decode_and_update_param_0008356c",
            "code": "\nundefined4 decode_and_update_param_0008356c(undefined4 *output_param,int *input_param)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  temp_var4 = *(ushort *)(input_param + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = input_param[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *output_param = 9;\n      *(ushort *)(input_param + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)input_param[0xc] != (int *)0x0) {\n        if ((int *)input_param[0xc] != input_param + 0x10) {\n          FUN_00083b10(output_param);\n          temp_var4 = *(ushort *)(input_param + 3);\n        }\n        input_param[0xc] = 0;\n      }\n      temp_var2 = input_param[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *input_param = temp_var2;\n      input_param[1] = 0;\n    }\n    else {\n      temp_var2 = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    FUN_00084018(output_param,input_param);\n    temp_var3 = (uint)*(ushort *)(input_param + 3);\n    temp_var2 = input_param[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = input_param[5];\n    }\n    input_param[2] = temp_var1;\n  }\n  else {\n    input_param[6] = -input_param[5];\n    input_param[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input_param + 3) << 0x18) < 0)) {\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "decode_and_update_param_0008356c",
                "param_1": "output_param",
                "param_2": "input_param",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_relocations_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeRelocations_000836ec(void)\n\n{\n  dword *relocationPointer;\n  dword relocationOffset;\n  int relocationIndex;\n  code *recoveryJumpTable;\n  \n  FUN_000841e4(6);\n  recoveryJumpTable = (code *)0x836fb;\n  relocationOffset = FUN_00080eec(1);\n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  relocationIndex = *(int *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationPointer = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < relocationIndex) {\n    relocationPointer = (dword *)FUN_000817f0(400);\n    if (relocationPointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*recoveryJumpTable)(0xffffffff);\n      return;\n    }\n    *relocationPointer = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationPointer[1] = 0;\n    relocationIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationPointer;\n    relocationPointer[0x62] = 0;\n    relocationPointer[99] = 0;\n  }\n  relocationPointer[1] = relocationIndex + 1;\n  relocationPointer[relocationIndex + 2] = relocationOffset;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*recoveryJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_relocations_000836ec",
                "pdVar1": "relocationPointer",
                "dVar2": "relocationOffset",
                "iVar3": "relocationIndex",
                "UNRECOVERED_JUMPTABLE_00": "recoveryJumpTable"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_000841e4",
                "FUN_00080eec",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *bufferPointer,int *dataPointer)\n\n{\n  int *tempPointer;\n  int initialValue;\n  ushort dataValue;\n  uint flag;\n  int offset;\n  code *callbackFunction;\n  undefined4 result;\n  int tempValue;\n  \n  if ((bufferPointer != (int *)0x0) && (bufferPointer[0xe] == 0)) {\n    FUN_00083888();\n  }\n  if (*(short *)(dataPointer + 3) == 0) {\n    return 0;\n  }\n  dataValue = *(ushort *)(dataPointer + 3);\n  if ((int)((uint)dataValue << 0x1c) < 0) {\n    tempValue = dataPointer[4];\n    if (tempValue == 0) {\n      return 0;\n    }\n    initialValue = *dataPointer;\n    if ((dataValue & 3) == 0) {\n      offset = dataPointer[5];\n    }\n    else {\n      offset = 0;\n    }\n    *dataPointer = tempValue;\n    initialValue = initialValue - tempValue;\n    dataPointer[2] = offset;\n    do {\n      if (initialValue < 1) {\n        return 0;\n      }\n      offset = (*(code *)dataPointer[9])(bufferPointer,dataPointer[7],tempValue,initialValue,result);\n      initialValue = initialValue - offset;\n      tempValue = tempValue + offset;\n    } while (0 < offset);\nLAB_000837c8:\n    *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(dataPointer + 3) = dataValue | 0x800;\n  if ((dataPointer[1] < 1) && (dataPointer[0xf] < 1)) {\n    return 0;\n  }\n  callbackFunction = (code *)dataPointer[10];\n  if (callbackFunction == (code *)0x0) {\n    return 0;\n  }\n  flag = (uint)(dataValue | 0x800);\n  tempValue = *bufferPointer;\n  *bufferPointer = 0;\n  if ((dataValue & 0x1000) == 0) {\n    initialValue = (*callbackFunction)(bufferPointer,dataPointer[7],flag & 0x1000,1);\n    if ((initialValue == -1) && (offset = *bufferPointer, offset != 0)) {\n      if ((offset == 0x1d) || (offset == 0x16)) {\n        *bufferPointer = tempValue;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    flag = (uint)*(ushort *)(dataPointer + 3);\n    callbackFunction = (code *)dataPointer[10];\n  }\n  else {\n    initialValue = dataPointer[0x14];\n  }\n  if (((int)(flag << 0x1d) < 0) && (initialValue = initialValue - dataPointer[1], dataPointer[0xc] != 0)) {\n    initialValue = initialValue - dataPointer[0xf];\n  }\n  initialValue = (*callbackFunction)(bufferPointer,dataPointer[7],initialValue,0);\n  if (initialValue == -1) {\n    offset = *bufferPointer;\n    if (offset != 0) {\n      if ((offset != 0x1d) && (offset != 0x16)) {\n        *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) & 0xf7ff;\n      *dataPointer = dataPointer[4];\n      dataPointer[1] = 0;\n      goto LAB_00083774;\n    }\n    dataValue = *(ushort *)(dataPointer + 3) & 0xf7ff;\n    dataPointer[1] = 0;\n    *(ushort *)(dataPointer + 3) = dataValue;\n    *dataPointer = dataPointer[4];\n  }\n  else {\n    dataValue = *(ushort *)(dataPointer + 3) & 0xf7ff;\n    *dataPointer = dataPointer[4];\n    *(ushort *)(dataPointer + 3) = dataValue;\n    dataPointer[1] = 0;\n  }\n  if ((int)((uint)dataValue << 0x13) < 0) {\n    dataPointer[0x14] = initialValue;\n  }\nLAB_00083774:\n  tempPointer = (int *)dataPointer[0xc];\n  *bufferPointer = tempValue;\n  if (tempPointer == (int *)0x0) {\n    return 0;\n  }\n  if (tempPointer != dataPointer + 0x10) {\n    FUN_00083b10(bufferPointer);\n  }\n  dataPointer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "bufferPointer",
                "param_2": "dataPointer",
                "piVar1": "tempPointer",
                "iVar2": "initialValue",
                "uVar3": "dataValue",
                "uVar4": "flag",
                "iVar5": "offset",
                "pcVar6": "callbackFunction",
                "unaff_r4": "result",
                "iVar7": "tempValue"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructAddr)\n\n{\n  undefined4 *dataStruct1;\n  undefined4 *dataStruct2;\n  \n  if (*(int *)(dataStructAddr + 0x38) == 0) {\n    dataStruct1 = *(undefined4 **)(dataStructAddr + 4);\n    *(undefined **)(dataStructAddr + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructAddr + 0x2e4) = 3;\n    *(int *)(dataStructAddr + 0x2e8) = dataStructAddr + 0x2ec;\n    *(undefined4 *)(dataStructAddr + 0x2e0) = 0;\n    *(undefined2 *)(dataStruct1 + 3) = 4;\n    *dataStruct1 = 0;\n    dataStruct1[1] = 0;\n    dataStruct1[2] = 0;\n    dataStruct1[0x19] = 0;\n    *(undefined2 *)((int)dataStruct1 + 0xe) = 0;\n    dataStruct1[4] = 0;\n    dataStruct1[5] = 0;\n    dataStruct1[6] = 0;\n    FUN_00081f00(dataStruct1 + 0x17,0,8);\n    dataStruct2 = *(undefined4 **)(dataStructAddr + 8);\n    dataStruct1[7] = dataStruct1;\n    dataStruct1[8] = 0x84221;\n    dataStruct1[9] = 0x84245;\n    dataStruct1[10] = 0x8427d;\n    dataStruct1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)dataStruct2 + 0xe) = 1;\n    *(undefined2 *)(dataStruct2 + 3) = 9;\n    *dataStruct2 = 0;\n    dataStruct2[1] = 0;\n    dataStruct2[2] = 0;\n    dataStruct2[0x19] = 0;\n    dataStruct2[4] = 0;\n    dataStruct2[5] = 0;\n    dataStruct2[6] = 0;\n    FUN_00081f00(dataStruct2 + 0x17,0,8);\n    dataStruct1 = *(undefined4 **)(dataStructAddr + 0xc);\n    dataStruct2[7] = dataStruct2;\n    dataStruct2[8] = 0x84221;\n    dataStruct2[9] = 0x84245;\n    dataStruct2[10] = 0x8427d;\n    dataStruct2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(dataStruct1 + 3) = 0x12;\n    *(undefined2 *)((int)dataStruct1 + 0xe) = 2;\n    *dataStruct1 = 0;\n    dataStruct1[1] = 0;\n    dataStruct1[2] = 0;\n    dataStruct1[0x19] = 0;\n    dataStruct1[4] = 0;\n    dataStruct1[5] = 0;\n    dataStruct1[6] = 0;\n    FUN_00081f00(dataStruct1 + 0x17,0,8);\n    dataStruct1[7] = dataStruct1;\n    dataStruct1[8] = 0x84221;\n    dataStruct1[9] = 0x84245;\n    dataStruct1[10] = 0x8427d;\n    dataStruct1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructAddr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructAddr",
                "puVar1": "dataStruct1",
                "puVar2": "dataStruct2"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint process_data_000839b4(undefined4 input_param,uint data_length,byte **data_buffer)\n\n{\n  int result;\n  uint flag;\n  uint current_byte;\n  byte *current_ptr;\n  uint counter;\n  byte temp_byte;\n  byte temp_buffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data_buffer + 3) << 0x12)) {\n    *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x2000;\n    data_buffer[0x19] = (byte *)((uint)data_buffer[0x19] | 0x2000);\n  }\n  result = FUN_0008400c();\n  if ((result == 1) && (data_length - 1 < 0xff)) {\n    current_byte = data_length & 0xff;\n    temp_byte = (byte)current_byte;\n    flag = 1;\n  }\n  else {\n    flag = FUN_0008434c(input_param,&temp_byte,data_length,data_buffer + 0x17);\n    if (flag == 0xffffffff) {\n      *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (flag == 0) {\n      return data_length;\n    }\n    current_byte = (uint)temp_byte;\n  }\n  counter = 0;\n  do {\n    current_ptr = data_buffer[2] + -1;\n    data_buffer[2] = current_ptr;\n    if ((int)current_ptr < 0) {\n      if ((int)data_buffer[6] <= (int)current_ptr) {\n        **data_buffer = (byte)current_byte;\n        current_ptr = *data_buffer;\n        current_byte = (uint)*current_ptr;\n        if (current_byte != 10) goto LAB_00083a04;\n      }\n      result = FUN_000842a4(input_param,current_byte,data_buffer);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data_buffer = (byte)current_byte;\n      current_ptr = *data_buffer;\nLAB_00083a04:\n      *data_buffer = current_ptr + 1;\n    }\n    if (flag <= counter + 1) {\n      return data_length;\n    }\n    current_byte = (uint)temp_buffer[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "input_param",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "iVar1": "result",
                "uVar2": "flag",
                "uVar3": "current_byte",
                "pbVar4": "current_ptr",
                "uVar5": "counter",
                "local_1c": "temp_byte",
                "abStack_1b": "temp_buffer"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008434c",
                "FUN_0008400c",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "relocate_and_update_00083a74",
            "code": "\nundefined4 relocateAndUpdate_00083a74(undefined4 data,int offset)\n\n{\n  int result;\n  uint relOffset;\n  int newOffset;\n  \n  FUNC_00081f94();\n  relOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((relOffset - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result = FUN_0008236c(data,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relOffset) {\n      result = FUN_0008236c(data,-newOffset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relOffset - newOffset | 1;\n        FUNC_00081f98(data);\n        return 1;\n      }\n      newOffset = FUN_0008236c(data,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "relocate_and_update_00083a74",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "relOffset",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "update_relocation_entry_00083b10",
            "code": "\nvoid updateRelocationEntry_00083b10(undefined4 context,int relOffset)\n\n{\n  int currentEntryOffset;\n  bool isCurrentEntrySpecial;\n  uint entryFlag;\n  dword currentEntry;\n  int nextEntryOffset;\n  uint nextEntryFlag;\n  dword nextEntry;\n  uint newNextEntryFlag;\n  dword prevEntry;\n  \n  if (relOffset == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  entryFlag = *(uint *)(relOffset + -4);\n  nextEntry = relOffset - 8;\n  nextEntryFlag = entryFlag & 0xfffffffe;\n  currentEntry = nextEntry + nextEntryFlag;\n  newNextEntryFlag = *(uint *)(currentEntry + 4) & 0xfffffffc;\n  if (relocationArray[141].r_info == currentEntry) {\n    newNextEntryFlag = newNextEntryFlag + nextEntryFlag;\n    if (-1 < (int)(entryFlag << 0x1f)) {\n      nextEntry = nextEntry - *(int *)(relOffset + -8);\n      nextEntryOffset = *(int *)(nextEntry + 0xc);\n      currentEntryOffset = *(int *)(nextEntry + 8);\n      newNextEntryFlag = newNextEntryFlag + *(int *)(relOffset + -8);\n      *(int *)(currentEntryOffset + 0xc) = nextEntryOffset;\n      *(int *)(nextEntryOffset + 8) = currentEntryOffset;\n    }\n    currentEntry = relocationArray[269].r_info;\n    *(uint *)(nextEntry + 4) = newNextEntryFlag | 1;\n    relocationArray[141].r_info = nextEntry;\n    if (currentEntry <= newNextEntryFlag) {\n      FUN_00083a74(context,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(currentEntry + 4) = newNextEntryFlag;\n    if ((entryFlag & 1) == 0) {\n      nextEntry = nextEntry - *(int *)(relOffset + -8);\n      currentEntryOffset = *(int *)(nextEntry + 8);\n      nextEntryFlag = nextEntryFlag + *(int *)(relOffset + -8);\n      if (currentEntryOffset == 0x2007046c) {\n        isCurrentEntrySpecial = true;\n      }\n      else {\n        nextEntryOffset = *(int *)(nextEntry + 0xc);\n        *(int *)(currentEntryOffset + 0xc) = nextEntryOffset;\n        *(int *)(nextEntryOffset + 8) = currentEntryOffset;\n        isCurrentEntrySpecial = false;\n      }\n    }\n    else {\n      isCurrentEntrySpecial = false;\n    }\n    if (-1 < *(int *)(currentEntry + newNextEntryFlag + 4) << 0x1f) {\n      nextEntryFlag = nextEntryFlag + newNextEntryFlag;\n      currentEntryOffset = *(int *)(currentEntry + 8);\n      if ((!isCurrentEntrySpecial) && (currentEntryOffset == 0x2007046c)) {\n        relocationArray[142].r_info = nextEntry;\n        relocationArray[143].r_offset = nextEntry;\n        *(undefined4 *)(nextEntry + 0xc) = 0x2007046c;\n        *(undefined4 *)(nextEntry + 8) = 0x2007046c;\n        *(uint *)(nextEntry + 4) = nextEntryFlag | 1;\n        *(uint *)(nextEntry + nextEntryFlag) = nextEntryFlag;\n        goto finishUpdate;\n      }\n      nextEntryOffset = *(int *)(currentEntry + 0xc);\n      *(int *)(currentEntryOffset + 0xc) = nextEntryOffset;\n      *(int *)(nextEntryOffset + 8) = currentEntryOffset;\n    }\n    *(uint *)(nextEntry + 4) = nextEntryFlag | 1;\n    *(uint *)(nextEntry + nextEntryFlag) = nextEntryFlag;\n    if (!isCurrentEntrySpecial) {\n      if (nextEntryFlag < 0x200) {\n        entryFlag = nextEntryFlag & 0xfffffff8;\n        currentEntryOffset = *(int *)((int)&relocationArray[0x8d].r_info + entryFlag);\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << ((int)(nextEntryFlag >> 3) >> 2 & 0xffU);\n        *(int *)(nextEntry + 8) = currentEntryOffset;\n        *(uint *)(nextEntry + 0xc) = entryFlag + 0x20070464;\n        *(dword *)((int)&relocationArray[0x8d].r_info + entryFlag) = nextEntry;\n        *(dword *)(currentEntryOffset + 0xc) = nextEntry;\n        FUNC_00081f98(context);\n        return;\n      }\n      entryFlag = nextEntryFlag >> 9;\n      if (entryFlag < 5) {\n        currentEntryOffset = (nextEntryFlag >> 6) + 0x38;\n        nextEntryOffset = currentEntryOffset * 2;\n      }\n      else if (entryFlag < 0x15) {\n        currentEntryOffset = entryFlag + 0x5b;\n        nextEntryOffset = currentEntryOffset * 2;\n      }\n      else if (entryFlag < 0x55) {\n        currentEntryOffset = (nextEntryFlag >> 0xc) + 0x6e;\n        nextEntryOffset = currentEntryOffset * 2;\n      }\n      else if (entryFlag < 0x155) {\n        currentEntryOffset = (nextEntryFlag >> 0xf) + 0x77;\n        nextEntryOffset = currentEntryOffset * 2;\n      }\n      else if (entryFlag < 0x555) {\n        currentEntryOffset = (nextEntryFlag >> 0x12) + 0x7c;\n        nextEntryOffset = currentEntryOffset * 2;\n      }\n      else {\n        nextEntryOffset = 0xfc;\n        currentEntryOffset = 0x7e;\n      }\n      prevEntry = nextEntryOffset * 4 + 0x20070464;\n      currentEntry = (&relocationArray[0x8d].r_info)[nextEntryOffset];\n      if (currentEntry == prevEntry) {\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << (currentEntryOffset >> 2 & 0xffU);\n        prevEntry = currentEntry;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentEntry + 4) & 0xfffffffc) <= nextEntryFlag) break;\n          currentEntry = *(dword *)(currentEntry + 8);\n        } while (prevEntry != currentEntry);\n        prevEntry = *(dword *)(currentEntry + 0xc);\n      }\n      *(dword *)(nextEntry + 0xc) = prevEntry;\n      *(dword *)(nextEntry + 8) = currentEntry;\n      *(dword *)(prevEntry + 8) = nextEntry;\n      *(dword *)(currentEntry + 0xc) = nextEntry;\n    }\n  }\nfinishUpdate:\n  FUNC_00081f98(context);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "update_relocation_entry_00083b10",
                "param_1": "context",
                "param_2": "relOffset",
                "iVar1": "currentEntryOffset",
                "bVar2": "isCurrentEntrySpecial",
                "uVar3": "entryFlag",
                "dVar4": "currentEntry",
                "iVar5": "nextEntryOffset",
                "uVar6": "nextEntryFlag",
                "dVar7": "nextEntry",
                "uVar8": "newNextEntryFlag",
                "dVar9": "prevEntry",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "LAB_00083ba4": "finishUpdate"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081800",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "decode_and_process_data_00083ca8",
            "code": "\nundefined4 decode_and_process_data_00083ca8(undefined4 *output_buffer,uint *input_buffer,uint **additional_parameters)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flags;\n  uint temp_value;\n  uint *pointer1;\n  uint *pointer2;\n  uint count;\n  uint size;\n  uint temp1;\n  uint temp2;\n  uint local_variable;\n  \n  if (additional_parameter_value != (uint *)0x0) {\n    flags = *(ushort *)(input_buffer + 3);\n    temp_value = (uint)flags;\n    if (((int)(temp_value << 0x1c) < 0) && (input_buffer[4] != 0)) {\n      pointer2 = *additional_parameters;\n    }\n    else {\n      result = FUN_0008356c(output_buffer,input_buffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(input_buffer + 3);\n      temp_value = (uint)flags;\n      pointer2 = *additional_parameters;\n    }\n    if ((flags & 2) == 0) {\n      value1 = temp_value & 2;\n      temp1 = value1;\n      count = value1;\n      local_variable = value1;\n      if ((temp_value & 1) == 0) {\n        value1 = 0;\n        temp1 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            temp1 = *pointer2;\n            pointer1 = pointer2 + 1;\n            pointer2 = pointer2 + 2;\n            value1 = *pointer1;\n          }\n          count = input_buffer[2];\n          if ((int)(temp_value << 0x16) < 0) {\n            if (value1 < count) {\n              temp_value = *input_buffer;\n              count = value1;\n            }\n            else if ((temp_value & 0x480) == 0) {\n              temp_value = *input_buffer;\n            }\n            else {\n              result = *input_buffer - input_buffer[4];\n              count = result + 1 + value1;\n              size = (int)(input_buffer[5] * 3) / 2;\n              if (count <= size) {\n                count = size;\n              }\n              if ((int)(temp_value << 0x15) < 0) {\n                size = FUN_00081810(output_buffer,count);\n                if (size == 0) {\n                  *output_buffer = 0xc;\n                  flags = *(ushort *)(input_buffer + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(size,input_buffer[4],result);\n                *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = FUN_00081fac(output_buffer);\n                if (size == 0) {\n                  FUN_00083b10(output_buffer,input_buffer[4]);\n                  flags = *(ushort *)(input_buffer + 3) & 0xff7f;\n                  *output_buffer = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp_value = size + result;\n              input_buffer[4] = size;\n              input_buffer[5] = count;\n              *input_buffer = temp_value;\n              input_buffer[2] = count - result;\n              count = value1;\n            }\n            FUN_00081e34(temp_value,temp1,count);\n            input_buffer[2] = input_buffer[2] - count;\n            *input_buffer = *input_buffer + count;\n            count = value1;\n          }\n          else if ((input_buffer[4] < *input_buffer) || (temp_value = input_buffer[5], value1 < temp_value)) {\n            if (value1 < count) {\n              count = value1;\n            }\n            FUN_00081e34(*input_buffer,temp1,count);\n            temp_value = input_buffer[2];\n            input_buffer[2] = temp_value - count;\n            *input_buffer = *input_buffer + count;\n            if ((temp_value - count == 0) && (result = FUN_00083850(output_buffer,input_buffer), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            count = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              count = value1;\n            }\n            count = (*(code *)input_buffer[9])(output_buffer,input_buffer[7],temp1,(count / temp_value) * temp_value);\n            if ((int)count < 1) goto LAB_00083da2;\n          }\n          pointer1 = additional_parameter_value;\n          temp1 = temp1 + count;\n          value1 = value1 - count;\n          additional_parameter_value = (uint *)((int)pointer1 - count);\n          if ((uint *)((int)pointer1 - count) == (uint *)0x0) break;\n          temp_value = (uint)*(ushort *)(input_buffer + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            count = *pointer2;\n            value1 = pointer2[1];\n            local_variable = 0;\n            pointer2 = pointer2 + 2;\n          }\n          if (local_variable == 0) {\n            result = FUN_000840f8(count,10,value1);\n            if (result == 0) {\n              temp1 = value1 + 1;\n              local_variable = 1;\n            }\n            else {\n              temp1 = (result + 1) - count;\n              local_variable = 1;\n            }\n          }\n          size = *input_buffer;\n          temp_value = temp1;\n          if (value1 <= temp1) {\n            temp_value = value1;\n          }\n          value2 = input_buffer[5];\n          if ((input_buffer[4] < size) && (temp2 = input_buffer[2] + value2, (int)temp2 < (int)temp_value)) {\n            FUN_00081e34(size,count,temp2);\n            *input_buffer = *input_buffer + temp2;\n            result = FUN_00083850(output_buffer,input_buffer);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp_value < (int)value2) {\n            FUN_00081e34(size,count,temp_value);\n            input_buffer[2] = input_buffer[2] - temp_value;\n            *input_buffer = temp_value + *input_buffer;\n            temp2 = temp_value;\n          }\n          else {\n            temp2 = (*(code *)input_buffer[9])(output_buffer,input_buffer[7],count,value2);\n            if ((int)temp2 < 1) goto LAB_00083da2;\n          }\n          temp1 = temp1 - temp2;\n          if (temp1 == 0) {\n            result = FUN_00083850(output_buffer,input_buffer);\n            if (result != 0) goto LAB_00083da2;\n            local_variable = 0;\n          }\n          pointer1 = additional_parameter_value;\n          count = count + temp2;\n          value1 = value1 - temp2;\n          additional_parameter_value = (uint *)((int)pointer1 - temp2);\n        } while ((uint *)((int)pointer1 - temp2) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      temp_value = 0;\n      do {\n        while( true ) {\n          temp1 = temp_value;\n          if (0x7ffffbff < temp_value) {\n            temp1 = 0x7ffffc00;\n          }\n          if (temp_value != 0) break;\n          value1 = *pointer2;\n          temp_value = pointer2[1];\n          pointer2 = pointer2 + 2;\n        }\n        result = (*(code *)input_buffer[9])(output_buffer,input_buffer[7],value1,temp1);\n        if (result < 1) {\nLAB_00083da2:\n          flags = *(ushort *)(input_buffer + 3);\nLAB_00083da4:\n          *(ushort *)(input_buffer + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        pointer1 = additional_parameter_value;\n        value1 = value1 + result;\n        temp_value = temp_value - result;\n        additional_parameter_value = (uint *)((int)pointer1 - result);\n      } while ((uint *)((int)pointer1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "decode_and_process_data_00083ca8",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "additional_parameters",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flags",
                "uVar5": "temp_value",
                "puVar6": "pointer1",
                "puVar7": "pointer2",
                "uVar8": "count",
                "uVar9": "size",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "local_2c": "local_variable",
                "param_3[2]": "additional_parameter_value"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nuint32_t getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf_rel_offset_0008400c",
            "code": "\ndword getElfRelOffset_0008400c(void)\n\n{\n  return elfRelArray[275].offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf_rel_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "check_and_set_flag_00084018",
            "code": "\nvoid checkAndSetFlag_00084018(int input,int *output)\n\n{\n  ushort flag1;\n  int flagValue;\n  int result;\n  uint flag2;\n  bool isConditionMet;\n  undefined tempBuffer [4];\n  uint localValue;\n  \n  flag1 = *(ushort *)(output + 3);\n  flag2 = (uint)flag1;\n  if ((int)(flag2 << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    flagValue = FUN_00084494(input,(int)*(short *)((int)output + 0xe),tempBuffer);\n    if (-1 < flagValue) {\n      isConditionMet = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (output[10] == 0x8427d)) {\n        flagValue = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        flagValue = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    flag1 = *(ushort *)(output + 3);\n    flag2 = (uint)flag1;\n  }\n  *(ushort *)(output + 3) = flag1 | 0x800;\n  if ((flag2 & 0x80) == 0) {\n    flagValue = 0x400;\n  }\n  else {\n    flagValue = 0x40;\n  }\n  isConditionMet = false;\nLAB_00084074:\n  result = FUN_00081810(input,flagValue);\n  flag1 = *(ushort *)(output + 3);\n  if (result == 0) {\n    if (-1 < (int)((uint)flag1 << 0x16)) {\n      *(ushort *)(output + 3) = flag1 | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(output + 3) = flag1 | 0x80;\n    *output = result;\n    output[4] = result;\n    output[5] = flagValue;\n    if ((isConditionMet) && (flagValue = FUN_000844bc(input,(int)*(short *)((int)output + 0xe)), flagValue != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "check_and_set_flag_00084018",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "flag1",
                "iVar2": "flagValue",
                "iVar3": "result",
                "uVar4": "flag2",
                "bVar5": "isConditionMet",
                "auStack_54": "tempBuffer",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00084494",
                "FUN_000844bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_last_occurrence_000840f8",
            "code": "\nuint * find_last_occurrence_000840f8(uint *input_array,char target_char,uint array_length)\n\n{\n  uint temp_result;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)input_array & 3) == 0) {\nLAB_00084128:\n    if (3 < array_length) {\n      current_ptr = input_array;\n      do {\n        temp_result = *current_ptr ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        input_array = current_ptr;\n        if ((temp_result + 0xfefefeff & ~temp_result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        input_array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else if (*(char *)input_array != target_char) {\n      index = 0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_00084150;\n      } while (*(char *)input_array != target_char);\n    }\n  }\n  else if (array_length == 0) {\nLAB_00084150:\n    input_array = (uint *)0x0;\n  }\n  else if (*(char *)input_array != target_char) {\n    current_ptr = (uint *)((int)input_array + 1);\n    array_length = array_length - 1;\n    do {\n      input_array = current_ptr;\n      if (((uint)input_array & 3) == 0) goto LAB_00084128;\n      if (array_length == 0) goto LAB_00084150;\n      current_ptr = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)input_array != target_char);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_last_occurrence_000840f8",
                "param_1": "input_array",
                "param_2": "target_char",
                "param_3": "array_length",
                "uVar1": "temp_result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_param_000841e4",
            "code": "\nint processParam_000841e4(uint param)\n\n{\n  dword dOffset;\n  undefined4 result;\n  int funcPtr;\n  code *function;\n  undefined4 reg4;\n  undefined4 reg5;\n  undefined4 linkReg;\n  undefined4 constant;\n  \n  dOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < param) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  funcPtr = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((funcPtr == 0) || (function = *(code **)(funcPtr + param * 4), function == (code *)0x0)) {\n    result = thunk_FUN_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    funcPtr = FUNC_00080efc(result,param,param,0,constant,reg4,reg5,linkReg);\n    if ((funcPtr == -1) && (DAT_20071244 != 0)) {\n      *(int *)dOffset = DAT_20071244;\n      return -1;\n    }\n    return funcPtr;\n  }\n  if (function == (code *)0x1) {\n    return 0;\n  }\n  if (function != (code *)0xffffffff) {\n    *(undefined4 *)(funcPtr + param * 4) = 0;\n    (*function)(param);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "process_param_000841e4",
                "param_1": "param",
                "dVar1": "dOffset",
                "uVar2": "result",
                "iVar3": "funcPtr",
                "pcVar4": "function",
                "unaff_r4": "reg4",
                "unaff_r5": "reg5",
                "in_lr": "linkReg",
                "uVar5": "constant"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_error_code_thunk_00080efe",
            "code": "\nundefined4 get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_value_00084220",
            "code": "\nvoid updateValue_00084220(undefined4 arg1,int arg2)\n\n{\n  int result;\n  \n  result = FUN_00084508(arg1,(int)*(short *)(arg2 + 0xe));\n  if (-1 < result) {\n    *(int *)(arg2 + 0x50) = *(int *)(arg2 + 0x50) + result;\n    return;\n  }\n  *(ushort *)(arg2 + 0xc) = *(ushort *)(arg2 + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_value_00084220",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "update_data_and_check_00084244",
            "code": "\nvoid updateDataAndCheck_00084244(int *outputArray,int inputArray,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  ushort ushortValue;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  \n  ushortValue = *(ushort *)(inputArray + 0xc);\n  if ((int)((uint)ushortValue << 0x17) < 0) {\n    FUN_000844e0(outputArray,(int)*(short *)(inputArray + 0xe),0,2);\n    ushortValue = *(ushort *)(inputArray + 0xc);\n  }\n  *(ushort *)(inputArray + 0xc) = ushortValue & 0xefff;\n  DAT_20071244 = 0;\n  result = FUN_00080ec8((int)*(short *)(inputArray + 0xe),param1,param2,param2,param3,param4,\n                       param5,param6);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputArray = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "update_data_and_check_00084244",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "uVar2": "ushortValue",
                "unaff_r4": "param3",
                "unaff_r5": "param4",
                "unaff_r6": "param5",
                "in_lr": "param6"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_status_0008427c",
            "code": "\nvoid updateStatus_0008427c(undefined4 param1,int param2)\n\n{\n  int status;\n  ushort updatedFlags;\n  \n  status = FUN_000844e0(param1,(int)*(short *)(param2 + 0xe));\n  if (status == -1) {\n    updatedFlags = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlags = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (status != -1) {\n    *(int *)(param2 + 0x50) = status;\n  }\n  *(ushort *)(param2 + 0xc) = updatedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_status_0008427c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "status",
                "uVar2": "updatedFlags"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint processData_000842a4(int count,uint data,undefined4 *buffer,undefined4 config)\n\n{\n  ushort value;\n  uint tempValue;\n  undefined *bytePointer;\n  int index;\n  \n  if ((count != 0) && (*(int *)(count + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  value = *(ushort *)(buffer + 3);\n  tempValue = (uint)value;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(tempValue << 0x1c)) || (index = buffer[4], index == 0)) {\n    index = FUN_0008356c(count,buffer,value,tempValue,config);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    value = *(ushort *)(buffer + 3);\n    index = buffer[4];\n    tempValue = (uint)value;\n  }\n  data = data & 0xff;\n  if ((int)(tempValue << 0x12) < 0) {\n    bytePointer = (undefined *)*buffer;\n    index = (int)bytePointer - index;\n    if (index < (int)buffer[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    bytePointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = value | 0x2000;\n    index = (int)bytePointer - index;\n    if (index < (int)buffer[5]) goto LAB_000842d6;\n  }\n  index = FUN_00083850(count,buffer);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  bytePointer = (undefined *)*buffer;\n  index = 1;\nLAB_000842d8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = bytePointer + 1;\n  *bytePointer = (char)data;\n  if (((buffer[5] == index) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (data == 10)))) &&\n     (index = FUN_00083850(count,buffer), index != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "count",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "config",
                "uVar1": "value",
                "uVar2": "tempValue",
                "puVar3": "bytePointer",
                "iVar4": "index"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_relocation_0008434c",
            "code": "\nvoid executeRelocation_0008434c(undefined4 *outputBuffer,int size,undefined4 paramValue,undefined4 *errorCode)\n\n{\n  dword relocationInfo;\n  undefined4 funResult;\n  int result;\n  undefined temporaryBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    funResult = FUN_00084004();\n    result = (*(code *)relocationInfo)(outputBuffer,temporaryBuffer,0,funResult,errorCode);\n  }\n  else {\n    funResult = FUN_00084004();\n    result = (*(code *)relocationInfo)(outputBuffer,size,paramValue,funResult,errorCode);\n  }\n  if (result == -1) {\n    *errorCode = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_relocation_0008434c",
                "param_1": "outputBuffer",
                "param_2": "size",
                "param_3": "paramValue",
                "param_4": "errorCode",
                "dVar1": "relocationInfo",
                "uVar2": "funResult",
                "iVar3": "result",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "set_byte_value_0008439c",
            "code": "\nundefined4 set_byte_value_0008439c(undefined4 *output,undefined *buffer,uint value)\n\n{\n  if (buffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (char)value;\n    return 1;\n  }\n  *output = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "set_byte_value_0008439c",
                "param_1": "output",
                "param_2": "buffer",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_param_00084484",
            "code": "\nundefined4 processParam_00084484(int param)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083888();\n    }\n    if (*(short *)(param + 0xc) != 0) {\n      result = FUN_00083850(offset,param);\n      if ((*(code **)(param + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(param + 0x2c))(offset,*(undefined4 *)(param + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(param + 0xc) << 0x18) < 0) {\n        FUN_00083b10(offset,*(undefined4 *)(param + 0x10));\n      }\n      if (*(int *)(param + 0x30) != 0) {\n        if (*(int *)(param + 0x30) != param + 0x40) {\n          FUN_00083b10(offset);\n        }\n        *(undefined4 *)(param + 0x30) = 0;\n      }\n      if (*(int *)(param + 0x44) != 0) {\n        FUN_00083b10(offset);\n        *(undefined4 *)(param + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(param + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_param_00084484",
                "param_1": "param",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "find_and_update_value_00084494",
            "code": "\nvoid findAndUpdateValue_00084494(int *outputValue,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eb0(inputValue1,inputValue2,inputValue2,0,inputValue3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "find_and_update_value_00084494",
                "param_1": "outputValue",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "process_data_000844bc",
            "code": "\nvoid processData_000844bc(int *result,undefined4 input)\n\n{\n  int status;\n  \n  DAT_20071244 = 0;\n  status = FUN_00080eba(input);\n  if ((status == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "process_data_000844bc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "status"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "process_data_000844e0",
            "code": "\nvoid processData_000844e0(int *outputValue,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080ebe(inputValue1,inputValue2,inputValue3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "process_data_000844e0",
                "param_1": "outputValue",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "extract_data_00084508",
            "code": "\nvoid extractData_00084508(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080ec2(input1,input2,input3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "extract_data_00084508",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_param_00084530",
            "code": "\nint checkParam_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_param_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculate_difference_0008455c(uint input_param,int another_param,undefined4 factor_low,undefined4 factor_high,int *output_array)\n\n{\n  uint result_low;\n  longlong result_high;\n  \n  result_high = FUN_000845c0();\n  result_high = result_high * CONCAT44(factor_high,factor_low);\n  result_low = (uint)result_high;\n  *output_array = input_param - result_low;\n  output_array[1] = (another_param - (int)((ulonglong)result_high >> 0x20)) - (uint)(input_param < result_low);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_param",
                "param_2": "another_param",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "output_array",
                "uVar1": "result_low",
                "lVar2": "result_high"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_values_0008458c",
            "code": "\nvoid subtractValues_0008458c(uint inputValue1,int inputValue2,undefined4 parameter3Value,undefined4 parameter4Value,int *outputValues)\n\n{\n  uint result;\n  longlong multiplicationResult;\n  \n  multiplicationResult = FUN_00084860();\n  multiplicationResult = multiplicationResult * CONCAT44(parameter4Value,parameter3Value);\n  result = (uint)multiplicationResult;\n  *outputValues = inputValue1 - result;\n  outputValues[1] = (inputValue2 - (int)((ulonglong)multiplicationResult >> 0x20)) - (uint)(inputValue1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_values_0008458c",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "parameter3Value",
                "param_4": "parameter4Value",
                "param_5": "outputValues",
                "uVar1": "result",
                "lVar2": "multiplicationResult"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "perform_division_000845c0",
            "code": "\nundefined8 performDivision_000845c0(uint dividend,uint dividend_sign,uint divisor,uint divisor_sign)\n\n{\n  longlong quotient;\n  uint quotient_lower;\n  uint quotient_upper;\n  uint divisor_lower;\n  uint divisor_upper;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint negative_mask;\n  uint quotient_sign;\n  uint remainder_lower;\n  uint remainder_upper;\n  bool borrow_flag;\n  \n  if ((int)dividend_sign < 0) {\n    borrow_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_sign = -dividend_sign - (uint)borrow_flag;\n    negative_mask = 0xffffffff;\n  }\n  else {\n    negative_mask = 0;\n  }\n  if ((int)divisor_sign < 0) {\n    negative_mask = ~negative_mask;\n    borrow_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_sign = -divisor_sign - (uint)borrow_flag;\n  }\n  if (divisor_sign == 0) {\n    if (dividend_sign < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_upper = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_sign = dividend_sign << shift_amount | quotient_upper;\n      }\n      quotient_lower = divisor >> 0x10;\n      divisor_lower = dividend_sign / quotient_lower;\n      temp1 = (divisor & 0xffff) * divisor_lower;\n      quotient_sign = dividend >> 0x10 | (dividend_sign - quotient_lower * divisor_lower) * 0x10000;\n      quotient_upper = divisor_lower;\n      if (quotient_sign <= temp1 && temp1 - quotient_sign != 0) {\n        borrow_flag = CARRY4(quotient_sign,divisor);\n        quotient_sign = quotient_sign + divisor;\n        quotient_upper = divisor_lower - 1;\n        if ((borrow_flag == false) && (quotient_sign <= temp1 && temp1 - quotient_sign != 0)) {\n          quotient_upper = divisor_lower - 2;\n          quotient_sign = quotient_sign + divisor;\n        }\n      }\n      temp2 = (quotient_sign - temp1) / quotient_lower;\n      divisor_lower = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((quotient_sign - temp1) - quotient_lower * temp2) * 0x10000;\n      quotient_lower = temp2;\n      if (temp1 <= divisor_lower && divisor_lower - temp1 != 0) {\n        quotient_lower = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= divisor_lower && divisor_lower - (temp1 + divisor) != 0)) {\n          quotient_lower = temp2 - 2;\n        }\n      }\n      quotient_lower = quotient_lower | quotient_upper << 0x10;\n      quotient_upper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_sign = dividend_sign - divisor;\n        divisor_lower = divisor >> 0x10;\n        remainder_upper = divisor & 0xffff;\n        quotient_upper = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_upper = dividend_sign >> (0x20U - shift_amount & 0xff);\n        divisor_lower = divisor >> 0x10;\n        quotient_sign = quotient_upper / divisor_lower;\n        remainder_upper = divisor & 0xffff;\n        temp1 = remainder_upper * quotient_sign;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_sign << shift_amount;\n        quotient_upper = temp2 >> 0x10 | (quotient_upper - divisor_lower * quotient_sign) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_lower = quotient_sign;\n        if (quotient_upper <= temp1 && temp1 - quotient_upper != 0) {\n          borrow_flag = CARRY4(quotient_upper,divisor);\n          quotient_upper = quotient_upper + divisor;\n          quotient_lower = quotient_sign - 1;\n          if ((borrow_flag == false) && (quotient_upper <= temp1 && temp1 - quotient_upper != 0)) {\n            quotient_lower = quotient_sign - 2;\n            quotient_upper = quotient_upper + divisor;\n          }\n        }\n        divisor_upper = (quotient_upper - temp1) / divisor_lower;\n        quotient_sign = remainder_upper * divisor_upper;\n        dividend_sign = temp2 & 0xffff | ((quotient_upper - temp1) - divisor_lower * divisor_upper) * 0x10000;\n        quotient_upper = divisor_upper;\n        if (dividend_sign <= quotient_sign && quotient_sign - dividend_sign != 0) {\n          borrow_flag = CARRY4(dividend_sign,divisor);\n          dividend_sign = dividend_sign + divisor;\n          quotient_upper = divisor_upper - 1;\n          if ((borrow_flag == false) && (dividend_sign <= quotient_sign && quotient_sign - dividend_sign != 0)) {\n            quotient_upper = divisor_upper - 2;\n            dividend_sign = dividend_sign + divisor;\n          }\n        }\n        dividend_sign = dividend_sign - quotient_sign;\n        quotient_upper = quotient_upper | quotient_lower << 0x10;\n      }\n      quotient_lower = dividend_sign / divisor_lower;\n      quotient_sign = remainder_upper * quotient_lower;\n      temp2 = dividend >> 0x10 | (dividend_sign - divisor_lower * quotient_lower) * 0x10000;\n      temp1 = quotient_lower;\n      if (temp2 <= quotient_sign && quotient_sign - temp2 != 0) {\n        borrow_flag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient_lower - 1;\n        if ((borrow_flag == false) && (temp2 <= quotient_sign && quotient_sign - temp2 != 0)) {\n          temp1 = quotient_lower - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      divisor_upper = (temp2 - quotient_sign) / divisor_lower;\n      remainder_upper = remainder_upper * divisor_upper;\n      divisor_lower = dividend & 0xffff | ((temp2 - quotient_sign) - divisor_lower * divisor_upper) * 0x10000;\n      quotient_lower = divisor_upper;\n      if (divisor_lower <= remainder_upper && remainder_upper - divisor_lower != 0) {\n        quotient_lower = divisor_upper - 1;\n        if ((CARRY4(divisor_lower,divisor) == false) &&\n           (divisor_lower + divisor <= remainder_upper && remainder_upper - (divisor_lower + divisor) != 0)) {\n          quotient_lower = divisor_upper - 2;\n        }\n      }\n      quotient_lower = quotient_lower | temp1 << 0x10;\n    }\n  }\n  else if (dividend_sign < divisor_sign) {\n    quotient_upper = 0;\n    quotient_lower = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_sign);\n    if (shift_amount == 0) {\n      if ((divisor_sign < dividend_sign) || (divisor <= dividend)) {\n        quotient_upper = 0;\n        quotient_lower = 1;\n      }\n      else {\n        quotient_lower = 0;\n        quotient_upper = 0;\n      }\n    }\n    else {\n      quotient_upper = 0x20 - shift_amount;\n      divisor_lower = dividend_sign >> (quotient_upper & 0xff);\n      remainder_upper = divisor >> (quotient_upper & 0xff) | divisor_sign << shift_amount;\n      quotient_sign = remainder_upper >> 0x10;\n      quotient_lower = divisor_lower / quotient_sign;\n      temp2 = (remainder_upper & 0xffff) * quotient_lower;\n      temp1 = dividend_sign << shift_amount | dividend >> (quotient_upper & 0xff);\n      divisor_lower = temp1 >> 0x10 | (divisor_lower - quotient_sign * quotient_lower) * 0x10000;\n      quotient_upper = quotient_lower;\n      if (divisor_lower <= temp2 && temp2 - divisor_lower != 0) {\n        borrow_flag = CARRY4(divisor_lower,remainder_upper);\n        divisor_lower = divisor_lower + remainder_upper;\n        quotient_upper = quotient_lower - 1;\n        if ((borrow_flag == false) && (divisor_lower <= temp2 && temp2 - divisor_lower != 0)) {\n          quotient_upper = quotient_lower - 2;\n          divisor_lower = divisor_lower + remainder_upper;\n        }\n      }\n      divisor_upper = (divisor_lower - temp2) / quotient_sign;\n      remainder_lower = (remainder_upper & 0xffff) * divisor_upper;\n      divisor_lower = temp1 & 0xffff | ((divisor_lower - temp2) - quotient_sign * divisor_upper) * 0x10000;\n      quotient_lower = divisor_upper;\n      if (divisor_lower <= remainder_lower && remainder_lower - divisor_lower != 0) {\n        borrow_flag = CARRY4(divisor_lower,remainder_upper);\n        divisor_lower = divisor_lower + remainder_upper;\n        quotient_lower = divisor_upper - 1;\n        if ((borrow_flag == false) && (divisor_lower <= remainder_lower && remainder_lower - divisor_lower != 0)) {\n          quotient_lower = divisor_upper - 2;\n          divisor_lower = divisor_lower + remainder_upper;\n        }\n      }\n      quotient_lower = quotient_lower | quotient_upper << 0x10;\n      quotient = (ulonglong)quotient_lower * (ulonglong)(divisor << shift_amount);\n      temp1 = (uint)((ulonglong)quotient >> 0x20);\n      quotient_upper = 0;\n      if ((divisor_lower - remainder_lower < temp1) ||\n         ((divisor_lower - remainder_lower == temp1 && (dividend << shift_amount < (uint)quotient)))) {\n        quotient_lower = quotient_lower - 1;\n        quotient_upper = 0;\n      }\n    }\n  }\n  if (negative_mask != 0) {\n    borrow_flag = quotient_lower != 0;\n    quotient_lower = -quotient_lower;\n    quotient_upper = -quotient_upper - (uint)borrow_flag;\n  }\n  return CONCAT44(quotient_upper,quotient_lower);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "perform_division_000845c0",
                "param_1": "dividend",
                "param_2": "dividend_sign",
                "param_3": "divisor",
                "param_4": "divisor_sign",
                "lVar1": "quotient",
                "uVar2": "quotient_lower",
                "uVar3": "quotient_upper",
                "uVar4": "divisor_lower",
                "uVar5": "divisor_upper",
                "iVar6": "shift_amount",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "negative_mask",
                "uVar10": "quotient_sign",
                "uVar11": "remainder_lower",
                "uVar12": "remainder_upper",
                "bVar13": "borrow_flag"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "divide_and_modulus_00084860",
            "code": "\nulonglong divideAndModulus_00084860(uint dividend,uint dividendHigh,uint divisor,uint divisorHigh)\n\n{\n  longlong result;\n  uint quotient;\n  uint quotientHigh;\n  uint temp;\n  uint product;\n  uint remainder;\n  uint quotientTemp;\n  uint quotientTempHigh;\n  uint remainderTemp;\n  int shiftAmount;\n  bool carryFlag;\n  \n  if (divisorHigh == 0) {\n    if (divisor <= dividendHigh) {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendHigh = dividendHigh - divisor;\n        quotientHigh = divisor >> 0x10;\n        product = divisor & 0xffff;\n        quotient = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        quotientTempHigh = dividendHigh >> (0x20U - shiftAmount & 0xff);\n        quotientHigh = divisor >> 0x10;\n        remainderTemp = quotientTempHigh / quotientHigh;\n        product = divisor & 0xffff;\n        quotient = product * remainderTemp;\n        remainder = dividend >> (0x20U - shiftAmount & 0xff) | dividendHigh << shiftAmount;\n        temp = remainder >> 0x10 | (quotientTempHigh - quotientHigh * remainderTemp) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotientTempHigh = remainderTemp;\n        if (temp <= quotient && quotient - temp != 0) {\n          carryFlag = CARRY4(temp,divisor);\n          temp = temp + divisor;\n          quotientTempHigh = remainderTemp - 1;\n          if ((carryFlag == false) && (temp <= quotient && quotient - temp != 0)) {\n            quotientTempHigh = remainderTemp - 2;\n            temp = temp + divisor;\n          }\n        }\n        quotientTemp = (temp - quotient) / quotientHigh;\n        remainderTemp = product * quotientTemp;\n        dividendHigh = remainder & 0xffff | ((temp - quotient) - quotientHigh * quotientTemp) * 0x10000;\n        quotient = quotientTemp;\n        if (dividendHigh <= remainderTemp && remainderTemp - dividendHigh != 0) {\n          carryFlag = CARRY4(dividendHigh,divisor);\n          dividendHigh = dividendHigh + divisor;\n          quotient = quotientTemp - 1;\n          if ((carryFlag == false) && (dividendHigh <= remainderTemp && remainderTemp - dividendHigh != 0)) {\n            quotient = quotientTemp - 2;\n            dividendHigh = dividendHigh + divisor;\n          }\n        }\n        dividendHigh = dividendHigh - remainderTemp;\n        quotient = quotient | quotientTempHigh << 0x10;\n      }\n      remainderTemp = dividendHigh / quotientHigh;\n      temp = product * remainderTemp;\n      remainder = dividend >> 0x10 | (dividendHigh - quotientHigh * remainderTemp) * 0x10000;\n      quotientTempHigh = remainderTemp;\n      if (remainder <= temp && temp - remainder != 0) {\n        carryFlag = CARRY4(remainder,divisor);\n        remainder = remainder + divisor;\n        quotientTempHigh = remainderTemp - 1;\n        if ((carryFlag == false) && (remainder <= temp && temp - remainder != 0)) {\n          quotientTempHigh = remainderTemp - 2;\n          remainder = remainder + divisor;\n        }\n      }\n      remainderTemp = (remainder - temp) / quotientHigh;\n      product = product * remainderTemp;\n      remainder = dividend & 0xffff | ((remainder - temp) - quotientHigh * remainderTemp) * 0x10000;\n      quotientHigh = remainderTemp;\n      if (remainder <= product && product - remainder != 0) {\n        quotientHigh = remainderTemp - 1;\n        if ((CARRY4(remainder,divisor) == false) &&\n           (remainder + divisor <= product && product - (remainder + divisor) != 0)) {\n          quotientHigh = remainderTemp - 2;\n        }\n      }\n      return CONCAT44(quotient,quotientHigh | quotientTempHigh << 0x10);\n    }\n    shiftAmount = LZCOUNT(divisor);\n    if (shiftAmount != 0) {\n      quotientTempHigh = dividend >> (0x20U - shiftAmount & 0xff);\n      divisor = divisor << shiftAmount;\n      dividend = dividend << shiftAmount;\n      dividendHigh = quotientTempHigh | dividendHigh << shiftAmount;\n    }\n    quotient = divisor >> 0x10;\n    quotientHigh = dividendHigh / quotient;\n    product = (divisor & 0xffff) * quotientHigh;\n    remainderTemp = dividend >> 0x10 | (dividendHigh - quotient * quotientHigh) * 0x10000;\n    quotientTempHigh = quotientHigh;\n    if (remainderTemp <= product && product - remainderTemp != 0) {\n      carryFlag = CARRY4(remainderTemp,divisor);\n      remainderTemp = remainderTemp + divisor;\n      quotientTempHigh = quotientHigh - 1;\n      if ((carryFlag == false) && (remainderTemp <= product && product - remainderTemp != 0)) {\n        quotientTempHigh = quotientHigh - 2;\n        remainderTemp = remainderTemp + divisor;\n      }\n    }\n    remainder = (remainderTemp - product) / quotient;\n    quotientHigh = (divisor & 0xffff) * remainder;\n    product = dividend & 0xffff | ((remainderTemp - product) - quotient * remainder) * 0x10000;\n    quotient = remainder;\n    if (product <= quotientHigh && quotientHigh - product != 0) {\n      quotient = remainder - 1;\n      if ((CARRY4(product,divisor) == false) &&\n         (product + divisor <= quotientHigh && quotientHigh - (product + divisor) != 0)) {\n        quotient = remainder - 2;\n      }\n    }\n    quotient = quotient | quotientTempHigh << 0x10;\n  }\n  else {\n    if (dividendHigh < divisorHigh) {\n      return 0;\n    }\n    shiftAmount = LZCOUNT(divisorHigh);\n    if (shiftAmount == 0) {\n      if ((divisorHigh < dividendHigh) || (divisor <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shiftAmount;\n      quotientTempHigh = dividendHigh >> (quotient & 0xff);\n      quotientHigh = divisorHigh << shiftAmount | divisor >> (quotient & 0xff);\n      product = quotientHigh >> 0x10;\n      temp = quotientTempHigh / product;\n      remainderTemp = (quotientHigh & 0xffff) * temp;\n      remainder = dividend >> (quotient & 0xff) | dividendHigh << shiftAmount;\n      quotient = remainder >> 0x10 | (quotientTempHigh - product * temp) * 0x10000;\n      quotientTempHigh = temp;\n      if (quotient <= remainderTemp && remainderTemp - quotient != 0) {\n        carryFlag = CARRY4(quotient,quotientHigh);\n        quotient = quotient + quotientHigh;\n        quotientTempHigh = temp - 1;\n        if ((carryFlag == false) && (quotient <= remainderTemp && remainderTemp - quotient != 0)) {\n          quotientTempHigh = temp - 2;\n          quotient = quotient + quotientHigh;\n        }\n      }\n      temp = (quotient - remainderTemp) / product;\n      quotientTemp = (quotientHigh & 0xffff) * temp;\n      product = remainder & 0xffff | ((quotient - remainderTemp) - product * temp) * 0x10000;\n      quotient = temp;\n      if (product <= quotientTemp && quotientTemp - product != 0) {\n        carryFlag = CARRY4(product,quotientHigh);\n        product = product + quotientHigh;\n        quotient = temp - 1;\n        if ((carryFlag == false) && (product <= quotientTemp && quotientTemp - product != 0)) {\n          quotient = temp - 2;\n          product = product + quotientHigh;\n        }\n      }\n      quotient = quotient | quotientTempHigh << 0x10;\n      result = (ulonglong)quotient * (ulonglong)(divisor << shiftAmount);\n      quotientTempHigh = (uint)((ulonglong)result >> 0x20);\n      if ((product - quotientTemp < quotientTempHigh) || ((product - quotientTemp == quotientTempHigh && (dividend << shiftAmount < (uint)result)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084860": "divide_and_modulus_00084860",
                "param_1": "dividend",
                "param_2": "dividendHigh",
                "param_3": "divisor",
                "param_4": "divisorHigh",
                "lVar1": "result",
                "uVar2": "quotient",
                "uVar3": "quotientHigh",
                "uVar4": "temp",
                "uVar5": "product",
                "uVar6": "remainder",
                "uVar7": "quotientTemp",
                "uVar8": "quotientTempHigh",
                "uVar9": "remainderTemp",
                "iVar10": "shiftAmount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 105885,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "thunk_FUN_00080efe",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ]
    ],
    "locked_functions": []
}