{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_uart_stdio_00000410",
            "code": "\nvoid initialize_uart_stdio_00000410(void)\n\n{\n  initialize_uart_stdio_00000410();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_uart_stdio_00000410",
                "uart_stdio_init": "initialize_uart_stdio"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "uart_stdio_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_elf_relocation_00000428",
            "code": "\ndword validate_elf_relocation_00000428(undefined4 *result_code,int relocation_offset)\n\n{\n  undefined4 irq_state;\n  dword original_offset;\n  \n  irq_state = irq_disable();\n  original_offset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((relocation_offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < relocation_offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = relocation_offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *result_code = 0xc;\n    original_offset = 0xffffffff;\n  }\n  irq_restore(irq_state);\n  return original_offset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_elf_relocation_00000428",
                "param_1": "result_code",
                "param_2": "relocation_offset",
                "uVar1": "irq_state",
                "local_c": "original_offset"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "irq_restore",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "read_uart_input_00000490",
            "code": "\nundefined4 read_uart_input_00000490(undefined4 param1,undefined4 param2,undefined4 input_buffer,undefined4 buffer_size)\n\n{\n  undefined4 read_result;\n  \n  read_result = uart_stdio_read(input_buffer,buffer_size);\n  return read_result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "read_uart_input_00000490",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "input_buffer",
                "param_4": "buffer_size",
                "uVar1": "read_result"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "uart_stdio_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "set_variable_to_19_000004f2",
            "code": "\nundefined4 set_variable_to_19_000004f2(undefined4 *output)\n\n{\n  *output = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "set_variable_to_19_000004f2",
                "param_1": "output"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_param_00000514",
            "code": "\nundefined4 initializeParam_00000514(undefined4 *outputParam)\n\n{\n  *outputParam = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_param_00000514",
                "param_1": "outputParam"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_param_value_00000534",
            "code": "\nundefined4 checkParamValue_00000534(undefined4 *result,int value)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((value == 0) || (value == 1)) || (value == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_param_value_00000534",
                "param_1": "result",
                "param_2": "value",
                "uVar1": "isValid"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "byte_to_bits_00000566",
            "code": "\nint byteToBits_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "byte_to_bits_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "sched_run"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *pointer,undefined4 *data)\n\n{\n  if (*pointer == 0) {\n    *data = data;\n  }\n  else {\n    *data = *(undefined4 *)*pointer;\n    *(undefined4 **)*pointer = data;\n  }\n  *pointer = (int)data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "pointer",
                "param_2": "data"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_000005ca",
            "code": "\nundefined4 * extractValue_000005ca(int *input)\n\n{\n  undefined4 *output;\n  \n  if (*input == 0) {\n    output = (undefined4 *)0x0;\n  }\n  else {\n    output = *(undefined4 **)*input;\n    if (output == (undefined4 *)*input) {\n      *input = 0;\n    }\n    else {\n      *(undefined4 *)*input = *output;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_000005ca",
                "param_1": "input",
                "puVar1": "output"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "process_data_00000610",
            "code": "\nundefined4 processData_00000610(void)\n\n{\n  int ptr1;\n  int ptr2;\n  undefined4 returnValue;\n  \n  ptr1 = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  ptr2 = bitarithm_lsb(DAT_1fff0424);\n  ptr2 = **(int **)(&DAT_1fff03e4 + ptr2 * 4);\n  if (ptr1 == ptr2 + -8) {\n    returnValue = 0;\n  }\n  else {\n    if ((ptr1 != 0) && (*(char *)(ptr1 + 4) == '\\t')) {\n      *(undefined *)(ptr1 + 4) = 10;\n    }\n    *(undefined *)(ptr2 + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(ptr2 + -2);\n    returnValue = 1;\n    DAT_1fff03dc = ptr2 + -8;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00000610": "process_data_00000610",
                "iVar1": "ptr1",
                "iVar2": "ptr2",
                "uVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "bitarithm_lsb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_item_list_00000698",
            "code": "\nvoid updateItemList_00000698(int itemList,uint newItemCount)\n\n{\n  if (newItemCount < 9) {\n    if ((8 < *(byte *)(itemList + 4)) &&\n       (clist_lpop(&DAT_1fff03e4 + (uint)*(byte *)(itemList + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(itemList + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(itemList + 5));\n    }\n  }\n  else if (*(byte *)(itemList + 4) < 9) {\n    clist_rpush(&DAT_1fff03e4 + (uint)*(byte *)(itemList + 5) * 4,itemList + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(itemList + 5);\n  }\n  *(char *)(itemList + 4) = (char)newItemCount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_item_list_00000698",
                "param_1": "itemList",
                "param_2": "newItemCount"
            },
            "calling": [
                "thread_create",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [
                "clist_rpush",
                "clist_lpop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_handle_irq_00000738",
            "code": "\nvoid checkAndHandleIRQ_00000738(ushort inputValue)\n\n{\n  int iVar1;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    iVar1 = irq_is_in();\n    if (iVar1 == 0) {\n      thread_yield_higher();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_handle_irq_00000738",
                "param_1": "inputValue"
            },
            "calling": [
                "thread_create",
                "mutex_unlock"
            ],
            "called": [
                "irq_is_in",
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_memory_00000794",
            "code": "\nint * initializeMemory_00000794(void)\n\n{\n  int result;\n  int counter;\n  undefined4 *pointer;\n  uint alignedAddress;\n  int outerLoopCounter;\n  int innerLoopCounter;\n  int *stackPointer;\n  \n  irq_disable();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  sched_set_status(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  cpu_switch_context_exit();\n  alignedAddress = (int)pointer + counter & 0xfffffffc;\n  stackPointer = (int *)(alignedAddress - 4);\n  *stackPointer = 0x77777777;\n  if (((uint)stackPointer & 7) != 0) {\n    stackPointer = (int *)(alignedAddress - 8);\n    *stackPointer = 0x88888888;\n  }\n  stackPointer[-1] = 0x1000000;\n  stackPointer[-2] = counter << 0xd;\n  stackPointer[-3] = 0x795;\n  stackPointer = stackPointer + -4;\n  *stackPointer = 0;\n  for (innerLoopCounter = 3; 0 < innerLoopCounter; innerLoopCounter = innerLoopCounter + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = innerLoopCounter;\n  }\n  stackPointer = stackPointer + -1;\n  *stackPointer = result;\n  for (outerLoopCounter = 0xb; 3 < outerLoopCounter; outerLoopCounter = outerLoopCounter + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = outerLoopCounter;\n  }\n  stackPointer[-1] = -3;\n  return stackPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_memory_00000794",
                "extraout_r1": "result",
                "iVar1": "counter",
                "puVar2": "pointer",
                "uVar3": "alignedAddress",
                "iStack_1c": "outerLoopCounter",
                "iStack_18": "innerLoopCounter",
                "piStack_14": "stackPointer"
            },
            "calling": [],
            "called": [
                "sched_set_status",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param,int value,int offset,int size)\n\n{\n  uint alignedSize;\n  int i;\n  int j;\n  int *memPtr;\n  \n  alignedSize = size + offset & 0xfffffffc;\n  memPtr = (int *)(alignedSize - 4);\n  *memPtr = 0x77777777;\n  if (((uint)memPtr & 7) != 0) {\n    memPtr = (int *)(alignedSize - 8);\n    *memPtr = 0x88888888;\n  }\n  memPtr[-1] = 0x1000000;\n  memPtr[-2] = param;\n  memPtr[-3] = 0x795;\n  memPtr = memPtr + -4;\n  *memPtr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    memPtr = memPtr + -1;\n    *memPtr = j;\n  }\n  memPtr = memPtr + -1;\n  *memPtr = value;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    memPtr = memPtr + -1;\n    *memPtr = i;\n  }\n  memPtr[-1] = -3;\n  return memPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param",
                "param_2": "value",
                "param_3": "offset",
                "param_4": "size",
                "uVar1": "alignedSize",
                "local_14": "i",
                "local_10": "j",
                "local_c": "memPtr"
            },
            "calling": [
                "thread_create"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "get_reloc_offset_000008b8",
            "code": "\nint get_reloc_offset_000008b8(void)\n\n{\n  RelocationEntry *rel_entry;\n  \n  for (rel_entry = (RelocationEntry *)&DAT_1fff0000;\n      (rel_entry->r_offset == 0xe7fee7fe && (rel_entry < end_of_reloc_array));\n      rel_entry = (RelocationEntry *)&rel_entry->r_info) {\n  }\n  return ((int)end_of_reloc_array - (int)rel_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "get_reloc_offset_000008b8",
                "local_c": "rel_entry",
                "Elf32_Rel": "RelocationEntry",
                "Elf32_Rel_ARRAY_1fff0200": "end_of_reloc_array"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_stack_pointer_00000900",
            "code": "\nundefined4 getStackPointer_00000900(void)\n\n{\n  undefined4 stackPointer;\n  \n  stackPointer = getMainStackPointer();\n  return stackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_stack_pointer_00000900",
                "uVar1": "stackPointer"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nundefined4 getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "enable_irq_and_trigger_interrupt_00000930",
            "code": "\nvoid enable_irq_and_trigger_interrupt_00000930(void)\n\n{\n  enable_irq();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "enable_irq_and_trigger_interrupt_00000930",
                "irq_enable": "enable_irq",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "kernel_init",
                "sched_task_exit"
            ],
            "called": [
                "irq_enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_e000_ed04_bit_0000093c",
            "code": "\n\n\nvoid setE000ED04Bit_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_e000_ed04_bit_0000093c"
            },
            "calling": [
                "cortexm_isr_end",
                "FUN_00001cf0",
                "_mutex_lock",
                "sched_switch",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000099c": {
            "entrypoint": "0x0000099c",
            "current_name": "initialize_system_0000099c",
            "code": "\nvoid initialize_system_0000099c(void)\n\n{\n  undefined4 temp_var;\n  undefined4 *temp_ptr;\n  dword *data_ptr;\n  Elf32_Rel *rel_ptr;\n  \n  temp_ptr = &temp_var;\n  data_ptr = (dword *)&DAT_00007c60;\n  pre_startup();\n  rel_ptr = (Elf32_Rel *)&DAT_1fff0000;\n  while (rel_ptr < &temp_var) {\n    rel_ptr->r_offset = 0xe7fee7fe;\n    rel_ptr = (Elf32_Rel *)((int)rel_ptr + 4);\n  }\n  rel_ptr = Elf32_Rel_ARRAY_1fff0200;\n  while (rel_ptr < (Elf32_Rel *)&DAT_1fff0350) {\n    rel_ptr->r_offset = *data_ptr;\n    data_ptr = data_ptr + 1;\n    rel_ptr = (Elf32_Rel *)&rel_ptr->r_info;\n  }\n  rel_ptr = (Elf32_Rel *)&DAT_1fff0350;\n  while (rel_ptr < (undefined4 *)0x1fff0df0) {\n    rel_ptr->r_offset = 0;\n    rel_ptr = (Elf32_Rel *)((int)rel_ptr + 4);\n  }\n  post_startup();\n  board_init();\n  __libc_init_array();\n  kernel_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000099c": "initialize_system_0000099c",
                "uStack_18": "temp_var",
                "local_14": "temp_ptr",
                "local_10": "data_ptr",
                "local_c": "rel_ptr"
            },
            "calling": [],
            "called": [
                "kernel_init",
                "board_init",
                "post_startup",
                "pre_startup",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_exception_00000a30",
            "code": "\nundefined * handle_nmi_exception_00000a30(void)\n\n{\n  int ptr_reg;\n  \n  core_panic(4,\"NMI HANDLER\");\n  return &ptr_stack + -*(int *)(ptr_reg + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_exception_00000a30",
                "in_r3": "ptr_reg",
                "stack0xe000ffe0": "ptr_stack"
            },
            "calling": [],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_interrupts_and_return_irq_status_00000cc0",
            "code": "\nundefined4 disableInterruptsAndReturnIRQStatus_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 isIRQinterruptsEnabled;\n  \n  core_panic(10,\"DUMMY HANDLER\");\n  isIRQinterruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    isIRQinterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return isIRQinterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_interrupts_and_return_irq_status_00000cc0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "isIRQinterruptsEnabled"
            },
            "calling": [
                "dummy_handler"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_status_00000cd0",
            "code": "\nundefined4 checkIRQInterruptsStatus_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 irqInterruptsEnabled;\n  \n  irqInterruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    irqInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return irqInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_status_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "irqInterruptsEnabled"
            },
            "calling": [
                "kernel_init",
                "kinetis_mcg_init",
                "core_panic",
                "pm_off",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_interrupt_status_00000cf0",
            "code": "\nundefined4 checkInterruptStatus_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_interrupt_status_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "cpu_switch_context_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_irq_interrupts_if_needed_00000d0c",
            "code": "\nvoid enableIRQInterruptsIfNeeded_00000d0c(uint interruptType)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    enableIRQInterrupts((interruptType & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_needed_00000d0c",
                "param_1": "interruptType",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableIRQInterrupts"
            },
            "calling": [
                "kinetis_mcg_init",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "sched_switch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_value_00000d44",
            "code": "\nint calculate_value_00000d44(uint input_value1,int input_value2)\n\n{\n  return input_value2 * 4 + (input_value1 & 0xf0000000 | (input_value1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_value_00000d44",
                "param_1": "input_value1",
                "param_2": "input_value2"
            },
            "calling": [
                "bit_clear32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 memoryAddress,undefined value)\n\n{\n  undefined4 *memoryLocation;\n  \n  memoryLocation = (undefined4 *)calculate_value_00000d44(memoryAddress,value);\n  *memoryLocation = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "memoryAddress",
                "param_2": "value",
                "puVar1": "memoryLocation"
            },
            "calling": [
                "cpu_errata_fixes"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_bit_00000d9c",
            "code": "\nvoid clear_bit_00000d9c(void)\n\n{\n  bit_clear32(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_bit_00000d9c"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [
                "bit_clear32"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "disable_watchdog_and_fix_errors_00000db0",
            "code": "\nvoid disable_watchdog_and_fix_errors_00000db0(void)\n\n{\n  disable_watchdog();\n  apply_cpu_errata_fixes();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "disable_watchdog_and_fix_errors_00000db0",
                "wdog_disable": "disable_watchdog",
                "cpu_errata_fixes": "apply_cpu_errata_fixes"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "wdog_disable",
                "cpu_errata_fixes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_dummy_handler_00000dc0",
            "code": "\nvoid initialize_dummy_handler_00000dc0(void)\n\n{\n  handle_default();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_dummy_handler_00000dc0",
                "dummy_handler_default": "handle_default"
            },
            "calling": [],
            "called": [
                "dummy_handler_default"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_uart_00000df4",
            "code": "\nvoid initialize_uart_00000df4(void)\n\n{\n  uart_init(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_uart_00000df4"
            },
            "calling": [
                "_init"
            ],
            "called": [
                "uart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "read_data_from_pipe_00000e14",
            "code": "\nundefined4 readDataFromPipe_00000e14(undefined4 buffer,undefined4 size)\n\n{\n  undefined4 status;\n  \n  status = isrpipe_read(0x1fff0204,buffer,size);\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "read_data_from_pipe_00000e14",
                "param_1": "buffer",
                "param_2": "size",
                "uVar1": "status"
            },
            "calling": [
                "_read_r"
            ],
            "called": [
                "isrpipe_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "write_data_00000e38",
            "code": "\nundefined4 write_data_00000e38(undefined4 data_buf,undefined4 data_len)\n\n{\n  uart_write(0,data_buf,data_len);\n  return data_len;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "write_data_00000e38",
                "param_1": "data_buf",
                "param_2": "data_len"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "disable_irq_00000e58",
            "code": "\nvoid disable_irq_00000e58(void)\n\n{\n  irq_disable();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "disable_irq_00000e58"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_peripherals_00000e64",
            "code": "\n\n\nvoid initialize_peripherals_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_cpu();\n  initialize_gpio(0x2056,0x80);\n  initialize_gpio(0x511a,0x80);\n  initialize_gpio(0x2055,0x80);\n  set_gpio(0x2056);\n  set_gpio(0x511a);\n  set_gpio(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_peripherals_00000e64",
                "cpu_init": "initialize_cpu",
                "gpio_init": "initialize_gpio",
                "gpio_set": "set_gpio"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "gpio_init",
                "gpio_set",
                "cpu_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "print_formatted_message_00000ed8",
            "code": "\nvoid printFormattedMessage_00000ed8(void)\n\n{\n  undefined4 inputRegister;\n  \n  iprintf(&DAT_00006f58,inputRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "print_formatted_message_00000ed8",
                "in_lr": "inputRegister"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handle_kernel_panic_00000f04(char panic_reason,undefined4 extra_info)\n\n{\n  undefined4 stack_variable;\n  code *jumptable;\n  undefined4 extra_info_ptr;\n  char panic_reason_char;\n  \n  extra_info_ptr = extra_info;\n  panic_reason_char = panic_reason;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_reason == '\\x03') {\n      cpu_print_last_instruction();\n    }\n    iprintf(\"*** RIOT kernel panic:\\n%s\\n\\n\",extra_info_ptr);\n    ps();\n    iprintf(&DAT_00006f78);\n    iprintf(\"*** halted.\\n\\n\");\n  }\n  irq_disable();\n  panic_arch();\n  jumptable = (code *)0xf4d;\n  pm_off();\n  stack_variable = (int)&stack_variable + 1;\n  auto_init();\n  iprintf(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  main();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panic_reason",
                "param_2": "extra_info",
                "uStack_18": "stack_variable",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "local_10": "extra_info_ptr",
                "local_9": "panic_reason_char"
            },
            "calling": [
                "dummy_handler_default",
                "uart_init",
                "cib_init",
                "nmi_default",
                "fmt_s32_dfp",
                "thread_add_to_list"
            ],
            "called": [
                "cpu_print_last_instruction",
                "iprintf",
                "panic_arch",
                "pm_off",
                "ps",
                "main",
                "auto_init",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_system_00000f8c",
            "code": "\nvoid initializeSystem_00000f8c(void)\n\n{\n  uint contextFlag;\n  undefined4 *contextPointer;\n  uint threadIndex;\n  int threadPriority;\n  int *threadPriorityPointer;\n  undefined4 cpuContextConstant;\n  undefined4 threadStackSize;\n  undefined4 threadEntry;\n  dword threadOffset;\n  \n  irq_disable();\n  threadOffset = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  threadEntry = 0;\n  threadStackSize = 0xf81;\n  thread_create(&DAT_1fff0a6c,0x100,0xf,0xc);\n  threadOffset = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  threadEntry = 0;\n  threadStackSize = 0xf5d;\n  threadIndex = 0xc;\n  thread_create(&DAT_1fff046c,0x600,7);\n  cpuContextConstant = 0xfd3;\n  contextFlag = cpu_switch_context_exit();\n  contextFlag = contextFlag >> 0x1e;\n  contextPointer = (undefined4 *)(threadIndex * 0x100);\n  threadPriority = (threadIndex >> 0x1d) << 0x11;\n  threadPriorityPointer = &threadPriority;\n  if ((contextFlag & contextFlag - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *contextPointer = 0;\n  contextPointer[1] = 0;\n  contextPointer[2] = contextFlag - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_system_00000f8c",
                "uVar1": "contextFlag",
                "puVar2": "contextPointer",
                "uVar3": "threadIndex",
                "iStack_24": "threadPriority",
                "piStack_20": "threadPriorityPointer",
                "uStack_1c": "cpuContextConstant",
                "local_18": "threadStackSize",
                "local_14": "threadEntry",
                "local_10": "threadOffset"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "thread_create",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_bitmask_00000fec",
            "code": "\nvoid initializeBitmask_00000fec(undefined4 *bitmaskPtr,uint bitCount)\n\n{\n  if ((bitCount & bitCount - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *bitmaskPtr = 0;\n  bitmaskPtr[1] = 0;\n  bitmaskPtr[2] = bitCount - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_bitmask_00000fec",
                "param_1": "bitmaskPtr",
                "param_2": "bitCount",
                "param_1[1]": "bitmaskPtr[1]",
                "param_1[2]": "bitmaskPtr[2]"
            },
            "calling": [
                "thread_create"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_closest_pointer_00001034",
            "code": "\nvoid findClosestPointer_00001034(int **pointerArray,int currentIndex)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(currentIndex + 4)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerArray;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(currentIndex + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(currentIndex + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(currentIndex + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_closest_pointer_00001034",
                "param_1": "pointerArray",
                "param_2": "currentIndex",
                "local_1c": "currentPointer"
            },
            "calling": [
                "_mutex_lock"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "find_nonself_pointers_000010a0",
            "code": "\nint find_nonself_pointers_000010a0(int *array)\n\n{\n  int *current_pointer;\n  \n  for (current_pointer = array; (int *)*current_pointer == current_pointer; current_pointer = current_pointer + 1) {\n  }\n  return (int)current_pointer - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "find_nonself_pointers_000010a0",
                "param_1": "array",
                "local_c": "current_pointer"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_thread_stack_000010d4",
            "code": "\nint initializeThreadStack_000010d4(uint address,int length,byte byteCount,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 irqState;\n  undefined4 stackPointer;\n  int result;\n  uint alignedLength;\n  undefined4 *threadDataPtr;\n  int adjustedLength;\n  uint adjustedAddress;\n  uint loopIndex;\n  short threadIndex;\n  short availableThreadIndex;\n  \n  if (byteCount < 0x10) {\n    adjustedLength = length;\n    adjustedAddress = address;\n    if ((address & 3) != 0) {\n      adjustedLength = 4 - (address & 3);\n      adjustedAddress = adjustedLength + address;\n      adjustedLength = length - adjustedLength;\n    }\n    alignedLength = adjustedLength - 0x30U & 0xfffffffc;\n    threadDataPtr = (undefined4 *)(alignedLength + adjustedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)adjustedAddress = adjustedAddress;\n    }\n    else {\n      for (loopIndex = adjustedAddress; loopIndex < alignedLength + adjustedAddress; loopIndex = loopIndex + 4) {\n        *(uint *)loopIndex = loopIndex;\n      }\n    }\n    irqState = irq_disable();\n    availableThreadIndex = 0;\n    for (threadIndex = 1; threadIndex < 0x21; threadIndex = threadIndex + 1) {\n      if (*(int *)(&DAT_1fff0358 + threadIndex * 4) == 0) {\n        availableThreadIndex = threadIndex;\n        break;\n      }\n    }\n    if (availableThreadIndex == 0) {\n      irq_restore(irqState);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableThreadIndex * 4) = threadDataPtr;\n      *(short *)((int)threadDataPtr + 6) = availableThreadIndex;\n      stackPointer = thread_stack_init(param5,param6,adjustedAddress,alignedLength);\n      *threadDataPtr = stackPointer;\n      threadDataPtr[9] = adjustedAddress;\n      threadDataPtr[0xb] = length;\n      threadDataPtr[10] = param7;\n      *(byte *)((int)threadDataPtr + 5) = byteCount;\n      *(undefined *)(threadDataPtr + 1) = 0;\n      threadDataPtr[2] = 0;\n      threadDataPtr[3] = 0;\n      threadDataPtr[4] = 0;\n      cib_init(threadDataPtr + 5,0);\n      threadDataPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        sched_set_status(threadDataPtr,10);\n        if ((flags & 4) == 0) {\n          irq_restore(irqState);\n          sched_switch(byteCount);\n          return (int)availableThreadIndex;\n        }\n      }\n      else {\n        sched_set_status(threadDataPtr,1);\n      }\n      irq_restore(irqState);\n      result = (int)availableThreadIndex;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_thread_stack_000010d4",
                "param_1": "address",
                "param_2": "length",
                "param_3": "byteCount",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "irqState",
                "uVar2": "stackPointer",
                "iVar3": "result",
                "uVar4": "alignedLength",
                "puVar5": "threadDataPtr",
                "local_30": "adjustedLength",
                "local_2c": "adjustedAddress",
                "local_10": "loopIndex",
                "local_c": "threadIndex",
                "local_a": "availableThreadIndex"
            },
            "calling": [
                "kernel_init"
            ],
            "called": [
                "thread_stack_init",
                "sched_set_status",
                "cib_init",
                "irq_restore",
                "sched_switch",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  initialize_cortex_m();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_kinetis_mcg();\n  initialize_peripherals();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274",
                "cortexm_init": "initialize_cortex_m",
                "kinetis_mcg_init": "initialize_kinetis_mcg",
                "periph_init": "initialize_peripherals"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "kinetis_mcg_init",
                "cortexm_init",
                "periph_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "lock_mutex_0000129c",
            "code": "\nvoid lockMutex_0000129c(undefined4 mutex)\n\n{\n  acquireLock(mutex,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "lock_mutex_0000129c",
                "param_1": "mutex",
                "_mutex_lock": "acquireLock"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "unlock_and_increment_000012b4",
            "code": "\nundefined4 unlock_and_increment_000012b4(int mutex_address,undefined undefined_param)\n\n{\n  undefined4 result;\n  \n  result = tsrb_add_one(mutex_address + 4,undefined_param);\n  mutex_unlock(mutex_address);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "unlock_and_increment_000012b4",
                "param_1": "mutex_address",
                "param_2": "undefined_param",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "mutex_unlock",
                "tsrb_add_one"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "wait_for_non_zero_value_000012e2",
            "code": "\nint waitForNonZeroValue_000012e2(int buffer,undefined4 size,undefined4 count)\n\n{\n  int result;\n  \n  while( true ) {\n    result = tsrb_get(buffer + 4,size,count);\n    if (result != 0) break;\n    mutex_lock(buffer);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "wait_for_non_zero_value_000012e2",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "count",
                "iVar1": "result"
            },
            "calling": [
                "uart_stdio_read"
            ],
            "called": [
                "tsrb_get",
                "mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte byteToSet)\n\n{\n  *(int *)(((uint)(int)(char)byteToSet >> 5) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "byteToSet"
            },
            "calling": [
                "uart_init_uart"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_yield_00001348",
            "code": "\nvoid checkAndYield_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yieldHighPriority();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_yield_00001348",
                "thread_yield_higher": "yieldHighPriority"
            },
            "calling": [
                "irq_handler_uart"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_improved_value_00001360",
            "code": "\nint calculateImprovedValue_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_improved_value_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_improvement_flag_00001392",
            "code": "\nvoid setImprovementFlag_00001392(undefined4 inputValue,undefined flag)\n\n{\n  undefined4 *improvementVariable;\n  \n  improvementVariable = (undefined4 *)calculate_improved_value_00001360(inputValue,flag);\n  *improvementVariable = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_improvement_flag_00001392",
                "param_1": "inputValue",
                "param_2": "flag",
                "puVar1": "improvementVariable"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_uart_000013b8",
            "code": "\nundefined4 initializeUART_000013b8(int portNumber,undefined4 baudRate,undefined4 pinConfig1,undefined4 pinConfig2)\n\n{\n  undefined4 returnValue;\n  \n  if (portNumber != 0) {\n    handlePanic(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + portNumber * 8) = pinConfig1;\n  *(undefined4 *)(&DAT_1fff0b70 + portNumber * 8) = pinConfig2;\n  initializePinConfig(portNumber);\n  setImprovementFlag(*(undefined4 *)(&DAT_00006ffc + portNumber * 0x20),\n               *(undefined *)(portNumber * 0x20 + 0x7000));\n  if ((&DAT_00007002)[portNumber * 0x20] == '\\0') {\n    uart_init_uart(portNumber,baudRate);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_uart_000013b8",
                "param_1": "portNumber",
                "param_2": "baudRate",
                "param_3": "pinConfig1",
                "param_4": "pinConfig2",
                "uVar1": "returnValue",
                "core_panic": "handlePanic",
                "uart_init_pins": "initializePinConfig",
                "set_improvement_flag_00001392": "setImprovementFlag"
            },
            "calling": [
                "uart_stdio_init"
            ],
            "called": [
                "FUN_00001392",
                "core_panic",
                "uart_init_uart",
                "uart_init_pins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "initialize_gpio_00001448",
            "code": "\nvoid initializeGPIO_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "initialize_gpio_00001448",
                "param_1": "index"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "gpio_init_port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint divisor)\n\n{\n  byte *dataPtr;\n  uint value;\n  uint scaledValue;\n  \n  dataPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPtr[3] = dataPtr[3] & 0xf3;\n  dataPtr[2] = (&DAT_00007001)[index * 0x20];\n  scaledValue = value / (divisor << 4);\n  *dataPtr = (byte)(scaledValue >> 8) & 0x1f;\n  dataPtr[1] = (byte)scaledValue;\n  dataPtr[10] = (byte)((value << 2) / divisor + 1 >> 1) & 0x1f;\n  dataPtr[0x10] = dataPtr[0x10] | 0x88;\n  if ((dataPtr[0x10] & 0x70) == 0) {\n    dataPtr[0x13] = 0;\n  }\n  else {\n    dataPtr[0x13] = (char)(2 << (dataPtr[0x10] >> 4 & 7)) - 1;\n  }\n  dataPtr[0x15] = 1;\n  dataPtr[0x11] = 0xc0;\n  dataPtr[3] = dataPtr[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "divisor",
                "pbVar1": "dataPtr",
                "uVar2": "value",
                "uVar3": "scaledValue"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int dataAddress,uint dataSize)\n\n{\n  int ptr;\n  uint counter;\n  \n  ptr = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < dataSize; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(ptr + 4));\n    *(undefined *)(ptr + 7) = *(undefined *)(counter + dataAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "dataAddress",
                "param_3": "dataSize",
                "iVar1": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "uart_stdio_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "process_parameter_00001628",
            "code": "\nvoid processParameter_00001628(int index)\n\n{\n  if (((*(byteValue *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  checkAndYield();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "process_parameter_00001628",
                "param_1": "index",
                "check_and_yield_00001348": "checkAndYield",
                "byte": "byteValue"
            },
            "calling": [
                "isr_uart0_rx_tx"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_uart_00001688",
            "code": "\nvoid initialize_UART_00001688(void)\n\n{\n  handle_UART_interrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_uart_00001688",
                "irq_handler_uart": "handle_UART_interrupt"
            },
            "calling": [],
            "called": [
                "irq_handler_uart"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016c8",
                "bit_clear8",
                "bit_set8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_value_000016c8",
            "code": "\nvoid setOffsetToValue_000016c8(undefined4 valuePointer,undefined offset)\n\n{\n  undefined4 *pointerToValue;\n  \n  pointerToValue = (undefined4 *)calculate_offset_00001696(valuePointer,offset);\n  *pointerToValue = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_000016c8",
                "param_1": "valuePointer",
                "param_2": "offset",
                "puVar1": "pointerToValue"
            },
            "calling": [
                "kinetis_mcg_init_erclk32k"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "mark_offset_as_one_000016ec",
            "code": "\nvoid markOffsetAsOne_000016ec(undefined4 offset,undefined data)\n\n{\n  undefined *offsetPtr;\n  \n  offsetPtr = (undefined *)calculate_offset_00001696(offset,data);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "mark_offset_as_one_000016ec",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 dataPointer,undefined offset)\n\n{\n  undefined *targetAddress;\n  \n  targetAddress = (undefined *)calculate_offset_00001696(dataPointer,offset);\n  *targetAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "dataPointer",
                "param_2": "offset",
                "puVar1": "targetAddress"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_disable_pll",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_bit_at_6_00001734",
            "code": "\nvoid clear_bit_at_6_00001734(void)\n\n{\n  bit_clear8(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_bit_at_6_00001734"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_register_value_00001748",
            "code": "\nvoid updateRegisterValue_00001748(byte newValue)\n\n{\n  DAT_40064003 = newValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_register_value_00001748",
                "param_1": "newValue"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "clear_bit_and_set_bit_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid clearBitAndSetBit_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearBit(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "clear_bit_and_set_bit_00001778",
                "bit_clear8": "clearBit"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fee"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "set_offset_and_check_000017dc",
            "code": "\n\n\nvoid setOffsetAndCheck_000017dc(void)\n\n{\n  set_offset_to_value_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "set_offset_and_check_000017dc"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "update_data_registers_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid updateDataRegisters_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  bit_set8(&DAT_40064001,0);\n  bit_clear8(&DAT_40064000,1);\n  bit_clear8(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "update_data_registers_0000182c"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_fll_000018bc",
            "code": "\nvoid initialize_FLL_000018bc(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  bit_clear8(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_fll_000018bc"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initializeSystem_0000191c(void)\n\n{\n  enableOscillator();\n  setFllFactor(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c",
                "kinetis_mcg_enable_osc": "enableOscillator",
                "kinetis_mcg_set_fll_factor": "setFllFactor"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_clock_system_000019c0",
            "code": "\nvoid initializeClockSystem_000019c0(void)\n\n{\n  enableOscillator();\n  setFllFactor(0x40);\n  clearBit8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  disablePll();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_clock_system_000019c0",
                "bit_clear8": "clearBit8",
                "kinetis_mcg_enable_osc": "enableOscillator",
                "kinetis_mcg_set_fll_factor": "setFllFactor",
                "kinetis_mcg_disable_pll": "disablePll"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disablePLL();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18",
                "kinetis_mcg_disable_pll": "disablePLL"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_system_00001a3c",
            "code": "\nvoid initializeSystem_00001a3c(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disablePhaseLockedLoop();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_system_00001a3c",
                "kinetis_mcg_disable_pll": "disablePhaseLockedLoop"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "disable_interrupts_00001a60",
            "code": "\nvoid disable_interrupts_00001a60(void)\n\n{\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  bit_set8(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "disable_interrupts_00001a60"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "configure_mcg_00001b10",
            "code": "\nundefined4 configureMCG_00001b10(byte mode)\n\n{\n  undefined4 result;\n  \n  if (mode < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)mode + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        kinetis_mcg_set_fei();\n        break;\n      case 1:\n        kinetis_mcg_set_fee();\n        break;\n      case 2:\n        kinetis_mcg_set_fbi();\n        break;\n      case 3:\n        kinetis_mcg_set_fbe();\n        break;\n      case 4:\n        kinetis_mcg_set_blpi();\n        break;\n      case 5:\n        kinetis_mcg_set_blpe();\n        break;\n      case 6:\n        kinetis_mcg_set_pbe();\n        break;\n      case 7:\n        kinetis_mcg_set_pee();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (mode != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "configure_mcg_00001b10",
                "param_1": "mode",
                "uVar1": "result"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "kinetis_mcg_set_pee",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_blpi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initialize_system_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    bit_clear8(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    bit_clear8(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  set_clock_factor(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "kinetis_mcg_set_fll_factor": "set_clock_factor"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 interruptStatus;\n  \n  interruptStatus = disableInterrupts();\n  setSafeMode();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initializeMCGIRCLK();\n  initializeERCLK32K();\n  setMode(7);\n  restoreInterrupts(interruptStatus);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interruptStatus",
                "kinetis_mcg_set_safe_mode": "setSafeMode",
                "kinetis_mcg_init_mcgirclk": "initializeMCGIRCLK",
                "kinetis_mcg_init_erclk32k": "initializeERCLK32K",
                "kinetis_mcg_set_mode": "setMode",
                "irq_disable": "disableInterrupts",
                "irq_restore": "restoreInterrupts"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "kinetis_mcg_init_mcgirclk",
                "irq_restore",
                "irq_disable",
                "kinetis_mcg_set_mode",
                "kinetis_mcg_set_safe_mode",
                "kinetis_mcg_init_erclk32k"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_yield_00001cf0",
            "code": "\nvoid check_and_yield_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yield_to_higher_thread();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_yield_00001cf0",
                "thread_yield_higher": "yield_to_higher_thread"
            },
            "calling": [
                "irq_handler"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint baseAddress,int multiplier)\n\n{\n  return multiplier * 4 + (baseAddress & 0xf0000000 | (baseAddress & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "baseAddress",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_set32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_bit_00001d3a",
            "code": "\nvoid setBit_00001d3a(undefined4 address,undefined bitIndex)\n\n{\n  undefined4 *bitPointer;\n  \n  bitPointer = (undefined4 *)bitband_addr(address,bitIndex);\n  *bitPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_bit_00001d3a",
                "param_1": "address",
                "param_2": "bitIndex",
                "puVar1": "bitPointer"
            },
            "calling": [
                "clk_en"
            ],
            "called": [
                "bitband_addr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_bitwise_operations_00001d5e",
            "code": "\nuint applyBitwiseOperations_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_bitwise_operations_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "combine_bits_00001d80",
            "code": "\nuint combineBits_00001d80(ushort input)\n\n{\n  return input & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "combine_bits_00001d80",
                "param_1": "input"
            },
            "calling": [
                "gpio_init",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init_port",
                "clk_en"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "mask_and_restrict_ushort_00001dc0",
            "code": "\nushort mask_and_restrict_ushort_00001dc0(ushort input)\n\n{\n  return input & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "mask_and_restrict_ushort_00001dc0",
                "param_1": "input"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_port_data_00001ddc",
            "code": "\nvoid updatePortData_00001ddc(undefined2 portNumber)\n\n{\n  char portCharacter;\n  \n  portCharacter = port_num(portNumber);\n  bit_set32(&DAT_40048038,portCharacter + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_port_data_00001ddc",
                "param_1": "portNumber",
                "cVar1": "portCharacter"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "bit_set32",
                "port_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "read_and_extract_bits_00001e0c",
            "code": "\nuint readAndExtractBits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "read_and_extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "irq_handler",
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_value_00001e44",
            "code": "\nvoid updateValue_00001e44(int index,uint bitOffset,int newValue)\n\n{\n  int shiftedIndex;\n  \n  shiftedIndex = (int)bitOffset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) & ~(0xf << ((bitOffset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) | newValue << ((bitOffset & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_value_00001e44",
                "param_1": "index",
                "param_2": "bitOffset",
                "param_3": "newValue",
                "iVar1": "shiftedIndex"
            },
            "calling": [
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "write_map_data_00001ec4",
            "code": "\nvoid write_map_data_00001ec4(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  undefined4 context;\n  \n  context = get_ctx(input_param_1,input_param_2);\n  write_map(input_param_1,input_param_2,context);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "write_map_data_00001ec4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "uVar1": "context"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "get_ctx",
                "write_map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "initialize_pin_00001eea",
            "code": "\nundefined4 initializePin_00001eea(undefined2 port,byte state)\n\n{\n  uint pinNumber;\n  int gpioAddress;\n  int pinOffset;\n  \n  gpio_init_port(port,0);\n  if ((char)state < '\\0') {\n    pinNumber = pin_num(port);\n    gpioAddress = gpio(port);\n    *(uint *)(gpioAddress + 0x14) = *(uint *)(gpioAddress + 0x14) | 1 << (pinNumber & 0xff);\n  }\n  else {\n    pinNumber = pin_num(port);\n    gpioAddress = gpio(port);\n    *(uint *)(gpioAddress + 0x14) = *(uint *)(gpioAddress + 0x14) & ~(1 << (pinNumber & 0xff));\n  }\n  gpioAddress = port(port);\n  pinOffset = pin_num(port);\n  *(uint *)(gpioAddress + pinOffset * 4) = state & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "initialize_pin_00001eea",
                "param_1": "port",
                "param_2": "state",
                "uVar1": "pinNumber",
                "iVar2": "gpioAddress",
                "iVar3": "pinOffset"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "port",
                "gpio_init_port",
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_pin_value_00001f80",
            "code": "\nvoid updatePinValue_00001f80(undefined2 device,undefined4 newPinValue)\n\n{\n  int portAddress;\n  int pinIndex;\n  undefined4 portNumber;\n  undefined4 pinNumber;\n  uint previousPinValue;\n  \n  clk_en(device);\n  portAddress = port(device);\n  pinIndex = pin_num(device);\n  previousPinValue = *(uint *)(portAddress + pinIndex * 4);\n  portAddress = port(device);\n  pinIndex = pin_num(device);\n  *(undefined4 *)(portAddress + pinIndex * 4) = newPinValue;\n  if ((previousPinValue & 0xf0000) != 0) {\n    portNumber = port_num(device);\n    pinNumber = pin_num(device);\n    ctx_clear(portNumber,pinNumber);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_pin_value_00001f80",
                "param_1": "device",
                "param_2": "newPinValue",
                "iVar1": "portAddress",
                "iVar2": "pinIndex",
                "uVar3": "portNumber",
                "uVar4": "pinNumber",
                "uVar5": "previousPinValue"
            },
            "calling": [
                "gpio_init",
                "uart_init_pins"
            ],
            "called": [
                "port",
                "clk_en",
                "port_num",
                "ctx_clear",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_pin_output_00001ff6",
            "code": "\nvoid setPinOutput_00001ff6(undefined2 pinNumber)\n\n{\n  uint pinMask;\n  int gpioAddress;\n  \n  pinMask = pin_num(pinNumber);\n  gpioAddress = gpio(pinNumber);\n  *(int *)(gpioAddress + 4) = 1 << (pinMask & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_pin_output_00001ff6",
                "param_1": "pinNumber",
                "uVar1": "pinMask",
                "iVar2": "gpioAddress"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flags_and_call_function_00002028",
            "code": "\nvoid processFlagsAndCallFunction_00002028(int arg1,undefined4 arg2)\n\n{\n  int index;\n  uint flags;\n  uint bitIndex;\n  \n  flags = *(uint *)(arg1 + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flags & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(arg1 + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(arg1 + 0xa0) = 1 << (bitIndex & 0xff);\n      index = get_ctx(arg2,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + index * 0xc));\n    }\n  }\n  check_and_yield_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flags_and_call_function_00002028",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "index",
                "uVar2": "flags",
                "local_c": "bitIndex"
            },
            "calling": [
                "isr_portd",
                "isr_porta",
                "isr_porte",
                "isr_portb",
                "isr_portc"
            ],
            "called": [
                "get_ctx",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "disable_irq_handler_000020b8",
            "code": "\nvoid disable_irq_handler_000020b8(void)\n\n{\n  irq_handler(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "disable_irq_handler_000020b8"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_irq_handler_000020cc",
            "code": "\nvoid initialize_irq_handler_000020cc(void)\n\n{\n  irq_handler(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_irq_handler_000020cc"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_irq_handler_000020e0",
            "code": "\nvoid initializeIRQHandler_000020e0(void)\n\n{\n  irq_handler(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_irq_handler_000020e0"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_irq_handler_000020f4",
            "code": "\nvoid initialize_irq_handler_000020f4(void)\n\n{\n  irq_handler(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_irq_handler_000020f4"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_irq_handler_00002108",
            "code": "\nvoid initializeIRQHandler_00002108(void)\n\n{\n  irq_handler(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_irq_handler_00002108"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_thread_stack_info_0000211c",
            "code": "\nvoid printThreadStackInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 header;\n  int stackDiff;\n  int stackType;\n  dword baseAddr;\n  uint offset;\n  undefined4 *elfData;\n  undefined4 stackPointer;\n  undefined4 stackStart;\n  int totalStackUsage;\n  short threadIndex;\n  int totalFreeStack;\n  int totalUsedStack;\n  \n  header = 0x515f;\n  totalUsedStack = 0;\n  totalFreeStack = 0;\n  iprintf(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",&DAT_000070b8,\n          \"state\");\n  totalStackUsage = thread_isr_stack_usage();\n  stackStart = thread_isr_stack_start();\n  stackPointer = thread_isr_stack_pointer();\n  iprintf(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n          totalStackUsage,stackStart,stackPointer);\n  totalUsedStack = totalUsedStack + 0x200;\n  if (0 < totalStackUsage) {\n    totalFreeStack = totalStackUsage + totalFreeStack;\n  }\n  for (threadIndex = 1; threadIndex < 0x21; threadIndex = threadIndex + 1) {\n    elfData = *(undefined4 **)(&DAT_1fff0358 + threadIndex * 4);\n    if (elfData != (undefined4 *)0x0) {\n      offset = (uint)*(byte *)(elfData + 1);\n      baseAddr = (&elfRelArray[4].r_offset)[offset];\n      stackType = (int)&header + (uint)(8 < offset);\n      stackDiff = elfData[0xb];\n      totalUsedStack = stackDiff + totalUsedStack;\n      iVar1 = thread_measure_stack_free(elfData[9]);\n      stackDiff = stackDiff - iVar1;\n      totalFreeStack = stackDiff + totalFreeStack;\n      iprintf(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n              (int)*(short *)((int)elfData + 6),elfData[10],baseAddr,stackType,\n              *(undefined *)((int)elfData + 5),elfData[0xb],stackDiff,elfData[9],*elfData);\n    }\n  }\n  iprintf(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,&DAT_00007190,\n          totalUsedStack,totalFreeStack);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_thread_stack_info_0000211c",
                "local_40": "header",
                "local_3c": "stackDiff",
                "local_38": "stackType",
                "local_34": "baseAddr",
                "local_30": "offset",
                "local_2c": "elfData",
                "local_28": "stackPointer",
                "local_24": "stackStart",
                "local_20": "totalStackUsage",
                "local_1a": "threadIndex",
                "local_18": "totalFreeStack",
                "local_14": "totalUsedStack",
                "Elf32_Rel_ARRAY_1fff0200": "elfRelArray"
            },
            "calling": [
                "core_panic",
                "_ps_handler"
            ],
            "called": [
                "iprintf",
                "thread_isr_stack_start",
                "thread_isr_stack_usage",
                "thread_isr_stack_pointer",
                "thread_measure_stack_free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_pointer_equality_00002270",
            "code": "\nundefined checkPointerEquality_00002270(int ptrToCheck)\n\n{\n  undefined result;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(ptrToCheck + 0xc);\n  isEqual = *(int *)(ptrToCheck + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_pointer_equality_00002270",
                "param_1": "ptrToCheck",
                "uVar1": "result",
                "iVar2": "value1",
                "bVar3": "isEqual"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_equality_00002294",
            "code": "\nundefined checkEquality_00002294(int pointer)\n\n{\n  undefined uVar1;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(pointer + 4);\n  isEqual = *(int *)(pointer + 0xc) - *(int *)(pointer + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  uVar1 = (undefined)value1;\n  if (!isEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "param_1": "pointer",
                "iVar2": "value1",
                "bVar3": "isEqual"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_value_000022be",
            "code": "\nvoid updateValue_000022be(int *pointerArray,undefined valueToUpdate)\n\n{\n  uint currentValue;\n  \n  currentValue = pointerArray[3];\n  pointerArray[3] = currentValue + 1;\n  *(undefined *)((currentValue & pointerArray[1] - 1U) + *pointerArray) = valueToUpdate;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_value_000022be",
                "param_1": "pointerArray",
                "param_2": "valueToUpdate",
                "uVar1": "currentValue"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_byte_000022f0",
            "code": "\nundefined incrementAndReturnByte_000022f0(int *array)\n\n{\n  uint currentValue;\n  \n  currentValue = array[2];\n  array[2] = currentValue + 1;\n  return *(undefined *)((currentValue & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_byte_000022f0",
                "param_1": "array",
                "uVar1": "currentValue"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_from_tsrb_0000231c",
            "code": "\nint copyFromTSRB_0000231c(undefined4 tsrb,undefined *destination,int numElements)\n\n{\n  undefined temp;\n  int isEmpty;\n  undefined *destPtr;\n  int remainingElements;\n  \n  destPtr = destination;\n  remainingElements = numElements;\n  while ((remainingElements != 0 && (isEmpty = tsrb_empty(tsrb), isEmpty == 0))) {\n    temp = _pop(tsrb);\n    *destPtr = temp;\n    remainingElements = remainingElements + -1;\n    destPtr = destPtr + 1;\n  }\n  return numElements - remainingElements;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_from_tsrb_0000231c",
                "param_1": "tsrb",
                "param_2": "destination",
                "param_3": "numElements",
                "uVar1": "temp",
                "iVar2": "isEmpty",
                "local_20": "destPtr",
                "local_14": "remainingElements"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_pop",
                "tsrb_empty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_and_push_00002364",
            "code": "\nundefined4 checkAndPush_00002364(undefined4 inputBuffer,undefined data)\n\n{\n  int isBufferFull;\n  undefined4 returnValue;\n  \n  isBufferFull = tsrb_full(inputBuffer);\n  if (isBufferFull == 0) {\n    _push(inputBuffer,data);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_and_push_00002364",
                "param_1": "inputBuffer",
                "param_2": "data",
                "iVar1": "isBufferFull",
                "uVar2": "returnValue"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "_push",
                "tsrb_full"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_real_time_clock_00002396",
            "code": "\nvoid initialize_real_time_clock_00002396(void)\n\n{\n  rtc_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_real_time_clock_00002396"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "rtc_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 result;\n  undefined buffer [128];\n  \n  startForkserver(0);\n  puts(\"Welcome to RIOT!\");\n  result = shell_run(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "uVar1": "result"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "startForkserver",
                "shell_run",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "send_software_interrupt_000023c8",
            "code": "\nvoid sendSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "send_software_interrupt_000023c8"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "handle_function_call_000023d0",
            "code": "\nundefined4 handleFunctionCall_000023d0(undefined4 inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = aflCall(1,inputValue,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "handle_function_call_000023d0",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "get_next_pointer_0000240c",
            "code": "\nundefined4 * get_next_pointer_0000240c(undefined4 *current_pointer)\n\n{\n  undefined4 *next_pointer;\n  \n  next_pointer = (undefined4 *)*current_pointer;\n  if (next_pointer != (undefined4 *)0x0) {\n    *current_pointer = *next_pointer;\n  }\n  return next_pointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "get_next_pointer_0000240c",
                "param_1": "current_pointer",
                "puVar1": "next_pointer"
            },
            "calling": [
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_thread_status_00002434",
            "code": "\nundefined4 updateThreadStatus_00002434(int *threadPointer,int status)\n\n{\n  int previousStatus;\n  undefined4 previousInterruptStatus;\n  \n  previousInterruptStatus = irq_disable();\n  previousStatus = DAT_1fff03dc;\n  if (*threadPointer == 0) {\n    *threadPointer = -1;\n    irq_restore(previousInterruptStatus);\n    previousInterruptStatus = 1;\n  }\n  else if (status == 0) {\n    irq_restore(previousInterruptStatus);\n    previousInterruptStatus = 0;\n  }\n  else {\n    sched_set_status(DAT_1fff03dc,2);\n    if (*threadPointer == -1) {\n      *threadPointer = previousStatus + 8;\n      *(undefined4 *)*threadPointer = 0;\n    }\n    else {\n      thread_add_to_list(threadPointer,previousStatus);\n    }\n    irq_restore(previousInterruptStatus);\n    thread_yield_higher();\n    previousInterruptStatus = 1;\n  }\n  return previousInterruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_thread_status_00002434",
                "param_1": "threadPointer",
                "param_2": "status",
                "iVar1": "previousStatus",
                "uVar2": "previousInterruptStatus"
            },
            "calling": [
                "mutex_lock"
            ],
            "called": [
                "thread_yield_higher",
                "sched_set_status",
                "irq_restore",
                "irq_disable",
                "thread_add_to_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_list_element_000024bc",
            "code": "\nvoid processListElement_000024bc(int *listPointer)\n\n{\n  undefined status;\n  undefined4 irqFlag;\n  int listElement;\n  \n  irqFlag = irq_disable();\n  if (*listPointer == 0) {\n    irq_restore(irqFlag);\n  }\n  else if (*listPointer == -1) {\n    *listPointer = 0;\n    irq_restore(irqFlag);\n  }\n  else {\n    listElement = list_remove_head(listPointer);\n    sched_set_status(listElement + -8,10);\n    if (*listPointer == 0) {\n      *listPointer = -1;\n    }\n    status = *(undefined *)(listElement + -3);\n    irq_restore(irqFlag);\n    sched_switch(status);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_list_element_000024bc",
                "param_1": "listPointer",
                "uVar1": "status",
                "uVar2": "irqFlag",
                "iVar3": "listElement"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "sched_set_status",
                "irq_restore",
                "sched_switch",
                "irq_disable",
                "list_remove_head"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_data_00002538",
            "code": "\nvoid updateData_00002538(byte inputByte,uint inputValue)\n\n{\n  if (signedInputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)(signedInputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_data_00002538",
                "param_1": "inputByte",
                "param_2": "inputValue",
                "(char)param_1": "signedInputByte"
            },
            "calling": [
                "cortexm_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_configuration_0000258c",
            "code": "\n\n\nvoid initializeSystemConfiguration_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  update_data_00002538(0xfffffffe,1);\n  update_data_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    update_data_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_configuration_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_rtt_000025f4",
            "code": "\nvoid initialize_rtt_000025f4(void)\n\n{\n  initialize_real_time_trace();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_rtt_000025f4",
                "rtt_init": "initialize_real_time_trace"
            },
            "calling": [
                "periph_init"
            ],
            "called": [
                "rtt_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "set_counter_from_time_00002600",
            "code": "\nundefined4 setCounterFromTime_00002600(undefined4 timeStruct)\n\n{\n  undefined4 unixTimestamp;\n  \n  unixTimestamp = mktime(timeStruct);\n  rtt_set_counter(unixTimestamp);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "set_counter_from_time_00002600",
                "param_1": "timeStruct",
                "uVar1": "unixTimestamp"
            },
            "calling": [
                "_rtc_settime"
            ],
            "called": [
                "rtt_set_counter",
                "mktime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "convert_counter_to_utc_time_00002624",
            "code": "\nundefined4 convertCounterToUtcTime_00002624(undefined4 utcTime)\n\n{\n  undefined4 counter;\n  undefined4 zero;\n  \n  counter = rtt_get_counter();\n  zero = 0;\n  gmtime_r(&counter,utcTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "convert_counter_to_utc_time_00002624",
                "param_1": "utcTime",
                "local_10": "counter",
                "uStack_c": "zero"
            },
            "calling": [
                "_rtc_gettime"
            ],
            "called": [
                "gmtime_r",
                "rtt_get_counter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "set_alarm_with_time_00002654",
            "code": "\nundefined4 setAlarmWithTime_00002654(undefined4 timeStruct,undefined4 param2Value,undefined4 param3Value)\n\n{\n  undefined4 timeResult;\n  \n  timeResult = mktime(timeStruct);\n  DAT_1fff0d9c = param2Value;\n  rtt_set_alarm(timeResult,0x26f1,param3Value);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "set_alarm_with_time_00002654",
                "param_1": "timeStruct",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "uVar1": "timeResult"
            },
            "calling": [
                "_rtc_setalarm"
            ],
            "called": [
                "mktime",
                "rtt_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "convert_alarm_to_local_time_00002690",
            "code": "\nundefined4 convertAlarmToLocalTime_00002690(undefined4 result)\n\n{\n  undefined4 alarmTime;\n  undefined4 zero;\n  \n  alarmTime = getSystemAlarmTime();\n  zero = 0;\n  convertToReadableTime(&alarmTime,result);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "convert_alarm_to_local_time_00002690",
                "param_1": "result",
                "local_10": "alarmTime",
                "uStack_c": "zero",
                "rtt_get_alarm": "getSystemAlarmTime",
                "gmtime_r": "convertToReadableTime"
            },
            "calling": [
                "_rtc_getalarm"
            ],
            "called": [
                "rtt_get_alarm",
                "gmtime_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_alarm_and_reset_counter_000026c0",
            "code": "\nvoid clear_alarm_and_reset_counter_000026c0(void)\n\n{\n  rtt_clear_alarm();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_alarm_and_reset_counter_000026c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_clear_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "power_on_real_time_clock_000026d8",
            "code": "\nvoid powerOnRealTimeClock_000026d8(void)\n\n{\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "power_on_real_time_clock_000026d8"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "poweroff_000026e4",
            "code": "\nvoid poweroff_000026e4(void)\n\n{\n  rtt_poweroff_000026e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "poweroff_000026e4"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweroff"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_function_000026f0",
            "code": "\nvoid executeCallbackFunction_000026f0(undefined4 callbackParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_function_000026f0",
                "param_1": "callbackParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_at_offset_00002714",
            "code": "\nvoid setBitAtOffset_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_at_offset_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_byte_value_00002744",
            "code": "\nvoid setByteValue_00002744(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_yield_00002798",
            "code": "\nvoid checkAndYield_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_yield_00002798"
            },
            "calling": [
                "isr_rtc"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "rtc_init"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "rtc_get_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_param_and_flag_0000285c",
            "code": "\n\n\nvoid setParamAndFlag_0000285c(undefined4 param)\n\n{\n  _DAT_4003d000 = param;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_param_and_flag_0000285c",
                "param_1": "param"
            },
            "calling": [
                "rtc_set_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_peripheral_irq_00002894",
            "code": "\n\n\nvoid initializePeripheralIRQ_00002894(int data,undefined4 paramA,undefined4 paramB)\n\n{\n  _DAT_4003d008 = data + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = paramA;\n  DAT_1fff0da4 = paramB;\n  NVIC_SetPriority(0x2e,10);\n  NVIC_EnableIRQ(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_peripheral_irq_00002894",
                "param_1": "data",
                "param_2": "paramA",
                "param_3": "paramB"
            },
            "calling": [
                "rtc_set_alarm"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_by_one_000028f0",
            "code": "\n\n\nint incrementDataByOne_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_by_one_000028f0"
            },
            "calling": [
                "rtc_get_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clearFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "rtc_clear_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_value_0000294c",
            "code": "\n\n\nvoid setFlagValue_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_value_0000294c"
            },
            "calling": [
                "rtt_init",
                "rtc_poweron"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_bit_in_register_00002970",
            "code": "\n\n\nvoid clearBitInRegister_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_bit_in_register_00002970"
            },
            "calling": [
                "rtc_poweroff"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_interrupt_handler_00002994",
            "code": "\n\n\nvoid execute_interrupt_handler_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  cortexm_isr_end();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_interrupt_handler_00002994"
            },
            "calling": [],
            "called": [
                "cortexm_isr_end"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "print_character_00002a00",
            "code": "\nvoid printCharacter_00002a00(undefined4 character)\n\n{\n  print(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "print_character_00002a00",
                "param_1": "character",
                "putchar": "print"
            },
            "calling": [
                "print_prompt",
                "readline"
            ],
            "called": [
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_match_00002a18",
            "code": "\nint find_match_00002a18(int *array,undefined4 string)\n\n{\n  int iVar1;\n  int *current_array;\n  undefined **strings_array;\n  uint index;\n  int *current_string;\n  \n  current_array = array;\n  strings_array = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_string = (&current_array)[index];\n    if (current_string != (int *)0x0) {\n      for (; *current_string != 0; current_string = current_string + 3) {\n        iVar1 = compare_strings(*current_string,string);\n        if (iVar1 == 0) {\n          return current_string[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_match_00002a18",
                "param_1": "array",
                "param_2": "string",
                "local_18": "current_array",
                "local_14": "strings_array",
                "local_10": "index",
                "local_c": "current_string",
                "strcmp": "compare_strings"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commands)\n\n{\n  int *currentCommand;\n  undefined **commandDescriptions;\n  uint index;\n  int *currentParameter;\n  \n  iprintf(\"%-20s %s\\n\",\"Command\",\"Description\");\n  puts(\"---------------------------------------\");\n  currentCommand = commands;\n  commandDescriptions = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentParameter = (&currentCommand)[index];\n    if (currentParameter != (int *)0x0) {\n      for (; *currentParameter != 0; currentParameter = currentParameter + 3) {\n        iprintf(\"%-20s %s\\n\",*currentParameter,currentParameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "currentCommand",
                "local_14": "commandDescriptions",
                "local_10": "index",
                "local_c": "currentParameter"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "iprintf",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "parse_command_00002b10",
            "code": "\nvoid parseCommand_00002b10(undefined4 param1,byte *command)\n\n{\n  int cmpResult;\n  byte *nextChar;\n  byte *local_48 [3];\n  code *handlerFunction;\n  char **substrings;\n  uint numSubstrings;\n  byte quoteChar;\n  char *innerChar;\n  char *currentSubstring;\n  char **substringPtr;\n  uint i;\n  int numBackslashes;\n  uint numQuotes;\n  byte *currentChar;\n  \n  numQuotes = 0;\n  numBackslashes = 0;\n  currentChar = command;\n  while( true ) {\n    local_48[0] = command;\n    local_48[1] = (byte *)param1;\n    if (0x20 < *currentChar) {\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        quoteChar = *currentChar;\n        do {\n          nextChar = currentChar + 1;\n          if (*nextChar == 0) {\n            currentChar = nextChar;\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextChar == 0x5c) {\n            numBackslashes = numBackslashes + 1;\n            currentChar = currentChar + 2;\n            nextChar = currentChar;\n            if (*currentChar == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = nextChar;\n        } while (quoteChar != *currentChar);\n        if (0x20 < currentChar[1]) {\n          puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentChar == 0x5c) {\n            numBackslashes = numBackslashes + 1;\n            currentChar = currentChar + 1;\n            if (*currentChar == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = currentChar + 1;\n          if (*currentChar == 0x22) {\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentChar);\n      }\n      numQuotes = numQuotes + 1;\n    }\n    if (*currentChar == 0) break;\n    *currentChar = 0;\n    currentChar = currentChar + 1;\n  }\n  if (numQuotes != 0) {\n    numSubstrings = numQuotes;\n    substrings = (char **)((int)local_48 - ((numQuotes + 1) * 4 + 7 & 0xfffffff8));\n    substrings[numQuotes] = (char *)0x0;\n    currentChar = command;\n    for (i = 0; substringPtr = substrings, i < numQuotes; i = i + 1) {\n      for (; *currentChar == 0; currentChar = currentChar + 1) {\n      }\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        currentChar = currentChar + 1;\n      }\n      substrings[i] = (char *)currentChar;\n      for (; *currentChar != 0; currentChar = currentChar + 1) {\n      }\n    }\n    for (; (numBackslashes != 0 && (*substringPtr != (char *)0x0)); substringPtr = substringPtr + 1) {\n      for (currentSubstring = *substringPtr; *currentSubstring != '\\0'; currentSubstring = currentSubstring + 1) {\n        if (*currentSubstring == '\\') {\n          for (innerChar = currentSubstring; *innerChar != '\\0'; innerChar = innerChar + 1) {\n            *innerChar = innerChar[1];\n          }\n          numBackslashes = numBackslashes + -1;\n          if (numBackslashes == 0) break;\n        }\n      }\n    }\n    handlerFunction = (code *)find_handler(param1,*substrings);\n    if (handlerFunction == (code *)0x0) {\n      cmpResult = strcmp(&DAT_00007214,*substrings);\n      if (cmpResult == 0) {\n        print_help(local_48[1]);\n      }\n      else {\n        iprintf(\"shell: command not found: %s\\n\",*substrings);\n      }\n    }\n    else {\n      (*handlerFunction)(numQuotes,substrings);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "parse_command_00002b10",
                "param_1": "param1",
                "param_2": "command",
                "iVar1": "cmpResult",
                "pbVar2": "nextChar",
                "local_3c": "handlerFunction",
                "local_38": "substrings",
                "local_34": "numSubstrings",
                "local_2d": "quoteChar",
                "local_2c": "innerChar",
                "local_28": "currentSubstring",
                "local_24": "substringPtr",
                "local_20": "i",
                "local_1c": "numBackslashes",
                "local_18": "numQuotes",
                "local_14": "currentChar"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "iprintf",
                "find_handler",
                "puts",
                "strcmp",
                "print_help"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "read_line_00002d94",
            "code": "\nuint readLine_00002d94(undefined *buffer,int size)\n\n{\n  int inputChar;\n  byte isFirstChar;\n  bool isFirstBuffer;\n  undefined *currentChar;\n  \n  currentChar = buffer;\n  while( true ) {\n    if (size + -1 <= (int)currentChar - (int)buffer) {\n      return 0xffffffff;\n    }\n    inputChar = getchar();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *currentChar = 0;\n      _putchar(0xd);\n      _putchar(10);\n      isFirstBuffer = currentChar == buffer;\n      if (isFirstBuffer) {\n        buffer = (undefined *)0x1;\n      }\n      isFirstChar = (byte)buffer;\n      if (!isFirstBuffer) {\n        isFirstChar = 0;\n      }\n      return (uint)isFirstChar;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (currentChar != buffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        _putchar(8);\n        _putchar(0x20);\n        _putchar(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputChar;\n      _putchar(inputChar);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "read_line_00002d94",
                "param_1": "buffer",
                "param_2": "size",
                "iVar1": "inputChar",
                "bVar2": "isFirstChar",
                "bVar3": "isFirstBuffer",
                "local_c": "currentChar"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "_putchar",
                "getchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "print_greater_than_space_00002e48",
            "code": "\nvoid printGreaterThanSpace_00002e48(void)\n\n{\n  printCharacter(0x3e);\n  printCharacter(0x20);\n  flushOutput(*(undefined4 *)(Elf32_Rel_ARRAY_1fff0200[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "print_greater_than_space_00002e48",
                "r_offset": "offset",
                "_putchar": "printCharacter",
                "fflush": "flushOutput"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "fflush",
                "_putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "interactive_input_00002e6c",
            "code": "\nvoid interactive_input_00002e6c(undefined4 param_1,undefined4 input_buffer,undefined4 buffer_size)\n\n{\n  int input_result;\n  \n  print_prompt();\n  do {\n    input_result = readline(input_buffer,buffer_size);\n    if (input_result == 0) {\n      handle_input_line(param_1,input_buffer);\n    }\n    print_prompt();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "interactive_input_00002e6c",
                "param_2": "input_buffer",
                "param_3": "buffer_size",
                "iVar1": "input_result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "handle_input_line",
                "print_prompt",
                "readline"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "reboot_system_00002e9c",
            "code": "\nundefined4 reboot_system_00002e9c(void)\n\n{\n  reboot_function();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "reboot_system_00002e9c",
                "pm_reboot": "reboot_function"
            },
            "calling": [],
            "called": [
                "pm_reboot"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "execute_and_return_zero_00002eb4",
            "code": "\nundefined4 execute_and_return_zero_00002eb4(void)\n\n{\n  perform_system_check();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "execute_and_return_zero_00002eb4",
                "ps": "perform_system_check"
            },
            "calling": [],
            "called": [
                "ps"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 classStr;\n  undefined4 deviceType;\n  undefined dataBuffer [8];\n  uint readSize;\n  \n  readSize = saul_reg_read(deviceInfo,dataBuffer);\n  if ((int)readSize < 1) {\n    iprintf(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceInfo + 8);\n    classStr = saul_class_to_str(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    iprintf(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceType,classStr);\n    phydat_dump(dataBuffer,readSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "classStr",
                "uVar2": "deviceType",
                "auStack_1c": "dataBuffer",
                "local_14": "readSize"
            },
            "calling": [
                "read",
                "probe_all"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "saul_reg_read",
                "phydat_dump"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_and_probe_00002f30",
            "code": "\nvoid iterateAndProbe_00002f30(void)\n\n{\n  int index;\n  undefined4 *dataPointer;\n  \n  index = 0;\n  for (dataPointer = DAT_1fff0db0; dataPointer != (undefined4 *)0x0; dataPointer = (undefined4 *)*dataPointer) {\n    probe(index,dataPointer);\n    puts(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_and_probe_00002f30",
                "local_10": "index",
                "local_c": "dataPointer"
            },
            "calling": [
                "read"
            ],
            "called": [
                "probe",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_information_00002f74",
            "code": "\nvoid printDeviceInformation_00002f74(void)\n\n{\n  undefined4 deviceClassStr;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    puts(\"No devices found\");\n  }\n  else {\n    puts(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClassStr = saul_class_to_str(*(undefined *)(deviceList[3] + 8));\n    iprintf(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClassStr,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_information_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "deviceClassStr"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "print_device_info_00002fe0",
            "code": "\nvoid print_device_info_00002fe0(int device_count,undefined4 *argv)\n\n{\n  int comparison_result;\n  undefined4 device_id;\n  \n  if (device_count < 3) {\n    print_usage(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    comparison_result = strcmp(argv[2],&DAT_000073d4);\n    if (comparison_result == 0) {\n      probe_all_devices();\n    }\n    else {\n      device_id = atoi(argv[2]);\n      comparison_result = find_device_index(device_id);\n      if (comparison_result == 0) {\n        print_error(\"error: undefined device id given\");\n      }\n      else {\n        probe_device(device_id,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "print_device_info_00002fe0",
                "param_1": "device_count",
                "param_2": "argv",
                "iVar1": "comparison_result",
                "uVar2": "device_id",
                "iprintf": "print_usage",
                "saul_reg_find_nth": "find_device_index",
                "puts": "print_error",
                "probe_all": "probe_all_devices",
                "probe": "probe_device"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "probe",
                "saul_reg_find_nth",
                "probe_all",
                "puts",
                "strcmp",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 device_id;\n  undefined2 values [4];\n  uint num_values;\n  int device_index;\n  undefined4 device_id_str;\n  int i;\n  \n  if (argc < 4) {\n    iprintf(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    device_id_str = atoi(argv[2]);\n    device_index = saul_reg_find_nth(device_id_str);\n    if (device_index == 0) {\n      puts(\"error: undefined device given\");\n    }\n    else {\n      memset(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      num_values = argc - 3;\n      for (i = 0; i < (int)num_values; i = i + 1) {\n        device_id = atoi(argv[i + 3]);\n        values[i] = device_id;\n      }\n      iprintf(\"Writing to device #%i - %s\\n\",device_id_str,*(undefined4 *)(device_index + 8));\n      phydat_dump(values,num_values & 0xff);\n      num_values = saul_reg_write(device_index,values);\n      if ((int)num_values < 1) {\n        if (num_values == -0x86) {\n          iprintf(\"error: device #%i is not writable\\n\",device_id_str);\n        }\n        else {\n          iprintf(\"error: failure to write to device #%i\\n\",device_id_str);\n        }\n      }\n      else {\n        iprintf(\"data successfully written to device #%i\\n\",device_id_str);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "device_id",
                "auStack_20": "values",
                "local_18": "num_values",
                "local_14": "device_index",
                "local_10": "device_id_str",
                "local_c": "i"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_reg_write",
                "memset",
                "saul_reg_find_nth",
                "puts",
                "phydat_dump",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_read_write_0000316c",
            "code": "\nundefined4 handleReadWrite_0000316c(int numArgs,undefined4 *args)\n\n{\n  int strcmpResult;\n  \n  if (numArgs < 2) {\n    list();\n  }\n  else {\n    strcmpResult = strcmp(args[1],&DAT_000074ec);\n    if (strcmpResult == 0) {\n      read(numArgs,args);\n    }\n    else {\n      strcmpResult = strcmp(args[1],\"write\");\n      if (strcmpResult == 0) {\n        write(numArgs,args);\n      }\n      else {\n        iprintf(\"usage: %s read|write\\n\",*args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_read_write_0000316c",
                "param_1": "numArgs",
                "param_2": "args",
                "iVar1": "strcmpResult"
            },
            "calling": [],
            "called": [
                "list",
                "iprintf",
                "read",
                "strcmp",
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "announce_alarm_000031e0",
            "code": "\nvoid announceAlarm_000031e0(void)\n\n{\n  print(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "announce_alarm_000031e0",
                "puts": "print"
            },
            "calling": [],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)arrayOfWeekdays + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "arrayOfWeekdays"
            },
            "calling": [
                "_parse_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "initialize_params_0000328c",
            "code": "\nundefined4 initialize_params_0000328c(undefined4 *param_list,int *output_params)\n\n{\n  int result;\n  int str_end;\n  short converted_value;\n  \n  converted_value = strtol(*param_list,&str_end,10);\n  output_params[5] = converted_value + -0x76c;\n  converted_value = strtol(str_end + 1,&str_end,10);\n  output_params[4] = converted_value + -1;\n  converted_value = strtol(str_end + 1,&str_end,10);\n  output_params[3] = (int)converted_value;\n  converted_value = strtol(param_list[1],&str_end,10);\n  output_params[2] = (int)converted_value;\n  converted_value = strtol(str_end + 1,&str_end,10);\n  output_params[1] = (int)converted_value;\n  converted_value = strtol(str_end + 1,&str_end,10);\n  *output_params = (int)converted_value;\n  result = dow(output_params[5] + 0x76c,output_params[4] + 1,output_params[3]);\n  output_params[6] = result;\n  output_params[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "initialize_params_0000328c",
                "param_1": "param_list",
                "param_2": "output_params",
                "iVar1": "result",
                "local_10": "str_end",
                "local_a": "converted_value"
            },
            "calling": [
                "_rtc_setalarm",
                "_rtc_settime"
            ],
            "called": [
                "dow",
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeArray)\n\n{\n  iprintf(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",dateTimeArray[5] + 0x76c,dateTimeArray[4] + 1,dateTimeArray[3],dateTimeArray[2],\n          dateTimeArray[1],*dateTimeArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeArray"
            },
            "calling": [
                "_rtc_gettime",
                "_rtc_getalarm"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_and_print_alarm_000033c0",
            "code": "\nbool getAndPrintAlarm_000033c0(void)\n\n{\n  int errorFlag;\n  undefined alarmData [36];\n  \n  errorFlag = rtc_get_alarm(alarmData);\n  if (errorFlag != 0) {\n    puts(\"rtc: error getting alarm\");\n  }\n  else {\n    _print_time(alarmData);\n  }\n  return errorFlag != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_and_print_alarm_000033c0",
                "auStack_2c": "alarmData",
                "iVar1": "errorFlag"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_alarm",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 inputTime)\n\n{\n  int parseResult;\n  undefined4 returnCode;\n  undefined parsedTime [36];\n  \n  parseResult = _parse_time(inputTime,parsedTime);\n  if (parseResult == 0) {\n    parseResult = rtc_set_alarm(parsedTime,0x31e1,0);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting alarm\");\n      returnCode = 1;\n    }\n    else {\n      returnCode = 0;\n    }\n  }\n  else {\n    returnCode = 1;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "inputTime",
                "iVar1": "parseResult",
                "uVar2": "returnCode",
                "auStack_2c": "parsedTime"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts",
                "_parse_time",
                "rtc_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_and_print_time_00003444",
            "code": "\nbool getAndPrintTime_00003444(void)\n\n{\n  int result;\n  undefined timeArray [36];\n  \n  result = rtc_get_time(timeArray);\n  if (result != 0) {\n    puts(\"rtc: error getting time\");\n  }\n  else {\n    _print_time(timeArray);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_and_print_time_00003444",
                "iVar1": "result",
                "auStack_2c": "timeArray"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_time",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "validate_and_set_rtc_00003478",
            "code": "\nundefined4 validateAndSetRTC_00003478(undefined4 inputTime)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined parsedTime [36];\n  \n  parseResult = _parse_time(inputTime,parsedTime);\n  if (parseResult == 0) {\n    parseResult = rtc_set_time(parsedTime);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "validate_and_set_rtc_00003478",
                "param_1": "inputTime",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "parsedTime"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_set_time",
                "puts",
                "_parse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_command_information_000034c0",
            "code": "\nundefined4 printCommandInformation_000034c0(void)\n\n{\n  puts(\"usage: rtc <command> [arguments]\");\n  puts(\"commands:\");\n  puts(\"\\tpoweron\\t\\tpower the interface on\");\n  puts(\"\\tpoweroff\\tpower the interface off\");\n  puts(\"\\tclearalarm\\tdeactivate the current alarm\");\n  puts(\"\\tgetalarm\\tprint the currently alarm time\");\n  puts(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  puts(\"\\tgettime\\t\\tprint the current time\");\n  puts(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_command_information_000034c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_rtc_command_00003524",
            "code": "\nundefined4 handle_rtc_command_00003524(int num_params,int command_params)\n\n{\n  int comparison_result;\n  undefined4 return_value;\n  \n  if (num_params < 2) {\n    _rtc_usage();\n    return_value = 1;\n  }\n  else {\n    comparison_result = strncmp(*(undefined4 *)(command_params + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      rtc_poweron();\n    }\n    else {\n      comparison_result = strncmp(*(undefined4 *)(command_params + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        rtc_poweroff();\n      }\n      else {\n        comparison_result = strncmp(*(undefined4 *)(command_params + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          rtc_clear_alarm();\n        }\n        else {\n          comparison_result = strncmp(*(undefined4 *)(command_params + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            _rtc_getalarm();\n          }\n          else {\n            comparison_result = strncmp(*(undefined4 *)(command_params + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (num_params == 4)) {\n              _rtc_setalarm(command_params + 8);\n            }\n            else {\n              comparison_result = strncmp(*(undefined4 *)(command_params + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                _rtc_gettime();\n              }\n              else {\n                comparison_result = strncmp(*(undefined4 *)(command_params + 4),\"settime\",7);\n                if ((comparison_result != 0) || (num_params != 4)) {\n                  iprintf(\"unknown command or missing parameters: %s\\n\\n\",\n                          *(undefined4 *)(command_params + 4));\n                  _rtc_usage();\n                  return 1;\n                }\n                _rtc_settime(command_params + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_rtc_command_00003524",
                "param_1": "num_params",
                "param_2": "command_params",
                "iVar1": "comparison_result",
                "uVar2": "return_value"
            },
            "calling": [],
            "called": [
                "iprintf",
                "_rtc_setalarm",
                "rtc_clear_alarm",
                "strncmp",
                "_rtc_gettime",
                "_rtc_getalarm",
                "rtc_poweron",
                "rtc_poweroff",
                "_rtc_settime",
                "_rtc_usage"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "wait_for_data_synchronization_00003658",
            "code": "\nvoid waitForDataSynchronization_00003658(void)\n\n{\n  synchronizeDataBarrier(0xf);\n  synchronizeDataBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "wait_for_data_synchronization_00003658",
                "DataSynchronizationBarrier": "synchronizeDataBarrier"
            },
            "calling": [
                "pm_reboot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "reset_system_00003688",
            "code": "\nvoid resetSystem_00003688(void)\n\n{\n  reset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "reset_system_00003688",
                "NVIC_SystemReset": "reset"
            },
            "calling": [
                "_reboot_handler"
            ],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_00003694",
            "code": "\nvoid displayData_00003694(int dataAddress,byte numDataObjects)\n\n{\n  undefined4 unitStr;\n  char scaleChar;\n  uint bitMask;\n  bool isBitSet;\n  undefined formattedData [8];\n  int formattedDataLength;\n  char prefixChar;\n  byte dataIndex;\n  \n  if ((dataAddress == 0) || (3 < numDataObjects)) {\n    puts(\"Unable to display data object\");\n  }\n  else {\n    iprintf(\"Data:\");\n    for (dataIndex = 0; dataIndex < numDataObjects; dataIndex = dataIndex + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        scaleChar = (char)bitMask;\n        if (!isBitSet) {\n          scaleChar = '\\0';\n        }\n        if (scaleChar == '\\0') goto LAB_000036ee;\n        prefixChar = '\\0';\n      }\n      else {\nLAB_000036ee:\n        prefixChar = phydat_prefix_from_scale((int)*(char *)(dataAddress + 7));\n      }\n      iprintf(&DAT_000077bc);\n      if (numDataObjects < 2) {\n        iprintf(\"     \");\n      }\n      else {\n        iprintf(\"[%u] \",dataIndex);\n      }\n      if (prefixChar == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          iprintf(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)dataIndex * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          formattedDataLength = fmt_s16_dfp(formattedData,(int)*(short *)(dataAddress + (uint)dataIndex * 2),\n                                 (int)*(char *)(dataAddress + 7));\n          formattedData[formattedDataLength] = 0;\n          iprintf(&DAT_000077dc,formattedData);\n        }\n        else {\n          iprintf(\"%iE%i\",(int)*(short *)(dataAddress + (uint)dataIndex * 2),(int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        iprintf(\"%6d %c\",(int)*(short *)(dataAddress + (uint)dataIndex * 2),prefixChar);\n      }\n      unitStr = phydat_unit_to_str(*(undefined *)(dataAddress + 6));\n      iprintf(&DAT_000077e8,unitStr);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_00003694",
                "param_1": "dataAddress",
                "param_2": "numDataObjects",
                "uVar1": "unitStr",
                "cVar2": "scaleChar",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "formattedData",
                "local_10": "formattedDataLength",
                "local_a": "prefixChar",
                "local_9": "dataIndex"
            },
            "calling": [
                "probe",
                "write"
            ],
            "called": [
                "phydat_prefix_from_scale",
                "iprintf",
                "puts",
                "fmt_s16_dfp",
                "phydat_unit_to_str"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_data_address_00003810",
            "code": "\nundefined * get_data_address_00003810(undefined data_type)\n\n{\n  undefined *data_address;\n  \n  switch(data_type) {\n  case 2:\n    data_address = &DAT_000077ec;\n    break;\n  case 3:\n    data_address = &DAT_000077f0;\n    break;\n  case 4:\n    data_address = &DAT_000077f4;\n    break;\n  case 5:\n    data_address = &DAT_000077f8;\n    break;\n  case 6:\n    data_address = &DAT_000077fc;\n    break;\n  case 7:\n    data_address = (undefined *)0x7800;\n    break;\n  case 8:\n    data_address = &DAT_00007804;\n    break;\n  case 9:\n    data_address = &DAT_00007808;\n    break;\n  case 10:\n    data_address = &DAT_0000780c;\n    break;\n  case 0xb:\n    data_address = &DAT_00007810;\n    break;\n  case 0xc:\n    data_address = &DAT_00007814;\n    break;\n  case 0xd:\n    data_address = &DAT_00007818;\n    break;\n  case 0xe:\n    data_address = &DAT_0000781c;\n    break;\n  case 0xf:\n    data_address = &DAT_00007820;\n    break;\n  case 0x10:\n    data_address = &DAT_00007824;\n    break;\n  case 0x11:\n    data_address = &DAT_0000782c;\n    break;\n  default:\n    data_address = &DAT_00007834;\n    break;\n  case 0x13:\n    data_address = &DAT_00007830;\n    break;\n  case 0x15:\n    data_address = &DAT_00007828;\n  }\n  return data_address;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_data_address_00003810",
                "param_1": "data_type",
                "puVar1": "data_address"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_input_to_value_00003918",
            "code": "\nundefined4 mapInputToValue_00003918(undefined input)\n\n{\n  undefined4 mappedValue;\n  \n  switch(input) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_input_to_value_00003918",
                "param_1": "input",
                "uVar1": "mappedValue"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "map_code_to_description_000039e8",
            "code": "\nchar * mapCodeToDescription_000039e8(char code)\n\n{\n  char *description;\n  \n  switch(code) {\n  case '\\0':\n    description = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    description = \"ACT_ANY\";\n    break;\n  case 'B':\n    description = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    description = \"ACT_SERVO\";\n    break;\n  case 'D':\n    description = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    description = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    description = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    description = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    description = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    description = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    description = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    description = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    description = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    description = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    description = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    description = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    description = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    description = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    description = \"SENSE_UV\";\n    break;\n  case -0x74:\n    description = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    description = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    description = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    description = \"SENSE_CO2\";\n    break;\n  default:\n    if (code == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    description = \"CLASS_UNKNOWN\";\n  }\n  return description;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "map_code_to_description_000039e8",
                "param_1": "code",
                "pcVar1": "description"
            },
            "calling": [
                "list",
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int element_count)\n\n{\n  int counter;\n  undefined4 *current_element;\n  \n  counter = 0;\n  for (current_element = DAT_1fff0db0; (counter < element_count && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    counter = counter + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "element_count",
                "local_10": "counter",
                "local_c": "current_element"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 argument)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),argument);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "argument",
                "uVar1": "returnValue"
            },
            "calling": [
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_opcode_00003d94",
            "code": "\nundefined4 execute_opcode_00003d94(int opcode_pointer,undefined4 input_data)\n\n{\n  undefined4 output_data;\n  \n  if (opcode_pointer == 0) {\n    output_data = 0xffffffed;\n  }\n  else {\n    output_data = (**(code **)(*(int *)(opcode_pointer + 0xc) + 4))(*(undefined4 *)(opcode_pointer + 4),input_data);\n  }\n  return output_data;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_opcode_00003d94",
                "param_1": "opcode_pointer",
                "param_2": "input_data",
                "uVar1": "output_data"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "number_of_digits_00003dc4",
            "code": "\nint numberOfDigits_00003dc4(int arrayStart,uint number)\n\n{\n  uint remainder;\n  char *currentDigit;\n  uint base;\n  int count;\n  \n  count = 1;\n  if (number < 1000000000) {\n    for (base = 10; base <= number; base = base * 10) {\n      count = count + 1;\n    }\n  }\n  else {\n    count = 10;\n  }\n  if (arrayStart != 0) {\n    currentDigit = (char *)(count + arrayStart);\n    remainder = number;\n    do {\n      currentDigit = currentDigit + -1;\n      *currentDigit = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "number_of_digits_00003dc4",
                "param_1": "arrayStart",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "currentDigit",
                "local_10": "base",
                "local_c": "count"
            },
            "calling": [
                "fmt_s32_dec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "format_and_return_number_00003e58",
            "code": "\nint formatAndReturnNumber_00003e58(undefined *data,int number)\n\n{\n  int formattedLength;\n  int absoluteNumber;\n  undefined *formattedData;\n  \n  absoluteNumber = number;\n  formattedData = data;\n  if (-(number >> 0x1f) != 0) {\n    if (data != (undefined *)0x0) {\n      formattedData = data + 1;\n      *data = 0x2d;\n    }\n    absoluteNumber = -number;\n  }\n  formattedLength = fmt_u32_dec(formattedData,absoluteNumber);\n  return -(number >> 0x1f) + formattedLength;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "format_and_return_number_00003e58",
                "param_1": "data",
                "param_2": "number",
                "iVar1": "formattedLength",
                "local_18": "absoluteNumber",
                "local_14": "formattedData"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "fmt_u32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_and_print_decimal_00003e9e",
            "code": "\nundefined4 formatAndPrintDecimal_00003e9e(undefined4 value,short numDigits,undefined4 formatFlags)\n\n{\n  undefined4 result;\n  \n  result = fmt_s32_dfp(value,(int)numDigits,formatFlags);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_and_print_decimal_00003e9e",
                "param_1": "value",
                "param_2": "numDigits",
                "param_3": "formatFlags",
                "uVar1": "result"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [
                "fmt_s32_dfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_decimal_number_00003ec4",
            "code": "\nint formatDecimalNumber_00003ec4(undefined *outputBuffer,uint inputNumber,int numDigits)\n\n{\n  int result;\n  undefined4 numDigitsDecPart;\n  uint quotient;\n  int remainder;\n  int numCharacters;\n  \n  if (numDigits + 7 < 0 != SCARRY4(numDigits,7)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  numCharacters = 0;\n  if (numDigits == 0) {\n    numCharacters = fmt_s32_dec(outputBuffer,inputNumber);\n  }\n  else if (numDigits < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + numDigits * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + numDigits * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      numCharacters = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      result = fmt_s32_dec(0,quotient);\n      numCharacters = result + 1 + numCharacters;\n    }\n    else {\n      result = fmt_s32_dec(outputBuffer + numCharacters,quotient);\n      result = numCharacters + result;\n      numCharacters = result + 1;\n      outputBuffer[result] = 0x2e;\n      numDigitsDecPart = fmt_s32_dec(outputBuffer + numCharacters,remainder);\n      fmt_lpad(outputBuffer + numCharacters,numDigitsDecPart,-numDigits,0x30);\n    }\n    numCharacters = -numDigits + numCharacters;\n  }\n  else {\n    numCharacters = fmt_s32_dec(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      memset(outputBuffer + numCharacters,0x30,numDigits);\n    }\n    numCharacters = numDigits + numCharacters;\n  }\n  return numCharacters;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_decimal_number_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "numDigits",
                "iVar1": "result",
                "uVar2": "numDigitsDecPart",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "numCharacters"
            },
            "calling": [
                "fmt_s16_dfp"
            ],
            "called": [
                "core_panic",
                "memset",
                "fmt_lpad",
                "fmt_s32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_00003ff4",
            "code": "\nuint copyAndFill_00003ff4(int destOffset,uint srcLen,uint destLen,undefined fillValue)\n\n{\n  uint newDestLen;\n  \n  newDestLen = srcLen;\n  if ((srcLen < destLen) && (newDestLen = destLen, destOffset != 0)) {\n    memmove((destLen - srcLen) + destOffset,destOffset,srcLen);\n    memset(destOffset,fillValue,destLen - srcLen);\n  }\n  return newDestLen;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_00003ff4",
                "param_1": "destOffset",
                "param_2": "srcLen",
                "param_3": "destLen",
                "param_4": "fillValue",
                "uVar1": "newDestLen"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "memset",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "convert_string_to_number_00004042",
            "code": "\nvoid convertStringToNumber_00004042(undefined4 stringToConvert)\n\n{\n  strtol(stringToConvert,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "convert_string_to_number_00004042",
                "param_1": "stringToConvert"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "decode_and_process_data_0000404c",
            "code": "\nundefined4 decode_and_process_data_0000404c(uint *output_data,int *input_data)\n\n{\n  int current_value;\n  int *additional_data;\n  uint value;\n  ushort flags;\n  int step;\n  code *decode_function;\n  int remaining_length;\n  uint original_value;\n  bool bVar9;\n  \n  flags = *(ushort *)(input_data + 3);\n  value = (uint)flags;\n  if ((int)(value << 0x1c) < 0) {\n    current_value = input_data[4];\n    if (current_value != 0) {\n      step = value << 0x1e;\n      bVar9 = step == 0;\n      remaining_length = *input_data;\n      if (bVar9) {\n        step = input_data[5];\n      }\n      *input_data = current_value;\n      if (!bVar9) {\n        step = 0;\n      }\n      input_data[2] = step;\n      for (remaining_length = remaining_length - current_value; 0 < remaining_length; remaining_length = remaining_length - step) {\n        step = (*(code *)input_data[10])(output_data,input_data[8],current_value,remaining_length);\n        if (step < 1) {\n          *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n          return 0xffffffff;\n        }\n        current_value = current_value + step;\n      }\n    }\n  }\n  else {\n    if ((input_data[1] < 1) && (input_data[0x10] < 1)) {\n      return 0;\n    }\n    decode_function = (code *)input_data[0xb];\n    if (decode_function == (code *)0x0) {\n      return 0;\n    }\n    original_value = *output_data;\n    *output_data = 0;\n    if ((flags & 0x1000) == 0) {\n      current_value = (*decode_function)(output_data,input_data[8],value & 0x1000,1);\n      if ((current_value == -1) && (value = *output_data, value != 0)) {\n        if ((value == 0x1d) || (value == 0x16)) {\n          *output_data = original_value;\n          return 0;\n        }\n        flags = *(ushort *)(input_data + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      current_value = input_data[0x15];\n    }\n    if (((int)((uint)*(ushort *)(input_data + 3) << 0x1d) < 0) &&\n       (current_value = current_value - input_data[1], input_data[0xd] != 0)) {\n      current_value = current_value - input_data[0x10];\n    }\n    current_value = (*(code *)input_data[0xb])(output_data,input_data[8],current_value,0);\n    flags = *(ushort *)(input_data + 3);\n    if ((current_value == -1) &&\n       ((0x1d < *output_data || (-1 < (int)((0x20400001U >> (*output_data & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(input_data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    input_data[1] = 0;\n    *input_data = input_data[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((current_value != -1 || (*output_data == 0)))) {\n      input_data[0x15] = current_value;\n    }\n    additional_data = (int *)input_data[0xd];\n    *output_data = original_value;\n    if (additional_data != (int *)0x0) {\n      if (additional_data != input_data + 0x11) {\n        _free_r(output_data);\n      }\n      input_data[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "decode_and_process_data_0000404c",
                "param_1": "output_data",
                "param_2": "input_data",
                "iVar1": "current_value",
                "piVar2": "additional_data",
                "uVar3": "value",
                "uVar4": "flags",
                "iVar5": "step",
                "pcVar6": "decode_function",
                "iVar7": "remaining_length",
                "uVar8": "original_value"
            },
            "calling": [
                "_fflush_r",
                "__srefill_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "flush_buffer_if_needed_00004158",
            "code": "\nundefined4 flushBufferIfNeeded_00004158(int inputBufferAddress,undefined4 *ioContext)\n\n{\n  undefined4 status;\n  \n  if (ioContext[4] != 0) {\n    if ((inputBufferAddress != 0) && (*(int *)(inputBufferAddress + 0x18) == 0)) {\n      initializeStandardStreams();\n    }\n    if (ioContext == &DAT_000079b8) {\n      ioContext = *(undefined4 **)(inputBufferAddress + 4);\n    }\n    else if (ioContext == (undefined4 *)&DAT_000079d8) {\n      ioContext = *(undefined4 **)(inputBufferAddress + 8);\n    }\n    else if (ioContext == (undefined4 *)&DAT_00007998) {\n      ioContext = *(undefined4 **)(inputBufferAddress + 0xc);\n    }\n    if (*(short *)(ioContext + 3) != 0) {\n      if ((-1 < (int)(ioContext[0x19] << 0x1f)) && (-1 < (int)*(short *)(ioContext + 3) << 0x16)) {\n        acquireRecursiveMutex(fileDescriptor);\n      }\n      status = flushIOBuffer(inputBufferAddress,ioContext);\n      if ((int)(ioContext[0x19] << 0x1f) < 0) {\n        return status;\n      }\n      if ((int)((uint)*(ushort *)(ioContext + 3) << 0x16) < 0) {\n        return status;\n      }\n      releaseRecursiveMutex(fileDescriptor);\n      return status;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "flush_buffer_if_needed_00004158",
                "param_1": "inputBufferAddress",
                "param_2": "ioContext",
                "uVar1": "status",
                "__sinit": "initializeStandardStreams",
                "__retarget_lock_acquire_recursive": "acquireRecursiveMutex",
                "__sflush_r": "flushIOBuffer",
                "__retarget_lock_release_recursive": "releaseRecursiveMutex",
                "param_2[0x16]": "fileDescriptor"
            },
            "calling": [
                "fflush",
                "__swbuf_r",
                "__srefill_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "flush_buffer_000041d0",
            "code": "\nuint flushBuffer_000041d0(int bufferAddress,undefined4 offset,undefined4 size)\n\n{\n  uint result;\n  int loopCounter;\n  dword *relEntry;\n  int sectionOffset;\n  uint errorFlags;\n  int innerLoopCounter;\n  undefined4 *bufferAddressPtr;\n  \n  if (bufferAddress == 0) {\n    bufferAddressPtr = &DAT_000079f8;\n    relEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    errorFlags = 0;\n    do {\n      innerLoopCounter = relEntry[1];\n      sectionOffset = relEntry[2];\n      while (innerLoopCounter = innerLoopCounter + -1, -1 < innerLoopCounter) {\n        if ((1 < *(ushort *)(sectionOffset + 0xc)) && (loopCounter = *(short *)(sectionOffset + 0xe) + 1, loopCounter != 0)) {\n          result = _fflush_r(0x1fff0284,sectionOffset,size,loopCounter,bufferAddressPtr);\n          errorFlags = errorFlags | result;\n        }\n        sectionOffset = sectionOffset + 0x68;\n      }\n      relEntry = (dword *)*relEntry;\n    } while (relEntry != (dword *)0x0);\n    return errorFlags;\n  }\n  errorFlags = _fflush_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,bufferAddress);\n  return errorFlags;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "flush_buffer_000041d0",
                "param_1": "bufferAddress",
                "param_2": "offset",
                "param_3": "size",
                "uVar1": "result",
                "iVar2": "loopCounter",
                "pdVar3": "relEntry",
                "iVar4": "sectionOffset",
                "uVar5": "errorFlags",
                "iVar6": "innerLoopCounter",
                "puVar7": "bufferAddressPtr"
            },
            "calling": [
                "print_prompt"
            ],
            "called": [
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_structure_000041f4",
            "code": "\nvoid initializeDataStructure_000041f4(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[25] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[6] = 0;\n  memset(dataStructure + 0x17,0,8);\n  dataStructure[9] = 0x4dc9;\n  dataStructure[10] = 0x4def;\n  dataStructure[11] = 0x4e27;\n  dataStructure[8] = dataStructure;\n  dataStructure[12] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "dataStructure[1]",
                "param_1[4]": "dataStructure[4]",
                "param_1[5]": "dataStructure[5]",
                "param_1[2]": "dataStructure[2]",
                "param_1[0x19]": "dataStructure[25]",
                "param_1[6]": "dataStructure[6]",
                "param_1[9]": "dataStructure[9]",
                "param_1[10]": "dataStructure[10]",
                "param_1[0xb]": "dataStructure[11]",
                "param_1[8]": "dataStructure[8]",
                "param_1[0xc]": "dataStructure[12]"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_memory_00004248",
            "code": "\nundefined4 * allocateMemory_00004248(undefined4 size,int count)\n\n{\n  undefined4 *allocatedMemory;\n  int memorySize;\n  \n  memorySize = (count + -1) * 0x68;\n  allocatedMemory = (undefined4 *)_malloc_r(size,memorySize + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = count;\n    allocatedMemory[2] = allocatedMemory + 3;\n    memset(allocatedMemory + 3,0,memorySize + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_memory_00004248",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "allocatedMemory",
                "iVar2": "memorySize"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "acquire_recursive_lock_00004274",
            "code": "\nvoid acquire_recursive_lock_00004274(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "acquire_recursive_lock_00004274"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "release_recursive_lock_00004280",
            "code": "\nvoid releaseRecursiveLock_00004280(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "release_recursive_lock_00004280"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "acquire_recursive_retarget_lock_0000428c",
            "code": "\nvoid acquireRecursiveRetargetLock_0000428c(void)\n\n{\n  acquireRecursiveRetargetLock_0000428c(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "acquire_recursive_retarget_lock_0000428c",
                "__retarget_lock_acquire_recursive": "acquireRecursiveRetargetLock"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_structure_000042a4",
            "code": "\nvoid initializeDataStructure_000042a4(int dataStructurePointer)\n\n{\n  undefined4 flagValue;\n  \n  acquireLock();\n  if (*(int *)(dataStructurePointer + 0x18) == 0) {\n    *(undefined4 *)(dataStructurePointer + 0x48) = 0;\n    *(undefined4 *)(dataStructurePointer + 0x4c) = 0;\n    *(undefined4 *)(dataStructurePointer + 0x50) = 0;\n    flagValue = 0x1fff0284;\n    *(undefined **)(dataStructurePointer + 0x28) = &DAT_0000423d;\n    if (dataStructurePointer == 0x1fff0284) {\n      flagValue = 1;\n    }\n    if (dataStructurePointer == 0x1fff0284) {\n      *(undefined4 *)(dataStructurePointer + 0x18) = flagValue;\n    }\n    flagValue = setFloatPointer(dataStructurePointer);\n    *(undefined4 *)(dataStructurePointer + 4) = flagValue;\n    flagValue = setFloatPointer(dataStructurePointer);\n    *(undefined4 *)(dataStructurePointer + 8) = flagValue;\n    flagValue = setFloatPointer(dataStructurePointer);\n    *(undefined4 *)(dataStructurePointer + 0xc) = flagValue;\n    initializePointer(*(undefined4 *)(dataStructurePointer + 4),4,0);\n    initializePointer(*(undefined4 *)(dataStructurePointer + 8),9,1);\n    initializePointer(*(undefined4 *)(dataStructurePointer + 0xc),0x12,2);\n    *(undefined4 *)(dataStructurePointer + 0x18) = 1;\n  }\n  releaseRecursiveLock(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_structure_000042a4",
                "param_1": "dataStructurePointer",
                "uVar1": "flagValue",
                "__sinit_lock_acquire": "acquireLock",
                "__sfp": "setFloatPointer",
                "std": "initializePointer",
                "__retarget_lock_release_recursive": "releaseRecursiveLock"
            },
            "calling": [
                "iprintf",
                "_fflush_r",
                "__swbuf_r",
                "_vfprintf_r",
                "__srefill_r",
                "__sfp",
                "puts",
                "__srget_r",
                "__swsetup_r",
                "getchar",
                "putchar"
            ],
            "called": [
                "std",
                "__sinit_lock_acquire",
                "__sfp",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_resource_manager_00004314",
            "code": "\nundefined4 * initializeResourceManager_00004314(undefined4 *resourceManager)\n\n{\n  dword newResourceSize;\n  int resourceCount;\n  undefined4 *currentResource;\n  dword *linkedListPtr;\n  \n  __sfp_lock_acquire();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    __sinit(0x1fff0284);\n  }\n  linkedListPtr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    resourceCount = linkedListPtr[1];\n    currentResource = (undefined4 *)linkedListPtr[2];\n    while (resourceCount = resourceCount + -1, -1 < resourceCount) {\n      if (*(short *)(currentResource + 3) == 0) {\n        currentResource[3] = 0xffff0001;\n        currentResource[0x19] = 0;\n        __retarget_lock_init_recursive(currentResource + 0x16);\n        __sfp_lock_release();\n        currentResource[1] = 0;\n        currentResource[2] = 0;\n        currentResource[4] = 0;\n        currentResource[5] = 0;\n        *currentResource = 0;\n        currentResource[6] = 0;\n        memset(currentResource + 0x17,0,8);\n        currentResource[0xd] = 0;\n        currentResource[0xe] = 0;\n        currentResource[0x12] = 0;\n        currentResource[0x13] = 0;\n        return currentResource;\n      }\n      currentResource = currentResource + 0x1a;\n    }\n    if (*linkedListPtr == 0) {\n      newResourceSize = __sfmoreglue(resourceManager,4);\n      *linkedListPtr = newResourceSize;\n      if (newResourceSize == 0) {\n        __sfp_lock_release();\n        *resourceManager = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    linkedListPtr = (dword *)*linkedListPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_resource_manager_00004314",
                "param_1": "resourceManager",
                "dVar1": "newResourceSize",
                "iVar2": "resourceCount",
                "puVar3": "currentResource",
                "pdVar4": "linkedListPtr"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfp_lock_acquire",
                "memset",
                "__sfp_lock_release",
                "__sfmoreglue",
                "__sinit",
                "__retarget_lock_init_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int inputPtr,code *callback)\n\n{\n  uint uVar1;\n  int *ptrIterator;\n  int innerVar1;\n  uint result;\n  int innerVar2;\n  \n  ptrIterator = (int *)(inputPtr + 0x48);\n  result = 0;\n  do {\n    innerVar2 = ptrIterator[1];\n    innerVar1 = ptrIterator[2];\n    while (innerVar2 = innerVar2 + -1, -1 < innerVar2) {\n      if ((1 < *(ushort *)(innerVar1 + 0xc)) && (*(short *)(innerVar1 + 0xe) != -1)) {\n        uVar1 = (*callback)(innerVar1);\n        result = result | uVar1;\n      }\n      innerVar1 = innerVar1 + 0x68;\n    }\n    ptrIterator = (int *)*ptrIterator;\n  } while (ptrIterator != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "inputPtr",
                "param_2": "callback",
                "piVar2": "ptrIterator",
                "iVar3": "innerVar1",
                "uVar4": "result",
                "iVar5": "innerVar2"
            },
            "calling": [
                "__srefill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "read_byte_from_memory_00004418",
            "code": "\nuint read_byte_from_memory_00004418(void)\n\n{\n  dword chunk_offset;\n  uint byte_value;\n  byte **byte_pointer;\n  byte *byte_array;\n  \n  chunk_offset = memory_chunk[16].r_offset;\n  if ((memory_chunk[16].r_offset != 0) &&\n     (*(int *)(memory_chunk[16].r_offset + 0x18) == 0)) {\n    __sinit(memory_chunk[16].r_offset);\n  }\n  byte_pointer = *(byte ***)(chunk_offset + 4);\n  if ((chunk_offset != 0) && (*(int *)(chunk_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (byte_pointer == (byte **)&DAT_000079b8) {\n    byte_pointer = *(byte ***)(chunk_offset + 4);\n  }\n  else if (byte_pointer == (byte **)&DAT_000079d8) {\n    byte_pointer = *(byte ***)(chunk_offset + 8);\n  }\n  else if (byte_pointer == (byte **)&DAT_00007998) {\n    byte_pointer = *(byte ***)(chunk_offset + 0xc);\n  }\n  if ((-1 < (int)byte_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pointer + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(byte_pointer[0x16]);\n  }\n  byte_array = byte_pointer[1];\n  byte_pointer[1] = byte_array + -1;\n  if ((int)(byte_array + -1) < 0) {\n    byte_value = __srget_r(chunk_offset,byte_pointer);\n  }\n  else {\n    byte_array = *byte_pointer;\n    *byte_pointer = byte_array + 1;\n    byte_value = (uint)*byte_array;\n  }\n  if ((-1 < (int)byte_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pointer + 3) << 0x16))) {\n    __retarget_lock_release_recursive(byte_pointer[0x16]);\n  }\n  return byte_value;\n}\n\n",
            "renaming": {
                "FUN_00004418": "read_byte_from_memory_00004418",
                "Elf32_Rel_ARRAY_1fff0200": "memory_chunk",
                "dVar1": "chunk_offset",
                "uVar2": "byte_value",
                "ppbVar3": "byte_pointer",
                "pbVar4": "byte_array"
            },
            "calling": [
                "readline"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__srget_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *dateTime,uint *result)\n\n{\n  int quotient;\n  uint weeks;\n  uint days;\n  uint hours;\n  uint minutes;\n  undefined4 temp1;\n  undefined4 temp2;\n  uint temp3;\n  bool isNegative;\n  \n  temp1 = *dateTime;\n  temp2 = dateTime[1];\n  quotient = __aeabi_ldivmod(temp1,temp2,0x15180,0);\n  days = 0x15180;\n  __aeabi_ldivmod(temp1,temp2,0x15180,0);\n  isNegative = (int)days < 0;\n  if (isNegative) {\n    days = days + 0x15180;\n  }\n  if (isNegative) {\n    weeks = quotient + 0xafa6b;\n  }\n  else {\n    weeks = quotient + 0xafa6c;\n  }\n  result[2] = days / 0xe10;\n  result[1] = (days % 0xe10) / 0x3c;\n  *result = (days % 0xe10) % 0x3c;\n  result[6] = (weeks + 3) % 7;\n  days = weeks;\n  if ((int)weeks < 0) {\n    days = weeks - 0x23ab0;\n  }\n  weeks = (days / 0x23ab1) * -0x23ab1 + weeks;\n  hours = ((weeks / 0x8eac + weeks) - weeks / 0x5b4) - weeks / 0x23ab0;\n  minutes = hours / 0x16d;\n  weeks = (minutes / 100 - hours / 0x5b4) + weeks + minutes * -0x16d;\n  temp3 = weeks * 5 + 2;\n  hours = temp3 / 0x99;\n  if (temp3 < 0x5fa) {\n    quotient = 2;\n  }\n  else {\n    quotient = -10;\n  }\n  temp3 = hours + quotient;\n  quotient = (days / 0x23ab1) * 400 + minutes;\n  if (temp3 < 2) {\n    quotient = quotient + 1;\n  }\n  if (weeks < 0x132) {\n    if (((minutes & 3) == 0) && (minutes != (minutes / 100) * 100)) {\n      days = 1;\n    }\n    else {\n      days = (uint)(minutes % 400 == 0);\n    }\n    days = weeks + 0x3b + days;\n  }\n  else {\n    days = weeks - 0x132;\n  }\n  result[7] = days;\n  result[3] = (weeks + 1) - (hours * 0x99 + 2) / 5;\n  result[4] = temp3;\n  result[5] = quotient - 0x76c;\n  result[8] = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "dateTime",
                "param_2": "result",
                "iVar1": "quotient",
                "uVar2": "weeks",
                "uVar3": "days",
                "uVar4": "hours",
                "uVar5": "minutes",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "bVar9": "isNegative"
            },
            "calling": [
                "rtc_get_alarm",
                "rtc_get_time"
            ],
            "called": [
                "__aeabi_ldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_init_functions_0000459c",
            "code": "\nvoid execute_init_functions_0000459c(void)\n\n{\n  code **function_array;\n  int index;\n  \n  function_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_array)();\n    function_array = function_array + 1;\n  }\n  _init();\n  function_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_array)();\n    function_array = function_array + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_init_functions_0000459c",
                "ppcVar1": "function_array",
                "iVar2": "index"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "__sfp"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "__sinit_lock_acquire",
                "_fflush_r",
                "__env_lock",
                "__sfp_lock_acquire",
                "__malloc_lock",
                "_vfprintf_r",
                "puts",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "__env_unlock",
                "_fflush_r",
                "__malloc_unlock",
                "_vfprintf_r",
                "puts",
                "__sfp_lock_release",
                "__sinit",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_memory_000045ee",
            "code": "\nvoid copyMemory_000045ee(undefined *destination,undefined *source,int length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = source + length;\n  if ((source < destination) && (destination < src_ptr)) {\n    dest_ptr = destination + length;\n    while (dest_ptr != destination) {\n      src_ptr = src_ptr + -1;\n      dest_ptr = dest_ptr + -1;\n      *dest_ptr = *src_ptr;\n    }\n  }\n  else {\n    destination = destination + -1;\n    for (; source != src_ptr; source = source + 1) {\n      destination = destination + 1;\n      *destination = *source;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_memory_000045ee",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "calling": [
                "fmt_lpad"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "set_array_elements_00004622",
            "code": "\nvoid setArrayElements_00004622(undefined *array,undefined value,int arrayLength)\n\n{\n  undefined *arrayEnd;\n  \n  arrayEnd = array + arrayLength;\n  for (; array != arrayEnd; array = array + 1) {\n    *array = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "set_array_elements_00004622",
                "param_1": "array",
                "param_2": "value",
                "param_3": "arrayLength",
                "puVar1": "arrayEnd"
            },
            "calling": [
                "std",
                "fmt_lpad",
                "__sfp",
                "fmt_s32_dfp",
                "__sfmoreglue",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTime,uint daysToAdd,undefined4 unused)\n\n{\n  int daysInPreviousMonths;\n  uint tempVar1;\n  uint tempVar2;\n  int daysInCurrentMonth;\n  bool isNegative;\n  uint *tempArray;\n  uint currentDay;\n  undefined4 unused;\n  \n  tempArray = dateTime;\n  currentDay = daysToAdd;\n  unused = unused;\n  if (0x3b < *dateTime) {\n    div(&tempArray,*dateTime,0x3c);\n    tempVar1 = dateTime[1] + (int)tempArray;\n    dateTime[1] = tempVar1;\n    if ((int)currentDay < 0) {\n      tempVar1 = tempVar1 - 1;\n      *dateTime = currentDay + 0x3c;\n    }\n    else {\n      *dateTime = currentDay;\n    }\n    if ((int)currentDay < 0) {\n      dateTime[1] = tempVar1;\n    }\n  }\n  if (0x3b < dateTime[1]) {\n    div(&tempArray,dateTime[1],0x3c);\n    isNegative = (int)currentDay < 0;\n    tempVar2 = dateTime[2] + (int)tempArray;\n    dateTime[2] = tempVar2;\n    tempVar1 = currentDay;\n    if (isNegative) {\n      tempVar1 = currentDay + 0x3c;\n      tempVar2 = tempVar2 - 1;\n    }\n    if (!isNegative) {\n      dateTime[1] = tempVar1;\n    }\n    if (isNegative) {\n      dateTime[1] = tempVar1;\n    }\n    if (isNegative) {\n      dateTime[2] = tempVar2;\n    }\n  }\n  if (0x17 < dateTime[2]) {\n    div(&tempArray,dateTime[2],0x18);\n    isNegative = (int)currentDay < 0;\n    tempVar2 = dateTime[3] + (int)tempArray;\n    dateTime[3] = tempVar2;\n    tempVar1 = currentDay;\n    if (isNegative) {\n      tempVar1 = currentDay + 0x18;\n      tempVar2 = tempVar2 - 1;\n    }\n    if (!isNegative) {\n      dateTime[2] = tempVar1;\n    }\n    if (isNegative) {\n      dateTime[2] = tempVar1;\n    }\n    if (isNegative) {\n      dateTime[3] = tempVar2;\n    }\n  }\n  if (0xb < dateTime[4]) {\n    div(&tempArray,dateTime[4],0xc);\n    isNegative = (int)currentDay < 0;\n    tempVar1 = dateTime[5] + (int)tempArray;\n    dateTime[5] = tempVar1;\n    if (isNegative) {\n      currentDay = currentDay + 0xc;\n      tempVar1 = tempVar1 - 1;\n    }\n    if (!isNegative) {\n      dateTime[4] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[4] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[5] = tempVar1;\n    }\n  }\n  tempVar1 = dateTime[5];\n  if ((tempVar1 & 3) == 0) {\n    if (tempVar1 == (tempVar1 / 100) * 100) {\n      if ((tempVar1 + 0x76c) % 400 == 0) {\n        daysInCurrentMonth = 0x1d;\n      }\n      else {\n        daysInCurrentMonth = 0x1c;\n      }\n    }\n    else {\n      daysInCurrentMonth = 0x1d;\n    }\n  }\n  else {\n    daysInCurrentMonth = 0x1c;\n  }\n  if ((int)dateTime[3] < 1) {\n    while ((int)dateTime[3] < 1) {\n      tempVar1 = dateTime[4];\n      dateTime[4] = tempVar1 - 1;\n      if (tempVar1 - 1 == 0xffffffff) {\n        tempVar2 = dateTime[5];\n        tempVar1 = tempVar2 - 1;\n        dateTime[4] = 0xb;\n        dateTime[5] = tempVar1;\n        if ((tempVar1 & 3) == 0) {\n          if (tempVar1 == (tempVar1 / 100) * 100) {\n            if ((tempVar2 + 0x76b) % 400 == 0) {\n              daysInCurrentMonth = 0x1d;\n            }\n            else {\n              daysInCurrentMonth = 0x1c;\n            }\n          }\n          else {\n            daysInCurrentMonth = 0x1d;\n          }\n        }\n        else {\n          daysInCurrentMonth = 0x1c;\n        }\n      }\n      daysInPreviousMonths = daysInCurrentMonth;\n      if (dateTime[4] != 1) {\n        daysInPreviousMonths = (&DAT_000079fc)[dateTime[4]];\n      }\n      dateTime[3] = daysInPreviousMonths + dateTime[3];\n    }\n  }\n  else {\n    while( true ) {\n      tempVar1 = dateTime[4];\n      daysInPreviousMonths = daysInCurrentMonth;\n      if (tempVar1 != 1) {\n        daysInPreviousMonths = (&DAT_000079fc)[tempVar1];\n      }\n      if ((int)dateTime[3] <= daysInPreviousMonths) break;\n      dateTime[3] = dateTime[3] - daysInPreviousMonths;\n      dateTime[4] = tempVar1 + 1;\n      if (tempVar1 + 1 == 0xc) {\n        tempVar2 = dateTime[5];\n        tempVar1 = tempVar2 + 1;\n        dateTime[4] = 0;\n        dateTime[5] = tempVar1;\n        if ((tempVar1 & 3) == 0) {\n          if (tempVar1 % 100 == 0) {\n            if ((tempVar2 + 0x76d) % 400 == 0) {\n              daysInCurrentMonth = 0x1d;\n            }\n            else {\n              daysInCurrentMonth = 0x1c;\n            }\n          }\n          else {\n            daysInCurrentMonth = 0x1d;\n          }\n        }\n        else {\n          daysInCurrentMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTime",
                "param_2": "daysToAdd",
                "param_3": "unused",
                "iVar1": "daysInPreviousMonths",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "iVar4": "daysInCurrentMonth",
                "bVar5": "isNegative",
                "local_20": "tempArray",
                "local_1c": "currentDay",
                "uStack_18": "unused"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "div"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_adjusted_date_time_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateAdjustedDateTime_000047e4(int *dateTimeParams)\n\n{\n  longlong totalDays;\n  longlong adjustedDateTime;\n  int *tzInfo;\n  uint yearRemainder;\n  int leapYearOffset;\n  int calculationOffset1;\n  int dayOfWeekAdjustedDateTime;\n  uint yearDivisibleBy4;\n  uint tempYear;\n  uint yearLocalOffset;\n  int yearOffset;\n  uint yearInSeconds;\n  uint isNegativeYear;\n  uint absYear;\n  uint adjustedDateTimeDays;\n  bool isLeapYear;\n  \n  tzInfo = (int *)__gettzinfo();\n  validate_structure(dateTimeParams);\n  yearInSeconds = dateTimeParams[5];\n  yearOffset = dateTimeParams[3] + -1 + *(int *)(&DAT_00007a2c + dateTimeParams[4] * 4);\n  if (((1 < dateTimeParams[4]) && ((yearInSeconds & 3) == 0)) &&\n     ((yearInSeconds != (yearInSeconds / 100) * 100 || (yearInSeconds + 0x76c == ((yearInSeconds + 0x76c) / 400) * 400)))) {\n    yearOffset = yearOffset + 1;\n  }\n  dateTimeParams[7] = yearOffset;\n  if (20000 < (int)&DAT_00002710 + yearInSeconds) {\n    dayOfWeekAdjustedDateTime = -1;\n    leapYearOffset = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)yearInSeconds < 0x47) {\n    if (yearInSeconds != 0x46) {\n      for (tempYear = 0x45; (int)yearInSeconds < (int)tempYear; tempYear = tempYear - 1) {\n        if ((tempYear & 3) == 0) {\n          if (tempYear == (tempYear / 100) * 100) {\n            if ((tempYear + 0x76c) % 400 == 0) {\n              dayOfWeekAdjustedDateTime = 0x16e;\n            }\n            else {\n              dayOfWeekAdjustedDateTime = 0x16d;\n            }\n          }\n          else {\n            dayOfWeekAdjustedDateTime = 0x16e;\n          }\n        }\n        else {\n          dayOfWeekAdjustedDateTime = 0x16d;\n        }\n        yearOffset = yearOffset - dayOfWeekAdjustedDateTime;\n      }\n      if ((tempYear & 3) == 0) {\n        if (yearInSeconds == (yearInSeconds / 100) * 100) {\n          dayOfWeekAdjustedDateTime = 0x16d;\n          if ((yearInSeconds + 0x76c) % 400 == 0) {\n            dayOfWeekAdjustedDateTime = 0x16e;\n          }\n        }\n        else {\n          dayOfWeekAdjustedDateTime = 0x16e;\n        }\n      }\n      else {\n        dayOfWeekAdjustedDateTime = 0x16d;\n      }\n      yearOffset = yearOffset - dayOfWeekAdjustedDateTime;\n    }\n  }\n  else {\n    tempYear = 0x46;\n    do {\n      if ((tempYear & 3) == 0) {\n        if (tempYear % 100 == 0) {\n          if ((tempYear + 0x76c) % 400 == 0) {\n            dayOfWeekAdjustedDateTime = 0x16e;\n          }\n          else {\n            dayOfWeekAdjustedDateTime = 0x16d;\n          }\n        }\n        else {\n          dayOfWeekAdjustedDateTime = 0x16e;\n        }\n      }\n      else {\n        dayOfWeekAdjustedDateTime = 0x16d;\n      }\n      tempYear = tempYear + 1;\n      yearOffset = yearOffset + dayOfWeekAdjustedDateTime;\n    } while (yearInSeconds != tempYear);\n  }\n  totalDays = (longlong)yearOffset * 0x15180 + (longlong)(dateTimeParams[2] * 0xe10 + dateTimeParams[1] * 0x3c + *dateTimeParams)\n  ;\n  adjustedDateTimeDays = (uint)totalDays;\n  dayOfWeekAdjustedDateTime = (int)((ulonglong)totalDays >> 0x20);\n  __tz_lock();\n  _tzset_unlocked();\n  tempYear = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    yearInSeconds = tzInfo[10];\n    dayOfWeekAdjustedDateTime = (uint)totalDays + yearInSeconds;\n    leapYearOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)yearInSeconds >> 0x1f) + (uint)CARRY4((uint)totalDays,yearInSeconds);\n  }\n  else {\n    absYear = dateTimeParams[8];\n    isNegativeYear = absYear;\n    if (0 < (int)absYear) {\n      isNegativeYear = 1;\n    }\n    if ((tzInfo[1] == dateTimeParams[5] + 0x76c) || (leapYearOffset = __tzcalc_limits(), leapYearOffset != 0)) {\n      yearLocalOffset = tzInfo[0x14];\n      yearRemainder = tzInfo[0x12];\n      yearDivisibleBy4 = tzInfo[10];\n      tempYear = yearRemainder - yearDivisibleBy4;\n      leapYearOffset = (tzInfo[0x13] - ((int)yearDivisibleBy4 >> 0x1f)) - (uint)(yearRemainder < yearDivisibleBy4);\n      if (((int)((dayOfWeekAdjustedDateTime - leapYearOffset) - (uint)(adjustedDateTimeDays < tempYear)) < 0 ==\n           (SBORROW4(dayOfWeekAdjustedDateTime,leapYearOffset) != SBORROW4(dayOfWeekAdjustedDateTime - leapYearOffset,(uint)(adjustedDateTimeDays < tempYear)))) &&\n         (calculationOffset1 = (tzInfo[0x13] - ((int)yearLocalOffset >> 0x1f)) - (uint)(yearRemainder < yearLocalOffset),\n         isLeapYear = adjustedDateTimeDays < yearRemainder - yearLocalOffset,\n         (int)((dayOfWeekAdjustedDateTime - calculationOffset1) - (uint)isLeapYear) < 0 !=\n         (SBORROW4(dayOfWeekAdjustedDateTime,calculationOffset1) != SBORROW4(dayOfWeekAdjustedDateTime - calculationOffset1,(uint)isLeapYear)))) goto LAB_00004a88;\n      yearRemainder = tzInfo[8] - yearLocalOffset;\n      calculationOffset1 = (tzInfo[9] - ((int)yearLocalOffset >> 0x1f)) - (uint)((uint)tzInfo[8] < yearLocalOffset);\n      if (*tzInfo != 0) {\n        if ((int)((dayOfWeekAdjustedDateTime - calculationOffset1) - (uint)(adjustedDateTimeDays < yearRemainder)) < 0 ==\n            (SBORROW4(dayOfWeekAdjustedDateTime,calculationOffset1) != SBORROW4(dayOfWeekAdjustedDateTime - calculationOffset1,(uint)(adjustedDateTimeDays < yearRemainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempYear = 0;\n        if ((int)absYear < 0) goto LAB_00004934;\nLAB_00004a14:\n        adjustedDateTimeDays = isNegativeYear ^ tempYear;\n        isNegativeYear = tempYear;\n        if (adjustedDateTimeDays == 1) {\n          if (tempYear == 0) {\n            dayOfWeekAdjustedDateTime = yearLocalOffset - yearDivisibleBy4;\n          }\n          else {\n            dayOfWeekAdjustedDateTime = yearDivisibleBy4 - yearLocalOffset;\n          }\n          leapYearOffset = dateTimeParams[3];\n          *dateTimeParams = *dateTimeParams + dayOfWeekAdjustedDateTime;\n          adjustedDateTime = totalDays + dayOfWeekAdjustedDateTime;\n          validate_structure(dateTimeParams);\n          leapYearOffset = dateTimeParams[3] - leapYearOffset;\n          totalDays = totalDays + dayOfWeekAdjustedDateTime;\n          if (leapYearOffset != 0) {\n            if (leapYearOffset < 2) {\n              if (leapYearOffset == -2 || leapYearOffset + 2 < 0 != SCARRY4(leapYearOffset,2)) {\n                leapYearOffset = 1;\n              }\n            }\n            else {\n              leapYearOffset = -1;\n            }\n            dayOfWeekAdjustedDateTime = leapYearOffset + dateTimeParams[7];\n            yearOffset = yearOffset + leapYearOffset;\n            if (dayOfWeekAdjustedDateTime < 0) {\n              tempYear = yearInSeconds - 1;\n              if ((tempYear & 3) == 0) {\n                if (tempYear == (tempYear / 100) * 100) {\n                  dayOfWeekAdjustedDateTime = 0x16d;\n                  if ((yearInSeconds + 0x76b) % 400 != 0) {\n                    dayOfWeekAdjustedDateTime = 0x16c;\n                  }\n                }\n                else {\n                  dayOfWeekAdjustedDateTime = 0x16d;\n                }\n              }\n              else {\n                dayOfWeekAdjustedDateTime = 0x16c;\n              }\n            }\n            else {\n              if ((yearInSeconds & 3) == 0) {\n                if (yearInSeconds == (yearInSeconds / 100) * 100) {\n                  leapYearOffset = 0x16d;\n                  if ((yearInSeconds + 0x76c) % 400 == 0) {\n                    leapYearOffset = 0x16e;\n                  }\n                }\n                else {\n                  leapYearOffset = 0x16e;\n                }\n              }\n              else {\n                leapYearOffset = 0x16d;\n              }\n              if (leapYearOffset <= dayOfWeekAdjustedDateTime) {\n                dayOfWeekAdjustedDateTime = dayOfWeekAdjustedDateTime - leapYearOffset;\n              }\n            }\n            dateTimeParams[7] = dayOfWeekAdjustedDateTime;\n            totalDays = adjustedDateTime;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((dayOfWeekAdjustedDateTime - calculationOffset1) - (uint)(adjustedDateTimeDays < yearRemainder)) < 0 !=\n          (SBORROW4(dayOfWeekAdjustedDateTime,calculationOffset1) != SBORROW4(dayOfWeekAdjustedDateTime - calculationOffset1,(uint)(adjustedDateTimeDays < yearRemainder)))) {\nLAB_0000491e:\n        if ((int)((dayOfWeekAdjustedDateTime - leapYearOffset) - (uint)(adjustedDateTimeDays < tempYear)) < 0 ==\n            (SBORROW4(dayOfWeekAdjustedDateTime,leapYearOffset) != SBORROW4(dayOfWeekAdjustedDateTime - leapYearOffset,(uint)(adjustedDateTimeDays < tempYear))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)absYear) {\n        tempYear = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempYear = isNegativeYear;\n      if (isNegativeYear != 1) goto LAB_00004934;\n    }\n    yearInSeconds = tzInfo[0x14];\n    dayOfWeekAdjustedDateTime = (uint)totalDays + yearInSeconds;\n    leapYearOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)yearInSeconds >> 0x1f) + (uint)CARRY4((uint)totalDays,yearInSeconds);\n    tempYear = 1;\n  }\n  __tz_unlock();\n  dateTimeParams[8] = tempYear;\n  dateTimeParams[6] = (yearOffset + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(leapYearOffset,dayOfWeekAdjustedDateTime);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_adjusted_date_time_000047e4",
                "param_1": "dateTimeParams",
                "lVar1": "totalDays",
                "lVar2": "adjustedDateTime",
                "piVar3": "tzInfo",
                "uVar4": "yearRemainder",
                "iVar5": "leapYearOffset",
                "iVar6": "calculationOffset1",
                "iVar7": "dayOfWeekAdjustedDateTime",
                "iVar11": "yearOffset",
                "uVar8": "yearDivisibleBy4",
                "uVar9": "tempYear",
                "uVar10": "yearLocalOffset",
                "uVar12": "yearInSeconds",
                "uVar13": "isNegativeYear",
                "uVar14": "absYear",
                "uVar15": "adjustedDateTimeDays",
                "bVar16": "isLeapYear"
            },
            "calling": [
                "rtc_set_time",
                "rtc_set_alarm"
            ],
            "called": [
                "_tzset_unlocked",
                "__tz_unlock",
                "__gettzinfo",
                "__tz_lock",
                "__tzcalc_limits",
                "validate_structure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "allocate_memory_00004b34",
            "code": "\nvoid allocateMemory_00004b34(undefined4 *resultPointer,int size,undefined4 param3,undefined4 param4)\n\n{\n  int *tempPointer;\n  int **tempPointer1;\n  int **currentNode;\n  int **previousNode;\n  int **nextNode;\n  int **newNode;\n  bool isLastNode;\n  \n  if (size == 0) {\n    return;\n  }\n  newNode = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  previousNode = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    currentNode = tempPointer1;\n    DAT_1fff0db4 = newNode;\n  }\n  else {\n    nextNode = DAT_1fff0db4;\n    if (newNode < DAT_1fff0db4) {\n      currentNode = (int **)*newNode;\n      previousNode = (int **)((int)newNode + (int)currentNode);\n      isLastNode = DAT_1fff0db4 == previousNode;\n      if (isLastNode) {\n        previousNode = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNode[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNode;\n      if (isLastNode) {\n        previousNode = (int **)((int)previousNode + (int)currentNode);\n        *newNode = (int *)previousNode;\n      }\n    }\n    else {\n      do {\n        previousNode = nextNode;\n        nextNode = (int **)previousNode[1];\n        if (nextNode == (int **)0x0) break;\n      } while (nextNode <= newNode);\n      currentNode = (int **)*previousNode;\n      if ((int **)((int)previousNode + (int)currentNode) == newNode) {\n        currentNode = (int **)((int)currentNode + (int)*newNode);\n        *previousNode = (int *)currentNode;\n        if (nextNode == (int **)((int)previousNode + (int)currentNode)) {\n          tempPointer = *nextNode;\n          previousNode[1] = nextNode[1];\n          currentNode = (int **)((int)currentNode + (int)tempPointer);\n          *previousNode = (int *)currentNode;\n        }\n      }\n      else if (newNode < (int **)((int)previousNode + (int)currentNode)) {\n        *resultPointer = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)newNode + (int)*newNode);\n        isLastNode = nextNode == currentNode;\n        if (isLastNode) {\n          currentNode = (int **)*nextNode;\n          nextNode = (int **)nextNode[1];\n        }\n        newNode[1] = (int *)nextNode;\n        if (isLastNode) {\n          currentNode = (int **)((int)currentNode + (int)*newNode);\n          *newNode = (int *)currentNode;\n        }\n        previousNode[1] = (int *)newNode;\n      }\n    }\n  }\n  __malloc_unlock(resultPointer,currentNode,previousNode,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "allocate_memory_00004b34",
                "param_1": "resultPointer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "tempPointer",
                "extraout_r1": "tempPointer1",
                "ppiVar2": "currentNode",
                "ppiVar3": "previousNode",
                "ppiVar4": "nextNode",
                "ppiVar5": "newNode",
                "bVar6": "isLastNode"
            },
            "calling": [
                "__ssrefill_r",
                "__srefill_r",
                "free",
                "__swsetup_r",
                "_realloc_r",
                "__sflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_and_lock_00004bd0",
            "code": "\nuint allocate_and_lock_00004bd0(undefined4 *errorCode,uint size,undefined4 var3,undefined4 var4)\n\n{\n  uint *prevChunk;\n  int diff;\n  uint chunkSize;\n  uint *currentChunk;\n  uint alignedSize;\n  \n  alignedSize = (size + 3 & 0xfffffffc) + 8;\n  if (alignedSize < 0xc) {\n    alignedSize = 0xc;\n  }\n  if (((int)alignedSize < 0) || (alignedSize < size)) {\n    *errorCode = 0xc;\n  }\n  else {\n    __malloc_lock();\n    prevChunk = DAT_1fff0db4;\n    for (currentChunk = DAT_1fff0db4; currentChunk != (uint *)0x0; currentChunk = (uint *)currentChunk[1]) {\n      chunkSize = *currentChunk - alignedSize;\n      if (-1 < (int)chunkSize) {\n        if (0xb < chunkSize) {\n          *currentChunk = chunkSize;\n          currentChunk = (uint *)((int)currentChunk + chunkSize);\n          goto LAB_00004c34;\n        }\n        if (prevChunk == currentChunk) {\n          DAT_1fff0db4 = (uint *)currentChunk[1];\n        }\n        if (prevChunk != currentChunk) {\n          prevChunk[1] = (uint)(uint *)currentChunk[1];\n        }\n        goto LAB_00004c42;\n      }\n      prevChunk = currentChunk;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = _sbrk_r(errorCode,0,prevChunk,0,var4);\n    }\n    prevChunk = (uint *)_sbrk_r(errorCode,alignedSize);\n    if ((prevChunk != (uint *)0xffffffff) &&\n       ((currentChunk = (uint *)((int)prevChunk + 3U & 0xfffffffc), prevChunk == currentChunk ||\n        (diff = _sbrk_r(errorCode,(int)currentChunk - (int)prevChunk), diff != -1)))) {\nLAB_00004c34:\n      *currentChunk = alignedSize;\nLAB_00004c42:\n      __malloc_unlock(errorCode);\n      alignedSize = (int)currentChunk + 0xbU & 0xfffffff8;\n      diff = alignedSize - (int)(currentChunk + 1);\n      if (diff == 0) {\n        return alignedSize;\n      }\n      *(uint *)((int)currentChunk + diff) = (int)(currentChunk + 1) - alignedSize;\n      return alignedSize;\n    }\n    *errorCode = 0xc;\n    __malloc_unlock(errorCode);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_and_lock_00004bd0",
                "param_1": "errorCode",
                "param_2": "size",
                "param_3": "var3",
                "param_4": "var4",
                "puVar1": "prevChunk",
                "iVar2": "diff",
                "uVar3": "chunkSize",
                "puVar4": "currentChunk",
                "uVar5": "alignedSize"
            },
            "calling": [
                "_tzset_unlocked",
                "__smakebuf_r",
                "__submore",
                "_realloc_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "print_to_file_00004c84",
            "code": "\nvoid printToFile_00004c84(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  dword offset;\n  undefined4 formatStringCopy;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  formatStringCopy = formatString;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  _vfprintf_r(offset,*(undefined4 *)(offset + 8),formatString,&arg1Copy,formatStringCopy,&arg1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "print_to_file_00004c84",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "dVar1": "offset",
                "uVar2": "formatStringCopy",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "cpu_print_last_instruction",
                "handle_input_line",
                "ps",
                "_print_time",
                "phydat_dump",
                "write",
                "list",
                "probe",
                "core_panic",
                "_saul",
                "read",
                "_rtc_handler",
                "print_help"
            ],
            "called": [
                "_vfprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "write_char_to_stream_00004cb4",
            "code": "\nuint writeCharToStream_00004cb4(uint character)\n\n{\n  dword relOffset;\n  undefined4 *stream;\n  uint updatedCount;\n  undefined *streamBuffer;\n  undefined4 param4;\n  undefined4 param5;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  stream = *(undefined4 **)(relOffset + 8);\n  if ((relOffset != 0) && (*(int *)(relOffset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream == &DAT_000079b8) {\n    stream = *(undefined4 **)(relOffset + 4);\n  }\n  else if (stream == (undefined4 *)&DAT_000079d8) {\n    stream = *(undefined4 **)(relOffset + 8);\n  }\n  else if (stream == (undefined4 *)&DAT_00007998) {\n    stream = *(undefined4 **)(relOffset + 0xc);\n  }\n  if ((-1 < (int)(stream[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(stream + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(stream[0x16]);\n  }\n  updatedCount = stream[2] - 1;\n  stream[2] = updatedCount;\n  if (((int)updatedCount < 0) && (((int)updatedCount < (int)stream[6] || (updatedCount = character & 0xff, updatedCount == 10))))\n  {\n    character = __swbuf_r(relOffset,character,stream,updatedCount,param4,param5);\n  }\n  else {\n    streamBuffer = (undefined *)*stream;\n    *stream = streamBuffer + 1;\n    *streamBuffer = (char)character;\n    character = character & 0xff;\n  }\n  if ((-1 < (int)(stream[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(stream + 3) << 0x16))) {\n    __retarget_lock_release_recursive(stream[0x16]);\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "write_char_to_stream_00004cb4",
                "param_1": "character",
                "dVar1": "relOffset",
                "puVar2": "stream",
                "uVar3": "updatedCount",
                "puVar4": "streamBuffer",
                "unaff_r4": "param4",
                "unaff_r5": "param5"
            },
            "calling": [
                "_putchar"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_input_00004db8",
            "code": "\nundefined4 processInput_00004db8(int input)\n\n{\n  char currentChar;\n  dword offset;\n  int returnValue;\n  char *strPtr;\n  char **dataPtr;\n  undefined4 result;\n  char *currentPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  dataPtr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    __sinit(offset);\n  }\n  if (dataPtr == (char **)&DAT_000079b8) {\n    dataPtr = *(char ***)(offset + 4);\n  }\n  else if (dataPtr == (char **)&DAT_000079d8) {\n    dataPtr = *(char ***)(offset + 8);\n  }\n  else if (dataPtr == (char **)&DAT_00007998) {\n    dataPtr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(dataPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataPtr + 3) << 0x1c) < 0) && (dataPtr[4] != (char *)0x0)) ||\n     (returnValue = __swsetup_r(offset,dataPtr), returnValue == 0)) {\n    currentPtr = (char *)(input + -1);\n    do {\n      while( true ) {\n        currentPtr = currentPtr + 1;\n        currentChar = *currentPtr;\n        strPtr = dataPtr[2] + -1;\n        dataPtr[2] = strPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)strPtr) {\n            currentPtr = *dataPtr;\n            result = 10;\n            *dataPtr = currentPtr + 1;\n            *currentPtr = '\\n';\n            goto LAB_00004d64;\n          }\n          returnValue = __swbuf_r(offset,10,dataPtr);\n          if (returnValue != -1) {\n            result = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)strPtr < 0) && (((int)strPtr < (int)dataPtr[6] || (currentChar == '\\n')))) break;\n        strPtr = *dataPtr;\n        *dataPtr = strPtr + 1;\n        *strPtr = currentChar;\n      }\n      returnValue = __swbuf_r(offset,currentChar,dataPtr);\n    } while (returnValue != -1);\n  }\nLAB_00004d60:\n  result = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    __retarget_lock_release_recursive(dataPtr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_input_00004db8",
                "param_1": "input",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "returnValue",
                "pcVar4": "strPtr",
                "ppcVar5": "dataPtr",
                "uVar6": "result",
                "pcVar7": "currentPtr"
            },
            "calling": [
                "handle_input_line",
                "main",
                "phydat_dump",
                "_rtc_settime",
                "_rtc_usage",
                "write",
                "list",
                "_rtc_setalarm",
                "read",
                "_rtc_gettime",
                "_rtc_getalarm",
                "probe_all",
                "_alarm_handler",
                "print_help"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 param,int dataPointer)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isSuccess;\n  \n  readResult = _read_r(param,(int)*(short *)(dataPointer + 0xe));\n  isSuccess = -1 < readResult;\n  if (isSuccess) {\n    updatedValue = *(int *)(dataPointer + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataPointer + 0xc) & 0xffffefff;\n  }\n  if (isSuccess) {\n    *(uint *)(dataPointer + 0x54) = updatedValue;\n  }\n  if (!isSuccess) {\n    *(short *)(dataPointer + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "param",
                "param_2": "dataPointer",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isSuccess"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "modify_and_write_data_00004dee",
            "code": "\nundefined4 modify_and_write_data_00004dee(undefined4 file_descriptor,int data_buffer,undefined4 uart_data,undefined4 uart_length)\n\n{\n  undefined4 write_status;\n  \n  if ((int)((uint)*(ushort *)(data_buffer + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(data_buffer + 0xe),0,2);\n  }\n  *(ushort *)(data_buffer + 0xc) = *(ushort *)(data_buffer + 0xc) & 0xefff;\n  write_status = uart_stdio_write(uart_data,uart_length);\n  return write_status;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "modify_and_write_data_00004dee",
                "param_1": "file_descriptor",
                "param_2": "data_buffer",
                "param_3": "uart_data",
                "param_4": "uart_length",
                "uVar1": "write_status"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "uart_stdio_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_file_position_00004e26",
            "code": "\nvoid updateFilePosition_00004e26(undefined4 fileDescriptor,int context)\n\n{\n  int seekResult;\n  ushort modifiedFlags;\n  bool isSeekFailure;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(context + 0xe));\n  isSeekFailure = seekResult == -1;\n  if (isSeekFailure) {\n    modifiedFlags = *(ushort *)(context + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(context + 0x54) = seekResult;\n    modifiedFlags = *(ushort *)(context + 0xc) | 0x1000;\n  }\n  if (isSeekFailure) {\n    *(ushort *)(context + 0xc) = modifiedFlags;\n  }\n  if (!isSeekFailure) {\n    *(ushort *)(context + 0xc) = modifiedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_file_position_00004e26",
                "param_1": "fileDescriptor",
                "param_2": "context",
                "iVar1": "seekResult",
                "uVar2": "modifiedFlags",
                "bVar3": "isSeekFailure"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_and_subtract_00004e52",
            "code": "\nint compare_and_subtract_00004e52(byte *input_buffer,byte *compare_buffer)\n\n{\n  byte compare_byte;\n  uint input_byte;\n  bool is_equal;\n  \n  do {\n    input_byte = (uint)*input_buffer;\n    compare_byte = *compare_buffer;\n    is_equal = input_byte == 1;\n    if (input_byte != 0) {\n      is_equal = input_byte == compare_byte;\n    }\n    input_buffer = input_buffer + 1;\n    compare_buffer = compare_buffer + 1;\n  } while (is_equal);\n  return input_byte - compare_byte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_and_subtract_00004e52",
                "param_1": "input_buffer",
                "param_2": "compare_buffer",
                "bVar1": "compare_byte",
                "uVar2": "input_byte",
                "bVar3": "is_equal"
            },
            "calling": [
                "handle_input_line",
                "_saul",
                "_tzset_unlocked",
                "read",
                "find_handler",
                "strcmp"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_and_subtract_00004e66",
            "code": "\nint compareAndSubtract_00004e66(byte *inputData,int startIndex,int length)\n\n{\n  byte *currentByte;\n  int result;\n  byte *nextByte;\n  uint currentValue;\n  \n  if (length == 0) {\n    result = 0;\n  }\n  else {\n    nextByte = (byte *)(startIndex + -1);\n    currentByte = inputData;\n    do {\n      currentValue = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((currentValue != *nextByte) || (currentByte + 1 == inputData + length)) break;\n      currentByte = currentByte + 1;\n    } while (currentValue != 0);\n    result = currentValue - *nextByte;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_and_subtract_00004e66",
                "param_1": "inputData",
                "param_2": "startIndex",
                "param_3": "length",
                "pbVar1": "currentByte",
                "iVar2": "result",
                "pbVar3": "nextByte",
                "uVar4": "currentValue"
            },
            "calling": [
                "_findenv_r",
                "_rtc_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint ch;\n  uint isNegative;\n  uint digit;\n  int comparator;\n  uint maxInt;\n  uint quotient;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    ch = (uint)*currentChar;\n    isNegative = (byte)(&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    ch = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxInt = isNegative + 0x7fffffff;\n  comparator = 0;\n  quotient = maxInt / base;\n  result = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (comparator != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(maxInt - base * quotient) < (int)digit)))) {\n        comparator = -1;\n      }\n      else {\n        result = result * base + digit;\n        comparator = 1;\n      }\n    }\n    ch = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (comparator == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxInt;\n    if (output == (byte **)0x0) {\n      return maxInt;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (comparator == 0) goto LAB_00004f64;\n  }\n  input = nextChar + -1;\nLAB_00004f64:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "input",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "ch",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "comparator",
                "uVar6": "maxInt",
                "uVar7": "quotient",
                "pbVar8": "currentChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "_parse_time",
                "atoi"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *timeZoneInfo;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int daysSinceJan1;\n  uint *timeZone;\n  int daysSince1900;\n  uint isLeapYearMod;\n  int month;\n  int daysOffset;\n  uint isLeapYearVal;\n  \n  timeZoneInfo = (uint *)__gettzinfo();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    daysSince1900 = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    timeZoneInfo[1] = year;\n    isLeapYearVal = (uint)(year % 400 == 0);\n    timeZone = timeZoneInfo;\n    do {\n      dayOfWeek = timeZone[5];\n      if (*(char *)(timeZone + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            daysSinceJan1 = 0;\n          }\n          else {\n            daysSinceJan1 = 1;\n          }\n        }\n        else {\n          daysSinceJan1 = 0;\n        }\n        daysSinceJan1 = daysSinceJan1 + daysSince1900 + dayOfWeek + -1;\n      }\n      else if (*(char *)(timeZone + 2) == 'D') {\n        daysSinceJan1 = daysSince1900 + dayOfWeek;\n      }\n      else {\n        isLeapYearMod = isLeapYearVal;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYearMod = 1;\n        }\n        month = 0;\n        daysSinceJan1 = daysSince1900;\n        while( true ) {\n          month = month + 1;\n          if ((int)timeZone[3] <= month) break;\n          daysSinceJan1 = daysSinceJan1 + *(int *)(&UNK_00007b98 + month * 4 + isLeapYearMod * 0x30);\n        }\n        daysOffset = dayOfWeek - (daysSinceJan1 + 4U) % 7;\n        if (daysOffset < 0) {\n          daysOffset = daysOffset + 7;\n        }\n        for (daysOffset = (timeZone[4] - 1) * 7 + daysOffset;\n            *(int *)(&UNK_00007b98 + month * 4 + isLeapYearMod * 0x30) <= daysOffset; daysOffset = daysOffset + -7) {\n        }\n        daysSinceJan1 = daysSinceJan1 + daysOffset;\n      }\n      dayOfWeek = timeZone[10] + daysSinceJan1 * 0x15180 + timeZone[6];\n      timeZone[8] = dayOfWeek;\n      timeZone[9] = (int)dayOfWeek >> 0x1f;\n      timeZone = timeZone + 10;\n    } while (timeZoneInfo + 0x14 != timeZone);\n    dayOfWeek = timeZoneInfo[9];\n    isLeapYearVal = timeZoneInfo[0x13];\n    *timeZoneInfo = (uint)((int)((dayOfWeek - isLeapYearVal) - (uint)(timeZoneInfo[8] < timeZoneInfo[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isLeapYearVal) !=\n                    SBORROW4(dayOfWeek - isLeapYearVal,(uint)(timeZoneInfo[8] < timeZoneInfo[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "timeZoneInfo",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "daysSinceJan1",
                "puVar5": "timeZone",
                "iVar6": "daysSince1900",
                "uVar7": "isLeapYearMod",
                "iVar8": "month",
                "iVar9": "daysOffset",
                "uVar10": "isLeapYearVal"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime"
            ],
            "called": [
                "__gettzinfo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_data_address_000050e8",
            "code": "\nundefined * get_data_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_data_address_000050e8"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_location_000050f4",
            "code": "\nundefined * get_memory_location_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_location_000050f4"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "initialize_timezone_00005100",
            "code": "\nvoid initializeTimezone_00005100(void)\n\n{\n  dword offset;\n  int timezoneInfo;\n  char *environmentVar;\n  int comparisonResult;\n  int scanResult;\n  undefined codeUnit;\n  char *scanString;\n  bool isFirstIteration;\n  ushort *hourPtr;\n  int *charCountPtr;\n  ushort *minutePtr;\n  int *charCountPtr2;\n  ushort hour1;\n  ushort minute1;\n  ushort second1;\n  ushort hour2;\n  ushort minute2;\n  ushort second2;\n  int scanCount;\n  char *pathStringArray [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  timezoneInfo = __gettzinfo();\n  environmentVar = (char *)_getenv_r(offset,&DAT_00007a5c);\n  if (environmentVar == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = environmentVar;\n    DAT_1fff0ddc = environmentVar;\n    free(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = strcmp(), comparisonResult != 0)) {\n    free(DAT_1fff0dd4);\n    comparisonResult = strlen(environmentVar);\n    DAT_1fff0dd4 = _malloc_r(offset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      strcpy(DAT_1fff0dd4,environmentVar);\n    }\n    if (*environmentVar == ':') {\n      environmentVar = environmentVar + 1;\n    }\n    comparisonResult = siscanf(environmentVar,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&scanCount);\n    if (0 < comparisonResult) {\n      scanString = environmentVar + scanCount;\n      if (environmentVar[scanCount] == '-') {\n        scanString = scanString + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (environmentVar[scanCount] == '+') {\n          scanString = scanString + 1;\n        }\n        comparisonResult = 1;\n      }\n      minute1 = 0;\n      second1 = 0;\n      hourPtr = &minute1;\n      charCountPtr = &scanCount;\n      minutePtr = &second1;\n      charCountPtr2 = &scanCount;\n      scanResult = siscanf(scanString,\"%hu%n:%hu%n:%hu%n\",&hour1,&scanCount,&minute1,&scanCount,&second1,\n                      &scanCount);\n      if (0 < scanResult) {\n        *(uint *)(timezoneInfo + 0x28) =\n             ((uint)hour1 * 0xe10 + (uint)minute1 * 0x3c + (uint)second1) * comparisonResult;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        scanString = scanString + scanCount;\n        comparisonResult = siscanf(scanString,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&scanCount,hourPtr,charCountPtr,minutePtr,\n                        charCountPtr2);\n        if (comparisonResult < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(timezoneInfo + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          environmentVar = scanString + scanCount;\n          if (scanString[scanCount] == '-') {\n            environmentVar = environmentVar + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (scanString[scanCount] == '+') {\n              environmentVar = environmentVar + 1;\n            }\n            comparisonResult = 1;\n          }\n          hour1 = 0;\n          minute1 = 0;\n          second1 = 0;\n          scanCount = 0;\n          scanResult = siscanf(environmentVar,\"%hu%n:%hu%n:%hu%n\",&hour1,&scanCount,&minute1,&scanCount,\n                          &second1,&scanCount);\n          if (scanResult < 1) {\n            comparisonResult = *(int *)(timezoneInfo + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)hour1 * 0xe10 + (uint)minute1 * 0x3c + (uint)second1) * comparisonResult;\n          }\n          *(int *)(timezoneInfo + 0x50) = comparisonResult;\n          environmentVar = environmentVar + scanCount;\n          isFirstIteration = false;\n          comparisonResult = timezoneInfo;\n          while( true ) {\n            if (*environmentVar == ',') {\n              environmentVar = environmentVar + 1;\n            }\n            if (*environmentVar == 'M') {\n              scanResult = siscanf(environmentVar,\"M%hu%n.%hu%n.%hu%n\",&hour2,&scanCount,&minute2,&scanCount,\n                              &second2,&scanCount);\n              if (scanResult != 3) {\n                return;\n              }\n              if (0xb < hour2 - 1) {\n                return;\n              }\n              if (4 < minute2 - 1) {\n                return;\n              }\n              if (6 < second2) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)hour2;\n              *(uint *)(comparisonResult + 0x10) = (uint)minute2;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)second2;\n              scanString = environmentVar + scanCount;\n            }\n            else {\n              if (*environmentVar == 'J') {\n                environmentVar = environmentVar + 1;\n                codeUnit = 0x4a;\n              }\n              else {\n                codeUnit = 0x44;\n              }\n              second2 = strtoul(environmentVar,pathStringArray,10);\n              scanString = pathStringArray[0];\n              if (pathStringArray[0] == environmentVar) {\n                if (isFirstIteration) {\n                  *(undefined *)(timezoneInfo + 0x30) = 0x4d;\n                  *(undefined4 *)(timezoneInfo + 0x34) = 0xb;\n                  *(undefined4 *)(timezoneInfo + 0x38) = 1;\n                  *(undefined4 *)(timezoneInfo + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(timezoneInfo + 8) = 0x4d;\n                  *(undefined4 *)(timezoneInfo + 0xc) = 3;\n                  *(undefined4 *)(timezoneInfo + 0x10) = 2;\n                  *(undefined4 *)(timezoneInfo + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = codeUnit;\n                *(uint *)(comparisonResult + 0x14) = (uint)second2;\n              }\n            }\n            hour1 = 2;\n            minute1 = 0;\n            second1 = 0;\n            scanCount = 0;\n            if (*scanString == '/') {\n              siscanf(scanString,&DAT_00007a85,&hour1,&scanCount,&minute1,&scanCount,&second1,\n                      &scanCount);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)hour1 * 0xe10 + (uint)minute1 * 0x3c + (uint)second1;\n            comparisonResult = comparisonResult + 0x28;\n            environmentVar = scanString + scanCount;\n            if (isFirstIteration) break;\n            isFirstIteration = true;\n          }\n          __tzcalc_limits(*(undefined4 *)(timezoneInfo + 4));\n          DAT_1fff0ddc = *(char **)(timezoneInfo + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(timezoneInfo + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "initialize_timezone_00005100",
                "dVar1": "offset",
                "iVar2": "timezoneInfo",
                "pcVar3": "environmentVar",
                "iVar4": "comparisonResult",
                "iVar5": "scanResult",
                "uVar6": "codeUnit",
                "pcVar7": "scanString",
                "bVar8": "isFirstIteration",
                "puVar9": "hourPtr",
                "piVar10": "charCountPtr",
                "puVar11": "minutePtr",
                "piVar12": "charCountPtr2",
                "local_3c": "hour1",
                "local_3a": "minute1",
                "local_38": "second1",
                "local_36": "hour2",
                "local_34": "minute2",
                "local_32": "second2",
                "local_30": "scanCount",
                "local_2c": "pathStringArray"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "_getenv_r",
                "strlen",
                "strcpy",
                "siscanf",
                "__gettzinfo",
                "free",
                "_malloc_r",
                "strtoul",
                "strcmp",
                "__tzcalc_limits"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "write_to_stream_00005404",
            "code": "\nuint write_to_stream_00005404(int stream,uint data,int *buffer,undefined4 size)\n\n{\n  int offset;\n  uint length;\n  undefined *ptr;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    initialize_stream();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(stream + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(stream + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(stream + 0xc);\n  }\n  buffer[2] = buffer[6];\n  length = (uint)*(ushort *)(buffer + 3);\n  offset = length << 0x1c;\n  if (((offset < 0) && (length = buffer[4], length != 0)) ||\n     (offset = setup_stream(stream,buffer,offset,length,size), offset == 0)) {\n    offset = *buffer - buffer[4];\n    data = data & 0xff;\n    if ((offset < buffer[5]) || (offset = flush_stream(stream,buffer), offset == 0)) {\n      buffer[2] = buffer[2] + -1;\n      ptr = (undefined *)*buffer;\n      *buffer = (int)(ptr + 1);\n      *ptr = (char)data;\n      if (buffer[5] != offset + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return data;\n        }\n        if (data != 10) {\n          return data;\n        }\n      }\n      offset = flush_stream(stream,buffer);\n      if (offset == 0) {\n        return data;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "write_to_stream_00005404",
                "param_1": "stream",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "offset",
                "uVar2": "length",
                "puVar3": "ptr",
                "__sinit": "initialize_stream",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_stream"
            },
            "calling": [
                "puts",
                "putchar",
                "__sfputc_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *outputParam,undefined4 *inputParam)\n\n{\n  ushort tempVar1;\n  dword tempVar2;\n  ushort tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  \n  tempVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputParam == &DAT_000079b8) {\n    inputParam = *(undefined4 **)(tempVar2 + 4);\n  }\n  else if (inputParam == (undefined4 *)&DAT_000079d8) {\n    inputParam = *(undefined4 **)(tempVar2 + 8);\n  }\n  else if (inputParam == (undefined4 *)&DAT_00007998) {\n    inputParam = *(undefined4 **)(tempVar2 + 0xc);\n  }\n  tempVar4 = (uint)*(ushort *)(inputParam + 3);\n  tempVar3 = *(ushort *)(inputParam + 3);\n  if (-1 < (int)(tempVar4 << 0x1c)) {\n    if (-1 < (int)(tempVar4 << 0x1b)) {\n      *outputParam = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(tempVar4 << 0x1d) < 0) {\n      if ((undefined4 *)inputParam[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputParam[0xd] != inputParam + 0x11) {\n          _free_r(outputParam);\n        }\n        inputParam[0xd] = 0;\n      }\n      *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) & 0xffdb;\n      inputParam[1] = 0;\n      *inputParam = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 8;\n  }\n  if ((inputParam[4] == 0) && ((*(ushort *)(inputParam + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputParam,inputParam);\n  }\n  tempVar1 = *(ushort *)(inputParam + 3);\n  tempVar4 = (uint)tempVar1;\n  tempVar3 = *(ushort *)(inputParam + 3);\n  tempVar5 = tempVar4 & 1;\n  if ((tempVar1 & 1) == 0) {\n    if (-1 < (int)(tempVar4 << 0x1e)) {\n      tempVar5 = inputParam[5];\n    }\n    inputParam[2] = tempVar5;\n  }\n  else {\n    inputParam[2] = 0;\n    inputParam[6] = -inputParam[5];\n  }\n  if (inputParam[4] != 0) {\n    return 0;\n  }\n  if ((tempVar1 & 0x80) == 0) {\n    return tempVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputParam + 3) = tempVar3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "uVar1": "tempVar1",
                "dVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5"
            },
            "calling": [
                "__swbuf_r",
                "_vfprintf_r",
                "puts"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *resultArr,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *resultArr = quotient;\n  resultArr[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "resultArr",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "validate_structure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_key_value_offset_0000562c",
            "code": "\nint find_key_value_offset_0000562c(undefined4 lock_handle,char *source_string,int *result_offset)\n\n{\n  char current_char;\n  int *key_list_ptr;\n  int comparison_result;\n  char *current_char_ptr;\n  int *current_key;\n  int current_char_offset;\n  \n  __env_lock();\n  current_char_ptr = source_string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_char_ptr;\n      if (current_char == '\\0') {\n        current_char_offset = (int)current_char_ptr - (int)source_string;\n        key_list_ptr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          current_key = key_list_ptr;\n          if (*current_key == 0) break;\n          comparison_result = strncmp(*current_key,source_string,current_char_offset);\n          key_list_ptr = current_key + 1;\n          if ((comparison_result == 0) && (comparison_result = *current_key, *(char *)(comparison_result + current_char_offset) == '=')) {\n            *result_offset = (int)((int)current_key - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            __env_unlock(lock_handle);\n            return comparison_result + current_char_offset + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr = current_char_ptr + 1;\n    } while (current_char != '=');\n  }\n  __env_unlock(lock_handle);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_key_value_offset_0000562c",
                "param_1": "lock_handle",
                "param_2": "source_string",
                "param_3": "result_offset",
                "cVar1": "current_char",
                "piVar2": "key_list_ptr",
                "iVar3": "comparison_result",
                "pcVar4": "current_char_ptr",
                "piVar5": "current_key",
                "iVar6": "current_char_offset"
            },
            "calling": [
                "_getenv_r"
            ],
            "called": [
                "__env_unlock",
                "__env_lock",
                "strncmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_environment_variables_000056a0",
            "code": "\nvoid find_environment_variables_000056a0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 stack_param_2;\n  undefined4 stack_param_3;\n  \n  stack_param_2 = param_2;\n  stack_param_3 = param_3;\n  _findenv_r(param_1,param_2,&stack_param_2,param_4,param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_environment_variables_000056a0",
                "uStack_c": "stack_param_2",
                "uStack_8": "stack_param_3"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_findenv_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_default_memory_address_000056b0",
            "code": "\nuint32_t getDefaultMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_default_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime",
                "__tzcalc_limits"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_file_permission_000056b8",
            "code": "\nundefined4 checkFilePermission_000056b8(undefined4 fileDescriptor,int fileInfo,undefined4 *permission,uint *isExecutable)\n\n{\n  int result;\n  undefined4 flags;\n  undefined statBuffer [4];\n  uint mode;\n  \n  if ((*(short *)(fileInfo + 0xe) < 0) ||\n     (result = _fstat_r(fileDescriptor,(int)*(short *)(fileInfo + 0xe),statBuffer), result < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileInfo + 0xc) << 0x18) < 0) {\n      flags = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *isExecutable = (uint)((mode & 0xf000) == 0x2000);\n  }\n  flags = 0x400;\nLAB_000056f8:\n  *permission = flags;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_file_permission_000056b8",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "param_3": "permission",
                "param_4": "isExecutable",
                "iVar1": "result",
                "uVar2": "flags",
                "auStack_68": "statBuffer",
                "local_64": "mode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int dataSize,int *dataPtr)\n\n{\n  ushort result;\n  int allocatedMemory;\n  int localDataSize;\n  int *localDataPtr;\n  \n  if (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x1e)) {\n    localDataSize = dataSize;\n    localDataPtr = dataPtr;\n    result = __swhatbuf_r(dataSize,dataPtr,&localDataSize,&localDataPtr);\n    allocatedMemory = _malloc_r(dataSize,localDataSize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(dataSize + 0x28) = &DAT_0000423d;\n      *dataPtr = allocatedMemory;\n      *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x80;\n      dataPtr[5] = localDataSize;\n      dataPtr[4] = allocatedMemory;\n      if ((localDataPtr != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(dataSize,(int)*(short *)((int)dataPtr + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(dataPtr + 3) = result | *(ushort *)(dataPtr + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(dataPtr + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfffc | 2;\n  }\n  *dataPtr = (int)dataPtr + 0x47;\n  dataPtr[4] = (int)dataPtr + 0x47;\n  dataPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "dataSize",
                "param_2": "dataPtr",
                "uVar1": "result",
                "iVar2": "allocatedMemory",
                "local_18": "localDataSize",
                "local_14": "localDataPtr"
            },
            "calling": [
                "__srefill_r",
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "free_elf32_rel_array_00005780",
            "code": "\nvoid freeElf32RelArray_00005780(undefined4 unusedParameter)\n\n{\n  _free_r(elfRelArray[16].r_offset,unusedParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "free_elf32_rel_array_00005780",
                "param_1": "unusedParameter",
                "Elf32_Rel_ARRAY_1fff0200": "elfRelArray"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "acquire_recursive_lock_00005790",
            "code": "\nvoid acquire_recursive_lock_00005790(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "acquire_recursive_lock_00005790"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "release_recursive_lock_0000579c",
            "code": "\nvoid releaseRecursiveLock_0000579c(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "release_recursive_lock_0000579c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "write_to_buffer_000057a8",
            "code": "\nint writeToBuffer_000057a8(undefined4 status,int character,undefined4 *buffer)\n\n{\n  int remainingSize;\n  undefined *nextCharPtr;\n  \n  remainingSize = buffer[2] + -1;\n  buffer[2] = remainingSize;\n  if ((remainingSize < 0) && ((remainingSize < (int)buffer[6] || (character == 10)))) {\n    remainingSize = __swbuf_r();\n    return remainingSize;\n  }\n  nextCharPtr = (undefined *)*buffer;\n  *buffer = nextCharPtr + 1;\n  *nextCharPtr = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "write_to_buffer_000057a8",
                "param_1": "status",
                "param_2": "character",
                "param_3": "buffer",
                "iVar1": "remainingSize",
                "puVar2": "nextCharPtr"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "write_to_output_000057d2",
            "code": "\nint write_to_output_000057d2(undefined4 stream,undefined4 buffer,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int remaining_length;\n  \n  end_of_data = data + length;\n  remaining_length = length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*data,buffer,length,remaining_length);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "write_to_output_000057d2",
                "param_1": "stream",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "remaining_length"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "print_formatted_string_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint printFormattedString_000057f8(int filePtr,undefined4 *formatSpecifiers,byte *string,int *args)\n\n{\n  int result;\n  int writeResult;\n  int *argPtr;\n  bool isDigit;\n  byte *currentChar;\n  int file;\n  byte *strPtr;\n  int *argList;\n  uint flag;\n  int width;\n  undefined4 precision;\n  int numArg;\n  int totalChars;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined padChar;\n  undefined4 sizeModifier;\n  \n  if ((filePtr != 0) && (*(int *)(filePtr + 0x18) == 0)) {\n    initializeStream;\n  }\n  if (formatSpecifiers == &DAT_000079b8) {\n    formatSpecifiers = *(undefined4 **)(filePtr + 4);\n  }\n  else if (formatSpecifiers == (undefined4 *)&DAT_000079d8) {\n    formatSpecifiers = *(undefined4 **)(filePtr + 8);\n  }\n  else if (formatSpecifiers == (undefined4 *)&DAT_00007998) {\n    formatSpecifiers = *(undefined4 **)(filePtr + 0xc);\n  }\n  if ((-1 < (int)(formatSpecifiers[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(formatSpecifiers + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(formatSpecifiers[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(formatSpecifiers + 3) << 0x1c)) || (formatSpecifiers[4] == 0)) &&\n     (result = __swsetup_r(filePtr,formatSpecifiers), result != 0)) {\n    if ((-1 < (int)(formatSpecifiers[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(formatSpecifiers + 3) << 0x16)))\n    {\n      __retarget_lock_release_recursive(formatSpecifiers[0x16]);\n    }\n    return -1;\n  }\n  totalChars = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  strPtr = string;\n  argList = args;\nLAB_0000588e:\n  currentChar = strPtr;\n  if (*currentChar != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  strPtr = currentChar + 1;\n  if (*currentChar == 0x25) {\nLAB_0000589a:\n    result = (int)currentChar - (int)string;\n    if (result != 0) {\n      writeResult = __sfputs_r(filePtr,formatSpecifiers,string,result);\n      if (writeResult == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(formatSpecifiers[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(formatSpecifiers + 3) << 0x16))) {\n          __retarget_lock_release_recursive(formatSpecifiers[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(formatSpecifiers + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalChars;\n      }\n      totalChars = totalChars + result;\n    }\n    if (*currentChar == 0) goto LAB_00005a06;\n    width = -1;\n    precision = 0;\n    flag = 0;\n    numArg = 0;\n    padChar = 0;\n    sizeModifier = 0;\n    strPtr = currentChar + 1;\n    while( true ) {\n      currentChar = strPtr + 1;\n      result = memchr(\"#-0+ \",*strPtr,5);\n      if (result == 0) break;\n      flag = 1 << (result - 0x7bfcU & 0xff) | flag;\n      strPtr = currentChar;\n    }\n    if ((int)(flag << 0x1b) < 0) {\n      padChar = 0x20;\n    }\n    if ((int)(flag << 0x1c) < 0) {\n      padChar = 0x2b;\n    }\n    if (*strPtr == 0x2a) {\n      argPtr = argList + 1;\n      numArg = *argList;\n      argList = argPtr;\n      if (numArg < 0) {\n        numArg = -numArg;\n        flag = flag | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      result = numArg;\n      currentChar = strPtr;\n      while( true ) {\n        if (9 < *currentChar - 0x30) break;\n        result = result * 10 + (*currentChar - 0x30);\n        isDigit = true;\n        currentChar = currentChar + 1;\n      }\n      if (isDigit) {\n        numArg = result;\n      }\n    }\n    if (*currentChar == 0x2e) {\n      if (currentChar[1] == 0x2a) {\n        width = *argList;\n        if (width < 0) {\n          width = -1;\n        }\n        currentChar = currentChar + 2;\n        argList = argList + 1;\n      }\n      else {\n        isDigit = false;\n        width = 0;\n        result = 0;\n        while( true ) {\n          currentChar = currentChar + 1;\n          if (9 < *currentChar - 0x30) break;\n          result = result * 10 + (*currentChar - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          width = result;\n        }\n      }\n    }\n    result = memchr(&DAT_00007c02,*currentChar,3);\n    if (result != 0) {\n      flag = flag | 0x40 << (result - 0x7c02U & 0xff);\n      currentChar = currentChar + 1;\n    }\n    string = currentChar + 1;\n    conversionSpecifier = *currentChar;\n    result = memchr(\"efgEFG\",conversionSpecifier,6);\n    if (result == 0) {\n      file = _printf_i(filePtr,&flag,formatSpecifiers,0x57d3,&argList);\n      if (file == -1) goto LAB_00005a06;\n    }\n    else {\n      argList = (int *)(((int)argList + 7U & 0xfffffff8) + 8);\n    }\n    totalChars = totalChars + file;\n    strPtr = string;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "print_formatted_string_000057f8",
                "param_1": "filePtr",
                "param_2": "formatSpecifiers",
                "param_3": "string",
                "param_4": "args",
                "iVar1": "result",
                "iVar2": "writeResult",
                "piVar3": "argPtr",
                "bVar4": "isDigit",
                "pbVar5": "currentChar",
                "unaff_r7": "file",
                "pbVar6": "strPtr",
                "local_8c": "argList",
                "local_88": "flag",
                "local_84": "width",
                "uStack_80": "precision",
                "local_7c": "numArg",
                "local_74": "totalChars",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "padChar",
                "local_30": "sizeModifier",
                "__sinit()": "initializeStream"
            },
            "calling": [
                "iprintf"
            ],
            "called": [
                "__sfputs_r",
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "memchr",
                "__sinit",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_length_and_iterate_00005a58",
            "code": "\nundefined4\ncalculateLengthAndIterate_00005a58(undefined4 input_value,uint *input_array,uint *output_length,undefined4 param_4,code *callback_function)\n\n{\n  int iteration_variable_1;\n  undefined4 return_value;\n  int iteration_variable_2;\n  uint max_length;\n  uint iteration_variable_3;\n  bool flag_variable;\n  \n  max_length = input_array[4];\n  if ((int)input_array[4] < (int)input_array[2]) {\n    max_length = input_array[2];\n  }\n  *output_length = max_length;\n  if (*(char *)((int)input_array + 0x43) != '\\0') {\n    *output_length = max_length + 1;\n  }\n  if ((int)(*input_array << 0x1a) < 0) {\n    *output_length = *output_length + 2;\n  }\n  if ((*input_array & 6) == 0) {\n    for (iteration_variable_1 = 0; iteration_variable_1 < (int)(input_array[3] - *output_length); iteration_variable_1 = iteration_variable_1 + 1) {\n      iteration_variable_2 = (*callback_function)(input_value,param_4,(int)input_array + 0x19,1);\n      if (iteration_variable_2 == -1) goto LAB_00005afc;\n    }\n  }\n  max_length = (uint)*(byte *)((int)input_array + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  if ((int)(*input_array << 0x1a) < 0) {\n    *(undefined *)((int)input_array + max_length + 0x43) = 0x30;\n    *(undefined *)((int)input_array + max_length + 0x44) = *(undefined *)((int)input_array + 0x45);\n    max_length = max_length + 2;\n  }\n  iteration_variable_1 = (*callback_function)(input_value,param_4,(int)input_array + 0x43,max_length);\n  if (iteration_variable_1 == -1) {\nLAB_00005afc:\n    return_value = 0xffffffff;\n  }\n  else {\n    max_length = input_array[3];\n    flag_variable = (*input_array & 6) == 4;\n    if (flag_variable) {\n      max_length = max_length - *output_length;\n    }\n    if (flag_variable) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    else {\n      max_length = 0;\n    }\n    if ((int)input_array[4] < (int)input_array[2]) {\n      max_length = max_length + (input_array[2] - input_array[4]);\n    }\n    for (iteration_variable_3 = 0; max_length != iteration_variable_3; iteration_variable_3 = iteration_variable_3 + 1) {\n      iteration_variable_1 = (*callback_function)(input_value,param_4,(int)input_array + 0x1a,1);\n      if (iteration_variable_1 == -1) goto LAB_00005afc;\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_length_and_iterate_00005a58",
                "param_1": "input_value",
                "param_2": "input_array",
                "param_3": "output_length",
                "param_5": "callback_function",
                "iVar1": "iteration_variable_1",
                "uVar2": "return_value",
                "iVar3": "iteration_variable_2",
                "uVar4": "max_length",
                "uVar5": "iteration_variable_3",
                "bVar6": "flag_variable"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "formatted_output_00005b34",
            "code": "\ncode * formattedOutput_00005b34(undefined4 formatString,uint *argsPointer,undefined4 formatData,code *printerFunction,uint **argPointerPtr\n                   )\n\n{\n  bool isDivisible;\n  byte charValue;\n  int error;\n  code *result;\n  char *hexDigits;\n  int printResult;\n  char *charPointer;\n  uint value;\n  uint *dataPointer;\n  uint base;\n  uint **dataPointerPtr;\n  char **charPointerPtr;\n  uint length;\n  char *outputBuffer;\n  code *defaultPrinterFunction;\n  \n  charValue = *(byte *)(argsPointer + 6);\n  charPointer = (char *)((int)argsPointer + 0x43);\n  defaultPrinterFunction = printerFunction;\n  if (0x78 < charValue) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)argsPointer + 0x42) = charValue;\nLAB_00005bdc:\n    charPointer = (char *)((int)argsPointer + 0x42);\n    value = 1;\nLAB_00005d28:\n    argsPointer[4] = value;\n    *(undefined *)((int)argsPointer + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (charValue < 99) {\n    if (charValue == 0) goto LAB_00005d06;\n    if (charValue == 0x58) {\n      hexDigits = \"0123456789ABCDEF\";\n      *(undefined *)((int)argsPointer + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(charValue) {\n  case 99:\n    value = **argPointerPtr;\n    *argPointerPtr = *argPointerPtr + 1;\n    *(char *)((int)argsPointer + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *argsPointer;\n    dataPointer = *argPointerPtr;\n    if ((int)(base << 0x18) < 0) {\n      value = *dataPointer;\n      *argPointerPtr = dataPointer + 1;\n    }\n    else {\n      value = *dataPointer;\n      *argPointerPtr = dataPointer + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)argsPointer + 0x43) = 0x2d;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    dataPointerPtr = (uint **)*argPointerPtr;\n    base = *argsPointer;\n    value = argsPointer[5];\n    *argPointerPtr = (uint *)(dataPointerPtr + 1);\n    dataPointer = *dataPointerPtr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *dataPointer = value;\n    }\n    else {\n      *(short *)dataPointer = (short)value;\n    }\nLAB_00005d06:\n    argsPointer[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    dataPointer = *argPointerPtr;\n    value = *argsPointer;\n    *argPointerPtr = dataPointer + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *dataPointer;\n    }\n    else {\n      value = (uint)*(ushort *)dataPointer;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    if (charValue == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *argsPointer = *argsPointer | 0x20;\n  case 0x78:\n    hexDigits = \"0123456789abcdef\";\n    *(undefined *)((int)argsPointer + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *argsPointer;\n    value = **argPointerPtr;\n    *argPointerPtr = *argPointerPtr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *argsPointer = base | 0x20;\n    }\n    if (value == 0) {\n      *argsPointer = *argsPointer & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    charPointerPtr = (char **)*argPointerPtr;\n    *argPointerPtr = (uint *)(charPointerPtr + 1);\n    charPointer = *charPointerPtr;\n    error = memchr(charPointer,0,argsPointer[1],charPointerPtr,formatString,argsPointer,formatData);\n    if (error != 0) {\n      argsPointer[1] = error - (int)charPointer;\n    }\n    value = argsPointer[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)argsPointer + 0x43) = 0;\nLAB_00005c36:\n  length = argsPointer[1];\n  argsPointer[2] = length;\n  if (-1 < (int)length) {\n    *argsPointer = *argsPointer & 0xfffffffb;\n  }\n  outputBuffer = charPointer;\n  if ((value != 0) || (length != 0)) {\n    do {\n      outputBuffer = outputBuffer + -1;\n      *outputBuffer = hexDigits[value - base * (value / base)];\n      isDivisible = base <= value;\n      value = value / base;\n    } while (isDivisible);\n  }\n  if (((base == 8) && ((int)(*argsPointer << 0x1f) < 0)) && ((int)argsPointer[1] <= (int)argsPointer[4])) {\n    outputBuffer[-1] = '0';\n    outputBuffer = outputBuffer + -1;\n  }\n  argsPointer[4] = (int)charPointer - (int)outputBuffer;\n  charPointer = outputBuffer;\nLAB_00005c84:\n  error = _printf_common(formatString,argsPointer,&defaultPrinterFunction,formatData,printerFunction);\n  if ((error == -1) || (error = (*printerFunction)(formatString,formatData,charPointer,argsPointer[4]), error == -1)) {\nLAB_00005c98:\n    result = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*argsPointer << 0x1e) < 0) {\n      for (error = 0; error < (int)(argsPointer[3] - (int)defaultPrinterFunction); error = error + 1) {\n        printResult = (*printerFunction)(formatString,formatData,(int)argsPointer + 0x19,1);\n        if (printResult == -1) goto LAB_00005c98;\n      }\n    }\n    result = (code *)argsPointer[3];\n    if ((int)(code *)argsPointer[3] < (int)defaultPrinterFunction) {\n      result = defaultPrinterFunction;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "formatted_output_00005b34",
                "param_1": "formatString",
                "param_2": "argsPointer",
                "param_3": "formatData",
                "param_4": "printerFunction",
                "param_5": "argPointerPtr",
                "bVar1": "isDivisible",
                "bVar2": "charValue",
                "iVar3": "error",
                "pcVar4": "result",
                "pcVar5": "hexDigits",
                "iVar6": "printResult",
                "pcVar7": "charPointer",
                "puVar9": "dataPointer",
                "uVar8": "value",
                "uVar10": "base",
                "ppuVar11": "dataPointerPtr",
                "ppcVar12": "charPointerPtr",
                "uVar13": "length",
                "pcVar14": "outputBuffer",
                "local_24": "defaultPrinterFunction"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "read_byte_from_stream_00005e10",
            "code": "\nuint readByteFromStream_00005e10(int streamPointer,byte **streamBuffer)\n\n{\n  int fillResult;\n  uint byteValue;\n  byte *currentByte;\n  \n  if ((streamPointer != 0) && (*(int *)(streamPointer + 0x18) == 0)) {\n    __sinit();\n  }\n  if (streamBuffer == (byte **)&DAT_000079b8) {\n    streamBuffer = *(byte ***)(streamPointer + 4);\n  }\n  else if (streamBuffer == (byte **)&DAT_000079d8) {\n    streamBuffer = *(byte ***)(streamPointer + 8);\n  }\n  else if (streamBuffer == (byte **)&DAT_00007998) {\n    streamBuffer = *(byte ***)(streamPointer + 0xc);\n  }\n  fillResult = __srefill_r(streamPointer,streamBuffer);\n  if (fillResult == 0) {\n    streamBuffer[1] = streamBuffer[1] + -1;\n    currentByte = *streamBuffer;\n    *streamBuffer = currentByte + 1;\n    byteValue = (uint)*currentByte;\n  }\n  else {\n    byteValue = 0xffffffff;\n  }\n  return byteValue;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "read_byte_from_stream_00005e10",
                "param_1": "streamPointer",
                "param_2": "streamBuffer",
                "iVar1": "fillResult",
                "uVar2": "byteValue",
                "pbVar3": "currentByte"
            },
            "calling": [
                "getchar"
            ],
            "called": [
                "__srefill_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "parse_input_00005e68",
            "code": "\nvoid parseInput_00005e68(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 input1_copy;\n  undefined4 string_length;\n  undefined2 constant_value;\n  undefined2 constant_value_2;\n  undefined4 input1_copy_2;\n  undefined4 string_length_copy;\n  undefined *string_pointer;\n  undefined4 counter;\n  undefined4 counter2;\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  \n  constant_value = 0x204;\n  input1_copy = input1;\n  input1_copy_2 = input1;\n  temp_var_1 = input3;\n  temp_var_2 = input4;\n  string_length = strlen();\n  string_pointer = &LAB_00004dea_1;\n  counter = 0;\n  counter2 = 0;\n  constant_value_2 = 0xffff;\n  string_length_copy = string_length;\n  __ssvfiscanf_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input1_copy,input2,&temp_var_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "parse_input_00005e68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_80": "input1_copy",
                "local_7c": "string_length",
                "local_74": "constant_value",
                "local_72": "constant_value_2",
                "local_70": "input1_copy_2",
                "local_6c": "string_length_copy",
                "local_5c": "string_pointer",
                "local_4c": "counter",
                "local_38": "counter2",
                "uStack_8": "temp_var_1",
                "uStack_4": "temp_var_2"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "__ssvfiscanf_r",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copy_string_00005ebc(char *dest,char *src)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *src;\n    *dest = current_char;\n    src = src + 1;\n    dest = dest + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = string;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "_tzset_unlocked",
                "siscanf"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "convert_string_to_number_00005edc",
            "code": "\nuint convertStringToNumber_00005edc(undefined4 *result,byte *string,byte **remainingString,uint base)\n\n{\n  uint number;\n  uint char;\n  byte isNegative;\n  int isValid;\n  uint digit;\n  uint maxValue;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = string;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    char = (uint)*currentChar;\n    isNegative = (&DAT_00007a99)[char] & 8;\n  } while (((&DAT_00007a99)[char] & 8) != 0);\n  if (char == 0x2d) {\n    char = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (char == 0x2b) {\n    char = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (char != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (char != 0x30)) goto LAB_00005f26;\n  if ((*nextChar & 0xdf) == 0x58) {\n    char = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  isValid = 0;\n  maxValue = 0xffffffff / base;\n  number = 0;\n  do {\n    digit = char - 0x30;\n    if (9 < digit) {\n      if (char - 0x41 < 0x1a) {\n        digit = char - 0x37;\n      }\n      else {\n        if (0x19 < char - 0x61) break;\n        digit = char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((isValid < 0) || (maxValue < number)) ||\n       ((maxValue == number && ((int)~(base * maxValue) < (int)digit)))) {\n      isValid = -1;\n    }\n    else {\n      number = number * base + digit;\n      isValid = 1;\n    }\n    char = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (isValid < 0) {\n    *result = 0x22;\n    number = 0xffffffff;\n    if (remainingString == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      number = -number;\n    }\n    if (remainingString == (byte **)0x0) {\n      return number;\n    }\n    if (isValid == 0) goto LAB_00005fb8;\n  }\n  string = nextChar + -1;\nLAB_00005fb8:\n  *remainingString = string;\n  return number;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "convert_string_to_number_00005edc",
                "param_1": "result",
                "param_2": "string",
                "param_3": "remainingString",
                "param_4": "base",
                "uVar1": "number",
                "uVar2": "char",
                "bVar3": "isNegative",
                "iVar4": "isValid",
                "uVar5": "digit",
                "uVar6": "maxValue",
                "pbVar7": "currentChar",
                "pbVar8": "nextChar"
            },
            "calling": [
                "strtoul"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "convert_string_to_unsigned_long_00005fd8",
            "code": "\nvoid convertStringToUnsignedLong_00005fd8(undefined4 sourceString,undefined4 endPtr,undefined4 base)\n\n{\n  _strtoul_l_isra_0(relocationArray[16].r_offset,sourceString,endPtr,base);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "convert_string_to_unsigned_long_00005fd8",
                "param_1": "sourceString",
                "param_2": "endPtr",
                "param_3": "base",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_strtoul_l.isra.0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "lock_acquire_recursive_00005fec",
            "code": "\nvoid lockAcquireRecursive_00005fec(void)\n\n{\n  lockAcquireRecursive_00005fec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "lock_acquire_recursive_00005fec",
                "__retarget_lock_acquire_recursive": "lockAcquireRecursive"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "release_recursive_lock_00005ff8",
            "code": "\nvoid releaseRecursiveLock_00005ff8(void)\n\n{\n  __retarget_lock_release_recursive(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "release_recursive_lock_00005ff8"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint target,uint length)\n\n{\n  byte current_byte;\n  char num_zeros;\n  char num_zeros_2;\n  char num_zeros_3;\n  char num_zeros_4;\n  byte *next_byte;\n  uint *next_uint;\n  byte *result;\n  uint uint_remainder;\n  uint param_3_aligned;\n  uint xor_result;\n  uint shifted_xor_result;\n  bool is_nonzero_1;\n  bool is_nonzero_2;\n  bool is_nonzero_3;\n  bool is_nonzero_4;\n  \n  target = target & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      next_uint = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = next_uint;\n    } while (current_byte != target);\n  }\n  else {\n    uint_remainder = (uint)data & 7;\n    while( true ) {\n      if (uint_remainder == 0) {\n        uint_remainder = target | target << 8;\n        uint_remainder = uint_remainder | uint_remainder << 0x10;\n        param_3_aligned = length & 0xfffffff8;\n        do {\n          next_uint = data + 2;\n          param_3_aligned = param_3_aligned - 8;\n          xor_result = *data ^ uint_remainder;\n          shifted_xor_result = data[1] ^ uint_remainder;\n          num_zeros = -((char)xor_result == '\\0');\n          num_zeros_2 = -((char)(xor_result >> 8) == '\\0');\n          num_zeros_3 = -((char)(xor_result >> 0x10) == '\\0');\n          num_zeros_4 = -((char)(xor_result >> 0x18) == '\\0');\n          xor_result = CONCAT13(num_zeros_4,CONCAT12(num_zeros_3,CONCAT11(num_zeros_2,num_zeros)));\n          is_nonzero_1 = (char)shifted_xor_result != '\\0';\n          is_nonzero_2 = (char)(shifted_xor_result >> 8) != '\\0';\n          is_nonzero_3 = (char)(shifted_xor_result >> 0x10) != '\\0';\n          is_nonzero_4 = (char)(shifted_xor_result >> 0x18) != '\\0';\n          shifted_xor_result = CONCAT13(is_nonzero_4 * num_zeros_4 - !is_nonzero_4,\n                            CONCAT12(is_nonzero_3 * num_zeros_3 - !is_nonzero_3,\n                                     CONCAT11(is_nonzero_2 * num_zeros_2 - !is_nonzero_2,is_nonzero_1 * num_zeros - !is_nonzero_1)));\n          if (shifted_xor_result != 0) {\n            if (xor_result == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result = shifted_xor_result;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result & 1) == 0) {\n              is_nonzero_1 = (xor_result & 0x100) == 0;\n              next_byte = result + 1;\n              if (is_nonzero_1) {\n                is_nonzero_1 = (xor_result & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (is_nonzero_1) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = next_uint;\n        } while (param_3_aligned != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      next_uint = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target) break;\n      uint_remainder = (uint)next_uint & 7;\n      data = next_uint;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)next_uint + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "num_zeros",
                "cVar3": "num_zeros_2",
                "cVar4": "num_zeros_3",
                "cVar5": "num_zeros_4",
                "pbVar6": "next_byte",
                "puVar7": "next_uint",
                "pbVar8": "result",
                "uVar9": "uint_remainder",
                "uVar10": "param_3_aligned",
                "uVar11": "xor_result",
                "uVar12": "shifted_xor_result",
                "bVar13": "is_nonzero_1",
                "bVar14": "is_nonzero_2",
                "bVar15": "is_nonzero_3",
                "bVar16": "is_nonzero_4"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_vfprintf_r",
                "_printf_i",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int destIndex,undefined *sourceArray,int numElements)\n\n{\n  undefined *sourcePtr;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = sourceArray + numElements;\n  destPtr = (undefined *)(destIndex + -1);\n  if (sourceArray != endPtr) {\n    do {\n      sourcePtr = sourceArray + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *sourceArray;\n      sourceArray = sourcePtr;\n    } while (sourcePtr != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destIndex",
                "param_2": "sourceArray",
                "param_3": "numElements",
                "puVar1": "sourcePtr",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "__submore",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "copy_and_free_memory_000060cc",
            "code": "\nint copy_and_free_memory_000060cc(undefined4 ptr_context,int ptr_source,uint size,undefined4 ptr_variable)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (ptr_source != 0) {\n    if (size == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      result = ptr_source;\n      if ((usable_size < size) && (result = _malloc_r(ptr_context,size), result != 0)) {\n        memcpy(result,ptr_source,size);\n        _free_r(ptr_context,ptr_source);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(ptr_context,size,size,ptr_variable);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "copy_and_free_memory_000060cc",
                "param_1": "ptr_context",
                "param_2": "ptr_source",
                "param_3": "size",
                "param_4": "ptr_variable",
                "iVar1": "result",
                "uVar2": "usable_size"
            },
            "calling": [
                "__submore"
            ],
            "called": [
                "_malloc_r",
                "_free_r",
                "memcpy",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "cleanup_and_reset_00006192",
            "code": "\nundefined4 cleanupAndReset_00006192(undefined4 result,undefined4 *params)\n\n{\n  if ((undefined4 *)params[0xd] != (undefined4 *)0x0) {\n    if ((undefined4 *)params[0xd] != params + 0x11) {\n      _free_r();\n    }\n    params[1] = params[0x10];\n    params[0xd] = 0;\n    if (params[0x10] != 0) {\n      *params = params[0xf];\n      return 0;\n    }\n  }\n  *params = params[4];\n  params[1] = 0;\n  *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "cleanup_and_reset_00006192",
                "param_1": "result",
                "param_2": "params",
                "param_2[0xd]": "params[0xd]",
                "param_2[0x10]": "params[0x10]",
                "param_2[1]": "params[1]",
                "param_2[0xf]": "params[0xf]"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_format_string_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseFormatString_000061cc(undefined4 var1,byte **var2,byte *formatString,int **var3)\n\n{\n  int index;\n  uint currentChar;\n  byte *nextChar;\n  uint charValue;\n  int **outputArray;\n  undefined stackArray [256];\n  uint flags1;\n  undefined4 conversionWidth;\n  uint flags2;\n  int return_value;\n  int counter1;\n  undefined *counter2;\n  int formatType;\n  undefined *functionPointer;\n  code *ssrefillPointer;\n  \n  return_value = 0;\n  counter1 = 0;\n  functionPointer = &LAB_00006118_1;\n  ssrefillPointer = __ssrefill_r + 1;\n  outputArray = var3;\n  counter2 = stackArray;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      charValue = (uint)*formatString;\n      if (charValue == 0) {\n        return return_value;\n      }\n      currentChar = (byte)(&DAT_00007a99)[charValue] & 8;\n      nextChar = formatString + 1;\n      if (((&DAT_00007a99)[charValue] & 8) == 0) break;\n      while (((formatString = nextChar, 0 < (int)var2[1] ||\n              (index = (*ssrefillPointer)(var1,var2), index == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**var2] << 0x1c) < 0))) {\n        counter1 = counter1 + 1;\n        var2[1] = var2[1] + -1;\n        *var2 = *var2 + 1;\n      }\n    }\n    if (charValue == 0x25) break;\nLAB_00006352:\n    if (((int)var2[1] < 1) && (index = (*ssrefillPointer)(var1,var2), index != 0))\n    goto LAB_00006380;\n    if (**var2 != charValue) {\n      return return_value;\n    }\n    *var2 = *var2 + 1;\n    counter1 = counter1 + 1;\n    var2[1] = var2[1] + -1;\n    formatString = nextChar;\n  }\n  flags2 = currentChar;\n  flags1 = currentChar;\n  if (formatString[1] == 0x2a) {\n    nextChar = formatString + 2;\n    flags1 = 0x10;\n  }\n  while( true ) {\n    currentChar = (uint)*nextChar;\n    if (9 < currentChar - 0x30) break;\n    nextChar = nextChar + 1;\n    flags2 = (flags2 * 10 + currentChar) - 0x30;\n  }\n  index = memchr(&DAT_00007c02,currentChar,3);\n  if (index != 0) {\n    flags1 = 1 << (index - 0x7c02U & 0xff) | flags1;\n    nextChar = nextChar + 1;\n  }\n  formatString = nextChar + 1;\n  currentChar = (uint)*nextChar;\n  if (currentChar < 0x79) {\n    if (0x57 < currentChar) {\n      switch(currentChar) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        formatString = (byte *)__sccl(stackArray,formatString);\n        flags1 = flags1 | 0x40;\n        formatType = 1;\n        break;\n      case 99:\n        flags1 = flags1 | 0x40;\n        formatType = 0;\n        break;\n      case 100:\n      case 0x75:\n        conversionWidth = 10;\nLAB_000063a0:\n        if (currentChar < 0x6f) {\n          formatType = 3;\n        }\n        else {\n          formatType = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        formatType = 5;\n        break;\n      case 0x69:\n        conversionWidth = 0;\n        formatType = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags1 << 0x1b)) {\n          if ((int)(flags1 << 0x1f) < 0) {\n            *(short *)*outputArray = (short)counter1;\n            outputArray = outputArray + 1;\n          }\n          else {\n            **outputArray = counter1;\n            outputArray = outputArray + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        conversionWidth = 8;\n        formatType = 4;\n        break;\n      case 0x70:\n        flags1 = flags1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flags1 = flags1 | 0x200;\n        conversionWidth = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        formatType = 2;\n      }\nLAB_000063ac:\n      if (((int)var2[1] < 1) && (index = (*ssrefillPointer)(var1,var2), index != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**var2] << 0x1c) < 0) {\n          counter1 = counter1 + 1;\n          nextChar = var2[1];\n          var2[1] = nextChar + -1;\n          if ((int)(nextChar + -1) < 1) {\n            index = (*ssrefillPointer)(var1,var2);\n            if (index != 0) goto LAB_00006380;\n          }\n          else {\n            *var2 = *var2 + 1;\n          }\n        }\n      }\n      if (formatType < 3) {\n        index = _scanf_chars(var1,&flags1,var2,&outputArray);\n      }\n      else {\n        if (4 < formatType) goto LAB_000061f6;\n        index = _scanf_i(var1,&flags1,var2,&outputArray);\n      }\n      if (index == 1) {\n        return return_value;\n      }\n      if (index == 2) {\nLAB_00006380:\n        if (return_value == 0) {\nLAB_00006388:\n          return_value = -1;\n        }\n        else if ((*(ushort *)(var2 + 3) & 0x40) != 0) {\n          return_value = -1;\n        }\n        return return_value;\n      }\n      goto LAB_000061f6;\n    }\n    nextChar = formatString;\n    if (currentChar == 0x25) goto LAB_00006352;\n    if (currentChar < 0x26) {\n      if (currentChar != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (currentChar - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  formatType = 3;\n  conversionWidth = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_format_string_000061cc",
                "param_1": "var1",
                "param_2": "var2",
                "param_3": "formatString",
                "param_4": "var3",
                "iVar1": "index",
                "uVar2": "currentChar",
                "pbVar3": "nextChar",
                "uVar4": "charValue",
                "local_2b0": "outputArray",
                "auStack_2ac": "stackArray",
                "local_1ac": "flags1",
                "local_1a8": "conversionWidth",
                "local_1a4": "flags2",
                "local_1a0": "return_value",
                "local_19c": "counter1",
                "local_198": "counter2",
                "local_194": "formatType",
                "local_30": "functionPointer",
                "local_2c": "ssrefillPointer"
            },
            "calling": [
                "siscanf"
            ],
            "called": [
                "__ssrefill_r",
                "__sccl",
                "memchr",
                "_scanf_chars",
                "_scanf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_parameter,uint *data_array,byte **byte_array,undefined4 *output_parameter)\n\n{\n  int result;\n  uint temp_value;\n  byte **byte_pointer_array;\n  byte *byte_pointer;\n  byte *current_byte;\n  byte *byte_pointer2;\n  int counter;\n  \n  if (data_array[2] == 0) {\n    if (data_array[6] == 0) {\n      temp_value = 1;\n    }\n    else {\n      temp_value = 0xffffffff;\n    }\n    data_array[2] = temp_value;\n  }\n  if (-1 < (int)(*data_array << 0x1b)) {\n    byte_pointer_array = (byte **)*output_parameter;\n    *output_parameter = byte_pointer_array + 1;\n    current_byte = *byte_pointer_array;\n  }\n  counter = 0;\n  do {\n    temp_value = data_array[6];\n    if (temp_value != 0) {\n      if (temp_value == 1) {\n        if (*(char *)(data_array[5] + (uint)**byte_array) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data_array & 0x10) == 0) && (data_array[3] = data_array[3] + 1, data_array[6] != 0)) {\n            *current_byte = 0;\n          }\n          data_array[4] = counter + data_array[4];\n          return 0;\n        }\n      }\n      else if ((temp_value != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**byte_array] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_pointer2 = current_byte;\n    if (-1 < (int)(*data_array << 0x1b)) {\n      byte_pointer2 = current_byte + 1;\n      *current_byte = **byte_array;\n    }\n    byte_pointer = byte_array[1];\n    *byte_array = *byte_array + 1;\n    temp_value = data_array[2] - 1;\n    byte_array[1] = byte_pointer + -1;\n    counter = counter + 1;\n    data_array[2] = temp_value;\n    current_byte = byte_pointer2;\n    if ((temp_value == 0) ||\n       (((int)(byte_pointer + -1) < 1 &&\n        (result = (*(code *)data_array[0x60])(input_parameter,byte_array,temp_value,(code *)data_array[0x60],output_parameter),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_parameter",
                "param_2": "data_array",
                "param_3": "byte_array",
                "param_4": "output_parameter",
                "iVar1": "result",
                "iVar6": "counter",
                "uVar2": "temp_value",
                "ppbVar3": "byte_pointer_array",
                "pbVar4": "byte_pointer",
                "pbVar5": "byte_pointer2",
                "unaff_r6": "current_byte"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_binary_0000656c",
            "code": "\nundefined4 process_binary_0000656c(undefined4 param1,uint *param2,byte **param3,undefined4 *param4)\n\n{\n  int index;\n  undefined4 result;\n  code *converter;\n  uint value;\n  byte *bytePtr;\n  uint length;\n  undefined4 *outPointer;\n  uint *pointer;\n  uint *pointer2;\n  uint *pointer3;\n  int count;\n  int i;\n  undefined *dataArray [4];\n  \n  dataArray[0] = &DAT_00007c2f;\n  dataArray[1] = &DAT_00007c32;\n  dataArray[2] = &DAT_00007c35;\n  converter = (code *)&UNK_00004f81;\n  if (param2[6] != 3) {\n    converter = (code *)&UNK_00005fd5;\n  }\n  length = param2[2];\n  value = length - 1;\n  if (0x15c < value) {\n    count = length - 0x15d;\n    length = 0x15d;\n  }\n  if (0x15c < value) {\n    param2[2] = length;\n  }\n  pointer3 = param2 + 7;\n  if (value < 0x15d) {\n    count = 0;\n  }\n  *param2 = *param2 | 0xd00;\n  i = 0;\n  pointer2 = pointer3;\n  do {\n    index = memchr(dataArray[i],**param3,2);\n    if (index != 0) {\n      if (i == 1) {\n        if (param2[1] == 0) {\n          param2[1] = 8;\n          *param2 = *param2 | 0x200;\n        }\n        value = *param2 & 0xfffffaff;\nLAB_000065f4:\n        *param2 = value;\n      }\n      else if (i == 2) {\n        if ((*param2 & 0x600) != 0x200) goto LAB_00006624;\n        param2[1] = 0x10;\n        value = *param2 | 0x100;\n        goto LAB_000065f4;\n      }\n      value = param2[2];\n      param2[2] = value - 1;\n      if (value != 0) {\n        bytePtr = *param3;\n        *param3 = bytePtr + 1;\n        pointer = (uint *)((int)pointer2 + 1);\n        *(byte *)pointer2 = *bytePtr;\n        bytePtr = param3[1];\n        param3[1] = bytePtr + -1;\n        pointer2 = pointer;\n        if (((int)(bytePtr + -1) < 1) &&\n           (index = (*(code *)param2[0x60])(param1,param3), index != 0)) {\n          i = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    i = i + 1;\n  } while (i != 3);\n  if (param2[1] == 0) {\n    param2[1] = 10;\n  }\n  __sccl(param2[5],\"01234567]\" + (8 - param2[1]));\n  i = 0;\n  while( true ) {\n    pointer = pointer2;\n    if (param2[2] == 0) break;\n    bytePtr = *param3;\n    value = (uint)*bytePtr;\n    if (*(char *)(param2[5] + value) == '\\0') break;\n    if ((value == 0x30) && ((int)(*param2 << 0x14) < 0)) {\n      i = i + 1;\n      if (count != 0) {\n        count = count + -1;\n        param2[2] = param2[2] + 1;\n      }\n    }\n    else {\n      *param2 = *param2 & 0xfffff6ff;\n      pointer = (uint *)((int)pointer2 + 1);\n      *(byte *)pointer2 = *bytePtr;\n    }\n    bytePtr = param3[1];\n    param3[1] = bytePtr + -1;\n    if ((int)(bytePtr + -1) < 1) {\n      index = (*(code *)param2[0x60])(param1,param3);\n      if (index != 0) break;\n    }\n    else {\n      *param3 = *param3 + 1;\n    }\n    param2[2] = param2[2] - 1;\n    pointer2 = pointer;\n  }\nLAB_000066ca:\n  if ((int)(*param2 << 0x17) < 0) {\n    if (pointer3 < pointer) {\n      (*(code *)param2[0x5f])(param1,*(byte *)((int)pointer + -1),param3);\n      pointer = (uint *)((int)pointer + -1);\n    }\n    if (pointer == pointer3) {\n      return 1;\n    }\n  }\n  if ((*param2 & 0x10) == 0) {\n    *(byte *)pointer = 0;\n    result = (*converter)(param1,pointer3,0,param2[1]);\n    outPointer = (undefined4 *)*param4;\n    value = *param2;\n    *param4 = outPointer + 1;\n    outPointer = (undefined4 *)*outPointer;\n    if ((value & 0x20) == 0) {\n      if ((int)(value << 0x1f) < 0) {\n        *(short *)outPointer = (short)result;\n      }\n      else {\n        *outPointer = result;\n      }\n    }\n    else {\n      *outPointer = result;\n    }\n    param2[3] = param2[3] + 1;\n  }\n  param2[4] = (uint)((int)pointer + param2[4] + (i - (int)pointer3));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_binary_0000656c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "uVar2": "result",
                "pcVar3": "converter",
                "uVar4": "value",
                "pbVar5": "bytePtr",
                "uVar6": "length",
                "puVar7": "outPointer",
                "puVar8": "pointer",
                "puVar9": "pointer2",
                "puVar10": "pointer3",
                "unaff_r9": "count",
                "iVar11": "i",
                "local_34": "dataArray"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "__sccl",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *buffer,undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 temp1;\n  int temp2;\n  undefined4 result;\n  ushort flag;\n  uint value3;\n  \n  if ((buffer != (undefined4 *)0x0) && (buffer[6] == 0)) {\n    __sinit();\n  }\n  if (data == &DAT_000079b8) {\n    data = (undefined4 *)buffer[1];\n  }\n  else if (data == (undefined4 *)&DAT_000079d8) {\n    data = (undefined4 *)buffer[2];\n  }\n  else if (data == (undefined4 *)&DAT_00007998) {\n    data = (undefined4 *)buffer[3];\n  }\n  flag = *(ushort *)(data + 3);\n  data[1] = 0;\n  value3 = (uint)*(ushort *)(data + 3);\n  if ((int)(value3 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(value3 << 0x1d) < 0) {\n    if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data[0xd] != data + 0x11) {\n        _free_r(buffer);\n      }\n      data[1] = data[0x10];\n      data[0xd] = 0;\n      if (data[0x10] != 0) {\n        *data = data[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(value3 << 0x1b)) {\n      *buffer = 9;\n      flag = flag | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(value3 << 0x1c) < 0) {\n      temp2 = _fflush_r(buffer,data,value3 << 0x1c,value3,value2);\n      if (temp2 != 0) {\n        return 0xffffffff;\n      }\n      data[2] = 0;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfff7;\n      data[6] = 0;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 4;\n  }\n  if (data[4] == 0) {\n    __smakebuf_r(buffer,data);\n  }\n  flag = *(ushort *)(data + 3);\n  temp1 = *(undefined2 *)(data + 3);\n  if ((flag & 3) != 0) {\n    *(undefined2 *)(data + 3) = 1;\n    _fwalk(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(data + 3) = temp1;\n    if ((flag & 9) == 9) {\n      __sflush_r(buffer,data);\n    }\n  }\n  result = data[4];\n  *data = result;\n  temp2 = (*(code *)data[9])(buffer,data[8],result,data[5]);\n  data[1] = temp2;\n  if (0 < temp2) {\n    return 0;\n  }\n  flag = *(ushort *)(data + 3);\n  if (temp2 != 0) {\n    result = 0;\n  }\n  else {\n    flag = flag | 0x20;\n  }\n  if (temp2 != 0) {\n    data[1] = result;\n    flag = flag | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data + 3) = flag;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "result",
                "uVar4": "flag",
                "uVar5": "value3"
            },
            "calling": [
                "__srget_r"
            ],
            "called": [
                "_fflush_r",
                "_fwalk",
                "__smakebuf_r",
                "_free_r",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "parse_and_encode_0000687c",
            "code": "\nbyte * parse_and_encode_0000687c(int output_length,byte *input_data)\n\n{\n  byte *output_data;\n  uint input_byte;\n  int i;\n  uint first_byte;\n  uint curr_byte;\n  uint end_byte;\n  bool is_carot_present;\n  \n  first_byte = (uint)*input_data;\n  is_carot_present = first_byte == 0x5e;\n  if (is_carot_present) {\n    first_byte = (uint)input_data[1];\n    input_data = input_data + 2;\n  }\n  else {\n    input_data = input_data + 1;\n  }\n  i = output_length + -1;\n  do {\n    i = i + 1;\n    *(bool *)i = is_carot_present;\n  } while (i != output_length + 0xff);\n  if (first_byte == 0) {\n    output_data = input_data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      curr_byte = first_byte;\n      *(bool *)(output_length + curr_byte) = !is_carot_present;\n      input_data = input_data + 1;\n      while( true ) {\n        first_byte = (uint)input_data[-1];\n        if (first_byte != 0x2d) break;\n        end_byte = (uint)*input_data;\n        if ((end_byte == 0x5d) || (input_byte = curr_byte, (int)end_byte < (int)curr_byte)) goto LAB_000068aa;\n        do {\n          input_byte = input_byte + 1;\n          *(bool *)(output_length + input_byte) = !is_carot_present;\n        } while ((int)input_byte < (int)end_byte);\n        i = ~curr_byte + end_byte;\n        if ((int)end_byte <= (int)curr_byte) {\n          i = 0;\n        }\n        curr_byte = curr_byte + 1 + i;\n        input_data = input_data + 2;\n      }\n      output_data = input_data;\n    } while ((first_byte != 0x5d) && (output_data = input_data + -1, first_byte != 0));\n  }\n  return output_data;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "parse_and_encode_0000687c",
                "param_1": "output_length",
                "param_2": "input_data",
                "pbVar1": "output_data",
                "uVar2": "input_byte",
                "iVar3": "i",
                "uVar4": "first_byte",
                "uVar5": "curr_byte",
                "uVar6": "end_byte",
                "bVar7": "is_carot_present"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_or_resize_buffer_000068f0",
            "code": "\nundefined4 allocate_or_resize_buffer_000068f0(undefined4 param,int *buffer)\n\n{\n  int new_buffer;\n  int current_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    new_buffer = allocate_memory(param,0x400);\n    if (new_buffer != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = new_buffer;\n      *(undefined *)(new_buffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_buffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_buffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_buffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = buffer[0xe];\n    new_buffer = resize_memory(param,(int *)buffer[0xd],current_size << 1);\n    if (new_buffer != 0) {\n      memcpy(new_buffer + current_size,new_buffer,current_size);\n      buffer[0xd] = new_buffer;\n      buffer[0xe] = current_size << 1;\n      *buffer = new_buffer + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_or_resize_buffer_000068f0",
                "param_1": "param",
                "param_2": "buffer",
                "iVar1": "new_buffer",
                "iVar2": "current_size",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "resize_memory"
            },
            "calling": [],
            "called": [
                "_malloc_r",
                "memcpy",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_result_00006964",
            "code": "\nint calculateResult_00006964(undefined4 input,int array)\n\n{\n  int result;\n  \n  result = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    result = result + *(int *)(array + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_result_00006964",
                "param_1": "input",
                "param_2": "array",
                "iVar1": "result"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "divide_and_mod_00006974",
            "code": "\nundefined8 divideAndMod_00006974(int dividend,int divisor,int remainder,int modulus)\n\n{\n  int adjustedDivisor;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((modulus == 0) && (remainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    adjustedDivisor = -divisor - (uint)(dividend != 0);\n    if (modulus < 0) {\n      result = __udivmoddi4(-dividend,adjustedDivisor,-remainder,-modulus - (uint)(remainder != 0),temp);\n      return result;\n    }\n    result = __udivmoddi4(-dividend,adjustedDivisor,remainder,modulus,temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (modulus < 0) {\n    result = __udivmoddi4(dividend,divisor,-remainder,-modulus - (uint)(remainder != 0),temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = __udivmoddi4();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "divide_and_mod_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "modulus",
                "iVar1": "adjustedDivisor",
                "uVar2": "result",
                "local_8": "temp"
            },
            "calling": [
                "gmtime_r"
            ],
            "called": [
                "__udivmoddi4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "calculate_division_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong calculateDivisionAndRemainder_00006a14(uint dividend,uint divisor,uint highDividend,uint highDivisor,uint *quotientAndRemainder)\n\n{\n  code *jumpTable;\n  uint quotient1;\n  int shiftAmount;\n  uint tempDividend1;\n  uint tempDivisor1;\n  uint quotient2;\n  uint tempDividend2;\n  uint tempDivisor2;\n  uint quotient3;\n  uint tempDivisor3;\n  bool carryFlag;\n  ulonglong result;\n  \n  if (highDivisor == 0) {\n    if (divisor < highDividend) {\n      shiftAmount = LZCOUNT(highDividend);\n      quotient2 = highDividend;\n      if (shiftAmount != 0) {\n        quotient2 = highDividend << shiftAmount;\n        divisor = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n      }\n      tempDividend2 = quotient2 >> 0x10;\n      quotient3 = divisor / tempDividend2;\n      tempDividend1 = dividend >> 0x10 | (divisor - tempDividend2 * quotient3) * 0x10000;\n      quotient1 = quotient3 * (quotient2 & 0xffff);\n      tempDivisor1 = quotient3;\n      if (tempDividend1 <= quotient1 && quotient1 - tempDividend1 != 0) {\n        carryFlag = CARRY4(quotient2,tempDividend1);\n        tempDividend1 = quotient2 + tempDividend1;\n        tempDivisor1 = quotient3 - 1;\n        if ((carryFlag == false) && (tempDividend1 <= quotient1 && quotient1 - tempDividend1 != 0)) {\n          tempDivisor1 = quotient3 - 2;\n          tempDividend1 = tempDividend1 + quotient2;\n        }\n      }\n      quotient3 = (tempDividend1 - quotient1) / tempDividend2;\n      tempDividend2 = dividend & 0xffff | ((tempDividend1 - quotient1) - tempDividend2 * quotient3) * 0x10000;\n      tempDividend1 = quotient3 * (quotient2 & 0xffff);\n      quotient1 = quotient3;\n      if (tempDividend2 <= tempDividend1 && tempDividend1 - tempDividend2 != 0) {\n        carryFlag = CARRY4(quotient2,tempDividend2);\n        tempDividend2 = quotient2 + tempDividend2;\n        quotient1 = quotient3 - 1;\n        if ((carryFlag == false) && (tempDividend2 <= tempDividend1 && tempDividend1 - tempDividend2 != 0)) {\n          quotient1 = quotient3 - 2;\n          tempDividend2 = tempDividend2 + quotient2;\n        }\n      }\n      tempDividend2 = tempDividend2 - tempDividend1;\n      quotient1 = quotient1 | tempDivisor1 << 0x10;\n      quotient2 = 0;\n    }\n    else {\n      if (highDividend == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumpTable = (code *)software_udf(0xff,0x6abc);\n        result = (*jumpTable)();\n        return result;\n      }\n      shiftAmount = LZCOUNT(highDividend);\n      if (shiftAmount == 0) {\n        divisor = divisor - highDividend;\n        tempDivisor3 = highDividend >> 0x10;\n        tempDivisor2 = highDividend & 0xffff;\n        quotient2 = 1;\n        tempDivisor1 = highDividend;\n      }\n      else {\n        tempDivisor1 = highDividend << shiftAmount;\n        tempDivisor3 = tempDivisor1 >> 0x10;\n        quotient1 = divisor >> (0x20U - shiftAmount & 0xff);\n        quotient2 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        tempDividend1 = quotient1 / tempDivisor3;\n        tempDivisor2 = tempDivisor1 & 0xffff;\n        quotient3 = quotient2 >> 0x10 | (quotient1 - tempDivisor3 * tempDividend1) * 0x10000;\n        tempDividend2 = tempDividend1 * tempDivisor2;\n        dividend = dividend << shiftAmount;\n        quotient1 = tempDividend1;\n        if (quotient3 <= tempDividend2 && tempDividend2 - quotient3 != 0) {\n          carryFlag = CARRY4(tempDivisor1,quotient3);\n          quotient3 = tempDivisor1 + quotient3;\n          quotient1 = tempDividend1 - 1;\n          if ((carryFlag == false) && (quotient3 <= tempDividend2 && tempDividend2 - quotient3 != 0)) {\n            quotient1 = tempDividend1 - 2;\n            quotient3 = quotient3 + tempDivisor1;\n          }\n        }\n        tempDividend1 = (quotient3 - tempDividend2) / tempDivisor3;\n        divisor = quotient2 & 0xffff | ((quotient3 - tempDividend2) - tempDivisor3 * tempDividend1) * 0x10000;\n        tempDividend2 = tempDividend1 * tempDivisor2;\n        quotient2 = tempDividend1;\n        if (divisor <= tempDividend2 && tempDividend2 - divisor != 0) {\n          carryFlag = CARRY4(tempDivisor1,divisor);\n          divisor = tempDivisor1 + divisor;\n          quotient2 = tempDividend1 - 1;\n          if ((carryFlag == false) && (divisor <= tempDividend2 && tempDividend2 - divisor != 0)) {\n            quotient2 = tempDividend1 - 2;\n            divisor = divisor + tempDivisor1;\n          }\n        }\n        divisor = divisor - tempDividend2;\n        quotient2 = quotient2 | quotient1 << 0x10;\n      }\n      quotient3 = divisor / tempDivisor3;\n      tempDividend2 = dividend >> 0x10 | (divisor - tempDivisor3 * quotient3) * 0x10000;\n      quotient1 = tempDivisor2 * quotient3;\n      tempDividend1 = quotient3;\n      if (tempDividend2 <= quotient1 && quotient1 - tempDividend2 != 0) {\n        carryFlag = CARRY4(tempDivisor1,tempDividend2);\n        tempDividend2 = tempDivisor1 + tempDividend2;\n        tempDividend1 = quotient3 - 1;\n        if ((carryFlag == false) && (tempDividend2 <= quotient1 && quotient1 - tempDividend2 != 0)) {\n          tempDividend1 = quotient3 - 2;\n          tempDividend2 = tempDividend2 + tempDivisor1;\n        }\n      }\n      quotient3 = (tempDividend2 - quotient1) / tempDivisor3;\n      tempDividend2 = dividend & 0xffff | ((tempDividend2 - quotient1) - tempDivisor3 * quotient3) * 0x10000;\n      tempDivisor2 = tempDivisor2 * quotient3;\n      quotient1 = quotient3;\n      if (tempDividend2 <= tempDivisor2 && tempDivisor2 - tempDividend2 != 0) {\n        carryFlag = CARRY4(tempDivisor1,tempDividend2);\n        tempDividend2 = tempDivisor1 + tempDividend2;\n        quotient1 = quotient3 - 1;\n        if ((carryFlag == false) && (tempDividend2 <= tempDivisor2 && tempDivisor2 - tempDividend2 != 0)) {\n          quotient1 = quotient3 - 2;\n          tempDividend2 = tempDividend2 + tempDivisor1;\n        }\n      }\n      tempDividend2 = tempDividend2 - tempDivisor2;\n      quotient1 = quotient1 | tempDividend1 << 0x10;\n    }\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = tempDividend2 >> LZCOUNT(highDividend);\n      quotientAndRemainder[1] = 0;\n    }\n  }\n  else if (divisor < highDivisor) {\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = dividend;\n      quotientAndRemainder[1] = divisor;\n      return 0;\n    }\n    quotient1 = 0;\n    quotient2 = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(highDivisor);\n    if (shiftAmount != 0) {\n      tempDivisor2 = 0x20 - shiftAmount;\n      tempDividend1 = highDividend >> (tempDivisor2 & 0xff) | highDivisor << shiftAmount;\n      tempDivisor3 = tempDividend1 >> 0x10;\n      quotient1 = divisor >> (tempDivisor2 & 0xff);\n      quotient2 = dividend >> (tempDivisor2 & 0xff) | divisor << shiftAmount;\n      tempDividend2 = quotient1 / tempDivisor3;\n      tempDivisor1 = quotient2 >> 0x10 | (quotient1 - tempDivisor3 * tempDividend2) * 0x10000;\n      quotient3 = tempDividend2 * (tempDividend1 & 0xffff);\n      dividend = dividend << shiftAmount;\n      quotient1 = tempDividend2;\n      if (tempDivisor1 <= quotient3 && quotient3 - tempDivisor1 != 0) {\n        carryFlag = CARRY4(tempDividend1,tempDivisor1);\n        tempDivisor1 = tempDividend1 + tempDivisor1;\n        quotient1 = tempDividend2 - 1;\n        if ((carryFlag == false) && (tempDivisor1 <= quotient3 && quotient3 - tempDivisor1 != 0)) {\n          quotient1 = tempDividend2 - 2;\n          tempDivisor1 = tempDivisor1 + tempDividend1;\n        }\n      }\n      tempDividend2 = (tempDivisor1 - quotient3) / tempDivisor3;\n      tempDivisor1 = quotient2 & 0xffff | ((tempDivisor1 - quotient3) - tempDivisor3 * tempDividend2) * 0x10000;\n      quotient3 = tempDividend2 * (tempDividend1 & 0xffff);\n      quotient2 = tempDividend2;\n      if (tempDivisor1 <= quotient3 && quotient3 - tempDivisor1 != 0) {\n        carryFlag = CARRY4(tempDividend1,tempDivisor1);\n        tempDivisor1 = tempDividend1 + tempDivisor1;\n        quotient2 = tempDividend2 - 1;\n        if ((carryFlag == false) && (tempDivisor1 <= quotient3 && quotient3 - tempDivisor1 != 0)) {\n          quotient2 = tempDividend2 - 2;\n          tempDivisor1 = tempDivisor1 + tempDividend1;\n        }\n      }\n      quotient2 = quotient2 | quotient1 << 0x10;\n      result = (ulonglong)quotient2 * (ulonglong)(highDividend << shiftAmount);\n      if (CONCAT44(tempDivisor1 - quotient3,dividend) < result) {\n        result = result - CONCAT44(tempDividend1,highDividend << shiftAmount);\n        quotient2 = quotient2 - 1;\n      }\n      if (quotientAndRemainder != (uint *)0x0) {\n        quotient1 = ((tempDivisor1 - quotient3) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotientAndRemainder = quotient1 << (tempDivisor2 & 0xff) | dividend - (uint)result >> shiftAmount;\n        quotientAndRemainder[1] = quotient1 >> shiftAmount;\n      }\n      return (ulonglong)quotient2;\n    }\n    if ((highDivisor < divisor) || (highDividend <= dividend)) {\n      carryFlag = dividend < highDividend;\n      dividend = dividend - highDividend;\n      divisor = (divisor - highDivisor) - (uint)carryFlag;\n      quotient1 = 1;\n    }\n    else {\n      quotient1 = 0;\n    }\n    quotient2 = 0;\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = dividend;\n      quotientAndRemainder[1] = divisor;\n    }\n  }\n  return CONCAT44(quotient2,quotient1);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "calculate_division_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "highDividend",
                "param_4": "highDivisor",
                "param_5": "quotientAndRemainder",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "uVar1": "quotient1",
                "iVar2": "shiftAmount",
                "uVar3": "tempDividend1",
                "uVar4": "tempDivisor1",
                "uVar5": "quotient2",
                "uVar6": "tempDividend2",
                "uVar7": "tempDivisor2",
                "uVar8": "quotient3",
                "uVar9": "tempDivisor3",
                "bVar10": "carryFlag",
                "uVar11": "result"
            },
            "calling": [
                "__aeabi_ldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 136472,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_0000099c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001448",
            "FUN_000015d0",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ],
        [
            "FUN_00000d76",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_00001628",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00002028",
            "FUN_0000258c"
        ],
        [
            "FUN_000013b8",
            "FUN_000017dc"
        ]
    ],
    "locked_functions": []
}