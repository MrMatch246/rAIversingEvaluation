{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initialize_system_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_offset_00000428",
            "code": "\ndword updateOffset_00000428(undefined4 *output,int currentOffset)\n\n{\n  undefined4 randomValue;\n  dword updatedOffset;\n  \n  randomValue = FUN_00000cd0();\n  updatedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((currentOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < currentOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = currentOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *output = 0xc;\n    updatedOffset = 0xffffffff;\n  }\n  FUN_00000d0c(randomValue);\n  return updatedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_offset_00000428",
                "param_1": "output",
                "param_2": "currentOffset",
                "uVar1": "randomValue",
                "local_c": "updatedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "process_data_00000490",
            "code": "\nundefined4 process_data_00000490(undefined4 input_1,undefined4 input_2,undefined4 data_1,undefined4 data_2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(data_1,data_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "process_data_00000490",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_1",
                "param_4": "data_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_value_and_return_00000514",
            "code": "\nundefined4 set_value_and_return_00000514(undefined4 *output_ptr)\n\n{\n  *output_ptr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_value_and_return_00000514",
                "param_1": "output_ptr"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_validity_00000534",
            "code": "\nundefined4 checkInputValidity_00000534(undefined4 *result,int input)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_validity_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "extract_leading_byte_00000566",
            "code": "\nint extract_leading_byte_00000566(int input_value)\n\n{\n  byte leading_byte_4;\n  byte leading_byte_1;\n  byte leading_byte_2;\n  byte leading_byte_3;\n  int result;\n  \n  leading_byte_1 = (byte)input_value;\n  leading_byte_2 = (byte)((uint)input_value >> 8);\n  leading_byte_3 = (byte)((uint)input_value >> 0x10);\n  leading_byte_4 = (byte)((uint)input_value >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((leading_byte_1 & 1) << 1 | leading_byte_1 >> 1 & 1) << 1 | leading_byte_1 >> 2 & 1) << 1\n                                  | leading_byte_1 >> 3 & 1) << 1 | leading_byte_1 >> 4 & 1) << 1 | leading_byte_1 >> 5 & 1) <<\n                                1 | leading_byte_1 >> 6 & 1) << 1 | leading_byte_1 >> 7) << 0x18 |\n                  (uint)(byte)((((((((leading_byte_2 & 1) << 1 | leading_byte_2 >> 1 & 1) << 1 | leading_byte_2 >> 2 & 1) << 1\n                                  | leading_byte_2 >> 3 & 1) << 1 | leading_byte_2 >> 4 & 1) << 1 | leading_byte_2 >> 5 & 1) <<\n                                1 | leading_byte_2 >> 6 & 1) << 1 | leading_byte_2 >> 7) << 0x10 |\n                  (uint)(byte)((((((((leading_byte_3 & 1) << 1 | leading_byte_3 >> 1 & 1) << 1 | leading_byte_3 >> 2 & 1) << 1\n                                  | leading_byte_3 >> 3 & 1) << 1 | leading_byte_3 >> 4 & 1) << 1 | leading_byte_3 >> 5 & 1) <<\n                                1 | leading_byte_3 >> 6 & 1) << 1 | leading_byte_3 >> 7) << 8 |\n                  (uint)(byte)((((((((leading_byte_4 & 1) << 1 | leading_byte_4 >> 1 & 1) << 1 | leading_byte_4 >> 2 & 1) << 1\n                                  | leading_byte_4 >> 3 & 1) << 1 | leading_byte_4 >> 4 & 1) << 1 | leading_byte_4 >> 5 & 1) <<\n                                1 | leading_byte_4 >> 6 & 1) << 1 | leading_byte_4 >> 7));\n  if (input_value == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "extract_leading_byte_00000566",
                "param_1": "input_value",
                "bVar1": "leading_byte_4",
                "bVar2": "leading_byte_1",
                "bVar3": "leading_byte_2",
                "bVar4": "leading_byte_3",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *inputPointer,undefined4 *outputPointer)\n\n{\n  if (*inputPointer == 0) {\n    *outputPointer = outputPointer;\n  }\n  else {\n    *outputPointer = *(undefined4 *)*inputPointer;\n    *(undefined4 **)*inputPointer = outputPointer;\n  }\n  *inputPointer = castedOutputPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "(int)param_2": "castedOutputPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_pointer_000005ca",
            "code": "\nundefined4 * extractValueFromPointer_000005ca(int *pointerToValue)\n\n{\n  undefined4 *extractedValue;\n  \n  if (*pointerToValue == 0) {\n    extractedValue = (undefined4 *)0x0;\n  }\n  else {\n    extractedValue = *(undefined4 **)*pointerToValue;\n    if (extractedValue == (undefined4 *)*pointerToValue) {\n      *pointerToValue = 0;\n    }\n    else {\n      *(undefined4 *)*pointerToValue = *extractedValue;\n    }\n  }\n  return extractedValue;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "pointerToValue",
                "puVar1": "extractedValue"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "initialize_data_00000610",
            "code": "\nundefined4 initializeData_00000610(void)\n\n{\n  int dataPointer;\n  int index;\n  undefined4 success;\n  \n  dataPointer = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (dataPointer == index + -8) {\n    success = 0;\n  }\n  else {\n    if ((dataPointer != 0) && (*(char *)(dataPointer + 4) == '\\t')) {\n      *(undefined *)(dataPointer + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    success = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_00000610": "initialize_data_00000610",
                "iVar1": "dataPointer",
                "iVar2": "index",
                "uVar3": "success"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataAddress,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(unsignedByte *)(dataAddress + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(unsignedByte *)(dataAddress + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(unsignedByte *)(dataAddress + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signedByte *)(dataAddress + 5));\n    }\n  }\n  else if (*(unsignedByte *)(dataAddress + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(unsignedByte *)(dataAddress + 5) * 4,dataAddress + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signedByte *)(dataAddress + 5);\n  }\n  *(char *)(dataAddress + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "sbyte": "signedByte",
                "byte": "unsignedByte"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_thresholds_00000738",
            "code": "\nvoid checkThresholds_00000738(ushort value)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (value < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_thresholds_00000738",
                "param_1": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_array_00000794",
            "code": "\nint * initializeArray_00000794(void)\n\n{\n  int result;\n  int index;\n  undefined4 *ptr;\n  uint alignedPtr;\n  int loopVar_1c;\n  int loopVar_18;\n  int *arrayPtr;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  ptr = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUNC_00000930();\n  alignedPtr = (int)ptr + index & 0xfffffffc;\n  arrayPtr = (int *)(alignedPtr - 4);\n  *arrayPtr = 0x77777777;\n  if (((uint)arrayPtr & 7) != 0) {\n    arrayPtr = (int *)(alignedPtr - 8);\n    *arrayPtr = 0x88888888;\n  }\n  arrayPtr[-1] = 0x1000000;\n  arrayPtr[-2] = index << 0xd;\n  arrayPtr[-3] = 0x795;\n  arrayPtr = arrayPtr + -4;\n  *arrayPtr = 0;\n  for (loopVar_18 = 3; 0 < loopVar_18; loopVar_18 = loopVar_18 + -1) {\n    arrayPtr = arrayPtr + -1;\n    *arrayPtr = loopVar_18;\n  }\n  arrayPtr = arrayPtr + -1;\n  *arrayPtr = result;\n  for (loopVar_1c = 0xb; 3 < loopVar_1c; loopVar_1c = loopVar_1c + -1) {\n    arrayPtr = arrayPtr + -1;\n    *arrayPtr = loopVar_1c;\n  }\n  arrayPtr[-1] = -3;\n  return arrayPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_array_00000794",
                "extraout_r1": "result",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "alignedPtr",
                "iStack_1c": "loopVar_1c",
                "iStack_18": "loopVar_18",
                "piStack_14": "arrayPtr"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int counter;\n  int counter2;\n  int *ptrC;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  ptrC = (int *)(alignedSize - 4);\n  *ptrC = 0x77777777;\n  if (((uint)ptrC & 7) != 0) {\n    ptrC = (int *)(alignedSize - 8);\n    *ptrC = 0x88888888;\n  }\n  ptrC[-1] = 0x1000000;\n  ptrC[-2] = param1;\n  ptrC[-3] = 0x795;\n  ptrC = ptrC + -4;\n  *ptrC = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    ptrC = ptrC + -1;\n    *ptrC = counter2;\n  }\n  ptrC = ptrC + -1;\n  *ptrC = param2;\n  for (counter = 0xb; 3 < counter; counter = counter + -1) {\n    ptrC = ptrC + -1;\n    *ptrC = counter;\n  }\n  ptrC[-1] = -3;\n  return ptrC + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "counter",
                "local_10": "counter2",
                "local_c": "ptrC"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "get_last_offset_000008b8",
            "code": "\nint get_last_offset_000008b8(void)\n\n{\n  Elf32_Rel *current_rel;\n  \n  for (current_rel = (Elf32_Rel *)&DAT_1fff0000;\n      (current_rel->r_offset == 0xe7fee7fe && (current_rel < rel_array_end));\n      current_rel = (Elf32_Rel *)&current_rel->r_info) {\n  }\n  return ((int)rel_array_end - (int)current_rel >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "get_last_offset_000008b8",
                "local_c": "current_rel",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array_end"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 stack_pointer;\n  \n  stack_pointer = getMainStackPointer();\n  return stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "FUNC_00000930",
            "code": "\nvoid FUNC_00000930(void)\n\n{\n  FUN_00000cf0();\n  software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "FUNC_00000930"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_memory_flag_0000093c",
            "code": "\n\n\nvoid setMemoryFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_memory_flag_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNMIHandlerAddress_00000a30(void)\n\n{\n  int offset;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return stackBaseAddress + -*(int *)(offset + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "offset",
                "&stack0xe000ffe0": "stackBaseAddress"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_ir_qinterrupts_and_return_interrupt_status_00000cc0",
            "code": "\nundefined4 disableIRQinterruptsAndReturnInterruptStatus_00000cc0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptStatus;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  interruptStatus = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    interruptStatus = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_ir_qinterrupts_and_return_interrupt_status_00000cc0",
                "bVar1": "isPrivileged",
                "uVar2": "interruptStatus"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_interrupt_status_00000cd0",
            "code": "\nundefined4 checkInterruptStatus_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_interrupt_status_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_00000cf0",
            "code": "\nundefined4 checkIRQinterrupts_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableInterruptsIfPrivileged_00000d0c(uint interruptFlag)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    setInterruptsEnableFlag((interruptFlag & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_if_privileged_00000d0c",
                "param_1": "interruptFlag",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "setInterruptsEnableFlag"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_current_exception_number_00000d2a",
            "code": "\nuint get_current_exception_number_00000d2a(void)\n\n{\n  bool is_privileged_mode;\n  uint exception_number;\n  \n  exception_number = 0;\n  is_privileged_mode = (bool)isCurrentModePrivileged();\n  if (is_privileged_mode) {\n    exception_number = getCurrentExceptionNumber();\n    exception_number = exception_number & 0x1f;\n  }\n  return exception_number;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_current_exception_number_00000d2a",
                "bVar1": "is_privileged_mode",
                "uVar2": "exception_number"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_new_value_00000d44",
            "code": "\nint calculate_new_value_00000d44(uint input_param,int multiplier)\n\n{\n  return multiplier * 4 + (input_param & 0xf0000000 | (input_param & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_new_value_00000d44",
                "param_1": "input_param",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_pointer_00000d76",
            "code": "\nvoid initializePointer_00000d76(undefined4 inputPointer,undefined undefinedValue)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00000d44(inputPointer,undefinedValue);\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_pointer_00000d76",
                "param_1": "inputPointer",
                "param_2": "undefinedValue",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_peripheral_00000d9c",
            "code": "\nvoid initializePeripheral_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_peripheral_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_device_00000db0",
            "code": "\nvoid initialize_device_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_device_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_00000dc0",
            "code": "\nvoid initialize_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_communication_00000df4",
            "code": "\nvoid initializeCommunication_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_communication_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "initialize_connection_00000e14",
            "code": "\nundefined4 initializeConnection_00000e14(undefined4 connectionAddress,undefined4 connectionMode)\n\n{\n  undefined4 connectionStatus;\n  \n  connectionStatus = FUN_000012e2(0x1fff0204,connectionAddress,connectionMode);\n  return connectionStatus;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "initialize_connection_00000e14",
                "param_1": "connectionAddress",
                "param_2": "connectionMode",
                "uVar1": "connectionStatus"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "execute_and_return_00000e38",
            "code": "\nundefined4 execute_and_return_00000e38(undefined4 input_param,undefined4 output_param)\n\n{\n  FUN_000015d0(0,input_param,output_param);\n  return output_param;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "execute_and_return_00000e38",
                "param_1": "input_param",
                "param_2": "output_param"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid run_infinite_loop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_peripheral_00000e64",
            "code": "\n\n\nvoid initializePeripheral_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_peripheral_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 previousLinkRegister;\n  \n  FUN_00004c84(&DAT_00006f58,previousLinkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "previousLinkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char errorType,undefined4 errorMsg)\n\n{\n  undefined4 stackVar;\n  code *jumpTable;\n  undefined4 errorMsgLocal;\n  char errorTypeLocal;\n  \n  errorMsgLocal = errorMsg;\n  errorTypeLocal = errorType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (errorType == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",errorMsgLocal);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  FUN_00000e58();\n  stackVar = (int)&stackVar + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "errorType",
                "param_2": "errorMsg",
                "uStack_18": "stackVar",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "errorMsgLocal",
                "local_9": "errorTypeLocal"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint shiftedValue;\n  undefined4 *dataPointer;\n  uint count;\n  int shiftedIndex;\n  int *indexPointer;\n  undefined4 constantValue;\n  undefined4 relArraySize;\n  undefined4 relArrayOffset;\n  dword relArrayInfo;\n  \n  FUN_00000cd0();\n  relArrayInfo = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  relArrayOffset = 0;\n  relArraySize = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  relArrayInfo = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  relArrayOffset = 0;\n  relArraySize = 0xf5d;\n  count = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  constantValue = 0xfd3;\n  shiftedValue = FUN_00000930();\n  shiftedValue = shiftedValue >> 0x1e;\n  dataPointer = (undefined4 *)(count * 0x100);\n  shiftedIndex = (count >> 0x1d) << 0x11;\n  indexPointer = &shiftedIndex;\n  if ((shiftedValue & shiftedValue - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *dataPointer = 0;\n  dataPointer[1] = 0;\n  dataPointer[2] = shiftedValue - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "uVar1": "shiftedValue",
                "puVar2": "dataPointer",
                "uVar3": "count",
                "iStack_24": "shiftedIndex",
                "piStack_20": "indexPointer",
                "uStack_1c": "constantValue",
                "local_10": "relArrayInfo",
                "local_14": "relArrayOffset",
                "local_18": "relArraySize"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_bitmask_00000fec",
            "code": "\nvoid initializeBitmask_00000fec(undefined4 *resultArray,uint bitCount)\n\n{\n  if ((bitCount & bitCount - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *resultArray = 0;\n  resultArray[1] = 0;\n  resultArray[2] = bitCount - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_bitmask_00000fec",
                "param_1": "resultArray",
                "param_2": "bitCount",
                "param_1[1]": "resultArray[1]",
                "param_1[2]": "resultArray[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_closest_pointer_00001034",
            "code": "\nvoid findClosestPointer_00001034(int **pointerList,int inputIndex)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(inputIndex + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerList;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(inputIndex + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(inputIndex + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(inputIndex + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_closest_pointer_00001034",
                "param_1": "pointerList",
                "param_2": "inputIndex",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "find_end_offset_000010a0",
            "code": "\nint find_end_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "find_end_offset_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "process_data_000010d4",
            "code": "\nint processData_000010d4(uint inputData,int size,byte length,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result;\n  undefined4 tempVar;\n  int returnValue;\n  uint tempSize;\n  undefined4 *outputData;\n  int padding;\n  uint adjustedInputData;\n  uint loopVar;\n  short index1;\n  short index2;\n  \n  if (length < 0x10) {\n    padding = size;\n    adjustedInputData = inputData;\n    if ((inputData & 3) != 0) {\n      padding = 4 - (inputData & 3);\n      adjustedInputData = padding + inputData;\n      padding = size - padding;\n    }\n    tempSize = padding - 0x30U & 0xfffffffc;\n    outputData = (undefined4 *)(tempSize + adjustedInputData);\n    if ((flags & 8) == 0) {\n      *(uint *)adjustedInputData = adjustedInputData;\n    }\n    else {\n      for (loopVar = adjustedInputData; loopVar < tempSize + adjustedInputData; loopVar = loopVar + 4) {\n        *(uint *)loopVar = loopVar;\n      }\n    }\n    result = FUN_00000cd0();\n    index2 = 0;\n    for (index1 = 1; index1 < 0x21; index1 = index1 + 1) {\n      if (*(int *)(&DAT_1fff0358 + index1 * 4) == 0) {\n        index2 = index1;\n        break;\n      }\n    }\n    if (index2 == 0) {\n      FUN_00000d0c(result);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + index2 * 4) = outputData;\n      *(short *)((int)outputData + 6) = index2;\n      tempVar = FUN_000007dc(param5,param6,adjustedInputData,tempSize);\n      *outputData = tempVar;\n      outputData[9] = adjustedInputData;\n      outputData[0xb] = size;\n      outputData[10] = param7;\n      *(byte *)((int)outputData + 5) = length;\n      *(undefined *)(outputData + 1) = 0;\n      outputData[2] = 0;\n      outputData[3] = 0;\n      outputData[4] = 0;\n      FUN_00000fec(outputData + 5,0);\n      outputData[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        FUN_00000698(outputData,10);\n        if ((flags & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(length);\n          return (int)index2;\n        }\n      }\n      else {\n        FUN_00000698(outputData,1);\n      }\n      FUN_00000d0c(result);\n      returnValue = (int)index2;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "process_data_000010d4",
                "param_1": "inputData",
                "param_2": "size",
                "param_3": "length",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "uVar2": "tempVar",
                "iVar3": "returnValue",
                "uVar4": "tempSize",
                "puVar5": "outputData",
                "local_30": "padding",
                "local_2c": "adjustedInputData",
                "local_10": "loopVar",
                "local_c": "index1",
                "local_a": "index2"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_00001274",
            "code": "\nvoid initialize_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_component_0000129c",
            "code": "\nvoid initializeComponent_0000129c(undefined4 component)\n\n{\n  FUN_00002434(component,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_component_0000129c",
                "param_1": "component"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_data_000012b4",
            "code": "\nundefined4 processData_000012b4(int inputData,undefined extraParam)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(inputData + 4,extraParam);\n  FUN_000024bc(inputData);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_data_000012b4",
                "param_1": "inputData",
                "param_2": "extraParam",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "process_until_success_000012e2",
            "code": "\nint processUntilSuccess_000012e2(int input,undefined4 var1,undefined4 var2)\n\n{\n  int returnValue;\n  \n  while( true ) {\n    returnValue = FUN_0000231c(input + 4,var1,var2);\n    if (returnValue != 0) break;\n    FUN_0000129c(input);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "process_until_success_000012e2",
                "param_1": "input",
                "param_2": "var1",
                "param_3": "var2",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_00001318",
            "code": "\nvoid setBit_00001318(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_00001318",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_data_validity_00001348",
            "code": "\nvoid checkDataValidity_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_data_validity_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_new_value_00001360",
            "code": "\nint calculateNewValue_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_new_value_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_pointer_to_value_00001392",
            "code": "\nvoid initializePointerToValue_00001392(undefined4 value,undefined undefinedValue)\n\n{\n  undefined4 *pointerToValue;\n  \n  pointerToValue = (undefined4 *)FUN_00001360(value,undefinedValue);\n  *pointerToValue = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_pointer_to_value_00001392",
                "param_1": "value",
                "param_2": "undefinedValue",
                "puVar1": "pointerToValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_data_000013b8",
            "code": "\nundefined4 updateData_000013b8(int index,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_data_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_blob_data_000014c4",
            "code": "\nvoid updateBlobData_000014c4(int blobIndex,uint dataSize)\n\n{\n  byte *blobPointer;\n  uint blobSize;\n  uint divResult;\n  \n  blobPointer = *(byte **)(&DAT_00006fe4 + blobIndex * 0x20);\n  blobSize = *(uint *)(&DAT_00006fe8 + blobIndex * 0x20);\n  blobPointer[3] = blobPointer[3] & 0xf3;\n  blobPointer[2] = (&DAT_00007001)[blobIndex * 0x20];\n  divResult = blobSize / (dataSize << 4);\n  *blobPointer = (byte)(divResult >> 8) & 0x1f;\n  blobPointer[1] = (byte)divResult;\n  blobPointer[10] = (byte)((blobSize << 2) / dataSize + 1 >> 1) & 0x1f;\n  blobPointer[0x10] = blobPointer[0x10] | 0x88;\n  if ((blobPointer[0x10] & 0x70) == 0) {\n    blobPointer[0x13] = 0;\n  }\n  else {\n    blobPointer[0x13] = (char)(2 << (blobPointer[0x10] >> 4 & 7)) - 1;\n  }\n  blobPointer[0x15] = 1;\n  blobPointer[0x11] = 0xc0;\n  blobPointer[3] = blobPointer[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[blobIndex * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_blob_data_000014c4",
                "param_1": "blobIndex",
                "param_2": "dataSize",
                "pbVar1": "blobPointer",
                "uVar2": "blobSize",
                "uVar3": "divResult"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source,uint size)\n\n{\n  int dataPtr;\n  uint counter;\n  \n  dataPtr = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < size; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(dataPtr + 4));\n    *(undefined *)(dataPtr + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "dataPtr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_needed_00001628",
            "code": "\nvoid executeFunctionIfNeeded_00001628(int functionIndex)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + functionIndex * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + functionIndex * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + functionIndex * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + functionIndex * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + functionIndex * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_needed_00001628",
                "param_1": "functionIndex"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_system_00001688",
            "code": "\nvoid initializeSystem_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_system_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint value1,int value2)\n\n{\n  return value2 * 4 + (value1 & 0xf0000000 | (value1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_flag_000016c8",
            "code": "\nvoid setFlag_000016c8(undefined4 dataPointer,undefined flag)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001696(dataPointer,flag);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_flag_000016c8",
                "param_1": "dataPointer",
                "param_2": "flag",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_000016ec",
            "code": "\nvoid setFlag_000016ec(undefined4 value,undefined flag)\n\n{\n  undefined *flagAddress;\n  \n  flagAddress = (undefined *)FUN_00001696(value,flag);\n  *flagAddress = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "value",
                "param_2": "flag",
                "puVar1": "flagAddress"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "initialize_memory_00001710",
            "code": "\nvoid initializeMemory_00001710(undefined4 address,undefined value)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)FUN_00001696(address,value);\n  *pointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "initialize_memory_00001710",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_bits_00001748",
            "code": "\nvoid updateBits_00001748(byte value)\n\n{\n  DAT_40064003 = value | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_bits_00001748",
                "param_1": "value"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateMemory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_memory_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_memory_000017dc",
            "code": "\n\n\nvoid initializeMemory_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_memory_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_function_000018bc",
            "code": "\nvoid initializeFunction_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_function_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initializeSystem_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_device_000019c0",
            "code": "\nvoid initializeDevice_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_device_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_and_set_mode_00001a18",
            "code": "\nvoid initializeAndSetMode_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_and_set_mode_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_device_00001a60",
            "code": "\nvoid initializeDevice_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "clear_flags_and_set_mode_00001ad4",
            "code": "\nvoid clearFlagsAndSetMode_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "clear_flags_and_set_mode_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_data_00001b10",
            "code": "\nundefined4 processData_00001b10(byte data)\n\n{\n  undefined4 returnValue;\n  \n  if (data < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)data + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (data != DAT_1fff0b74);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_data_00001b10",
                "param_1": "data",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "perform_task_00001bb8",
            "code": "\nvoid performTask_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "perform_task_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_if_data_valid_00001cf0",
            "code": "\nvoid checkIfDataValid_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_if_data_valid_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_flag_value_00001d3a",
            "code": "\nvoid setFlagValue_00001d3a(undefined4 flagPointer,undefined undefinedValue)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001d08(flagPointer,undefinedValue);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_flag_value_00001d3a",
                "param_1": "flagPointer",
                "param_2": "undefinedValue",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_00001d5e",
            "code": "\nuint applyMask_00001d5e(ushort value)\n\n{\n  return value & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_00001d5e",
                "param_1": "value"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_and_fixed_value_00001d80",
            "code": "\nuint applyMaskAndFixedValue_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_and_fixed_value_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "mask_lower_bits_00001dc0",
            "code": "\nushort maskLowerBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "mask_lower_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "print_character_shifted_00001ddc",
            "code": "\nvoid print_character_shifted_00001ddc(undefined2 input_character)\n\n{\n  char shifted_character;\n  \n  shifted_character = FUN_00001da2(input_character);\n  FUN_00001d3a(&DAT_40048038,shifted_character + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "print_character_shifted_00001ddc",
                "param_1": "input_character",
                "cVar1": "shifted_character"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "get_bit_value_00001e0c",
            "code": "\nuint getBitValue_00001e0c(int position,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + position * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "get_bit_value_00001e0c",
                "param_1": "position",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_data_00001e44",
            "code": "\nvoid updateData_00001e44(int index,uint bitPosition,int value)\n\n{\n  int shiftedIndex;\n  \n  shiftedIndex = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + index * 4) * 4) | value << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_data_00001e44",
                "param_1": "index",
                "param_2": "bitPosition",
                "param_3": "value",
                "iVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "execute_function_00001ec4",
            "code": "\nvoid executeFunction_00001ec4(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_00001e0c(inputParam1,inputParam2);\n  FUN_00001e44(inputParam1,inputParam2,returnValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "execute_function_00001ec4",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_data_00001eea",
            "code": "\nundefined4 updateData_00001eea(undefined2 param1,byte param2)\n\n{\n  uint index;\n  int data;\n  int newValue;\n  \n  FUN_00001f80(param1,0);\n  if ((char)param2 < '\\0') {\n    index = FUN_00001dc0(param1);\n    data = FUN_00001d80(param1);\n    *(uint *)(data + 0x14) = *(uint *)(data + 0x14) | 1 << (index & 0xff);\n  }\n  else {\n    index = FUN_00001dc0(param1);\n    data = FUN_00001d80(param1);\n    *(uint *)(data + 0x14) = *(uint *)(data + 0x14) & ~(1 << (index & 0xff));\n  }\n  data = FUN_00001d5e(param1);\n  newValue = FUN_00001dc0(param1);\n  *(uint *)(data + newValue * 4) = param2 & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_data_00001eea",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "index",
                "iVar2": "data",
                "iVar3": "newValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_value_00001f80",
            "code": "\nvoid updateValue_00001f80(undefined2 inputParam,undefined4 newValue)\n\n{\n  int var1;\n  int var2;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  uint value;\n  \n  FUN_00001ddc(inputParam);\n  var1 = FUN_00001d5e(inputParam);\n  var2 = FUN_00001dc0(inputParam);\n  value = *(uint *)(var1 + var2 * 4);\n  var1 = FUN_00001d5e(inputParam);\n  var2 = FUN_00001dc0(inputParam);\n  *(undefined4 *)(var1 + var2 * 4) = newValue;\n  if ((value & 0xf0000) != 0) {\n    tempVar1 = FUN_00001da2(inputParam);\n    tempVar2 = FUN_00001dc0(inputParam);\n    FUN_00001ec4(tempVar1,tempVar2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_value_00001f80",
                "param_1": "inputParam",
                "param_2": "newValue",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "uVar5": "value"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_at_index_00001ff6",
            "code": "\nvoid setBitAtIndex_00001ff6(undefined2 input)\n\n{\n  uint bitIndex;\n  int result;\n  \n  bitIndex = FUN_00001dc0(input);\n  result = FUN_00001d80(input);\n  *(int *)(result + 4) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_at_index_00001ff6",
                "param_1": "input",
                "uVar1": "bitIndex",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid processData_00002028(int data,undefined4 flag)\n\n{\n  int result;\n  uint mask;\n  uint bitIndex;\n  \n  mask = *(uint *)(data + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((mask & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(data + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(data + 0xa0) = 1 << (bitIndex & 0xff);\n      result = FUN_00001e0c(flag,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + result * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + result * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "data",
                "param_2": "flag",
                "iVar1": "result",
                "uVar2": "mask",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_peripheral_000020cc",
            "code": "\nvoid initializePeripheral_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_peripheral_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_memory_000020f4",
            "code": "\nvoid initializeMemory_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_memory_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_stack_info_0000211c",
            "code": "\nvoid printProcessStackInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 processName;\n  int currentStack;\n  int currentPriority;\n  dword currentStackOffset;\n  uint currentQueue;\n  undefined4 *currentRelocation;\n  undefined4 currentBaseAddress;\n  undefined4 currentAddress;\n  int totalUsedStack;\n  short currentEntry;\n  int totalStack;\n  int currentStackPointer;\n  \n  processName = 0x515f;\n  currentStackPointer = 0;\n  totalStack = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  totalUsedStack = FUN_000008b8();\n  currentAddress = FUN_0000091c();\n  currentBaseAddress = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               totalUsedStack,currentAddress,currentBaseAddress);\n  currentStackPointer = currentStackPointer + 0x200;\n  if (0 < totalUsedStack) {\n    totalStack = totalUsedStack + totalStack;\n  }\n  for (currentEntry = 1; currentEntry < 0x21; currentEntry = currentEntry + 1) {\n    currentRelocation = *(undefined4 **)(&DAT_1fff0358 + currentEntry * 4);\n    if (currentRelocation != (undefined4 *)0x0) {\n      currentQueue = (uint)*(byte *)(currentRelocation + 1);\n      currentStackOffset = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[currentQueue];\n      currentPriority = (int)&processName + (uint)(8 < currentQueue);\n      currentStack = currentRelocation[0xb];\n      currentStackPointer = currentStack + currentStackPointer;\n      iVar1 = FUN_000010a0(currentRelocation[9]);\n      currentStack = currentStack - iVar1;\n      totalStack = currentStack + totalStack;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)currentRelocation + 6),currentRelocation[10],currentStackOffset,currentPriority,\n                   *(undefined *)((int)currentRelocation + 5),currentRelocation[0xb],currentStack,currentRelocation[9],*currentRelocation);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,currentStackPointer,totalStack);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_stack_info_0000211c",
                "local_40": "processName",
                "local_3c": "currentStack",
                "local_38": "currentPriority",
                "local_34": "currentStackOffset",
                "local_30": "currentQueue",
                "local_2c": "currentRelocation",
                "local_28": "currentBaseAddress",
                "local_24": "currentAddress",
                "local_20": "totalUsedStack",
                "local_1a": "currentEntry",
                "local_18": "totalStack",
                "local_14": "currentStackPointer"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool isMatch;\n  \n  value = *(int *)(input + 0xc);\n  isMatch = *(int *)(input + 8) == value;\n  if (isMatch) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isMatch) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isMatch",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_equality_00002294",
            "code": "\nundefined checkEquality_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool isEqual;\n  \n  difference = *(int *)(input + 4);\n  isEqual = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (isEqual) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "difference",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "write_byte_to_memory_000022be",
            "code": "\nvoid writeByteToMemory_000022be(int *memory,undefined data)\n\n{\n  uint index;\n  \n  index = memory[3];\n  memory[3] = index + 1;\n  *(undefined *)((index & memory[1] - 1U) + *memory) = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "write_byte_to_memory_000022be",
                "param_1": "memory",
                "param_2": "data",
                "uVar1": "index"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_read_memory_000022f0",
            "code": "\nundefined incrementAndReadMemory_000022f0(int *memoryPointer)\n\n{\n  uint currentValue;\n  \n  currentValue = memoryPointer[2];\n  memoryPointer[2] = currentValue + 1;\n  return *(undefined *)((currentValue & memoryPointer[1] - 1U) + *memoryPointer);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_read_memory_000022f0",
                "param_1": "memoryPointer",
                "uVar1": "currentValue"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_data_0000231c",
            "code": "\nint copy_data_0000231c(undefined4 data_source,undefined *destination_buffer,int buffer_size)\n\n{\n  undefined data_item;\n  int result;\n  undefined *dest_ptr;\n  int remaining_data;\n  \n  dest_ptr = destination_buffer;\n  remaining_data = buffer_size;\n  while ((remaining_data != 0 && (result = FUN_00002270(data_source), result == 0))) {\n    data_item = FUN_000022f0(data_source);\n    *dest_ptr = data_item;\n    remaining_data = remaining_data + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return buffer_size - remaining_data;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "param_1": "data_source",
                "param_2": "destination_buffer",
                "param_3": "buffer_size",
                "uVar1": "data_item",
                "iVar2": "result",
                "local_20": "dest_ptr",
                "local_14": "remaining_data"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_status_00002364",
            "code": "\nundefined4 check_status_00002364(undefined4 input_param,undefined additional_param)\n\n{\n  int status;\n  undefined4 result;\n  \n  status = FUN_00002294(input_param);\n  if (status == 0) {\n    FUN_000022be(input_param,additional_param);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_status_00002364",
                "param_1": "input_param",
                "param_2": "additional_param",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initialize_system_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  returnValue = FUN_00002e6c(0,buffer,0x80);\n  trigger_soft_interrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "software_interrupt": "trigger_soft_interrupt",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "send_software_interrupt_000023c8",
            "code": "\nvoid sendSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "send_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "check_and_process_data_000023d0",
            "code": "\nundefined4 checkAndProcessData_000023d0(undefined4 inputData)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = FUN_000023c8(1,inputData,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "check_and_process_data_000023d0",
                "param_1": "inputData",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_next_pointer_0000240c",
            "code": "\nundefined4 * extractNextPointer_0000240c(undefined4 *currentPointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*currentPointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *currentPointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_next_pointer_0000240c",
                "param_1": "currentPointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_param_00002434",
            "code": "\nundefined4 updateParam_00002434(int *paramPointer,int condition)\n\n{\n  int tempVar1;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  tempVar1 = DAT_1fff03dc;\n  if (*paramPointer == 0) {\n    *paramPointer = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (condition == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*paramPointer == -1) {\n      *paramPointer = tempVar1 + 8;\n      *(undefined4 *)*paramPointer = 0;\n    }\n    else {\n      FUN_00001034(paramPointer,tempVar1);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_param_00002434",
                "param_1": "paramPointer",
                "param_2": "condition",
                "iVar1": "tempVar1",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_param_000024bc",
            "code": "\nvoid processParam_000024bc(int *param)\n\n{\n  undefined undefinedVar;\n  undefined4 functionResult;\n  int tempVar;\n  \n  functionResult = FUN_00000cd0();\n  if (*param == 0) {\n    FUN_00000d0c(functionResult);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    FUN_00000d0c(functionResult);\n  }\n  else {\n    tempVar = FUN_0000240c(param);\n    FUN_00000698(tempVar + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    undefinedVar = *(undefined *)(tempVar + -3);\n    FUN_00000d0c(functionResult);\n    FUN_00000738(undefinedVar);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_param_000024bc",
                "param_1": "param",
                "uVar1": "undefinedVar",
                "uVar2": "functionResult",
                "iVar3": "tempVar"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_data_00002538",
            "code": "\nvoid updateData_00002538(byte byteValue,uint uintValue)\n\n{\n  if (signedByteValue < '\\0') {\n    (&DAT_e000ed14)[byteValue & 0xf] = (char)((uintValue & 0xff) << 4);\n  }\n  else {\n    *(char *)(signedByteValue + -0x1fff1c00) = (char)((uintValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_data_00002538",
                "param_1": "byteValue",
                "param_2": "uintValue",
                "(char)param_1": "signedByteValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_0000258c",
            "code": "\n\n\nvoid initializeSystem_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    FUN_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_system_00002600",
            "code": "\nundefined4 initializeSystem_00002600(undefined4 inputParameter)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputParameter);\n  FUN_0000285c(result);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_system_00002600",
                "param_1": "inputParameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "extracted_function_00002624",
            "code": "\nundefined4 extractedFunction_00002624(undefined4 input)\n\n{\n  undefined4 result;\n  undefined4 counter;\n  \n  result = FUN_0000281c();\n  counter = 0;\n  FUN_0000443c(&result,input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "extracted_function_00002624",
                "param_1": "input",
                "local_10": "result",
                "uStack_c": "counter"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_function_00002654",
            "code": "\nundefined4 initializeFunction_00002654(undefined4 inputParameter,undefined4 outputParameter,undefined4 additionalParameter)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputParameter);\n  DAT_1fff0d9c = outputParameter;\n  FUN_00002894(result,0x26f1,additionalParameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_function_00002654",
                "param_1": "inputParameter",
                "param_2": "outputParameter",
                "param_3": "additionalParameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_and_process_data_00002690",
            "code": "\nundefined4 initializeAndProcessData_00002690(undefined4 inputData)\n\n{\n  undefined4 initializedData;\n  undefined4 counter;\n  \n  initializedData = FUN_000028f0();\n  counter = 0;\n  FUN_0000443c(&initializedData,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_and_process_data_00002690",
                "param_1": "inputData",
                "local_10": "initializedData",
                "uStack_c": "counter"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initializeData_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_000026d8",
            "code": "\nvoid initialize_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initializeSystem_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 data)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "data"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte byteValue,uint valueToStore)\n\n{\n  if ((char)byteValue < '\\0') {\n    (&DAT_e000ed14)[byteValue & 0xf] = (char)((valueToStore & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((valueToStore & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "byteValue",
                "param_2": "valueToStore"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_data_validity_00002798",
            "code": "\nvoid checkDataValidity_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_data_validity_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_hardware_000027b0",
            "code": "\n\n\nvoid initializeHardware_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_hardware_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_memory_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getMemoryAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_memory_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_flags_0000285c",
            "code": "\n\n\nvoid initializeFlags_0000285c(undefined4 value)\n\n{\n  _DAT_4003d000 = value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_flags_0000285c",
                "param_1": "value"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 value1,undefined4 value2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = value2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_variable_000028f0",
            "code": "\n\n\nint incrementVariable_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_variable_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "reset_registers_00002910",
            "code": "\n\n\nvoid resetRegisters_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "reset_registers_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_hardware_flag_00002970",
            "code": "\n\n\nvoid clearHardwareFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_hardware_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_peripheral_operations_00002994",
            "code": "\n\n\nvoid executePeripheralOperations_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_peripheral_operations_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_system_00002a00",
            "code": "\nvoid initializeSystem_00002a00(undefined4 systemData)\n\n{\n  FUN_00004cb4(systemData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_system_00002a00",
                "param_1": "systemData"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_valid_value_00002a18",
            "code": "\nint findValidValue_00002a18(int *inputArray,undefined4 targetValue)\n\n{\n  int result;\n  int *currentElement;\n  undefined **rebootMessage;\n  uint index;\n  int *currentPointer;\n  \n  currentElement = inputArray;\n  rebootMessage = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    currentPointer = (&currentElement)[index];\n    if (currentPointer != (int *)0x0) {\n      for (; *currentPointer != 0; currentPointer = currentPointer + 3) {\n        result = FUN_00004e52(*currentPointer,targetValue);\n        if (result == 0) {\n          return currentPointer[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_valid_value_00002a18",
                "param_1": "inputArray",
                "param_2": "targetValue",
                "iVar1": "result",
                "local_18": "currentElement",
                "local_14": "rebootMessage",
                "local_10": "index",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **commandNames;\n  uint index;\n  int *currentCommandEntry;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  commandNames = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentCommandEntry = (&currentCommand)[index];\n    if (currentCommandEntry != (int *)0x0) {\n      for (; *currentCommandEntry != 0; currentCommandEntry = currentCommandEntry + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentCommandEntry,currentCommandEntry[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "commandNames",
                "local_10": "index",
                "local_c": "currentCommandEntry"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_string_input_00002b10",
            "code": "\nvoid processStringInput_00002b10(undefined4 arg1,byte *inputString)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *paramPointerArray [3];\n  code *functionPointer;\n  char **outputStringArray;\n  uint arraySize;\n  byte quoteChar;\n  char *currentChar;\n  char *currentString;\n  char **tempStringArray;\n  uint index;\n  int backslashCount;\n  uint quoteCount;\n  byte *currentCharPointer;\n  \n  quoteCount = 0;\n  backslashCount = 0;\n  currentCharPointer = inputString;\n  while( true ) {\n    paramPointerArray[0] = inputString;\n    paramPointerArray[1] = (byte *)arg1;\n    if (0x20 < *currentCharPointer) {\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        quoteChar = *currentCharPointer;\n        do {\n          pbVar2 = currentCharPointer + 1;\n          if (*pbVar2 == 0) {\n            currentCharPointer = pbVar2;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentCharPointer = currentCharPointer + 2;\n            pbVar2 = currentCharPointer;\n            if (*currentCharPointer == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = pbVar2;\n        } while (quoteChar != *currentCharPointer);\n        if (0x20 < currentCharPointer[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharPointer == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentCharPointer = currentCharPointer + 1;\n            if (*currentCharPointer == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = currentCharPointer + 1;\n          if (*currentCharPointer == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharPointer);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*currentCharPointer == 0) break;\n    *currentCharPointer = 0;\n    currentCharPointer = currentCharPointer + 1;\n  }\n  if (quoteCount != 0) {\n    arraySize = quoteCount;\n    outputStringArray = (char **)((int)paramPointerArray - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    outputStringArray[quoteCount] = (char *)0x0;\n    currentCharPointer = inputString;\n    for (index = 0; tempStringArray = outputStringArray, index < quoteCount; index = index + 1) {\n      for (; *currentCharPointer == 0; currentCharPointer = currentCharPointer + 1) {\n      }\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        currentCharPointer = currentCharPointer + 1;\n      }\n      outputStringArray[index] = (char *)currentCharPointer;\n      for (; *currentCharPointer != 0; currentCharPointer = currentCharPointer + 1) {\n      }\n    }\n    for (; (backslashCount != 0 && (*tempStringArray != (char *)0x0)); tempStringArray = tempStringArray + 1) {\n      for (currentString = *tempStringArray; *currentString != '\\0'; currentString = currentString + 1) {\n        if (*currentString == '\\') {\n          for (currentChar = currentString; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          backslashCount = backslashCount + -1;\n          if (backslashCount == 0) break;\n        }\n      }\n    }\n    functionPointer = (code *)FUN_00002a18(arg1,*outputStringArray);\n    if (functionPointer == (code *)0x0) {\n      iVar1 = FUN_00004e52(&DAT_00007214,*outputStringArray);\n      if (iVar1 == 0) {\n        FUN_00002a88(paramPointerArray[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*outputStringArray);\n      }\n    }\n    else {\n      (*functionPointer)(quoteCount,outputStringArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_string_input_00002b10",
                "param_1": "arg1",
                "param_2": "inputString",
                "local_48": "paramPointerArray",
                "local_3c": "functionPointer",
                "local_38": "outputStringArray",
                "local_34": "arraySize",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentString",
                "local_24": "tempStringArray",
                "local_20": "index",
                "local_1c": "backslashCount",
                "local_18": "quoteCount",
                "local_14": "currentCharPointer"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "extract_and_process_input_00002d94",
            "code": "\nuint extractAndProcessInput_00002d94(undefined *inputBuffer,int bufferSize)\n\n{\n  int inputValue;\n  byte isFirstChar;\n  bool isFirstCharEqual;\n  undefined *currentChar;\n  \n  currentChar = inputBuffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    inputValue = FUN_00004418();\n    if (inputValue < 0) break;\n    if ((inputValue == 0xd) || (inputValue == 10)) {\n      *currentChar = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstCharEqual = currentChar == inputBuffer;\n      if (isFirstCharEqual) {\n        inputBuffer = (undefined *)0x1;\n      }\n      isFirstChar = (byte)inputBuffer;\n      if (!isFirstCharEqual) {\n        isFirstChar = 0;\n      }\n      return (uint)isFirstChar;\n    }\n    if ((inputValue == 8) || (inputValue == 0x7f)) {\n      if (currentChar != inputBuffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputValue;\n      FUN_00002a00(inputValue);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "extract_and_process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "bufferSize",
                "iVar1": "inputValue",
                "bVar2": "isFirstChar",
                "bVar3": "isFirstCharEqual",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_components_00002e48",
            "code": "\nvoid initializeComponents_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relArray[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_components_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_data_00002e6c",
            "code": "\nvoid processData_00002e6c(undefined4 bufferSize,undefined4 dataPtr,undefined4 targetPtr)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(dataPtr,targetPtr);\n    if (result == 0) {\n      FUN_00002b10(bufferSize,dataPtr);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_data_00002e6c",
                "param_1": "bufferSize",
                "param_2": "dataPtr",
                "param_3": "targetPtr",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "initialize_application_00002e9c",
            "code": "\nundefined4 initialize_application_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "initialize_application_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_application_00002eb4",
            "code": "\nundefined4 initializeApplication_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_application_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_and_print_device_00002ecc",
            "code": "\nvoid readAndPrintDevice_00002ecc(undefined4 deviceNumber,int deviceData)\n\n{\n  undefined4 dataDescription;\n  undefined4 deviceDescription;\n  undefined readBuffer [8];\n  uint readResult;\n  \n  readResult = FUN_00003d64(deviceData,readBuffer);\n  if ((int)readResult < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceDescription = *(undefined4 *)(deviceData + 8);\n    dataDescription = FUN_000039e8(*(undefined *)(*(int *)(deviceData + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceDescription,dataDescription);\n    FUN_00003694(readBuffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_and_print_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceData",
                "uVar1": "dataDescription",
                "uVar2": "deviceDescription",
                "auStack_1c": "readBuffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_linked_list_00002f30",
            "code": "\nvoid processLinkedList_00002f30(void)\n\n{\n  int index;\n  undefined4 *currentNode;\n  \n  index = 0;\n  for (currentNode = DAT_1fff0db0; currentNode != (undefined4 *)0x0; currentNode = (undefined4 *)*currentNode) {\n    FUN_00002ecc(index,currentNode);\n    FUN_00004db8(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_linked_list_00002f30",
                "local_10": "index",
                "local_c": "currentNode"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceCount;\n  undefined4 *devicePtr;\n  \n  devicePtr = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; devicePtr != (undefined4 *)0x0; devicePtr = (undefined4 *)*devicePtr) {\n    deviceClass = FUN_000039e8(*(undefined *)(devicePtr[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClass,devicePtr[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "devicePtr",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "handle_device_action_00002fe0",
            "code": "\nvoid handleDeviceAction_00002fe0(int action,undefined4 *args)\n\n{\n  int result;\n  undefined4 deviceID;\n  \n  if (action < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*args,args[1]);\n  }\n  else {\n    result = FUN_00004e52(args[2],&DAT_000073d4);\n    if (result == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceID = FUN_00004042(args[2]);\n      result = FUN_00003d24(deviceID);\n      if (result == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceID,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "handle_device_action_00002fe0",
                "param_1": "action",
                "param_2": "args",
                "iVar1": "result",
                "uVar2": "deviceID"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 values [4];\n  uint numValues;\n  int deviceId;\n  undefined4 deviceValue;\n  int i;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceValue = FUN_00004042(argv[2]);\n    deviceId = FUN_00003d24(deviceValue);\n    if (deviceId == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (i = 0; i < (int)numValues; i = i + 1) {\n        value = FUN_00004042(argv[i + 3]);\n        values[i] = value;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceValue,*(undefined4 *)(deviceId + 8));\n      FUN_00003694(values,numValues & 0xff);\n      numValues = FUN_00003d94(deviceId,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceValue);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceValue);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceValue);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "deviceId",
                "local_10": "deviceValue",
                "local_c": "i"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "check_and_perform_action_0000316c",
            "code": "\nundefined4 checkAndPerformAction_0000316c(int actionType,undefined4 *arguments)\n\n{\n  int resultCode;\n  \n  if (actionType < 2) {\n    FUN_00002f74();\n  }\n  else {\n    resultCode = FUN_00004e52(arguments[1],&DAT_000074ec);\n    if (resultCode == 0) {\n      FUN_00002fe0(actionType,arguments);\n    }\n    else {\n      resultCode = FUN_00004e52(arguments[1],\"write\");\n      if (resultCode == 0) {\n        FUN_0000305c(actionType,arguments);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "check_and_perform_action_0000316c",
                "param_1": "actionType",
                "param_2": "arguments",
                "iVar1": "resultCode"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "display_alarm_message_000031e0",
            "code": "\nvoid displayAlarmMessage_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "display_alarm_message_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  isLeapYear = (byte)adjustedMonth;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)dayOfWeek + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "dayOfWeek"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_values_and_compute_result_0000328c",
            "code": "\nundefined4 extract_values_and_compute_result_0000328c(undefined4 *input_values,int *output_values)\n\n{\n  int result;\n  int index;\n  short value;\n  \n  value = FUN_00004f84(*input_values,&index,10);\n  output_values[5] = value + -0x76c;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_values[4] = value + -1;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_values[3] = (int)value;\n  value = FUN_00004f84(input_values[1],&index,10);\n  output_values[2] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_values[1] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  *output_values = (int)value;\n  result = FUN_000031fc(output_values[5] + 0x76c,output_values[4] + 1,output_values[3]);\n  output_values[6] = result;\n  output_values[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_values_and_compute_result_0000328c",
                "param_1": "input_values",
                "param_2": "output_values",
                "iVar1": "result",
                "local_10": "index",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool checkAlarmStatus_000033c0(void)\n\n{\n  int result;\n  undefined stackBuffer [36];\n  \n  result = FUN_00002690(stackBuffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(stackBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "auStack_2c": "stackBuffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(input,buffer);\n  if (result == 0) {\n    result = FUN_00002654(buffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_time_00003444",
            "code": "\nbool getTime_00003444(void)\n\n{\n  int returnValue;\n  undefined timeInfo [36];\n  \n  returnValue = FUN_00002624(timeInfo);\n  if (returnValue != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(timeInfo);\n  }\n  return returnValue != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_time_00003444",
                "auStack_2c": "timeInfo",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "check_and_set_time_00003478",
            "code": "\nundefined4 checkAndSetTime_00003478(undefined4 timeToSet)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined timeBuffer [36];\n  \n  result = FUN_0000328c(timeToSet,timeBuffer);\n  if (result == 0) {\n    result = FUN_00002600(timeBuffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "check_and_set_time_00003478",
                "param_1": "timeToSet",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_command_usage_000034c0",
            "code": "\nundefined4 printCommandUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_command_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int commandType,int commandString)\n\n{\n  int result;\n  undefined4 success;\n  \n  if (commandType < 2) {\n    FUN_000034c0();\n    success = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(commandString + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(commandString + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(commandString + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(commandString + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(commandString + 4),\"setalarm\",8);\n            if ((result == 0) && (commandType == 4)) {\n              FUN_000033f4(commandString + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(commandString + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(commandString + 4),\"settime\",7);\n                if ((result != 0) || (commandType != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandString + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandString + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    success = 0;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "commandType",
                "param_2": "commandString",
                "iVar1": "result",
                "uVar2": "success"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "loop_to_endless_00003658",
            "code": "\nvoid loopToEndless_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "loop_to_endless_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_system_00003688",
            "code": "\nvoid initialize_system_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_system_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObject,byte size)\n\n{\n  undefined4 format;\n  char flag;\n  uint bitMask;\n  bool isSet;\n  undefined buffer [8];\n  int length;\n  char character;\n  byte index;\n  \n  if ((dataObject == 0) || (3 < size)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < size; index = index + 1) {\n      if (*(byte *)(dataObject + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObject + 6) & 0x8018f;\n        isSet = bitMask != 0;\n        if (isSet) {\n          bitMask = 1;\n        }\n        flag = (char)bitMask;\n        if (!isSet) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = FUN_00003918((int)*(char *)(dataObject + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (size < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(dataObject + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataObject + (uint)index * 2));\n        }\n        else if ((*(char *)(dataObject + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObject + 7),4)) &&\n                (*(char *)(dataObject + 7) < '\\0')) {\n          length = FUN_00003e9e(buffer,(int)*(short *)(dataObject + (uint)index * 2),\n                                  (int)*(char *)(dataObject + 7));\n          buffer[length] = 0;\n          FUN_00004c84(&DAT_000077dc,buffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataObject + (uint)index * 2),\n                       (int)*(char *)(dataObject + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataObject + (uint)index * 2),character);\n      }\n      format = FUN_00003810(*(undefined *)(dataObject + 6));\n      FUN_00004c84(&DAT_000077e8,format);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObject",
                "param_2": "size",
                "uVar1": "format",
                "cVar2": "flag",
                "uVar3": "bitMask",
                "bVar4": "isSet",
                "auStack_18": "buffer",
                "local_10": "length",
                "local_a": "character",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined value)\n\n{\n  undefined *result;\n  \n  switch(value) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "value",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_value_from_param_00003918",
            "code": "\nundefined4 getValueFromParam_00003918(undefined param)\n\n{\n  undefined4 result;\n  \n  switch(param) {\n  case 2:\n    result = 0x68;\n    break;\n  case 3:\n    result = 0x6b;\n    break;\n  case 6:\n    result = 0x4d;\n    break;\n  case 9:\n    result = 0x47;\n    break;\n  case 0xc:\n    result = 0x54;\n    break;\n  case 0xf:\n    result = 0x50;\n    break;\n  case 0xf1:\n    result = 0x66;\n    break;\n  default:\n    result = 0;\n    break;\n  case 0xf4:\n    result = 0x70;\n    break;\n  case 0xf7:\n    result = 0x6e;\n    break;\n  case 0xfa:\n    result = 0x75;\n    break;\n  case 0xfd:\n    result = 0x6d;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_value_from_param_00003918",
                "param_1": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_device_type_000039e8",
            "code": "\nchar * getDeviceType_000039e8(char deviceCode)\n\n{\n  char *deviceName;\n  \n  switch(deviceCode) {\n  case '\\0':\n    deviceName = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    deviceName = \"ACT_ANY\";\n    break;\n  case 'B':\n    deviceName = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    deviceName = \"ACT_SERVO\";\n    break;\n  case 'D':\n    deviceName = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    deviceName = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    deviceName = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    deviceName = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    deviceName = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    deviceName = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    deviceName = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    deviceName = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    deviceName = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    deviceName = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    deviceName = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    deviceName = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    deviceName = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    deviceName = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    deviceName = \"SENSE_UV\";\n    break;\n  case -0x74:\n    deviceName = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    deviceName = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    deviceName = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    deviceName = \"SENSE_CO2\";\n    break;\n  default:\n    if (deviceCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    deviceName = \"CLASS_UNKNOWN\";\n  }\n  return deviceName;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_device_type_000039e8",
                "param_1": "deviceCode",
                "pcVar1": "deviceName"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int target_index)\n\n{\n  int index;\n  undefined4 *current_element;\n  \n  index = 0;\n  for (current_element = DAT_1fff0db0; (index < target_index && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    index = index + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "target_index",
                "local_10": "index",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPtr,undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPtr == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPtr + 0xc))(*(undefined4 *)(functionPtr + 4),inputParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPtr",
                "param_2": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_or_return_error_00003d94",
            "code": "\nundefined4 executeFunctionOrReturnError_00003d94(int functionPointer,undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),inputParameter);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_or_return_error_00003d94",
                "param_1": "functionPointer",
                "param_2": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_and_fill_00003dc4",
            "code": "\nint countDigitsAndFill_00003dc4(int inputOffset,uint number)\n\n{\n  uint remainder;\n  char *outputPtr;\n  uint powerOfTen;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (powerOfTen = 10; powerOfTen <= number; powerOfTen = powerOfTen * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    outputPtr = (char *)(digitCount + inputOffset);\n    remainder = number;\n    do {\n      outputPtr = outputPtr + -1;\n      *outputPtr = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_and_fill_00003dc4",
                "param_1": "inputOffset",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "outputPtr",
                "local_10": "powerOfTen",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "convert_integer_to_negative_00003e58",
            "code": "\nint convertIntegerToNegative_00003e58(undefined *inputString,int inputInteger)\n\n{\n  int convertedValue;\n  int absoluteValue;\n  undefined *stringPointer;\n  \n  absoluteValue = inputInteger;\n  stringPointer = inputString;\n  if (-(inputInteger >> 0x1f) != 0) {\n    if (inputString != (undefined *)0x0) {\n      stringPointer = inputString + 1;\n      *inputString = 0x2d;\n    }\n    absoluteValue = -inputInteger;\n  }\n  convertedValue = FUN_00003dc4(stringPointer,absoluteValue);\n  return -(inputInteger >> 0x1f) + convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "convert_integer_to_negative_00003e58",
                "param_1": "inputString",
                "param_2": "inputInteger",
                "iVar1": "convertedValue",
                "local_18": "absoluteValue",
                "local_14": "stringPointer"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 data,short count,undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(data,(int)count,config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "data",
                "param_2": "count",
                "param_3": "config",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_and_append_00003ec4",
            "code": "\nint formatNumberAndAppend_00003ec4(undefined *outputBuffer,uint inputNumber,int numDigits)\n\n{\n  int tempVariable1;\n  undefined4 tempVariable2;\n  uint quotient;\n  int remainder;\n  int totalCharacters;\n  \n  if (numDigits + 7 < 0 != SCARRY4(numDigits,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalCharacters = 0;\n  if (numDigits == 0) {\n    totalCharacters = FUN_00003e58(outputBuffer,inputNumber);\n  }\n  else if (numDigits < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + numDigits * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + numDigits * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalCharacters = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      tempVariable1 = FUN_00003e58(0,quotient);\n      totalCharacters = tempVariable1 + 1 + totalCharacters;\n    }\n    else {\n      tempVariable1 = FUN_00003e58(outputBuffer + totalCharacters,quotient);\n      tempVariable1 = totalCharacters + tempVariable1;\n      totalCharacters = tempVariable1 + 1;\n      outputBuffer[tempVariable1] = 0x2e;\n      tempVariable2 = FUN_00003e58(outputBuffer + totalCharacters,remainder);\n      FUN_00003ff4(outputBuffer + totalCharacters,tempVariable2,-numDigits,0x30);\n    }\n    totalCharacters = -numDigits + totalCharacters;\n  }\n  else {\n    totalCharacters = FUN_00003e58(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      FUN_00004622(outputBuffer + totalCharacters,0x30,numDigits);\n    }\n    totalCharacters = numDigits + totalCharacters;\n  }\n  return totalCharacters;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_and_append_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "numDigits",
                "iVar1": "tempVariable1",
                "uVar2": "tempVariable2",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalCharacters"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_min_value_00003ff4",
            "code": "\nuint calculateMinValue_00003ff4(int inputValue,uint lowerBound,uint upperBound,undefined undefinedValue)\n\n{\n  uint minValue;\n  \n  minValue = lowerBound;\n  if ((lowerBound < upperBound) && (minValue = upperBound, inputValue != 0)) {\n    FUN_000045ee((upperBound - lowerBound) + inputValue,inputValue,lowerBound);\n    FUN_00004622(inputValue,undefinedValue,upperBound - lowerBound);\n  }\n  return minValue;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_min_value_00003ff4",
                "param_1": "inputValue",
                "param_2": "lowerBound",
                "param_3": "upperBound",
                "param_4": "undefinedValue",
                "uVar1": "minValue"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_function_00004042",
            "code": "\nvoid initializeFunction_00004042(undefined4 functionParameter)\n\n{\n  FUN_00004f84(functionParameter,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_function_00004042",
                "param_1": "functionParameter"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *data,int *params)\n\n{\n  int returnValue;\n  int *ptrVar;\n  uint ushortValue;\n  ushort flagValue;\n  int tempVar;\n  code *functionPtr;\n  int loopVar;\n  uint tempValue;\n  bool isTrue;\n  \n  flagValue = *(ushort *)(params + 3);\n  ushortValue = (uint)flagValue;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    returnValue = params[4];\n    if (returnValue != 0) {\n      tempVar = ushortValue << 0x1e;\n      isTrue = tempVar == 0;\n      loopVar = *params;\n      if (isTrue) {\n        tempVar = params[5];\n      }\n      *params = returnValue;\n      if (!isTrue) {\n        tempVar = 0;\n      }\n      params[2] = tempVar;\n      for (loopVar = loopVar - returnValue; 0 < loopVar; loopVar = loopVar - tempVar) {\n        tempVar = (*(code *)params[10])(data,params[8],returnValue,loopVar);\n        if (tempVar < 1) {\n          *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n          return 0xffffffff;\n        }\n        returnValue = returnValue + tempVar;\n      }\n    }\n  }\n  else {\n    if ((params[1] < 1) && (params[0x10] < 1)) {\n      return 0;\n    }\n    functionPtr = (code *)params[0xb];\n    if (functionPtr == (code *)0x0) {\n      return 0;\n    }\n    tempValue = *data;\n    *data = 0;\n    if ((flagValue & 0x1000) == 0) {\n      returnValue = (*functionPtr)(data,params[8],ushortValue & 0x1000,1);\n      if ((returnValue == -1) && (ushortValue = *data, ushortValue != 0)) {\n        if ((ushortValue == 0x1d) || (ushortValue == 0x16)) {\n          *data = tempValue;\n          return 0;\n        }\n        flagValue = *(ushort *)(params + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      returnValue = params[0x15];\n    }\n    if (((int)((uint)*(ushort *)(params + 3) << 0x1d) < 0) &&\n       (returnValue = returnValue - params[1], params[0xd] != 0)) {\n      returnValue = returnValue - params[0x10];\n    }\n    returnValue = (*(code *)params[0xb])(data,params[8],returnValue,0);\n    flagValue = *(ushort *)(params + 3);\n    if ((returnValue == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(params + 3) = flagValue | 0x40;\n      return 0xffffffff;\n    }\n    params[1] = 0;\n    *params = params[4];\n    if (((int)((uint)flagValue << 0x13) < 0) && ((returnValue != -1 || (*data == 0)))) {\n      params[0x15] = returnValue;\n    }\n    ptrVar = (int *)params[0xd];\n    *data = tempValue;\n    if (ptrVar != (int *)0x0) {\n      if (ptrVar != params + 0x11) {\n        FUN_00004b34(data);\n      }\n      params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data",
                "param_2": "params",
                "iVar1": "returnValue",
                "piVar2": "ptrVar",
                "uVar3": "ushortValue",
                "uVar4": "flagValue",
                "iVar5": "tempVar",
                "pcVar6": "functionPtr",
                "iVar7": "loopVar",
                "uVar8": "tempValue",
                "bVar9": "isTrue"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int inputData,undefined4 *outputData)\n\n{\n  undefined4 returnValue;\n  \n  if (outputData[4] != 0) {\n    if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (outputData == &DAT_000079b8) {\n      outputData = *(undefined4 **)(inputData + 4);\n    }\n    else if (outputData == (undefined4 *)&DAT_000079d8) {\n      outputData = *(undefined4 **)(inputData + 8);\n    }\n    else if (outputData == (undefined4 *)&DAT_00007998) {\n      outputData = *(undefined4 **)(inputData + 0xc);\n    }\n    if (*(short *)(outputData + 3) != 0) {\n      if ((-1 < (int)(outputData[0x19] << 0x1f)) && (-1 < (int)*(short *)(outputData + 3) << 0x16)) {\n        FUNC_000045e8(outputData[0x16]);\n      }\n      returnValue = FUN_0000404c(inputData,outputData);\n      if ((int)(outputData[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(outputData + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(outputData[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "inputData",
                "param_2": "outputData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocations_000041d0",
            "code": "\nuint processRelocations_000041d0(int sectionFlag,undefined4 param_offset,undefined4 param_val)\n\n{\n  uint result;\n  int rel_offset;\n  dword *rel_table;\n  int rel_entry;\n  uint totalResult;\n  int rel_count;\n  undefined4 *symbolTable;\n  \n  if (sectionFlag == 0) {\n    symbolTable = &DAT_000079f8;\n    rel_table = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    totalResult = 0;\n    do {\n      rel_count = rel_table[1];\n      rel_entry = rel_table[2];\n      while (rel_count = rel_count + -1, -1 < rel_count) {\n        if ((1 < *(ushort *)(rel_entry + 0xc)) && (rel_offset = *(short *)(rel_entry + 0xe) + 1, rel_offset != 0)) {\n          result = FUN_00004158(0x1fff0284,rel_entry,param_val,rel_offset,symbolTable);\n          totalResult = totalResult | result;\n        }\n        rel_entry = rel_entry + 0x68;\n      }\n      rel_table = (dword *)*rel_table;\n    } while (rel_table != (dword *)0x0);\n    return totalResult;\n  }\n  totalResult = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,sectionFlag);\n  return totalResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "param_1": "sectionFlag",
                "param_2": "param_offset",
                "param_3": "param_val",
                "uVar1": "result",
                "iVar2": "rel_offset",
                "pdVar3": "rel_table",
                "iVar4": "rel_entry",
                "uVar5": "totalResult",
                "iVar6": "rel_count",
                "puVar7": "symbolTable"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_structure_000041f4",
            "code": "\nvoid initializeDataStructure_000041f4(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[25] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[6] = 0;\n  FUN_00004622(dataStructure + 0x17,0,8);\n  dataStructure[9] = 0x4dc9;\n  dataStructure[10] = 0x4def;\n  dataStructure[11] = 0x4e27;\n  dataStructure[8] = dataStructure;\n  dataStructure[12] = labelAddress;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "dataStructure[1]",
                "param_1[4]": "dataStructure[4]",
                "param_1[5]": "dataStructure[5]",
                "param_1[2]": "dataStructure[2]",
                "param_1[0x19]": "dataStructure[25]",
                "param_1[6]": "dataStructure[6]",
                "param_1[9]": "dataStructure[9]",
                "param_1[10]": "dataStructure[10]",
                "param_1[0xb]": "dataStructure[11]",
                "param_1[8]": "dataStructure[8]",
                "param_1[0xc]": "dataStructure[12]",
                "&LAB_00004e4a_1": "labelAddress"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_structure_00004248",
            "code": "\nundefined4 * initializeDataStructure_00004248(undefined4 dataPointer,int arraySize)\n\n{\n  undefined4 *resultPointer;\n  int offset;\n  \n  offset = (arraySize + -1) * 0x68;\n  resultPointer = (undefined4 *)FUN_00004bd0(dataPointer,offset + 0x74);\n  if (resultPointer != (undefined4 *)0x0) {\n    *resultPointer = 0;\n    resultPointer[1] = arraySize;\n    resultPointer[2] = resultPointer + 3;\n    FUN_00004622(resultPointer + 3,0,offset + 0x68);\n  }\n  return resultPointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "param_1": "dataPointer",
                "param_2": "arraySize",
                "puVar1": "resultPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_parameters_000042a4",
            "code": "\nvoid initializeParameters_000042a4(int param)\n\n{\n  undefined4 temp;\n  \n  FUN_0000428c();\n  if (*(int *)(param + 0x18) == 0) {\n    *(undefined4 *)(param + 0x48) = 0;\n    *(undefined4 *)(param + 0x4c) = 0;\n    *(undefined4 *)(param + 0x50) = 0;\n    temp = 0x1fff0284;\n    *(undefined **)(param + 0x28) = &DAT_0000423d;\n    if (param == 0x1fff0284) {\n      temp = 1;\n    }\n    if (param == 0x1fff0284) {\n      *(undefined4 *)(param + 0x18) = temp;\n    }\n    temp = FUN_00004314(param);\n    *(undefined4 *)(param + 4) = temp;\n    temp = FUN_00004314(param);\n    *(undefined4 *)(param + 8) = temp;\n    temp = FUN_00004314(param);\n    *(undefined4 *)(param + 0xc) = temp;\n    FUN_000041f4(*(undefined4 *)(param + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(param + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(param + 0xc),0x12,2);\n    *(undefined4 *)(param + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_parameters_000042a4",
                "param_1": "param",
                "uVar1": "temp"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "process_symbols_00004314",
            "code": "\nundefined4 * processSymbols_00004314(undefined4 *symbolTable)\n\n{\n  dword newRelocationEntry;\n  int numEntries;\n  undefined4 *currentEntry;\n  dword *currentRelocation;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  currentRelocation = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    numEntries = currentRelocation[1];\n    currentEntry = (undefined4 *)currentRelocation[2];\n    while (numEntries = numEntries + -1, -1 < numEntries) {\n      if (*(short *)(currentEntry + 3) == 0) {\n        currentEntry[3] = 0xffff0001;\n        currentEntry[0x19] = 0;\n        FUNC_000045e4(currentEntry + 0x16);\n        FUN_00004280();\n        currentEntry[1] = 0;\n        currentEntry[2] = 0;\n        currentEntry[4] = 0;\n        currentEntry[5] = 0;\n        *currentEntry = 0;\n        currentEntry[6] = 0;\n        FUN_00004622(currentEntry + 0x17,0,8);\n        currentEntry[0xd] = 0;\n        currentEntry[0xe] = 0;\n        currentEntry[0x12] = 0;\n        currentEntry[0x13] = 0;\n        return currentEntry;\n      }\n      currentEntry = currentEntry + 0x1a;\n    }\n    if (*currentRelocation == 0) {\n      newRelocationEntry = FUN_00004248(symbolTable,4);\n      *currentRelocation = newRelocationEntry;\n      if (newRelocationEntry == 0) {\n        FUN_00004280();\n        *symbolTable = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    currentRelocation = (dword *)*currentRelocation;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "process_symbols_00004314",
                "param_1": "symbolTable",
                "dVar1": "newRelocationEntry",
                "iVar2": "numEntries",
                "puVar3": "currentEntry",
                "pdVar4": "currentRelocation"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "find_and_execute_valid_function_000043a0",
            "code": "\nuint find_and_execute_valid_function_000043a0(int base_offset,code *code_executor)\n\n{\n  uint result;\n  int *current_node;\n  int current_function;\n  uint final_result;\n  int iteration_count;\n  \n  current_node = (int *)(base_offset + 0x48);\n  final_result = 0;\n  do {\n    iteration_count = current_node[1];\n    current_function = current_node[2];\n    while (iteration_count = iteration_count + -1, -1 < iteration_count) {\n      if ((1 < *(ushort *)(current_function + 0xc)) && (*(short *)(current_function + 0xe) != -1)) {\n        result = (*code_executor)(current_function);\n        final_result = final_result | result;\n      }\n      current_function = current_function + 0x68;\n    }\n    current_node = (int *)*current_node;\n  } while (current_node != (int *)0x0);\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "find_and_execute_valid_function_000043a0",
                "param_1": "base_offset",
                "param_2": "code_executor",
                "piVar2": "current_node",
                "iVar3": "current_function",
                "uVar1": "result",
                "uVar4": "final_result",
                "iVar5": "iteration_count"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "extract_data_00004418",
            "code": "\nuint extractData_00004418(void)\n\n{\n  dword relocOffset;\n  uint result;\n  byte **bytePointer3;\n  byte *bytePointer4;\n  \n  relocOffset = relocationTable[16].r_offset;\n  if ((relocationTable[16].r_offset != 0) &&\n     (*(int *)(relocationTable[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(relocationTable[16].r_offset);\n  }\n  bytePointer3 = *(byte ***)(relocOffset + 4);\n  if ((relocOffset != 0) && (*(int *)(relocOffset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (bytePointer3 == (byte **)&DAT_000079b8) {\n    bytePointer3 = *(byte ***)(relocOffset + 4);\n  }\n  else if (bytePointer3 == (byte **)&DAT_000079d8) {\n    bytePointer3 = *(byte ***)(relocOffset + 8);\n  }\n  else if (bytePointer3 == (byte **)&DAT_00007998) {\n    bytePointer3 = *(byte ***)(relocOffset + 0xc);\n  }\n  if ((-1 < (int)bytePointer3[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(bytePointer3 + 3) << 0x16))) {\n    FUNC_000045e8(bytePointer3[0x16]);\n  }\n  bytePointer4 = bytePointer3[1];\n  bytePointer3[1] = bytePointer4 + -1;\n  if ((int)(bytePointer4 + -1) < 0) {\n    result = FUN_00005e10(relocOffset,bytePointer3);\n  }\n  else {\n    bytePointer4 = *bytePointer3;\n    *bytePointer3 = bytePointer4 + 1;\n    result = (uint)*bytePointer4;\n  }\n  if ((-1 < (int)bytePointer3[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(bytePointer3 + 3) << 0x16))) {\n    FUNC_000045ec(bytePointer3[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "extract_data_00004418",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "dVar1": "relocOffset",
                "uVar2": "result",
                "ppbVar3": "bytePointer3",
                "pbVar4": "bytePointer4"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *dateTimeInfo,uint *resultDateTime)\n\n{\n  int tempVar1;\n  uint tempVar6;\n  uint remainingDays;\n  uint leapYears;\n  uint centuryYears;\n  undefined4 var6;\n  undefined4 var7;\n  uint yearValue;\n  bool isNegativeYear;\n  \n  var6 = *dateTimeInfo;\n  var7 = dateTimeInfo[1];\n  tempVar1 = FUN_00006974(var6,var7,0x15180,0);\n  remainingDays = 0x15180;\n  FUN_00006974(var6,var7,0x15180,0);\n  isNegativeYear = (int)remainingDays < 0;\n  if (isNegativeYear) {\n    remainingDays = remainingDays + 0x15180;\n  }\n  if (isNegativeYear) {\n    tempVar6 = tempVar1 + 0xafa6b;\n  }\n  else {\n    tempVar6 = tempVar1 + 0xafa6c;\n  }\n  resultDateTime[2] = remainingDays / 0xe10;\n  resultDateTime[1] = (remainingDays % 0xe10) / 0x3c;\n  *resultDateTime = (remainingDays % 0xe10) % 0x3c;\n  resultDateTime[6] = (tempVar6 + 3) % 7;\n  remainingDays = tempVar6;\n  if ((int)tempVar6 < 0) {\n    remainingDays = tempVar6 - 0x23ab0;\n  }\n  tempVar6 = (remainingDays / 0x23ab1) * -0x23ab1 + tempVar6;\n  leapYears = ((tempVar6 / 0x8eac + tempVar6) - tempVar6 / 0x5b4) - tempVar6 / 0x23ab0;\n  centuryYears = leapYears / 0x16d;\n  tempVar6 = (centuryYears / 100 - leapYears / 0x5b4) + tempVar6 + centuryYears * -0x16d;\n  yearValue = tempVar6 * 5 + 2;\n  leapYears = yearValue / 0x99;\n  if (yearValue < 0x5fa) {\n    tempVar1 = 2;\n  }\n  else {\n    tempVar1 = -10;\n  }\n  yearValue = leapYears + tempVar1;\n  tempVar1 = (remainingDays / 0x23ab1) * 400 + centuryYears;\n  if (yearValue < 2) {\n    tempVar1 = tempVar1 + 1;\n  }\n  if (tempVar6 < 0x132) {\n    if (((centuryYears & 3) == 0) && (centuryYears != (centuryYears / 100) * 100)) {\n      remainingDays = 1;\n    }\n    else {\n      remainingDays = (uint)(centuryYears % 400 == 0);\n    }\n    remainingDays = tempVar6 + 0x3b + remainingDays;\n  }\n  else {\n    remainingDays = tempVar6 - 0x132;\n  }\n  resultDateTime[7] = remainingDays;\n  resultDateTime[3] = (tempVar6 + 1) - (leapYears * 0x99 + 2) / 5;\n  resultDateTime[4] = yearValue;\n  resultDateTime[5] = tempVar1 - 0x76c;\n  resultDateTime[8] = 0;\n  return resultDateTime;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "dateTimeInfo",
                "param_2": "resultDateTime",
                "uVar2": "tempVar6",
                "uVar3": "remainingDays",
                "uVar4": "leapYears",
                "uVar5": "centuryYears",
                "uVar6": "var6",
                "uVar7": "var7",
                "uVar8": "yearValue",
                "bVar9": "isNegativeYear",
                "iVar1": "tempVar1"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_function_pointers_0000459c",
            "code": "\nvoid executeFunctionPointers_0000459c(void)\n\n{\n  code **functionPointers;\n  int index;\n  \n  functionPointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointers)();\n    functionPointers = functionPointers + 1;\n  }\n  FUN_00000410();\n  functionPointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointers)();\n    functionPointers = functionPointers + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_function_pointers_0000459c",
                "ppcVar1": "functionPointers",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *dest,undefined *src,int length)\n\n{\n  undefined *destEnd;\n  undefined *srcEnd;\n  \n  srcEnd = src + length;\n  if ((src < dest) && (dest < srcEnd)) {\n    destEnd = dest + length;\n    while (destEnd != dest) {\n      srcEnd = srcEnd + -1;\n      destEnd = destEnd + -1;\n      *destEnd = *srcEnd;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcEnd; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "destEnd",
                "puVar2": "srcEnd"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_with_00004622",
            "code": "\nvoid fillMemoryWith_00004622(undefined *memory,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + size;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_with_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *dateArray,uint day,undefined4 flag)\n\n{\n  int daysInMonth;\n  uint year;\n  uint leapYearAdjustment;\n  int monthIndex;\n  bool isNegative;\n  uint *tempArray;\n  uint currentMonth;\n  undefined4 tempFlag;\n  \n  tempArray = dateArray;\n  currentMonth = day;\n  tempFlag = flag;\n  if (0x3b < *dateArray) {\n    FUN_00005584(&tempArray,*dateArray,0x3c);\n    year = dateArray[1] + (int)tempArray;\n    dateArray[1] = year;\n    if ((int)currentMonth < 0) {\n      year = year - 1;\n      *dateArray = currentMonth + 0x3c;\n    }\n    else {\n      *dateArray = currentMonth;\n    }\n    if ((int)currentMonth < 0) {\n      dateArray[1] = year;\n    }\n  }\n  if (0x3b < dateArray[1]) {\n    FUN_00005584(&tempArray,dateArray[1],0x3c);\n    isNegative = (int)currentMonth < 0;\n    leapYearAdjustment = dateArray[2] + (int)tempArray;\n    dateArray[2] = leapYearAdjustment;\n    year = currentMonth;\n    if (isNegative) {\n      year = currentMonth + 0x3c;\n      leapYearAdjustment = leapYearAdjustment - 1;\n    }\n    if (!isNegative) {\n      dateArray[1] = year;\n    }\n    if (isNegative) {\n      dateArray[1] = year;\n    }\n    if (isNegative) {\n      dateArray[2] = leapYearAdjustment;\n    }\n  }\n  if (0x17 < dateArray[2]) {\n    FUN_00005584(&tempArray,dateArray[2],0x18);\n    isNegative = (int)currentMonth < 0;\n    leapYearAdjustment = dateArray[3] + (int)tempArray;\n    dateArray[3] = leapYearAdjustment;\n    year = currentMonth;\n    if (isNegative) {\n      year = currentMonth + 0x18;\n      leapYearAdjustment = leapYearAdjustment - 1;\n    }\n    if (!isNegative) {\n      dateArray[2] = year;\n    }\n    if (isNegative) {\n      dateArray[2] = year;\n    }\n    if (isNegative) {\n      dateArray[3] = leapYearAdjustment;\n    }\n  }\n  if (0xb < dateArray[4]) {\n    FUN_00005584(&tempArray,dateArray[4],0xc);\n    isNegative = (int)currentMonth < 0;\n    year = dateArray[5] + (int)tempArray;\n    dateArray[5] = year;\n    if (isNegative) {\n      currentMonth = currentMonth + 0xc;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      dateArray[4] = currentMonth;\n    }\n    if (isNegative) {\n      dateArray[4] = currentMonth;\n    }\n    if (isNegative) {\n      dateArray[5] = year;\n    }\n  }\n  year = dateArray[5];\n  if ((year & 3) == 0) {\n    if (year == (year / 100) * 100) {\n      if ((year + 0x76c) % 400 == 0) {\n        monthIndex = 0x1d;\n      }\n      else {\n        monthIndex = 0x1c;\n      }\n    }\n    else {\n      monthIndex = 0x1d;\n    }\n  }\n  else {\n    monthIndex = 0x1c;\n  }\n  if ((int)dateArray[3] < 1) {\n    while ((int)dateArray[3] < 1) {\n      year = dateArray[4];\n      dateArray[4] = year - 1;\n      if (year - 1 == 0xffffffff) {\n        leapYearAdjustment = dateArray[5];\n        year = leapYearAdjustment - 1;\n        dateArray[4] = 0xb;\n        dateArray[5] = year;\n        if ((year & 3) == 0) {\n          if (year == (year / 100) * 100) {\n            if ((leapYearAdjustment + 0x76b) % 400 == 0) {\n              monthIndex = 0x1d;\n            }\n            else {\n              monthIndex = 0x1c;\n            }\n          }\n          else {\n            monthIndex = 0x1d;\n          }\n        }\n        else {\n          monthIndex = 0x1c;\n        }\n      }\n      daysInMonth = monthIndex;\n      if (dateArray[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateArray[4]];\n      }\n      dateArray[3] = daysInMonth + dateArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      year = dateArray[4];\n      daysInMonth = monthIndex;\n      if (year != 1) {\n        daysInMonth = (&DAT_000079fc)[year];\n      }\n      if ((int)dateArray[3] <= daysInMonth) break;\n      dateArray[3] = dateArray[3] - daysInMonth;\n      dateArray[4] = year + 1;\n      if (year + 1 == 0xc) {\n        leapYearAdjustment = dateArray[5];\n        year = leapYearAdjustment + 1;\n        dateArray[4] = 0;\n        dateArray[5] = year;\n        if ((year & 3) == 0) {\n          if (year % 100 == 0) {\n            if ((leapYearAdjustment + 0x76d) % 400 == 0) {\n              monthIndex = 0x1d;\n            }\n            else {\n              monthIndex = 0x1c;\n            }\n          }\n          else {\n            monthIndex = 0x1d;\n          }\n        }\n        else {\n          monthIndex = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "dateArray",
                "param_2": "day",
                "param_3": "flag",
                "iVar1": "daysInMonth",
                "uVar2": "year",
                "uVar3": "leapYearAdjustment",
                "iVar4": "monthIndex",
                "bVar5": "isNegative",
                "local_20": "tempArray",
                "local_1c": "currentMonth",
                "uStack_18": "tempFlag"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_days_from_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDaysFromDate_000047e4(int *dateArray)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *functionPointers;\n  uint tempUInt1;\n  int tempInt1;\n  int tempInt2;\n  int tempInt3;\n  uint tempUInt2;\n  uint tempUInt3;\n  uint tempUInt4;\n  int daysFromYears;\n  uint year;\n  uint isLeapYear;\n  uint maxYear;\n  uint days;\n  bool isLeapYear2;\n  \n  functionPointers = (int *)FUN_000056b0();\n  FUN_00004634(dateArray);\n  year = dateArray[5];\n  daysFromYears = dateArray[3] + -1 + *(int *)(&DAT_00007a2c + dateArray[4] * 4);\n  if (((1 < dateArray[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    daysFromYears = daysFromYears + 1;\n  }\n  dateArray[7] = daysFromYears;\n  if (20000 < (int)&DAT_00002710 + year) {\n    tempInt3 = -1;\n    tempInt1 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (tempUInt3 = 0x45; (int)year < (int)tempUInt3; tempUInt3 = tempUInt3 - 1) {\n        if ((tempUInt3 & 3) == 0) {\n          if (tempUInt3 == (tempUInt3 / 100) * 100) {\n            if ((tempUInt3 + 0x76c) % 400 == 0) {\n              tempInt3 = 0x16e;\n            }\n            else {\n              tempInt3 = 0x16d;\n            }\n          }\n          else {\n            tempInt3 = 0x16e;\n          }\n        }\n        else {\n          tempInt3 = 0x16d;\n        }\n        daysFromYears = daysFromYears - tempInt3;\n      }\n      if ((tempUInt3 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          tempInt3 = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            tempInt3 = 0x16e;\n          }\n        }\n        else {\n          tempInt3 = 0x16e;\n        }\n      }\n      else {\n        tempInt3 = 0x16d;\n      }\n      daysFromYears = daysFromYears - tempInt3;\n    }\n  }\n  else {\n    tempUInt3 = 0x46;\n    do {\n      if ((tempUInt3 & 3) == 0) {\n        if (tempUInt3 % 100 == 0) {\n          if ((tempUInt3 + 0x76c) % 400 == 0) {\n            tempInt3 = 0x16e;\n          }\n          else {\n            tempInt3 = 0x16d;\n          }\n        }\n        else {\n          tempInt3 = 0x16e;\n        }\n      }\n      else {\n        tempInt3 = 0x16d;\n      }\n      tempUInt3 = tempUInt3 + 1;\n      daysFromYears = daysFromYears + tempInt3;\n    } while (year != tempUInt3);\n  }\n  totalDays = (longlong)daysFromYears * 0x15180 + (longlong)(dateArray[2] * 0xe10 + dateArray[1] * 0x3c + *dateArray)\n  ;\n  days = (uint)totalDays;\n  tempInt3 = (int)((ulonglong)totalDays >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  tempUInt3 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = functionPointers[10];\n    tempInt3 = (uint)totalDays + year;\n    tempInt1 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n  }\n  else {\n    maxYear = dateArray[8];\n    isLeapYear = maxYear;\n    if (0 < (int)maxYear) {\n      isLeapYear = 1;\n    }\n    if ((functionPointers[1] == dateArray[5] + 0x76c) || (tempInt1 = FUN_00004f98(), tempInt1 != 0)) {\n      tempUInt4 = functionPointers[0x14];\n      tempUInt1 = functionPointers[0x12];\n      tempUInt2 = functionPointers[10];\n      tempUInt3 = tempUInt1 - tempUInt2;\n      tempInt1 = (functionPointers[0x13] - ((int)tempUInt2 >> 0x1f)) - (uint)(tempUInt1 < tempUInt2);\n      if (((int)((tempInt3 - tempInt1) - (uint)(days < tempUInt3)) < 0 ==\n           (SBORROW4(tempInt3,tempInt1) != SBORROW4(tempInt3 - tempInt1,(uint)(days < tempUInt3)))) &&\n         (tempInt2 = (functionPointers[0x13] - ((int)tempUInt4 >> 0x1f)) - (uint)(tempUInt1 < tempUInt4),\n         isLeapYear2 = days < tempUInt1 - tempUInt4,\n         (int)((tempInt3 - tempInt2) - (uint)isLeapYear2) < 0 !=\n         (SBORROW4(tempInt3,tempInt2) != SBORROW4(tempInt3 - tempInt2,(uint)isLeapYear2)))) goto LAB_00004a88;\n      tempUInt1 = functionPointers[8] - tempUInt4;\n      tempInt2 = (functionPointers[9] - ((int)tempUInt4 >> 0x1f)) - (uint)((uint)functionPointers[8] < tempUInt4);\n      if (*functionPointers != 0) {\n        if ((int)((tempInt3 - tempInt2) - (uint)(days < tempUInt1)) < 0 ==\n            (SBORROW4(tempInt3,tempInt2) != SBORROW4(tempInt3 - tempInt2,(uint)(days < tempUInt1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempUInt3 = 0;\n        if ((int)maxYear < 0) goto LAB_00004934;\nLAB_00004a14:\n        days = isLeapYear ^ tempUInt3;\n        isLeapYear = tempUInt3;\n        if (days == 1) {\n          if (tempUInt3 == 0) {\n            tempInt3 = tempUInt4 - tempUInt2;\n          }\n          else {\n            tempInt3 = tempUInt2 - tempUInt4;\n          }\n          tempInt1 = dateArray[3];\n          *dateArray = *dateArray + tempInt3;\n          updatedTotalDays = totalDays + tempInt3;\n          FUN_00004634(dateArray);\n          tempInt1 = dateArray[3] - tempInt1;\n          totalDays = totalDays + tempInt3;\n          if (tempInt1 != 0) {\n            if (tempInt1 < 2) {\n              if (tempInt1 == -2 || tempInt1 + 2 < 0 != SCARRY4(tempInt1,2)) {\n                tempInt1 = 1;\n              }\n            }\n            else {\n              tempInt1 = -1;\n            }\n            tempInt3 = tempInt1 + dateArray[7];\n            daysFromYears = daysFromYears + tempInt1;\n            if (tempInt3 < 0) {\n              tempUInt3 = year - 1;\n              if ((tempUInt3 & 3) == 0) {\n                if (tempUInt3 == (tempUInt3 / 100) * 100) {\n                  tempInt3 = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    tempInt3 = 0x16c;\n                  }\n                }\n                else {\n                  tempInt3 = 0x16d;\n                }\n              }\n              else {\n                tempInt3 = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  tempInt1 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    tempInt1 = 0x16e;\n                  }\n                }\n                else {\n                  tempInt1 = 0x16e;\n                }\n              }\n              else {\n                tempInt1 = 0x16d;\n              }\n              if (tempInt1 <= tempInt3) {\n                tempInt3 = tempInt3 - tempInt1;\n              }\n            }\n            dateArray[7] = tempInt3;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((tempInt3 - tempInt2) - (uint)(days < tempUInt1)) < 0 !=\n          (SBORROW4(tempInt3,tempInt2) != SBORROW4(tempInt3 - tempInt2,(uint)(days < tempUInt1)))) {\nLAB_0000491e:\n        if ((int)((tempInt3 - tempInt1) - (uint)(days < tempUInt3)) < 0 ==\n            (SBORROW4(tempInt3,tempInt1) != SBORROW4(tempInt3 - tempInt1,(uint)(days < tempUInt3))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)maxYear) {\n        tempUInt3 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempUInt3 = isLeapYear;\n      if (isLeapYear != 1) goto LAB_00004934;\n    }\n    year = functionPointers[0x14];\n    tempInt3 = (uint)totalDays + year;\n    tempInt1 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n    tempUInt3 = 1;\n  }\n  FUN_000050f4();\n  dateArray[8] = tempUInt3;\n  dateArray[6] = (daysFromYears + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempInt1,tempInt3);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_days_from_date_000047e4",
                "param_1": "dateArray",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "functionPointers",
                "uVar4": "tempUInt1",
                "iVar5": "tempInt1",
                "iVar6": "tempInt2",
                "iVar7": "tempInt3",
                "uVar8": "tempUInt2",
                "uVar9": "tempUInt3",
                "uVar10": "tempUInt4",
                "iVar11": "daysFromYears",
                "uVar12": "year",
                "uVar13": "isLeapYear",
                "uVar14": "maxYear",
                "uVar15": "days",
                "bVar16": "isLeapYear2"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_linked_list_00004b34",
            "code": "\nvoid updateLinkedList_00004b34(undefined4 *listPtr,int size,undefined4 value1,undefined4 value2)\n\n{\n  int *current;\n  int **next;\n  int **prev;\n  int **head;\n  int **temp;\n  int **newNode;\n  bool isFound;\n  \n  if (size == 0) {\n    return;\n  }\n  newNode = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(size + -4));\n  }\n  FUN_00005790();\n  head = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    prev = next;\n    DAT_1fff0db4 = newNode;\n  }\n  else {\n    temp = DAT_1fff0db4;\n    if (newNode < DAT_1fff0db4) {\n      prev = (int **)*newNode;\n      head = (int **)((int)newNode + (int)prev);\n      isFound = DAT_1fff0db4 == head;\n      if (isFound) {\n        head = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNode[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNode;\n      if (isFound) {\n        head = (int **)((int)head + (int)prev);\n        *newNode = (int *)head;\n      }\n    }\n    else {\n      do {\n        head = temp;\n        temp = (int **)head[1];\n        if (temp == (int **)0x0) break;\n      } while (temp <= newNode);\n      prev = (int **)*head;\n      if ((int **)((int)head + (int)prev) == newNode) {\n        prev = (int **)((int)prev + (int)*newNode);\n        *head = (int *)prev;\n        if (temp == (int **)((int)head + (int)prev)) {\n          current = *temp;\n          head[1] = temp[1];\n          prev = (int **)((int)prev + (int)current);\n          *head = (int *)prev;\n        }\n      }\n      else if (newNode < (int **)((int)head + (int)prev)) {\n        *listPtr = 0xc;\n      }\n      else {\n        prev = (int **)((int)newNode + (int)*newNode);\n        isFound = temp == prev;\n        if (isFound) {\n          prev = (int **)*temp;\n          temp = (int **)temp[1];\n        }\n        newNode[1] = (int *)temp;\n        if (isFound) {\n          prev = (int **)((int)prev + (int)*newNode);\n          *newNode = (int *)prev;\n        }\n        head[1] = (int *)newNode;\n      }\n    }\n  }\n  FUN_0000579c(listPtr,prev,head,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_linked_list_00004b34",
                "param_1": "listPtr",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "piVar1": "current",
                "extraout_r1": "next",
                "ppiVar2": "prev",
                "ppiVar3": "head",
                "ppiVar4": "temp",
                "ppiVar5": "newNode",
                "bVar6": "isFound"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *output_ptr,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *current_block;\n  int difference;\n  uint block_size;\n  uint *prev_block;\n  uint padded_size;\n  \n  padded_size = (size + 3 & 0xfffffffc) + 8;\n  if (padded_size < 0xc) {\n    padded_size = 0xc;\n  }\n  if (((int)padded_size < 0) || (padded_size < size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    FUN_00005790();\n    current_block = DAT_1fff0db4;\n    for (prev_block = DAT_1fff0db4; prev_block != (uint *)0x0; prev_block = (uint *)prev_block[1]) {\n      block_size = *prev_block - padded_size;\n      if (-1 < (int)block_size) {\n        if (0xb < block_size) {\n          *prev_block = block_size;\n          prev_block = (uint *)((int)prev_block + block_size);\n          goto LAB_00004c34;\n        }\n        if (current_block == prev_block) {\n          DAT_1fff0db4 = (uint *)prev_block[1];\n        }\n        if (current_block != prev_block) {\n          current_block[1] = (uint)(uint *)prev_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      current_block = prev_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(output_ptr,0,current_block,0,param_4);\n    }\n    current_block = (uint *)FUN_00000428(output_ptr,padded_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((prev_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == prev_block ||\n        (difference = FUN_00000428(output_ptr,(int)prev_block - (int)current_block), difference != -1)))) {\nLAB_00004c34:\n      *prev_block = padded_size;\nLAB_00004c42:\n      FUN_0000579c(output_ptr);\n      padded_size = (int)prev_block + 0xbU & 0xfffffff8;\n      difference = padded_size - (int)(prev_block + 1);\n      if (difference == 0) {\n        return padded_size;\n      }\n      *(uint *)((int)prev_block + difference) = (int)(prev_block + 1) - padded_size;\n      return padded_size;\n    }\n    *output_ptr = 0xc;\n    FUN_0000579c(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "output_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "uVar3": "block_size",
                "puVar4": "prev_block",
                "uVar5": "padded_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "initialize_function_00004c84",
            "code": "\nvoid initializeFunction_00004c84(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  dword offset;\n  undefined4 param1Copy;\n  undefined4 param2Stack;\n  undefined4 param3Stack;\n  undefined4 param4Stack;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  param1Copy = inputParam1;\n  param2Stack = inputParam2;\n  param3Stack = inputParam3;\n  param4Stack = inputParam4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(offset,*(undefined4 *)(offset + 8),inputParam1,&param2Stack,param1Copy,&param2Stack);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "initialize_function_00004c84",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "dVar1": "offset",
                "uVar2": "param1Copy",
                "uStack_c": "param2Stack",
                "uStack_8": "param3Stack",
                "uStack_4": "param4Stack"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_input_00004cb4",
            "code": "\nuint processInput_00004cb4(uint input)\n\n{\n  dword relOffset;\n  undefined4 *dataPointer;\n  uint counter;\n  undefined *bytePointer;\n  undefined4 auxiliary1;\n  undefined4 auxiliary2;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPointer = *(undefined4 **)(relOffset + 8);\n  if ((relOffset != 0) && (*(int *)(relOffset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPointer == &DAT_000079b8) {\n    dataPointer = *(undefined4 **)(relOffset + 4);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_000079d8) {\n    dataPointer = *(undefined4 **)(relOffset + 8);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_00007998) {\n    dataPointer = *(undefined4 **)(relOffset + 0xc);\n  }\n  if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045e8(dataPointer[0x16]);\n  }\n  counter = dataPointer[2] - 1;\n  dataPointer[2] = counter;\n  if (((int)counter < 0) && (((int)counter < (int)dataPointer[6] || (counter = input & 0xff, counter == 10))))\n  {\n    input = FUN_00005404(relOffset,input,dataPointer,counter,auxiliary1,auxiliary2);\n  }\n  else {\n    bytePointer = (undefined *)*dataPointer;\n    *dataPointer = bytePointer + 1;\n    *bytePointer = (char)input;\n    input = input & 0xff;\n  }\n  if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045ec(dataPointer[0x16]);\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_input_00004cb4",
                "param_1": "input",
                "dVar1": "relOffset",
                "puVar2": "dataPointer",
                "uVar3": "counter",
                "puVar4": "bytePointer",
                "unaff_r4": "auxiliary1",
                "unaff_r5": "auxiliary2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int inputData)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *ptr;\n  char **dataPtr;\n  undefined4 returnValue;\n  char *ptr1;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  dataPtr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (dataPtr == (char **)&DAT_000079b8) {\n    dataPtr = *(char ***)(offset + 4);\n  }\n  else if (dataPtr == (char **)&DAT_000079d8) {\n    dataPtr = *(char ***)(offset + 8);\n  }\n  else if (dataPtr == (char **)&DAT_00007998) {\n    dataPtr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataPtr + 3) << 0x1c) < 0) && (dataPtr[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,dataPtr), result == 0)) {\n    ptr1 = (char *)(inputData + -1);\n    do {\n      while( true ) {\n        ptr1 = ptr1 + 1;\n        currentChar = *ptr1;\n        ptr = dataPtr[2] + -1;\n        dataPtr[2] = ptr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)ptr) {\n            ptr1 = *dataPtr;\n            returnValue = 10;\n            *dataPtr = ptr1 + 1;\n            *ptr1 = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,dataPtr);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)ptr < 0) && (((int)ptr < (int)dataPtr[6] || (currentChar == '\\n')))) break;\n        ptr = *dataPtr;\n        *dataPtr = ptr + 1;\n        *ptr = currentChar;\n      }\n      result = FUN_00005404(offset,currentChar,dataPtr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "inputData",
                "dVar2": "offset",
                "iVar3": "result",
                "cVar1": "currentChar",
                "pcVar4": "ptr",
                "pcVar7": "ptr1",
                "ppcVar5": "dataPtr",
                "uVar6": "returnValue"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_based_on_condition_00004dc8",
            "code": "\nvoid updateValueBasedOnCondition_00004dc8(undefined4 valueToUpdate,int dataPointer)\n\n{\n  int result;\n  uint updatedValue;\n  bool isPositive;\n  \n  result = FUN_00000490(valueToUpdate,(int)*(short *)(dataPointer + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    updatedValue = *(int *)(dataPointer + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(dataPointer + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(dataPointer + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(dataPointer + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_based_on_condition_00004dc8",
                "param_1": "valueToUpdate",
                "param_2": "dataPointer",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 output,int input,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    FUN_000004f2(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  result = FUN_00000e38(param2,param3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_status_00004e26",
            "code": "\nvoid updateStatus_00004e26(undefined4 status,int data)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isError;\n  \n  result = FUN_000004f2(status,(int)*(short *)(data + 0xe));\n  isError = result == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    updatedValue = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(data + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(data + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_status_00004e26",
                "param_1": "status",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_and_subtract_00004e52",
            "code": "\nint compareAndSubtract_00004e52(byte *input1,byte *input2)\n\n{\n  byte currentByte;\n  uint byteValue;\n  bool isEqual;\n  \n  do {\n    byteValue = (uint)*input1;\n    currentByte = *input2;\n    isEqual = byteValue == 1;\n    if (byteValue != 0) {\n      isEqual = byteValue == currentByte;\n    }\n    input1 = input1 + 1;\n    input2 = input2 + 1;\n  } while (isEqual);\n  return byteValue - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_and_subtract_00004e52",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "currentByte",
                "uVar2": "byteValue",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *data,int size,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(size + -1);\n    current_byte = data;\n    do {\n      byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (byte_value != 0);\n    difference = byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "size",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "byte_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint ch;\n  uint isNegative;\n  uint digit;\n  int returnValue;\n  uint INT_MAX;\n  uint maxQuotient;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    ch = (uint)*currentChar;\n    isNegative = (byte)(&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    ch = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  INT_MAX = isNegative + 0x7fffffff;\n  returnValue = 0;\n  maxQuotient = INT_MAX / base;\n  result = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (returnValue != -1) {\n      if ((maxQuotient < result) || ((maxQuotient == result && ((int)(INT_MAX - base * maxQuotient) < (int)digit)))) {\n        returnValue = -1;\n      }\n      else {\n        result = result * base + digit;\n        returnValue = 1;\n      }\n    }\n    ch = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (returnValue == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = INT_MAX;\n    if (output == (byte **)0x0) {\n      return INT_MAX;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (returnValue == 0) goto LAB_00004f64;\n  }\n  input = nextChar + -1;\nLAB_00004f64:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "input",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "ch",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "returnValue",
                "uVar6": "INT_MAX",
                "uVar7": "maxQuotient",
                "pbVar8": "currentChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *calendarData;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int modifier;\n  uint *ptr;\n  int baseModifier;\n  uint isLeapYearModifier;\n  int loopCount;\n  int weekdayModifier;\n  uint isLeapYearFlag;\n  \n  calendarData = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    baseModifier = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    calendarData[1] = year;\n    isLeapYearFlag = (uint)(year % 400 == 0);\n    ptr = calendarData;\n    do {\n      dayOfWeek = ptr[5];\n      if (*(char *)(ptr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            modifier = 0;\n          }\n          else {\n            modifier = 1;\n          }\n        }\n        else {\n          modifier = 0;\n        }\n        modifier = modifier + baseModifier + dayOfWeek + -1;\n      }\n      else if (*(char *)(ptr + 2) == 'D') {\n        modifier = baseModifier + dayOfWeek;\n      }\n      else {\n        isLeapYearModifier = isLeapYearFlag;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYearModifier = 1;\n        }\n        loopCount = 0;\n        modifier = baseModifier;\n        while( true ) {\n          loopCount = loopCount + 1;\n          if ((int)ptr[3] <= loopCount) break;\n          modifier = modifier + *(int *)(&UNK_00007b98 + loopCount * 4 + isLeapYearModifier * 0x30);\n        }\n        weekdayModifier = dayOfWeek - (modifier + 4U) % 7;\n        if (weekdayModifier < 0) {\n          weekdayModifier = weekdayModifier + 7;\n        }\n        for (weekdayModifier = (ptr[4] - 1) * 7 + weekdayModifier;\n            *(int *)(&UNK_00007b98 + loopCount * 4 + isLeapYearModifier * 0x30) <= weekdayModifier; weekdayModifier = weekdayModifier + -7) {\n        }\n        modifier = modifier + weekdayModifier;\n      }\n      dayOfWeek = ptr[10] + modifier * 0x15180 + ptr[6];\n      ptr[8] = dayOfWeek;\n      ptr[9] = (int)dayOfWeek >> 0x1f;\n      ptr = ptr + 10;\n    } while (calendarData + 0x14 != ptr);\n    dayOfWeek = calendarData[9];\n    isLeapYearFlag = calendarData[0x13];\n    *calendarData = (uint)((int)((dayOfWeek - isLeapYearFlag) - (uint)(calendarData[8] < calendarData[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isLeapYearFlag) !=\n                    SBORROW4(dayOfWeek - isLeapYearFlag,(uint)(calendarData[8] < calendarData[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "calendarData",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "modifier",
                "puVar5": "ptr",
                "iVar6": "baseModifier",
                "uVar7": "isLeapYearModifier",
                "iVar8": "loopCount",
                "iVar9": "weekdayModifier",
                "uVar10": "isLeapYearFlag"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_starting_address_000050e8",
            "code": "\nundefined * get_starting_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_starting_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_pointer_000050f4",
            "code": "\nundefined * getMemoryPointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_configuration_00005100",
            "code": "\nvoid parseConfiguration_00005100(void)\n\n{\n  dword offset;\n  int functionResult;\n  char *configString;\n  int returnValue;\n  int configValue;\n  undefined dataType;\n  char *remainingString;\n  bool isFirst;\n  ushort *hour;\n  int *parseResult;\n  ushort *minute;\n  int *parseResult2;\n  ushort hourString;\n  ushort minuteString;\n  ushort secondString;\n  ushort hourValue;\n  ushort minuteValue;\n  ushort secondValue;\n  int parseLength;\n  char *tempStringArray [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  functionResult = FUN_000056b0();\n  configString = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (configString == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = configString;\n    DAT_1fff0ddc = configString;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (returnValue = FUN_00004e52(), returnValue != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    returnValue = FUN_00005ecc(configString);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,returnValue + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,configString);\n    }\n    if (*configString == ':') {\n      configString = configString + 1;\n    }\n    returnValue = FUN_00005e68(configString,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&parseLength);\n    if (0 < returnValue) {\n      remainingString = configString + parseLength;\n      if (configString[parseLength] == '-') {\n        remainingString = remainingString + 1;\n        returnValue = -1;\n      }\n      else {\n        if (configString[parseLength] == '+') {\n          remainingString = remainingString + 1;\n        }\n        returnValue = 1;\n      }\n      minuteString = 0;\n      secondString = 0;\n      hour = &minuteString;\n      parseResult = &parseLength;\n      minute = &secondString;\n      parseResult2 = &parseLength;\n      configValue = FUN_00005e68(remainingString,\"%hu%n:%hu%n:%hu%n\",&hourString,&parseLength,&minuteString,&parseLength,\n                           &secondString,&parseLength);\n      if (0 < configValue) {\n        *(uint *)(functionResult + 0x28) =\n             ((uint)hourString * 0xe10 + (uint)minuteString * 0x3c + (uint)secondString) * returnValue;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        remainingString = remainingString + parseLength;\n        returnValue = FUN_00005e68(remainingString,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&parseLength,hour,parseResult,minute,\n                             parseResult2);\n        if (returnValue < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(functionResult + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          configString = remainingString + parseLength;\n          if (remainingString[parseLength] == '-') {\n            configString = configString + 1;\n            returnValue = -1;\n          }\n          else {\n            if (remainingString[parseLength] == '+') {\n              configString = configString + 1;\n            }\n            returnValue = 1;\n          }\n          hourString = 0;\n          minuteString = 0;\n          secondString = 0;\n          parseLength = 0;\n          configValue = FUN_00005e68(configString,\"%hu%n:%hu%n:%hu%n\",&hourString,&parseLength,&minuteString,&parseLength,\n                               &secondString,&parseLength);\n          if (configValue < 1) {\n            returnValue = *(int *)(functionResult + 0x28) + -0xe10;\n          }\n          else {\n            returnValue = ((uint)hourString * 0xe10 + (uint)minuteString * 0x3c + (uint)secondString) * returnValue;\n          }\n          *(int *)(functionResult + 0x50) = returnValue;\n          configString = configString + parseLength;\n          isFirst = false;\n          returnValue = functionResult;\n          while( true ) {\n            if (*configString == ',') {\n              configString = configString + 1;\n            }\n            if (*configString == 'M') {\n              configValue = FUN_00005e68(configString,\"M%hu%n.%hu%n.%hu%n\",&hourValue,&parseLength,&minuteValue,\n                                   &parseLength,&secondValue,&parseLength);\n              if (configValue != 3) {\n                return;\n              }\n              if (0xb < hourValue - 1) {\n                return;\n              }\n              if (4 < minuteValue - 1) {\n                return;\n              }\n              if (6 < secondValue) {\n                return;\n              }\n              *(uint *)(returnValue + 0xc) = (uint)hourValue;\n              *(uint *)(returnValue + 0x10) = (uint)minuteValue;\n              *(undefined *)(returnValue + 8) = 0x4d;\n              *(uint *)(returnValue + 0x14) = (uint)secondValue;\n              remainingString = configString + parseLength;\n            }\n            else {\n              if (*configString == 'J') {\n                configString = configString + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              secondValue = FUN_00005fd8(configString,tempStringArray,10);\n              remainingString = tempStringArray[0];\n              if (tempStringArray[0] == configString) {\n                if (isFirst) {\n                  *(undefined *)(functionResult + 0x30) = 0x4d;\n                  *(undefined4 *)(functionResult + 0x34) = 0xb;\n                  *(undefined4 *)(functionResult + 0x38) = 1;\n                  *(undefined4 *)(functionResult + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(functionResult + 8) = 0x4d;\n                  *(undefined4 *)(functionResult + 0xc) = 3;\n                  *(undefined4 *)(functionResult + 0x10) = 2;\n                  *(undefined4 *)(functionResult + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(returnValue + 8) = dataType;\n                *(uint *)(returnValue + 0x14) = (uint)secondValue;\n              }\n            }\n            hourString = 2;\n            minuteString = 0;\n            secondString = 0;\n            parseLength = 0;\n            if (*remainingString == '/') {\n              FUN_00005e68(remainingString,&DAT_00007a85,&hourString,&parseLength,&minuteString,&parseLength,&secondString,\n                           &parseLength);\n            }\n            *(uint *)(returnValue + 0x18) =\n                 (uint)hourString * 0xe10 + (uint)minuteString * 0x3c + (uint)secondString;\n            returnValue = returnValue + 0x28;\n            configString = remainingString + parseLength;\n            if (isFirst) break;\n            isFirst = true;\n          }\n          FUN_00004f98(*(undefined4 *)(functionResult + 4));\n          DAT_1fff0ddc = *(char **)(functionResult + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(functionResult + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_configuration_00005100",
                "dVar1": "offset",
                "iVar2": "functionResult",
                "pcVar3": "configString",
                "iVar4": "returnValue",
                "iVar5": "configValue",
                "uVar6": "dataType",
                "pcVar7": "remainingString",
                "bVar8": "isFirst",
                "puVar9": "hour",
                "piVar10": "parseResult",
                "puVar11": "minute",
                "piVar12": "parseResult2",
                "local_3c": "hourString",
                "local_3a": "minuteString",
                "local_38": "secondString",
                "local_36": "hourValue",
                "local_34": "minuteValue",
                "local_32": "secondValue",
                "local_30": "parseLength",
                "local_2c": "tempStringArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int dataPointer,uint value,int *dataArray,undefined4 paramValue)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  undefined *tempVar3;\n  \n  if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataArray == &DAT_000079b8) {\n    dataArray = *(int **)(dataPointer + 4);\n  }\n  else if (dataArray == (int *)&DAT_000079d8) {\n    dataArray = *(int **)(dataPointer + 8);\n  }\n  else if (dataArray == (int *)&DAT_00007998) {\n    dataArray = *(int **)(dataPointer + 0xc);\n  }\n  dataArray[2] = dataArray[6];\n  tempVar2 = (uint)*(ushort *)(dataArray + 3);\n  tempVar1 = tempVar2 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar2 = dataArray[4], tempVar2 != 0)) ||\n     (tempVar1 = FUN_000054a8(dataPointer,dataArray,tempVar1,tempVar2,paramValue), tempVar1 == 0)) {\n    tempVar1 = *dataArray - dataArray[4];\n    value = value & 0xff;\n    if ((tempVar1 < dataArray[5]) || (tempVar1 = FUN_00004158(dataPointer,dataArray), tempVar1 == 0)) {\n      dataArray[2] = dataArray[2] + -1;\n      tempVar3 = (undefined *)*dataArray;\n      *dataArray = (int)(tempVar3 + 1);\n      *tempVar3 = (char)value;\n      if (dataArray[5] != tempVar1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      tempVar1 = FUN_00004158(dataPointer,dataArray);\n      if (tempVar1 == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "dataArray",
                "param_4": "paramValue",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "tempVar3"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_input_data_000054a8",
            "code": "\nuint processInputData_000054a8(undefined4 *outputResult,undefined4 *inputData)\n\n{\n  ushort temp1;\n  dword offset;\n  ushort temp2;\n  uint condition1;\n  uint condition2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputData == &DAT_000079b8) {\n    inputData = *(undefined4 **)(offset + 4);\n  }\n  else if (inputData == (undefined4 *)&DAT_000079d8) {\n    inputData = *(undefined4 **)(offset + 8);\n  }\n  else if (inputData == (undefined4 *)&DAT_00007998) {\n    inputData = *(undefined4 **)(offset + 0xc);\n  }\n  condition1 = (uint)*(ushort *)(inputData + 3);\n  temp2 = *(ushort *)(inputData + 3);\n  if (-1 < (int)(condition1 << 0x1c)) {\n    if (-1 < (int)(condition1 << 0x1b)) {\n      *outputResult = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(condition1 << 0x1d) < 0) {\n      if ((undefined4 *)inputData[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputData[0xd] != inputData + 0x11) {\n          FUN_00004b34(outputResult);\n        }\n        inputData[0xd] = 0;\n      }\n      *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xffdb;\n      inputData[1] = 0;\n      *inputData = inputData[4];\n    }\n    *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) | 8;\n  }\n  if ((inputData[4] == 0) && ((*(ushort *)(inputData + 3) & 0x280) != 0x200)) {\n    FUN_00005700(outputResult,inputData);\n  }\n  temp1 = *(ushort *)(inputData + 3);\n  condition1 = (uint)temp1;\n  temp2 = *(ushort *)(inputData + 3);\n  condition2 = condition1 & 1;\n  if ((temp1 & 1) == 0) {\n    if (-1 < (int)(condition1 << 0x1e)) {\n      condition2 = inputData[5];\n    }\n    inputData[2] = condition2;\n  }\n  else {\n    inputData[2] = 0;\n    inputData[6] = -inputData[5];\n  }\n  if (inputData[4] != 0) {\n    return 0;\n  }\n  if ((temp1 & 0x80) == 0) {\n    return condition1 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputData + 3) = temp2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_input_data_000054a8",
                "param_1": "outputResult",
                "param_2": "inputData",
                "uVar1": "temp1",
                "dVar2": "offset",
                "uVar3": "temp2",
                "uVar4": "condition1",
                "uVar5": "condition2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divide_and_remainder_00005584(uint *quotient_and_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_and_remainder = quotient;\n  quotient_and_remainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotient_and_remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "parse_key_value_pairs_0000562c",
            "code": "\nint parseKeyValuePairs_0000562c(undefined4 param1,char *inputString,int *resultIndex)\n\n{\n  char currentChar;\n  int *ptrRelOffset;\n  int returnValue;\n  char *currentPtr;\n  int *currentRelOffsetPtr;\n  int index;\n  \n  FUN_00005fec();\n  currentPtr = inputString;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currentPtr;\n      if (currentChar == '\\0') {\n        index = (int)currentPtr - (int)inputString;\n        ptrRelOffset = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          currentRelOffsetPtr = ptrRelOffset;\n          if (*currentRelOffsetPtr == 0) break;\n          returnValue = FUN_00004e66(*currentRelOffsetPtr,inputString,index);\n          ptrRelOffset = currentRelOffsetPtr + 1;\n          if ((returnValue == 0) && (returnValue = *currentRelOffsetPtr, *(char *)(returnValue + index) == '=')) {\n            *resultIndex = (int)((int)currentRelOffsetPtr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param1);\n            return returnValue + index + 1;\n          }\n        }\n        break;\n      }\n      currentPtr = currentPtr + 1;\n    } while (currentChar != '=');\n  }\n  FUN_00005ff8(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "parse_key_value_pairs_0000562c",
                "param_1": "param1",
                "param_2": "inputString",
                "param_3": "resultIndex",
                "cVar1": "currentChar",
                "piVar2": "ptrRelOffset",
                "iVar3": "returnValue",
                "pcVar4": "currentPtr",
                "piVar5": "currentRelOffsetPtr",
                "iVar6": "index"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "process_data_000056a0",
            "code": "\nvoid processData_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 processedInput2;\n  undefined4 processedInput3;\n  \n  processedInput2 = input2;\n  processedInput3 = input3;\n  FUN_0000562c(input1,input2,&processedInput2,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "processedInput2",
                "uStack_8": "processedInput3"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_maximum_value_000056b0",
            "code": "\nundefined4 getMaximumValue_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_maximum_value_000056b0"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_memory_access_000056b8",
            "code": "\nundefined4 checkMemoryAccess_000056b8(undefined4 param_1,int offset,undefined4 *result,uint *flag)\n\n{\n  int status;\n  undefined4 permission;\n  undefined temp [4];\n  uint value;\n  \n  if ((*(short *)(offset + 0xe) < 0) ||\n     (status = FUN_00000514(param_1,(int)*(short *)(offset + 0xe),temp), status < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(offset + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flag = (uint)((value & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_000056f8:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_memory_access_000056b8",
                "param_2": "offset",
                "param_3": "result",
                "param_4": "flag",
                "iVar1": "status",
                "uVar2": "permission",
                "auStack_68": "temp",
                "local_64": "value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int inputSize,int *data)\n\n{\n  ushort result;\n  int status;\n  int temp1;\n  int *temp2;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    temp1 = inputSize;\n    temp2 = data;\n    result = FUN_000056b8(inputSize,data,&temp1,&temp2);\n    status = FUN_00004bd0(inputSize,temp1);\n    if (status != 0) {\n      *(undefined **)(inputSize + 0x28) = &DAT_0000423d;\n      *data = status;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = temp1;\n      data[4] = status;\n      if ((temp2 != (int *)0x0) &&\n         (status = FUN_00000534(inputSize,(int)*(short *)((int)data + 0xe)), status != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "inputSize",
                "param_2": "data",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "temp1",
                "local_14": "temp2"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "process_elf_rel_00005780",
            "code": "\nvoid process_elf_rel_00005780(undefined4 param)\n\n{\n  FUN_00004b34(elf_rel_array[16].rel_offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "process_elf_rel_00005780",
                "param_1": "param",
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "r_offset": "rel_offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_array_000057a8",
            "code": "\nint updateArray_000057a8(undefined4 status,int value,undefined4 *array)\n\n{\n  int currentIndex;\n  undefined *currentElement;\n  \n  currentIndex = array[2] + -1;\n  array[2] = currentIndex;\n  if ((currentIndex < 0) && ((currentIndex < (int)array[6] || (value == 10)))) {\n    currentIndex = FUN_00005404();\n    return currentIndex;\n  }\n  currentElement = (undefined *)*array;\n  *array = currentElement + 1;\n  *currentElement = (char)value;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_array_000057a8",
                "param_1": "status",
                "param_2": "value",
                "param_3": "array",
                "iVar1": "currentIndex",
                "puVar2": "currentElement"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "iterate_and_call_function_000057d2",
            "code": "\nint iterateAndCallFunction_000057d2(undefined4 param1,undefined4 param2,undefined *array,int length)\n\n{\n  int result;\n  undefined *endPointer;\n  int currentIndex;\n  \n  endPointer = array + length;\n  currentIndex = length;\n  do {\n    if (array == endPointer) {\n      return 0;\n    }\n    result = FUN_000057a8(param1,*array,param2,length,currentIndex);\n    length = result + 1;\n    array = array + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "iterate_and_call_function_000057d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "array",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPointer",
                "iVar3": "currentIndex"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_string_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parseString_000057f8(int input,undefined4 *format,byte *str,int *parsed)\n\n{\n  int result;\n  int temp;\n  int *parsedValue;\n  bool foundDigit;\n  byte *currentChar;\n  int status;\n  byte *currentStringChar;\n  int *parsingData;\n  uint modifiers;\n  int precision;\n  undefined4 unused;\n  int argWidth;\n  int totalParsed;\n  byte specifier;\n  undefined flagSpace;\n  undefined flagPlus;\n  undefined flagPadZero;\n  undefined4 unused2;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (format == &DAT_000079b8) {\n    format = *(undefined4 **)(input + 4);\n  }\n  else if (format == (undefined4 *)&DAT_000079d8) {\n    format = *(undefined4 **)(input + 8);\n  }\n  else if (format == (undefined4 *)&DAT_00007998) {\n    format = *(undefined4 **)(input + 0xc);\n  }\n  if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n    FUNC_000045e8(format[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (result = FUN_000054a8(input,format), result != 0)) {\n    if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16)))\n    {\n      FUNC_000045ec(format[0x16]);\n    }\n    return -1;\n  }\n  totalParsed = 0;\n  flagSpace = 0x20;\n  flagPlus = 0x30;\n  currentStringChar = str;\n  parsingData = parsed;\nLAB_0000588e:\n  currentChar = currentStringChar;\n  if (*currentChar != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentStringChar = currentChar + 1;\n  if (*currentChar == 0x25) {\nLAB_0000589a:\n    result = (int)currentChar - (int)str;\n    if (result != 0) {\n      temp = FUN_000057d2(input,format,str,result);\n      if (temp == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(format[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n          FUNC_000045ec(format[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalParsed;\n      }\n      totalParsed = totalParsed + result;\n    }\n    if (*currentChar == 0) goto LAB_00005a06;\n    precision = -1;\n    unused = 0;\n    modifiers = 0;\n    argWidth = 0;\n    flagPadZero = 0;\n    unused2 = 0;\n    currentStringChar = currentChar + 1;\n    while( true ) {\n      currentChar = currentStringChar + 1;\n      result = FUN_00006010(\"#-0+ \",*currentStringChar,5);\n      if (result == 0) break;\n      modifiers = 1 << (result - 0x7bfcU & 0xff) | modifiers;\n      currentStringChar = currentChar;\n    }\n    if ((int)(modifiers << 0x1b) < 0) {\n      flagPadZero = 0x20;\n    }\n    if ((int)(modifiers << 0x1c) < 0) {\n      flagPadZero = 0x2b;\n    }\n    if (*currentStringChar == 0x2a) {\n      parsedValue = parsingData + 1;\n      argWidth = *parsingData;\n      parsingData = parsedValue;\n      if (argWidth < 0) {\n        argWidth = -argWidth;\n        modifiers = modifiers | 2;\n      }\n    }\n    else {\n      foundDigit = false;\n      result = argWidth;\n      currentChar = currentStringChar;\n      while( true ) {\n        if (9 < *currentChar - 0x30) break;\n        result = result * 10 + (*currentChar - 0x30);\n        foundDigit = true;\n        currentChar = currentChar + 1;\n      }\n      if (foundDigit) {\n        argWidth = result;\n      }\n    }\n    if (*currentChar == 0x2e) {\n      if (currentChar[1] == 0x2a) {\n        precision = *parsingData;\n        if (precision < 0) {\n          precision = -1;\n        }\n        currentChar = currentChar + 2;\n        parsingData = parsingData + 1;\n      }\n      else {\n        foundDigit = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          currentChar = currentChar + 1;\n          if (9 < *currentChar - 0x30) break;\n          result = result * 10 + (*currentChar - 0x30);\n          foundDigit = true;\n        }\n        if (foundDigit) {\n          precision = result;\n        }\n      }\n    }\n    result = FUN_00006010(&DAT_00007c02,*currentChar,3);\n    if (result != 0) {\n      modifiers = modifiers | 0x40 << (result - 0x7c02U & 0xff);\n      currentChar = currentChar + 1;\n    }\n    str = currentChar + 1;\n    specifier = *currentChar;\n    result = FUN_00006010(\"efgEFG\",specifier,6);\n    if (result == 0) {\n      status = FUN_00005b34(input,&modifiers,format,0x57d3,&parsingData);\n      if (status == -1) goto LAB_00005a06;\n    }\n    else {\n      parsingData = (int *)(((int)parsingData + 7U & 0xfffffff8) + 8);\n    }\n    totalParsed = totalParsed + status;\n    currentStringChar = str;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_string_000057f8",
                "param_1": "input",
                "param_2": "format",
                "param_3": "str",
                "param_4": "parsed",
                "iVar1": "result",
                "iVar2": "temp",
                "piVar3": "parsedValue",
                "bVar4": "foundDigit",
                "pbVar5": "currentChar",
                "unaff_r7": "status",
                "pbVar6": "currentStringChar",
                "local_8c": "parsingData",
                "local_88": "modifiers",
                "local_84": "precision",
                "uStack_80": "unused",
                "local_7c": "argWidth",
                "local_74": "totalParsed",
                "local_70": "specifier",
                "local_6f": "flagSpace",
                "local_6e": "flagPlus",
                "local_45": "flagPadZero",
                "local_30": "unused2"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_adjusted_size_00005a58",
            "code": "\nundefined4\ncalculateAdjustedSize_00005a58(undefined4 input,uint *array,uint *output,undefined4 param,code *callback)\n\n{\n  int i;\n  undefined4 result;\n  int tempVar;\n  uint maxSize;\n  uint index;\n  bool isConditionMet;\n  \n  maxSize = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxSize = array[2];\n  }\n  *output = maxSize;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *output = maxSize + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (i = 0; i < (int)(array[3] - *output); i = i + 1) {\n      tempVar = (*callback)(input,param,(int)array + 0x19,1);\n      if (tempVar == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)array + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)array + maxSize + 0x44) = *(undefined *)((int)array + 0x45);\n    maxSize = maxSize + 2;\n  }\n  i = (*callback)(input,param,(int)array + 0x43,maxSize);\n  if (i == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    maxSize = array[3];\n    isConditionMet = (*array & 6) == 4;\n    if (isConditionMet) {\n      maxSize = maxSize - *output;\n    }\n    if (isConditionMet) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxSize = maxSize + (array[2] - array[4]);\n    }\n    for (index = 0; maxSize != index; index = index + 1) {\n      i = (*callback)(input,param,(int)array + 0x1a,1);\n      if (i == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_adjusted_size_00005a58",
                "param_1": "input",
                "param_2": "array",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "result",
                "iVar3": "tempVar",
                "uVar4": "maxSize",
                "uVar5": "index",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_number_00005b34",
            "code": "\ncode * formatNumber_00005b34(undefined4 value,uint *format,undefined4 length,code *outputFunction,uint **input\n                   )\n\n{\n  bool isGreaterThan;\n  byte formatByte;\n  int result;\n  code *returnValue;\n  char *numerals;\n  int status;\n  char *currentFormatByte;\n  uint currentValue;\n  uint *inputPointer;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint formatLength;\n  char *outputPointer;\n  code *defaultOutputFunction;\n  \n  formatByte = *(byte *)(format + 6);\n  currentFormatByte = (char *)((int)format + 0x43);\n  defaultOutputFunction = outputFunction;\n  if (0x78 < formatByte) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)format + 0x42) = formatByte;\nLAB_00005bdc:\n    currentFormatByte = (char *)((int)format + 0x42);\n    currentValue = 1;\nLAB_00005d28:\n    format[4] = currentValue;\n    *(undefined *)((int)format + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (formatByte < 99) {\n    if (formatByte == 0) goto LAB_00005d06;\n    if (formatByte == 0x58) {\n      numerals = \"0123456789ABCDEF\";\n      *(undefined *)((int)format + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(formatByte) {\n  case 99:\n    currentValue = **input;\n    *input = *input + 1;\n    *(char *)((int)format + 0x42) = (char)currentValue;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *format;\n    inputPointer = *input;\n    if ((int)(base << 0x18) < 0) {\n      currentValue = *inputPointer;\n      *input = inputPointer + 1;\n    }\n    else {\n      currentValue = *inputPointer;\n      *input = inputPointer + 1;\n      if ((base & 0x40) != 0) {\n        currentValue = (uint)(short)currentValue;\n      }\n    }\n    if ((int)currentValue < 0) {\n      currentValue = -currentValue;\n      *(undefined *)((int)format + 0x43) = 0x2d;\n    }\n    numerals = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*input;\n    base = *format;\n    currentValue = format[5];\n    *input = (uint *)(ppuVar11 + 1);\n    inputPointer = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *inputPointer = currentValue;\n    }\n    else {\n      *(short *)inputPointer = (short)currentValue;\n    }\nLAB_00005d06:\n    format[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    inputPointer = *input;\n    currentValue = *format;\n    *input = inputPointer + 1;\n    if (((int)(currentValue << 0x18) < 0) || (-1 < (int)(currentValue << 0x19))) {\n      currentValue = *inputPointer;\n    }\n    else {\n      currentValue = (uint)*(ushort *)inputPointer;\n    }\n    numerals = \"0123456789ABCDEF\";\n    if (formatByte == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *format = *format | 0x20;\n  case 0x78:\n    numerals = \"0123456789abcdef\";\n    *(undefined *)((int)format + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *format;\n    currentValue = **input;\n    *input = *input + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      currentValue = currentValue & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *format = base | 0x20;\n    }\n    if (currentValue == 0) {\n      *format = *format & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*input;\n    *input = (uint *)(ppcVar12 + 1);\n    currentFormatByte = *ppcVar12;\n    result = FUN_00006010(currentFormatByte,0,format[1],ppcVar12,value,format,length);\n    if (result != 0) {\n      format[1] = result - (int)currentFormatByte;\n    }\n    currentValue = format[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)format + 0x43) = 0;\nLAB_00005c36:\n  formatLength = format[1];\n  format[2] = formatLength;\n  if (-1 < (int)formatLength) {\n    *format = *format & 0xfffffffb;\n  }\n  outputPointer = currentFormatByte;\n  if ((currentValue != 0) || (formatLength != 0)) {\n    do {\n      outputPointer = outputPointer + -1;\n      *outputPointer = numerals[currentValue - base * (currentValue / base)];\n      isGreaterThan = base <= currentValue;\n      currentValue = currentValue / base;\n    } while (isGreaterThan);\n  }\n  if (((base == 8) && ((int)(*format << 0x1f) < 0)) && ((int)format[1] <= (int)format[4])) {\n    outputPointer[-1] = '0';\n    outputPointer = outputPointer + -1;\n  }\n  format[4] = (int)currentFormatByte - (int)outputPointer;\n  currentFormatByte = outputPointer;\nLAB_00005c84:\n  result = FUN_00005a58(value,format,&defaultOutputFunction,length,outputFunction);\n  if ((result == -1) || (result = (*outputFunction)(value,length,currentFormatByte,format[4]), result == -1)) {\nLAB_00005c98:\n    returnValue = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*format << 0x1e) < 0) {\n      for (result = 0; result < (int)(format[3] - (int)defaultOutputFunction); result = result + 1) {\n        status = (*outputFunction)(value,length,(int)format + 0x19,1);\n        if (status == -1) goto LAB_00005c98;\n      }\n    }\n    returnValue = (code *)format[3];\n    if ((int)(code *)format[3] < (int)defaultOutputFunction) {\n      returnValue = defaultOutputFunction;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_number_00005b34",
                "param_1": "value",
                "param_2": "format",
                "param_3": "length",
                "param_4": "outputFunction",
                "param_5": "input",
                "bVar1": "isGreaterThan",
                "bVar2": "formatByte",
                "iVar3": "result",
                "pcVar4": "returnValue",
                "pcVar5": "numerals",
                "iVar6": "status",
                "pcVar7": "currentFormatByte",
                "uVar8": "currentValue",
                "puVar9": "inputPointer",
                "uVar10": "base",
                "uVar13": "formatLength",
                "pcVar14": "outputPointer",
                "local_24": "defaultOutputFunction"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "decode_and_decrement_00005e10",
            "code": "\nuint decode_and_decrement_00005e10(int input_data,byte **output_ptr)\n\n{\n  int result;\n  uint decoded_value;\n  byte *current_byte;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (output_ptr == (byte **)&DAT_000079b8) {\n    output_ptr = *(byte ***)(input_data + 4);\n  }\n  else if (output_ptr == (byte **)&DAT_000079d8) {\n    output_ptr = *(byte ***)(input_data + 8);\n  }\n  else if (output_ptr == (byte **)&DAT_00007998) {\n    output_ptr = *(byte ***)(input_data + 0xc);\n  }\n  result = FUN_00006768(input_data,output_ptr);\n  if (result == 0) {\n    output_ptr[1] = output_ptr[1] + -1;\n    current_byte = *output_ptr;\n    *output_ptr = current_byte + 1;\n    decoded_value = (uint)*current_byte;\n  }\n  else {\n    decoded_value = 0xffffffff;\n  }\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "decode_and_decrement_00005e10",
                "param_1": "input_data",
                "param_2": "output_ptr",
                "iVar1": "result",
                "uVar2": "decoded_value",
                "pbVar3": "current_byte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "decompiled_function_00005e68",
            "code": "\nvoid decompiledFunction_00005e68(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 var1;\n  undefined4 var2;\n  undefined2 var3;\n  undefined2 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined *var7;\n  undefined4 var8;\n  undefined4 var9;\n  undefined4 var10;\n  undefined4 var11;\n  \n  var3 = 0x204;\n  var1 = input1;\n  var5 = input1;\n  var10 = input3;\n  var11 = input4;\n  var2 = FUN_00005ecc();\n  var7 = &LAB_00004dea_1;\n  var8 = 0;\n  var9 = 0;\n  var4 = 0xffff;\n  var6 = var2;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&var1,input2,&var10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "decompiled_function_00005e68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_80": "var1",
                "local_7c": "var2",
                "local_74": "var3",
                "local_72": "var4",
                "local_70": "var5",
                "local_6c": "var6",
                "local_5c": "var7",
                "local_4c": "var8",
                "local_38": "var9",
                "uStack_8": "var10",
                "uStack_4": "var11"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_strings_00005ebc",
            "code": "\nvoid copyStrings_00005ebc(char *dest,char *src)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *src;\n    *dest = currentChar;\n    src = src + 1;\n    dest = dest + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_strings_00005ebc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *result,byte *input,byte **endPtr,uint base)\n\n{\n  uint parsedNumber;\n  uint ch;\n  byte negative;\n  int status;\n  uint digit;\n  uint maxDigit;\n  byte *currPtr;\n  byte *nextPtr;\n  \n  nextPtr = input;\n  do {\n    currPtr = nextPtr;\n    nextPtr = currPtr + 1;\n    ch = (uint)*currPtr;\n    negative = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextPtr;\n    negative = 1;\n    nextPtr = currPtr + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextPtr;\n    nextPtr = currPtr + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    ch = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxDigit = 0xffffffff / base;\n  parsedNumber = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((status < 0) || (maxDigit < parsedNumber)) ||\n       ((maxDigit == parsedNumber && ((int)~(base * maxDigit) < (int)digit)))) {\n      status = -1;\n    }\n    else {\n      parsedNumber = parsedNumber * base + digit;\n      status = 1;\n    }\n    ch = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsedNumber = 0xffffffff;\n    if (endPtr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      parsedNumber = -parsedNumber;\n    }\n    if (endPtr == (byte **)0x0) {\n      return parsedNumber;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = nextPtr + -1;\nLAB_00005fb8:\n  *endPtr = input;\n  return parsedNumber;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "endPtr",
                "param_4": "base",
                "uVar1": "parsedNumber",
                "uVar2": "ch",
                "bVar3": "negative",
                "iVar4": "status",
                "uVar5": "digit",
                "uVar6": "maxDigit",
                "pbVar7": "currPtr",
                "pbVar8": "nextPtr"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "execute_relocation_00005fd8",
            "code": "\nvoid executeRelocation_00005fd8(undefined4 relocationOffset,undefined4 param1,undefined4 param2)\n\n{\n  FUN_00005edc(relocationTable[16].r_offset,relocationOffset,param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "execute_relocation_00005fd8",
                "param_1": "relocationOffset",
                "param_2": "param1",
                "param_3": "param2",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_data_00005fec",
            "code": "\nvoid initializeData_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_data_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_configurations_00005ff8",
            "code": "\nvoid initializeConfigurations_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_configurations_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint byte_to_find,uint length)\n\n{\n  byte current_byte;\n  char nonzero_byte_1;\n  char nonzero_byte_2;\n  char nonzero_byte_3;\n  char nonzero_byte_4;\n  byte *current_address;\n  uint *next_address;\n  byte *result;\n  uint alignment;\n  uint length_aligned;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool byte_check_1;\n  bool byte_check_2;\n  bool byte_check_3;\n  bool byte_check_4;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      next_address = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = next_address;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    alignment = (uint)data & 7;\n    while( true ) {\n      if (alignment == 0) {\n        alignment = byte_to_find | byte_to_find << 8;\n        alignment = alignment | alignment << 0x10;\n        length_aligned = length & 0xfffffff8;\n        do {\n          next_address = data + 2;\n          length_aligned = length_aligned - 8;\n          xor_result_1 = *data ^ alignment;\n          xor_result_2 = data[1] ^ alignment;\n          nonzero_byte_1 = -((char)xor_result_1 == '\\0');\n          nonzero_byte_2 = -((char)(xor_result_1 >> 8) == '\\0');\n          nonzero_byte_3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          nonzero_byte_4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(nonzero_byte_4,CONCAT12(nonzero_byte_3,CONCAT11(nonzero_byte_2,nonzero_byte_1)));\n          byte_check_1 = (char)xor_result_2 != '\\0';\n          byte_check_2 = (char)(xor_result_2 >> 8) != '\\0';\n          byte_check_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          byte_check_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(byte_check_4 * nonzero_byte_4 - !byte_check_4,\n                            CONCAT12(byte_check_3 * nonzero_byte_3 - !byte_check_3,\n                                     CONCAT11(byte_check_2 * nonzero_byte_2 - !byte_check_2,byte_check_1 * nonzero_byte_1 - !byte_check_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              byte_check_1 = (xor_result_1 & 0x100) == 0;\n              current_address = result + 1;\n              if (byte_check_1) {\n                byte_check_1 = (xor_result_1 & 0x18000) == 0;\n                current_address = result + 2;\n              }\n              result = current_address;\n              if (byte_check_1) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = next_address;\n        } while (length_aligned != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      next_address = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == byte_to_find) break;\n      alignment = (uint)next_address & 7;\n      data = next_address;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)next_address + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "nonzero_byte_1",
                "cVar3": "nonzero_byte_2",
                "cVar4": "nonzero_byte_3",
                "cVar5": "nonzero_byte_4",
                "pbVar6": "current_address",
                "puVar7": "next_address",
                "pbVar8": "result",
                "uVar9": "alignment",
                "uVar10": "length_aligned",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "byte_check_1",
                "bVar14": "byte_check_2",
                "bVar15": "byte_check_3",
                "bVar16": "byte_check_4"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int destAddr,undefined *srcAddr,int size)\n\n{\n  undefined *srcPtr;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = srcAddr + size;\n  destPtr = (undefined *)(destAddr + -1);\n  if (srcAddr != endPtr) {\n    do {\n      srcPtr = srcAddr + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *srcAddr;\n      srcAddr = srcPtr;\n    } while (srcPtr != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destAddr",
                "param_2": "srcAddr",
                "param_3": "size",
                "puVar1": "srcPtr",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "perform_operation_000060cc",
            "code": "\nint performOperation_000060cc(undefined4 arg1,int arg2,uint arg3,undefined4 arg4)\n\n{\n  int result;\n  uint tempVal;\n  \n  if (arg2 != 0) {\n    if (arg3 == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      tempVal = FUN_00006964();\n      result = arg2;\n      if ((tempVal < arg3) && (result = FUN_00004bd0(arg1,arg3), result != 0)) {\n        FUN_000060b0(result,arg2,arg3);\n        FUN_00004b34(arg1,arg2);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(arg1,arg3,arg3,arg4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "perform_operation_000060cc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "uVar2": "tempVal"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "process_data_00006192",
            "code": "\nundefined4 processData_00006192(undefined4 inputData,undefined4 *outputData)\n\n{\n  if ((undefined4 *)flag != (undefined4 *)0x0) {\n    if ((undefined4 *)flag != outputData + 0x11) {\n      FUN_00004b34();\n    }\n    result = value;\n    flag = 0;\n    if (value != 0) {\n      *outputData = value;\n      return 0;\n    }\n  }\n  *outputData = defaultValue;\n  result = 0;\n  *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_2[0xd]": "flag",
                "param_2[0x10]": "value",
                "param_2[1]": "result",
                "param_2[0xf]": "value",
                "param_2[4]": "defaultValue"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parse_data_000061cc(undefined4 input_param,byte **input_array,byte *data_array,int **output_array)\n\n{\n  int result;\n  uint temp_var;\n  byte *ptr;\n  uint array_element;\n  int **local_output_array;\n  undefined local_stack_array [256];\n  uint flag1;\n  undefined4 flag2;\n  uint temp_flag;\n  int output;\n  int counter;\n  undefined *local_stack;\n  int case;\n  undefined *local_function1;\n  code *local_function2;\n  \n  output = 0;\n  counter = 0;\n  local_function1 = &label1;\n  local_function2 = FUN_00006192 + 1;\n  local_output_array = output_array;\n  local_stack = local_stack_array;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      array_element = (uint)*data_array;\n      if (array_element == 0) {\n        return output;\n      }\n      temp_var = (byte)(&DAT_00007a99)[array_element] & 8;\n      ptr = data_array + 1;\n      if (((&DAT_00007a99)[array_element] & 8) == 0) break;\n      while (((data_array = ptr, 0 < (int)input_array[1] ||\n              (result = (*local_function2)(input_param,input_array), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**input_array] << 0x1c) < 0))) {\n        counter = counter + 1;\n        input_array[1] = input_array[1] + -1;\n        *input_array = *input_array + 1;\n      }\n    }\n    if (array_element == 0x25) break;\nLAB_00006352:\n    if (((int)input_array[1] < 1) && (result = (*local_function2)(input_param,input_array), result != 0))\n    goto LAB_00006380;\n    if (**input_array != array_element) {\n      return output;\n    }\n    *input_array = *input_array + 1;\n    counter = counter + 1;\n    input_array[1] = input_array[1] + -1;\n    data_array = ptr;\n  }\n  temp_flag = temp_var;\n  flag1 = temp_var;\n  if (data_array[1] == 0x2a) {\n    ptr = data_array + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    temp_var = (uint)*ptr;\n    if (9 < temp_var - 0x30) break;\n    ptr = ptr + 1;\n    temp_flag = (temp_flag * 10 + temp_var) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,temp_var,3);\n  if (result != 0) {\n    flag1 = 1 << (result - 0x7c02U & 0xff) | flag1;\n    ptr = ptr + 1;\n  }\n  data_array = ptr + 1;\n  temp_var = (uint)*ptr;\n  if (temp_var < 0x79) {\n    if (0x57 < temp_var) {\n      switch(temp_var) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        data_array = (byte *)FUN_0000687c(local_stack_array,data_array);\n        flag1 = flag1 | 0x40;\n        case = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        case = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (temp_var < 0x6f) {\n          case = 3;\n        }\n        else {\n          case = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        case = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        case = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*local_output_array = (short)counter;\n            local_output_array = local_output_array + 1;\n          }\n          else {\n            **local_output_array = counter;\n            local_output_array = local_output_array + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        case = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        case = 2;\n      }\nLAB_000063ac:\n      if (((int)input_array[1] < 1) && (result = (*local_function2)(input_param,input_array), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**input_array] << 0x1c) < 0) {\n          counter = counter + 1;\n          ptr = input_array[1];\n          input_array[1] = ptr + -1;\n          if ((int)(ptr + -1) < 1) {\n            result = (*local_function2)(input_param,input_array);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *input_array = *input_array + 1;\n          }\n        }\n      }\n      if (case < 3) {\n        result = FUN_000064bc(input_param,&flag1,input_array,&local_output_array);\n      }\n      else {\n        if (4 < case) goto LAB_000061f6;\n        result = FUN_0000656c(input_param,&flag1,input_array,&local_output_array);\n      }\n      if (result == 1) {\n        return output;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (output == 0) {\nLAB_00006388:\n          output = -1;\n        }\n        else if ((*(ushort *)(input_array + 3) & 0x40) != 0) {\n          output = -1;\n        }\n        return output;\n      }\n      goto LAB_000061f6;\n    }\n    ptr = data_array;\n    if (temp_var == 0x25) goto LAB_00006352;\n    if (temp_var < 0x26) {\n      if (temp_var != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (temp_var - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  case = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_data_000061cc",
                "param_1": "input_param",
                "param_2": "input_array",
                "param_3": "data_array",
                "param_4": "output_array",
                "iVar1": "result",
                "uVar2": "temp_var",
                "pbVar3": "ptr",
                "uVar4": "array_element",
                "local_2b0": "local_output_array",
                "auStack_2ac": "local_stack_array",
                "local_1ac": "flag1",
                "local_1a8": "flag2",
                "local_1a4": "temp_flag",
                "local_1a0": "output",
                "local_19c": "counter",
                "local_198": "local_stack",
                "local_194": "case",
                "local_30": "local_function1",
                "local_2c": "local_function2",
                "LAB_00006118_1": "label1"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 processData_000064bc(undefined4 input,uint *params,byte **data,undefined4 *output)\n\n{\n  int result;\n  uint tempVar;\n  byte **dataPtr;\n  byte *dataBytePtr;\n  byte *tempPtr;\n  byte *tempBytePtr;\n  int counter;\n  \n  if (params[2] == 0) {\n    if (params[6] == 0) {\n      tempVar = 1;\n    }\n    else {\n      tempVar = 0xffffffff;\n    }\n    params[2] = tempVar;\n  }\n  if (-1 < (int)(*params << 0x1b)) {\n    dataPtr = (byte **)*output;\n    *output = dataPtr + 1;\n    tempPtr = *dataPtr;\n  }\n  counter = 0;\n  do {\n    tempVar = params[6];\n    if (tempVar != 0) {\n      if (tempVar == 1) {\n        if (*(char *)(params[5] + (uint)**data) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params & 0x10) == 0) && (params[3] = params[3] + 1, params[6] != 0)) {\n            *tempPtr = 0;\n          }\n          params[4] = counter + params[4];\n          return 0;\n        }\n      }\n      else if ((tempVar != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    tempBytePtr = tempPtr;\n    if (-1 < (int)(*params << 0x1b)) {\n      tempBytePtr = tempPtr + 1;\n      *tempPtr = **data;\n    }\n    dataBytePtr = data[1];\n    *data = *data + 1;\n    tempVar = params[2] - 1;\n    data[1] = dataBytePtr + -1;\n    counter = counter + 1;\n    params[2] = tempVar;\n    tempPtr = tempBytePtr;\n    if ((tempVar == 0) ||\n       (((int)(dataBytePtr + -1) < 1 &&\n        (result = (*(code *)params[0x60])(input,data,tempVar,(code *)params[0x60],output),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "params",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "tempVar",
                "ppbVar3": "dataPtr",
                "pbVar4": "dataBytePtr",
                "unaff_r6": "tempPtr",
                "pbVar5": "tempBytePtr",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *result)\n\n{\n  int funcResult;\n  undefined4 tempResult;\n  code *checkFunction;\n  uint tempValue;\n  byte *tempByte;\n  uint tempCount;\n  undefined4 *tempPtr;\n  uint *tempPtr2;\n  uint *tempPtr3;\n  uint *tempPtr4;\n  int tempIndex;\n  int tempIndex2;\n  undefined *strArray [4];\n  \n  strArray[0] = &DAT_00007c2f;\n  strArray[1] = &DAT_00007c32;\n  strArray[2] = &DAT_00007c35;\n  checkFunction = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    checkFunction = (code *)&UNK_00005fd5;\n  }\n  tempCount = flags[2];\n  tempValue = tempCount - 1;\n  if (0x15c < tempValue) {\n    tempIndex = tempCount - 0x15d;\n    tempCount = 0x15d;\n  }\n  if (0x15c < tempValue) {\n    flags[2] = tempCount;\n  }\n  tempPtr4 = flags + 7;\n  if (tempValue < 0x15d) {\n    tempIndex = 0;\n  }\n  *flags = *flags | 0xd00;\n  tempIndex2 = 0;\n  tempPtr3 = tempPtr4;\n  do {\n    funcResult = FUN_00006010(strArray[tempIndex2],**data,2);\n    if (funcResult != 0) {\n      if (tempIndex2 == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        tempValue = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = tempValue;\n      }\n      else if (tempIndex2 == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        tempValue = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      tempValue = flags[2];\n      flags[2] = tempValue - 1;\n      if (tempValue != 0) {\n        tempByte = *data;\n        *data = tempByte + 1;\n        tempPtr2 = (uint *)((int)tempPtr3 + 1);\n        *(byte *)tempPtr3 = *tempByte;\n        tempByte = data[1];\n        data[1] = tempByte + -1;\n        tempPtr3 = tempPtr2;\n        if (((int)(tempByte + -1) < 1) &&\n           (funcResult = (*(code *)flags[0x60])(input,data), funcResult != 0)) {\n          tempIndex2 = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    tempIndex2 = tempIndex2 + 1;\n  } while (tempIndex2 != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  FUN_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  tempIndex2 = 0;\n  while( true ) {\n    tempPtr2 = tempPtr3;\n    if (flags[2] == 0) break;\n    tempByte = *data;\n    tempValue = (uint)*tempByte;\n    if (*(char *)(flags[5] + tempValue) == '\\0') break;\n    if ((tempValue == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      tempIndex2 = tempIndex2 + 1;\n      if (tempIndex != 0) {\n        tempIndex = tempIndex + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      tempPtr2 = (uint *)((int)tempPtr3 + 1);\n      *(byte *)tempPtr3 = *tempByte;\n    }\n    tempByte = data[1];\n    data[1] = tempByte + -1;\n    if ((int)(tempByte + -1) < 1) {\n      funcResult = (*(code *)flags[0x60])(input,data);\n      if (funcResult != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    tempPtr3 = tempPtr2;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (tempPtr4 < tempPtr2) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)tempPtr2 + -1),data);\n      tempPtr2 = (uint *)((int)tempPtr2 + -1);\n    }\n    if (tempPtr2 == tempPtr4) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)tempPtr2 = 0;\n    tempResult = (*checkFunction)(input,tempPtr4,0,flags[1]);\n    tempPtr = (undefined4 *)*result;\n    tempValue = *flags;\n    *result = tempPtr + 1;\n    tempPtr = (undefined4 *)*tempPtr;\n    if ((tempValue & 0x20) == 0) {\n      if ((int)(tempValue << 0x1f) < 0) {\n        *(short *)tempPtr = (short)tempResult;\n      }\n      else {\n        *tempPtr = tempResult;\n      }\n    }\n    else {\n      *tempPtr = tempResult;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)tempPtr2 + flags[4] + (tempIndex2 - (int)tempPtr4));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "funcResult",
                "uVar2": "tempResult",
                "pcVar3": "checkFunction",
                "uVar4": "tempValue",
                "pbVar5": "tempByte",
                "uVar6": "tempCount",
                "puVar7": "tempPtr",
                "puVar8": "tempPtr2",
                "puVar9": "tempPtr3",
                "puVar10": "tempPtr4",
                "unaff_r9": "tempIndex",
                "iVar11": "tempIndex2",
                "local_34": "strArray"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputArray,undefined4 *outputArray,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  ushort tempVar4;\n  uint tempVar5;\n  \n  if ((inputArray != (undefined4 *)0x0) && (inputArray[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (outputArray == &DAT_000079b8) {\n    outputArray = (undefined4 *)inputArray[1];\n  }\n  else if (outputArray == (undefined4 *)&DAT_000079d8) {\n    outputArray = (undefined4 *)inputArray[2];\n  }\n  else if (outputArray == (undefined4 *)&DAT_00007998) {\n    outputArray = (undefined4 *)inputArray[3];\n  }\n  tempVar4 = *(ushort *)(outputArray + 3);\n  outputArray[1] = 0;\n  tempVar5 = (uint)*(ushort *)(outputArray + 3);\n  if ((int)(tempVar5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(tempVar5 << 0x1d) < 0) {\n    if ((undefined4 *)outputArray[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)outputArray[0xd] != outputArray + 0x11) {\n        FUN_00004b34(inputArray);\n      }\n      outputArray[1] = outputArray[0x10];\n      outputArray[0xd] = 0;\n      if (outputArray[0x10] != 0) {\n        *outputArray = outputArray[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(tempVar5 << 0x1b)) {\n      *inputArray = 9;\n      tempVar4 = tempVar4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(tempVar5 << 0x1c) < 0) {\n      tempVar2 = FUN_00004158(inputArray,outputArray,tempVar5 << 0x1c,tempVar5,value2);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      outputArray[2] = 0;\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfff7;\n      outputArray[6] = 0;\n    }\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 4;\n  }\n  if (outputArray[4] == 0) {\n    FUN_00005700(inputArray,outputArray);\n  }\n  tempVar4 = *(ushort *)(outputArray + 3);\n  tempVar1 = *(undefined2 *)(outputArray + 3);\n  if ((tempVar4 & 3) != 0) {\n    *(undefined2 *)(outputArray + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(outputArray + 3) = tempVar1;\n    if ((tempVar4 & 9) == 9) {\n      FUN_0000404c(inputArray,outputArray);\n    }\n  }\n  tempVar3 = outputArray[4];\n  *outputArray = tempVar3;\n  tempVar2 = (*(code *)outputArray[9])(inputArray,outputArray[8],tempVar3,outputArray[5]);\n  outputArray[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  tempVar4 = *(ushort *)(outputArray + 3);\n  if (tempVar2 != 0) {\n    tempVar3 = 0;\n  }\n  else {\n    tempVar4 = tempVar4 | 0x20;\n  }\n  if (tempVar2 != 0) {\n    outputArray[1] = tempVar3;\n    tempVar4 = tempVar4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(outputArray + 3) = tempVar4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_data_0000687c",
            "code": "\nbyte * extract_data_0000687c(int data_size,byte *data_buffer)\n\n{\n  byte *result;\n  uint temp;\n  int i;\n  uint value;\n  uint index;\n  uint end_index;\n  bool is_condition_met;\n  \n  value = (uint)*data_buffer;\n  is_condition_met = value == 0x5e;\n  if (is_condition_met) {\n    value = (uint)data_buffer[1];\n    data_buffer = data_buffer + 2;\n  }\n  else {\n    data_buffer = data_buffer + 1;\n  }\n  i = data_size + -1;\n  do {\n    i = i + 1;\n    *(bool *)i = is_condition_met;\n  } while (i != data_size + 0xff);\n  if (value == 0) {\n    result = data_buffer + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      index = value;\n      *(bool *)(data_size + index) = !is_condition_met;\n      data_buffer = data_buffer + 1;\n      while( true ) {\n        value = (uint)data_buffer[-1];\n        if (value != 0x2d) break;\n        end_index = (uint)*data_buffer;\n        if ((end_index == 0x5d) || (temp = index, (int)end_index < (int)index)) goto LAB_000068aa;\n        do {\n          temp = temp + 1;\n          *(bool *)(data_size + temp) = !is_condition_met;\n        } while ((int)temp < (int)end_index);\n        i = ~index + end_index;\n        if ((int)end_index <= (int)index) {\n          i = 0;\n        }\n        index = index + 1 + i;\n        data_buffer = data_buffer + 2;\n      }\n      result = data_buffer;\n    } while ((value != 0x5d) && (result = data_buffer + -1, value != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_data_0000687c",
                "param_1": "data_size",
                "param_2": "data_buffer",
                "pbVar1": "result",
                "uVar2": "temp",
                "iVar3": "i",
                "uVar4": "value",
                "uVar5": "index",
                "uVar6": "end_index",
                "bVar7": "is_condition_met"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "update_data_array_000068f0",
            "code": "\nundefined4 updateDataArray_000068f0(undefined4 input,int *dataArray)\n\n{\n  int newPtr;\n  int size;\n  \n  if ((int *)dataArray[0xd] == dataArray + 0x11) {\n    newPtr = FUN_00004bd0(input,0x400);\n    if (newPtr != 0) {\n      dataArray[0xe] = 0x400;\n      dataArray[0xd] = newPtr;\n      *(undefined *)(newPtr + 0x3ff) = *(undefined *)((int)dataArray + 0x46);\n      *(undefined *)(newPtr + 0x3fe) = *(undefined *)((int)dataArray + 0x45);\n      *(undefined *)(newPtr + 0x3fd) = *(undefined *)(dataArray + 0x11);\n      *dataArray = newPtr + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    size = dataArray[0xe];\n    newPtr = FUN_000060cc(input,(int *)dataArray[0xd],size << 1);\n    if (newPtr != 0) {\n      FUN_000060b0(newPtr + size,newPtr,size);\n      dataArray[0xd] = newPtr;\n      dataArray[0xe] = size << 1;\n      *dataArray = newPtr + size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "update_data_array_000068f0",
                "param_1": "input",
                "param_2": "dataArray",
                "iVar1": "newPtr",
                "iVar2": "size"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 returnValue,int array)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(array + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "returnValue",
                "param_2": "array",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "limit_range_00006974",
            "code": "\nundefined8 limit_range_00006974(int lower_boundary,int upper_boundary,int reverse_lower_boundary,int reverse_upper_boundary)\n\n{\n  int temp_var;\n  undefined8 result;\n  undefined arr [8];\n  \n  if ((reverse_upper_boundary == 0) && (reverse_lower_boundary == 0)) {\n    if (upper_boundary < 0) {\n      lower_boundary = 0;\n      upper_boundary = -0x80000000;\n    }\n    else if (upper_boundary != 0 || lower_boundary != 0) {\n      upper_boundary = 0x7fffffff;\n      lower_boundary = -1;\n    }\n    return CONCAT44(upper_boundary,lower_boundary);\n  }\n  if (upper_boundary < 0) {\n    temp_var = -upper_boundary - (uint)(lower_boundary != 0);\n    if (reverse_upper_boundary < 0) {\n      result = FUN_00006a14(-lower_boundary,temp_var,-reverse_lower_boundary,-reverse_upper_boundary - (uint)(reverse_lower_boundary != 0),arr);\n      return result;\n    }\n    result = FUN_00006a14(-lower_boundary,temp_var,reverse_lower_boundary,reverse_upper_boundary,arr);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (reverse_upper_boundary < 0) {\n    result = FUN_00006a14(lower_boundary,upper_boundary,-reverse_lower_boundary,-reverse_upper_boundary - (uint)(reverse_lower_boundary != 0),arr);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "limit_range_00006974",
                "param_1": "lower_boundary",
                "param_2": "upper_boundary",
                "param_3": "reverse_lower_boundary",
                "param_4": "reverse_upper_boundary",
                "iVar1": "temp_var",
                "uVar2": "result",
                "local_8": "arr"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "division_modulo_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong division_modulo_00006a14(uint dividend,uint dividend_high,uint divisor_low,uint divisor_high,uint *quotient_modulo)\n\n{\n  code *jump_table;\n  uint quotient_low;\n  int shift_count;\n  uint quotient;\n  uint quotient2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor_low) {\n      shift_count = LZCOUNT(divisor_low);\n      temp1 = divisor_low;\n      if (shift_count != 0) {\n        temp1 = divisor_low << shift_count;\n        dividend_high = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        dividend = dividend << shift_count;\n      }\n      temp2 = temp1 >> 0x10;\n      temp4 = dividend_high / temp2;\n      quotient = dividend >> 0x10 | (dividend_high - temp2 * temp4) * 0x10000;\n      quotient_low = temp4 * (temp1 & 0xffff);\n      quotient2 = temp4;\n      if (quotient <= quotient_low && quotient_low - quotient != 0) {\n        carry_flag = CARRY4(temp1,quotient);\n        quotient = temp1 + quotient;\n        quotient2 = temp4 - 1;\n        if ((carry_flag == false) && (quotient <= quotient_low && quotient_low - quotient != 0)) {\n          quotient2 = temp4 - 2;\n          quotient = quotient + temp1;\n        }\n      }\n      temp4 = (quotient - quotient_low) / temp2;\n      temp2 = dividend & 0xffff | ((quotient - quotient_low) - temp2 * temp4) * 0x10000;\n      quotient = temp4 * (temp1 & 0xffff);\n      quotient_low = temp4;\n      if (temp2 <= quotient && quotient - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient_low = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= quotient && quotient - temp2 != 0)) {\n          quotient_low = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp2 = temp2 - quotient;\n      quotient_low = quotient_low | quotient2 << 0x10;\n      temp1 = 0;\n    }\n    else {\n      if (divisor_low == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_count = LZCOUNT(divisor_low);\n      if (shift_count == 0) {\n        dividend_high = dividend_high - divisor_low;\n        temp5 = divisor_low >> 0x10;\n        temp3 = divisor_low & 0xffff;\n        temp1 = 1;\n        quotient2 = divisor_low;\n      }\n      else {\n        quotient2 = divisor_low << shift_count;\n        temp5 = quotient2 >> 0x10;\n        quotient_low = dividend_high >> (0x20U - shift_count & 0xff);\n        temp1 = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        quotient = quotient_low / temp5;\n        temp3 = quotient2 & 0xffff;\n        temp4 = temp1 >> 0x10 | (quotient_low - temp5 * quotient) * 0x10000;\n        temp2 = quotient * temp3;\n        dividend = dividend << shift_count;\n        quotient_low = quotient;\n        if (temp4 <= temp2 && temp2 - temp4 != 0) {\n          carry_flag = CARRY4(quotient2,temp4);\n          temp4 = quotient2 + temp4;\n          quotient_low = quotient - 1;\n          if ((carry_flag == false) && (temp4 <= temp2 && temp2 - temp4 != 0)) {\n            quotient_low = quotient - 2;\n            temp4 = temp4 + quotient2;\n          }\n        }\n        quotient = (temp4 - temp2) / temp5;\n        dividend_high = temp1 & 0xffff | ((temp4 - temp2) - temp5 * quotient) * 0x10000;\n        temp2 = quotient * temp3;\n        temp1 = quotient;\n        if (dividend_high <= temp2 && temp2 - dividend_high != 0) {\n          carry_flag = CARRY4(quotient2,dividend_high);\n          dividend_high = quotient2 + dividend_high;\n          temp1 = quotient - 1;\n          if ((carry_flag == false) && (dividend_high <= temp2 && temp2 - dividend_high != 0)) {\n            temp1 = quotient - 2;\n            dividend_high = dividend_high + quotient2;\n          }\n        }\n        dividend_high = dividend_high - temp2;\n        temp1 = temp1 | quotient_low << 0x10;\n      }\n      temp4 = dividend_high / temp5;\n      temp2 = dividend >> 0x10 | (dividend_high - temp5 * temp4) * 0x10000;\n      quotient_low = temp3 * temp4;\n      quotient = temp4;\n      if (temp2 <= quotient_low && quotient_low - temp2 != 0) {\n        carry_flag = CARRY4(quotient2,temp2);\n        temp2 = quotient2 + temp2;\n        quotient = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= quotient_low && quotient_low - temp2 != 0)) {\n          quotient = temp4 - 2;\n          temp2 = temp2 + quotient2;\n        }\n      }\n      temp4 = (temp2 - quotient_low) / temp5;\n      temp2 = dividend & 0xffff | ((temp2 - quotient_low) - temp5 * temp4) * 0x10000;\n      temp3 = temp3 * temp4;\n      quotient_low = temp4;\n      if (temp2 <= temp3 && temp3 - temp2 != 0) {\n        carry_flag = CARRY4(quotient2,temp2);\n        temp2 = quotient2 + temp2;\n        quotient_low = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp3 && temp3 - temp2 != 0)) {\n          quotient_low = temp4 - 2;\n          temp2 = temp2 + quotient2;\n        }\n      }\n      temp2 = temp2 - temp3;\n      quotient_low = quotient_low | quotient << 0x10;\n    }\n    if (quotient_modulo != (uint *)0x0) {\n      *quotient_modulo = temp2 >> LZCOUNT(divisor_low);\n      quotient_modulo[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (quotient_modulo != (uint *)0x0) {\n      *quotient_modulo = dividend;\n      quotient_modulo[1] = dividend_high;\n      return 0;\n    }\n    quotient_low = 0;\n    temp1 = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_high);\n    if (shift_count != 0) {\n      temp3 = 0x20 - shift_count;\n      quotient = divisor_low >> (temp3 & 0xff) | divisor_high << shift_count;\n      temp5 = quotient >> 0x10;\n      quotient_low = dividend_high >> (temp3 & 0xff);\n      temp1 = dividend >> (temp3 & 0xff) | dividend_high << shift_count;\n      temp2 = quotient_low / temp5;\n      quotient2 = temp1 >> 0x10 | (quotient_low - temp5 * temp2) * 0x10000;\n      temp4 = temp2 * (quotient & 0xffff);\n      dividend = dividend << shift_count;\n      quotient_low = temp2;\n      if (quotient2 <= temp4 && temp4 - quotient2 != 0) {\n        carry_flag = CARRY4(quotient,quotient2);\n        quotient2 = quotient + quotient2;\n        quotient_low = temp2 - 1;\n        if ((carry_flag == false) && (quotient2 <= temp4 && temp4 - quotient2 != 0)) {\n          quotient_low = temp2 - 2;\n          quotient2 = quotient2 + quotient;\n        }\n      }\n      temp2 = (quotient2 - temp4) / temp5;\n      quotient2 = temp1 & 0xffff | ((quotient2 - temp4) - temp5 * temp2) * 0x10000;\n      temp4 = temp2 * (quotient & 0xffff);\n      temp1 = temp2;\n      if (quotient2 <= temp4 && temp4 - quotient2 != 0) {\n        carry_flag = CARRY4(quotient,quotient2);\n        quotient2 = quotient + quotient2;\n        temp1 = temp2 - 1;\n        if ((carry_flag == false) && (quotient2 <= temp4 && temp4 - quotient2 != 0)) {\n          temp1 = temp2 - 2;\n          quotient2 = quotient2 + quotient;\n        }\n      }\n      temp1 = temp1 | quotient_low << 0x10;\n      result = (ulonglong)temp1 * (ulonglong)(divisor_low << shift_count);\n      if (CONCAT44(quotient2 - temp4,dividend) < result) {\n        result = result - CONCAT44(quotient,divisor_low << shift_count);\n        temp1 = temp1 - 1;\n      }\n      if (quotient_modulo != (uint *)0x0) {\n        quotient_low = ((quotient2 - temp4) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_modulo = quotient_low << (temp3 & 0xff) | dividend - (uint)result >> shift_count;\n        quotient_modulo[1] = quotient_low >> shift_count;\n      }\n      return (ulonglong)temp1;\n    }\n    if ((divisor_high < dividend_high) || (divisor_low <= dividend)) {\n      carry_flag = dividend < divisor_low;\n      dividend = dividend - divisor_low;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      quotient_low = 1;\n    }\n    else {\n      quotient_low = 0;\n    }\n    temp1 = 0;\n    if (quotient_modulo != (uint *)0x0) {\n      *quotient_modulo = dividend;\n      quotient_modulo[1] = dividend_high;\n    }\n  }\n  return CONCAT44(temp1,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "division_modulo_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor_low",
                "param_4": "divisor_high",
                "param_5": "quotient_modulo",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uVar1": "quotient_low",
                "iVar2": "shift_count",
                "uVar3": "quotient",
                "uVar4": "quotient2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5",
                "bVar10": "carry_flag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 135331,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}