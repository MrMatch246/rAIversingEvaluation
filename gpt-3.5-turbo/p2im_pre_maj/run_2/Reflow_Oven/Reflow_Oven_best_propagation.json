{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "printNumber",
                "FUN_08005c96"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_result_08000190",
            "code": "\nulonglong calculate_result_08000190(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_amount_1;\n  byte carry_flag;\n  uint temp_result_1;\n  uint temp_result_2;\n  uint temp_result_3;\n  uint temp_result_4;\n  uint temp_result_5;\n  int shift_amount_2;\n  uint result_1;\n  uint result_2;\n  uint result_3;\n  uint result_4;\n  bool is_equal;\n  bool condition_flag;\n  bool negative_flag;\n  \n  temp_result_4 = input_4 ^ 0x80000000;\n  result_1 = input_2 << 1;\n  input_4 = input_4 << 1;\n  is_equal = ((input_2 ^ temp_result_4) & 0x7fffffff) == 0;\n  condition_flag = is_equal && input_1 == input_3;\n  if (!is_equal || input_1 != input_3) {\n    condition_flag = (result_1 | input_1) == 0;\n  }\n  if (!condition_flag) {\n    condition_flag = (input_4 | input_3) == 0;\n  }\n  shift_amount_2 = (int)result_1 >> 0x15;\n  if (!condition_flag) {\n    condition_flag = shift_amount_2 == -1;\n  }\n  shift_amount_1 = (int)input_4 >> 0x15;\n  if (!condition_flag) {\n    condition_flag = shift_amount_1 == -1;\n  }\n  if (condition_flag) {\n    if (shift_amount_2 == -1 || shift_amount_1 == -1) {\n      result_1 = temp_result_4;\n      result_3 = input_3;\n      if (shift_amount_2 == -1) {\n        result_1 = input_2;\n        result_3 = input_1;\n      }\n      if (shift_amount_2 != -1 || shift_amount_1 != -1) {\n        input_3 = result_3;\n        temp_result_4 = result_1;\n      }\n      condition_flag = (result_3 | result_1 << 0xc) == 0;\n      if (condition_flag) {\n        condition_flag = (input_3 | temp_result_4 << 0xc) == 0;\n      }\n      if (condition_flag) {\n        condition_flag = result_1 == temp_result_4;\n      }\n      if (!condition_flag) {\n        result_1 = result_1 | 0x80000;\n      }\n      return CONCAT44(result_1,result_3);\n    }\n    if (((input_2 ^ temp_result_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((result_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_result_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_result_4) {\n      return 0;\n    }\n    if (result_1 >> 0x15 == 0) {\n      condition_flag = (input_1 & 0x80000000) != 0;\n      temp_result_4 = input_2 * 2 + (uint)condition_flag;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)condition_flag)) {\n        temp_result_4 = temp_result_4 | 0x80000000;\n      }\n      return CONCAT44(temp_result_4,input_1 << 1);\n    }\n    if (result_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  result_1 = result_1 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  result_3 = input_4 - result_1;\n  condition_flag = result_3 != 0;\n  if (input_4 < result_1) {\n    result_3 = -result_3;\n  }\n  result_2 = input_1;\n  temp_result_5 = input_2;\n  if (condition_flag && result_1 <= input_4) {\n    result_1 = result_1 + result_3;\n    result_2 = input_3;\n    temp_result_5 = temp_result_4;\n    input_3 = input_1;\n    temp_result_4 = input_2;\n  }\n  if (0x36 < result_3) {\n    return CONCAT44(temp_result_5,result_2);\n  }\n  temp_result_2 = temp_result_5 & 0xfffff | 0x100000;\n  if ((temp_result_5 & 0x80000000) != 0) {\n    condition_flag = result_2 != 0;\n    result_2 = -result_2;\n    temp_result_2 = -temp_result_2 - (uint)condition_flag;\n  }\n  temp_result_5 = temp_result_4 & 0xfffff | 0x100000;\n  if ((temp_result_4 & 0x80000000) != 0) {\n    condition_flag = input_3 != 0;\n    input_3 = -input_3;\n    temp_result_5 = -temp_result_5 - (uint)condition_flag;\n  }\n  if (result_1 == result_3) {\n    temp_result_5 = temp_result_5 ^ 0x100000;\n    if (result_1 == 0) {\n      temp_result_2 = temp_result_2 ^ 0x100000;\n      result_1 = 1;\n    }\n    else {\n      result_3 = result_3 - 1;\n    }\n  }\n  temp_result_4 = -result_3 + 0x20;\n  if ((int)result_3 < 0x21) {\n    result_4 = input_3 << (temp_result_4 & 0xff);\n    input_3 = input_3 >> (result_3 & 0xff);\n    temp_result_1 = result_2 + input_3;\n    temp_result_3 = temp_result_5 << (temp_result_4 & 0xff);\n    temp_result_4 = temp_result_1 + temp_result_3;\n    temp_result_2 = temp_result_2 + CARRY4(result_2,input_3) + ((int)temp_result_5 >> (result_3 & 0xff)) +\n            (uint)CARRY4(temp_result_1,temp_result_3);\n  }\n  else {\n    result_4 = temp_result_5 << (-result_3 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      result_4 = result_4 | 2;\n    }\n    temp_result_5 = (int)temp_result_5 >> (result_3 - 0x20 & 0xff);\n    temp_result_4 = result_2 + temp_result_5;\n    temp_result_2 = temp_result_2 + ((int)temp_result_5 >> 0x1f) + (uint)CARRY4(result_2,temp_result_5);\n  }\n  input_2 = temp_result_2 & 0x80000000;\n  result_3 = temp_result_2;\n  if ((int)temp_result_2 < 0) {\n    condition_flag = result_4 == 0;\n    result_4 = -result_4;\n    result_3 = -temp_result_4;\n    temp_result_4 = -(uint)!condition_flag - temp_result_4;\n    result_3 = -(uint)(condition_flag <= result_3) - temp_result_2;\n  }\n  if (0xfffff < result_3) {\n    result_2 = result_1 - 1;\n    if (0x1fffff < result_3) {\n      result_2 = result_3 & 1;\n      result_3 = result_3 >> 1;\n      carry_flag = (byte)temp_result_4;\n      temp_result_4 = (uint)(result_2 != 0) << 0x1f | temp_result_4 >> 1;\n      result_4 = (uint)(carry_flag & 1) << 0x1f | result_4 >> 1;\n      result_2 = result_1;\n      if (0xffbfffff < result_1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition_flag = 0x7fffffff < result_4;\n    if (result_4 == 0x80000000) {\n      condition_flag = (temp_result_4 & 1) != 0;\n    }\n    return CONCAT44(result_3 + result_2 * 0x100000 + (uint)CARRY4(temp_result_4,(uint)condition_flag) | input_2,\n                    temp_result_4 + condition_flag);\n  }\n  is_equal = (result_4 & 0x80000000) != 0;\n  result_4 = result_4 << 1;\n  result_2 = temp_result_4 * 2;\n  condition_flag = CARRY4(temp_result_4,temp_result_4);\n  temp_result_4 = temp_result_4 * 2 + (uint)is_equal;\n  result_3 = result_3 * 2 + (uint)(condition_flag || CARRY4(result_2,(uint)is_equal));\n  result_2 = result_1 - 2;\n  if ((result_3 & 0x100000) != 0) goto LAB_080002a0;\n  temp_result_5 = temp_result_4;\n  result_1 = result_3;\n  if (result_3 == 0) {\n    temp_result_5 = 0;\n    result_1 = temp_result_4;\n  }\n  shift_amount_2 = LZCOUNT(result_1);\n  if (result_3 == 0) {\n    shift_amount_2 = shift_amount_2 + 0x20;\n  }\n  result_3 = shift_amount_2 - 0xb;\n  negative_flag = SBORROW4(result_3,0x20);\n  temp_result_4 = shift_amount_2 - 0x2b;\n  condition_flag = (int)temp_result_4 < 0;\n  is_equal = temp_result_4 == 0;\n  if ((int)result_3 < 0x20) {\n    negative_flag = SCARRY4(temp_result_4,0xc);\n    shift_amount_2 = shift_amount_2 + -0x1f;\n    condition_flag = shift_amount_2 < 0;\n    is_equal = shift_amount_2 == 0;\n    temp_result_4 = result_3;\n    if (!is_equal && condition_flag == negative_flag) {\n      temp_result_5 = result_1 << (result_3 & 0xff);\n      result_1 = result_1 >> (0xcU - shift_amount_2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_equal || condition_flag != negative_flag) {\n    result_4 = 0x20 - temp_result_4;\n  }\n  result_1 = result_1 << (temp_result_4 & 0xff);\n  if (is_equal || condition_flag != negative_flag) {\n    result_1 = result_1 | temp_result_5 >> (result_4 & 0xff);\n  }\n  if (is_equal || condition_flag != negative_flag) {\n    temp_result_5 = temp_result_5 << (temp_result_4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)result_3 <= (int)result_2) {\n    return CONCAT44(result_1 + (result_2 - result_3) * 0x100000 | input_2,temp_result_5);\n  }\n  temp_result_4 = ~(result_2 - result_3);\n  if ((int)temp_result_4 < 0x1f) {\n    shift_amount_2 = temp_result_4 - 0x13;\n    if (shift_amount_2 != 0 && shift_amount_2 < 0 == SCARRY4(temp_result_4 - 0x1f,0xc)) {\n      return CONCAT44(temp_result_2,temp_result_5 >> (0x20 - (0xcU - shift_amount_2) & 0xff) | result_1 << (0xcU - shift_amount_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_result_4 = temp_result_4 + 1;\n    return CONCAT44(input_2 | result_1 >> (temp_result_4 & 0xff),\n                    temp_result_5 >> (temp_result_4 & 0xff) | result_1 << (0x20 - temp_result_4 & 0xff));\n  }\n  return CONCAT44(temp_result_2,result_1 >> (temp_result_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_result_08000190",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_amount_1",
                "bVar2": "carry_flag",
                "uVar3": "temp_result_1",
                "uVar4": "temp_result_2",
                "uVar5": "temp_result_3",
                "uVar6": "temp_result_4",
                "uVar7": "temp_result_5",
                "iVar8": "shift_amount_2",
                "uVar9": "result_1",
                "uVar10": "result_2",
                "uVar11": "result_3",
                "uVar12": "result_4",
                "bVar13": "is_equal",
                "bVar14": "condition_flag",
                "bVar15": "negative_flag"
            },
            "calling": [
                "Compute",
                "printFloat",
                "SetControllerDirection",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "arithmetic_operation_08000194",
            "code": "\nulonglong arithmeticOperation_08000194(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry1;\n  uint result1;\n  uint temp;\n  uint result2;\n  int shift2;\n  uint temp1;\n  uint carry2;\n  uint result3;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp1 = input2 << 1;\n  result3 = input4 << 1;\n  flag1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp1 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (result3 | input3) == 0;\n  }\n  shift2 = (int)temp1 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)result3 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result3 = input4;\n      temp1 = input3;\n      if (shift2 == -1) {\n        result3 = input2;\n        temp1 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = temp1;\n        input4 = result3;\n      }\n      flag2 = (temp1 | result3 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result3 == input4;\n      }\n      if (!flag2) {\n        result3 = result3 | 0x80000;\n      }\n      return CONCAT44(result3,temp1);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp1 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (temp1 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      result3 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        result3 = result3 | 0x80000000;\n      }\n      return CONCAT44(result3,input1 << 1);\n    }\n    if (temp1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp1 = temp1 >> 0x15;\n  result3 = result3 >> 0x15;\n  temp2 = result3 - temp1;\n  flag2 = temp2 != 0;\n  if (result3 < temp1) {\n    temp2 = -temp2;\n  }\n  carry2 = input1;\n  result2 = input2;\n  if (flag2 && temp1 <= result3) {\n    temp1 = temp1 + temp2;\n    carry2 = input3;\n    result2 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < temp2) {\n    return CONCAT44(result2,carry2);\n  }\n  result3 = result2 & 0xfffff | 0x100000;\n  if ((result2 & 0x80000000) != 0) {\n    flag2 = carry2 != 0;\n    carry2 = -carry2;\n    result3 = -result3 - (uint)flag2;\n  }\n  result2 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    result2 = -result2 - (uint)flag2;\n  }\n  if (temp1 == temp2) {\n    result2 = result2 ^ 0x100000;\n    if (temp1 == 0) {\n      result3 = result3 ^ 0x100000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  temp4 = -temp2 + 0x20;\n  if ((int)temp2 < 0x21) {\n    temp3 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp2 & 0xff);\n    result1 = carry2 + input3;\n    temp = result2 << (temp4 & 0xff);\n    temp4 = result1 + temp;\n    result3 = result3 + CARRY4(carry2,input3) + ((int)result2 >> (temp2 & 0xff)) +\n            (uint)CARRY4(result1,temp);\n  }\n  else {\n    temp3 = result2 << (-temp2 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp3 = temp3 | 2;\n    }\n    result2 = (int)result2 >> (temp2 - 0x20 & 0xff);\n    temp4 = carry2 + result2;\n    result3 = result3 + ((int)result2 >> 0x1f) + (uint)CARRY4(carry2,result2);\n  }\n  input2 = result3 & 0x80000000;\n  temp2 = result3;\n  if ((int)result3 < 0) {\n    flag2 = temp3 == 0;\n    temp3 = -temp3;\n    temp2 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    temp2 = -(uint)(flag2 <= temp2) - result3;\n  }\n  if (0xfffff < temp2) {\n    carry2 = temp1 - 1;\n    if (0x1fffff < temp2) {\n      result3 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      carry1 = (byte)temp4;\n      temp4 = (uint)(result3 != 0) << 0x1f | temp4 >> 1;\n      temp3 = (uint)(carry1 & 1) << 0x1f | temp3 >> 1;\n      carry2 = temp1;\n      if (0xffbfffff < temp1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    flag2 = 0x7fffffff < temp3;\n    if (temp3 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp2 + carry2 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (temp3 & 0x80000000) != 0;\n  temp3 = temp3 << 1;\n  carry2 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  temp2 = temp2 * 2 + (uint)(flag2 || CARRY4(carry2,(uint)flag1));\n  carry2 = temp1 - 2;\n  if ((temp2 & 0x100000) != 0) goto LAB_080002a0;\n  result2 = temp4;\n  temp1 = temp2;\n  if (temp2 == 0) {\n    result2 = 0;\n    temp1 = temp4;\n  }\n  shift2 = LZCOUNT(temp1);\n  if (temp2 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp4 = shift2 - 0xb;\n  flag3 = SBORROW4(temp4,0x20);\n  temp2 = shift2 - 0x2b;\n  flag2 = (int)temp2 < 0;\n  flag1 = temp2 == 0;\n  if ((int)temp4 < 0x20) {\n    flag3 = SCARRY4(temp2,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp2 = temp4;\n    if (!flag1 && flag2 == flag3) {\n      result2 = temp1 << (temp4 & 0xff);\n      temp1 = temp1 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp3 = 0x20 - temp2;\n  }\n  temp1 = temp1 << (temp2 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp1 = temp1 | result2 >> (temp3 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    result2 = result2 << (temp2 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp4 <= (int)carry2) {\n    return CONCAT44(temp1 + (carry2 - temp4) * 0x100000 | input2,result2);\n  }\n  temp2 = ~(carry2 - temp4);\n  if ((int)temp2 < 0x1f) {\n    shift2 = temp2 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp2 - 0x1f,0xc)) {\n      return CONCAT44(result3,result2 >> (0x20 - (0xcU - shift2) & 0xff) | temp1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp2 = temp2 + 1;\n    return CONCAT44(input2 | temp1 >> (temp2 & 0xff),\n                    result2 >> (temp2 & 0xff) | temp1 << (0x20 - temp2 & 0xff));\n  }\n  return CONCAT44(result3,temp1 >> (temp2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "arithmetic_operation_08000194",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry1",
                "uVar3": "result1",
                "uVar4": "temp",
                "uVar5": "result2",
                "iVar6": "shift2",
                "uVar7": "temp1",
                "uVar8": "carry2",
                "uVar9": "result3",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "readThermocouple",
                "Compute",
                "printFloat",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "shift_and_combine_0800040c",
            "code": "\nulonglong shiftAndCombine_0800040c(uint input)\n\n{\n  uint shiftedValue;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedValuePlusConstant;\n  uint remainingShift;\n  bool isNegative;\n  bool isZero;\n  bool isBorrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  shiftedValue = 0;\n  leadingZeros = LZCOUNT(input);\n  shiftedValuePlusConstant = leadingZeros + 0x15;\n  isBorrow = SBORROW4(shiftedValuePlusConstant,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedValuePlusConstant < 0x20) {\n    isBorrow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedValuePlusConstant;\n    if (!isZero && isBorrow == false) {\n      shiftedValue = input << shiftedValuePlusConstant;\n      input = input >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero || isNegative != isBorrow) {\n    remainingShift = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isZero || isNegative != isBorrow) {\n    input = input | 0U >> (remainingShift & 0xff);\n  }\n  if (isZero || isNegative != isBorrow) {\n    shiftedValue = 0 << (shiftAmount & 0xff);\n  }\nLAB_08000318:\n  if (shiftedValuePlusConstant < 0x433) {\n    return CONCAT44(input + (0x432 - shiftedValuePlusConstant) * 0x100000,shiftedValue);\n  }\n  shiftAmount = ~(0x432 - shiftedValuePlusConstant);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(input >> (shiftAmount & 0xff),\n                    shiftedValue >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(shiftedValue >> (0x20 - (0xcU - leadingZeros) & 0xff) | input << (0xcU - leadingZeros & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "shift_and_combine_0800040c",
                "param_1": "input",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount",
                "iVar3": "leadingZeros",
                "uVar4": "shiftedValuePlusConstant",
                "in_r12": "remainingShift",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isBorrow"
            },
            "calling": [
                "readThermocouple",
                "printFloat",
                "loop",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "bitwise_shift_and_concat_0800042c",
            "code": "\nulonglong bitwiseShiftAndConcat_0800042c(uint input)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int bitCount;\n  uint shiftAmount;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool shouldShift;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  temp2 = input;\n  if ((int)signBit < 0) {\n    temp2 = -input;\n  }\n  temp1 = 0;\n  bitCount = LZCOUNT(temp2);\n  shiftAmount = bitCount + 0x15;\n  shouldShift = SBORROW4(shiftAmount,0x20);\n  temp3 = bitCount - 0xb;\n  isNegative = (int)temp3 < 0;\n  isZero = temp3 == 0;\n  if (shiftAmount < 0x20) {\n    shouldShift = SCARRY4(temp3,0xc);\n    isNegative = false;\n    isZero = bitCount + 1 == 0;\n    temp3 = shiftAmount;\n    if (!isZero && shouldShift == false) {\n      temp1 = temp2 << shiftAmount;\n      temp2 = temp2 >> (0xcU - (bitCount + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero || isNegative != shouldShift) {\n    remainingBits = 0x20 - temp3;\n  }\n  temp2 = temp2 << (temp3 & 0xff);\n  if (isZero || isNegative != shouldShift) {\n    temp2 = temp2 | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != shouldShift) {\n    temp1 = 0 << (temp3 & 0xff);\n  }\nLAB_08000318:\n  if (shiftAmount < 0x433) {\n    return CONCAT44(temp2 + (0x432 - shiftAmount) * 0x100000 | signBit,temp1);\n  }\n  temp3 = ~(0x432 - shiftAmount);\n  if (0x1e < (int)temp3) {\n    return CONCAT44(input,temp2 >> (temp3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = temp3 - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(temp3 - 0x1f,0xc)) {\n    temp3 = temp3 + 1;\n    return CONCAT44(signBit | temp2 >> (temp3 & 0xff),\n                    temp1 >> (temp3 & 0xff) | temp2 << (0x20 - temp3 & 0xff));\n  }\n  return CONCAT44(input,temp1 >> (0x20 - (0xcU - bitCount) & 0xff) | temp2 << (0xcU - bitCount & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "bitwise_shift_and_concat_0800042c",
                "param_1": "input",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "bitCount",
                "uVar5": "shiftAmount",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "shouldShift"
            },
            "calling": [
                "printFloat",
                "loop",
                "SetSampleTime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_product_080004f8",
            "code": "\nulonglong calculateProduct_080004f8(undefined4 x,uint y,uint param_3,uint param_4)\n\n{\n  ulonglong product;\n  longlong temp;\n  uint bits1;\n  uint bits2;\n  int sum;\n  uint diff;\n  uint bits3;\n  uint carry;\n  uint result1;\n  bool check1;\n  bool check2;\n  bool check3;\n  ulonglong concatenated;\n  \n  concatenated = CONCAT44(y,x);\n  carry = 0x7ff;\n  bits2 = y >> 0x14 & 0x7ff;\n  check1 = bits2 == 0;\n  if (!check1) {\n    bits3 = param_4 >> 0x14 & 0x7ff;\n    check1 = bits3 == 0;\n  }\n  if (!check1) {\n    check1 = bits2 == 0x7ff;\n  }\n  if (!check1) {\n    check1 = bits3 == 0x7ff;\n  }\n  if (check1) {\n    concatenated = extract_bit_080006d4();\n  }\n  bits1 = (uint)(concatenated >> 0x20);\n  sum = bits2 + bits3;\n  bits2 = bits1 ^ param_4;\n  bits1 = bits1 & ~(carry << 0x15);\n  param_4 = param_4 & ~(carry << 0x15);\n  check1 = ((uint)concatenated | bits1 << 0xc) == 0;\n  if (!check1) {\n    check1 = (param_3 | param_4 << 0xc) == 0;\n  }\n  bits1 = bits1 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (check1) {\n    param_3 = (uint)concatenated | param_3;\n    param_4 = (bits2 & 0x80000000 | bits1) ^ param_4;\n    bits2 = carry >> 1;\n    check3 = SBORROW4(sum,bits2);\n    diff = sum - bits2;\n    check1 = diff == 0;\n    bits1 = diff;\n    if (!check1 && (int)bits2 <= sum) {\n      check3 = SBORROW4(carry,diff);\n      bits1 = carry - diff;\n      check1 = carry == diff;\n    }\n    if (!check1 && (int)bits1 < 0 == check3) {\n      param_4 = param_4 | diff * 0x100000;\n    }\n    if (!check1 && (int)bits1 < 0 == check3) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    carry = 0;\n    check3 = SBORROW4(diff,1);\n    diff = diff - 1;\n    check1 = diff == 0;\n    bits2 = diff;\n  }\n  else {\n    product = (concatenated & 0xffffffff) * (ulonglong)param_3;\n    concatenated = (concatenated & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)bits1 * (ulonglong)param_3 + (product >> 0x20);\n    result1 = (uint)concatenated;\n    temp = (ulonglong)bits1 * (ulonglong)param_4 + (concatenated >> 0x20);\n    carry = (uint)temp;\n    bits1 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)product != 0) {\n      result1 = result1 | 1;\n    }\n    diff = (sum + -0x3ff) - (uint)(bits1 < 0x200);\n    if (bits1 < 0x200) {\n      check1 = (result1 & 0x80000000) != 0;\n      result1 = result1 << 1;\n      temp = CONCAT44(bits1 * 2 + (uint)(CARRY4(carry,carry) || CARRY4(carry * 2,(uint)check1)),\n                       carry * 2 + (uint)check1);\n    }\n    param_4 = bits2 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    param_3 = (uint)temp << 0xb | result1 >> 0x15;\n    carry = result1 * 0x800;\n    check2 = 0xfc < diff;\n    check3 = SBORROW4(diff,0xfd);\n    bits1 = diff - 0xfd;\n    check1 = bits1 == 0;\n    bits2 = bits1;\n    if (check2 && !check1) {\n      check2 = 0x6ff < bits1;\n      check3 = SBORROW4(bits1,0x700);\n      bits2 = diff - 0x7fd;\n      check1 = bits1 == 0x700;\n    }\n    if (!check2 || check1) {\n      check1 = 0x7fffffff < carry;\n      if (carry == 0x80000000) {\n        check1 = (result1 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + diff * 0x100000 + (uint)CARRY4(param_3,(uint)check1),param_3 + check1\n                     );\n    }\n  }\n  if (!check1 && (int)bits2 < 0 == check3) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  check2 = SCARRY4(diff,0x36);\n  check1 = (int)(diff + 0x36) < 0;\n  check3 = diff == 0xffffffca;\n  if (check3 || check1 != check2) {\n    param_3 = 0;\n  }\n  if (check3 || check1 != check2) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (check3 || check1 != check2) {\n    return CONCAT44(param_4,param_3);\n  }\n  bits2 = -diff;\n  bits1 = bits2 - 0x20;\n  if (0x1f < (int)bits2) {\n    diff = param_3 >> (bits1 & 0xff) | param_4 << (0x20 - bits1 & 0xff);\n    bits2 = (param_4 >> (bits1 & 0xff) & ~((param_4 & 0x80000000) >> (bits1 & 0xff))) -\n            ((int)diff >> 0x1f);\n    if ((carry | param_3 << (0x20 - bits1 & 0xff) | diff << 1) == 0) {\n      bits2 = bits2 & ~(diff >> 0x1f);\n    }\n    return CONCAT44(param_4,bits2) & 0x80000000ffffffff;\n  }\n  sum = bits2 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(bits1,0xc)) {\n    result1 = param_3 << (diff + 0x20 & 0xff);\n    bits1 = param_3 >> (bits2 & 0xff) | param_4 << (diff + 0x20 & 0xff);\n    diff = bits1 + -((int)result1 >> 0x1f);\n    if ((carry | result1 << 1) == 0) {\n      diff = diff & ~(result1 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (bits2 & 0xff)) +\n                    (uint)CARRY4(bits1,-((int)result1 >> 0x1f)),diff);\n  }\n  bits2 = 0xc - sum;\n  diff = param_3 << (bits2 & 0xff);\n  bits2 = param_3 >> (0x20 - bits2 & 0xff) | param_4 << (bits2 & 0xff);\n  bits1 = bits2 + -((int)diff >> 0x1f);\n  if ((carry | diff << 1) == 0) {\n    bits1 = bits1 & ~(diff >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(bits2,-((int)diff >> 0x1f)),bits1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_product_080004f8",
                "param_1": "x",
                "param_2": "y",
                "uVar1": "product",
                "lVar2": "temp",
                "uVar3": "bits1",
                "uVar4": "bits2",
                "iVar5": "sum",
                "uVar6": "diff",
                "unaff_r5": "bits3",
                "uVar7": "carry",
                "uVar8": "result1",
                "bVar9": "check1",
                "bVar10": "check2",
                "bVar11": "check3",
                "uVar12": "concatenated"
            },
            "calling": [
                "readThermocouple",
                "Compute",
                "printFloat",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "extract_bit_080006d4",
            "code": "\nulonglong extract_bit_080006d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_mask_1;\n  uint bit_mask_2;\n  uint input_5;\n  bool is_zero;\n  \n  bit_mask_1 = input_5 & input_4 >> 0x14;\n  if (bit_2 != input_5 && bit_mask_1 != input_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_mask_2 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_mask_2;\n      if (bit_mask_1 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_mask_1 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_mask_1 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_mask_2 = input_2;\n  if (((!is_zero) && ((bit_2 != input_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_mask_1 != input_5 || (input_1 = input_3, bit_mask_2 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_mask_2,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "extract_bit_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_mask_1",
                "uVar3": "bit_mask_2",
                "in_r12": "input_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_floating_point_0800074c",
            "code": "\nulonglong calculateFloatingPoint_0800074c(undefined4 param_1,uint input_1,uint input_2,uint input_3)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input_1,param_1);\n  temp14 = 0x7ff;\n  temp7 = input_1 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input_3 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_floating_point_080008ba();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input_2 | input_3 << 0xc) == 0) {\n    temp7 = (temp9 ^ input_3) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input_3 << 0xc) >> 4 | 0x10000000 | input_2 >> 0x18;\n    temp14 = input_2 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input_3) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input_2 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800086a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "readThermocouple",
                "printFloat",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "calculate_floating_point_080008ba",
            "code": "\nulonglong calculateFloatingPoint_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "calculate_floating_point_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_equality_0800092c",
            "code": "\nuint checkEquality_0800092c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint result;\n  bool isAllZero;\n  bool isLessThanOrEqual;\n  \n  if (((int)(input2 << 1) >> 0x15 == -1 || (int)(input4 << 1) >> 0x15 == -1) &&\n     ((((int)(input2 << 1) >> 0x15 == -1 && ((input1 | input2 << 0xc) != 0)) ||\n      (((int)(input4 << 1) >> 0x15 == -1 && ((input3 | input4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isAllZero = (input1 | input2 << 1) == 0;\n  if (isAllZero) {\n    isAllZero = (input3 | input4 << 1) == 0;\n  }\n  if (!isAllZero) {\n    isAllZero = input2 == input4;\n  }\n  if (isAllZero) {\n    isAllZero = input1 == input3;\n  }\n  if (!isAllZero) {\n    result = input2 ^ input4;\n    isAllZero = result == 0;\n    if (-1 < (int)result) {\n      isAllZero = input2 == input4;\n    }\n    isLessThanOrEqual = -1 < (int)result && input4 <= input2;\n    if (isAllZero) {\n      isLessThanOrEqual = input3 <= input1;\n    }\n    input4 = (int)input4 >> 0x1f;\n    if (!isLessThanOrEqual) {\n      input4 = ~input4;\n    }\n    return input4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_equality_0800092c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "bVar2": "isAllZero",
                "bVar3": "isLessThanOrEqual"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "compare_floating_point_numbers_080009a8",
            "code": "\nvoid compareFloatingPointNumbers_080009a8(undefined4 result,undefined4 ignored,undefined4 number1,undefined4 number2)\n\n{\n  __aeabi_cdcmpeq(number1,number2,result,ignored);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "compare_floating_point_numbers_080009a8",
                "param_1": "result",
                "param_2": "ignored",
                "param_3": "number1",
                "param_4": "number2"
            },
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "process_data_080009b8",
            "code": "\nundefined4 processData_080009b8(undefined4 inputData)\n\n{\n  __eqdf2();\n  return inputData;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "process_data_080009b8",
                "param_1": "inputData"
            },
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "called": [
                "__eqdf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_if_zero_not_equal_080009c8",
            "code": "\nbool checkIfZeroNotEqual_080009c8(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_if_zero_not_equal_080009c8",
                "in_ZR": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_char_zero_080009dc",
            "code": "\nbool is_char_zero_080009dc(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdcmpeq();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_char_zero_080009dc",
                "in_CY": "input_char"
            },
            "calling": [
                "Compute",
                "Initialize",
                "printFloat",
                "SetOutputLimits",
                "loop",
                "FUN_08001814"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_zero_comparison_080009f0",
            "code": "\nbool check_zero_comparison_080009f0(void)\n\n{\n  undefined is_zero;\n  undefined is_not_equal;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)is_not_equal || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_zero_comparison_080009f0",
                "in_ZR": "is_zero",
                "in_CY": "is_not_equal"
            },
            "calling": [
                "printFloat",
                "loop"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_order_08000a04",
            "code": "\nbool checkOrder_08000a04(void)\n\n{\n  undefined isZero;\n  undefined isNegative;\n  \n  __aeabi_cdrcmple();\n  return !(bool)isNegative || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_order_08000a04",
                "in_ZR": "isZero",
                "in_CY": "isNegative"
            },
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "check_null_termination_08000a18",
            "code": "\nbool check_null_termination_08000a18(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "check_null_termination_08000a18",
                "in_CY": "input_character"
            },
            "calling": [
                "Compute",
                "Initialize",
                "printFloat",
                "SetOutputLimits",
                "loop"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_params_validity_08000a2c",
            "code": "\nundefined4 check_params_validity_08000a2c(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_params_validity_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "clamped_bitwise_shift_08000a58",
            "code": "\nuint clampedBitwiseShift_08000a58(uint input1,uint input2)\n\n{\n  uint shiftedResult;\n  int offset;\n  uint shiftedValue2;\n  \n  offset = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    shiftedResult = offset >> 0x15;\n    shiftedValue2 = -shiftedResult - 0x3e1;\n    if (shiftedResult < 0xfffffc20 && shiftedValue2 != 0) {\n      shiftedResult = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shiftedValue2 & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shiftedResult = -shiftedResult;\n      }\n      return shiftedResult;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "clamped_bitwise_shift_08000a58",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shiftedResult",
                "iVar2": "offset",
                "uVar3": "shiftedValue2"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_shifted_value_08000aa8",
            "code": "\nuint calculate_shifted_value_08000aa8(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint shifted_amount;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shifted_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shifted_amount) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shifted_amount & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "shifted_amount"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "call_software_interrupt_08000ae8",
            "code": "\nvoid callSoftwareInterrupt_08000ae8(void)\n\n{\n  interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "call_software_interrupt_08000ae8",
                "software_interrupt": "interrupt"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_afl_call_08000aec",
            "code": "\nundefined4 executeAflCall_08000aec(undefined4 input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = aflCall(1,input,0,0,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_afl_call_08000aec",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_peripherals_08000b08",
            "code": "\nvoid initializePeripherals_08000b08(int flagValue,int constantValue)\n\n{\n  if ((flagValue == 1) && (constantValue == 0xffff)) {\n    initializePID(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n        DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initializeLCD(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                  DAT_20000034);\n    initializeMAX31855(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_peripherals_08000b08",
                "param_1": "flagValue",
                "param_2": "constantValue",
                "PID": "initializePID",
                "LiquidCrystal": "initializeLCD",
                "MAX31855": "initializeMAX31855"
            },
            "calling": [],
            "called": [
                "PID",
                "MAX31855",
                "LiquidCrystal"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_reflow_oven_08000bcc",
            "code": "\nvoid initializeReflowOven_08000bcc(void)\n\n{\n  digitalWrite(DAT_20000064,0);\n  pinMode(DAT_20000064,1);\n  digitalWrite(DAT_20000004,0);\n  pinMode(DAT_20000004,1);\n  digitalWrite(DAT_20000060,0);\n  pinMode(DAT_20000060,1);\n  digitalWrite(DAT_20000004,1);\n  initialize_lcd_080013a4(&DAT_20000194,8,2,0);\n  createChar(&DAT_20000194,0,&DAT_20000008);\n  clear(&DAT_20000194);\n  process_binary_08005c96(&DAT_20000194,\"Reflow\");\n  setCursor(&DAT_20000194,0,1);\n  process_binary_08005c96(&DAT_20000194,\"Oven 1.2\");\n  digitalWrite(DAT_20000004,0);\n  delay(0x9c4);\n  clear(&DAT_20000194);\n  begin(&DAT_2000036c,0xe100,6);\n  digitalWrite(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = millis();\n  DAT_200001b4 = millis();\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_reflow_oven_08000bcc"
            },
            "calling": [
                "main"
            ],
            "called": [
                "begin",
                "setCursor",
                "createChar",
                "millis",
                "FUN_080013a4",
                "clear",
                "delay",
                "digitalWrite",
                "startForkserver",
                "FUN_08005c96",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "update_temperature_control_08000cd0",
            "code": "\nvoid updateTemperatureControl_08000cd0(void)\n\n{\n  uint currentMillis;\n  undefined4 temperature;\n  int comparison;\n  undefined4 temperatureUpper;\n  undefined4 format;\n  undefined4 format1;\n  undefined4 format2;\n  undefined8 elapsedMillis;\n  \n  currentMillis = millis();\n  if (DAT_200001b4 < currentMillis) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    elapsedMillis = readThermocouple(&DAT_2000024c,0);\n    temperatureUpper = (undefined4)((ulonglong)elapsedMillis >> 0x20);\n    temperature = (undefined4)elapsedMillis;\n    DAT_20000188 = temperature;\n    DAT_2000018c = temperatureUpper;\n    comparison = __aeabi_dcmpeq(temperature,temperatureUpper,0,0x40c38800);\n    if (((comparison != 0) || (comparison = __aeabi_dcmpeq(temperature,temperatureUpper,0,0x40c38880), comparison != 0)) ||\n       (comparison = __aeabi_dcmpeq(temperature,temperatureUpper,0,0x40c38900), comparison != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  currentMillis = millis();\n  temperature = DAT_20000060;\n  if (DAT_200001b0 < currentMillis) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      comparison = digitalRead(DAT_20000060);\n      digitalWrite(temperature,comparison == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      display_formatted_number_08005d82(&DAT_2000036c,DAT_20000250,10);\n      process_binary_08005c96(&DAT_2000036c,&DAT_08007368);\n      print(&DAT_2000036c,format,DAT_20000240,DAT_20000244,2);\n      process_binary_08005c96(&DAT_2000036c,&DAT_08007368);\n      print(&DAT_2000036c,format1,DAT_20000188,DAT_2000018c,2);\n      process_binary_08005c96(&DAT_2000036c,&DAT_08007368);\n      println(&DAT_2000036c,format2,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      digitalWrite(DAT_20000060,1);\n    }\n    clear(&DAT_20000194);\n    process_binary_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    setCursor(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      process_binary_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      print(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      send_data_0800134e(&DAT_20000194,0);\n      process_binary_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  temperatureUpper = DAT_2000018c;\n  temperature = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    comparison = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (comparison == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_total_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = millis();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        elapsedMillis = __floatsidf(DAT_20000258);\n        SetOutputLimits(&DAT_200001c0,(int)((ulonglong)elapsedMillis >> 0x20),0,0,elapsedMillis);\n        SetSampleTime(&DAT_200001c0,1000);\n        SetMode(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    comparison = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (comparison != 0) {\n      elapsedMillis = millis();\n      DAT_20000254 = (int)elapsedMillis + 9000;\n      SetTunings(&DAT_200001c0,(int)((ulonglong)elapsedMillis >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    currentMillis = millis();\n    if (DAT_20000254 < currentMillis) {\n      comparison = millis();\n      DAT_20000254 = comparison + 9000;\n      elapsedMillis = __aeabi_dadd(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)elapsedMillis >> 0x20);\n      DAT_20000240 = (undefined4)elapsedMillis;\n      elapsedMillis = __aeabi_dcmpgt(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)elapsedMillis != 0) {\n        SetTunings(&DAT_200001c0,(int)((ulonglong)elapsedMillis >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    elapsedMillis = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)elapsedMillis != 0) {\n      SetTunings(&DAT_200001c0,(int)((ulonglong)elapsedMillis >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    comparison = __aeabi_dcmple(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (comparison != 0) {\n      comparison = millis();\n      DAT_20000180 = comparison + 1000;\n      digitalWrite(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    currentMillis = millis();\n    if (DAT_20000180 < currentMillis) {\n      digitalWrite(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    comparison = __aeabi_dcmplt(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (comparison != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    comparison = __aeabi_dcmpeq(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((comparison == 0) && (comparison = __aeabi_dcmpeq(temperature,temperatureUpper,0,0x40c38880), comparison == 0)) &&\n       (comparison = __aeabi_dcmpeq(temperature,temperatureUpper,0,0x40c38900), comparison == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    comparison = analogRead(DAT_20000068);\n    if (comparison == 0) {\n      comparison = millis();\n      if (0x32 < (uint)(comparison - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    comparison = analogRead(DAT_20000068);\n    if (comparison == 0) {\n      DAT_20000190 = millis();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (comparison = analogRead(DAT_20000068), comparison != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    comparison = millis();\n    Compute(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(comparison - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    elapsedMillis = __floatunsidf(comparison - DAT_2000025c);\n    comparison = __aeabi_dcmplt((int)elapsedMillis,(int)((ulonglong)elapsedMillis >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (comparison == 0) {\n      digitalWrite(DAT_20000064,0);\n    }\n    else {\n      digitalWrite(DAT_20000064,1);\n    }\n  }\n  else {\n    digitalWrite(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "update_temperature_control_08000cd0",
                "uVar1": "currentMillis",
                "uVar2": "temperature",
                "uVar4": "temperatureUpper",
                "uVar5": "elapsedMillis",
                "extraout_r1": "format",
                "extraout_r1_00": "format1",
                "extraout_r1_01": "format2",
                "iVar3": "comparison"
            },
            "calling": [
                "main"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__floatsidf",
                "digitalRead",
                "SetMode",
                "__aeabi_dcmpgt",
                "print",
                "FUN_08005d82",
                "Compute",
                "millis",
                "setCursor",
                "digitalWrite",
                "FUN_08005c96",
                "__aeabi_dcmpeq",
                "FUN_0800134e",
                "SetTunings",
                "println",
                "__aeabi_dcmpge",
                "analogRead",
                "readThermocouple",
                "__aeabi_dadd",
                "__aeabi_dcmple",
                "clear",
                "FUN_08005cd4",
                "SetOutputLimits",
                "SetSampleTime",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_params_08001294",
            "code": "\nvoid setParams_08001294(int objAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(objAddress + 0x18) = value1;\n  *(undefined *)(objAddress + 0x19) = value2;\n  *(undefined *)(objAddress + 0x1a) = value3;\n  *(undefined *)(objAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_params_08001294",
                "param_1": "objAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "toggle_pin_state_080012a2",
            "code": "\nvoid togglePinState_080012a2(int pinIndex)\n\n{\n  setPinState(*(byte *)(pinIndex + 10),0);\n  setPinState(*(byte *)(pinIndex + 10),1);\n  setPinState(*(byte *)(pinIndex + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "toggle_pin_state_080012a2",
                "param_1": "pinIndex",
                "undefined": "byte",
                "digitalWrite": "setPinState"
            },
            "calling": [
                "write8bits",
                "write4bits"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "set_output_bits_080012c0",
            "code": "\nvoid setOutputBits_080012c0(int baseAddress,int data)\n\n{\n  uint iteration;\n  \n  for (iteration = 0; (int)iteration < 4; iteration = iteration + 1) {\n    setDigitalOutput(*(undefined *)(baseAddress + iteration + 0xb),data >> (iteration & 0xff) & 1);\n  }\n  toggleEnable(baseAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "set_output_bits_080012c0",
                "param_1": "baseAddress",
                "param_2": "data",
                "uVar1": "iteration",
                "digitalWrite": "setDigitalOutput",
                "pulseEnable": "toggleEnable"
            },
            "calling": [
                "FUN_080013a4",
                "send"
            ],
            "called": [
                "pulseEnable",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "write_bits_to_digital_pins_080012e8",
            "code": "\nvoid writeBitsToDigitalPins_080012e8(int pinBase,int dataToWrite)\n\n{\n  uint bitIndex;\n  \n  for (bitIndex = 0; (int)bitIndex < 8; bitIndex = bitIndex + 1) {\n    digitalWrite(*(undefined *)(pinBase + bitIndex + 0xb),dataToWrite >> (bitIndex & 0xff) & 1);\n  }\n  pulseEnable(pinBase);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "write_bits_to_digital_pins_080012e8",
                "param_1": "pinBase",
                "param_2": "dataToWrite",
                "uVar1": "bitIndex"
            },
            "calling": [
                "send"
            ],
            "called": [
                "pulseEnable",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "process_data_08001310",
            "code": "\nvoid processData_08001310(int data,uint value,undefined4 bit1,undefined4 bit2)\n\n{\n  digitalWrite(*(undefined *)(data + 8),bit1,bit1,bit2,bit2);\n  if (*(char *)(data + 9) != -1) {\n    digitalWrite(*(char *)(data + 9),0);\n  }\n  if ((*(byte *)(data + 0x13) & 0x10) == 0) {\n    write4bits(data,value >> 4);\n    write4bits(data,value);\n    return;\n  }\n  write8bits(data,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data",
                "param_2": "value",
                "param_3": "bit1",
                "param_4": "bit2"
            },
            "calling": [
                "FUN_0800134e",
                "display",
                "setCursor",
                "createChar",
                "FUN_080013a4",
                "clear"
            ],
            "called": [
                "write8bits",
                "write4bits",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "send_data_0800134e",
            "code": "\nundefined4 send_data_0800134e(undefined4 socket,undefined4 data,undefined4 length,undefined4 flags)\n\n{\n  send(socket,data,1,flags,flags);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "send_data_0800134e",
                "param_1": "socket",
                "param_2": "data",
                "param_3": "length",
                "param_4": "flags"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "send_data_0800135a",
            "code": "\nvoid send_data_0800135a(undefined4 socket,undefined4 buffer,undefined4 size,undefined4 flags)\n\n{\n  send(socket,1,0,flags,flags);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "send_data_0800135a",
                "param_1": "socket",
                "param_2": "buffer",
                "param_3": "size",
                "param_4": "flags"
            },
            "calling": [
                "setup",
                "FUN_080013a4",
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "send_modified_08001366",
            "code": "\nvoid send_modified_08001366(int socket,char data,uint length,undefined4 param_4)\n\n{\n  char offset;\n  \n  if (3 < length) {\n    length = 3;\n  }\n  if ((int)(uint)*(byte *)(socket + 0x17) <= (int)length) {\n    length = *(byte *)(socket + 0x17) - 1 & 0xff;\n  }\n  offset = *(char *)(length + socket + 0x18);\n  send(socket,data + offset | 0x80,0,offset,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "send_modified_08001366",
                "param_1": "socket",
                "param_2": "data",
                "param_3": "length",
                "cVar1": "offset"
            },
            "calling": [
                "setup",
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "set_flag_and_send_0800138e",
            "code": "\nvoid setFlagAndSend_0800138e(int dataPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte flag;\n  \n  flag = *(byte *)(dataPtr + 0x14);\n  *(byte *)(dataPtr + 0x14) = flag | 4;\n  send(dataPtr,flag | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "set_flag_and_send_0800138e",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "flag"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "initialize_lcd_080013a4",
            "code": "\nvoid initializeLCD_080013a4(int lcd,int rsPin,int numRows,int backlightPin)\n\n{\n  int offsetSize;\n  int offsetIndex;\n  \n  if (1 < numRows) {\n    *(byte *)(lcd + 0x13) = *(byte *)(lcd + 0x13) | 8;\n  }\n  *(char *)(lcd + 0x17) = (char)numRows;\n  setRowOffsets(lcd,0,0x40,rsPin,rsPin + 0x40);\n  if ((backlightPin != 0) && (numRows == 1)) {\n    *(byte *)(lcd + 0x13) = *(byte *)(lcd + 0x13) | 4;\n  }\n  pinMode(*(undefined *)(lcd + 8),1);\n  if (*(char *)(lcd + 9) != -1) {\n    pinMode(*(char *)(lcd + 9),1);\n  }\n  pinMode(*(undefined *)(lcd + 10),1);\n  offsetIndex = 0;\n  while( true ) {\n    if ((*(byte *)(lcd + 0x13) & 0x10) == 0) {\n      offsetSize = 4;\n    }\n    else {\n      offsetSize = 8;\n    }\n    if (offsetSize <= offsetIndex) break;\n    pinMode(*(undefined *)(lcd + offsetIndex + 0xb),1);\n    offsetIndex = offsetIndex + 1;\n  }\n  digitalWrite(*(undefined *)(lcd + 8),0);\n  digitalWrite(*(undefined *)(lcd + 10),0);\n  if (*(char *)(lcd + 9) != -1) {\n    digitalWrite(*(char *)(lcd + 9),0);\n  }\n  if ((*(byte *)(lcd + 0x13) & 0x10) == 0) {\n    write4bits(lcd,3);\n    write4bits(lcd,3);\n    write4bits(lcd,3);\n    write4bits(lcd,2);\n  }\n  else {\n    send(lcd,*(byte *)(lcd + 0x13) | 0x20,0);\n    send(lcd,*(byte *)(lcd + 0x13) | 0x20,0);\n    send(lcd,*(byte *)(lcd + 0x13) | 0x20,0);\n  }\n  send(lcd,*(byte *)(lcd + 0x13) | 0x20,0);\n  *(undefined *)(lcd + 0x14) = 4;\n  display(lcd);\n  clear(lcd);\n  *(undefined *)(lcd + 0x15) = 2;\n  send(lcd,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "initialize_lcd_080013a4",
                "param_1": "lcd",
                "param_2": "rsPin",
                "param_3": "numRows",
                "param_4": "backlightPin",
                "iVar1": "offsetSize",
                "iVar2": "offsetIndex"
            },
            "calling": [
                "setup",
                "FUN_080014ba"
            ],
            "called": [
                "display",
                "clear",
                "write4bits",
                "setRowOffsets",
                "digitalWrite",
                "send",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "initialize_lcd_080014ba",
            "code": "\nvoid initialize_lcd_080014ba(int lcd_address,int is_initialized,undefined undefined1_value,undefined4 undefined4_value,undefined undefined1_value_2,\n                 undefined undefined1_value_3,undefined undefined1_value_4,undefined undefined1_value_5,undefined undefined1_value_6,\n                 undefined undefined1_value_7,undefined undefined1_value_8,undefined undefined1_value_9,undefined undefined1_value_10)\n\n{\n  *(undefined *)(lcd_address + 8) = undefined1_value;\n  *(char *)(lcd_address + 9) = (char)undefined4_value;\n  *(undefined *)(lcd_address + 10) = undefined1_value_2;\n  *(undefined *)(lcd_address + 0xb) = undefined1_value_3;\n  *(undefined *)(lcd_address + 0xc) = undefined1_value_4;\n  *(undefined *)(lcd_address + 0xd) = undefined1_value_5;\n  *(undefined *)(lcd_address + 0xe) = undefined1_value_6;\n  *(undefined *)(lcd_address + 0xf) = undefined1_value_7;\n  *(undefined *)(lcd_address + 0x10) = undefined1_value_8;\n  *(undefined *)(lcd_address + 0x11) = undefined1_value_9;\n  *(undefined *)(lcd_address + 0x12) = undefined1_value_10;\n  if (is_initialized == 0) {\n    *(undefined *)(lcd_address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(lcd_address + 0x13) = 0;\n  }\n  initialize_lcd_080014ba_080013a4(lcd_address,0x10,1,0,undefined4_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "initialize_lcd_080014ba",
                "param_1": "lcd_address",
                "param_2": "is_initialized",
                "param_3": "undefined1_value",
                "param_4": "undefined4_value",
                "param_5": "undefined1_value_2",
                "param_6": "undefined1_value_3",
                "param_7": "undefined1_value_4",
                "param_8": "undefined1_value_5",
                "param_9": "undefined1_value_6",
                "param_10": "undefined1_value_7",
                "param_11": "undefined1_value_8",
                "param_12": "undefined1_value_9",
                "param_13": "undefined1_value_10"
            },
            "calling": [
                "LiquidCrystal"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_and_display_lcd_08001510",
            "code": "\nundefined4 *\ninitialize_and_display_lcd_08001510(undefined4 *lcd_data,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n            undefined param_5,undefined param_6,undefined param_7)\n\n{\n  lcd_data[1] = 0;\n  *lcd_data = &PTR_send_data_0800134e_1_080073f8;\n  initialize_lcd_080014ba(lcd_data,1,param_2,0xff,param_3,param_4,param_5,param_6,param_7,0,0,0,0);\n  return lcd_data;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_and_display_lcd_08001510",
                "param_1": "lcd_data"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "send_data_via_param_08001550",
            "code": "\nvoid send_data_via_param_08001550(undefined4 *param_address,uint data_length,int data_address)\n\n{\n  int index;\n  \n  send(param_address,(data_length & 7) << 3 | 0x40,0);\n  for (index = 0; index < 8; index = index + 1) {\n    (**(code **)*param_address)(param_address,*(undefined *)(data_address + index));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "send_data_via_param_08001550",
                "param_1": "param_address",
                "param_2": "data_length",
                "param_3": "data_address",
                "iVar1": "index"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_io_0800157c",
            "code": "\nundefined * initializeIO_0800157c(undefined *outputValues,undefined4 pin1,undefined pin2Mode,undefined pin3Mode)\n\n{\n  *outputValues = (char)pin1;\n  outputValues[1] = pin2Mode;\n  outputValues[2] = pin3Mode;\n  setPinMode(pin1,0);\n  setPinMode(outputValues[1],1);\n  setPinMode(outputValues[2],1);\n  writeToPin(outputValues[1],1);\n  writeToPin(outputValues[2],0);\n  return outputValues;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_io_0800157c",
                "param_1": "outputValues",
                "param_2": "pin1",
                "param_3": "pin2Mode",
                "param_4": "pin3Mode",
                "pinMode": "setPinMode",
                "digitalWrite": "writeToPin"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "decode_bits_080015b2",
            "code": "\nuint decode_bits_080015b2(undefined *input_data)\n\n{\n  int read_value;\n  uint bit_position;\n  uint decoded_value;\n  \n  digitalWrite(input_data[1],0);\n  decoded_value = 0;\n  for (bit_position = 0x1f; -1 < (int)bit_position; bit_position = bit_position - 1) {\n    digitalWrite(input_data[2],1);\n    read_value = digitalRead(*input_data);\n    if (read_value != 0) {\n      decoded_value = decoded_value | 1 << (bit_position & 0xff);\n    }\n    digitalWrite(input_data[2],0);\n  }\n  digitalWrite(input_data[1],1);\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "decode_bits_080015b2",
                "param_1": "input_data",
                "iVar1": "read_value",
                "uVar2": "bit_position",
                "uVar3": "decoded_value"
            },
            "calling": [
                "readThermocouple"
            ],
            "called": [
                "digitalRead",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_result_080015f8",
            "code": "\nundefined8 calculateResult_080015f8(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  uint data;\n  undefined8 result;\n  \n  data = readData();\n  if ((data & 0x10000) == 0) {\n    data = data >> 0x12;\n    result = __floatunsidf(data & 0x1fff);\n    if ((data & 0x2000) != 0) {\n      result = __floatunsidf(~data & 0x1fff);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,param4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (param2 == 1) {\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    data = data & 7;\n    if (data == 2) {\n      return 0x40c3888000000000;\n    }\n    if (data == 4) {\n      return 0x40c3890000000000;\n    }\n    if (data != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_result_080015f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "data",
                "uVar2": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "readData",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "calculate_result_080016b4",
            "code": "\nchar calculateResult_080016b4(int inputValue)\n\n{\n  char result;\n  int currentMillis;\n  int comparisonResult;\n  undefined4 partialResult1;\n  undefined4 variable1;\n  undefined4 partialResult2;\n  undefined4 alternativeValue1;\n  undefined4 variable2;\n  undefined4 alternativeValue2;\n  undefined4 alternativeValue3;\n  char result1;\n  undefined4 resultValue1;\n  undefined4 resultValue2;\n  undefined4 partialResult3;\n  undefined8 calculationResult1;\n  undefined8 calculationResult2;\n  undefined8 finalResult;\n  undefined8 calculationResult3;\n  undefined4 partialResult4;\n  undefined4 partialResult5;\n  \n  result1 = *(char *)(inputValue + 0x70);\n  if (result1 != '\\0') {\n    currentMillis = millis();\n    if ((uint)(currentMillis - *(int *)(inputValue + 0x44)) < *(uint *)(inputValue + 0x58)) {\n      result1 = '\\0';\n    }\n    else {\n      variable1 = **(undefined4 **)(inputValue + 0x38);\n      variable2 = (*(undefined4 **)(inputValue + 0x38))[1];\n      calculationResult1 = __subdf3(**(undefined4 **)(inputValue + 0x40),(*(undefined4 **)(inputValue + 0x40))[1]);\n      partialResult3 = (undefined4)((ulonglong)calculationResult1 >> 0x20);\n      calculationResult2 = __subdf3(variable1,variable2,*(undefined4 *)(inputValue + 0x50),*(undefined4 *)(inputValue + 0x54))\n      ;\n      partialResult1 = (undefined4)((ulonglong)calculationResult2 >> 0x20);\n      finalResult = __muldf3((int)calculationResult1,partialResult3,*(undefined4 *)(inputValue + 0x20),\n                        *(undefined4 *)(inputValue + 0x24));\n      finalResult = __aeabi_dadd((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                            *(undefined4 *)(inputValue + 0x48),*(undefined4 *)(inputValue + 0x4c));\n      *(undefined8 *)(inputValue + 0x48) = finalResult;\n      result = *(char *)(inputValue + 0x71);\n      if (result == '\\0') {\n        calculationResult3 = __muldf3((int)calculationResult2,partialResult1,*(undefined4 *)(inputValue + 0x18),\n                          *(undefined4 *)(inputValue + 0x1c));\n        finalResult = __subdf3((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)calculationResult3,\n                          (int)((ulonglong)calculationResult3 >> 0x20));\n        *(undefined8 *)(inputValue + 0x48) = finalResult;\n      }\n      partialResult2 = *(undefined4 *)(inputValue + 0x48);\n      alternativeValue2 = *(undefined4 *)(inputValue + 0x4c);\n      resultValue1 = *(undefined4 *)(undefined8 *)(inputValue + 0x68);\n      resultValue2 = *(undefined4 *)(inputValue + 0x6c);\n      finalResult = *(undefined8 *)(inputValue + 0x68);\n      comparisonResult = __aeabi_dcmpgt(partialResult2,alternativeValue2,resultValue1,resultValue2);\n      if (comparisonResult == 0) {\n        alternativeValue1 = *(undefined4 *)(inputValue + 0x60);\n        alternativeValue3 = *(undefined4 *)(inputValue + 100);\n        comparisonResult = __aeabi_dcmplt(partialResult2,alternativeValue2);\n        if (comparisonResult != 0) {\n          *(undefined4 *)(inputValue + 0x48) = alternativeValue1;\n          *(undefined4 *)(inputValue + 0x4c) = alternativeValue3;\n        }\n      }\n      else {\n        *(undefined4 *)(inputValue + 0x48) = resultValue1;\n        *(undefined4 *)(inputValue + 0x4c) = resultValue2;\n      }\n      if (result == '\\0') {\n        calculationResult1 = 0;\n      }\n      else {\n        calculationResult1 = __muldf3((int)calculationResult1,partialResult3,*(undefined4 *)(inputValue + 0x18),\n                          *(undefined4 *)(inputValue + 0x1c));\n      }\n      partialResult5 = (undefined4)((ulonglong)calculationResult1 >> 0x20);\n      partialResult4 = (undefined4)calculationResult1;\n      partialResult3 = *(undefined4 *)(inputValue + 0x48);\n      partialResult2 = *(undefined4 *)(inputValue + 0x4c);\n      calculationResult1 = __muldf3((int)calculationResult2,partialResult1,*(undefined4 *)(inputValue + 0x28),\n                        *(undefined4 *)(inputValue + 0x2c));\n      calculationResult1 = __subdf3(partialResult3,partialResult2,(int)calculationResult1,(int)((ulonglong)calculationResult1 >> 0x20));\n      calculationResult1 = __aeabi_dadd(partialResult4,partialResult5,(int)calculationResult1,(int)((ulonglong)calculationResult1 >> 0x20));\n      partialResult3 = (undefined4)((ulonglong)calculationResult1 >> 0x20);\n      comparisonResult = __aeabi_dcmplt(resultValue1,resultValue2,(int)calculationResult1,partialResult3);\n      if (comparisonResult == 0) {\n        finalResult = *(undefined8 *)(inputValue + 0x60);\n        comparisonResult = __aeabi_dcmplt((int)calculationResult1,partialResult3,*(undefined4 *)(undefined8 *)(inputValue + 0x60),\n                               *(undefined4 *)(inputValue + 100));\n        if (comparisonResult == 0) {\n          finalResult = calculationResult1;\n        }\n      }\n      **(undefined8 **)(inputValue + 0x3c) = finalResult;\n      *(undefined4 *)(inputValue + 0x50) = variable1;\n      *(undefined4 *)(inputValue + 0x54) = variable2;\n      *(int *)(inputValue + 0x44) = currentMillis;\n    }\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "calculate_result_080016b4",
                "param_1": "inputValue",
                "cVar1": "result",
                "iVar2": "currentMillis",
                "iVar3": "comparisonResult",
                "uVar4": "partialResult1",
                "uVar5": "variable1",
                "uVar6": "partialResult2",
                "uVar7": "alternativeValue1",
                "uVar8": "variable2",
                "uVar9": "alternativeValue2",
                "uVar10": "alternativeValue3",
                "uVar12": "resultValue1",
                "uVar13": "resultValue2",
                "uVar14": "partialResult3",
                "uVar15": "calculationResult1",
                "uVar16": "calculationResult2",
                "uVar17": "finalResult",
                "uVar18": "calculationResult3",
                "local_38": "partialResult4",
                "uStack_34": "partialResult5"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3",
                "millis",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "process_parameters_08001814",
            "code": "\nvoid process_parameters_08001814(undefined4 *output_array,undefined4 unused_param,undefined4 operand_1,undefined4 operand_2,\n                 undefined4 operand_3,undefined4 operand_4,undefined4 operand_5,undefined4 operand_6,\n                 int flag)\n\n{\n  int is_less_than;\n  undefined4 shifted_dividend_high;\n  undefined flag_value;\n  bool flag_set;\n  undefined8 converted_parameter;\n  undefined8 mul_result;\n  undefined8 sub_result;\n  \n  is_less_than = __aeabi_dcmplt(operand_1,operand_2,0,0);\n  if (((is_less_than == 0) && (is_less_than = __aeabi_dcmplt(operand_3,operand_4,0,0), is_less_than == 0)) &&\n     (is_less_than = __aeabi_dcmplt(operand_5,operand_6,0,0), is_less_than == 0)) {\n    output_array[0xd] = flag;\n    flag_set = flag != 1;\n    if (flag_set) {\n      flag = 0;\n    }\n    flag_value = (undefined)flag;\n    if (!flag_set) {\n      flag_value = 1;\n    }\n    *(undefined *)((int)output_array + 0x71) = flag_value;\n    *output_array = operand_1;\n    output_array[1] = operand_2;\n    output_array[2] = operand_3;\n    output_array[3] = operand_4;\n    output_array[4] = operand_5;\n    output_array[5] = operand_6;\n    converted_parameter = __floatunsidf(output_array[0x16]);\n    converted_parameter = __divdf3((int)converted_parameter,(int)((ulonglong)converted_parameter >> 0x20),0,0x408f4000);\n    shifted_dividend_high = (undefined4)((ulonglong)converted_parameter >> 0x20);\n    output_array[6] = operand_1;\n    output_array[7] = operand_2;\n    mul_result = __muldf3(operand_3,operand_4,(int)converted_parameter,shifted_dividend_high);\n    *(undefined8 *)(output_array + 8) = mul_result;\n    converted_parameter = __divdf3(operand_5,operand_6,(int)converted_parameter,shifted_dividend_high);\n    *(undefined8 *)(output_array + 10) = converted_parameter;\n    if (output_array[0xc] == 1) {\n      sub_result = __subdf3(0,0,operand_1,operand_2);\n      *(undefined8 *)(output_array + 6) = sub_result;\n      mul_result = __subdf3(0,0,(int)mul_result,(int)((ulonglong)mul_result >> 0x20));\n      *(undefined8 *)(output_array + 8) = mul_result;\n      converted_parameter = __subdf3(0,0,(int)converted_parameter,(int)((ulonglong)converted_parameter >> 0x20));\n      *(undefined8 *)(output_array + 10) = converted_parameter;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "process_parameters_08001814",
                "param_1": "output_array",
                "param_2": "unused_param",
                "param_3": "operand_1",
                "param_4": "operand_2",
                "param_5": "operand_3",
                "param_6": "operand_4",
                "param_7": "operand_5",
                "param_8": "operand_6",
                "param_9": "flag",
                "iVar1": "is_less_than",
                "uVar2": "shifted_dividend_high",
                "uVar3": "flag_value",
                "bVar4": "flag_set",
                "uVar5": "converted_parameter",
                "uVar6": "mul_result",
                "uVar7": "sub_result"
            },
            "calling": [
                "SetTunings",
                "FUN_08001ab0"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__muldf3",
                "__subdf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_process_080018f8",
            "code": "\nvoid initializeProcess_080018f8(void)\n\n{\n  initializeParameters();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_process_080018f8",
                "process_parameters_08001814": "initializeParameters"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "perform_division_and_multiplication_08001918",
            "code": "\nvoid performDivisionAndMultiplication_08001918(int ptrParam1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 resultHigh;\n  undefined8 param2Float;\n  undefined8 ptrParam1Float;\n  \n  if (0 < param2) {\n    param2Float = __floatsidf(param2);\n    ptrParam1Float = __floatunsidf(*(undefined4 *)(ptrParam1 + 0x58));\n    param2Float = __divdf3((int)param2Float,(int)((ulonglong)param2Float >> 0x20),(int)ptrParam1Float,\n                     (int)((ulonglong)ptrParam1Float >> 0x20),param4);\n    resultHigh = (undefined4)((ulonglong)param2Float >> 0x20);\n    ptrParam1Float = __muldf3((int)param2Float,resultHigh,*(undefined4 *)(ptrParam1 + 0x20),\n                     *(undefined4 *)(ptrParam1 + 0x24));\n    *(undefined8 *)(ptrParam1 + 0x20) = ptrParam1Float;\n    param2Float = __divdf3(*(undefined4 *)(ptrParam1 + 0x28),*(undefined4 *)(ptrParam1 + 0x2c),(int)param2Float,\n                     resultHigh);\n    *(undefined8 *)(ptrParam1 + 0x28) = param2Float;\n    *(int *)(ptrParam1 + 0x58) = param2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "perform_division_and_multiplication_08001918",
                "param_1": "ptrParam1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "resultHigh",
                "uVar2": "param2Float",
                "uVar3": "ptrParam1Float"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__muldf3",
                "__floatsidf",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_data_if_needed_08001960",
            "code": "\nvoid updateDataIfNeeded_08001960(int dataAddress,undefined4 param2,undefined4 newValue1,undefined4 newValue2,\n                 undefined4 value1,undefined4 value2)\n\n{\n  int comparisonResult;\n  undefined4 *ptrToData;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  comparisonResult = __aeabi_dcmpge(newValue1,newValue2,value1,value2,newValue2);\n  if (comparisonResult == 0) {\n    *(undefined4 *)(dataAddress + 0x60) = newValue1;\n    *(undefined4 *)(dataAddress + 100) = newValue2;\n    *(undefined4 *)(dataAddress + 0x68) = value1;\n    *(undefined4 *)(dataAddress + 0x6c) = value2;\n    if (*(char *)(dataAddress + 0x70) != '\\0') {\n      ptrToData = *(undefined4 **)(dataAddress + 0x3c);\n      data1 = *ptrToData;\n      value3 = ptrToData[1];\n      comparisonResult = __aeabi_dcmplt(value1,value2,data1,value3);\n      if (comparisonResult == 0) {\n        comparisonResult = __aeabi_dcmpgt(newValue1,newValue2,data1,value3);\n        if (comparisonResult != 0) {\n          *ptrToData = newValue1;\n          ptrToData[1] = newValue2;\n        }\n      }\n      else {\n        *ptrToData = value1;\n        ptrToData[1] = value2;\n      }\n      data1 = *(undefined4 *)(dataAddress + 0x48);\n      value3 = *(undefined4 *)(dataAddress + 0x4c);\n      data2 = *(undefined4 *)(dataAddress + 0x68);\n      value4 = *(undefined4 *)(dataAddress + 0x6c);\n      comparisonResult = __aeabi_dcmpgt(data1,value3,data2,value4);\n      if (comparisonResult != 0) {\n        *(undefined4 *)(dataAddress + 0x48) = data2;\n        *(undefined4 *)(dataAddress + 0x4c) = value4;\n        return;\n      }\n      data2 = *(undefined4 *)(dataAddress + 0x60);\n      value4 = *(undefined4 *)(dataAddress + 100);\n      comparisonResult = __aeabi_dcmplt(data1,value3,data2,value4);\n      if (comparisonResult != 0) {\n        *(undefined4 *)(dataAddress + 0x48) = data2;\n        *(undefined4 *)(dataAddress + 0x4c) = value4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_data_if_needed_08001960",
                "param_1": "dataAddress",
                "param_2": "param2",
                "param_3": "newValue1",
                "param_4": "newValue2",
                "param_5": "value1",
                "param_6": "value2",
                "iVar1": "comparisonResult",
                "puVar2": "ptrToData",
                "uVar3": "data1",
                "uVar4": "data2",
                "uVar5": "value3",
                "uVar6": "value4"
            },
            "calling": [
                "FUN_08001ab0",
                "loop"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "update_values_based_on_comparison_080019f6",
            "code": "\nvoid updateValuesBasedOnComparison_080019f6(int input_value)\n\n{\n  int comparison_result;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  \n  value_2 = **(undefined4 **)(input_value + 0x3c);\n  value_3 = (*(undefined4 **)(input_value + 0x3c))[1];\n  *(undefined4 *)(input_value + 0x48) = value_2;\n  *(undefined4 *)(input_value + 0x4c) = value_3;\n  value_1 = (*(undefined4 **)(input_value + 0x38))[1];\n  *(undefined4 *)(input_value + 0x50) = **(undefined4 **)(input_value + 0x38);\n  *(undefined4 *)(input_value + 0x54) = value_1;\n  value_1 = *(undefined4 *)(input_value + 0x68);\n  value_4 = *(undefined4 *)(input_value + 0x6c);\n  comparison_result = __aeabi_dcmpgt(value_2,value_3,value_1,value_4);\n  if (comparison_result == 0) {\n    value_1 = *(undefined4 *)(input_value + 0x60);\n    value_4 = *(undefined4 *)(input_value + 100);\n    comparison_result = __aeabi_dcmplt(value_2,value_3,value_1,value_4);\n    if (comparison_result != 0) {\n      *(undefined4 *)(input_value + 0x48) = value_1;\n      *(undefined4 *)(input_value + 0x4c) = value_4;\n    }\n    return;\n  }\n  *(undefined4 *)(input_value + 0x48) = value_1;\n  *(undefined4 *)(input_value + 0x4c) = value_4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "update_values_based_on_comparison_080019f6",
                "param_1": "input_value",
                "iVar1": "comparison_result",
                "uVar2": "value_1",
                "uVar3": "value_2",
                "uVar4": "value_3",
                "uVar5": "value_4"
            },
            "calling": [
                "SetMode"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "initialize_flag_setter_08001a44",
            "code": "\nvoid initializeFlagSetter_08001a44(int memoryAddress,int condition)\n\n{\n  undefined newValue;\n  \n  if (condition == 1) {\n    newValue = 1;\n    if (*(char *)(memoryAddress + 0x70) == '\\0') {\n      Initialize();\n    }\n  }\n  else {\n    newValue = 0;\n  }\n  *(undefined *)(memoryAddress + 0x70) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "initialize_flag_setter_08001a44",
                "param_1": "memoryAddress",
                "param_2": "condition",
                "uVar1": "newValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "Initialize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_values_if_changed_08001a66",
            "code": "\nvoid updateValuesIfChanged_08001a66(int dataStruct,int newValue,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(dataStruct + 0x70) != '\\0') && (*(int *)(dataStruct + 0x30) != newValue)) {\n    result = __subdf3(0,0,*(undefined4 *)(dataStruct + 0x18),*(undefined4 *)(dataStruct + 0x1c),param_4);\n    *(undefined8 *)(dataStruct + 0x18) = result;\n    result = __subdf3(0,0,*(undefined4 *)(dataStruct + 0x20),*(undefined4 *)(dataStruct + 0x24));\n    *(undefined8 *)(dataStruct + 0x20) = result;\n    result = __subdf3(0,0,*(undefined4 *)(dataStruct + 0x28),*(undefined4 *)(dataStruct + 0x2c));\n    *(undefined8 *)(dataStruct + 0x28) = result;\n  }\n  *(int *)(dataStruct + 0x30) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_values_if_changed_08001a66",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_controller_08001ab0",
            "code": "\nint initializeController_08001ab0(int controller,undefined4 param1,undefined4 param2,undefined4 param3,\n                undefined4 param4,undefined4 param5,undefined4 param6,undefined4 param7,\n                undefined4 param8,undefined4 param9,undefined4 param10,undefined4 param11)\n\n{\n  int currentTime;\n  undefined4 output;\n  \n  *(undefined4 *)(controller + 0x3c) = param2;\n  *(undefined4 *)(controller + 0x38) = param1;\n  *(undefined4 *)(controller + 0x40) = param3;\n  *(undefined *)(controller + 0x70) = 0;\n  SetOutputLimits(controller,param1,0,0,0,0x406fe000);\n  *(undefined4 *)(controller + 0x58) = 100;\n  SetControllerDirection(controller,param11);\n  process_parameters_08001814(controller,output,param4,param5,param6,param7,param8,param9,param10);\n  currentTime = millis();\n  *(int *)(controller + 0x44) = currentTime - *(int *)(controller + 0x58);\n  return controller;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_controller_08001ab0",
                "param_1": "controller",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "param8",
                "param_10": "param9",
                "param_11": "param10",
                "param_12": "param11",
                "extraout_r1": "output",
                "iVar1": "currentTime"
            },
            "calling": [
                "PID"
            ],
            "called": [
                "millis",
                "SetOutputLimits",
                "SetControllerDirection",
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_param_08001b18",
            "code": "\nundefined4 initialize_and_return_param_08001b18(undefined4 input_param)\n\n{\n  initialize_controller_08001ab0();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_param_08001b18",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "configure_system_clock_08001b48",
            "code": "\nvoid configureSystemClock_08001b48(void)\n\n{\n  int result;\n  uint hclkFreq;\n  undefined4 peripheralClockConfig [2];\n  undefined4 peripheralClockInitStruct;\n  undefined4 clockInitStruct;\n  undefined4 sysclockSource;\n  undefined4 ahbDivider;\n  undefined4 apb1Divider;\n  undefined4 apb2Divider;\n  undefined4 oscillatorConfig [4];\n  undefined4 clockSource;\n  undefined4 clockDivider;\n  undefined4 flashLatency;\n  undefined4 voltageRange;\n  undefined4 pllConfig;\n  \n  oscillatorConfig[0] = 2;\n  clockSource = 1;\n  clockDivider = 0x10;\n  flashLatency = 2;\n  voltageRange = 0;\n  pllConfig = 0x380000;\n  result = HAL_RCC_OscConfig(oscillatorConfig);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  clockInitStruct = 0xf;\n  sysclockSource = 2;\n  ahbDivider = 0;\n  apb1Divider = 0x400;\n  apb2Divider = 0;\n  result = HAL_RCC_ClockConfig(&clockInitStruct);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  peripheralClockConfig[0] = 2;\n  peripheralClockInitStruct = 0x8000;\n  result = HAL_RCCEx_PeriphCLKConfig(peripheralClockConfig);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "configure_system_clock_08001b48",
                "local_30": "oscillatorConfig",
                "local_20": "clockSource",
                "local_1c": "clockDivider",
                "local_14": "flashLatency",
                "local_10": "voltageRange",
                "local_c": "pllConfig",
                "iVar1": "result",
                "local_44": "clockInitStruct",
                "local_40": "sysclockSource",
                "local_3c": "ahbDivider",
                "local_38": "apb1Divider",
                "local_34": "apb2Divider",
                "local_54": "peripheralClockConfig",
                "local_4c": "peripheralClockInitStruct",
                "uVar2": "hclkFreq"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_Config",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCCEx_PeriphCLKConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001be8": {
            "entrypoint": "0x08001be8",
            "current_name": "initialize_system_08001be8",
            "code": "\nvoid initializeSystem_08001be8(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumpTablePtr;\n  \n  for (index = 0; (undefined *)(index + 0x20000000) < &DAT_2000015c; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8007970);\n  }\n  for (ptr = &DAT_20000160; ptr < &DAT_200006a8; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTablePtr = (code *)0x8001c1a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTablePtr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTablePtr"
            },
            "calling": [],
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_hardware_configuration_08001c32",
            "code": "\nvoid initialize_hardware_configuration_08001c32(void)\n\n{\n  hardware_configuration_initialization();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_hardware_configuration_08001c32",
                "hw_config_init": "hardware_configuration_initialization"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "configure_sys_tick_08001c3c",
            "code": "\nundefined4 configureSysTick_08001c3c(uint priorityLevel)\n\n{\n  int configStatus;\n  \n  configStatus = HAL_SYSTICK_Config(DAT_20000084 / (1000 / DAT_20000078));\n  if (configStatus != 0) {\n    return 1;\n  }\n  if (0xf < priorityLevel) {\n    return 1;\n  }\n  HAL_NVIC_SetPriority(0xffffffff,priorityLevel,0);\n  DAT_2000007c = priorityLevel;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "configure_sys_tick_08001c3c",
                "param_1": "priorityLevel",
                "iVar1": "configStatus"
            },
            "calling": [
                "HAL_Init",
                "FUN_08003afa"
            ],
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_hardware_08001c88",
            "code": "\n\n\nundefined4 initializeHardware_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configureInterruptPriority(3);\n  initializeSystemTick(0xf);\n  initializeHardware_08001c88Dependencies();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_hardware_08001c88",
                "HAL_NVIC_SetPriorityGrouping": "configureInterruptPriority",
                "HAL_InitTick": "initializeSystemTick",
                "HAL_MspInit": "initializeHardwareDependencies"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_MspInit",
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "add_data_to_global_variable_08001cac",
            "code": "\nvoid addDataToGlobalVariable_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "add_data_to_global_variable_08001cac"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_value_08001cc4",
            "code": "\nundefined4 get_data_value_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_value_08001cc4"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "ADC_Enable",
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start",
                "GetCurrentMilli",
                "FUN_08003afa",
                "UART_WaitOnFlagUntilTimeout",
                "ADC_ConversionStop_Disable",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_RCCEx_PeriphCLKConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "calculate_delay_08001cd0",
            "code": "\nundefined4 calculateDelay_08001cd0(uint **inputParams,uint maximumDelay)\n\n{\n  int startTime;\n  uint periphFreq;\n  int delayThreshold;\n  undefined4 result;\n  uint *configParams;\n  uint targetDelay;\n  uint currentDelay;\n  \n  currentDelay = 0;\n  startTime = HAL_GetTick();\n  targetDelay = DAT_20000084;\n  configParams = *inputParams;\n  if ((configParams[2] & 0x100) == 0) {\n    if (((configParams[1] & 0x100) == 0) && ((configParams[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**inputParams & 2) != 0) goto LAB_08001de2;\n      } while ((maximumDelay == 0xffffffff) ||\n              ((maximumDelay != 0 && (delayThreshold = HAL_GetTick(), (uint)(delayThreshold - startTime) <= maximumDelay))));\n      inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n      *(undefined *)(inputParams + 9) = 0;\n      result = 3;\n    }\n    else {\n      periphFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n      configParams = *inputParams;\n      if (((configParams[4] & 0x24924924) == 0) && ((configParams[3] & 0x924924) == 0)) {\n        if ((configParams[4] & 0x12492492) == 0) {\n          if ((configParams[3] & 0x492492) == 0) {\n            delayThreshold = 0x14;\n          }\n          else {\n            delayThreshold = 0x29;\n          }\n        }\n        else {\n          delayThreshold = 0x29;\n        }\n      }\n      else if (((configParams[4] & 0x12492492) == 0) && ((configParams[3] & 0x492492) == 0)) {\n        delayThreshold = 0x54;\n      }\n      else if ((configParams[4] & 0x249249) == 0) {\n        if ((configParams[3] & 0x249249) == 0) {\n          delayThreshold = 0x54;\n        }\n        else {\n          delayThreshold = 0xfc;\n        }\n      }\n      else {\n        delayThreshold = 0xfc;\n      }\n      targetDelay = (targetDelay / periphFreq) * delayThreshold;\n      for (; currentDelay <= targetDelay && targetDelay - currentDelay != 0; currentDelay = currentDelay + 1) {\n        if ((maximumDelay != 0xffffffff) &&\n           ((maximumDelay == 0 || (delayThreshold = HAL_GetTick(), maximumDelay < (uint)(delayThreshold - startTime))))) {\n          inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n          *(undefined *)(inputParams + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **inputParams = 0xffffffed;\n      inputParams[10] = (uint *)((uint)inputParams[10] | 0x200);\n      if (((*inputParams)[2] & 0xe0000) == 0xe0000) {\n        if (inputParams[3] == (uint *)0x0) {\n          inputParams[10] = (uint *)((uint)inputParams[10] & 0xfffffeff);\n          if (((uint)inputParams[10] & 0x1000) == 0) {\n            inputParams[10] = (uint *)((uint)inputParams[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    inputParams[10] = (uint *)((uint)inputParams[10] | 0x20);\n    *(undefined *)(inputParams + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "calculate_delay_08001cd0",
                "param_1": "inputParams",
                "param_2": "maximumDelay",
                "iVar1": "startTime",
                "uVar2": "periphFreq",
                "iVar3": "delayThreshold",
                "uVar4": "result",
                "puVar5": "configParams",
                "uVar6": "targetDelay",
                "local_1c": "currentDelay"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_from_pointer_08001e40",
            "code": "\nundefined4 get_offset_from_pointer_08001e40(int *pointer)\n\n{\n  return *(undefined4 *)(*pointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_from_pointer_08001e40",
                "param_1": "pointer"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_data_08001e48",
            "code": "\nundefined4 updateData_08001e48(int *data_ptr,uint *info_ptr)\n\n{\n  undefined4 result;\n  uint index;\n  int loop_counter;\n  \n  if (*(char *)(data_ptr + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data_ptr + 9) = 1;\n    index = info_ptr[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*data_ptr + 0x34) =\n           *info_ptr << (index & 0xff) | *(uint *)(*data_ptr + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*data_ptr + 0x30) =\n           *info_ptr << (index & 0xff) | *(uint *)(*data_ptr + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*data_ptr + 0x2c) =\n           *info_ptr << (index & 0xff) | *(uint *)(*data_ptr + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *info_ptr;\n    if (index < 10) {\n      *(uint *)(*data_ptr + 0x10) =\n           info_ptr[2] << (index * 3 & 0xff) |\n           *(uint *)(*data_ptr + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*data_ptr + 0xc) =\n           info_ptr[2] << (index & 0xff) | *(uint *)(*data_ptr + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*info_ptr - 0x10 < 2) {\n      if (*data_ptr == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*info_ptr == 0x10) {\n            for (loop_counter = (DAT_20000084 / 1000000) * 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        data_ptr[10] = data_ptr[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(data_ptr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_data_08001e48",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "uVar1": "result",
                "uVar2": "index",
                "local_c": "loop_counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_value_at_offset_08001f80",
            "code": "\nundefined4 get_value_at_offset_08001f80(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_value_at_offset_08001f80",
                "param_1": "base_address"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "initialize_device_08001f84",
            "code": "\nundefined4 initializeDevice_08001f84(int *deviceParams,undefined4 param)\n\n{\n  int currentTick;\n  undefined4 returnValue;\n  int devicePtr;\n  uint delay;\n  \n  devicePtr = *deviceParams;\n  if ((*(uint *)(devicePtr + 8) & 1) == 0) {\n    *(uint *)(devicePtr + 8) = *(uint *)(devicePtr + 8) | 1;\n    for (delay = DAT_20000084 / 1000000; delay != 0; delay = delay - 1) {\n    }\n    devicePtr = HAL_GetTick(deviceParams,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*deviceParams + 8) & 1) != 0) {\n        return 0;\n      }\n      currentTick = HAL_GetTick();\n    } while ((uint)(currentTick - devicePtr) < 3);\n    deviceParams[10] = deviceParams[10] | 0x10;\n    deviceParams[0xb] = deviceParams[0xb] | 1;\n    *(undefined *)(deviceParams + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "initialize_device_08001f84",
                "param_1": "deviceParams",
                "param_2": "param",
                "iVar1": "currentTick",
                "iVar3": "devicePtr",
                "uVar2": "returnValue",
                "local_14": "delay"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "enable_adc_control_08002004",
            "code": "\n\n\nint enableADCControl_08002004(int *paramArray)\n\n{\n  int enableResult;\n  undefined4 *ptrValue;\n  int paramValue;\n  \n  if (*(char *)(paramArray + 9) != '\\x01') {\n    *(undefined *)(paramArray + 9) = 1;\n    enableResult = enableADC();\n    if (enableResult == 0) {\n      paramValueArray = paramValueArray & 0xfffffcfeU | 0x100;\n      ptrValue = (undefined4 *)*paramArray;\n      if ((ptrValue == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        paramValueArray = paramValueArray | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          paramValueArray = paramValueArray & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        paramValueArray = paramValueArray & 0xffefffff;\n        if ((ptrValueArray & 0x400) != 0) {\n          paramValueArray = paramValueArray & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((paramValueArray & 0x1000U) == 0) {\n        paramValueArray = 0;\n      }\n      else {\n        paramValueArray = paramValueArray & 0xfffffff9;\n      }\n      *(undefined *)(paramArray + 9) = 0;\n      *ptrValue = 0xfffffffd;\n      paramValue = *paramArray;\n      if (((*(uint *)(paramValue + 8) & 0xe0000) == 0xe0000) &&\n         ((paramValue != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(paramValue + 8) = *(uint *)(paramValue + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(paramValue + 8) = *(uint *)(paramValue + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(paramArray + 9) = 0;\n    }\n    return enableResult;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "enable_adc_control_08002004",
                "param_1": "paramArray",
                "iVar1": "enableResult",
                "puVar2": "ptrValue",
                "iVar3": "paramValue",
                "ADC_Enable": "enableADC",
                "param_1[10]": "paramValueArray",
                "puVar2[1]": "ptrValueArray",
                "param_1[0xb]": "paramValueArray"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_flags_080020f0",
            "code": "\nundefined4 updateFlags_080020f0(int *flagsPtr)\n\n{\n  int currentTime;\n  int startTime;\n  \n  startTime = *flagsPtr;\n  if ((*(uint *)(startTime + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(startTime + 8) = *(uint *)(startTime + 8) & 0xfffffffe;\n  startTime = HAL_GetTick();\n  do {\n    if ((*(uint *)(*flagsPtr + 8) & 1) == 0) {\n      return 0;\n    }\n    currentTime = HAL_GetTick();\n  } while ((uint)(currentTime - startTime) < 3);\n  flagsPtr[10] = flagsPtr[10] | 0x10;\n  flagsPtr[0xb] = flagsPtr[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_flags_080020f0",
                "param_1": "flagsPtr",
                "iVar1": "currentTime",
                "iVar2": "startTime"
            },
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "initialize_adc_0800213c",
            "code": "\nundefined4 initialize_ADC_0800213c(int *adc_info)\n\n{\n  int conversion_stop_result;\n  uint flag_1;\n  uint flag_2;\n  \n  if (adc_info == (int *)0x0) {\n    return 1;\n  }\n  if (adc_info[10] == 0) {\n    adc_info[0xb] = 0;\n    *(undefined *)(adc_info + 9) = 0;\n    HAL_ADC_MspInit();\n  }\n  conversion_stop_result = ADC_ConversionStop_Disable(adc_info);\n  if (((adc_info[10] & 0x10U) == 0) && (conversion_stop_result == 0)) {\n    adc_info[10] = adc_info[10] & 0xffffeefdU | 2;\n    flag_1 = adc_info[1] | adc_info[7] | adc_info[3] << 1;\n    if (adc_info[2] == 0x100) {\n      flag_2 = 0x100;\n    }\n    else {\n      flag_2 = 0;\n      if (adc_info[2] == 1) {\n        flag_2 = 0x100;\n      }\n    }\n    if (adc_info[5] == 1) {\n      if (adc_info[3] == 0) {\n        flag_2 = flag_2 | (adc_info[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        adc_info[10] = adc_info[10] | 0x20;\n        adc_info[0xb] = adc_info[0xb] | 1;\n      }\n    }\n    *(uint *)(*adc_info + 4) = flag_2 | *(uint *)(*adc_info + 4) & 0xffff16ff;\n    *(uint *)(*adc_info + 8) = *(uint *)(*adc_info + 8) & 0xffe1f7fd | flag_1;\n    if ((adc_info[2] == 0x100) || (adc_info[2] == 1)) {\n      flag_2 = (adc_info[4] + -1) * 0x100000;\n    }\n    else {\n      flag_2 = 0;\n    }\n    *(uint *)(*adc_info + 0x2c) = flag_2 | *(uint *)(*adc_info + 0x2c) & 0xff0fffff;\n    if (flag_1 != (*(uint *)(*adc_info + 8) & 0xff1f0efe)) {\n      adc_info[10] = adc_info[10] & 0xffffffedU | 0x10;\n      adc_info[0xb] = adc_info[0xb] | 1;\n      return 1;\n    }\n    adc_info[0xb] = 0;\n    adc_info[10] = adc_info[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  adc_info[10] = adc_info[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "initialize_adc_0800213c",
                "param_1": "adc_info",
                "iVar1": "conversion_stop_result",
                "uVar2": "flag_1",
                "uVar3": "flag_2"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "reset_adc_values_0800224c",
            "code": "\nint resetADCValues_0800224c(int *adcData)\n\n{\n  int result;\n  \n  if (adcData == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    adcData[10] = adcData[10] | 2;\n    result = ADC_ConversionStop_Disable();\n    if (result == 0) {\n      *(undefined4 *)*adcData = 0xffffffe0;\n      *(uint *)(*adcData + 4) = *(uint *)(*adcData + 4) & 0xff3f0000;\n      *(uint *)(*adcData + 8) = *(uint *)(*adcData + 8) & 0xff0106f0;\n      *(uint *)(*adcData + 0xc) = *(uint *)(*adcData + 0xc) & 0xff000000;\n      *(uint *)(*adcData + 0x10) = *(uint *)(*adcData + 0x10) & 0xc0000000;\n      *(uint *)(*adcData + 0x14) = *(uint *)(*adcData + 0x14) & 0xfffff000;\n      *(uint *)(*adcData + 0x18) = *(uint *)(*adcData + 0x18) & 0xfffff000;\n      *(uint *)(*adcData + 0x1c) = *(uint *)(*adcData + 0x1c) & 0xfffff000;\n      *(uint *)(*adcData + 0x20) = *(uint *)(*adcData + 0x20) & 0xfffff000;\n      *(uint *)(*adcData + 0x24) = *(uint *)(*adcData + 0x24) & 0xfffff000;\n      *(uint *)(*adcData + 0x28) = *(uint *)(*adcData + 0x28) & 0xfffff000;\n      *(uint *)(*adcData + 0x2c) = *(uint *)(*adcData + 0x2c) & 0xff000000;\n      *(uint *)(*adcData + 0x2c) = *(uint *)(*adcData + 0x2c) & 0xff000000;\n      *(uint *)(*adcData + 0x30) = *(uint *)(*adcData + 0x30) & 0xc0000000;\n      *(uint *)(*adcData + 0x34) = *(uint *)(*adcData + 0x34) & 0xc0000000;\n      *(uint *)(*adcData + 0x38) = *(uint *)(*adcData + 0x38) & 0xffc00000;\n      *(uint *)(*adcData + 0x38) = *(uint *)(*adcData + 0x38) & 0xffc00000;\n      HAL_ADC_MspDeInit(adcData);\n      adcData[0xb] = 0;\n      adcData[10] = 0;\n    }\n    *(undefined *)(adcData + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "reset_adc_values_0800224c",
                "param_1": "adcData",
                "iVar1": "result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspDeInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "check_adc_conversion_status_08002348",
            "code": "\nint checkADCConversionStatus_08002348(int deviceAddress)\n\n{\n  int result;\n  \n  if (*(char *)(deviceAddress + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(deviceAddress + 0x24) = 1;\n  result = ADC_ConversionStop_Disable();\n  if (result == 0) {\n    *(uint *)(deviceAddress + 0x28) = *(uint *)(deviceAddress + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(deviceAddress + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "check_adc_conversion_status_08002348",
                "param_1": "deviceAddress",
                "iVar1": "result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "initialize_adc_08002384",
            "code": "\nint initialize_ADC_08002384(int *adc_parameter)\n\n{\n  uint divider;\n  int stop_result;\n  uint adc_freq;\n  int start_time;\n  int current_time;\n  int loop_counter;\n  \n  if (*(char *)(adc_parameter + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adc_parameter + 9) = 1;\n  stop_result = ADC_ConversionStop_Disable();\n  if (stop_result == 0) {\n    adc_parameter[10] = adc_parameter[10] & 0xffffeefdU | 2;\n    divider = DAT_20000084;\n    adc_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loop_counter = divider / adc_freq << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    ADC_Enable(adc_parameter);\n    *(uint *)(*adc_parameter + 8) = *(uint *)(*adc_parameter + 8) | 8;\n    start_time = HAL_GetTick();\n    while (current_time = *adc_parameter, (*(uint *)(current_time + 8) & 8) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_parameter[10] = adc_parameter[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_parameter + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = HAL_GetTick();\n    while ((*(uint *)(*adc_parameter + 8) & 4) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_parameter[10] = adc_parameter[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_parameter + 9) = 0;\n        return 1;\n      }\n    }\n    adc_parameter[10] = adc_parameter[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adc_parameter + 9) = 0;\n  return stop_result;\n}\n\n",
            "renaming": {
                "FUN_08002384": "initialize_adc_08002384",
                "param_1": "adc_parameter",
                "uVar1": "divider",
                "iVar2": "stop_result",
                "uVar3": "adc_freq",
                "iVar4": "start_time",
                "iVar5": "current_time",
                "local_14": "loop_counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "ADC_Enable",
                "HAL_RCCEx_GetPeriphCLKFreq",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_register_bits_08002470",
            "code": "\n\n\nvoid updateRegisterBits_08002470(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_register_bits_08002470",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_char_value_08002494",
            "code": "\n\n\nvoid updateCharValue_08002494(uint param,uint bitMask,uint value)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitMask & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & value;\n  if ((int)param < 0) {\n    *(char *)((param & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(param + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_char_value_08002494",
                "param_1": "param",
                "param_2": "bitMask",
                "param_3": "value",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_080024f8",
            "code": "\nvoid setBit_080024f8(uint num)\n\n{\n  if (-1 < (int)num) {\n    *(int *)((num >> 5) * 4 + -0x1fff1f00) = 1 << (num & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_080024f8",
                "param_1": "num"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "set_limits_08002514",
            "code": "\n\n\nundefined4 set_limits_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "set_limits_08002514",
                "param_1": "value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_at_position_08002540",
            "code": "\nvoid setBitAtPosition_08002540(uint position)\n\n{\n  if (-1 < (int)position) {\n    *(int *)(((position >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (position & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_at_position_08002540",
                "param_1": "position"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_flag_08002560",
            "code": "\n\n\nvoid updateFlag_08002560(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_flag_08002560",
                "param_1": "flagValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "handle_sys_tick_callback_08002582",
            "code": "\nvoid handleSysTickCallback_08002582(void)\n\n{\n  HAL_SYSTICK_Callback();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "handle_sys_tick_callback_08002582"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "initialize_data_0800258c",
            "code": "\n\n\nundefined4 initializeData_0800258c(uint **data)\n\n{\n  uint *value;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    data[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  value = *data;\n  if (value == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (value == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (value == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (value == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (value == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (value == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback_function != (uint *)0x0) {\n    (*(code *)callback_function)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "initialize_data_0800258c",
                "param_1": "data",
                "puVar1": "value",
                "param_1[0xd]": "callback_function"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_flags_and_values_08002624",
            "code": "\n\n\nvoid updateFlagsAndValues_08002624(uint *outputValues,uint *inputValues)\n\n{\n  uint *currentOutput;\n  uint bitMask;\n  uint inputBit;\n  uint bitPosition;\n  uint valueCode;\n  uint outputValue;\n  int shiftAmount;\n  int registerIndex;\n  \n  outputValue = 0;\n  bitPosition = 0;\n  do {\n    if (0xf < bitPosition) {\n      return;\n    }\n    bitMask = 1 << (bitPosition & 0xff);\n    inputBit = *inputValues & bitMask;\n    if (bitMask == inputBit) {\n      valueCode = inputValues[1];\n      if (valueCode == 0x12) {\n        outputValue = inputValues[3] + 0xc;\n      }\n      else if (valueCode < 0x13) {\n        if (valueCode == 2) {\n          outputValue = inputValues[3] + 8;\n        }\n        else if (valueCode < 3) {\n          if (valueCode == 0) goto LAB_08002776;\n          if (valueCode == 1) {\n            outputValue = inputValues[3];\n          }\n        }\n        else if (valueCode == 3) {\n          outputValue = 0;\n        }\n        else if (valueCode == 0x11) {\n          outputValue = inputValues[3] + 4;\n        }\n      }\n      else if (valueCode == 0x10210000) {\nLAB_08002776:\n        if (inputValues[2] == 0) {\n          outputValue = 4;\n        }\n        else if (inputValues[2] == 1) {\n          outputValues[4] = bitMask;\n          outputValue = 8;\n        }\n        else {\n          outputValues[5] = bitMask;\n          outputValue = 8;\n        }\n      }\n      else if (valueCode < 0x10210001) {\n        if ((valueCode == 0x10110000) || (valueCode == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((valueCode == 0x10310000) || ((valueCode == 0x10320000 || (valueCode == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = bitPosition;\n      currentOutput = outputValues;\n      if (0xff < inputBit) {\n        bitMask = bitPosition - 8;\n        currentOutput = outputValues + 1;\n      }\n      *currentOutput = *currentOutput & ~(0xf << (bitMask << 2 & 0xff)) | outputValue << (bitMask << 2 & 0xff);\n      if ((inputValues[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount = (bitPosition & 3) << 2;\n        if (outputValues == (uint *)0x40010800) {\n          registerIndex = 0;\n        }\n        else if (outputValues == (uint *)0x40010c00) {\n          registerIndex = 1;\n        }\n        else if (outputValues == (uint *)0x40011000) {\n          registerIndex = 2;\n        }\n        else if (outputValues == (uint *)0x40011400) {\n          registerIndex = 3;\n        }\n        else {\n          registerIndex = 4;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shiftAmount) | registerIndex << shiftAmount;\n        if ((inputValues[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~inputBit;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | inputBit;\n        }\n        if ((inputValues[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~inputBit;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | inputBit;\n        }\n        if ((inputValues[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~inputBit;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | inputBit;\n        }\n        if ((inputValues[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~inputBit;\n        }\n        else {\n          _DAT_4001040c = inputBit | _DAT_4001040c;\n        }\n      }\n    }\n    bitPosition = bitPosition + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_flags_and_values_08002624",
                "param_1": "outputValues",
                "param_2": "inputValues",
                "puVar1": "currentOutput",
                "uVar2": "bitMask",
                "uVar3": "inputBit",
                "uVar4": "bitPosition",
                "uVar5": "valueCode",
                "uVar6": "outputValue",
                "iVar7": "shiftAmount",
                "iVar8": "registerIndex"
            },
            "calling": [
                "uart_init",
                "digital_io_init",
                "HAL_ADC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bits_are_set_08002810",
            "code": "\nundefined4 check_bits_are_set_08002810(int input_value,uint flags)\n\n{\n  if ((flags & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bits_are_set_08002810",
                "param_1": "input_value",
                "param_2": "flags"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "update_value_0800281e",
            "code": "\nvoid updateValue_0800281e(int objectAddress,int newValue,int shiftFlag)\n\n{\n  if (shiftFlag == 0) {\n    *(int *)(objectAddress + 0x10) = newValue << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x10) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "update_value_0800281e",
                "param_1": "objectAddress",
                "param_2": "newValue",
                "param_3": "shiftFlag"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_gpio_exti_0800282c",
            "code": "\n\n\nvoid update_gpio_exti_0800282c(uint new_state)\n\n{\n  if ((_DAT_40010414 & new_state) != 0) {\n    _DAT_40010414 = new_state;\n    HAL_GPIO_EXTI_Callback();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_gpio_exti_0800282c",
                "param_1": "new_state"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_data_08002848",
            "code": "\nundefined4 updateData_08002848(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (condition1 == 0) {\n      *(uint *)(*data + 0x10) = value1 & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value1 & 0xffU | 1;\n    }\n  }\n  else if (condition2 == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = value1 & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value1 & 0xffU | 1;\n    }\n  }\n  else if (condition1 == 0) {\n    *(uint *)(*data + 0x10) = (uint)(value1 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition1 == 1) {\n    *(uint *)(*data + 0x10) = (uint)(value1 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_data_08002848",
                "param_1": "data",
                "param_1[0x14]": "condition1",
                "param_1[0x11]": "value1",
                "param_1[4]": "condition2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "extract_and_store_byte_080028d2",
            "code": "\nundefined4 extractAndStoreByte_080028d2(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0x10) = inputArray[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "extract_and_store_byte_080028d2",
                "param_1": "inputArray"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "validate_and_set_flags_080028de",
            "code": "\nundefined4 validateAndSetFlags_080028de(uint **params)\n\n{\n  uint *ptr1;\n  \n  ptr1 = params[0xb];\n  if ((*(char *)((int)params + 0x3d) == '\\\"') &&\n     ((params[0x14] != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[0x14] == (uint *)0x0) && (params[4] == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      params[0x14] = (uint *)((int)params[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (ptr1 == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          ptr1 = *params;\n          if ((ptr1[1] & 0x800) == 0) {\n            *ptr1 = *ptr1 | 0x200;\n          }\n          else {\n            *ptr1 = *ptr1 & 0xfffffbff;\n          }\n        }\n        else if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) ||\n                (params[0xc] == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        ptr1 = *params;\n        if ((ptr1[1] & 0x800) != 0) {\n          ptr1[1] = ptr1[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        ptr1 = *params;\n        if ((ptr1[1] & 0x800) != 0) {\n          ptr1[1] = ptr1[1] | 0x1000;\n        }\n      }\n      params[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "validate_and_set_flags_080028de",
                "param_1": "params",
                "puVar1": "ptr1"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_memory_and_decrement_08002ab8",
            "code": "\nundefined4 updateMemoryAndDecrement_08002ab8(int *memoryPointer)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)memoryPointer + 0x2a) != 0) {\n    bytePointer = (byte *)memoryArray;\n    memoryArray = (int)(bytePointer + 1);\n    *(uint *)(*memoryPointer + 0x10) = (uint)*bytePointer;\n    *(short *)((int)memoryPointer + 0x2a) = *(short *)((int)memoryPointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_memory_and_decrement_08002ab8",
                "param_1": "memoryPointer",
                "pbVar1": "bytePointer",
                "param_1[9]": "memoryArray"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_value_08002ad8",
            "code": "\nundefined4 updateValue_08002ad8(int *inputArray)\n\n{\n  undefined *destination;\n  \n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    destination = (undefined *)inputArray[9];\n    inputArray[9] = (int)(destination + 1);\n    *destination = (char)*(undefined4 *)(*inputArray + 0x10);\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_value_08002ad8",
                "param_1": "inputArray",
                "puVar1": "destination"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "initialize_flags_08002af8",
            "code": "\nundefined4 initializeFlags_08002af8(uint **flagArray,uint *param1,int param2,uint *param3)\n\n{\n  undefined4 result;\n  uint *ptrVar;\n  \n  if (*(char *)((int)flagArray + 0x3d) == '(') {\n    if (param1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param2 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(flagArray + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(flagArray + 0xf) = 1;\n      ptrVar = *flagArray;\n      if ((*ptrVar & 1) == 0) {\n        *ptrVar = *ptrVar | 1;\n      }\n      **flagArray = **flagArray & 0xfffff7ff;\n      *(undefined *)((int)flagArray + 0x3d) = 0x29;\n      *(undefined *)((int)flagArray + 0x3e) = 0x20;\n      result = 0;\n      flagArray[0x10] = (uint *)0x0;\n      flagArray[9] = param1;\n      *(short *)((int)flagArray + 0x2a) = (short)param2;\n      flagArray[0xb] = param3;\n      *(undefined2 *)(flagArray + 10) = *(undefined2 *)((int)flagArray + 0x2a);\n      *(undefined *)(flagArray + 0xf) = 0;\n      (*flagArray)[1] = (*flagArray)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "initialize_flags_08002af8",
                "param_1": "flagArray",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptrVar"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "process_parameter_08002b84",
            "code": "\nundefined4 processParameter_08002b84(uint **paramArray,uint *inputData,int count,uint *outputData)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)paramArray + 0x3d) == '(') {\n    if (inputData == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(paramArray + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(paramArray + 0xf) = 1;\n      ptr = *paramArray;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **paramArray = **paramArray & 0xfffff7ff;\n      *(undefined *)((int)paramArray + 0x3d) = 0x2a;\n      *(undefined *)((int)paramArray + 0x3e) = 0x20;\n      result = 0;\n      paramArray[0x10] = (uint *)0x0;\n      paramArray[9] = inputData;\n      *(short *)((int)paramArray + 0x2a) = (short)count;\n      paramArray[0xb] = outputData;\n      *(undefined2 *)(paramArray + 10) = *(undefined2 *)((int)paramArray + 0x2a);\n      *(undefined *)(paramArray + 0xf) = 0;\n      (*paramArray)[1] = (*paramArray)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "process_parameter_08002b84",
                "param_1": "paramArray",
                "param_2": "inputData",
                "param_3": "count",
                "param_4": "outputData",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "set_flag_values_08002c10",
            "code": "\nundefined4 setFlagValues_08002c10(uint **flagPointer)\n\n{\n  uint *flagValue;\n  \n  if (*(char *)((int)flagPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)flagPointer + 0x3d) = 0x28;\n  flagValue = *flagPointer;\n  if ((*flagValue & 1) == 0) {\n    *flagValue = *flagValue | 1;\n  }\n  **flagPointer = **flagPointer | 0x400;\n  (*flagPointer)[1] = (*flagPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "set_flag_values_08002c10",
                "param_1": "flagPointer",
                "puVar1": "flagValue"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "update_data_08002c54",
            "code": "\nundefined4 updateData_08002c54(int *dataPointer)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)dataPointer + 0x3d);\n  if (*(short *)((int)dataPointer + 0x2a) != 0) {\n    bytePointer = (byte *)dataPointer[9];\n    dataPointer[9] = (int)(bytePointer + 1);\n    *(uint *)(*dataPointer + 0x10) = (uint)*bytePointer;\n    *(short *)((int)dataPointer + 0x2a) = *(short *)((int)dataPointer + 0x2a) + -1;\n    if ((*(short *)((int)dataPointer + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*dataPointer + 4) = *(uint *)(*dataPointer + 4) & 0xfffffbff;\n      dataPointer[0xc] = 0x21;\n      *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "update_data_08002c54",
                "param_1": "dataPointer",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "I2C_Slave_STOPF",
                "I2C_SlaveReceive_RXNE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_i2_c_data_and_callback_08002ca6",
            "code": "\nundefined4 updateI2CDataAndCallback_08002ca6(int *data)\n\n{\n  char charToCheck;\n  undefined *newDataPtr;\n  \n  charToCheck = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    newDataPtr = (undefined *)dataPtr9;\n    dataPtr9 = (int)(newDataPtr + 1);\n    *newDataPtr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charToCheck == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      valueC = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      performI2CReceiveCompletionCallback();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_i2_c_data_and_callback_08002ca6",
                "param_1": "data",
                "cVar1": "charToCheck",
                "puVar2": "newDataPtr",
                "param_1[9]": "dataPtr9",
                "param_1[0xc]": "valueC",
                "HAL_I2C_SlaveRxCpltCallback": "performI2CReceiveCompletionCallback"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "handle_i2_c_address_callback_08002cf2",
            "code": "\nundefined4 handleI2CAddressCallback_08002cf2(int *i2cData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 address;\n  uint flags;\n  \n  flags = *(uint *)(*i2cData + 0x18);\n  if ((flags & 0x80) == 0) {\n    address = *(undefined2 *)(i2cData + 3);\n  }\n  else {\n    address = *(undefined2 *)(i2cData + 6);\n  }\n  HAL_I2C_AddrCallback(i2cData,(*(uint *)(*i2cData + 0x18) & 4) == 0,address,flags,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "handle_i2_c_address_callback_08002cf2",
                "param_1": "i2cData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "address",
                "uVar2": "flags"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "handle_i2_c_event_08002d1c",
            "code": "\nundefined4 handleI2CEvent_08002d1c(uint **eventData)\n\n{\n  if (((eventData[11] == (uint *)0x4) || (eventData[11] == (uint *)0x8)) &&\n     (*(char *)((int)eventData + 0x3d) == '(')) {\n    eventData[11] = (uint *)0xffff0000;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    eventData[12] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    handleI2CListenComplete();\n  }\n  else if (*(char *)((int)eventData + 0x3d) == 'EXCLAMATION') {\n    eventData[11] = (uint *)0xffff0000;\n    eventData[12] = (uint *)0x21;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    handleI2CSlaveTxComplete();\n  }\n  else {\n    (*eventData)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "handle_i2_c_event_08002d1c",
                "param_1": "eventData",
                "param_1[0xb]": "eventData[11]",
                "param_1[0xc]": "eventData[12]",
                "HAL_I2C_ListenCpltCallback": "handleI2CListenComplete",
                "!": "EXCLAMATION",
                "HAL_I2C_SlaveTxCpltCallback": "handleI2CSlaveTxComplete"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_input_data_08002db2",
            "code": "\nundefined4 processInputData_08002db2(uint **inputData)\n\n{\n  char charAtIndex;\n  uint *ptrValue;\n  \n  charAtIndex = *(char *)((int)inputData + 0x3d);\n  ptrValue = inputData[0xb];\n  if ((*(short *)(inputData + 10) == 0) && (charAtIndex == '!')) {\n    if ((ptrValue == (uint *)0x4) || ((ptrValue == (uint *)0x8 || (ptrValue == (uint *)0xffff0000)))) {\n      (*inputData)[1] = (*inputData)[1] & 0xfffff8ff;\n      **inputData = **inputData | 0x200;\n      inputData[0xc] = (uint *)0x0;\n      *(undefined *)((int)inputData + 0x3d) = 0x20;\n      if (*(char *)((int)inputData + 0x3e) == '@') {\n        *(undefined *)((int)inputData + 0x3e) = 0;\n        handleMemoryTxCplt();\n      }\n      else {\n        *(undefined *)((int)inputData + 0x3e) = 0;\n        handleMasterTxCplt();\n      }\n    }\n    else {\n      (*inputData)[1] = (*inputData)[1] & 0xfffff8ff;\n      inputData[0xc] = (uint *)0x11;\n      *(undefined *)((int)inputData + 0x3e) = 0;\n      *(undefined *)((int)inputData + 0x3d) = 0x20;\n      handleMasterTxCplt();\n    }\n  }\n  else if ((charAtIndex == '!') || ((*(char *)((int)inputData + 0x3e) == '@' && (charAtIndex == '\\\"')))) {\n    if (*(short *)((int)inputData + 0x2a) == 0) {\n      (*inputData)[1] = (*inputData)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)inputData + 0x3e) == '@') {\n      if (inputData[0x14] == (uint *)0x0) {\n        if (inputData[0x13] == (uint *)0x1) {\n          (*inputData)[4] = (uint)inputData[0x12] & 0xff;\n          inputData[0x14] = (uint *)((int)inputData[0x14] + 2);\n        }\n        else {\n          (*inputData)[4] = (uint)((int)inputData[0x12] << 0x10) >> 0x18;\n          inputData[0x14] = (uint *)((int)inputData[0x14] + 1);\n        }\n      }\n      else if (inputData[0x14] == (uint *)0x1) {\n        (*inputData)[4] = (uint)inputData[0x12] & 0xff;\n        inputData[0x14] = (uint *)((int)inputData[0x14] + 1);\n      }\n      else if (inputData[0x14] == (uint *)0x2) {\n        if (*(char *)((int)inputData + 0x3d) == '\\\"') {\n          **inputData = **inputData | 0x100;\n        }\n        else if (*(char *)((int)inputData + 0x3d) == '!') {\n          ptrValue = inputData[9];\n          inputData[9] = (uint *)((int)ptrValue + 1);\n          (*inputData)[4] = (uint)*(byte *)ptrValue;\n          *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrValue = inputData[9];\n      inputData[9] = (uint *)((int)ptrValue + 1);\n      (*inputData)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_input_data_08002db2",
                "param_1": "inputData",
                "cVar1": "charAtIndex",
                "puVar2": "ptrValue",
                "HAL_I2C_MemTxCpltCallback": "handleMemoryTxCplt",
                "HAL_I2C_MasterTxCpltCallback": "handleMasterTxCplt"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_i2_c_data_08002efc",
            "code": "\nundefined4 processI2CData_08002efc(uint **data)\n\n{\n  uint *value;\n  \n  value = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        array2 = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MemTxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MasterTxCpltCallback();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        array2 = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      value = array3;\n      array3 = (uint *)((int)value + 1);\n      (*data)[4] = (uint)*(byte *)value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_i2_c_data_08002efc",
                "param_1": "data",
                "puVar1": "value",
                "param_1[0xc]": "array2",
                "param_1[9]": "array3"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "process_data_08002f9c",
            "code": "\nundefined4 processData_08002f9c(uint **data)\n\n{\n  uint *ptr;\n  \n  if (*(char *)((int)data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)data + 0x2a) < 4) {\n      if (*(ushort *)((int)data + 0x2a) - 2 < 2) {\n        if (condition == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n          **data = **data | 0x800;\n        }\n        (*data)[1] = (*data)[1] & 0xfffffbff;\n      }\n      else {\n        if (condition == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n        }\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        ptr = counter;\n        counter = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        temp = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MemRxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MasterRxCpltCallback();\n        }\n      }\n    }\n    else {\n      ptr = counter;\n      counter = (uint *)((int)ptr + 1);\n      *(char *)ptr = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "process_data_08002f9c",
                "param_1": "data",
                "puVar1": "ptr",
                "param_1[0xb]": "condition",
                "param_1[9]": "counter",
                "param_1[0xc]": "temp"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_input_0800306c",
            "code": "\nundefined4 processInput_0800306c(uint **inputParams)\n\n{\n  uint *ptrValue;\n  \n  ptrValue = inputParams[0xb];\n  if (*(short *)((int)inputParams + 0x2a) == 3) {\n    if (((ptrValue == (uint *)0x4) || (ptrValue == (uint *)0x8)) || (ptrValue == (uint *)0xffff0000)) {\n      **inputParams = **inputParams & 0xfffffbff;\n    }\n    ptrValue = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrValue + 1);\n    *(char *)ptrValue = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n  }\n  else if (*(short *)((int)inputParams + 0x2a) == 2) {\n    if (((ptrValue == (uint *)0x4) || (ptrValue == (uint *)0x8)) || (ptrValue == (uint *)0xffff0000)) {\n      (*inputParams)[1] = (*inputParams)[1] & 0xfffffcff;\n      **inputParams = **inputParams | 0x200;\n    }\n    else {\n      if (ptrValue == (uint *)0x2) {\n        **inputParams = **inputParams | 0x400;\n      }\n      else {\n        **inputParams = **inputParams & 0xfffffbff;\n      }\n      (*inputParams)[1] = (*inputParams)[1] & 0xfffffcff;\n    }\n    ptrValue = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrValue + 1);\n    *(char *)ptrValue = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n    ptrValue = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrValue + 1);\n    *(char *)ptrValue = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n    *(undefined *)((int)inputParams + 0x3d) = 0x20;\n    inputParams[0xc] = (uint *)0x0;\n    if (*(char *)((int)inputParams + 0x3e) == '@') {\n      *(undefined *)((int)inputParams + 0x3e) = 0;\n      HAL_I2C_MemRxCpltCallback();\n    }\n    else {\n      *(undefined *)((int)inputParams + 0x3e) = 0;\n      HAL_I2C_MasterRxCpltCallback();\n    }\n  }\n  else {\n    ptrValue = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrValue + 1);\n    *(char *)ptrValue = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_input_0800306c",
                "param_1": "inputParams",
                "puVar1": "ptrValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "handle_i2_c_event_0800316c",
            "code": "\nvoid handleI2CEvent_0800316c(uint **eventData)\n\n{\n  int result;\n  uint *ptr;\n  uint *event;\n  \n  if (*(byte *)((int)eventData + 0x3d) - 0x29 < 2) {\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)eventData + 0x3d) != '`') && (((*eventData)[1] & 0x800) == 0)) {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n    }\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n  }\n  **eventData = **eventData & 0xfffff7ff;\n  event = *eventData;\n  if ((event[1] & 0x800) == 0) {\n    if (*(char *)((int)eventData + 0x3d) == '`') {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n      eventData[0x10] = (uint *)0x0;\n      if ((event[5] & 0x40) != 0) {\n        ptr = eventData[9];\n        eventData[9] = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)event[4];\n      }\n      **eventData = **eventData & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(eventData);\n    }\n    else {\n      if ((event[5] & 0x40) != 0) {\n        ptr = eventData[9];\n        eventData[9] = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)event[4];\n      }\n      HAL_I2C_ErrorCallback(eventData);\n    }\n  }\n  else {\n    event[1] = event[1] & 0xfffff7ff;\n    if (*(char *)((int)eventData[0xd] + 0x21) == '\\x01') {\n      eventData[0xe][0xd] = (uint)&errorRecoveryFunction;\n      result = HAL_DMA_Abort_IT(eventData[0xe]);\n      if (result != 0) {\n        if (((*eventData)[5] & 0x40) != 0) {\n          event = eventData[9];\n          eventData[9] = (uint *)((int)event + 1);\n          *(char *)event = (char)(*eventData)[4];\n        }\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xe][0xd])();\n      }\n    }\n    else {\n      eventData[0xd][0xd] = (uint)&errorRecoveryFunction;\n      result = HAL_DMA_Abort_IT(eventData[0xd]);\n      if (result != 0) {\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)eventData + 0x3d) == '(') && (((uint)eventData[0x10] & 4) != 0)) {\n    eventData[0xb] = (uint *)0xffff0000;\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback(eventData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "handle_i2_c_event_0800316c",
                "param_1": "eventData",
                "iVar1": "result",
                "puVar2": "ptr",
                "puVar3": "event",
                "LAB_080035fc_1": "errorRecoveryFunction"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_i2_c_data_080032b4",
            "code": "\nundefined4 processI2CData_080032b4(uint **data)\n\n{\n  char charValue;\n  uint *ptr1;\n  uint *ptr2;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_i2_c_data_080032b4",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "handle_i2_c_events_080033b8",
            "code": "\nvoid handleI2CEvents_080033b8(int *pI2CData)\n\n{\n  int pI2CDataValue;\n  uint statusReg;\n  uint controlReg;\n  uint errorReg;\n  \n  pI2CDataValue = *pI2CData;\n  errorReg = *(uint *)(pI2CDataValue + 0x18);\n  statusReg = *(uint *)(pI2CDataValue + 0x14);\n  controlReg = *(uint *)(pI2CDataValue + 4);\n  if ((*(char *)((int)pI2CData + 0x3e) == '\\x10') || (*(char *)((int)pI2CData + 0x3e) == '@')) {\n    if (((statusReg & 0x10001) == 0) || ((controlReg & 0x200) == 0)) {\n      if (((statusReg & 0x10008) == 0) || ((controlReg & 0x200) == 0)) {\n        if (((statusReg & 0x10002) != 0) && ((controlReg & 0x200) != 0)) {\n          I2C_Master_ADDR(pI2CData);\n        }\n      }\n      else {\n        I2C_Master_ADD10(pI2CData);\n      }\n    }\n    else {\n      I2C_Master_SB(pI2CData);\n    }\n    if ((errorReg & 0x100004) == 0) {\n      if ((((statusReg & 0x10040) != 0) && ((controlReg & 0x400) != 0)) && ((statusReg & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(pI2CData);\n        return;\n      }\n      if (((statusReg & 0x10004) != 0) && ((controlReg & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(pI2CData);\n        return;\n      }\n    }\n    else {\n      if ((((statusReg & 0x10080) != 0) && ((controlReg & 0x400) != 0)) && ((statusReg & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(pI2CData);\n        return;\n      }\n      if (((statusReg & 0x10004) != 0) && ((controlReg & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(pI2CData);\n        return;\n      }\n    }\n  }\n  else {\n    if (((statusReg & 0x10002) != 0) && ((controlReg & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((statusReg & 0x10010) != 0) && ((controlReg & 0x200) != 0)) {\n      I2C_Slave_STOPF(pI2CData);\n      return;\n    }\n    if ((errorReg & 0x100004) == 0) {\n      if ((((statusReg & 0x10040) != 0) && ((controlReg & 0x400) != 0)) && ((statusReg & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(pI2CData);\n        return;\n      }\n      if (((statusReg & 0x10004) != 0) && ((controlReg & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(pI2CData);\n      }\n    }\n    else {\n      if ((((statusReg & 0x10080) != 0) && ((controlReg & 0x400) != 0)) && ((statusReg & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(pI2CData);\n        return;\n      }\n      if (((statusReg & 0x10004) != 0) && ((controlReg & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(pI2CData);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "handle_i2_c_events_080033b8",
                "param_1": "pI2CData",
                "iVar1": "pI2CDataValue",
                "uVar2": "statusReg",
                "uVar3": "controlReg",
                "uVar4": "errorReg"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_Master_SB",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_RXNE",
                "I2C_Master_ADDR",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_Slave_STOPF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "update_flags_08003520",
            "code": "\nvoid updateFlags_08003520(uint **param)\n\n{\n  char tempChar;\n  uint *ptrVar;\n  uint flags1;\n  uint flags2;\n  \n  ptrVar = *param;\n  flags1 = ptrVar[5];\n  flags2 = ptrVar[1];\n  if (((flags1 & 0x10100) != 0) && ((flags2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 1);\n    ptrVar[5] = 0xfffffeff;\n    **param = **param | 0x8000;\n  }\n  if (((flags1 & 0x10200) != 0) && ((flags2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 2);\n    (*param)[5] = 0xfffffdff;\n  }\n  if (((flags1 & 0x10400) != 0) && ((flags2 & 0x100) != 0)) {\n    tempChar = *(char *)((int)param + 0x3d);\n    if (((*(char *)((int)param + 0x3e) == ' ') && (*(short *)((int)param + 0x2a) == 0)) &&\n       (((tempChar == '!' || (tempChar == ')')) || ((tempChar == '(' && (param[0xc] == (uint *)0x21)))))) {\n      I2C_Slave_AF(param);\n    }\n    else {\n      param[0x10] = (uint *)((uint)param[0x10] | 4);\n      if (*(char *)((int)param + 0x3e) == '\\x10') {\n        **param = **param | 0x200;\n      }\n      (*param)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags1 & 0x10800) != 0) && ((flags2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 8);\n    (*param)[5] = 0xfffff7ff;\n  }\n  if (param[0x10] != (uint *)0x0) {\n    I2C_ITError(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "update_flags_08003520",
                "param_1": "param",
                "cVar1": "tempChar",
                "puVar2": "ptrVar",
                "uVar3": "flags1",
                "uVar4": "flags2"
            },
            "calling": [],
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "delay_function_0800365c",
            "code": "\nvoid delayFunction_0800365c(int inputValue)\n\n{\n  bool isDelayComplete;\n  int delayCounter;\n  \n  delayCounter = inputValue * (DAT_20000084 / 8000);\n  do {\n    isDelayComplete = delayCounter != 0;\n    delayCounter = delayCounter + -1;\n  } while (isDelayComplete);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "delay_function_0800365c",
                "param_1": "inputValue",
                "local_4": "delayCounter",
                "bVar1": "isDelayComplete"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_and_control_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkAndControl_08003688(uint *flags)\n\n{\n  int currentTime;\n  int previousTime;\n  undefined4 result;\n  uint value;\n  bool isConditionMet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        currentTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          previousTime = HAL_GetTick();\n          if (100 < (uint)(previousTime - currentTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        currentTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          previousTime = HAL_GetTick();\n          if (100 < (uint)(previousTime - currentTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        previousTime = HAL_GetTick();\n        if (2 < (uint)(previousTime - currentTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        previousTime = HAL_GetTick();\n        if (2 < (uint)(previousTime - currentTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        previousTime = HAL_GetTick();\n        if (2 < (uint)(previousTime - currentTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        previousTime = HAL_GetTick();\n        if (2 < (uint)(previousTime - currentTime)) {\n          return 3;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isConditionMet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        previousTime = HAL_GetTick();\n        if (100 < (uint)(previousTime - currentTime)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      currentTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        previousTime = HAL_GetTick();\n        if (5000 < (uint)(previousTime - currentTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      currentTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        previousTime = HAL_GetTick();\n        if (5000 < (uint)(previousTime - currentTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    currentTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        currentTime = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          previousTime = HAL_GetTick();\n        } while ((uint)(previousTime - currentTime) < 3);\n        return 3;\n      }\n      previousTime = HAL_GetTick();\n    } while ((uint)(previousTime - currentTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    currentTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      previousTime = HAL_GetTick();\n    } while ((uint)(previousTime - currentTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_and_control_08003688",
                "param_1": "flags",
                "iVar1": "currentTime",
                "iVar2": "previousTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "isConditionMet"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_clock_speed_08003a68",
            "code": "\n\n\nuint calculateClockSpeed_08003a68(void)\n\n{\n  uint uVar1;\n  undefined2 memoryBase;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  memoryBase = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&memoryBase - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_clock_speed_08003a68",
                "local_1c": "memoryBase",
                "uStack_18": "value1",
                "uStack_14": "value2",
                "uStack_10": "value3",
                "uStack_c": "value4"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_system_08003ad4",
            "code": "\n\n\nundefined4 initializeSystem_08003ad4(uint *systemSettings,uint value)\n\n{\n  int startTick;\n  int currentTick;\n  uint sysClockFreq;\n  \n  if ((_DAT_40022000 & 7) < value) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*systemSettings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | systemSettings[2];\n  }\n  if ((*systemSettings & 1) != 0) {\n    sysClockFreq = systemSettings[1];\n    if (sysClockFreq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sysClockFreq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sysClockFreq | _DAT_40021004 & 0xfffffffc;\n    startTick = HAL_GetTick();\n    if (systemSettings[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTick = HAL_GetTick();\n        if (5000 < (uint)(currentTick - startTick)) {\n          return 3;\n        }\n      }\n    }\n    else if (systemSettings[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTick = HAL_GetTick();\n        if (5000 < (uint)(currentTick - startTick)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTick = HAL_GetTick();\n        if (5000 < (uint)(currentTick - startTick)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*systemSettings & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | systemSettings[3];\n  }\n  if ((*systemSettings & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | systemSettings[4] << 3;\n  }\n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000084 = sysClockFreq >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_system_08003ad4",
                "param_1": "systemSettings",
                "param_2": "value",
                "iVar1": "startTick",
                "iVar2": "currentTick",
                "uVar3": "sysClockFreq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_device_08003afa",
            "code": "\n\n\nundefined4 initializeDevice_08003afa(uint *deviceConfig,uint numChannels)\n\n{\n  int startTime;\n  int currentTime;\n  uint clockFrequency;\n  \n  if ((*deviceConfig & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | deviceConfig[2];\n  }\n  if ((*deviceConfig & 1) != 0) {\n    clockFrequency = deviceConfig[1];\n    if (clockFrequency == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((clockFrequency != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = clockFrequency | _DAT_40021004 & 0xfffffffc;\n    startTime = getCurrentTime();\n    if (deviceConfig[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (deviceConfig[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (numChannels < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numChannels;\n    if (numChannels != (numChannels & 7)) {\n      return 1;\n    }\n  }\n  if ((*deviceConfig & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | deviceConfig[3];\n  }\n  if ((*deviceConfig & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | deviceConfig[4] << 3;\n  }\n  clockFrequency = getSystemClockFrequency();\n  DAT_20000084 = clockFrequency >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_device_08003afa",
                "param_1": "deviceConfig",
                "param_2": "numChannels",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "clockFrequency",
                "HAL_GetTick": "getCurrentTime",
                "HAL_RCC_GetSysClockFreq": "getSystemClockFrequency"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_global_value_08003c44",
            "code": "\nundefined4 getGlobalValue_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_global_value_08003c44"
            },
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "get_hclk_frequency_08003c50",
            "code": "\n\n\nuint getHCLKFrequency_08003c50(void)\n\n{\n  uint hclkFrequency;\n  \n  hclkFrequency = getHCLKFreq();\n  return hclkFrequency >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "get_hclk_frequency_08003c50",
                "uVar1": "hclkFrequency",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_clock_frequency_08003c70",
            "code": "\n\n\nuint getClockFrequency_08003c70(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = getSystemClockFrequency();\n  return clockFrequency >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_clock_frequency_08003c70",
                "uVar1": "clockFrequency",
                "HAL_RCC_GetHCLKFreq": "getSystemClockFrequency"
            },
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "initialize_hardware_08003c90",
            "code": "\n\n\nundefined4 initializeHardware_08003c90(uint *hardwareConfig)\n\n{\n  uint flag1;\n  uint flag2;\n  int startTime;\n  int currentTime;\n  bool isFlagSet;\n  \n  if ((*hardwareConfig & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (hardwareConfig[1] & 0x300))) {\n      flag2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      flag1 = _DAT_40021020 & 1;\n      _DAT_40021020 = flag2;\n      if (flag1 != 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentTime = HAL_GetTick();\n          if (5000 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | hardwareConfig[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*hardwareConfig & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | hardwareConfig[2];\n  }\n  if ((*hardwareConfig & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | hardwareConfig[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "initialize_hardware_08003c90",
                "param_1": "hardwareConfig",
                "uVar1": "flag1",
                "uVar2": "flag2",
                "iVar3": "startTime",
                "iVar4": "currentTime",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_clock_frequency_08003da4",
            "code": "\n\n\nuint calculateClockFrequency_08003da4(int inputMode)\n\n{\n  uint clockFrequency;\n  undefined2 dividerValue;\n  undefined4 multiplierValue;\n  undefined4 delayValue;\n  undefined4 constantValue;\n  undefined4 maskValue;\n  \n  maskValue = 0x10100f0e;\n  constantValue = 0xd0c0b0a;\n  delayValue = 0x9080706;\n  multiplierValue = 0x5040302;\n  dividerValue = 0x201;\n  if (inputMode == 2) {\n    clockFrequency = HAL_RCC_GetPCLK2Freq();\n    clockFrequency = clockFrequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (inputMode == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      clockFrequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        clockFrequency = 4000000;\n      }\n      else {\n        clockFrequency = 8000000 / *(byte *)((int)&dividerValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      clockFrequency = clockFrequency * *(byte *)((int)&multiplierValue + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        clockFrequency = (clockFrequency * 2) / 3;\n      }\n    }\n  }\n  else if (inputMode == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      clockFrequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      clockFrequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        clockFrequency = 0;\n      }\n      else {\n        clockFrequency = 0xf424;\n      }\n    }\n    else {\n      clockFrequency = 0;\n    }\n  }\n  else {\n    clockFrequency = 0;\n  }\n  return clockFrequency;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_clock_frequency_08003da4",
                "param_1": "inputMode",
                "uVar1": "clockFrequency",
                "local_24": "dividerValue",
                "uStack_20": "multiplierValue",
                "uStack_1c": "delayValue",
                "uStack_18": "constantValue",
                "uStack_14": "maskValue"
            },
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "handle_alarm_event_08003ea0",
            "code": "\n\n\nvoid handleAlarmEvent_08003ea0(uint **data)\n\n{\n  if (((**data & 2) != 0) && (((*data)[1] & 2) != 0)) {\n    handleAlarmACallback();\n    (*data)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)data + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "handle_alarm_event_08003ea0",
                "param_1": "data",
                "HAL_RTC_AlarmAEventCallback": "handleAlarmACallback"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "deinit_pwm_timers_08003ed8",
            "code": "\nvoid deinit_pwm_timers_08003ed8(uint **timer_ptr)\n\n{\n  uint *timer;\n  \n  *(undefined *)((int)timer_ptr + 0x3d) = 2;\n  timer = *timer_ptr;\n  if ((timer[8] & 0x1111) == 0) {\n    if ((timer[8] & 0x444) == 0) {\n      *timer = *timer & 0xfffffffe;\n    }\n  }\n  pwm_timers_deinit(timer_ptr);\n  *(undefined *)((int)timer_ptr + 0x3d) = 0;\n  *(undefined *)(timer_ptr + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "deinit_pwm_timers_08003ed8",
                "param_1": "timer_ptr",
                "puVar1": "timer",
                "HAL_TIM_PWM_MspDeInit": "pwm_timers_deinit"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_tim_events_08003f18",
            "code": "\nvoid process_TIM_events_08003f18(int *tim_list)\n\n{\n  int current_tim;\n  \n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 2) != 0) && ((*(uint *)(current_tim + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xfffffffd;\n    *(undefined *)(tim_list + 7) = 1;\n    if ((*(uint *)(*tim_list + 0x18) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback();\n      HAL_TIM_PWM_PulseFinishedCallback(tim_list);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback();\n    }\n    *(undefined *)(tim_list + 7) = 0;\n  }\n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 4) != 0) && ((*(uint *)(current_tim + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xfffffffb;\n    *(undefined *)(tim_list + 7) = 2;\n    if ((*(uint *)(*tim_list + 0x18) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(tim_list);\n      HAL_TIM_PWM_PulseFinishedCallback(tim_list);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(tim_list);\n    }\n    *(undefined *)(tim_list + 7) = 0;\n  }\n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 8) != 0) && ((*(uint *)(current_tim + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xfffffff7;\n    *(undefined *)(tim_list + 7) = 4;\n    if ((*(uint *)(*tim_list + 0x1c) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(tim_list);\n      HAL_TIM_PWM_PulseFinishedCallback(tim_list);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(tim_list);\n    }\n    *(undefined *)(tim_list + 7) = 0;\n  }\n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 0x10) != 0) && ((*(uint *)(current_tim + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xffffffef;\n    *(undefined *)(tim_list + 7) = 8;\n    if ((*(uint *)(*tim_list + 0x1c) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(tim_list);\n      HAL_TIM_PWM_PulseFinishedCallback(tim_list);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(tim_list);\n    }\n    *(undefined *)(tim_list + 7) = 0;\n  }\n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 1) != 0) && ((*(uint *)(current_tim + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(tim_list);\n  }\n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 0x80) != 0) && ((*(uint *)(current_tim + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(tim_list);\n  }\n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 0x40) != 0) && ((*(uint *)(current_tim + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xffffffbf;\n    HAL_TIM_TriggerCallback(tim_list);\n  }\n  current_tim = *tim_list;\n  if (((*(uint *)(current_tim + 0x10) & 0x20) != 0) && ((*(uint *)(current_tim + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_tim + 0x10) = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(tim_list);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_tim_events_08003f18",
                "param_1": "tim_list",
                "iVar1": "current_tim"
            },
            "calling": [
                "TIM1_UP_IRQHandler"
            ],
            "called": [
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bits_08004092",
            "code": "\nvoid updateBits_08004092(int ptr_source,uint offset,int value)\n\n{\n  *(uint *)(ptr_source + 0x20) = *(uint *)(ptr_source + 0x20) & ~(1 << (offset & 0xff));\n  *(uint *)(ptr_source + 0x20) = *(uint *)(ptr_source + 0x20) | value << (offset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bits_08004092",
                "param_1": "ptr_source",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "initialize_timer_channel_080040b0",
            "code": "\nundefined4 initializeTimerChannel_080040b0(uint **timerConfig,undefined4 channelConfig)\n\n{\n  uint *timerSettings;\n  \n  TIM_CCxChannelCmd(*timerConfig,channelConfig,0);\n  if (((*timerConfig == (uint *)0x40012c00) && ((TIMER_MODE & 0x1111) == 0)) &&\n     ((TIMER_MODE & 0x444) == 0)) {\n    TIMER_CONTROL = TIMER_CONTROL & 0xffff7fff;\n  }\n  timerSettings = *timerConfig;\n  if (((timerSettings[8] & 0x1111) == 0) && ((timerSettings[8] & 0x444) == 0)) {\n    *timerSettings = *timerSettings & 0xfffffffe;\n  }\n  *(undefined *)((int)timerConfig + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "initialize_timer_channel_080040b0",
                "param_1": "timerConfig",
                "param_2": "channelConfig",
                "puVar1": "timerSettings",
                "uRam40012c20": "TIMER_MODE",
                "uRam40012c44": "TIMER_CONTROL",
                "puVar1[8]": "timerSettings[8]"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_bits_in_memory_08004110",
            "code": "\nvoid updateBitsInMemory_08004110(int memoryAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_bits_in_memory_08004110",
                "param_1": "memoryAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "turn_off_timer_0800412c",
            "code": "\nundefined4 turnOffTimer_0800412c(uint **timerConfig,undefined4 channelNumber)\n\n{\n  uint *timerConfigPtr;\n  \n  setupTimerChannel(*timerConfig,channelNumber,0);\n  timerConfigPtr = *timerConfig;\n  if (((timerConfigPtr[8] & 0x1111) == 0) && ((timerConfigPtr[8] & 0x444) == 0)) {\n    timerConfigPtr[0x11] = timerConfigPtr[0x11] & 0xffff7fff;\n  }\n  timerConfigPtr = *timerConfig;\n  if (((timerConfigPtr[8] & 0x1111) == 0) && ((timerConfigPtr[8] & 0x444) == 0)) {\n    *timerConfigPtr = *timerConfigPtr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "turn_off_timer_0800412c",
                "param_1": "timerConfig",
                "param_2": "channelNumber",
                "puVar1": "timerConfigPtr",
                "TIM_CCxNChannelCmd": "setupTimerChannel"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "clear_bits_and_set_flag_0800417c",
            "code": "\nvoid clearBitsAndSetFlag_0800417c(int *memoryAddress)\n\n{\n  *(uint *)(*memoryAddress + 0xc) = *(uint *)(*memoryAddress + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryAddress + 0x14) = *(uint *)(*memoryAddress + 0x14) & 0xfffffffe;\n  *(undefined *)((int)memoryAddress + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "clear_bits_and_set_flag_0800417c",
                "param_1": "memoryAddress"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "parse_and_modify_data_08004198",
            "code": "\nundefined4 parseAndModifyData_08004198(int *data)\n\n{\n  short updatedValue;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  updatedValue = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = updatedValue;\n  if (updatedValue == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "parse_and_modify_data_08004198",
                "param_1": "data",
                "sVar1": "updatedValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_clock_frequency_08004204",
            "code": "\nvoid calculateClockFrequency_08004204(int *clockParams)\n\n{\n  int pclk1Freq1;\n  int pclk1Freq2;\n  int pclk1Freq3;\n  int pclk1Freq4;\n  int pclk1Freq5;\n  int pclk2Freq1;\n  int pclk2Freq2;\n  int pclk2Freq3;\n  int pclk2Freq4;\n  int pclk2Freq5;\n  \n  *(uint *)(*clockParams + 0x10) = *(uint *)(*clockParams + 0x10) & 0xffffcfff | clockParams[3];\n  *(uint *)(*clockParams + 0xc) =\n       clockParams[2] | clockParams[4] | clockParams[5] | *(uint *)(*clockParams + 0xc) & 0xffffe9f3;\n  *(uint *)(*clockParams + 0x14) = *(uint *)(*clockParams + 0x14) & 0xfffffcff | clockParams[6];\n  pclk2Freq5 = *clockParams;\n  if (pclk2Freq5 != 0x40013800) {\n    pclk1Freq1 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq1 = clockParams[1];\n    pclk1Freq2 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq2 = clockParams[1];\n    pclk1Freq3 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq3 = clockParams[1];\n    pclk1Freq4 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq4 = clockParams[1];\n    pclk1Freq5 = HAL_RCC_GetPCLK1Freq();\n    *(uint *)(pclk2Freq5 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1Freq4 * 0x19) / (uint)(pclk2Freq4 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(clockParams[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1Freq2 * 0x19) / (uint)(pclk2Freq2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(pclk2Freq3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1Freq1 * 0x19) / (ulonglong)(uint)(pclk2Freq1 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclk2Freq5 = HAL_RCC_GetPCLK2Freq();\n  pclk1Freq5 = clockParams[1];\n  pclk1Freq1 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq1 = clockParams[1];\n  pclk1Freq2 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq2 = clockParams[1];\n  pclk1Freq3 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq3 = clockParams[1];\n  pclk1Freq4 = HAL_RCC_GetPCLK2Freq();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(pclk1Freq3 * 0x19) / (uint)(pclk2Freq3 << 2) +\n                                (int)(((ulonglong)(uint)(pclk1Freq4 * 0x19) /\n                                      (ulonglong)(uint)(clockParams[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(pclk1Freq1 * 0x19) / (uint)(pclk2Freq1 << 2) +\n                   (int)(((ulonglong)(uint)(pclk1Freq2 * 0x19) / (ulonglong)(uint)(pclk2Freq2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(pclk2Freq5 * 0x19) / (ulonglong)(uint)(pclk1Freq5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_clock_frequency_08004204",
                "param_1": "clockParams",
                "iVar1": "pclk1Freq1",
                "iVar2": "pclk1Freq2",
                "iVar3": "pclk1Freq3",
                "iVar4": "pclk1Freq4",
                "iVar5": "pclk1Freq5",
                "iVar6": "pclk2Freq1",
                "iVar7": "pclk2Freq2",
                "iVar8": "pclk2Freq3",
                "iVar9": "pclk2Freq4",
                "iVar10": "pclk2Freq5"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_params_080043b4",
            "code": "\nundefined4 checkParams_080043b4(uint **ptrParam,uint mask,uint isTrue,int startTick,uint maxTicks)\n\n{\n  int currentTick;\n  \n  do {\n    if (((mask & ~**ptrParam) == 0) != isTrue) {\n      return 0;\n    }\n  } while ((maxTicks == 0xffffffff) ||\n          ((maxTicks != 0 && (currentTick = HAL_GetTick(), (uint)(currentTick - startTick) <= maxTicks))));\n  (*ptrParam)[3] = (*ptrParam)[3] & 0xfffffe5f;\n  (*ptrParam)[5] = (*ptrParam)[5] & 0xfffffffe;\n  *(undefined *)((int)ptrParam + 0x39) = 0x20;\n  *(undefined *)((int)ptrParam + 0x3a) = 0x20;\n  *(undefined *)(ptrParam + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_params_080043b4",
                "param_1": "ptrParam",
                "param_2": "mask",
                "param_3": "isTrue",
                "param_4": "startTick",
                "param_5": "maxTicks",
                "iVar1": "currentTick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "initialize_uart_0800441a",
            "code": "\nundefined4 initializeUART_0800441a(int *uartConfig)\n\n{\n  if (uartConfig != (int *)0x0) {\n    if (*(char *)((int)uartConfig + 0x39) == '\\0') {\n      *(undefined *)(uartConfig + 0xe) = 0;\n      initializeUART_0800441aHardware();\n    }\n    *(undefined *)((int)uartConfig + 0x39) = 0x24;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) & 0xffffdfff;\n    setUARTConfig(uartConfig);\n    *(uint *)(*uartConfig + 0x10) = *(uint *)(*uartConfig + 0x10) & 0xffffb7ff;\n    *(uint *)(*uartConfig + 0x14) = *(uint *)(*uartConfig + 0x14) & 0xffffffd5;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) | 0x2000;\n    uartConfig.flag = 0;\n    *(undefined *)((int)uartConfig + 0x39) = 0x20;\n    *(undefined *)((int)uartConfig + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "param_1": "uartConfig",
                "HAL_UART_MspInit": "initializeUARTHardware",
                "UART_SetConfig": "setUARTConfig",
                "param_1[0xf]": "uartConfig.flag"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 process_data_08004478(int *data_ptr,ushort *buffer_ptr,int buffer_length,undefined4 timeout)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (buffer_ptr == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (buffer_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      return_value = HAL_GetTick();\n      *(short *)(data_ptr + 9) = (short)buffer_length;\n      *(short *)((int)data_ptr + 0x26) = (short)buffer_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = UART_WaitOnFlagUntilTimeout(data_ptr,0x80,0,return_value,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *buffer_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            buffer_ptr = buffer_ptr + 1;\n          }\n          else {\n            buffer_ptr = (ushort *)((int)buffer_ptr + 1);\n          }\n        }\n        else {\n          result = UART_WaitOnFlagUntilTimeout(data_ptr,0x80,0,return_value,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)buffer_ptr;\n          buffer_ptr = (ushort *)((int)buffer_ptr + 1);\n        }\n      }\n      result = UART_WaitOnFlagUntilTimeout(data_ptr,0x40,0,return_value,timeout);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_ptr",
                "param_2": "buffer_ptr",
                "param_3": "buffer_length",
                "param_4": "timeout",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "process_input_0800455a",
            "code": "\nundefined4 processInput_0800455a(int *inputArray,int size1,int size2)\n\n{\n  if (*(char *)((int)inputArray + 0x39) != ' ') {\n    return 2;\n  }\n  if (size1 == 0) {\n    return 1;\n  }\n  if (size2 == 0) {\n    return 1;\n  }\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    var1 = size1;\n    *(short *)(inputArray + 9) = (short)size2;\n    *(short *)((int)inputArray + 0x26) = (short)size2;\n    var4 = 0;\n    *(undefined *)((int)inputArray + 0x39) = 0x21;\n    *(undefined *)(inputArray + 0xe) = 0;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "process_input_0800455a",
                "param_1": "inputArray",
                "param_2": "size1",
                "param_3": "size2",
                "param_1[8]": "var1",
                "param_1[0xf]": "var4"
            },
            "calling": [
                "uart_attach_tx_callback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "validate_input_080045a2",
            "code": "\nundefined4 validate_input_080045a2(int *ptr_input,int size_param2,int size_param3)\n\n{\n  if (*(char *)((int)ptr_input + 0x3a) != ' ') {\n    return 2;\n  }\n  if (size_param2 == 0) {\n    return 1;\n  }\n  if (size_param3 == 0) {\n    return 1;\n  }\n  if (*(char *)(ptr_input + 0xe) != '\\x01') {\n    ptr_input_index10 = size_param2;\n    *(short *)(ptr_input + 0xb) = (short)size_param3;\n    *(short *)((int)ptr_input + 0x2e) = (short)size_param3;\n    ptr_input_index_f = 0;\n    *(undefined *)((int)ptr_input + 0x3a) = 0x22;\n    *(undefined *)(ptr_input + 0xe) = 0;\n    *(uint *)(*ptr_input + 0xc) = *(uint *)(*ptr_input + 0xc) | 0x100;\n    *(uint *)(*ptr_input + 0x14) = *(uint *)(*ptr_input + 0x14) | 1;\n    *(uint *)(*ptr_input + 0xc) = *(uint *)(*ptr_input + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "ptr_input",
                "param_2": "size_param2",
                "param_3": "size_param3",
                "param_1[10]": "ptr_input_index10",
                "param_1[0xf]": "ptr_input_index_f"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "update_uart_settings_080045fe",
            "code": "\nundefined4 updateUartSettings_080045fe(int *settings)\n\n{\n  *(uint *)(*settings + 0xc) = *(uint *)(*settings + 0xc) & 0xffffffbf;\n  *(undefined *)((int)settings + 0x39) = 0x20;\n  HAL_UART_TxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "update_uart_settings_080045fe",
                "param_1": "settings"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "parse_input_string_08004618",
            "code": "\nundefined4 parseInputString_08004618(int *input)\n\n{\n  byte *bytePtr;\n  short count;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)input + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (input[2] == 0x1000) {\n    if (input[4] == 0) {\n      *(ushort *)input[10] = (ushort)((uint)(*(int *)(*input + 4) << 0x17) >> 0x17);\n      input[10] = input[10] + 2;\n    }\n    else {\n      *(ushort *)input[10] = (ushort)*(undefined4 *)(*input + 4) & 0xff;\n      input[10] = input[10] + 1;\n    }\n  }\n  else if (input[4] == 0) {\n    undefinedPtr = (undefined *)input[10];\n    input[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*input + 4);\n  }\n  else {\n    bytePtr = (byte *)input[10];\n    input[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*input + 4) & 0x7f;\n  }\n  count = *(short *)((int)input + 0x2e) + -1;\n  *(short *)((int)input + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xffffffdf;\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xfffffeff;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffffe;\n  *(undefined *)((int)input + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "parse_input_string_08004618",
                "param_1": "input",
                "pbVar1": "bytePtr",
                "sVar2": "count",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "handle_uart_interrupt_080046b8",
            "code": "\nvoid handleUARTInterrupt_080046b8(uint **ptrToParam1)\n\n{\n  int indexVar1;\n  uint param1Value;\n  uint *ptrToValue;\n  uint param4Value;\n  uint param5Value;\n  \n  ptrToValue = *ptrToParam1;\n  param5Value = *ptrToValue;\n  param1Value = ptrToValue[3];\n  if ((((param5Value & 0xf) == 0) && ((param5Value & 0x20) != 0)) && ((param1Value & 0x20) != 0)) {\n    UART_Receive_IT(ptrToParam1);\n    return;\n  }\n  if (((param5Value & 0xf) == 0) || ((param4Value = ptrToValue[5] & 1, param4Value == 0 && ((param1Value & 0x120) == 0)))) {\n    if (((param5Value & 0x80) != 0) && ((param1Value & 0x80) != 0)) {\n      UART_Transmit_IT(ptrToParam1);\n      return;\n    }\n    if (((param5Value & 0x40) != 0) && ((param1Value & 0x40) != 0)) {\n      UART_EndTransmit_IT(ptrToParam1);\n    }\n  }\n  else {\n    if (((param5Value & 1) != 0) && ((param1Value & 0x100) != 0)) {\n      ptrToParam1[0xf] = (uint *)((uint)ptrToParam1[0xf] | 1);\n    }\n    if (((param5Value & 4) != 0) && (param4Value != 0)) {\n      ptrToParam1[0xf] = (uint *)((uint)ptrToParam1[0xf] | 2);\n    }\n    if (((param5Value & 2) != 0) && (param4Value != 0)) {\n      ptrToParam1[0xf] = (uint *)((uint)ptrToParam1[0xf] | 4);\n    }\n    if (((param5Value & 8) != 0) && (param4Value != 0)) {\n      ptrToParam1[0xf] = (uint *)((uint)ptrToParam1[0xf] | 8);\n    }\n    if (ptrToParam1[0xf] != (uint *)0x0) {\n      if (((param5Value & 0x20) != 0) && ((param1Value & 0x20) != 0)) {\n        UART_Receive_IT(ptrToParam1);\n      }\n      if ((((uint)ptrToParam1[0xf] & 8) == 0) && (((*ptrToParam1)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(ptrToParam1);\n        ptrToParam1[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(ptrToParam1);\n      ptrToValue = *ptrToParam1;\n      if ((ptrToValue[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(ptrToParam1);\n        return;\n      }\n      ptrToValue[5] = ptrToValue[5] & 0xffffffbf;\n      if (ptrToParam1[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(ptrToParam1);\n        return;\n      }\n      ptrToParam1[0xd][0xd] = (uint)&LAB_080047d8_1;\n      indexVar1 = HAL_DMA_Abort_IT(ptrToParam1[0xd]);\n      if (indexVar1 != 0) {\n        (*(code *)ptrToParam1[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "handle_uart_interrupt_080046b8",
                "param_1": "ptrToParam1",
                "iVar1": "indexVar1",
                "uVar2": "param1Value",
                "puVar3": "ptrToValue",
                "uVar4": "param4Value",
                "uVar5": "param5Value"
            },
            "calling": [],
            "called": [
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_EndRxTransfer",
                "UART_Transmit_IT",
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "address"
            },
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "get_bit_value_080047f4",
            "code": "\nuint get_bit_value_080047f4(uint index,int address)\n\n{\n  return *(uint *)(address + ((index << 0x18) >> 0x1c) * 4) >> (index & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "get_bit_value_080047f4",
                "param_1": "index",
                "param_2": "address"
            },
            "calling": [
                "digitalRead",
                "digitalWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_in_array_0800480a",
            "code": "\nvoid setBitInArray_0800480a(uint value,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (value << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_bit_value_08004828",
            "code": "\nvoid updateBitValue_08004828(uint bitPosition,int dataArray)\n\n{\n  uint arrayIndex;\n  \n  arrayIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(dataArray + arrayIndex * 4) = *(uint *)(dataArray + arrayIndex * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_bit_value_08004828",
                "param_1": "bitPosition",
                "param_2": "dataArray",
                "uVar1": "arrayIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_address_from_param_08004848",
            "code": "\nundefined4 getAddressFromParam_08004848(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_address_from_param_08004848",
                "param_1": "param"
            },
            "calling": [
                "digitalRead",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_flag_and_return_value_08004884",
            "code": "\n\n\nundefined4 setFlagAndReturnValue_08004884(undefined4 flag)\n\n{\n  undefined4 returnVal;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnVal = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnVal = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnVal = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnVal = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnVal = 0x40011800;\n    break;\n  default:\n    returnVal = 0;\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_flag_and_return_value_08004884",
                "param_1": "flag",
                "uVar1": "returnVal"
            },
            "calling": [
                "uart_init",
                "digital_io_init",
                "HAL_ADC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "calculate_pinmap_0800492c",
            "code": "\nuint calculatePinmap_0800492c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  uint shiftedResult;\n  \n  result = pinmap_function(input1,&DAT_08007400,input3,input4,input4);\n  shiftedResult = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shiftedResult - 1) {\n    shiftedResult = 0;\n  }\n  return shiftedResult;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "calculate_pinmap_0800492c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shiftedResult"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "check_pin_type_08004948",
            "code": "\nundefined4 check_pin_type_08004948(undefined4 pin,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = pinmap_function(pin,&DAT_080074b4,param3,param4,param4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "check_pin_type_08004948",
                "param_1": "pin",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "initialize_gpio_port_08004974",
            "code": "\n\n\nvoid initialize_GPIO_Port_08004974(int *port_address,undefined4 param_value)\n\n{\n  undefined4 GPIO_Port;\n  uint port_settings;\n  int port_value;\n  uint pin_mask;\n  undefined4 pin_mode;\n  undefined4 pin_pull;\n  \n  port_value = *port_address;\n  if (port_value == 0x40012400) {\n    port_settings = _DAT_40021018 | 0x200;\n    port_value = 0x200;\n    _DAT_40021018 = port_settings;\n  }\n  else {\n    port_settings = 0x40012800;\n    if (port_value == 0x40012800) {\n      port_settings = _DAT_40021018 | 0x400;\n      port_value = 0x400;\n      _DAT_40021018 = port_settings;\n    }\n  }\n  GPIO_Port = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,param_value,port_settings,port_value);\n  pin_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  pin_mode = 3;\n  pin_pull = 0;\n  HAL_GPIO_Init(GPIO_Port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "initialize_gpio_port_08004974",
                "param_1": "port_address",
                "param_2": "param_value",
                "uVar1": "GPIO_Port",
                "uVar2": "port_settings",
                "iVar3": "port_value",
                "local_18": "pin_mask",
                "local_14": "pin_mode",
                "local_10": "pin_pull"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_control_registers_080049f0",
            "code": "\n\n\nvoid updateControlRegisters_080049f0(int *controlValue)\n\n{\n  if (*controlValue != 0x40012400) {\n    if (*controlValue == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_control_registers_080049f0",
                "param_1": "controlValue"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "read_adc_value_08004a4c",
            "code": "\nundefined2 read_adc_value_08004a4c(undefined4 peripheral_address)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 adc_value;\n  uint adc_channel;\n  undefined4 adc_config_option;\n  undefined4 adc_config_rank;\n  int peripheral_status;\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined4 local_var_3;\n  undefined4 local_var_4;\n  undefined4 local_var_5;\n  undefined4 local_var_6;\n  undefined4 local_var_7;\n  undefined4 local_var_8;\n  \n  memset(&peripheral_status,0,0x30);\n  adc_channel = 0;\n  adc_config_option = 0;\n  adc_config_rank = 0;\n  adc_value = 0;\n  peripheral_status = pinmap_peripheral(peripheral_address,&DAT_08007400);\n  if (peripheral_status == 0) {\n    adc_value = 0;\n  }\n  else {\n    local_var_1 = 0;\n    local_var_2 = 0;\n    local_var_3 = 0;\n    local_var_5 = 0;\n    local_var_7 = 0xe0000;\n    local_var_8 = 0;\n    local_var_4 = 1;\n    local_var_6 = 0;\n    DAT_20000080 = (undefined)peripheral_address;\n    iVar1 = HAL_ADC_Init(&peripheral_status);\n    if (iVar1 == 0) {\n      adc_channel = get_adc_channel(peripheral_address);\n      if (adc_channel < 0x12) {\n        adc_config_option = 1;\n        adc_config_rank = 2;\n        iVar1 = HAL_ADC_ConfigChannel(&peripheral_status,&adc_channel);\n        if (iVar1 == 0) {\n          iVar1 = HAL_ADCEx_Calibration_Start(&peripheral_status);\n          if (iVar1 == 0) {\n            iVar1 = HAL_ADC_Start(&peripheral_status);\n            if (iVar1 == 0) {\n              iVar1 = HAL_ADC_PollForConversion(&peripheral_status,10);\n              if (iVar1 == 0) {\n                uVar2 = HAL_ADC_GetState(&peripheral_status);\n                if ((uVar2 & 0x200) != 0) {\n                  adc_value = HAL_ADC_GetValue(&peripheral_status);\n                }\n                iVar1 = HAL_ADC_Stop(&peripheral_status);\n                if (iVar1 == 0) {\n                  iVar1 = HAL_ADC_DeInit(&peripheral_status);\n                  if (iVar1 != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "read_adc_value_08004a4c",
                "param_1": "peripheral_address",
                "local_46": "adc_value",
                "local_44": "adc_channel",
                "local_40": "adc_config_option",
                "local_3c": "adc_config_rank",
                "local_38": "peripheral_status",
                "local_34": "local_var_1",
                "local_30": "local_var_2",
                "local_2c": "local_var_3",
                "local_28": "local_var_4",
                "local_24": "local_var_5",
                "local_20": "local_var_6",
                "local_1c": "local_var_7",
                "local_10": "local_var_8"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "HAL_ADC_Init",
                "memset",
                "HAL_ADC_GetValue",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_Stop",
                "HAL_ADC_Start",
                "HAL_ADC_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "disable_timer_clock_08004b34",
            "code": "\nvoid disableTimerClock_08004b34(void)\n\n{\n  disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "timer_disable_clock": "disable_clock"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "stop_pwm_channels_08004b3c",
            "code": "\nvoid stopPwmChannels_08004b3c(undefined4 peripheral)\n\n{\n  int pwmChannel;\n  uint pinFunction;\n  int peripheralMapping [17];\n  \n  peripheralMapping[0] = pinmap_peripheral(peripheral,&DAT_080074b4);\n  if ((peripheralMapping[0] != 0) &&\n     ((((pwmChannel = get_pwm_channel(peripheral), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    pinFunction = pinmap_function(peripheral,&DAT_080074b4);\n    if ((pinFunction & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(peripheralMapping,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(peripheralMapping,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(peripheralMapping);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "stop_pwm_channels_08004b3c",
                "param_1": "peripheral",
                "iVar1": "pwmChannel",
                "uVar2": "pinFunction",
                "local_50": "peripheralMapping"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIM_PWM_DeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "get_current_tick_08004b94",
            "code": "\nvoid get_current_tick_08004b94(void)\n\n{\n  current_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "get_current_tick_08004b94",
                "HAL_GetTick": "current_tick"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "handle_sys_tick_interrupt_08004b9e",
            "code": "\nvoid handleSysTickInterrupt_08004b9e(void)\n\n{\n  incrementTickCounter();\n  processSysTickInterrupt();\n  handleSysTickEvent();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "handle_sys_tick_interrupt_08004b9e",
                "HAL_IncTick": "incrementTickCounter",
                "HAL_SYSTICK_IRQHandler": "processSysTickInterrupt",
                "noOsSystickHandler": "handleSysTickEvent"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "noOsSystickHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_gpio_08004bb0",
            "code": "\n\n\nvoid initializeGPIO_08004bb0(uint pinNumber,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpioPort;\n  uint pinMask;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 constantValue;\n  \n  gpioPort = set_GPIO_Port_Clock((pinNumber << 0x18) >> 0x1c);\n  pinMask = 1 << (pinNumber & 0xf) & 0xffff;\n  constantValue = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pinNumber - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pinNumber == 0xf) || (pinNumber == 0x13)) || (pinNumber == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2Copy = param2;\n  param3Copy = param3;\n  HAL_GPIO_Init(gpioPort,&pinMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_gpio_08004bb0",
                "param_1": "pinNumber",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpioPort",
                "local_20": "pinMask",
                "local_1c": "param2Copy",
                "local_18": "param3Copy",
                "local_14": "constantValue"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_pin_state_based_on_condition_08004c30",
            "code": "\nvoid setPinStateBasedOnCondition_08004c30(undefined4 port,undefined2 pin,int condition,undefined4 param)\n\n{\n  if (condition == 0) {\n    writePinState(port,pin,0,param,param);\n    return;\n  }\n  writePinState(port,pin,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_pin_state_based_on_condition_08004c30",
                "param_1": "port",
                "param_2": "pin",
                "param_3": "condition",
                "param_4": "param",
                "HAL_GPIO_WritePin": "writePinState"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "read_gpio_08004c48",
            "code": "\nvoid readGPIO_08004c48(undefined4 port,undefined2 pin,undefined4 gpio_mode,undefined4 gpio_pull)\n\n{\n  readPin(port,pin,gpio_mode,gpio_pull,gpio_pull);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "read_gpio_08004c48",
                "param_1": "port",
                "param_2": "pin",
                "param_3": "gpio_mode",
                "param_4": "gpio_pull",
                "HAL_GPIO_ReadPin": "readPin"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_system_08004c52",
            "code": "\nvoid initializeSystem_08004c52(void)\n\n{\n  initializeHardware();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "HAL_Init": "initializeHardware",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_from_param_list_08004c5e",
            "code": "\nundefined4 find_value_from_param_list_08004c5e(int value_to_find,char *param_list)\n\n{\n  while( true ) {\n    if (*param_list == -1) {\n      return 0;\n    }\n    if (*param_list == value_to_find) break;\n    param_list = param_list + 0xc;\n  }\n  return *(undefined4 *)(param_list + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_from_param_list_08004c5e",
                "param_1": "value_to_find",
                "param_2": "param_list"
            },
            "calling": [
                "pinmap_find_peripheral",
                "pinmap_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "find_peripheral_08004c78",
            "code": "\nundefined4 findPeripheral_08004c78(int input)\n\n{\n  undefined4 peripheral;\n  \n  if (input != -1) {\n    peripheral = pinmap_find_peripheral();\n    return peripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "find_peripheral_08004c78",
                "param_1": "input",
                "uVar1": "peripheral"
            },
            "calling": [
                "uart_init",
                "adc_read_value",
                "pwm_stop",
                "uart_debug_write",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_index_08004c8a",
            "code": "\nint find_value_index_08004c8a(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == target_value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_index_08004c8a",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_find_pin",
                "pinmap_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_pin_08004ca2",
            "code": "\nundefined4 findPin_08004ca2(int pinExists)\n\n{\n  undefined4 pinResult;\n  \n  if (pinExists != 0) {\n    pinResult = pinmap_find_pin();\n    return pinResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_pin_08004ca2",
                "param_1": "pinExists",
                "uVar1": "pinResult"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_in_array_08004cb2",
            "code": "\nundefined4 find_value_in_array_08004cb2(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == target_value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_pinmap_function_08004cce",
            "code": "\nundefined4 findPinmapFunction_08004cce(int inputValue)\n\n{\n  undefined4 functionResult;\n  \n  if (inputValue == -1) {\n    return 0xffffffff;\n  }\n  functionResult = pinmap_find_function();\n  return functionResult;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_pinmap_function_08004cce",
                "param_1": "inputValue",
                "uVar1": "functionResult"
            },
            "calling": [
                "uart_init",
                "get_adc_channel",
                "get_pwm_channel",
                "pwm_stop"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "compare_values_08004ce2",
            "code": "\nundefined4 compare_values_08004ce2(int value_1,char *value_2)\n\n{\n  if (value_1 == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*value_2 == -1) {\n      return 0;\n    }\n    if (value_1 == *value_2) break;\n    value_2 = value_2 + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "compare_values_08004ce2",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_non_zero_08004d06",
            "code": "\nint compareAndReturnNonZero_08004d06(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_non_zero_08004d06",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_function_08004d18",
            "code": "\nvoid executeCallbackFunction_08004d18(void)\n\n{\n  if (DAT_20000260 != (callbackFunction *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_function_08004d18",
                "code": "callbackFunction"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "endless_loop_08004d40",
            "code": "\nvoid endlessLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "endless_loop_08004d40"
            },
            "calling": [
                "_Error_Handler",
                "SystemClock_Config"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_hardware_08004d44",
            "code": "\n\n\nvoid initializeHardware_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_hardware_08004d44"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_permissions_08004d90",
            "code": "\n\n\nvoid updatePermissions_08004d90(int *address)\n\n{\n  if (*address == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*address == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*address == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*address == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_permissions_08004d90",
                "param_1": "address"
            },
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtractFour_08004df4(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "input"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_timer_function_08004df8",
            "code": "\nvoid executeTimerFunction_08004df8(int timerIndex)\n\n{\n  int timerObj;\n  \n  timerObj = getTimerObject();\n  if ((*(code **)(timerObj + 0x4c) != (code *)0x0) && (*(char *)(timerIndex + 0x1c) == '\\x01')) {\n    (**(code **)(timerObj + 0x4c))(timerObj,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_timer_function_08004df8",
                "param_1": "timerIndex",
                "iVar1": "timerObj",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_timer_function_08004e12",
            "code": "\nvoid executeTimerFunction_08004e12(void)\n\n{\n  int timerObj;\n  \n  timerObj = getTimerObject();\n  if (*(functionPointer **)(timerObj + 0x48) != (functionPointer *)0x0) {\n    (**(functionPointer **)(timerObj + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_timer_function_08004e12",
                "iVar1": "timerObj",
                "get_timer_obj": "getTimerObject",
                "code": "functionPointer"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "handle_timer_interrupt_08004e20",
            "code": "\nvoid handleTimerInterrupt_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    handleTimerIRQ();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "handle_timer_interrupt_08004e20",
                "HAL_TIM_IRQHandler": "handleTimerIRQ"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtract_four_08004e70(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "input_value"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "send_data_08004e74",
            "code": "\nvoid sendData_08004e74(int dataPtr,int flag,int param,undefined4 callback)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (param == *(int *)(dataPtr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(i2cObj + 0x88) = 0;\n      *(undefined *)(i2cObj + 0x5c) = 0;\n      if (*(code **)(i2cObj + 100) != (code *)0x0) {\n        (**(code **)(i2cObj + 100))();\n      }\n      transmitData(dataPtr,i2cObj + 0x68,*(undefined *)(i2cObj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2cObj + 0x5c) = 1;\n    receiveData(dataPtr,i2cObj + 0x68,0x20,8,callback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "send_data_08004e74",
                "param_1": "dataPtr",
                "param_2": "flag",
                "param_3": "param",
                "param_4": "callback",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmitData",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receiveData"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "initialize_i2_cand_enable_listen_08004ec4",
            "code": "\nvoid initializeI2CandEnableListen_08004ec4(undefined4 param)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (((*(code **)(i2cObj + 0x60) != (code *)0x0) && (*(char *)(i2cObj + 0x5c) == '\\x01')) &&\n     (*(char *)(i2cObj + 0x2c) != ' ')) {\n    (**(code **)(i2cObj + 0x60))(i2cObj + 0x68);\n  }\n  enableI2CListenInterrupt(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "initialize_i2_cand_enable_listen_08004ec4",
                "param_1": "param",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "enable_i2_c_listening_08004ef4",
            "code": "\nvoid enableI2CListening_08004ef4(undefined4 i2cObject)\n\n{\n  int i2cObjAddress;\n  \n  i2cObjAddress = get_i2c_obj();\n  if (*(char *)(i2cObjAddress + 0x5d) == '\\0') {\n    HAL_I2C_EnableListen_IT(i2cObject);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "enable_i2_c_listening_08004ef4",
                "param_1": "i2cObject",
                "iVar1": "i2cObjAddress"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "initialize_uart_pins_08004f4c",
            "code": "\n\n\nvoid initializeUARTPins_08004f4c(int *pinSettings)\n\n{\n  int uart1Pin;\n  int uart2Pin;\n  undefined4 gpioPortClock;\n  uint pinFunction;\n  uint uart1PinMask;\n  uint uart1PinConfig;\n  uint uart1PinConfigShifted;\n  undefined4 gpioInitValue;\n  \n  if (pinSettings != (int *)0x0) {\n    uart1Pin = pinmap_peripheral((int)*(char *)(pinSettings + 0x16),&DAT_0800764c);\n    uart2Pin = pinmap_peripheral((int)*(char *)((int)pinSettings + 0x59),&DAT_08007604);\n    if ((uart2Pin == 0) || (uart1Pin == 0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\",uart2Pin);\n    }\n    else {\n      uart1Pin = pinmap_merge_peripheral(uart1Pin);\n      *pinSettings = uart1Pin;\n      if (uart1Pin == 0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart1Pin == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pinSettings + 0x11) = 0;\n          *(undefined *)((int)pinSettings + 0x5a) = 0x25;\n        }\n        else if (uart1Pin == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pinSettings + 0x11) = 1;\n          *(undefined *)((int)pinSettings + 0x5a) = 0x26;\n        }\n        else if (uart1Pin == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pinSettings + 0x11) = 2;\n          *(undefined *)((int)pinSettings + 0x5a) = 0x27;\n        }\n        gpioPortClock = set_GPIO_Port_Clock((uint)((int)*(char *)((int)pinSettings + 0x59) << 0x18) >> 0x1c);\n        pinFunction = pinmap_function((int)*(char *)((int)pinSettings + 0x59),&DAT_08007604);\n        uart1PinMask = 1 << (*(byte *)((int)pinSettings + 0x59) & 0xf) & 0xffff;\n        uart1PinConfig = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        uart1PinConfigShifted = (pinFunction << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinFunction << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpioInitValue = 3;\n        HAL_GPIO_Init(gpioPortClock,&uart1PinMask);\n        gpioPortClock = set_GPIO_Port_Clock((uint)((int)*(char *)(pinSettings + 0x16) << 0x18) >> 0x1c);\n        pinFunction = pinmap_function((int)*(char *)(pinSettings + 0x16),&DAT_0800764c);\n        uart1PinMask = 1 << (*(byte *)(pinSettings + 0x16) & 0xf) & 0xffff;\n        uart1PinConfig = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        uart1PinConfigShifted = (pinFunction << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(gpioPortClock,&uart1PinMask);\n        (&DAT_2000032c)[*(byte *)(pinSettings + 0x11)] = pinSettings + 1;\n        pinSettings[1] = *pinSettings;\n        pinSettings[2] = pinSettings[0x12];\n        pinSettings[3] = pinSettings[0x13];\n        pinSettings[4] = pinSettings[0x14];\n        pinSettings[5] = pinSettings[0x15];\n        pinSettings[6] = 0xc;\n        pinSettings[7] = 0;\n        pinSettings[8] = 0;\n        HAL_UART_Init(pinSettings + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "initialize_uart_pins_08004f4c",
                "param_1": "pinSettings",
                "iVar1": "uart1Pin",
                "iVar2": "uart2Pin",
                "uVar3": "gpioPortClock",
                "uVar4": "pinFunction",
                "local_20": "uart1PinMask",
                "local_1c": "uart1PinConfig",
                "local_18": "uart1PinConfigShifted",
                "local_14": "gpioInitValue"
            },
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_UART_Init",
                "iprintf",
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "pinmap_function",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initialize_uart_08005384(void)\n\n{\n  int result;\n  undefined4 peripheral;\n  \n  result = pinmap_peripheral(2,&DAT_0800764c);\n  if (result != 0) {\n    peripheral = pinmap_peripheral(2,&DAT_0800764c);\n    DAT_200000e1 = pinmap_pin(peripheral,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    uart_init(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "result",
                "uVar2": "peripheral"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_peripheral",
                "pinmap_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "transmit_data_080053d4",
            "code": "\nuint transmit_data_080053d4(undefined4 data,uint data_length)\n\n{\n  int start_time;\n  int peripheral;\n  uint index;\n  \n  start_time = HAL_GetTick();\n  peripheral = pinmap_peripheral(2,&DAT_0800764c);\n  if (peripheral == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_2000032c)[index] == 0 ||\n       (peripheral = pinmap_peripheral(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[index] != peripheral))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_200000cc) && (uart_debug_init(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    index = (uint)DAT_200000cc;\n  }\n  do {\n    peripheral = HAL_UART_Transmit((&DAT_2000032c)[index],data,data_length & 0xffff,1000);\n    if (peripheral == 0) {\n      return data_length;\n    }\n    peripheral = HAL_GetTick();\n  } while ((uint)(peripheral - start_time) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "transmit_data_080053d4",
                "param_1": "data",
                "param_2": "data_length",
                "iVar1": "start_time",
                "iVar2": "peripheral",
                "uVar3": "index"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "HAL_GetTick",
                "pinmap_peripheral",
                "uart_debug_init",
                "HAL_UART_Transmit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "is_uart_state_valid_0800548c",
            "code": "\nbool is_uart_state_valid_0800548c(int uart_instance)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_2000032c)[*(byte *)(uart_instance + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "is_uart_state_valid_0800548c",
                "param_1": "uart_instance",
                "uVar1": "uart_state"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "is_uart_state_valid_080054b0",
            "code": "\nbool isUartStateValid_080054b0(int input)\n\n{\n  uint uartState;\n  \n  uartState = HAL_UART_GetState((&DAT_2000032c)[*(byteVal *)(input + 0x44)]);\n  return (uartState & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "is_uart_state_valid_080054b0",
                "param_1": "input",
                "uVar1": "uartState",
                "byte": "byteVal"
            },
            "calling": [],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "receive_serial_data_080054d4",
            "code": "\nundefined4 receive_serial_data_080054d4(int data_length,undefined *data_buffer,undefined4 param3,undefined4 param4)\n\n{\n  int is_serial_rx_active;\n  \n  if (data_length == 0) {\n    return 0xffffffff;\n  }\n  is_serial_rx_active = serial_rx_active();\n  if (is_serial_rx_active == 0) {\n    *data_buffer = *(undefined *)(data_length + 0x45);\n    HAL_UART_Receive_IT((&DAT_2000032c)[*(byte *)(data_length + 0x44)],data_length + 0x45,1,&DAT_2000032c,\n                        param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "receive_serial_data_080054d4",
                "param_1": "data_length",
                "param_2": "data_buffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "is_serial_rx_active"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "initialize_serial_port_08005510",
            "code": "\nvoid initializeSerialPort_08005510(int port,undefined4 baudRate,undefined4 dataBits,undefined4 stopBits)\n\n{\n  int isSerialRXActive;\n  uint portIndex;\n  \n  if (port != 0) {\n    isSerialRXActive = serial_rx_active();\n    if (isSerialRXActive == 0) {\n      portIndex = (uint)*(byte *)(port + 0x44);\n      *(undefined4 *)(&DAT_200002dc + portIndex * 4) = baudRate;\n      *(int *)(&DAT_200002f0 + portIndex * 4) = port;\n      HAL_NVIC_SetPriority((int)*(char *)(port + 0x5a),0,1,portIndex,stopBits);\n      HAL_NVIC_EnableIRQ((int)*(char *)(port + 0x5a));\n      HAL_UART_Receive_IT((&DAT_2000032c)[*(byte *)(port + 0x44)],port + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "initialize_serial_port_08005510",
                "param_1": "port",
                "param_2": "baudRate",
                "param_3": "dataBits",
                "param_4": "stopBits",
                "iVar1": "isSerialRXActive",
                "uVar2": "portIndex"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Receive_IT",
                "serial_rx_active",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "initialize_peripheral_08005568",
            "code": "\nvoid initializePeripheral_08005568(int peripheralAddress,undefined4 peripheralData)\n\n{\n  byte byteValue;\n  \n  if (peripheralAddress != 0) {\n    byteValue = *(byte *)(peripheralAddress + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byteValue * 4) = peripheralData;\n    *(int *)(&DAT_20000318 + (uint)byteValue * 4) = peripheralAddress;\n    HAL_NVIC_SetPriority((int)*(char *)(peripheralAddress + 0x5a),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(peripheralAddress + 0x5a));\n    HAL_UART_Transmit_IT\n              ((&DAT_2000032c)[*(byte *)(peripheralAddress + 0x44)],\n               *(int *)(peripheralAddress + 100) + (uint)*(ushort *)(peripheralAddress + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "initialize_peripheral_08005568",
                "param_1": "peripheralAddress",
                "param_2": "peripheralData",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_value_index_080055bc",
            "code": "\nuint find_value_index_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_value_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_uart_function_080055e0",
            "code": "\nvoid executeUartFunction_080055e0(void)\n\n{\n  uint uartIndex;\n  \n  uartIndex = uart_index();\n  if (uartIndex < 5) {\n    (**(code **)(&DAT_200002dc + uartIndex * 4))(*(undefined4 *)(&DAT_200002f0 + uartIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_uart_function_080055e0",
                "uVar1": "uartIndex"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "transmit_data_08005604",
            "code": "\nvoid transmitData_08005604(void)\n\n{\n  uint uartIndex;\n  int result;\n  int uartInstance;\n  \n  uartIndex = uart_index();\n  uartInstance = *(int *)(&DAT_20000318 + uartIndex * 4);\n  if ((uartIndex < 5) && (result = (**(code **)(&DAT_20000304 + uartIndex * 4))(uartInstance), result != -1)) {\n    transmitData_08005604UsingUART\n              ((&DAT_2000032c)[*(byte *)(uartInstance + 0x44)],\n               *(int *)(uartInstance + 100) + (uint)*(ushort *)(uartInstance + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "uVar1": "uartIndex",
                "iVar2": "result",
                "iVar3": "uartInstance",
                "HAL_UART_Transmit_IT": "transmitDataUsingUART"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "uart_index",
                "HAL_UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocate_memory_080056d8(int size)\n\n{\n  undefined *memory_block;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  memory_block = DAT_20000340;\n  if (DAT_20000340 + size <= end_of_stack) {\n    DAT_20000340 = DAT_20000340 + size;\n    return memory_block;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "memory_block",
                "&stack0x00000000": "end_of_stack"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_return_value_08005714",
            "code": "\nundefined4 initializeReturnValue_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_return_value_08005714"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "set_memory_flags_0800571a",
            "code": "\nundefined4 setMemoryFlags_0800571a(undefined4 flagAddress,int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "set_memory_flags_0800571a",
                "param_1": "flagAddress",
                "param_2": "baseAddress"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "check_success_08005724",
            "code": "\nundefined4 check_success_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "check_success_08005724"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_zero_08005728",
            "code": "\nundefined4 initializeZero_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_zero_08005728"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_program_0800572c",
            "code": "\nvoid initializeProgram_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_program_0800572c",
                "undefined4": "void"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "write_debug_output_08005730",
            "code": "\nvoid write_debug_output_08005730(undefined4 unused_param_1,undefined4 data_param_1,undefined4 data_param_2,undefined4 unused_param_2)\n\n{\n  uart_debug_write(data_param_1,data_param_2,data_param_2,unused_param_2,unused_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "write_debug_output_08005730",
                "param_1": "unused_param_1",
                "param_2": "data_param_1",
                "param_3": "data_param_2",
                "param_4": "unused_param_2"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_data_08005740",
            "code": "\nundefined4 initializeData_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_data_08005740"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "initialize_08005750",
            "code": "\nundefined4 initialize_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "initialize_08005750"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "map_parameter_value_08005754",
            "code": "\nuint mapParameterValue_08005754(uint inputValue)\n\n{\n  bool isInRange;\n  char charValue;\n  uint outputValue;\n  \n  if (inputValue < 0xe) {\n    if (inputValue + 0x2e < 0x3c) {\n      isInRange = true;\n    }\n    else {\n      isInRange = false;\n    }\n  }\n  else {\n    isInRange = inputValue < 0x3c;\n  }\n  if (isInRange) {\n    if (inputValue < 0xe) {\n      inputValue = inputValue + 0x2e;\n    }\n    charValue = (&DAT_080076f0)[inputValue];\n  }\n  else {\n    charValue = -1;\n  }\n  if (charValue == -1) {\n    outputValue = 0;\n  }\n  else {\n    outputValue = adc_read_value();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return outputValue >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return outputValue << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_08005754": "map_parameter_value_08005754",
                "param_1": "inputValue",
                "bVar1": "isInRange",
                "cVar2": "charValue",
                "uVar3": "outputValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "configure_pin_080057b4",
            "code": "\nvoid configurePin_080057b4(uint pinIndex,undefined4 ioMode,undefined4 ioConfig,undefined *pinData)\n\n{\n  int pinConfigured;\n  undefined *pinMap;\n  int pinId;\n  \n  if (pinIndex < 0x3c) {\n    pinId = (int)(char)(&DAT_080076f0)[pinIndex];\n    pinMap = &DAT_080076f0;\n  }\n  else {\n    pinId = -1;\n    pinMap = pinData;\n  }\n  if (pinId != -1) {\n    pinConfigured = is_pin_configured(pinId,&DAT_20000344,ioConfig,pinMap,pinData);\n    if (pinConfigured != 0) {\n      pinConfigured = pin_in_pinmap(pinId,&DAT_080074b4);\n      if (pinConfigured != 0) {\n        pwm_stop(pinId);\n      }\n      reset_pin_configured(pinId,&DAT_20000344);\n    }\n    switch(ioMode) {\n    case 0:\n      digital_io_init(pinId,0);\n      break;\n    case 1:\n      digital_io_init(pinId,1,0);\n      break;\n    case 2:\n      digital_io_init(pinId,0,1);\n      break;\n    case 3:\n      digital_io_init(pinId,0,2);\n    }\n    set_pin_configured(pinId,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "param_1": "pinIndex",
                "param_2": "ioMode",
                "param_3": "ioConfig",
                "param_4": "pinData",
                "iVar1": "pinConfigured",
                "puVar2": "pinMap",
                "iVar3": "pinId"
            },
            "calling": [
                "setup",
                "MAX31855",
                "FUN_080013a4"
            ],
            "called": [
                "reset_pin_configured",
                "pin_in_pinmap",
                "digital_io_init",
                "pwm_stop",
                "set_pin_configured",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "configure_pin_08005848",
            "code": "\nvoid configurePin_08005848(uint pinIndex,undefined4 value,undefined4 configParam,undefined *pinConfigData)\n\n{\n  int pinConfigResult;\n  undefined4 gpioPort;\n  undefined *pinConfigDataPtr;\n  uint pinConfigDataValue;\n  \n  if (pinIndex < 0x3c) {\n    pinConfigDataValue = (uint)(char)(&DAT_080076f0)[pinIndex];\n    pinConfigDataPtr = &DAT_080076f0;\n  }\n  else {\n    pinConfigDataValue = 0xffffffff;\n    pinConfigDataPtr = pinConfigData;\n  }\n  if ((pinConfigDataValue != 0xffffffff) &&\n     (pinConfigResult = is_pin_configured(pinConfigDataValue,&DAT_20000358,configParam,pinConfigDataPtr,pinConfigData), pinConfigResult != 0)) {\n    gpioPort = get_GPIO_Port((pinConfigDataValue << 0x18) >> 0x1c);\n    digital_io_write(gpioPort,1 << (pinConfigDataValue & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "configure_pin_08005848",
                "param_1": "pinIndex",
                "param_2": "value",
                "param_3": "configParam",
                "param_4": "pinConfigData",
                "iVar1": "pinConfigResult",
                "uVar2": "gpioPort",
                "puVar3": "pinConfigDataPtr",
                "uVar4": "pinConfigDataValue"
            },
            "calling": [
                "setup",
                "readData",
                "MAX31855",
                "pulseEnable",
                "FUN_080013a4",
                "write8bits",
                "write4bits",
                "loop",
                "send"
            ],
            "called": [
                "get_GPIO_Port",
                "digital_io_write",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_gpio_pin_08005890",
            "code": "\nchar check_gpio_pin_08005890(uint pin_number)\n\n{\n  char is_pin_valid;\n  int is_configured;\n  undefined4 gpio_port;\n  uint mapped_pin;\n  \n  if (pin_number < 0x3c) {\n    mapped_pin = (uint)(char)(&DAT_080076f0)[pin_number];\n  }\n  else {\n    mapped_pin = 0xffffffff;\n  }\n  if (mapped_pin == 0xffffffff) {\n    is_pin_valid = '\\0';\n  }\n  else {\n    is_configured = is_pin_configured(mapped_pin,&DAT_20000358);\n    if (is_configured == 0) {\n      is_pin_valid = '\\0';\n    }\n    else {\n      gpio_port = get_GPIO_Port((mapped_pin << 0x18) >> 0x1c);\n      is_pin_valid = digital_io_read(gpio_port,1 << (mapped_pin & 0xf) & 0xffff);\n    }\n  }\n  if (is_pin_valid != '\\0') {\n    is_pin_valid = '\\x01';\n  }\n  return is_pin_valid;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_gpio_pin_08005890",
                "param_1": "pin_number",
                "cVar1": "is_pin_valid",
                "iVar2": "is_configured",
                "uVar3": "gpio_port",
                "uVar4": "mapped_pin"
            },
            "calling": [
                "readData",
                "loop"
            ],
            "called": [
                "digital_io_read",
                "get_GPIO_Port",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "get_current_time_080058e0",
            "code": "\nvoid get_current_time_080058e0(void)\n\n{\n  GetCurrentMilli();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "get_current_time_080058e0"
            },
            "calling": [
                "setup",
                "Compute",
                "FUN_08001ab0",
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_result_0800591e",
            "code": "\nushort calculateResult_0800591e(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x134) + 0x40) - *(short *)(inputValue + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_result_0800591e",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "update_buffer_0800598a",
            "code": "\nvoid updateBuffer_0800598a(int buffer)\n\n{\n  int input;\n  ushort nextIndex;\n  undefined newCharacter;\n  \n  input = uart_getc(buffer,&newCharacter);\n  if ((input == 0) &&\n     (nextIndex = *(short *)(buffer + 0x60) + 1U & 0x3f, nextIndex != *(ushort *)(buffer + 0x62))) {\n    *(undefined *)(*(int *)(buffer + 0x5c) + (uint)*(ushort *)(buffer + 0x60)) = newCharacter;\n    *(ushort *)(buffer + 0x60) = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "update_buffer_0800598a",
                "param_1": "buffer",
                "iVar1": "input",
                "uVar2": "nextIndex",
                "local_9": "newCharacter"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_data_structures_08005a44",
            "code": "\nvoid initializeDataStructures_08005a44(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_data_structures_08005a44",
                "param_1": "baseAddress"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "configure_uart_08005a68",
            "code": "\nvoid configureUart_08005a68(int uart_instance,undefined4 baud_rate,byte config_bits)\n\n{\n  uint data_bits;\n  char *error_message;\n  byte config_bits_low;\n  int config_bits_count;\n  byte *uart_data_ptr;\n  char uart_mode;\n  int uart_data_offset;\n  code *error_handler;\n  \n  *(undefined4 *)(uart_instance + 0x11c) = baud_rate;\n  *(byte *)(uart_instance + 0x140) = config_bits;\n  config_bits_low = config_bits & 7;\n  if (config_bits_low == 4) {\n    config_bits_count = 7;\n  }\n  else if (config_bits_low == 6) {\n    config_bits_count = 8;\n  }\n  else if (config_bits_low == 2) {\n    config_bits_count = 6;\n  }\n  else {\n    config_bits_count = 0;\n  }\n  if ((config_bits & 0x30) == 0x30) {\n    *(undefined4 *)(uart_instance + 0x128) = 0x600;\n    config_bits_count = config_bits_count + 1;\n  }\n  else if ((config_bits & 0x20) == 0) {\n    *(undefined4 *)(uart_instance + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(uart_instance + 0x128) = 0x400;\n    config_bits_count = config_bits_count + 1;\n  }\n  if ((config_bits & 8) == 0) {\n    *(undefined4 *)(uart_instance + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(uart_instance + 0x124) = 0x2000;\n  }\n  if (config_bits_count == 8) {\n    *(undefined4 *)(uart_instance + 0x120) = 0;\n  }\n  else if (config_bits_count == 9) {\n    *(undefined4 *)(uart_instance + 0x120) = 0x1000;\n  }\n  else {\n    config_bits_count = 0;\n  }\n  if (config_bits_count != 0) {\n    uart_init(uart_instance + 0xd4);\n    uart_attach_rx_callback(uart_instance + 0xd4,0x800598b);\n    return;\n  }\n  error_message = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  error_handler = (code *)0x8005b12;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  uart_data_ptr = *(byte **)(data_bits + uart_data_offset);\n  error_message[0x1e] = uart_mode;\n  *(undefined *)(*uart_data_ptr + 0x1e) = 0;\n  if (data_bits < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[data_bits];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*error_handler)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "configure_uart_08005a68",
                "param_1": "uart_instance",
                "param_2": "baud_rate",
                "param_3": "config_bits",
                "extraout_r1": "data_bits",
                "pcVar1": "error_message",
                "bVar2": "config_bits_low",
                "iVar3": "config_bits_count",
                "pbVar4": "uart_data_ptr",
                "unaff_r4": "uart_mode",
                "unaff_r6": "uart_data_offset",
                "UNRECOVERED_JUMPTABLE": "error_handler"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "uart_attach_rx_callback",
                "uart_init",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "update_value_based_on_index_08005b24",
            "code": "\nvoid updateValueBasedOnIndex_08005b24(int arrayAddress,uint index)\n\n{\n  undefined value;\n  code *jumpTable;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(arrayAddress + 0x12d) = value;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "update_value_based_on_index_08005b24",
                "param_1": "arrayAddress",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_value_in_memory_08005b3c",
            "code": "\nvoid setValueInMemory_08005b3c(int memoryAddress,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(memoryAddress + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_value_in_memory_08005b3c",
                "param_1": "memoryAddress",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_communication_08005b54",
            "code": "\nundefined4 *\ninitializeCommunication_08005b54(undefined4 *communicationData,undefined4 pinNumber,undefined4 receiveBufferSize,undefined4 transmitBufferSize)\n\n{\n  undefined pinnedPin;\n  \n  communicationData[1] = 0;\n  communicationData[2] = 1000;\n  *communicationData = &PTR_LAB_080059c8_1_08007804;\n  if (communicationData == (undefined4 *)&DAT_2000036c) {\n    setReceive(&DAT_2000036c,0,receiveBufferSize,&DAT_2000036c,transmitBufferSize);\n    setTransmit(&DAT_2000036c,1);\n  }\n  else {\n    pinnedPin = pinmap_pin(pinNumber,&DAT_08007604);\n    *(undefined *)((int)communicationData + 0x12d) = pinnedPin;\n    pinnedPin = pinmap_pin(pinNumber,&DAT_0800764c);\n    *(undefined *)(communicationData + 0x4b) = pinnedPin;\n  }\n  initialize(communicationData);\n  return communicationData;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_communication_08005b54",
                "param_1": "communicationData",
                "param_2": "pinNumber",
                "param_3": "receiveBufferSize",
                "param_4": "transmitBufferSize",
                "uVar1": "pinnedPin",
                "init": "initialize",
                "setRx": "setReceive",
                "setTx": "setTransmit"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "init",
                "pinmap_pin",
                "setRx",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_serial_communication_08005bb0",
            "code": "\nvoid initializeSerialCommunication_08005bb0(int condition1,int condition2,undefined4 param3,undefined4 param4)\n\n{\n  if (condition1 != 1) {\n    return;\n  }\n  if (condition2 == 0xffff) {\n    HardwareSerial(&DAT_2000036c,0x40004400,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_serial_communication_08005bb0",
                "param_1": "condition1",
                "param_2": "condition2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initializeData_08005c1c(undefined4 *outputData,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *outputData = &DAT_08007858;\n  *(undefined *)(outputData + 1) = value1;\n  *(undefined *)((int)outputData + 5) = value2;\n  *(undefined *)((int)outputData + 6) = value3;\n  *(undefined *)((int)outputData + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "outputData",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_ip_address_08005c38",
            "code": "\nvoid initializeIPAddress_08005c38(int statusFlag,int valueFlag)\n\n{\n  if ((statusFlag == 1) && (valueFlag == 0xffff)) {\n    IPAddress(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_ip_address_08005c38",
                "param_1": "statusFlag",
                "param_2": "valueFlag"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "process_binary_08005c96",
            "code": "\nundefined4 process_binary_08005c96(int *input_array,int input_length,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 string_length;\n  \n  if (input_length != 0) {\n    string_length = strlen(input_length);\n    string_length = (**(code **)(*input_array + 4))(input_array,input_length,string_length,*(code **)(*input_array + 4),param_4);\n    return string_length;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "process_binary_08005c96",
                "param_1": "input_array",
                "param_2": "input_length",
                "uVar1": "string_length"
            },
            "calling": [
                "setup",
                "printFloat",
                "FUN_08005cd4",
                "loop"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_ptr)\n\n{\n  (**(code **)*function_ptr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_ptr"
            },
            "calling": [
                "printFloat",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_08005cc0",
            "code": "\nvoid executeFunction_08005cc0(int *functionPointer,undefined4 argument1,undefined4 argument2,undefined4 argument3)\n\n{\n  (**(code **)(*functionPointer + 4))(functionPointer,&DAT_0800786c,2,*(code **)(*functionPointer + 4),argument3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "functionPointer",
                "param_2": "argument1",
                "param_3": "argument2",
                "param_4": "argument3"
            },
            "calling": [
                "println",
                "FUN_08005cd4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_total_08005cd4",
            "code": "\nint calculate_total_08005cd4(undefined4 input_value)\n\n{\n  int binary_processing_result;\n  int function_execution_result;\n  \n  binary_processing_result = process_binary_08005c96();\n  function_execution_result = execute_function_08005cc0(input_value);\n  return function_execution_result + binary_processing_result;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_total_08005cd4",
                "param_1": "input_value",
                "iVar1": "binary_processing_result",
                "iVar2": "function_execution_result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_base_08005ce8",
            "code": "\nundefined4 convertBase_08005ce8(int *numPtr,uint num,uint base)\n\n{\n  char convertedChar;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *buffer;\n  char convertedNum [9];\n  \n  convertedNum[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  buffer = convertedNum + 1;\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - (quotient * base & 0xff) & 0xff;\n    buffer = buffer + -1;\n    convertedChar = (char)remainder;\n    if (remainder < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *buffer = convertedChar;\n    num = quotient;\n  } while (quotient != 0);\n  if (buffer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = strlen(buffer);\n    result = (**(code **)(*numPtr + 4))(numPtr,buffer,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "numPtr",
                "param_2": "num",
                "param_3": "base",
                "cVar1": "convertedChar",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "buffer",
                "local_15": "convertedNum"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "print_formatted_number_08005d42",
            "code": "\nint printFormattedNumber_08005d42(undefined4 *printFuncPtr,uint number,uint base)\n\n{\n  int returnValue;\n  int negativeReturnValue;\n  \n  if (base == 0) {\n    returnValue = (**(code **)*printFuncPtr)(printFuncPtr,number & 0xff);\n    return returnValue;\n  }\n  if (base != 10) {\n    returnValue = printNumber(printFuncPtr,number,base & 0xff);\n    return returnValue;\n  }\n  if (-1 < (int)number) {\n    returnValue = printNumber(printFuncPtr,number,10);\n    return returnValue;\n  }\n  returnValue = execute_function_08005cb6(printFuncPtr,0x2d);\n  negativeReturnValue = printNumber(printFuncPtr,-number,10);\n  return negativeReturnValue + returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "print_formatted_number_08005d42",
                "param_1": "printFuncPtr",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "returnValue",
                "iVar2": "negativeReturnValue"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "display_formatted_number_08005d82",
            "code": "\nvoid displayFormattedNumber_08005d82(void)\n\n{\n  printFormattedNumber();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "display_formatted_number_08005d82",
                "print_formatted_number_08005d42": "printFormattedNumber"
            },
            "calling": [
                "printFloat",
                "loop"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "print_number_or_execute_function_08005d8a",
            "code": "\nvoid printNumberOrExecuteFunction_08005d8a(undefined4 *functionPointer,uint value,uint flag,undefined4 parameter)\n\n{\n  if (flag != 0) {\n    printNumber(functionPointer,value,flag & 0xff);\n    return;\n  }\n  (**(function **)*functionPointer)(functionPointer,value & 0xff,0,*(function **)*functionPointer,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "print_number_or_execute_function_08005d8a",
                "param_1": "functionPointer",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "parameter",
                "code": "function"
            },
            "calling": [
                "printFloat"
            ],
            "called": [
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "process_number_08005da8",
            "code": "\nint processNumber_08005da8(undefined4 input1,undefined4 input2,undefined4 value1,uint value2,byte count)\n\n{\n  int result;\n  undefined4 temp1;\n  int temp2;\n  byte temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  \n  result = __unorddf2(value1,value2,value1,value2);\n  if (result == 0) {\n    result = __unorddf2(value1,value2 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = __aeabi_dcmple(value1,value2 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = process_binary_08005c96(input1,&DAT_08007860);\n    }\n    else {\n      result = __aeabi_dcmpgt(value1,value2,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = __aeabi_dcmplt(value1,value2,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = __aeabi_dcmplt(value1,value2,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function_08005cb6(input1,0x2d);\n            value2 = value2 + 0x80000000;\n          }\n          temp4 = 0x3fe0000000000000;\n          for (temp3 = 0; temp1 = (undefined4)((ulonglong)temp4 >> 0x20), temp3 < count;\n              temp3 = temp3 + 1) {\n            temp4 = __divdf3((int)temp4,temp1,0,0x40240000);\n          }\n          temp4 = __aeabi_dadd(value1,value2,(int)temp4,temp1);\n          temp1 = __fixunsdfsi();\n          temp5 = __floatunsidf();\n          temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                           (int)((ulonglong)temp5 >> 0x20));\n          temp2 = print_number_or_execute_function_08005d8a(input1,temp1,10);\n          result = result + temp2;\n          if (count != 0) {\n            temp2 = process_binary_08005c96(input1,&DAT_08007868);\n            result = result + temp2;\n          }\n          while (count != 0) {\n            temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x40240000);\n            temp1 = __fixdfsi();\n            temp2 = display_formatted_number_08005d82(input1,temp1,10);\n            result = result + temp2;\n            temp5 = __floatsidf(temp1);\n            temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                             (int)((ulonglong)temp5 >> 0x20));\n            count = count - 1;\n          }\n        }\n        else {\n          result = process_binary_08005c96(input1,&DAT_08007864);\n        }\n      }\n      else {\n        result = process_binary_08005c96(input1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = process_binary_08005c96(input1,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "process_number_08005da8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "count",
                "iVar1": "result",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "bVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5"
            },
            "calling": [
                "print"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__fixdfsi",
                "__floatsidf",
                "FUN_08005d8a",
                "__aeabi_dcmpgt",
                "FUN_08005d82",
                "__muldf3",
                "__aeabi_dadd",
                "FUN_08005cb6",
                "__subdf3",
                "__aeabi_dcmple",
                "__divdf3",
                "__fixunsdfsi",
                "__unorddf2",
                "FUN_08005c96",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "print_float_wrapper_08005f2c",
            "code": "\nvoid printFloatWrapper_08005f2c(void)\n\n{\n  printFloat();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "print_float_wrapper_08005f2c"
            },
            "calling": [
                "println",
                "loop"
            ],
            "called": [
                "printFloat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_and_print_result_08005f40",
            "code": "\nint calculateAndPrintResult_08005f40(undefined4 inputValue)\n\n{\n  int printResult;\n  int executionResult;\n  \n  printResult = print();\n  executionResult = execute_function_08005cc0(inputValue);\n  return executionResult + printResult;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_and_print_result_08005f40",
                "param_1": "inputValue",
                "iVar1": "printResult",
                "iVar2": "executionResult"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08005cc0",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "configure_hardware_08005f5e",
            "code": "\nvoid configureHardware_08005f5e(void)\n\n{\n  setInterruptPriorityGrouping(3);\n  initializeHardwareConfiguration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "configure_hardware_08005f5e",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "initialize_hardware_configuration_08001c32": "initializeHardwareConfiguration"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "FUN_08001c32",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "run_program_08005f6c",
            "code": "\nvoid runProgram_08005f6c(void)\n\n{\n  initializeVariant();\n  setupProgram();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "run_program_08005f6c",
                "initVariant": "initializeVariant",
                "setup": "setupProgram",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "setup",
                "serialEventRun",
                "loop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_bits_08005f8c",
            "code": "\nchar count_bits_08005f8c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_bits_08005f8c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_parameters_08005fc8",
            "code": "\nvoid initializeParameters_08005fc8(int inputCondition,int specialValue,undefined4 unused1,undefined4 unused2)\n\n{\n  if (inputCondition != 1) {\n    return;\n  }\n  if (specialValue == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    registerCleanupFunction(0,cleanupFunction,&DAT_20000000,&DAT_200004b8,unused2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_parameters_08005fc8",
                "param_1": "inputCondition",
                "param_2": "specialValue",
                "param_3": "unused1",
                "param_4": "unused2",
                "__aeabi_atexit": "registerCleanupFunction",
                "&LAB_08005fa0_1": "cleanupFunction"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "check_and_execute_function_080060d4",
            "code": "\nvoid checkAndExecuteFunction_080060d4(int functionPointer)\n\n{\n  int pinId;\n  \n  if (*(int *)(functionPointer + 8) != 0) {\n    (**(code **)(functionPointer + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pinId = get_pin_id();\n  if ((&DAT_200004c4)[pinId * 5] != 0) {\n    checkAndExecuteFunction_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "check_and_execute_function_080060d4",
                "param_1": "functionPointer",
                "iVar1": "pinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_and_execute_operation_080060e4",
            "code": "\nvoid checkAndExecuteOperation_080060e4(void)\n\n{\n  int pinId;\n  \n  pinId = getPinId();\n  if ((&DAT_200004c4)[pinId * 5] != 0) {\n    executeOperation();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_and_execute_operation_080060e4",
                "iVar1": "pinId",
                "get_pin_id": "getPinId",
                "operator()": "executeOperation"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "register_exit_function_08006112",
            "code": "\nvoid registerExitFunction_08006112(undefined4 parameter,undefined4 exitFunction)\n\n{\n  registerAtExit(exitFunction,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "register_exit_function_08006112",
                "param_1": "parameter",
                "param_2": "exitFunction",
                "__cxa_atexit": "registerAtExit"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "log_assertion_error_0800611c",
            "code": "\nvoid logAssertionError_0800611c(undefined4 fileName,undefined4 lineNumber,char *message,undefined4 functionName)\n\n{\n  undefined4 outputFile;\n  char *additionalInfo;\n  undefined8 aborted;\n  undefined4 functionNameCopy;\n  \n  outputFile = *(undefined4 *)(DAT_200000f8 + 0xc);\n  functionNameCopy = functionName;\n  if (message == (char *)0x0) goto LAB_08006140;\n  additionalInfo = \", function: \";\n  do {\n    fiprintf(outputFile,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,fileName,lineNumber,\n             additionalInfo,message,functionNameCopy);\n    aborted = abort();\n    lineNumber = (undefined4)((ulonglong)aborted >> 0x20);\n    outputFile = (undefined4)aborted;\nLAB_08006140:\n    message = \"\";\n    additionalInfo = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "log_assertion_error_0800611c",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "message",
                "param_4": "functionName",
                "uVar1": "outputFile",
                "pcVar2": "additionalInfo",
                "uVar3": "aborted",
                "uVar4": "functionNameCopy"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_left_by32_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shiftLeftBy32_08006158(undefined4 param1,uint param2)\n\n{\n  return (ulonglong)param2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_left_by32_08006158",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "print_formatted_data_08006174",
            "code": "\nvoid printFormattedData_08006174(undefined4 formatString,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 formattedValue;\n  undefined4 temporaryValue;\n  \n  formattedValue = value2;\n  temporaryValue = value3;\n  _vfiprintf_r(DAT_200000f8,formatString,value1,&formattedValue,formatString,&formattedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "print_formatted_data_08006174",
                "param_1": "formatString",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uStack_8": "formattedValue",
                "uStack_4": "temporaryValue"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_functions_08006198",
            "code": "\nvoid executeFunctions_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  _init();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "premain",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fillMemory_080061e0(undefined *destination,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + size;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "std.isra.0",
                "adc_read_value",
                "__sfp",
                "__sfmoreglue"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "allocate_and_lock_memory_080061f0",
            "code": "\nvoid allocate_and_lock_memory_080061f0(undefined4 *out_error_code,int size,undefined4 placeholder1,undefined4 placeholder2)\n\n{\n  int **placeholder3;\n  int **current_ptr;\n  int **next_ptr;\n  int *temp_ptr;\n  int **previous_ptr;\n  int **new_ptr;\n  \n  if (size == 0) {\n    return;\n  }\n  new_ptr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_ptr = (int **)((int)new_ptr + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  next_ptr = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    new_ptr[1] = (int *)0x0;\n    current_ptr = placeholder3;\n    DAT_200005f8 = new_ptr;\n  }\n  else {\n    next_ptr = DAT_200005f8;\n    if (new_ptr < DAT_200005f8) {\n      current_ptr = (int **)*new_ptr;\n      next_ptr = (int **)((int)new_ptr + (int)current_ptr);\n      if (DAT_200005f8 == next_ptr) {\n        temp_ptr = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        next_ptr = (int **)((int)temp_ptr + (int)current_ptr);\n        *new_ptr = (int *)next_ptr;\n      }\n      new_ptr[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = new_ptr;\n    }\n    else {\n      do {\n        previous_ptr = next_ptr;\n        next_ptr = (int **)previous_ptr[1];\n        if (next_ptr == (int **)0x0) break;\n      } while (next_ptr <= new_ptr);\n      current_ptr = (int **)*previous_ptr;\n      if ((int **)((int)previous_ptr + (int)current_ptr) == new_ptr) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_ptr);\n        *previous_ptr = (int *)current_ptr;\n        if (next_ptr == (int **)((int)previous_ptr + (int)current_ptr)) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp_ptr);\n          *previous_ptr = (int *)current_ptr;\n          previous_ptr[1] = (int *)next_ptr;\n        }\n      }\n      else if (new_ptr < (int **)((int)previous_ptr + (int)current_ptr)) {\n        *out_error_code = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_ptr + (int)*new_ptr);\n        if (next_ptr == current_ptr) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_ptr = (int **)((int)temp_ptr + (int)*new_ptr);\n          *new_ptr = (int *)current_ptr;\n        }\n        new_ptr[1] = (int *)next_ptr;\n        previous_ptr[1] = (int *)new_ptr;\n      }\n    }\n  }\n  __malloc_unlock(out_error_code,current_ptr,next_ptr,placeholder2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "allocate_and_lock_memory_080061f0",
                "param_1": "out_error_code",
                "param_2": "size",
                "param_3": "placeholder1",
                "param_4": "placeholder2",
                "extraout_r1": "placeholder3",
                "ppiVar1": "current_ptr",
                "ppiVar2": "next_ptr",
                "piVar3": "temp_ptr",
                "ppiVar4": "previous_ptr",
                "ppiVar5": "new_ptr"
            },
            "calling": [
                "__swsetup_r",
                "abort"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_memory_08006288",
            "code": "\nuint allocate_memory_08006288(undefined4 *output,uint size)\n\n{\n  uint *current_block;\n  int block_size_diff;\n  uint *previous_block;\n  uint block_size_diff_abs;\n  uint *last_block;\n  uint allocated_memory_size;\n  \n  allocated_memory_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_memory_size < 0xc) {\n    allocated_memory_size = 0xc;\n  }\n  if (((int)allocated_memory_size < 0) || (allocated_memory_size < size)) {\n    *output = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = DAT_200005f8;\n    last_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_size_diff_abs = *previous_block - allocated_memory_size;\n      if (-1 < (int)block_size_diff_abs) {\n        if (block_size_diff_abs < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_size_diff_abs;\n          *(uint *)((int)previous_block + block_size_diff_abs) = allocated_memory_size;\n          last_block = (uint *)((int)previous_block + block_size_diff_abs);\n        }\n        goto LAB_080062ec;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = _sbrk_r(output);\n    }\n    current_block = (uint *)_sbrk_r(output,allocated_memory_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (block_size_diff = _sbrk_r(output,(int)last_block - (int)current_block), block_size_diff != -1)))) {\n      *last_block = allocated_memory_size;\nLAB_080062ec:\n      __malloc_unlock(output);\n      allocated_memory_size = (int)last_block + 0xbU & 0xfffffff8;\n      block_size_diff = allocated_memory_size - (int)(last_block + 1);\n      if (block_size_diff != 0) {\n        *(int *)((int)last_block + block_size_diff) = -block_size_diff;\n        return allocated_memory_size;\n      }\n      return allocated_memory_size;\n    }\n    *output = 0xc;\n    __malloc_unlock(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "output",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "block_size_diff",
                "puVar3": "previous_block",
                "uVar4": "block_size_diff_abs",
                "puVar5": "last_block",
                "uVar6": "allocated_memory_size"
            },
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_input_08006344",
            "code": "\nuint process_input_08006344(int data,byte byte_value,byte **buffer)\n\n{\n  int iteration;\n  byte *buffer_end;\n  byte *pbVar3;\n  uint result;\n  \n  buffer_end = buffer[2] + -1;\n  buffer[2] = buffer_end;\n  if ((-1 < (int)buffer_end) ||\n     (((int)buffer[6] <= (int)buffer_end && (buffer_end = (byte *)(uint)byte_value, buffer_end != (byte *)0xa))))\n  {\n    buffer_end = *buffer;\n    *buffer = buffer_end + 1;\n    *buffer_end = byte_value;\n    return (uint)byte_value;\n  }\n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == (byte **)&DAT_08007904) {\n    buffer = *(byte ***)(data + 4);\n  }\n  else if (buffer == (byte **)&DAT_08007924) {\n    buffer = *(byte ***)(data + 8);\n  }\n  else if (buffer == (byte **)&DAT_080078e4) {\n    buffer = *(byte ***)(data + 0xc);\n  }\n  buffer[2] = buffer[6];\n  pbVar3 = (byte *)(uint)*(ushort *)(buffer + 3);\n  iteration = (int)pbVar3 << 0x1c;\n  if (((iteration < 0) && (pbVar3 = buffer[4], pbVar3 != (byte *)0x0)) ||\n     (iteration = __swsetup_r(data,buffer,iteration,pbVar3,buffer_end), iteration == 0)) {\n    result = (uint)byte_value;\n    iteration = (int)*buffer - (int)buffer[4];\n    if ((iteration < (int)buffer[5]) || (iteration = _fflush_r(data,buffer), iteration == 0)) {\n      buffer[2] = buffer[2] + -1;\n      buffer_end = *buffer;\n      *buffer = buffer_end + 1;\n      *buffer_end = byte_value;\n      if ((byte *)(iteration + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      iteration = _fflush_r(data,buffer);\n      if (iteration == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "data",
                "param_2": "byte_value",
                "param_3": "buffer",
                "pbVar2": "buffer_end",
                "uVar4": "result",
                "iVar1": "iteration"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "write_to_stream_08006370",
            "code": "\nint writeToStream_08006370(undefined4 stream,undefined4 bufferSize,undefined *data,int length)\n\n{\n  int bytesWritten;\n  undefined *endOfData;\n  int remainingLength;\n  \n  endOfData = data + length;\n  remainingLength = length;\n  do {\n    if (data == endOfData) {\n      return 0;\n    }\n    bytesWritten = __sfputc_r(stream,*data,bufferSize,length,remainingLength);\n    length = bytesWritten + 1;\n    data = data + 1;\n  } while (length != 0);\n  return bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_08006370": "write_to_stream_08006370",
                "param_1": "stream",
                "param_2": "bufferSize",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "bytesWritten",
                "puVar2": "endOfData",
                "iVar3": "remainingLength"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "print_formatted_string_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint printFormattedString_08006394(int outputStream,undefined4 *format,byte *string,int *args)\n\n{\n  int result;\n  int *argPtr;\n  bool isNumber;\n  byte *currentChar;\n  byte *startChar;\n  int offset;\n  int tempVar;\n  int *argList;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int argumentWidth;\n  int totalBytesWritten;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined alternateFormFlag;\n  undefined4 zeroFlag;\n  \n  argList = args;\n  if ((outputStream != 0) && (*(int *)(outputStream + 0x18) == 0)) {\n    __initialize_stdio();\n  }\n  if (format == &DAT_08007904) {\n    format = *(undefined4 **)(outputStream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_08007924) {\n    format = *(undefined4 **)(outputStream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_080078e4) {\n    format = *(undefined4 **)(outputStream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (tempVar = setupStream(outputStream,format), tempVar != 0)) {\n    return -1;\n  }\n  totalBytesWritten = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = string;\nLAB_080063d6:\n  startChar = currentChar;\n  if (*startChar != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  currentChar = startChar + 1;\n  if (*startChar != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  tempVar = (int)startChar - (int)string;\n  if (tempVar != 0) {\n    result = putString(outputStream,format,string,tempVar);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalBytesWritten;\n    }\n    totalBytesWritten = totalBytesWritten + tempVar;\n  }\n  if (*startChar == 0) goto LAB_08006580;\n  flags = 0;\n  argumentWidth = 0;\n  precision = -1;\n  width = 0;\n  alternateFormFlag = 0;\n  zeroFlag = 0;\n  currentChar = startChar + 1;\n  while( true ) {\n    tempVar = findCharacter(\"#-0+ \",*currentChar);\n    string = currentChar + 1;\n    if (tempVar == 0) break;\n    flags = 1 << (tempVar + 0xf7ff8750U & 0xff) | flags;\n    currentChar = string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    alternateFormFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    alternateFormFlag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    argPtr = argList + 1;\n    tempVar = *argList;\n    argList = argPtr;\n    if (tempVar < 0) {\n      argumentWidth = -tempVar;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    isNumber = false;\n    tempVar = argumentWidth;\n    string = currentChar;\n    while( true ) {\n      if (9 < *string - 0x30) break;\n      tempVar = tempVar * 10 + (*string - 0x30);\n      isNumber = true;\n      string = string + 1;\n    }\n    if (!isNumber) goto LAB_080064be;\n  }\n  argumentWidth = tempVar;\nLAB_080064be:\n  if (*string == 0x2e) {\n    if (string[1] == 0x2a) {\n      string = string + 2;\n      argPtr = argList + 1;\n      precision = *argList;\n      argList = argPtr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      tempVar = 0;\n      precision = 0;\n      while( true ) {\n        string = string + 1;\n        if (9 < *string - 0x30) break;\n        tempVar = tempVar * 10 + (*string - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        precision = tempVar;\n      }\n    }\n  }\n  tempVar = findCharacter(&DAT_080078b6,*string,3);\n  if (tempVar != 0) {\n    string = string + 1;\n    flags = flags | 0x40 << (tempVar + 0xf7ff874aU & 0xff);\n  }\n  conversionSpecifier = *string;\n  string = string + 1;\n  tempVar = findCharacter(\"efgEFG\",conversionSpecifier,6);\n  if (tempVar == 0) {\n    offset = printInteger(outputStream,&flags,format,0x8006371,&argList);\n    if (offset == -1) goto LAB_08006580;\n  }\n  else {\n    argList = (int *)(((int)argList + 7U & 0xfffffff8) + 8);\n  }\n  totalBytesWritten = totalBytesWritten + offset;\n  currentChar = string;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "print_formatted_string_08006394",
                "param_1": "outputStream",
                "param_2": "format",
                "param_3": "string",
                "param_4": "args",
                "iVar1": "result",
                "piVar2": "argPtr",
                "bVar3": "isNumber",
                "pbVar4": "currentChar",
                "pbVar5": "startChar",
                "unaff_r9": "offset",
                "iVar6": "tempVar",
                "local_8c": "argList",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "argumentWidth",
                "local_74": "totalBytesWritten",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "alternateFormFlag",
                "local_30": "zeroFlag",
                "__sinit": "__initialize_stdio",
                "__swsetup_r": "setupStream",
                "__sfputs_r": "putString",
                "memchr": "findCharacter",
                "_printf_i": "printInteger"
            },
            "calling": [
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "memchr",
                "_printf_i",
                "__swsetup_r",
                "__sfputs_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "process_data_080065c0",
            "code": "\nundefined4\nprocessData_080065c0(undefined4 input1,uint *input2,uint *output1,undefined4 input3,code *callbackFunc)\n\n{\n  int counter1;\n  int counter2;\n  uint maxValue;\n  uint newValue;\n  bool isConditionMet;\n  \n  maxValue = input2[4];\n  if ((int)input2[4] < (int)input2[2]) {\n    maxValue = input2[2];\n  }\n  *output1 = maxValue;\n  if (*(char *)((int)input2 + 0x43) != '\\0') {\n    *output1 = maxValue + 1;\n  }\n  if ((int)(*input2 << 0x1a) < 0) {\n    *output1 = *output1 + 2;\n  }\n  if ((*input2 & 6) == 0) {\n    for (counter1 = 0; counter1 < (int)(input2[3] - *output1); counter1 = counter1 + 1) {\n      counter2 = (*callbackFunc)(input1,input3,(int)input2 + 0x19,1);\n      if (counter2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)input2 + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  newValue = maxValue;\n  if ((int)(*input2 << 0x1a) < 0) {\n    *(undefined *)((int)input2 + maxValue + 0x43) = 0x30;\n    newValue = maxValue + 2;\n    *(undefined *)((int)input2 + maxValue + 0x44) = *(undefined *)((int)input2 + 0x45);\n  }\n  counter1 = (*callbackFunc)(input1,input3,(int)input2 + 0x43,newValue);\n  if (counter1 != -1) {\n    maxValue = input2[3];\n    isConditionMet = (*input2 & 6) != 4;\n    if (isConditionMet) {\n      maxValue = 0;\n    }\n    newValue = 0;\n    if (!isConditionMet) {\n      maxValue = maxValue - *output1;\n    }\n    if (!isConditionMet) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)input2[4] < (int)input2[2]) {\n      maxValue = maxValue + (input2[2] - input2[4]);\n    }\n    while( true ) {\n      if (maxValue == newValue) {\n        return 0;\n      }\n      counter1 = (*callbackFunc)(input1,input3,(int)input2 + 0x1a,1);\n      if (counter1 == -1) break;\n      newValue = newValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "input3",
                "param_5": "callbackFunc",
                "iVar1": "counter1",
                "iVar2": "counter2",
                "uVar3": "maxValue",
                "uVar4": "newValue",
                "bVar5": "isConditionMet"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "print_formatted_value_080066b0",
            "code": "\nuint print_formatted_value_080066b0(undefined4 format_string,uint *format_args,undefined4 width,code *print_function,uint **print_args)\n\n{\n  byte format_type;\n  int result;\n  uint *ptr_arg;\n  int call_result;\n  char *digit_table;\n  uint base;\n  uint **ptr_arg_ptr;\n  char **str_arg_ptr;\n  uint arg_value;\n  uint orig_width;\n  char *digit_ptr;\n  char *str_arg;\n  uint local_variables [2];\n  \n  format_type = *(byte *)(format_args + 6);\n  str_arg = (char *)((int)format_args + 0x43);\n  if (format_type != 0x6e) {\n    if (format_type < 0x6f) {\n      if (format_type != 99) {\n        if (format_type < 100) {\n          if (format_type == 0) goto LAB_0800686a;\n          if (format_type != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)format_args + 0x45) = 0x58;\n          digit_table = \"0123456789ABCDEF\";\nLAB_080067fa:\n          base = *format_args;\n          ptr_arg = *print_args;\n          *print_args = ptr_arg + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            arg_value = (uint)*(ushort *)ptr_arg;\n          }\n          else {\n            arg_value = *ptr_arg;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *format_args = base | 0x20;\n          }\n          if (arg_value == 0) {\n            *format_args = *format_args & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08006790:\n          *(undefined *)((int)format_args + 0x43) = 0;\n        }\n        else {\n          if ((format_type != 100) && (format_type != 0x69)) goto LAB_080066e0;\n          arg_value = *format_args;\n          ptr_arg = *print_args;\n          if ((arg_value & 0x80) == 0) {\n            *print_args = ptr_arg + 1;\n            if ((arg_value & 0x40) == 0) goto LAB_08006700;\n            arg_value = (uint)(short)*(ushort *)ptr_arg;\n          }\n          else {\n            *print_args = ptr_arg + 1;\nLAB_08006700:\n            arg_value = *ptr_arg;\n          }\n          if ((int)arg_value < 0) {\n            arg_value = -arg_value;\n            *(undefined *)((int)format_args + 0x43) = 0x2d;\n          }\n          digit_table = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        orig_width = format_args[1];\n        format_args[2] = orig_width;\n        digit_ptr = str_arg;\n        if ((int)orig_width < 0) {\n          if (arg_value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)format_args + 0x42) = *digit_table;\n          digit_ptr = (char *)((int)format_args + 0x42);\n        }\n        else {\n          *format_args = *format_args & 0xfffffffb;\n          if (arg_value == 0) {\n            if (orig_width != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              orig_width = arg_value / base;\n              digit_ptr = digit_ptr + -1;\n              *digit_ptr = digit_table[arg_value - base * orig_width];\n              arg_value = orig_width;\n            } while (orig_width != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*format_args << 0x1f) < 0)) && ((int)format_args[1] <= (int)format_args[4]))\n        {\n          digit_ptr[-1] = '0';\n          digit_ptr = digit_ptr + -1;\n        }\n        format_args[4] = (int)str_arg - (int)digit_ptr;\n        str_arg = digit_ptr;\n        goto LAB_080067d6;\n      }\n      ptr_arg = *print_args;\n      *print_args = ptr_arg + 1;\n      *(char *)((int)format_args + 0x42) = (char)*ptr_arg;\nLAB_08006740:\n      str_arg = (char *)((int)format_args + 0x42);\n      arg_value = 1;\n    }\n    else {\n      if (format_type != 0x73) {\n        if (format_type < 0x74) {\n          if (format_type == 0x6f) {\nLAB_08006766:\n            arg_value = *format_args;\n            ptr_arg = *print_args;\n            if ((arg_value & 0x80) == 0) {\n              *print_args = ptr_arg + 1;\n              if ((arg_value & 0x40) == 0) goto LAB_08006774;\n              arg_value = (uint)*(ushort *)ptr_arg;\n            }\n            else {\n              *print_args = ptr_arg + 1;\nLAB_08006774:\n              arg_value = *ptr_arg;\n            }\n            if (format_type == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            digit_table = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (format_type == 0x70) {\n            *format_args = *format_args | 0x20;\nLAB_08006726:\n            digit_table = \"0123456789abcdef\";\n            *(undefined *)((int)format_args + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (format_type == 0x75) goto LAB_08006766;\n          if (format_type == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)format_args + 0x42) = format_type;\n        goto LAB_08006740;\n      }\n      str_arg_ptr = (char **)*print_args;\n      *print_args = (uint *)(str_arg_ptr + 1);\n      str_arg = *str_arg_ptr;\n      result = memchr(str_arg,0,format_args[1]);\n      if (result != 0) {\n        format_args[1] = result - (int)str_arg;\n      }\n      arg_value = format_args[1];\n    }\n    format_args[4] = arg_value;\n    *(undefined *)((int)format_args + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  arg_value = *format_args;\n  ptr_arg_ptr = (uint **)*print_args;\n  base = format_args[5];\n  if ((arg_value & 0x80) == 0) {\n    *print_args = (uint *)(ptr_arg_ptr + 1);\n    ptr_arg = *ptr_arg_ptr;\n    if ((arg_value & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptr_arg = (short)base;\n  }\n  else {\n    *print_args = (uint *)(ptr_arg_ptr + 1);\n    ptr_arg = *ptr_arg_ptr;\nLAB_08006856:\n    *ptr_arg = base;\n  }\nLAB_0800686a:\n  format_args[4] = 0;\nLAB_080067d6:\n  result = _printf_common(format_string,format_args,local_variables,width,print_function);\n  if ((result == -1) || (result = (*print_function)(format_string,width,str_arg,format_args[4]), result == -1)) {\nLAB_080067ea:\n    arg_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_args << 0x1e) < 0) {\n      for (result = 0; result < (int)(format_args[3] - local_variables[0]); result = result + 1) {\n        call_result = (*print_function)(format_string,width,(int)format_args + 0x19,1);\n        if (call_result == -1) goto LAB_080067ea;\n      }\n    }\n    arg_value = format_args[3];\n    if ((int)format_args[3] < (int)local_variables[0]) {\n      arg_value = local_variables[0];\n    }\n  }\n  return arg_value;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "print_formatted_value_080066b0",
                "param_1": "format_string",
                "param_2": "format_args",
                "param_3": "width",
                "param_4": "print_function",
                "param_5": "print_args",
                "bVar1": "format_type",
                "iVar2": "result",
                "puVar3": "ptr_arg",
                "iVar4": "call_result",
                "pcVar5": "digit_table",
                "uVar6": "base",
                "ppuVar7": "ptr_arg_ptr",
                "ppcVar8": "str_arg_ptr",
                "uVar9": "arg_value",
                "uVar10": "orig_width",
                "pcVar11": "digit_ptr",
                "pcVar12": "str_arg",
                "local_24": "local_variables"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "print_formatted_text_080068f0",
            "code": "\nvoid printFormattedText_080068f0(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int dataPointer;\n  undefined4 formatParam;\n  undefined4 argStack1;\n  undefined4 argStack2;\n  undefined4 argStack3;\n  \n  dataPointer = DAT_200000f8;\n  formatParam = formatString;\n  argStack1 = arg1;\n  argStack2 = arg2;\n  argStack3 = arg3;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    __sinit(DAT_200000f8);\n  }\n  _vfiprintf_r(dataPointer,*(undefined4 *)(dataPointer + 8),formatString,&argStack1,formatParam,&argStack1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "print_formatted_text_080068f0",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "dataPointer",
                "uVar2": "formatParam",
                "uStack_c": "argStack1",
                "uStack_8": "argStack2",
                "uStack_4": "argStack3"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "allocate_memory_08006920",
            "code": "\nvoid allocateMemory_08006920(int *outPtr,undefined4 size)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = _sbrk(size);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *outPtr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "allocate_memory_08006920",
                "param_1": "outPtr",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_function_080069e4",
            "code": "\nuint processFunction_080069e4(undefined4 *outputPtr,undefined4 *inputPtr)\n\n{\n  int dataPtr;\n  uint result;\n  ushort flags;\n  \n  dataPtr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    __sinit(DAT_200000f8);\n  }\n  if (inputPtr == &DAT_08007904) {\n    inputPtr = *(undefined4 **)(dataPtr + 4);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_08007924) {\n    inputPtr = *(undefined4 **)(dataPtr + 8);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_080078e4) {\n    inputPtr = *(undefined4 **)(dataPtr + 0xc);\n  }\n  flags = *(ushort *)(inputPtr + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputPtr = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputPtr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPtr[0xd] != inputPtr + 0x11) {\n          _free_r(outputPtr);\n        }\n        inputPtr[0xd] = 0;\n      }\n      *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) & 0xffdb;\n      inputPtr[1] = 0;\n      *inputPtr = inputPtr[4];\n    }\n    *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) | 8;\n  }\n  if ((inputPtr[4] == 0) && ((*(ushort *)(inputPtr + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputPtr,inputPtr);\n  }\n  flags = *(ushort *)(inputPtr + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = inputPtr[5];\n    }\n    inputPtr[2] = result;\n  }\n  else {\n    inputPtr[2] = 0;\n    inputPtr[6] = -inputPtr[5];\n  }\n  if (inputPtr[4] == 0) {\n    flags = *(ushort *)(inputPtr + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(inputPtr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_function_080069e4",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "iVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "__sfputc_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "execute_and_handle_errors_08006ac0",
            "code": "\nvoid executeAndHandleErrors_08006ac0(void)\n\n{\n  uint *returnValue;\n  int count;\n  int *parameters;\n  int *pointer;\n  uint uVar5;\n  ushort flags;\n  int iVar7;\n  code *functionPointer;\n  int iVar9;\n  uint tempValue;\n  code *jumpTableFunction;\n  bool bVar11;\n  undefined8 uVar12;\n  \n  raise(6);\n  jumpTableFunction = (code *)0x8006acf;\n  uVar12 = _exit(1);\n  parameters = (int *)((ulonglong)uVar12 >> 0x20);\n  returnValue = (uint *)uVar12;\n  flags = *(ushort *)(parameters + 3);\n  uVar5 = (uint)flags;\n  if ((int)(uVar5 << 0x1c) < 0) {\n    count = parameters[4];\n    if (count != 0) {\n      iVar7 = uVar5 << 0x1e;\n      bVar11 = iVar7 != 0;\n      if (bVar11) {\n        iVar7 = 0;\n      }\n      iVar9 = *parameters;\n      if (!bVar11) {\n        iVar7 = parameters[5];\n      }\n      *parameters = count;\n      parameters[2] = iVar7;\n      for (iVar9 = iVar9 - count; 0 < iVar9; iVar9 = iVar9 - iVar7) {\n        iVar7 = (*(code *)parameters[10])(returnValue,parameters[8],count,iVar9);\n        if (iVar7 < 1) {\n          flags = *(ushort *)(parameters + 3);\n          goto LAB_08006bc6;\n        }\n        count = count + iVar7;\n      }\n    }\n  }\n  else if (((0 < parameters[1]) || (0 < parameters[0x10])) &&\n          (functionPointer = (code *)parameters[0xb], functionPointer != (code *)0x0)) {\n    tempValue = *returnValue;\n    *returnValue = 0;\n    if ((flags & 0x1000) == 0) {\n      count = (*functionPointer)(returnValue,parameters[8],uVar5 & 0x1000,1);\n      if ((count == -1) && (uVar5 = *returnValue, uVar5 != 0)) {\n        if ((uVar5 != 0x1d) && (uVar5 != 0x16)) {\n          *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTableFunction)();\n          return;\n        }\n        *returnValue = tempValue;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      count = parameters[0x15];\n    }\n    if (((int)((uint)*(ushort *)(parameters + 3) << 0x1d) < 0) &&\n       (count = count - parameters[1], parameters[0xd] != 0)) {\n      count = count - parameters[0x10];\n    }\n    count = (*(code *)parameters[0xb])(returnValue,parameters[8],count,0);\n    flags = *(ushort *)(parameters + 3);\n    if ((count == -1) &&\n       ((0x1d < *returnValue || (-1 < (int)((0x20400001U >> (*returnValue & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(parameters + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunction)(0xffffffff);\n      return;\n    }\n    parameters[1] = 0;\n    *parameters = parameters[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((count != -1 || (*returnValue == 0)))) {\n      parameters[0x15] = count;\n    }\n    pointer = (int *)parameters[0xd];\n    *returnValue = tempValue;\n    if (pointer != (int *)0x0) {\n      if (pointer != parameters + 0x11) {\n        _free_r(returnValue);\n      }\n      parameters[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunction)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunction)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "execute_and_handle_errors_08006ac0",
                "piVar3": "parameters",
                "puVar1": "returnValue",
                "uVar6": "flags",
                "iVar2": "count",
                "piVar4": "pointer",
                "uVar10": "tempValue",
                "pcVar8": "functionPointer",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunction"
            },
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "called": [
                "_free_r",
                "raise",
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *data,int *metadata)\n\n{\n  undefined4 returnValue;\n  int length;\n  int *ptr;\n  uint value;\n  ushort flags;\n  int offset;\n  undefined4 param4;\n  undefined4 param5;\n  code *callback;\n  int remaining;\n  uint tempVar;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (metadata[4] != 0) {\n    if ((data != (uint *)0x0) && (data[6] == 0)) {\n      __sinit();\n    }\n    if (metadata == &DAT_08007904) {\n      metadata = (int *)data[1];\n    }\n    else if (metadata == (int *)&DAT_08007924) {\n      metadata = (int *)data[2];\n    }\n    else if (metadata == (int *)&DAT_080078e4) {\n      metadata = (int *)data[3];\n    }\n    if (*(short *)(metadata + 3) != 0) {\n      flags = *(ushort *)(metadata + 3);\n      value = (uint)flags;\n      if ((int)(value << 0x1c) < 0) {\n        length = metadata[4];\n        if (length != 0) {\n          offset = value << 0x1e;\n          bVar10 = offset != 0;\n          if (bVar10) {\n            offset = 0;\n          }\n          remaining = *metadata;\n          if (!bVar10) {\n            offset = metadata[5];\n          }\n          *metadata = length;\n          metadata[2] = offset;\n          for (remaining = remaining - length; 0 < remaining; remaining = remaining - offset) {\n            offset = (*(code *)metadata[10])(data,metadata[8],length,remaining,param4,param5);\n            if (offset < 1) {\n              flags = *(ushort *)(metadata + 3);\n              goto LAB_08006bc6;\n            }\n            length = length + offset;\n          }\n        }\n      }\n      else if (((0 < metadata[1]) || (0 < metadata[0x10])) &&\n              (callback = (code *)metadata[0xb], callback != (code *)0x0)) {\n        tempVar = *data;\n        *data = 0;\n        if ((flags & 0x1000) == 0) {\n          length = (*callback)(data,metadata[8],value & 0x1000,1);\n          if ((length == -1) && (value = *data, value != 0)) {\n            if ((value != 0x1d) && (value != 0x16)) {\n              *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n              return returnValue;\n            }\n            *data = tempVar;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          length = metadata[0x15];\n        }\n        if (((int)((uint)*(ushort *)(metadata + 3) << 0x1d) < 0) &&\n           (length = length - metadata[1], metadata[0xd] != 0)) {\n          length = length - metadata[0x10];\n        }\n        length = (*(code *)metadata[0xb])(data,metadata[8],length,0);\n        flags = *(ushort *)(metadata + 3);\n        if ((length == -1) &&\n           ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(metadata + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return returnValue;\n        }\n        metadata[1] = 0;\n        *metadata = metadata[4];\n        if (((int)((uint)flags << 0x13) < 0) && ((length != -1 || (*data == 0)))) {\n          metadata[0x15] = length;\n        }\n        ptr = (int *)metadata[0xd];\n        *data = tempVar;\n        if (ptr != (int *)0x0) {\n          if (ptr != metadata + 0x11) {\n            _free_r(data);\n          }\n          metadata[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n          return returnValue;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "metadata",
                "uVar1": "returnValue",
                "iVar2": "length",
                "piVar3": "ptr",
                "uVar4": "value",
                "uVar5": "flags",
                "iVar6": "offset",
                "unaff_r4": "param4",
                "unaff_r5": "param5",
                "pcVar7": "callback",
                "iVar8": "remaining",
                "uVar9": "tempVar"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_data_08006c40",
            "code": "\nvoid initializeData_08006c40(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  memset(data + 0x17,0,8);\n  data[8] = data;\n  data[9] = 0x8006f39;\n  data[10] = 0x8006f5b;\n  data[0xb] = 0x8006f93;\n  data[0xc] = &LAB_08006fb6_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_data_08006c40",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "initialize_memory_08006c88",
            "code": "\nundefined4 * initializeMemory_08006c88(undefined4 sizeToAllocate,int numElements)\n\n{\n  undefined4 *allocatedMemory;\n  int totalSize;\n  \n  totalSize = (numElements + -1) * 0x68;\n  allocatedMemory = (undefined4 *)_malloc_r(sizeToAllocate,totalSize + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = numElements;\n    allocatedMemory[2] = allocatedMemory + 3;\n    memset(allocatedMemory + 3,0,totalSize + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "initialize_memory_08006c88",
                "param_1": "sizeToAllocate",
                "param_2": "numElements",
                "puVar1": "allocatedMemory",
                "iVar2": "totalSize"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_08006cb4",
            "code": "\nvoid initializeData_08006cb4(undefined4 *data)\n\n{\n  undefined4 returnValue;\n  undefined4 *ptrToData;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    ptrToData = &DAT_200000fc;\n    data[10] = &label;\n    if (data == &DAT_200000fc) {\n      ptrToData = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000fc) {\n      data[6] = ptrToData;\n    }\n    returnValue = __sfp();\n    data[1] = returnValue;\n    returnValue = __sfp(data);\n    data[2] = returnValue;\n    returnValue = __sfp(data);\n    data[3] = returnValue;\n    std_isra_0(data[1],4,0);\n    std_isra_0(data[2],9,1);\n    std_isra_0(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data",
                "uVar1": "returnValue",
                "puVar2": "ptrToData",
                "LAB_08006c34_1": "label"
            },
            "calling": [
                "_fflush_r",
                "iprintf",
                "__sfputc_r",
                "__sfp",
                "_vfiprintf_r",
                "__swsetup_r"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_pointer_array_08006d14",
            "code": "\nint * initializePointerArray_08006d14(undefined4 *pointer,undefined4 value1,undefined4 value2,undefined4 param4)\n\n{\n  int *tempPtr1;\n  int *tempPtr2;\n  int **arrayPtrPtr;\n  \n  if (DAT_20000114 == 0) {\n    __sinit(&DAT_200000fc);\n  }\n  arrayPtrPtr = (int **)&DAT_20000144;\n  do {\n    tempPtr2 = arrayPtrPtr[2];\n    tempPtr1 = arrayPtrPtr[1];\n    while (tempPtr1 = (int *)((int)tempPtr1 + -1), -1 < (int)tempPtr1) {\n      if (*(short *)(tempPtr2 + 3) == 0) {\n        *(undefined2 *)((int)tempPtr2 + 0xe) = 0xffff;\n        tempPtr2[0x19] = 0;\n        *(undefined2 *)(tempPtr2 + 3) = 1;\n        *tempPtr2 = 0;\n        tempPtr2[2] = 0;\n        tempPtr2[1] = 0;\n        tempPtr2[4] = 0;\n        tempPtr2[5] = 0;\n        tempPtr2[6] = 0;\n        memset(tempPtr2 + 0x17,0,8,1,param4);\n        tempPtr2[0xd] = 0;\n        tempPtr2[0xe] = 0;\n        tempPtr2[0x12] = 0;\n        tempPtr2[0x13] = 0;\n        return tempPtr2;\n      }\n      tempPtr2 = tempPtr2 + 0x1a;\n    }\n    if (*arrayPtrPtr == (int *)0x0) {\n      tempPtr1 = (int *)__sfmoreglue(pointer,4);\n      *arrayPtrPtr = tempPtr1;\n      if (tempPtr1 == (int *)0x0) {\n        *pointer = 0xc;\n        return (int *)0x0;\n      }\n    }\n    arrayPtrPtr = (int **)*arrayPtrPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_pointer_array_08006d14",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "param4",
                "piVar1": "tempPtr1",
                "piVar2": "tempPtr2",
                "ppiVar3": "arrayPtrPtr"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_file_permissions_08006dc8",
            "code": "\nundefined4 checkFilePermissions_08006dc8(undefined4 fileDescriptor,int fileInfoPointer,undefined4 *resultPointer,uint *isExecutablePointer)\n\n{\n  int statReturnValue;\n  undefined4 permissionFlag;\n  undefined stackBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileInfoPointer + 0xe) < 0) ||\n     (statReturnValue = _fstat_r(fileDescriptor,(int)*(short *)(fileInfoPointer + 0xe),stackBuffer), statReturnValue < 0)) {\n    *isExecutablePointer = 0;\n    if ((int)((uint)*(ushort *)(fileInfoPointer + 0xc) << 0x18) < 0) {\n      permissionFlag = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *isExecutablePointer = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  permissionFlag = 0x400;\nLAB_08006e08:\n  *resultPointer = permissionFlag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "fileDescriptor",
                "param_2": "fileInfoPointer",
                "param_3": "resultPointer",
                "param_4": "isExecutablePointer",
                "iVar1": "statReturnValue",
                "uVar2": "permissionFlag",
                "auStack_4c": "stackBuffer",
                "local_48": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "process_input_08006e10",
            "code": "\nvoid processInput_08006e10(int inputBufferSize,int *inputBuffer)\n\n{\n  ushort result;\n  int allocationResult;\n  int inputSize;\n  int *inputBufferPtr;\n  \n  if (-1 < (int)((uint)*(ushort *)(inputBuffer + 3) << 0x1e)) {\n    inputSize = inputBufferSize;\n    inputBufferPtr = inputBuffer;\n    result = __swhatbuf_r(inputBufferSize,inputBuffer,&inputSize,&inputBufferPtr);\n    allocationResult = _malloc_r(inputBufferSize,inputSize);\n    if (allocationResult != 0) {\n      *(undefined **)(inputBufferSize + 0x28) = &LAB_08006c34_1;\n      *inputBuffer = allocationResult;\n      *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) | 0x80;\n      inputBuffer[4] = allocationResult;\n      inputBuffer[5] = inputSize;\n      if ((inputBufferPtr != (int *)0x0) &&\n         (allocationResult = _isatty_r(inputBufferSize,(int)*(short *)((int)inputBuffer + 0xe)), allocationResult != 0)) {\n        *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(inputBuffer + 3) = result | *(ushort *)(inputBuffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(inputBuffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfffc | 2;\n  }\n  *inputBuffer = (int)inputBuffer + 0x47;\n  inputBuffer[4] = (int)inputBuffer + 0x47;\n  inputBuffer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "process_input_08006e10",
                "param_1": "inputBufferSize",
                "param_2": "inputBuffer",
                "uVar1": "result",
                "iVar2": "allocationResult",
                "local_18": "inputSize",
                "local_14": "inputBufferPtr"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_08006e90",
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_signal_08006f00",
            "code": "\nint process_signal_08006f00(uint signal_number)\n\n{\n  int *signal_table;\n  undefined4 process_id;\n  int handler_address;\n  code *handler_function;\n  undefined4 register_r4;\n  undefined4 register_r5;\n  undefined4 link_register;\n  undefined4 *signal_table_ptr;\n  \n  signal_table = DAT_200000f8;\n  signal_table_ptr = &DAT_200000f8;\n  if (0x1f < signal_number) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  handler_address = DAT_200000f8[0x11];\n  if ((handler_address != 0) && (handler_function = *(code **)(handler_address + signal_number * 4), handler_function != (code *)0x0)) {\n    if (handler_function != (code *)0x1) {\n      if (handler_function == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(handler_address + signal_number * 4) = 0;\n      (*handler_function)(signal_number);\n    }\n    return 0;\n  }\n  process_id = _getpid_r(DAT_200000f8);\n  DAT_200006a4 = 0;\n  handler_address = _kill(process_id,signal_number,signal_number,0,signal_table_ptr,register_r4,register_r5,link_register);\n  if ((handler_address == -1) && (DAT_200006a4 != 0)) {\n    *signal_table = DAT_200006a4;\n  }\n  return handler_address;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "process_signal_08006f00",
                "param_1": "signal_number",
                "piVar1": "signal_table",
                "uVar2": "process_id",
                "iVar3": "handler_address",
                "pcVar4": "handler_function",
                "unaff_r4": "register_r4",
                "unaff_r5": "register_r5",
                "in_lr": "link_register",
                "puVar5": "signal_table_ptr"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f34": {
            "entrypoint": "0x08006f34",
            "current_name": "FUN_08006f34",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_data_08006f38",
            "code": "\nvoid updateData_08006f38(undefined4 param1,int param2)\n\n{\n  int dataLength;\n  uint updatedValue;\n  bool isSuccess;\n  \n  dataLength = _read_r(param1,(int)*(short *)(param2 + 0xe));\n  isSuccess = -1 < dataLength;\n  if (isSuccess) {\n    updatedValue = *(int *)(param2 + 0x54) + dataLength;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isSuccess) {\n    *(uint *)(param2 + 0x54) = updatedValue;\n  }\n  if (!isSuccess) {\n    *(short *)(param2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_data_08006f38",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "dataLength",
                "uVar2": "updatedValue",
                "bVar3": "isSuccess"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "write_to_file_08006f5a",
            "code": "\nvoid writeToFile_08006f5a(int *fileDescriptor,int bufferPtr,undefined4 data,undefined4 count)\n\n{\n  int writeResult;\n  undefined4 unusedRegister4;\n  undefined4 unusedRegister5;\n  undefined4 unusedLinkRegister;\n  \n  if ((int)((uint)*(ushort *)(bufferPtr + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(bufferPtr + 0xe),0,2);\n  }\n  *(ushort *)(bufferPtr + 0xc) = *(ushort *)(bufferPtr + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  writeResult = _write((int)*(short *)(bufferPtr + 0xe),data,count,count,count,unusedRegister4,unusedRegister5,\n                 unusedLinkRegister);\n  if ((writeResult == -1) && (DAT_200006a4 != 0)) {\n    *fileDescriptor = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "write_to_file_08006f5a",
                "param_1": "fileDescriptor",
                "param_2": "bufferPtr",
                "param_3": "data",
                "param_4": "count",
                "iVar1": "writeResult",
                "unaff_r4": "unusedRegister4",
                "unaff_r5": "unusedRegister5",
                "in_lr": "unusedLinkRegister"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "seek_and_update_flags_08006f92",
            "code": "\nvoid seekAndUpdateFlags_08006f92(undefined4 fileDescriptor,int context)\n\n{\n  int seekResult;\n  ushort updatedFlags;\n  bool seekFailed;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(context + 0xe));\n  seekFailed = seekResult == -1;\n  if (seekFailed) {\n    updatedFlags = *(ushort *)(context + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(context + 0x54) = seekResult;\n    updatedFlags = *(ushort *)(context + 0xc) | 0x1000;\n  }\n  if (seekFailed) {\n    *(ushort *)(context + 0xc) = updatedFlags;\n  }\n  if (!seekFailed) {\n    *(ushort *)(context + 0xc) = updatedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "seek_and_update_flags_08006f92",
                "param_1": "fileDescriptor",
                "param_2": "context",
                "iVar1": "seekResult",
                "uVar2": "updatedFlags",
                "bVar3": "seekFailed"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "get_file_size_08007004",
            "code": "\nvoid getFileSize_08007004(int *result,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 path)\n\n{\n  int fileStatus;\n  \n  DAT_200006a4 = 0;\n  fileStatus = _fstat(fileDescriptor,statBuffer,statBuffer,0,path);\n  if ((fileStatus == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "get_file_size_08007004",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "path",
                "iVar1": "fileStatus"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "check_terminal_status_08007028",
            "code": "\nvoid checkTerminalStatus_08007028(int *outputStatus,undefined4 fileDescriptor)\n\n{\n  int iVar1;\n  \n  DAT_200006a4 = 0;\n  iVar1 = _isatty(fileDescriptor);\n  if ((iVar1 == -1) && (DAT_200006a4 != 0)) {\n    *outputStatus = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "check_terminal_status_08007028",
                "param_1": "outputStatus",
                "param_2": "fileDescriptor"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "set_file_pointer_08007048",
            "code": "\nvoid setFilePointer_08007048(int *result,undefined4 fileHandle,undefined4 distanceToMove,undefined4 moveMethod)\n\n{\n  int seekResult;\n  \n  DAT_200006a4 = 0;\n  seekResult = _lseek(fileHandle,distanceToMove,moveMethod,moveMethod,moveMethod);\n  if ((seekResult == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "set_file_pointer_08007048",
                "param_1": "result",
                "param_2": "fileHandle",
                "param_3": "distanceToMove",
                "param_4": "moveMethod",
                "iVar1": "seekResult"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "read_and_assign_error_0800706c",
            "code": "\nvoid read_and_assign_error_0800706c(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 size)\n\n{\n  int read_result;\n  \n  DAT_200006a4 = 0;\n  read_result = _read(file_descriptor,buffer,size,size,size);\n  if ((read_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "read_and_assign_error_0800706c",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "read_result"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "initialize_data_08007090",
            "code": "\nvoid initializeData_08007090(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = initializeData_08007090;\n  abort();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "initialize_data_08007090",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 177871,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_080009a8",
            "FUN_080009b8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08000aec",
            "FUN_08000b08",
            "FUN_08001294",
            "FUN_080012a2",
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_08001310",
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_080013a4",
            "FUN_08001550",
            "FUN_0800157c",
            "FUN_080015b2",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_08001814",
            "FUN_08001918",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_08001a44",
            "FUN_08001a66",
            "FUN_08001b48",
            "FUN_08001be8",
            "FUN_08001c32",
            "FUN_08001c3c",
            "FUN_08001c88",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001cd0",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08002004",
            "FUN_080020f0",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002384",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_0800282c",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800316c",
            "FUN_080032b4",
            "FUN_080033b8",
            "FUN_08003520",
            "FUN_0800365c",
            "FUN_08003688",
            "FUN_08003a68",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003c44",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003da4",
            "FUN_08003ea0",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004092",
            "FUN_080040b0",
            "FUN_08004110",
            "FUN_0800412c",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_08004204",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004478",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_080046b8",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_08004974",
            "FUN_080049f0",
            "FUN_08004a4c",
            "FUN_08004b34",
            "FUN_08004b3c",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c52",
            "FUN_08004c5e",
            "FUN_08004c78",
            "FUN_08004c8a",
            "FUN_08004ca2",
            "FUN_08004cb2",
            "FUN_08004cce",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e20",
            "FUN_08004e70",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_08004f4c",
            "FUN_08005384",
            "FUN_080053d4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005568",
            "FUN_080055bc",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_08005730",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_08005754",
            "FUN_080057b4",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_0800591e",
            "FUN_0800598a",
            "FUN_08005a44",
            "FUN_08005a68",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005b54",
            "FUN_08005bb0",
            "FUN_08005c1c",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005ce8",
            "FUN_08005d8a",
            "FUN_08005f2c",
            "FUN_08005f6c",
            "FUN_08005f8c",
            "FUN_08005fc8",
            "FUN_080060e4",
            "FUN_08006112",
            "FUN_0800611c",
            "FUN_08006158",
            "FUN_08006174",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_08006288",
            "FUN_08006344",
            "FUN_08006370",
            "FUN_08006394",
            "FUN_080065c0",
            "FUN_080066b0",
            "FUN_080068f0",
            "FUN_08006920",
            "FUN_080069e4",
            "FUN_08006ac0",
            "FUN_08006be0",
            "FUN_08006c40",
            "FUN_08006c88",
            "FUN_08006cb4",
            "FUN_08006d14",
            "FUN_08006dc8",
            "FUN_08006e10",
            "FUN_08006e90",
            "FUN_08006f00",
            "FUN_08006f38",
            "FUN_08006f5a",
            "FUN_08006f92",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_08000bcc",
            "FUN_080014ba",
            "FUN_080018f8",
            "FUN_08001ab0",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08001510",
            "FUN_08001b18",
            "FUN_08005d82"
        ],
        [
            "FUN_08000cd0",
            "FUN_08005da8"
        ],
        [
            "FUN_080060d4",
            "FUN_08007090"
        ]
    ],
    "locked_functions": []
}