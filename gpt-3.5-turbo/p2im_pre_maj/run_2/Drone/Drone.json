{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_integers_08000134(undefined4 integer_1,undefined4 integer_2)\n\n{\n  return CONCAT44(integer_2,integer_1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "integer_1",
                "param_2": "integer_2"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "get_terminated_string_length_08000150",
            "code": "\nchar * get_terminated_string_length_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_char = current_position + 1;\n    current_char = *current_position;\n    current_position = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "get_terminated_string_length_08000150",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_integer_operations_08000168",
            "code": "\nulonglong calculate_integer_operations_08000168(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  byte temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  \n  temp_6 = input_4 ^ 0x80000000;\n  temp_9 = input_2 << 1;\n  input_4 = input_4 << 1;\n  flag_1 = ((input_2 ^ temp_6) & 0x7fffffff) == 0;\n  flag_2 = flag_1 && input_1 == input_3;\n  if (!flag_1 || input_1 != input_3) {\n    flag_2 = (temp_9 | input_1) == 0;\n  }\n  if (!flag_2) {\n    flag_2 = (input_4 | input_3) == 0;\n  }\n  temp_8 = (int)temp_9 >> 0x15;\n  if (!flag_2) {\n    flag_2 = temp_8 == -1;\n  }\n  temp_1 = (int)input_4 >> 0x15;\n  if (!flag_2) {\n    flag_2 = temp_1 == -1;\n  }\n  if (flag_2) {\n    if (temp_8 == -1 || temp_1 == -1) {\n      temp_9 = temp_6;\n      temp_11 = input_3;\n      if (temp_8 == -1) {\n        temp_9 = input_2;\n        temp_11 = input_1;\n      }\n      if (temp_8 != -1 || temp_1 != -1) {\n        input_3 = temp_11;\n        temp_6 = temp_9;\n      }\n      flag_2 = (temp_11 | temp_9 << 0xc) == 0;\n      if (flag_2) {\n        flag_2 = (input_3 | temp_6 << 0xc) == 0;\n      }\n      if (flag_2) {\n        flag_2 = temp_9 == temp_6;\n      }\n      if (!flag_2) {\n        temp_9 = temp_9 | 0x80000;\n      }\n      return CONCAT44(temp_9,temp_11);\n    }\n    if (((input_2 ^ temp_6) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp_9 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_6;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_6) {\n      return 0;\n    }\n    if (temp_9 >> 0x15 == 0) {\n      flag_2 = (input_1 & 0x80000000) != 0;\n      temp_6 = input_2 * 2 + (uint)flag_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)flag_2)) {\n        temp_6 = temp_6 | 0x80000000;\n      }\n      return CONCAT44(temp_6,input_1 << 1);\n    }\n    if (temp_9 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp_9 = temp_9 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  temp_11 = input_4 - temp_9;\n  flag_2 = temp_11 != 0;\n  if (input_4 < temp_9) {\n    temp_11 = -temp_11;\n  }\n  temp_10 = input_1;\n  temp_7 = input_2;\n  if (flag_2 && temp_9 <= input_4) {\n    temp_9 = temp_9 + temp_11;\n    temp_10 = input_3;\n    temp_7 = temp_6;\n    input_3 = input_1;\n    temp_6 = input_2;\n  }\n  if (0x36 < temp_11) {\n    return CONCAT44(temp_7,temp_10);\n  }\n  temp_4 = temp_7 & 0xfffff | 0x100000;\n  if ((temp_7 & 0x80000000) != 0) {\n    flag_2 = temp_10 != 0;\n    temp_10 = -temp_10;\n    temp_4 = -temp_4 - (uint)flag_2;\n  }\n  temp_7 = temp_6 & 0xfffff | 0x100000;\n  if ((temp_6 & 0x80000000) != 0) {\n    flag_2 = input_3 != 0;\n    input_3 = -input_3;\n    temp_7 = -temp_7 - (uint)flag_2;\n  }\n  if (temp_9 == temp_11) {\n    temp_7 = temp_7 ^ 0x100000;\n    if (temp_9 == 0) {\n      temp_4 = temp_4 ^ 0x100000;\n      temp_9 = 1;\n    }\n    else {\n      temp_11 = temp_11 - 1;\n    }\n  }\n  temp_6 = -temp_11 + 0x20;\n  if ((int)temp_11 < 0x21) {\n    temp_12 = input_3 << (temp_6 & 0xff);\n    input_3 = input_3 >> (temp_11 & 0xff);\n    temp_3 = temp_10 + input_3;\n    temp_5 = temp_7 << (temp_6 & 0xff);\n    temp_6 = temp_3 + temp_5;\n    temp_4 = temp_4 + CARRY4(temp_10,input_3) + ((int)temp_7 >> (temp_11 & 0xff)) +\n            (uint)CARRY4(temp_3,temp_5);\n  }\n  else {\n    temp_12 = temp_7 << (-temp_11 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_12 = temp_12 | 2;\n    }\n    temp_7 = (int)temp_7 >> (temp_11 - 0x20 & 0xff);\n    temp_6 = temp_10 + temp_7;\n    temp_4 = temp_4 + ((int)temp_7 >> 0x1f) + (uint)CARRY4(temp_10,temp_7);\n  }\n  input_2 = temp_4 & 0x80000000;\n  temp_11 = temp_4;\n  if ((int)temp_4 < 0) {\n    flag_2 = temp_12 == 0;\n    temp_12 = -temp_12;\n    temp_11 = -temp_6;\n    temp_6 = -(uint)!flag_2 - temp_6;\n    temp_11 = -(uint)(flag_2 <= temp_11) - temp_4;\n  }\n  if (0xfffff < temp_11) {\n    temp_10 = temp_9 - 1;\n    if (0x1fffff < temp_11) {\n      temp_10 = temp_11 & 1;\n      temp_11 = temp_11 >> 1;\n      temp_2 = (byte)temp_6;\n      temp_6 = (uint)(temp_10 != 0) << 0x1f | temp_6 >> 1;\n      temp_12 = (uint)(temp_2 & 1) << 0x1f | temp_12 >> 1;\n      temp_10 = temp_9;\n      if (0xffbfffff < temp_9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag_2 = 0x7fffffff < temp_12;\n    if (temp_12 == 0x80000000) {\n      flag_2 = (temp_6 & 1) != 0;\n    }\n    return CONCAT44(temp_11 + temp_10 * 0x100000 + (uint)CARRY4(temp_6,(uint)flag_2) | input_2,\n                    temp_6 + flag_2);\n  }\n  flag_1 = (temp_12 & 0x80000000) != 0;\n  temp_12 = temp_12 << 1;\n  temp_10 = temp_6 * 2;\n  flag_2 = CARRY4(temp_6,temp_6);\n  temp_6 = temp_6 * 2 + (uint)flag_1;\n  temp_11 = temp_11 * 2 + (uint)(flag_2 || CARRY4(temp_10,(uint)flag_1));\n  temp_10 = temp_9 - 2;\n  if ((temp_11 & 0x100000) != 0) goto LAB_08000278;\n  temp_7 = temp_6;\n  temp_9 = temp_11;\n  if (temp_11 == 0) {\n    temp_7 = 0;\n    temp_9 = temp_6;\n  }\n  temp_8 = LZCOUNT(temp_9);\n  if (temp_11 == 0) {\n    temp_8 = temp_8 + 0x20;\n  }\n  temp_11 = temp_8 - 0xb;\n  flag_3 = SBORROW4(temp_11,0x20);\n  temp_6 = temp_8 - 0x2b;\n  flag_2 = (int)temp_6 < 0;\n  flag_1 = temp_6 == 0;\n  if ((int)temp_11 < 0x20) {\n    flag_3 = SCARRY4(temp_6,0xc);\n    temp_8 = temp_8 + -0x1f;\n    flag_2 = temp_8 < 0;\n    flag_1 = temp_8 == 0;\n    temp_6 = temp_11;\n    if (!flag_1 && flag_2 == flag_3) {\n      temp_7 = temp_9 << (temp_11 & 0xff);\n      temp_9 = temp_9 >> (0xcU - temp_8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_12 = 0x20 - temp_6;\n  }\n  temp_9 = temp_9 << (temp_6 & 0xff);\n  if (flag_1 || flag_2 != flag_3) {\n    temp_9 = temp_9 | temp_7 >> (temp_12 & 0xff);\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_7 = temp_7 << (temp_6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_11 <= (int)temp_10) {\n    return CONCAT44(temp_9 + (temp_10 - temp_11) * 0x100000 | input_2,temp_7);\n  }\n  temp_6 = ~(temp_10 - temp_11);\n  if ((int)temp_6 < 0x1f) {\n    temp_8 = temp_6 - 0x13;\n    if (temp_8 != 0 && temp_8 < 0 == SCARRY4(temp_6 - 0x1f,0xc)) {\n      return CONCAT44(temp_4,temp_7 >> (0x20 - (0xcU - temp_8) & 0xff) | temp_9 << (0xcU - temp_8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_6 = temp_6 + 1;\n    return CONCAT44(input_2 | temp_9 >> (temp_6 & 0xff),\n                    temp_7 >> (temp_6 & 0xff) | temp_9 << (0x20 - temp_6 & 0xff));\n  }\n  return CONCAT44(temp_4,temp_9 >> (temp_6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_integer_operations_08000168",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "bVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "uVar10": "temp_10",
                "uVar11": "temp_11",
                "uVar12": "temp_12",
                "bVar13": "flag_1",
                "bVar14": "flag_2",
                "bVar15": "flag_3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_shifted_multiplies_0800016c",
            "code": "\nulonglong calculate_shifted_multiplies_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shifted_value1;\n  byte carry_bit;\n  uint sum1;\n  uint sum2;\n  uint shifted_value2;\n  int shifted_value1_shifted;\n  uint shifted_param2;\n  uint shifted_param4;\n  uint shifted_value3;\n  uint shifted_param4_shifted;\n  uint shifted_value2_shifted;\n  uint result_low;\n  bool is_equal;\n  bool condition;\n  bool sub_condition;\n  \n  shifted_param2 = input2 << 1;\n  shifted_value3 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  condition = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    condition = (shifted_param2 | input1) == 0;\n  }\n  if (!condition) {\n    condition = (shifted_value3 | input3) == 0;\n  }\n  shifted_value1_shifted = (int)shifted_param2 >> 0x15;\n  if (!condition) {\n    condition = shifted_value1_shifted == -1;\n  }\n  shifted_value1 = (int)shifted_value3 >> 0x15;\n  if (!condition) {\n    condition = shifted_value1 == -1;\n  }\n  if (condition) {\n    if (shifted_value1_shifted == -1 || shifted_value1 == -1) {\n      shifted_value3 = input4;\n      shifted_param2 = input3;\n      if (shifted_value1_shifted == -1) {\n        shifted_value3 = input2;\n        shifted_param2 = input1;\n      }\n      if (shifted_value1_shifted != -1 || shifted_value1 != -1) {\n        input3 = shifted_param2;\n        input4 = shifted_value3;\n      }\n      condition = (shifted_param2 | shifted_value3 << 0xc) == 0;\n      if (condition) {\n        condition = (input3 | input4 << 0xc) == 0;\n      }\n      if (condition) {\n        condition = shifted_value3 == input4;\n      }\n      if (!condition) {\n        shifted_value3 = shifted_value3 | 0x80000;\n      }\n      return CONCAT44(shifted_value3,shifted_param2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_param2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_param2 >> 0x15 == 0) {\n      condition = (input1 & 0x80000000) != 0;\n      shifted_value3 = input2 * 2 + (uint)condition;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition)) {\n        shifted_value3 = shifted_value3 | 0x80000000;\n      }\n      return CONCAT44(shifted_value3,input1 << 1);\n    }\n    if (shifted_param2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_param2 = shifted_param2 >> 0x15;\n  shifted_value3 = shifted_value3 >> 0x15;\n  shifted_param4_shifted = shifted_value3 - shifted_param2;\n  condition = shifted_param4_shifted != 0;\n  if (shifted_value3 < shifted_param2) {\n    shifted_param4_shifted = -shifted_param4_shifted;\n  }\n  shifted_param4 = input1;\n  shifted_value2 = input2;\n  if (condition && shifted_param2 <= shifted_value3) {\n    shifted_param2 = shifted_param2 + shifted_param4_shifted;\n    shifted_param4 = input3;\n    shifted_value2 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < shifted_param4_shifted) {\n    return CONCAT44(shifted_value2,shifted_param4);\n  }\n  shifted_value3 = shifted_value2 & 0xfffff | 0x100000;\n  if ((shifted_value2 & 0x80000000) != 0) {\n    condition = shifted_param4 != 0;\n    shifted_param4 = -shifted_param4;\n    shifted_value3 = -shifted_value3 - (uint)condition;\n  }\n  shifted_value2 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    condition = input3 != 0;\n    input3 = -input3;\n    shifted_value2 = -shifted_value2 - (uint)condition;\n  }\n  if (shifted_param2 == shifted_param4_shifted) {\n    shifted_value2 = shifted_value2 ^ 0x100000;\n    if (shifted_param2 == 0) {\n      shifted_value3 = shifted_value3 ^ 0x100000;\n      shifted_param2 = 1;\n    }\n    else {\n      shifted_param4_shifted = shifted_param4_shifted - 1;\n    }\n  }\n  result_low = -shifted_param4_shifted + 0x20;\n  if ((int)shifted_param4_shifted < 0x21) {\n    shifted_value2_shifted = input3 << (result_low & 0xff);\n    input3 = input3 >> (shifted_param4_shifted & 0xff);\n    sum1 = shifted_param4 + input3;\n    sum2 = shifted_value2 << (result_low & 0xff);\n    result_low = sum1 + sum2;\n    shifted_value3 = shifted_value3 + CARRY4(shifted_param4,input3) + ((int)shifted_value2 >> (shifted_param4_shifted & 0xff)) +\n            (uint)CARRY4(sum1,sum2);\n  }\n  else {\n    shifted_value2_shifted = shifted_value2 << (-shifted_param4_shifted + 0x40 & 0xff);\n    if (input3 != 0) {\n      shifted_value2_shifted = shifted_value2_shifted | 2;\n    }\n    shifted_value2 = (int)shifted_value2 >> (shifted_param4_shifted - 0x20 & 0xff);\n    result_low = shifted_param4 + shifted_value2;\n    shifted_value3 = shifted_value3 + ((int)shifted_value2 >> 0x1f) + (uint)CARRY4(shifted_param4,shifted_value2);\n  }\n  input2 = shifted_value3 & 0x80000000;\n  shifted_param4_shifted = shifted_value3;\n  if ((int)shifted_value3 < 0) {\n    condition = shifted_value2_shifted == 0;\n    shifted_value2_shifted = -shifted_value2_shifted;\n    shifted_param4_shifted = -result_low;\n    result_low = -(uint)!condition - result_low;\n    shifted_param4_shifted = -(uint)(condition <= shifted_param4_shifted) - shifted_value3;\n  }\n  if (0xfffff < shifted_param4_shifted) {\n    shifted_param4 = shifted_param2 - 1;\n    if (0x1fffff < shifted_param4_shifted) {\n      shifted_value3 = shifted_param4_shifted & 1;\n      shifted_param4_shifted = shifted_param4_shifted >> 1;\n      carry_bit = (byte)result_low;\n      result_low = (uint)(shifted_value3 != 0) << 0x1f | result_low >> 1;\n      shifted_value2_shifted = (uint)(carry_bit & 1) << 0x1f | shifted_value2_shifted >> 1;\n      shifted_param4 = shifted_param2;\n      if (0xffbfffff < shifted_param2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition = 0x7fffffff < shifted_value2_shifted;\n    if (shifted_value2_shifted == 0x80000000) {\n      condition = (result_low & 1) != 0;\n    }\n    return CONCAT44(shifted_param4_shifted + shifted_param4 * 0x100000 + (uint)CARRY4(result_low,(uint)condition) | input2,\n                    result_low + condition);\n  }\n  is_equal = (shifted_value2_shifted & 0x80000000) != 0;\n  shifted_value2_shifted = shifted_value2_shifted << 1;\n  shifted_param4 = result_low * 2;\n  condition = CARRY4(result_low,result_low);\n  result_low = result_low * 2 + (uint)is_equal;\n  shifted_param4_shifted = shifted_param4_shifted * 2 + (uint)(condition || CARRY4(shifted_param4,(uint)is_equal));\n  shifted_param4 = shifted_param2 - 2;\n  if ((shifted_param4_shifted & 0x100000) != 0) goto LAB_08000278;\n  shifted_value2 = result_low;\n  shifted_param2 = shifted_param4_shifted;\n  if (shifted_param4_shifted == 0) {\n    shifted_value2 = 0;\n    shifted_param2 = result_low;\n  }\n  shifted_value1_shifted = LZCOUNT(shifted_param2);\n  if (shifted_param4_shifted == 0) {\n    shifted_value1_shifted = shifted_value1_shifted + 0x20;\n  }\n  result_low = shifted_value1_shifted - 0xb;\n  sub_condition = SBORROW4(result_low,0x20);\n  shifted_param4_shifted = shifted_value1_shifted - 0x2b;\n  condition = (int)shifted_param4_shifted < 0;\n  is_equal = shifted_param4_shifted == 0;\n  if ((int)result_low < 0x20) {\n    sub_condition = SCARRY4(shifted_param4_shifted,0xc);\n    shifted_value1_shifted = shifted_value1_shifted + -0x1f;\n    condition = shifted_value1_shifted < 0;\n    is_equal = shifted_value1_shifted == 0;\n    shifted_param4_shifted = result_low;\n    if (!is_equal && condition == sub_condition) {\n      shifted_value2 = shifted_param2 << (result_low & 0xff);\n      shifted_param2 = shifted_param2 >> (0xcU - shifted_value1_shifted & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || condition != sub_condition) {\n    shifted_value2_shifted = 0x20 - shifted_param4_shifted;\n  }\n  shifted_param2 = shifted_param2 << (shifted_param4_shifted & 0xff);\n  if (is_equal || condition != sub_condition) {\n    shifted_param2 = shifted_param2 | shifted_value2 >> (shifted_value2_shifted & 0xff);\n  }\n  if (is_equal || condition != sub_condition) {\n    shifted_value2 = shifted_value2 << (shifted_param4_shifted & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result_low <= (int)shifted_param4) {\n    return CONCAT44(shifted_param2 + (shifted_param4 - result_low) * 0x100000 | input2,shifted_value2);\n  }\n  shifted_param4_shifted = ~(shifted_param4 - result_low);\n  if ((int)shifted_param4_shifted < 0x1f) {\n    shifted_value1_shifted = shifted_param4_shifted - 0x13;\n    if (shifted_value1_shifted != 0 && shifted_value1_shifted < 0 == SCARRY4(shifted_param4_shifted - 0x1f,0xc)) {\n      return CONCAT44(shifted_value3,shifted_value2 >> (0x20 - (0xcU - shifted_value1_shifted) & 0xff) | shifted_param2 << (0xcU - shifted_value1_shifted & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_param4_shifted = shifted_param4_shifted + 1;\n    return CONCAT44(input2 | shifted_param2 >> (shifted_param4_shifted & 0xff),\n                    shifted_value2 >> (shifted_param4_shifted & 0xff) | shifted_param2 << (0x20 - shifted_param4_shifted & 0xff));\n  }\n  return CONCAT44(shifted_value3,shifted_param2 >> (shifted_param4_shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_shifted_multiplies_0800016c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_value1",
                "bVar2": "carry_bit",
                "uVar3": "sum1",
                "uVar4": "sum2",
                "uVar5": "shifted_value2",
                "iVar6": "shifted_value1_shifted",
                "uVar7": "shifted_param2",
                "uVar8": "shifted_param4",
                "uVar9": "shifted_value3",
                "uVar10": "shifted_param4_shifted",
                "uVar11": "shifted_value2_shifted",
                "uVar12": "result_low",
                "bVar13": "is_equal",
                "bVar14": "condition",
                "bVar15": "sub_condition"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_combine_08000404",
            "code": "\nulonglong shiftAndCombine_08000404(uint inputValue)\n\n{\n  uint shiftedBits;\n  uint absInputValue;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedAmount;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool overflow;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  signBit = inputValue & 0x80000000;\n  absInputValue = inputValue;\n  if ((int)signBit < 0) {\n    absInputValue = -inputValue;\n  }\n  shiftedBits = 0;\n  leadingZeros = LZCOUNT(absInputValue);\n  shiftedAmount = leadingZeros + 0x15;\n  overflow = SBORROW4(shiftedAmount,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedAmount < 0x20) {\n    overflow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedAmount;\n    if (!isZero && overflow == false) {\n      shiftedBits = absInputValue << shiftedAmount;\n      absInputValue = absInputValue >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != overflow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInputValue = absInputValue << (shiftAmount & 0xff);\n  if (isZero || isNegative != overflow) {\n    absInputValue = absInputValue | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != overflow) {\n    shiftedBits = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (shiftedAmount < 0x433) {\n    return CONCAT44(absInputValue + (0x432 - shiftedAmount) * 0x100000 | signBit,shiftedBits);\n  }\n  shiftAmount = ~(0x432 - shiftedAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(inputValue,absInputValue >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInputValue >> (shiftAmount & 0xff),\n                    shiftedBits >> (shiftAmount & 0xff) | absInputValue << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(inputValue,shiftedBits >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInputValue << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_combine_08000404",
                "param_1": "inputValue",
                "uVar1": "shiftedBits",
                "uVar2": "absInputValue",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedAmount",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "overflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_and_mask_bits_08000428",
            "code": "\nulonglong reverseAndMaskBits_08000428(uint input,undefined4 unusedVar1,undefined4 unusedVar2,uint unusedVar3)\n\n{\n  uint bit31;\n  uint shiftedInput;\n  uint bit31AndShiftedInput;\n  uint shiftedInputDividedBy8;\n  uint inputTimes2;\n  int bitCount;\n  uint bitCountMinus11;\n  uint remainingShiftCount;\n  bool isBitCountMinus11Zero;\n  bool isInputTimes2ZeroOrFF000000;\n  bool isBitCountMinus11Lt0;\n  \n  inputTimes2 = input << 1;\n  isInputTimes2ZeroOrFF000000 = inputTimes2 == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInputDividedBy8 = (uint)((int)inputTimes2 >> 3) >> 1;\n  bit31AndShiftedInput = bit31 | shiftedInputDividedBy8;\n  input = input << 0x1d;\n  if (!isInputTimes2ZeroOrFF000000) {\n    unusedVar3 = inputTimes2 & 0xff000000;\n    isInputTimes2ZeroOrFF000000 = unusedVar3 == 0;\n  }\n  if (!isInputTimes2ZeroOrFF000000) {\n    isInputTimes2ZeroOrFF000000 = unusedVar3 == 0xff000000;\n  }\n  if (!isInputTimes2ZeroOrFF000000) {\n    return CONCAT44(bit31AndShiftedInput,input) ^ 0x3800000000000000;\n  }\n  if (inputTimes2 == 0 || unusedVar3 == 0xff000000) {\n    return CONCAT44(bit31AndShiftedInput,input);\n  }\n  shiftedInput = input;\n  inputTimes2 = shiftedInputDividedBy8;\n  if (shiftedInputDividedBy8 == 0) {\n    shiftedInput = 0;\n    inputTimes2 = input;\n  }\n  bitCount = LZCOUNT(inputTimes2);\n  if (shiftedInputDividedBy8 == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  bitCountMinus11 = bitCount - 0xb;\n  isBitCountMinus11Lt0 = SBORROW4(bitCountMinus11,0x20);\n  shiftedInputDividedBy8 = bitCount - 0x2b;\n  isInputTimes2ZeroOrFF000000 = (int)shiftedInputDividedBy8 < 0;\n  isBitCountMinus11Zero = shiftedInputDividedBy8 == 0;\n  if ((int)bitCountMinus11 < 0x20) {\n    isBitCountMinus11Lt0 = SCARRY4(shiftedInputDividedBy8,0xc);\n    bitCount = bitCount + -0x1f;\n    isInputTimes2ZeroOrFF000000 = bitCount < 0;\n    isBitCountMinus11Zero = bitCount == 0;\n    shiftedInputDividedBy8 = bitCountMinus11;\n    if (!isBitCountMinus11Zero && isInputTimes2ZeroOrFF000000 == isBitCountMinus11Lt0) {\n      shiftedInput = inputTimes2 << (bitCountMinus11 & 0xff);\n      inputTimes2 = inputTimes2 >> (0xcU - bitCount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isBitCountMinus11Zero || isInputTimes2ZeroOrFF000000 != isBitCountMinus11Lt0) {\n    remainingShiftCount = 0x20 - shiftedInputDividedBy8;\n  }\n  inputTimes2 = inputTimes2 << (shiftedInputDividedBy8 & 0xff);\n  if (isBitCountMinus11Zero || isInputTimes2ZeroOrFF000000 != isBitCountMinus11Lt0) {\n    inputTimes2 = inputTimes2 | shiftedInput >> (remainingShiftCount & 0xff);\n  }\n  if (isBitCountMinus11Zero || isInputTimes2ZeroOrFF000000 != isBitCountMinus11Lt0) {\n    shiftedInput = shiftedInput << (shiftedInputDividedBy8 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)bitCountMinus11 < 0x381) {\n    return CONCAT44(inputTimes2 + (0x380 - bitCountMinus11) * 0x100000 | bit31,shiftedInput);\n  }\n  shiftedInputDividedBy8 = ~(0x380 - bitCountMinus11);\n  if ((int)shiftedInputDividedBy8 < 0x1f) {\n    bitCount = shiftedInputDividedBy8 - 0x13;\n    if (bitCount != 0 && bitCount < 0 == SCARRY4(shiftedInputDividedBy8 - 0x1f,0xc)) {\n      return CONCAT44(bit31AndShiftedInput,shiftedInput >> (0x20 - (0xcU - bitCount) & 0xff) | inputTimes2 << (0xcU - bitCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedInputDividedBy8 = shiftedInputDividedBy8 + 1;\n    return CONCAT44(bit31 | inputTimes2 >> (shiftedInputDividedBy8 & 0xff),\n                    shiftedInput >> (shiftedInputDividedBy8 & 0xff) | inputTimes2 << (0x20 - shiftedInputDividedBy8 & 0xff));\n  }\n  return CONCAT44(bit31AndShiftedInput,inputTimes2 >> (shiftedInputDividedBy8 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_and_mask_bits_08000428",
                "param_1": "input",
                "param_2": "unusedVar1",
                "param_3": "unusedVar2",
                "param_4": "unusedVar3",
                "uVar1": "bit31",
                "uVar2": "shiftedInput",
                "uVar3": "bit31AndShiftedInput",
                "uVar4": "shiftedInputDividedBy8",
                "uVar5": "inputTimes2",
                "iVar6": "bitCount",
                "uVar7": "bitCountMinus11",
                "in_r12": "remainingShiftCount",
                "bVar8": "isBitCountMinus11Zero",
                "bVar9": "isInputTimes2ZeroOrFF000000",
                "bVar10": "isBitCountMinus11Lt0"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_shifted_value_080004d0",
            "code": "\nulonglong calculate_shifted_value_080004d0(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  ulonglong temp1;\n  longlong temp2;\n  uint temp3;\n  uint shifted_value2;\n  int temp5;\n  uint temp6;\n  uint temp7;\n  uint maxValue;\n  uint temp9;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong shifted_value;\n  \n  shifted_value = CONCAT44(input_param2,input_param1);\n  maxValue = 0x7ff;\n  shifted_value2 = input_param2 >> 0x14 & 0x7ff;\n  flag1 = shifted_value2 == 0;\n  if (!flag1) {\n    temp7 = input_param4 >> 0x14 & 0x7ff;\n    flag1 = temp7 == 0;\n  }\n  if (!flag1) {\n    flag1 = shifted_value2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (flag1) {\n    shifted_value = calculate_shifted_value_080004d0_080006ac();\n  }\n  temp3 = (uint)(shifted_value >> 0x20);\n  temp5 = shifted_value2 + temp7;\n  shifted_value2 = temp3 ^ input_param4;\n  temp3 = temp3 & ~(maxValue << 0x15);\n  input_param4 = input_param4 & ~(maxValue << 0x15);\n  flag1 = ((uint)shifted_value | temp3 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input_param3 | input_param4 << 0xc) == 0;\n  }\n  temp3 = temp3 | 0x100000;\n  input_param4 = input_param4 | 0x100000;\n  if (flag1) {\n    input_param3 = (uint)shifted_value | input_param3;\n    input_param4 = (shifted_value2 & 0x80000000 | temp3) ^ input_param4;\n    shifted_value2 = maxValue >> 1;\n    flag3 = SBORROW4(temp5,shifted_value2);\n    temp6 = temp5 - shifted_value2;\n    flag1 = temp6 == 0;\n    temp3 = temp6;\n    if (!flag1 && (int)shifted_value2 <= temp5) {\n      flag3 = SBORROW4(maxValue,temp6);\n      temp3 = maxValue - temp6;\n      flag1 = maxValue == temp6;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      input_param4 = input_param4 | temp6 * 0x100000;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      return CONCAT44(input_param4,input_param3);\n    }\n    input_param4 = input_param4 | 0x100000;\n    maxValue = 0;\n    flag3 = SBORROW4(temp6,1);\n    temp6 = temp6 - 1;\n    flag1 = temp6 == 0;\n    shifted_value2 = temp6;\n  }\n  else {\n    temp1 = (shifted_value & 0xffffffff) * (ulonglong)input_param3;\n    shifted_value = (shifted_value & 0xffffffff) * (ulonglong)input_param4 +\n             (ulonglong)temp3 * (ulonglong)input_param3 + (temp1 >> 0x20);\n    temp9 = (uint)shifted_value;\n    temp2 = (ulonglong)temp3 * (ulonglong)input_param4 + (shifted_value >> 0x20);\n    maxValue = (uint)temp2;\n    temp3 = (uint)((ulonglong)temp2 >> 0x20);\n    if ((int)temp1 != 0) {\n      temp9 = temp9 | 1;\n    }\n    temp6 = (temp5 + -0x3ff) - (uint)(temp3 < 0x200);\n    if (temp3 < 0x200) {\n      flag1 = (temp9 & 0x80000000) != 0;\n      temp9 = temp9 << 1;\n      temp2 = CONCAT44(temp3 * 2 + (uint)(CARRY4(maxValue,maxValue) || CARRY4(maxValue * 2,(uint)flag1)),\n                       maxValue * 2 + (uint)flag1);\n    }\n    input_param4 = shifted_value2 & 0x80000000 | (int)((ulonglong)temp2 >> 0x20) << 0xb | (uint)temp2 >> 0x15;\n    input_param3 = (uint)temp2 << 0xb | temp9 >> 0x15;\n    maxValue = temp9 * 0x800;\n    flag2 = 0xfc < temp6;\n    flag3 = SBORROW4(temp6,0xfd);\n    temp3 = temp6 - 0xfd;\n    flag1 = temp3 == 0;\n    shifted_value2 = temp3;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp3;\n      flag3 = SBORROW4(temp3,0x700);\n      shifted_value2 = temp6 - 0x7fd;\n      flag1 = temp3 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < maxValue;\n      if (maxValue == 0x80000000) {\n        flag1 = (temp9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param4 + temp6 * 0x100000 + (uint)CARRY4(input_param3,(uint)flag1),input_param3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)shifted_value2 < 0 == flag3) {\n    return (ulonglong)(input_param4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp6,0x36);\n  flag1 = (int)(temp6 + 0x36) < 0;\n  flag3 = temp6 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input_param3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input_param4 = input_param4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input_param4,input_param3);\n  }\n  shifted_value2 = -temp6;\n  temp3 = shifted_value2 - 0x20;\n  if (0x1f < (int)shifted_value2) {\n    temp6 = input_param3 >> (temp3 & 0xff) | input_param4 << (0x20 - temp3 & 0xff);\n    shifted_value2 = (input_param4 >> (temp3 & 0xff) & ~((input_param4 & 0x80000000) >> (temp3 & 0xff))) -\n            ((int)temp6 >> 0x1f);\n    if ((maxValue | input_param3 << (0x20 - temp3 & 0xff) | temp6 << 1) == 0) {\n      shifted_value2 = shifted_value2 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44(input_param4,shifted_value2) & 0x80000000ffffffff;\n  }\n  temp5 = shifted_value2 - 0x14;\n  if (temp5 == 0 || temp5 < 0 != SCARRY4(temp3,0xc)) {\n    temp9 = input_param3 << (temp6 + 0x20 & 0xff);\n    temp3 = input_param3 >> (shifted_value2 & 0xff) | input_param4 << (temp6 + 0x20 & 0xff);\n    temp6 = temp3 + -((int)temp9 >> 0x1f);\n    if ((maxValue | temp9 << 1) == 0) {\n      temp6 = temp6 & ~(temp9 >> 0x1f);\n    }\n    return CONCAT44((input_param4 & 0x80000000) +\n                    ((input_param4 & 0x7fffffff) >> (shifted_value2 & 0xff)) +\n                    (uint)CARRY4(temp3,-((int)temp9 >> 0x1f)),temp6);\n  }\n  shifted_value2 = 0xc - temp5;\n  temp6 = input_param3 << (shifted_value2 & 0xff);\n  shifted_value2 = input_param3 >> (0x20 - shifted_value2 & 0xff) | input_param4 << (shifted_value2 & 0xff);\n  temp3 = shifted_value2 + -((int)temp6 >> 0x1f);\n  if ((maxValue | temp6 << 1) == 0) {\n    temp3 = temp3 & ~(temp6 >> 0x1f);\n  }\n  return CONCAT44((input_param4 & 0x80000000) + (uint)CARRY4(shifted_value2,-((int)temp6 >> 0x1f)),temp3);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_shifted_value_080004d0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp1",
                "lVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "shifted_value2",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "unaff_r5": "temp7",
                "uVar7": "maxValue",
                "uVar8": "temp9",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "shifted_value"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_shifted_value_080006ac",
            "code": "\nulonglong calculate_shifted_value_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint msb_input1;\n  uint temp1;\n  uint shifted_value;\n  uint msb_input2;\n  uint msb_input4;\n  bool is_zero;\n  \n  shifted_value = msb_input4 & input4 >> 0x14;\n  if (temp1 != msb_input4 && shifted_value != msb_input4) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      msb_input2 = input2 & 0x80000000;\n      do {\n        msb_input1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(msb_input1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | msb_input2;\n      if (shifted_value != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      shifted_value = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(shifted_value != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  msb_input2 = input2;\n  if (((!is_zero) && ((temp1 != msb_input4 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((shifted_value != msb_input4 || (input1 = input3, msb_input2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(msb_input2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_shifted_value_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "msb_input1",
                "unaff_r4": "temp1",
                "uVar2": "shifted_value",
                "uVar3": "msb_input2",
                "in_r12": "msb_input4",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_result_08000724",
            "code": "\nulonglong calculateResult_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint resultHigh;\n  uint temp9;\n  uint temp10;\n  uint resultLow;\n  uint temp11;\n  uint mask;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  undefined8 extractedCodeResult;\n  \n  extractedCodeResult = CONCAT44(input2,input1);\n  mask = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  condition1 = temp7 == 0;\n  if (!condition1) {\n    temp9 = input4 >> 0x14 & 0x7ff;\n    condition1 = temp9 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp7 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = temp9 == 0x7ff;\n  }\n  if (condition1) {\n    extractedCodeResult = extracted_code_function_08000892();\n  }\n  resultHigh = (uint)((ulonglong)extractedCodeResult >> 0x20);\n  resultLow = (uint)extractedCodeResult;\n  temp8 = temp7 - temp9;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (resultHigh ^ input4) & 0x80000000 | resultHigh & 0xfffff;\n    condition3 = SCARRY4(temp8,mask >> 1);\n    resultHigh = temp8 + (mask >> 1);\n    condition1 = (int)resultHigh < 0;\n    condition2 = resultHigh == 0;\n    if (!condition2 && condition1 == condition3) {\n      condition3 = SBORROW4(mask,resultHigh);\n      condition1 = (int)(mask - resultHigh) < 0;\n      condition2 = mask == resultHigh;\n    }\n    if (!condition2 && condition1 == condition3) {\n      temp7 = temp7 | resultHigh * 0x100000;\n    }\n    if (!condition2 && condition1 == condition3) {\n      return CONCAT44(temp7,resultLow);\n    }\n    temp7 = temp7 | 0x100000;\n    mask = 0;\n    condition2 = SBORROW4(resultHigh,1);\n    resultHigh = resultHigh - 1;\n    condition1 = resultHigh == 0;\n    temp3 = resultHigh;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    mask = input3 << 8;\n    temp10 = (resultHigh << 0xc) >> 4 | 0x10000000 | resultLow >> 0x18;\n    resultLow = resultLow * 0x100;\n    temp7 = (resultHigh ^ input4) & 0x80000000;\n    condition1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      condition1 = mask <= resultLow;\n    }\n    temp8 = temp8 + (uint)condition1;\n    resultHigh = temp8 + 0x3fd;\n    if (condition1 == false) {\n      temp3 = temp3 >> 1;\n      mask = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | mask >> 1;\n    }\n    temp11 = resultLow - mask;\n    temp10 = (temp10 - temp3) - (uint)(resultLow < mask);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | mask >> 1;\n    resultLow = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      condition1 = temp1 <= temp11;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)condition1) {\n        temp11 = temp11 - temp1;\n        resultLow = resultLow | temp3;\n        temp10 = (temp10 - temp4) - (uint)!condition1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp1 <= temp11;\n      condition1 = temp10 - temp5 < (uint)condition2;\n      mask = temp10;\n      if (temp5 < temp10 || condition1) {\n        temp11 = temp11 - temp1;\n        mask = (temp10 - temp5) - (uint)!condition2;\n      }\n      if (temp5 < temp10 || condition1) {\n        resultLow = resultLow | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp2 <= temp11;\n      condition1 = mask - temp10 < (uint)condition2;\n      temp5 = mask;\n      if (temp10 < mask || condition1) {\n        temp11 = temp11 - temp2;\n        temp5 = (mask - temp10) - (uint)!condition2;\n      }\n      if (temp10 < mask || condition1) {\n        resultLow = resultLow | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      condition2 = temp1 <= temp11;\n      condition1 = temp5 - temp6 < (uint)condition2;\n      temp10 = temp5;\n      if (temp6 < temp5 || condition1) {\n        temp11 = temp11 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!condition2;\n      }\n      if (temp6 < temp5 || condition1) {\n        resultLow = resultLow | temp3 >> 3;\n      }\n      mask = temp10 | temp11;\n      if (mask == 0) break;\n      temp10 = temp10 << 4 | temp11 >> 0x1c;\n      temp11 = temp11 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | resultLow;\n        resultLow = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | resultLow;\n      resultLow = 0;\n    }\nLAB_08000842:\n    condition3 = 0xfc < resultHigh;\n    condition2 = SBORROW4(resultHigh,0xfd);\n    temp4 = temp8 + 0x300;\n    condition1 = temp4 == 0;\n    temp3 = temp4;\n    if (condition3 && !condition1) {\n      condition3 = 0x6ff < temp4;\n      condition2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      condition1 = temp4 == 0x700;\n    }\n    if (!condition3 || condition1) {\n      condition1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        condition1 = temp1 <= temp11;\n      }\n      if (temp10 == temp6 && temp11 == temp1) {\n        condition1 = (resultLow & 1) != 0;\n      }\n      return CONCAT44(temp7 + resultHigh * 0x100000 + (uint)CARRY4(resultLow,(uint)condition1),resultLow + condition1);\n    }\n  }\n  if (!condition1 && (int)temp3 < 0 == condition2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition3 = SCARRY4(resultHigh,0x36);\n  condition1 = (int)(resultHigh + 0x36) < 0;\n  condition2 = resultHigh == 0xffffffca;\n  if (condition2 || condition1 != condition3) {\n    resultLow = 0;\n  }\n  if (condition2 || condition1 != condition3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (condition2 || condition1 != condition3) {\n    return CONCAT44(temp7,resultLow);\n  }\n  temp3 = -resultHigh;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = resultLow >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    resultHigh = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((mask | resultLow << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      resultHigh = resultHigh & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,resultHigh) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp10,0xc)) {\n    resultHigh = 0xc - temp8;\n    temp3 = resultLow << (resultHigh & 0xff);\n    resultLow = resultLow >> (0x20 - resultHigh & 0xff) | temp7 << (resultHigh & 0xff);\n    resultHigh = resultLow + -((int)temp3 >> 0x1f);\n    if ((mask | temp3 << 1) == 0) {\n      resultHigh = resultHigh & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(resultLow,-((int)temp3 >> 0x1f)),resultHigh);\n  }\n  temp10 = resultLow << (resultHigh + 0x20 & 0xff);\n  resultLow = resultLow >> (temp3 & 0xff) | temp7 << (resultHigh + 0x20 & 0xff);\n  resultHigh = resultLow + -((int)temp10 >> 0x1f);\n  if ((mask | temp10 << 1) == 0) {\n    resultHigh = resultHigh & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(resultLow,-((int)temp10 >> 0x1f)),resultHigh);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_result_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "resultHigh",
                "unaff_r5": "temp9",
                "uVar10": "temp10",
                "uVar11": "resultLow",
                "uVar12": "temp11",
                "uVar13": "mask",
                "bVar14": "condition1",
                "bVar15": "condition2",
                "bVar16": "condition3",
                "uVar17": "extractedCodeResult"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "extracted_code_function_08000892",
            "code": "\nulonglong extractedCodeFunction_08000892(uint inputValue1,uint inputValue2,uint inputValue3,uint inputValue4)\n\n{\n  uint bit1;\n  uint tempVar1;\n  uint bit2;\n  uint tempVar2;\n  uint constantVar;\n  bool isZero;\n  \n  bit2 = constantVar & inputValue4 >> 0x14;\n  tempVar2 = inputValue2;\n  if (tempVar1 != constantVar || bit2 != constantVar) {\n    if (tempVar1 == constantVar) {\n      if (((inputValue1 | inputValue2 << 0xc) == 0) && (inputValue1 = inputValue3, tempVar2 = inputValue4, bit2 != constantVar)\n         ) {\nreturnCase1:\n        return (ulonglong)((inputValue2 ^ inputValue4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constantVar) {\n      inputValue1 = inputValue3;\n      tempVar2 = inputValue4;\n      if ((inputValue3 | inputValue4 << 0xc) == 0) {\nreturnCase2:\n        return (ulonglong)((inputValue2 ^ inputValue4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (inputValue1 | inputValue2 << 1) == 0;\n      if (!isZero) {\n        isZero = (inputValue3 | inputValue4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (tempVar1 == 0) {\n          tempVar2 = inputValue2 & 0x80000000;\n          do {\n            bit1 = inputValue1 & 0x80000000;\n            inputValue1 = inputValue1 << 1;\n            inputValue2 = inputValue2 * 2 + (uint)(bit1 != 0);\n          } while ((inputValue2 & 0x100000) == 0);\n          inputValue2 = inputValue2 | tempVar2;\n          if (bit2 != 0) {\n            return CONCAT44(inputValue2,inputValue1);\n          }\n        }\n        do {\n          tempVar2 = inputValue3 & 0x80000000;\n          inputValue3 = inputValue3 << 1;\n          inputValue4 = inputValue4 * 2 + (uint)(tempVar2 != 0);\n        } while ((inputValue4 & 0x100000) == 0);\n        return CONCAT44(inputValue2,inputValue1);\n      }\n      if ((inputValue1 | inputValue2 << 1) != 0) goto returnCase1;\n      if ((inputValue3 | inputValue4 << 1) != 0) goto returnCase2;\n    }\n  }\n  return CONCAT44(tempVar2,inputValue1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "extracted_code_function_08000892",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "uVar1": "bit1",
                "unaff_r4": "tempVar1",
                "uVar2": "bit2",
                "uVar3": "tempVar2",
                "in_r12": "constantVar",
                "bVar4": "isZero",
                "LAB_08000704": "returnCase1",
                "LAB_080006c8": "returnCase2"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "compare_parameters_08000904",
            "code": "\nuint compareParameters_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xorResult;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    xorResult = value2 ^ value4;\n    isZero = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)xorResult && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "compare_parameters_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xorResult",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "validate_and_process_parameters_08000980",
            "code": "\nvoid validate_and_process_parameters_08000980(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  validate_parameters_08000990(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "validate_and_process_parameters_08000980",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "validate_parameters_08000990",
            "code": "\nundefined4 validate_parameters_08000990(undefined4 input_param)\n\n{\n  validate_inputs();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000990": "validate_parameters_08000990",
                "param_1": "input_param",
                "compare_parameters_08000904": "validate_inputs"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "validate_and_return_result_080009a0",
            "code": "\nbool validate_and_return_result_080009a0(void)\n\n{\n  char result;\n  \n  validate_parameters_08000990();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "validate_and_return_result_080009a0",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_null_termination_080009b4",
            "code": "\nbool check_null_termination_080009b4(void)\n\n{\n  char input_character;\n  \n  validate_parameters_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_null_termination_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "validate_parameters_and_return_result_080009c8",
            "code": "\nbool validate_parameters_and_return_result_080009c8(void)\n\n{\n  undefined zero_result;\n  undefined carry_result;\n  \n  validate_parameters_08000990();\n  return !(bool)carry_result || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "validate_parameters_and_return_result_080009c8",
                "in_ZR": "zero_result",
                "in_CY": "carry_result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_null_terminated_080009f0",
            "code": "\nbool check_if_null_terminated_080009f0(void)\n\n{\n  char input_character;\n  \n  validate_and_process_parameters_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_null_terminated_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 check_parameters_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint inputValue,uint controlValue)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  temp1 = controlValue * 2;\n  isLessThanThreshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThanThreshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((controlValue & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputValue | controlValue << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return controlValue & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return controlValue & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputValue >> (temp1 & 0xff);\n    if (inputValue << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = controlValue & 0x1fffff | 0x100000;\n    inputValue = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (controlValue & 0x80000000 | inputValue >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "inputValue",
                "param_2": "controlValue",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_float_08000ad8",
            "code": "\nuint calculateFloat_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftCount1;\n  int shiftCount2;\n  uint signBit;\n  uint temp1;\n  uint result1;\n  uint condition;\n  uint difference;\n  bool check;\n  \n  signBit = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  check = result1 == 0;\n  if (!check) {\n    input4 = input2 << 1;\n    check = input4 == 0;\n  }\n  if (!check) {\n    check = result1 == input4;\n  }\n  shiftCount1 = (int)result1 >> 0x18;\n  if (!check) {\n    check = shiftCount1 == -1;\n  }\n  if (!check) {\n    check = (int)input4 >> 0x18 == -1;\n  }\n  if (check) {\n    shiftCount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftCount1 == -1 || shiftCount2 == -1) {\n      result1 = signBit;\n      if (shiftCount1 == -1) {\n        result1 = input1;\n      }\n      if (shiftCount1 != -1 || shiftCount2 != -1) {\n        signBit = result1;\n      }\n      check = (result1 & 0x7fffff) == 0;\n      if (check) {\n        check = (signBit & 0x7fffff) == 0;\n      }\n      if (check) {\n        check = result1 == signBit;\n      }\n      if (!check) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ signBit) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = signBit;\n      }\n      return input1;\n    }\n    if (input1 != signBit) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      signBit = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        signBit = signBit | 0x80000000;\n      }\n      return signBit;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  check = difference != 0;\n  condition = result1;\n  if (check && result1 <= input4) {\n    condition = result1 + difference;\n  }\n  if (check && result1 <= input4) {\n    signBit = signBit ^ input1;\n  }\n  if (check && result1 <= input4) {\n    input1 = input1 ^ signBit;\n  }\n  if (check && result1 <= input4) {\n    signBit = signBit ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  temp1 = signBit & 0xffffff | 0x800000;\n  if ((signBit & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (condition == difference) {\n    temp1 = temp1 ^ 0x800000;\n    if (condition == 0) {\n      result1 = result1 ^ 0x800000;\n      condition = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)temp1 >> (difference & 0xff));\n  temp1 = temp1 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    check = temp1 != 0;\n    temp1 = -temp1;\n    result1 = -result1 - (uint)check;\n  }\n  if (result1 < 0x800000) {\n    signBit = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    result1 = result1 * 2 + (uint)(signBit != 0);\n    signBit = condition - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = leadingZeroCount(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)signBit < (int)difference) {\n        result1 = result1 >> (-(signBit - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (signBit - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    signBit = condition - 1;\n    if (0xffffff < result1) {\n      signBit = result1 & 1;\n      result1 = result1 >> 1;\n      temp1 = (uint)(signBit != 0) << 0x1f | temp1 >> 1;\n      signBit = condition;\n      if (0xfd < condition) goto LAB_08000c12;\n    }\n  }\n  result1 = result1 + signBit * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftCount1",
                "iVar2": "shiftCount2",
                "uVar3": "signBit",
                "uVar4": "temp1",
                "uVar5": "result1",
                "uVar6": "condition",
                "uVar7": "difference",
                "bVar8": "check",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_08000adc",
            "code": "\nuint calculateFloat_08000adc(uint operand1,uint operand2,undefined4 modifier,uint rounding)\n\n{\n  int shiftedOperand1;\n  int shiftedOperand2;\n  uint shiftedResult;\n  uint result;\n  uint shiftAmount;\n  uint difference;\n  bool isZero;\n  \n  result = operand1 << 1;\n  isZero = result == 0;\n  if (!isZero) {\n    rounding = operand2 << 1;\n    isZero = rounding == 0;\n  }\n  if (!isZero) {\n    isZero = result == rounding;\n  }\n  shiftedOperand1 = (int)result >> 0x18;\n  if (!isZero) {\n    isZero = shiftedOperand1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)rounding >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedOperand2 = (int)(operand2 << 1) >> 0x18;\n    if (shiftedOperand1 == -1 || shiftedOperand2 == -1) {\n      result = operand2;\n      if (shiftedOperand1 == -1) {\n        result = operand1;\n      }\n      if (shiftedOperand1 != -1 || shiftedOperand2 != -1) {\n        operand2 = result;\n      }\n      isZero = (result & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (operand2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = result == operand2;\n      }\n      if (!isZero) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((operand1 ^ operand2) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        operand1 = operand2;\n      }\n      return operand1;\n    }\n    if (operand1 != operand2) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      result = operand1 << 1;\n      if ((operand1 & 0x80000000) != 0) {\n        result = result | 0x80000000;\n      }\n      return result;\n    }\n    if (result < 0xfe000000) {\n      return operand1 + 0x800000;\n    }\n    operand1 = operand1 & 0x80000000;\nLAB_08000c12:\n    return operand1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  rounding = rounding >> 0x18;\n  difference = rounding - result;\n  isZero = difference != 0;\n  shiftAmount = result;\n  if (isZero && result <= rounding) {\n    shiftAmount = result + difference;\n  }\n  if (isZero && result <= rounding) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (isZero && result <= rounding) {\n    operand1 = operand1 ^ operand2;\n  }\n  if (isZero && result <= rounding) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (rounding < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return operand1;\n  }\n  result = operand1 & 0xffffff | 0x800000;\n  if ((operand1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  shiftedResult = operand2 & 0xffffff | 0x800000;\n  if ((operand2 & 0x80000000) != 0) {\n    shiftedResult = -shiftedResult;\n  }\n  if (shiftAmount == difference) {\n    shiftedResult = shiftedResult ^ 0x800000;\n    if (shiftAmount == 0) {\n      result = result ^ 0x800000;\n      shiftAmount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)shiftedResult >> (difference & 0xff));\n  shiftedResult = shiftedResult << (0x20 - difference & 0xff);\n  operand1 = result & 0x80000000;\n  if ((int)result < 0) {\n    isZero = shiftedResult != 0;\n    shiftedResult = -shiftedResult;\n    result = -result - (uint)isZero;\n  }\n  if (result < 0x800000) {\n    difference = shiftedResult & 0x80000000;\n    shiftedResult = shiftedResult << 1;\n    result = result * 2 + (uint)(difference != 0);\n    difference = shiftAmount - 2;\n    if ((result & 0x800000) == 0) {\n      shiftAmount = LZCOUNT(result) - 8;\n      result = result << (shiftAmount & 0xff);\n      if ((int)difference < (int)shiftAmount) {\n        result = result >> (-(difference - shiftAmount) & 0xff);\n      }\n      else {\n        result = result + (difference - shiftAmount) * 0x800000;\n      }\n      return result | operand1;\n    }\n  }\n  else {\n    difference = shiftAmount - 1;\n    if (0xffffff < result) {\n      difference = result & 1;\n      result = result >> 1;\n      shiftedResult = (uint)(difference != 0) << 0x1f | shiftedResult >> 1;\n      difference = shiftAmount;\n      if (0xfd < shiftAmount) goto LAB_08000c12;\n    }\n  }\n  result = result + difference * 0x800000 + (uint)(0x7fffffff < shiftedResult);\n  if (shiftedResult == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | operand1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "modifier",
                "param_4": "rounding",
                "iVar1": "shiftedOperand1",
                "iVar2": "shiftedOperand2",
                "uVar3": "shiftedResult",
                "uVar4": "result",
                "uVar5": "shiftAmount",
                "uVar6": "difference",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "convert_to_normalized_08000c3c",
            "code": "\nuint convertToNormalized_08000c3c(uint input_number)\n\n{\n  uint finalResult;\n  uint shiftedNumber;\n  int calculationResult;\n  uint tempValue;\n  \n  if (input_number == 0) {\n    return 0;\n  }\n  finalResult = LZCOUNT(input_number);\n  shiftedNumber = finalResult - 8;\n  calculationResult = shiftedNumber * -0x800000 + 0x4a800000;\n  if (7 < finalResult) {\n    tempValue = 0 << (shiftedNumber & 0xff);\n    finalResult = calculationResult + (input_number << (shiftedNumber & 0xff)) +\n            (0U >> (0x20 - shiftedNumber & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      finalResult = finalResult & 0xfffffffe;\n    }\n    return finalResult;\n  }\n  shiftedNumber = input_number << finalResult + 0x18;\n  finalResult = calculationResult + ((input_number >> (0x20 - (finalResult + 0x18) & 0xff)) - ((int)shiftedNumber >> 0x1f));\n  if ((shiftedNumber & 0x7fffffff) == 0) {\n    finalResult = finalResult & ~(shiftedNumber >> 0x1f);\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "convert_to_normalized_08000c3c",
                "param_1": "input_number",
                "uVar1": "finalResult",
                "uVar2": "shiftedNumber",
                "iVar3": "calculationResult",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_checksum_08000c44",
            "code": "\nuint calculateChecksum_08000c44(uint input)\n\n{\n  uint leadingZeroCount;\n  uint shiftAmount;\n  uint isNegative;\n  int accumulatedSum;\n  \n  isNegative = input & 0x80000000;\n  if ((int)isNegative < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeroCount = LZCOUNT(input);\n  shiftAmount = leadingZeroCount - 8;\n  accumulatedSum = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeroCount) {\n    leadingZeroCount = 0 << (shiftAmount & 0xff);\n    isNegative = accumulatedSum + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeroCount);\n    if (leadingZeroCount == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = input << leadingZeroCount + 0x18;\n  isNegative = accumulatedSum + ((input >> (0x20 - (leadingZeroCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_checksum_08000c44",
                "param_1": "input",
                "uVar1": "leadingZeroCount",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "accumulatedSum"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_value_08000cec",
            "code": "\nuint calculateFloatValue_08000cec(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  longlong result;\n  uint floatBits;\n  uint exponentBits1;\n  int exponentSum;\n  int exponentDifference;\n  uint mantissaBits;\n  int exponentOffset;\n  uint resultBits;\n  bool isZero;\n  bool isNegative;\n  \n  exponentBits1 = value1 >> 0x17 & 0xff;\n  isZero = exponentBits1 == 0;\n  if (!isZero) {\n    param4 = value2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponentBits1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = value2 >> 0x17 & 0xff;\n    if (exponentBits1 == 0xff || param4 == 0xff) {\n      isZero = value1 == 0 || value1 == 0x80000000;\n      floatBits = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        isZero = value2 == 0;\n        floatBits = value1;\n      }\n      if (!isZero) {\n        isZero = value2 == 0x80000000;\n      }\n      resultBits = floatBits;\n      if (((isZero) || ((exponentBits1 == 0xff && ((floatBits & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (resultBits = value2, (value2 & 0x7fffff) != 0)))) {\n        return resultBits | 0x7fc00000;\n      }\n      floatBits = floatBits ^ value2;\n      goto LAB_08000e3c;\n    }\n    isZero = (value1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (value2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    isZero = exponentBits1 == 0;\n    floatBits = value1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value1 = value1 << 1;\n        isZero = (value1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponentBits1 = exponentBits1 - 1;\n    }\n    value1 = value1 | floatBits;\n    isZero = param4 == 0;\n    floatBits = value2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value2 = value2 << 1;\n        isZero = (value2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    value2 = value2 | floatBits;\n  }\n  exponentSum = exponentBits1 + param4;\n  resultBits = value1 ^ value2;\n  exponentBits1 = value1 << 9;\n  isZero = exponentBits1 == 0;\n  if (!isZero) {\n    value2 = value2 << 9;\n    isZero = value2 == 0;\n  }\n  if (isZero) {\n    if (exponentBits1 == 0) {\n      value2 = value2 << 9;\n    }\n    floatBits = resultBits & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    isNegative = SBORROW4(exponentSum,0x7f);\n    exponentDifference = exponentSum + -0x7f;\n    isZero = exponentDifference == 0;\n    exponentOffset = exponentDifference;\n    if (!isZero && 0x7e < exponentSum) {\n      isNegative = SBORROW4(0xff,exponentDifference);\n      exponentOffset = 0xff - exponentDifference;\n      isZero = exponentDifference == 0xff;\n    }\n    if (!isZero && exponentOffset < 0 == isNegative) {\n      floatBits = floatBits | exponentDifference * 0x800000;\n    }\n    if (!isZero && exponentOffset < 0 == isNegative) {\n      return floatBits;\n    }\n    floatBits = floatBits | 0x800000;\n    mantissaBits = 0;\n    isNegative = SBORROW4(exponentDifference,1);\n    resultBits = exponentSum - 0x80;\n    isZero = resultBits == 0;\n    exponentBits1 = resultBits;\n  }\n  else {\n    result = (ulonglong)(exponentBits1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    mantissaBits = (uint)result;\n    floatBits = (uint)((ulonglong)result >> 0x20);\n    isZero = floatBits < 0x800000;\n    if (isZero) {\n      floatBits = floatBits << 1;\n    }\n    if (isZero) {\n      floatBits = floatBits | mantissaBits >> 0x1f;\n      mantissaBits = mantissaBits << 1;\n    }\n    floatBits = resultBits & 0x80000000 | floatBits;\n    resultBits = (exponentSum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(resultBits,0xfd);\n    isZero = resultBits == 0xfd;\n    exponentBits1 = resultBits - 0xfd;\n    if (resultBits < 0xfe) {\n      floatBits = floatBits + resultBits * 0x800000 + (uint)(0x7fffffff < mantissaBits);\n      if (mantissaBits == 0x80000000) {\n        floatBits = floatBits & 0xfffffffe;\n      }\n      return floatBits;\n    }\n  }\n  if (isZero || (int)exponentBits1 < 0 != isNegative) {\n    isZero = (int)(resultBits + 0x19) < 0;\n    if (resultBits == 0xffffffe7 || isZero != SCARRY4(resultBits,0x19)) {\n      floatBits = floatBits & 0x80000000;\n    }\n    if (resultBits != 0xffffffe7 && isZero == SCARRY4(resultBits,0x19)) {\n      exponentBits1 = (floatBits << 1) >> (-resultBits & 0xff);\n      resultBits = floatBits << (resultBits + 0x20 & 0xff);\n      exponentBits1 = ((uint)((floatBits & 0x80000000) != 0) << 0x1f | exponentBits1 >> 1) + (uint)((byte)exponentBits1 & 1);\n      if ((mantissaBits | resultBits << 1) == 0) {\n        exponentBits1 = exponentBits1 & ~(resultBits >> 0x1f);\n      }\n      return exponentBits1;\n    }\n    return floatBits;\n  }\nLAB_08000e3c:\n  return floatBits & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_value_08000cec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "result",
                "uVar2": "floatBits",
                "uVar3": "exponentBits1",
                "iVar4": "exponentSum",
                "iVar5": "exponentDifference",
                "uVar6": "mantissaBits",
                "iVar7": "exponentOffset",
                "uVar8": "resultBits",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_08000e54",
            "code": "\nuint calculate_float_08000e54(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  uint var1;\n  uint var2;\n  int var3;\n  uint var4;\n  int var5;\n  uint var6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  var2 = input_1 >> 0x17 & 0xff;\n  flag1 = var2 == 0;\n  if (!flag1) {\n    input_4 = input_2 >> 0x17 & 0xff;\n    flag1 = input_4 == 0;\n  }\n  if (!flag1) {\n    flag1 = var2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = input_4 == 0xff;\n  }\n  if (flag1) {\n    input_4 = input_2 >> 0x17 & 0xff;\n    var6 = input_1;\n    if (var2 == 0xff) {\n      if (((input_1 & 0x7fffff) != 0) || (var6 = input_2, input_4 == 0xff)) {\nLAB_08000e4a:\n        return var6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (input_4 == 0xff) {\n        var6 = input_2;\n        if ((input_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input_1 ^ input_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      flag1 = (input_1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (input_2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = var2 == 0;\n        var6 = input_1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input_1 = input_1 << 1;\n            flag1 = (input_1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          var2 = var2 - 1;\n        }\n        input_1 = input_1 | var6;\n        flag1 = input_4 == 0;\n        var6 = input_2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input_2 = input_2 << 1;\n            flag1 = (input_2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          input_4 = input_4 - 1;\n        }\n        input_2 = input_2 | var6;\n        goto LAB_08000e6c;\n      }\n      if ((input_1 & 0x7fffffff) == 0) {\n        if ((input_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input_1 = input_1 ^ input_2;\n  }\n  else {\nLAB_08000e6c:\n    var3 = var2 - input_4;\n    if (input_2 << 9 == 0) {\n      input_1 = (input_1 ^ input_2) & 0x80000000 | input_1 & 0x7fffff;\n      flag3 = SCARRY4(var3,0x7f);\n      var5 = var3 + 0x7f;\n      flag1 = var5 < 0;\n      flag2 = var5 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,var5);\n        flag1 = 0xff - var5 < 0;\n        flag2 = var5 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        input_1 = input_1 | var5 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return input_1;\n      }\n      input_1 = input_1 | 0x800000;\n      var2 = 0;\n      flag2 = SBORROW4(var5,1);\n      var4 = var3 + 0x7e;\n      flag1 = var4 == 0;\n      var6 = var4;\n    }\n    else {\n      var1 = (input_2 << 9) >> 4 | 0x10000000;\n      var2 = (input_1 << 9) >> 4 | 0x10000000;\n      input_1 = (input_1 ^ input_2) & 0x80000000;\n      flag1 = var1 <= var2;\n      if (!flag1) {\n        var2 = var2 << 1;\n      }\n      var4 = var3 + 0x7d + (uint)flag1;\n      var6 = 0x800000;\n      do {\n        if (var1 <= var2) {\n          var2 = var2 - var1;\n          input_1 = input_1 | var6;\n        }\n        flag1 = var1 >> 1 <= var2;\n        if (flag1) {\n          var2 = var2 - (var1 >> 1);\n        }\n        if (flag1) {\n          input_1 = input_1 | var6 >> 1;\n        }\n        flag1 = var1 >> 2 <= var2;\n        if (flag1) {\n          var2 = var2 - (var1 >> 2);\n        }\n        if (flag1) {\n          input_1 = input_1 | var6 >> 2;\n        }\n        flag1 = var1 >> 3 <= var2;\n        if (flag1) {\n          var2 = var2 - (var1 >> 3);\n        }\n        if (flag1) {\n          input_1 = input_1 | var6 >> 3;\n        }\n        var2 = var2 * 0x10;\n        flag1 = var2 == 0;\n        if (!flag1) {\n          var6 = var6 >> 4;\n          flag1 = var6 == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(var4,0xfd);\n      flag1 = var4 == 0xfd;\n      var6 = var4 - 0xfd;\n      if (var4 < 0xfe) {\n        input_1 = input_1 + var4 * 0x800000 + (uint)(var1 <= var2);\n        if (var2 - var1 == 0) {\n          input_1 = input_1 & 0xfffffffe;\n        }\n        return input_1;\n      }\n    }\n    if (flag1 || (int)var6 < 0 != flag2) {\n      flag1 = (int)(var4 + 0x19) < 0;\n      if (var4 == 0xffffffe7 || flag1 != SCARRY4(var4,0x19)) {\n        input_1 = input_1 & 0x80000000;\n      }\n      if (var4 == 0xffffffe7 || flag1 != SCARRY4(var4,0x19)) {\n        return input_1;\n      }\n      var6 = (input_1 << 1) >> (-var4 & 0xff);\n      var4 = input_1 << (var4 + 0x20 & 0xff);\n      var6 = ((uint)((input_1 & 0x80000000) != 0) << 0x1f | var6 >> 1) + (uint)((byte)var6 & 1);\n      if ((var2 | var4 << 1) == 0) {\n        var6 = var6 & ~(var4 >> 0x1f);\n      }\n      return var6;\n    }\n  }\n  return input_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3",
                "uVar4": "var4",
                "iVar5": "var5",
                "uVar6": "var6",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculateResult_08000f9c(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint input1Times2;\n  uint input2Times2;\n  uint combinedInputs;\n  bool isZero;\n  \n  input1Times2 = input1 * 2;\n  input2Times2 = input2 * 2;\n  if (((int)input1Times2 >> 0x18 == -1 || (int)input2Times2 >> 0x18 == -1) &&\n     ((((int)input1Times2 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2Times2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combinedInputs = input1Times2 | input2 & 0x7fffffff;\n  isZero = combinedInputs == 0;\n  if (!isZero) {\n    combinedInputs = input1 ^ input2;\n    isZero = combinedInputs == 0;\n  }\n  isNegative = -1 < (int)combinedInputs;\n  if (isNegative) {\n    input1 = input1Times2 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && input2Times2 <= input1Times2) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || input2Times2 > input1Times2) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  result input1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "isNegative",
                "uVar2": "input1Times2",
                "uVar3": "input2Times2",
                "uVar4": "combinedInputs",
                "bVar5": "isZero",
                "return": "result"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_params_08000ffc",
            "code": "\nvoid concatenateParams_08000ffc(undefined4 dest,undefined4 src)\n\n{\n  concatenate_params_08001004(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_params_08000ffc",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 firstParam,undefined4 secondParam)\n\n{\n  calculate_result_08000f9c();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenation_result_08001014",
            "code": "\nbool check_concatenation_result_08001014(void)\n\n{\n  char concatenation_result;\n  \n  concatenate_params_08001004();\n  return concatenation_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenation_result_08001014",
                "in_ZR": "concatenation_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_concatenation_empty_08001028",
            "code": "\nbool check_if_concatenation_empty_08001028(void)\n\n{\n  char input_character;\n  \n  concatenate_params_08001004();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_concatenation_empty_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenation_result_08001050",
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_result;\n  \n  concatenate_params_08000ffc();\n  return !(bool)is_carry_result || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_result"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "is_concatenation_empty_08001064",
            "code": "\nbool is_concatenation_empty_08001064(void)\n\n{\n  char concatenated_string;\n  \n  concatenate_parameters();\n  return concatenated_string == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "is_concatenation_empty_08001064",
                "in_CY": "concatenated_string",
                "concatenate_params_08000ffc": "concatenate_parameters"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_value_08001078",
            "code": "\nuint extractValue_08001078(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint calculationResult;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  calculationResult = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && calculationResult != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (calculationResult & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((calculationResult == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extract_value_08001078",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "calculationResult"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "check_param_080010c4",
            "code": "\nuint check_param_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "check_param_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_memory_08001104",
            "code": "\nundefined4 initializeMemory_08001104(undefined4 value)\n\n{\n  uint globalValue;\n  \n  globalValue = getGlobalValue();\n  updateMemory(globalValue / 1000);\n  setMemoryValue(0xffffffff,value,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_memory_08001104",
                "param_1": "value",
                "uVar1": "globalValue",
                "get_global_value_08002214": "getGlobalValue",
                "update_memory_08001214": "updateMemory",
                "set_memory_value_08001194": "setMemoryValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initialize_system_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_memory_protection(3);\n  initialize_memory(0);\n  initialize_memory_protection();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128",
                "configure_memory_protection_08001170": "configure_memory_protection",
                "initialize_memory_08001104": "initialize_memory",
                "initialize_memory_protection_08004ccc": "initialize_memory_protection"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_value_0800115c",
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_protection_08001170",
            "code": "\n\n\nvoid configureMemoryProtection_08001170(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (configuration & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_protection_08001170",
                "param_1": "configuration"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "set_memory_value_08001194",
            "code": "\n\n\nvoid setMemoryValue_08001194(uint address,uint data,uint mask)\n\n{\n  undefined shiftedValue;\n  uint shiftAmount;\n  uint maskShifted;\n  uint maskShiftedPlusFour;\n  \n  maskShifted = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - maskShifted;\n  maskShiftedPlusFour = maskShifted + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (maskShiftedPlusFour < 7) {\n    maskShifted = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < maskShiftedPlusFour) {\n    maskShifted = maskShifted - 3;\n  }\n  shiftedValue = (undefined)\n          ((mask & (1 << (maskShifted & 0xff)) - 1U | (data & shiftAmount) << (maskShifted & 0xff)) << 4);\n  if (-1 < (int)address) {\n    maskShifted = address + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    maskShifted = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(maskShifted + 0x300) = shiftedValue;\n  }\n  else {\n    *(undefined *)(shiftAmount + maskShifted) = shiftedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "set_memory_value_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount",
                "uVar3": "maskShifted",
                "uVar4": "maskShiftedPlusFour"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_at_index_080011fc",
            "code": "\nvoid setBitAtIndex_080011fc(uint index)\n\n{\n  *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_at_index_080011fc",
                "param_1": "index"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "update_memory_08001214",
            "code": "\n\n\nundefined4 update_memory_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "update_memory_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "update_e000e010_flag_08001240",
            "code": "\n\n\nvoid update_e000e010_flag_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "update_e000e010_flag_08001240",
                "param_1": "value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_registers_08001264",
            "code": "\n\n\nvoid updateRegisters_08001264(uint *register1,uint *register2)\n\n{\n  uint updateValue;\n  uint bitCheck;\n  uint opcode;\n  int registerIndex;\n  uint bitIndex;\n  uint mask;\n  uint pattern;\n  uint *registerPtr;\n  int bitOffset;\n  \n  updateValue = 0;\n  bitIndex = 0;\n  do {\n    mask = 1 << (bitIndex & 0xff);\n    bitCheck = mask & *register2;\n    if (mask == bitCheck) {\n      opcode = register2[1];\n      if (opcode == 0x12) {\n        updateValue = register2[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          updateValue = register2[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_080013be;\n          if (opcode == 1) {\n            updateValue = register2[3];\n          }\n        }\n        else if (opcode == 3) {\n          updateValue = 0;\n        }\n        else if (opcode == 0x11) {\n          updateValue = register2[3] + 4;\n        }\n      }\n      else {\n        if (opcode != 0x10210000) {\n          if (opcode < 0x10210001) {\n            if (opcode != 0x10110000) {\n              pattern = 0x10120000;\nLAB_080013b8:\n              if (opcode != pattern) goto LAB_080012a8;\n            }\n          }\n          else if ((opcode != 0x10310000) && (opcode != 0x10320000)) {\n            pattern = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        updateValue = register2[2];\n        if (updateValue == 0) {\n          updateValue = 4;\n        }\n        else {\n          if (updateValue == 1) {\n            register1[4] = mask;\n          }\n          if (updateValue != 1) {\n            register1[5] = mask;\n          }\n          updateValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitCheck < 0x100) {\n        mask = *register1;\n        opcode = bitIndex << 2;\n        registerPtr = register1;\n      }\n      else {\n        mask = register1[1];\n        opcode = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitCheck) {\n        registerPtr = register1 + 1;\n      }\n      *registerPtr = mask & ~(0xf << (opcode & 0xff)) | updateValue << (opcode & 0xff);\n      registerPtr = (uint *)register2[1];\n      if (((uint)registerPtr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitOffset = (bitIndex & 3) << 2;\n        if (register1 == (uint *)0x40010800) {\n          registerIndex = 0;\n        }\n        else if (register1 == (uint *)0x40010c00) {\n          registerIndex = 1;\n        }\n        else if (register1 == (uint *)0x40011000) {\n          registerIndex = 2;\n        }\n        else if (register1 == (uint *)0x40011400) {\n          registerIndex = 3;\n        }\n        else {\n          registerIndex = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             registerIndex << bitOffset | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << bitOffset);\n        if (((uint)registerPtr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitCheck;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitCheck;\n        }\n        if (((uint)registerPtr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitCheck;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitCheck;\n        }\n        if (((uint)registerPtr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitCheck;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitCheck;\n        }\n        if (((uint)registerPtr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitCheck;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_registers_08001264",
                "param_1": "register1",
                "param_2": "register2",
                "uVar1": "updateValue",
                "uVar2": "bitCheck",
                "uVar3": "opcode",
                "iVar4": "registerIndex",
                "uVar5": "bitIndex",
                "uVar6": "mask",
                "uVar7": "pattern",
                "unaff_r10": "registerPtr",
                "iVar8": "bitOffset"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(object_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "apply_xor_0800142e",
            "code": "\nvoid applyXOR_0800142e(int srcAddress,uint value)\n\n{\n  *(uint *)(srcAddress + 0xc) = value ^ *(uint *)(srcAddress + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "apply_xor_0800142e",
                "param_1": "srcAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_flag_status_08001436",
            "code": "\nundefined4 checkFlagStatus_08001436(int *flagPtr)\n\n{\n  int value;\n  \n  value = *flagPtr;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    flagPtr[0xe] = 4;\n    *(undefined *)((int)flagPtr + 0x35) = 0x20;\n    *(undefined *)(flagPtr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "param_1": "flagPtr",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_validity_08001460",
            "code": "\nundefined4 checkDataValidity_08001460(uint **dataPointer,uint paramA,uint paramB)\n\n{\n  int dataValue1;\n  int dataValue2;\n  uint dataValue3;\n  uint *pointerValue;\n  \n  dataValue1 = get_data_value_0800115c();\n  do {\n    pointerValue = *dataPointer;\n    if ((paramA << 8) >> 0x18 == 1) {\n      dataValue3 = pointerValue[5];\n    }\n    else {\n      dataValue3 = pointerValue[6];\n    }\n    if ((paramA & 0xffff & ~dataValue3) == 0) {\n      return 0;\n    }\n    if ((int)(pointerValue[5] << 0x15) < 0) {\n      *pointerValue = *pointerValue | 0x200;\n      pointerValue[5] = pointerValue[5] & 0xfffffbff;\n      dataPointer[0xe] = (uint *)0x4;\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 1;\n    }\n  } while ((paramB == 0xffffffff) ||\n          ((paramB != 0 && (dataValue2 = get_data_value_0800115c(), (uint)(dataValue2 - dataValue1) <= paramB))));\n  *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "param_1": "dataPointer",
                "param_2": "paramA",
                "param_3": "paramB",
                "iVar1": "dataValue1",
                "iVar2": "dataValue2",
                "uVar3": "dataValue3",
                "puVar4": "pointerValue"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_data_and_update_080014e2",
            "code": "\nundefined4 check_data_and_update_080014e2(int *data_array,uint flag_value)\n\n{\n  int data_value;\n  int flag_status;\n  \n  data_value = get_data_value_0800115c();\n  while( true ) {\n    if (*(int *)(*data_array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    flag_status = check_flag_status_08001436(data_array);\n    if (flag_status != 0) break;\n    if ((flag_value != 0xffffffff) &&\n       ((flag_value == 0 || (flag_status = get_data_value_0800115c(), flag_value < (uint)(flag_status - data_value))))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_data_and_update_080014e2",
                "param_1": "data_array",
                "param_2": "flag_value",
                "iVar1": "data_value",
                "iVar2": "flag_status"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "process_data_08001530",
            "code": "\nundefined4 processData_08001530(uint **data_ptr,uint value_1,uint value_2,int flag,uint param_5)\n\n{\n  int data_value_1;\n  int data_value_2;\n  uint *ptr;\n  uint **data_ptr_ptr;\n  uint value_1_copy;\n  uint value_2_copy;\n  \n  **data_ptr = **data_ptr | 0x100;\n  data_ptr_ptr = data_ptr;\n  value_1_copy = value_1;\n  value_2_copy = value_2;\n  data_value_1 = get_data_value_0800115c();\n  do {\n    ptr = *data_ptr;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = value_1 & 0xfe;\n        data_value_1 = check_data_validity_08001460(data_ptr,0x10002,param_5,ptr,data_ptr_ptr,value_1_copy,value_2_copy);\n        if (data_value_1 == 0) {\n          data_value_1 = check_data_and_update_080014e2(data_ptr,param_5,(*data_ptr)[5],(*data_ptr)[6]);\n          if (data_value_1 == 0) {\n            ptr = *data_ptr;\n            if (flag == 1) {\nLAB_080015ca:\n              ptr[4] = value_2 & 0xff;\n              return 0;\n            }\n            ptr[4] = value_2 >> 8;\n            data_value_1 = check_data_and_update_080014e2(data_ptr,param_5);\n            if (data_value_1 == 0) {\n              ptr = *data_ptr;\n              goto LAB_080015ca;\n            }\n          }\n          if (data_ptr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data_ptr = **data_ptr | 0x200;\n        }\n        else if (data_ptr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param_5 == 0xffffffff);\n    if ((param_5 == 0) || (data_value_2 = get_data_value_0800115c(), param_5 < (uint)(data_value_2 - data_value_1))) {\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "process_data_08001530",
                "param_1": "data_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "flag",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "puVar3": "ptr",
                "ppuVar4": "data_ptr_ptr",
                "uVar5": "value_1_copy",
                "uVar6": "value_2_copy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 processData_080015e8(uint **dataPtr,uint value1,uint value2,int checkFlag,uint maxValue)\n\n{\n  int dataValue;\n  int compareValue;\n  uint *ptr;\n  uint **ptrPtr;\n  uint tmpValue1;\n  uint tmpValue2;\n  \n  ptr = *dataPtr;\n  *ptr = *ptr | 0x400;\n  *ptr = *ptr | 0x100;\n  ptrPtr = dataPtr;\n  tmpValue1 = value1;\n  tmpValue2 = value2;\n  dataValue = get_data_value_0800115c();\nLAB_0800160e:\n  ptr = *dataPtr;\n  while (-1 < (int)(ptr[5] << 0x1f)) {\n    if (maxValue != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr[4] = value1 & 0xfe;\n  dataValue = check_data_validity_08001460(dataPtr,0x10002,maxValue,ptr,ptrPtr,tmpValue1,tmpValue2);\n  if (dataValue != 0) goto LAB_080016ba;\n  dataValue = check_data_and_update_080014e2(dataPtr,maxValue,(*dataPtr)[5],(*dataPtr)[6]);\n  if (dataValue == 0) {\n    ptr = *dataPtr;\n    if (checkFlag != 1) {\n      ptr[4] = value2 >> 8;\n      dataValue = check_data_and_update_080014e2(dataPtr,maxValue);\n      if (dataValue != 0) goto LAB_08001642;\n      ptr = *dataPtr;\n    }\n    ptr[4] = value2 & 0xff;\n    dataValue = check_data_and_update_080014e2(dataPtr,maxValue);\n    if (dataValue == 0) {\n      **dataPtr = **dataPtr | 0x100;\n      dataValue = get_data_value_0800115c();\n      do {\n        do {\n          if ((int)((*dataPtr)[5] << 0x1f) < 0) {\n            (*dataPtr)[4] = value1 & 0xff | 1;\n            dataValue = check_data_validity_08001460(dataPtr,0x10002,maxValue);\n            if (dataValue == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (dataPtr[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (maxValue == 0xffffffff);\n      } while ((maxValue != 0) && (compareValue = get_data_value_0800115c(), (uint)(compareValue - dataValue) <= maxValue));\nLAB_0800165a:\n      *(undefined *)((int)dataPtr + 0x35) = 0x20;\n      *(undefined *)(dataPtr + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (dataPtr[0xe] == (uint *)0x4) {\n    **dataPtr = **dataPtr | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((maxValue == 0) || (compareValue = get_data_value_0800115c(), maxValue < (uint)(compareValue - dataValue)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "process_data_080015e8",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "checkFlag",
                "param_5": "maxValue",
                "iVar1": "dataValue",
                "iVar2": "compareValue",
                "puVar3": "ptr",
                "ppuVar4": "ptrPtr",
                "uVar5": "tmpValue1",
                "uVar6": "tmpValue2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_data_080016f4",
            "code": "\nundefined4 check_data_080016f4(int *data_array,uint data_length)\n\n{\n  int initial_data_value;\n  int current_data_value;\n  \n  initial_data_value = get_data_value_0800115c();\n  while( true ) {\n    current_data_value = *data_array;\n    if ((*(uint *)(current_data_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_data_value + 0x14) << 0x1b < 0) break;\n    if ((data_length == 0) || (current_data_value = get_data_value_0800115c(), data_length < (uint)(current_data_value - initial_data_value))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_data_value + 0x14) = *(uint *)(current_data_value + 0x14) & 0xffffffef;\n  data_array[0xe] = 0;\n  *(undefined *)(data_array + 0xd) = 0;\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_data_080016f4",
                "param_1": "data_array",
                "param_2": "data_length",
                "iVar1": "initial_data_value",
                "iVar2": "current_data_value"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_parameters_08001754",
            "code": "\nundefined4 initializeParameters_08001754(uint **inputParams)\n\n{\n  uint lower32Bits;\n  uint upper32Bits;\n  uint *paramPtr3;\n  uint *paramPtr4;\n  uint *paramPtr5;\n  uint divisionResult;\n  undefined8 shiftedValue;\n  \n  if (inputParams != (uint **)0x0) {\n    if (*(char *)((int)inputParams + 0x35) == '\\0') {\n      *(undefined *)(inputParams + 0xd) = 0;\n      update_registers_if_needed_08004d48();\n    }\n    *(undefined *)((int)inputParams + 0x35) = 0x24;\n    **inputParams = **inputParams & 0xfffffffe;\n    shiftedValue = get_shifted_value_08002220();\n    upper32Bits = (uint)((ulonglong)shiftedValue >> 0x20);\n    lower32Bits = (uint)shiftedValue;\n    paramPtr4 = inputParams[1];\n    divisionResult = lower32Bits / 1000000;\n    if ((uint *)0x186a0 < paramPtr4) {\n      upper32Bits = 300;\n    }\n    paramPtr3 = *inputParams;\n    if ((uint *)0x186a0 < paramPtr4) {\n      upper32Bits = divisionResult * upper32Bits;\n    }\n    paramPtr3[1] = divisionResult;\n    if ((uint *)0x186a0 < paramPtr4) {\n      divisionResult = upper32Bits / 1000;\n    }\n    paramPtr3[8] = divisionResult + 1;\n    if (paramPtr4 < (uint *)0x186a1) {\n      lower32Bits = lower32Bits / (uint)((int)paramPtr4 << 1);\n      if ((lower32Bits & 0xfff) < 4) {\n        lower32Bits = 4;\n      }\n    }\n    else {\n      if (inputParams[2] == (uint *)0x0) {\n        lower32Bits = lower32Bits / (uint)((int)paramPtr4 * 3) | 0x8000;\n      }\n      else {\n        lower32Bits = lower32Bits / (uint)((int)paramPtr4 * 0x19) | 0xc000;\n      }\n      if ((lower32Bits & 0xfff) == 0) {\n        lower32Bits = 1;\n      }\n    }\n    paramPtr4 = inputParams[8];\n    paramPtr5 = inputParams[7];\n    paramPtr3[7] = lower32Bits;\n    *paramPtr3 = (uint)paramPtr5 | (uint)paramPtr4;\n    paramPtr3[2] = (uint)inputParams[4] | (uint)inputParams[3];\n    paramPtr3[3] = (uint)inputParams[5] | (uint)inputParams[6];\n    *paramPtr3 = *paramPtr3 | 1;\n    inputParams[0xe] = (uint *)0x0;\n    *(undefined *)((int)inputParams + 0x35) = 0x20;\n    *(undefined *)((int)inputParams + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_parameters_08001754",
                "param_1": "inputParams",
                "uVar1": "lower32Bits",
                "uVar2": "upper32Bits",
                "puVar3": "paramPtr3",
                "puVar4": "paramPtr4",
                "puVar5": "paramPtr5",
                "uVar6": "divisionResult",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **dataPointer,undefined4 param2,undefined4 param3,undefined4 param4,byte *bytePointer,\n            short byteCount,undefined4 param7)\n\n{\n  int value1;\n  int value2;\n  uint *pointerVar;\n  uint value4;\n  \n  if (*(char *)((int)dataPointer + 0x35) == ' ') {\n    if (bytePointer == (byte *)0x0) {\n      return 1;\n    }\n    if (byteCount == 0) {\n      return 1;\n    }\n    value1 = get_data_value_0800115c();\n    do {\n      pointerVar = *dataPointer;\n      if ((~pointerVar[6] & 2) != 0) {\n        if (*(char *)(dataPointer + 0xd) == '\\x01') {\n          return 2;\n        }\n        value4 = *pointerVar;\n        *(undefined *)(dataPointer + 0xd) = 1;\n        *pointerVar = value4 & 0xfffff7ff;\n        *(undefined *)((int)dataPointer + 0x35) = 0x21;\n        *(undefined *)((int)dataPointer + 0x36) = 0x40;\n        dataPointer[0xe] = (uint *)0x0;\n        value1 = process_data_08001530(dataPointer,param2,param3,param4,param7);\n        if (value1 != 0) {\n          *(undefined *)(dataPointer + 0xd) = 0;\n          if (dataPointer[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      value2 = get_data_value_0800115c();\n    } while ((uint)(value2 - value1) < 0x2711);\n    *(undefined *)(dataPointer + 0xd) = 0;\n    *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  }\n  return 2;\n  while (byteCount != 0) {\nLAB_080018e2:\n    value1 = check_data_and_update_080014e2(dataPointer,param7);\n    if (value1 != 0) goto LAB_080018ee;\n    pointerVar = *dataPointer;\n    pointerVar[4] = (uint)*bytePointer;\n    if ((int)(pointerVar[5] << 0x1d) < 0) {\n      if ((short)(byteCount + -1) == 0) break;\n      byteCount = byteCount + -2;\n      pointerVar[4] = (uint)bytePointer[1];\n      bytePointer = bytePointer + 2;\n    }\n    else {\n      bytePointer = bytePointer + 1;\n      byteCount = byteCount + -1;\n    }\n  }\n  value1 = check_data_and_update_080014e2(dataPointer,param7);\n  if (value1 == 0) {\n    **dataPointer = **dataPointer | 0x200;\n    *(undefined *)(dataPointer + 0xd) = 0;\n    *(undefined *)((int)dataPointer + 0x35) = 0x20;\n    *(undefined *)((int)dataPointer + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (dataPointer[0xe] == (uint *)0x4) {\n    **dataPointer = **dataPointer | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "bytePointer",
                "param_6": "byteCount",
                "param_7": "param7",
                "iVar1": "value1",
                "iVar2": "value2",
                "puVar3": "pointerVar",
                "uVar4": "value4"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **dataPointer,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *outputParam,ushort counter,uint maxIterations)\n\n{\n  undefined *var1;\n  int counter1;\n  int counter2;\n  uint *pointerVar;\n  uint valueVar;\n  undefined *outputPointer;\n  bool boolVar;\n  \n  if (*(char *)((int)dataPointer + 0x35) != ' ') {\n    return 2;\n  }\n  if (outputParam == (undefined *)0x0) {\n    return 1;\n  }\n  if (counter == 0) {\n    return 1;\n  }\n  counter1 = get_data_value_0800115c();\n  while (pointerVar = *dataPointer, (~pointerVar[6] & 2) == 0) {\n    counter2 = get_data_value_0800115c();\n    if (10000 < (uint)(counter2 - counter1)) {\n      *(undefined *)(dataPointer + 0xd) = 0;\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(dataPointer + 0xd) == '\\x01') {\n    return 2;\n  }\n  valueVar = *pointerVar;\n  *(undefined *)(dataPointer + 0xd) = 1;\n  *pointerVar = valueVar & 0xfffff7ff;\n  *(undefined *)((int)dataPointer + 0x35) = 0x22;\n  *(undefined *)((int)dataPointer + 0x36) = 0x40;\n  dataPointer[0xe] = (uint *)0x0;\n  counter1 = process_data_080015e8(dataPointer,param2,param3,param4,maxIterations);\n  if (counter1 != 0) {\n    *(undefined *)(dataPointer + 0xd) = 0;\n    if (dataPointer[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  pointerVar = *dataPointer;\n  valueVar = *pointerVar;\n  if (counter == 1) {\n    *pointerVar = valueVar & 0xfffffbff;\n    disableIRQinterrupts();\n    **dataPointer = **dataPointer | 0x200;\n    enableIRQinterrupts();\n    counter1 = check_data_080016f4(dataPointer,maxIterations);\n    if (counter1 == 0) {\n      *outputParam = (char)(*dataPointer)[4];\nLAB_08001ab8:\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)((int)dataPointer + 0x36) = 0;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (dataPointer[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (counter == 2) {\n    *pointerVar = valueVar | 0x800;\n    disableIRQinterrupts();\n    **dataPointer = **dataPointer & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *pointerVar = valueVar | 0x400;\n    while (3 < counter) {\n      counter1 = check_data_080016f4(dataPointer,maxIterations);\n      if (counter1 != 0) goto LAB_08001a18;\n      *outputParam = (char)(*dataPointer)[4];\n      pointerVar = *dataPointer;\n      boolVar = (int)(pointerVar[5] << 0x1d) < 0;\n      if (boolVar) {\n        pointerVar = (uint *)pointerVar[4];\n        outputPointer = outputParam + 2;\n        counter = counter - 2;\n      }\n      else {\n        outputPointer = outputParam + 1;\n        counter = counter - 1;\n      }\n      var1 = outputParam + 1;\n      outputParam = outputPointer;\n      if (boolVar) {\n        *var1 = (char)pointerVar;\n      }\n    }\n    if (counter != 2) {\n      counter1 = get_data_value_0800115c();\n      do {\n        pointerVar = *dataPointer;\n        do {\n          if ((int)(pointerVar[5] << 0x1d) < 0) {\n            *pointerVar = *pointerVar & 0xfffffbff;\n            disableIRQinterrupts();\n            *outputParam = (char)(*dataPointer)[4];\n            counter1 = get_data_value_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (maxIterations == 0xffffffff);\n      } while ((maxIterations != 0) && (counter2 = get_data_value_0800115c(), (uint)(counter2 - counter1) <= maxIterations));\n      goto LAB_08001afa;\n    }\n  }\n  counter1 = get_data_value_0800115c();\n  do {\n    do {\n      if ((int)((*dataPointer)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        pointerVar = *dataPointer;\n        *pointerVar = *pointerVar | 0x200;\n        *outputParam = (char)pointerVar[4];\n        enableIRQinterrupts();\n        outputParam[1] = (char)(*dataPointer)[4];\n        goto LAB_08001ab8;\n      }\n    } while (maxIterations == 0xffffffff);\n  } while ((maxIterations != 0) && (counter2 = get_data_value_0800115c(), (uint)(counter2 - counter1) <= maxIterations));\nLAB_08001afa:\n  *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    pointerVar = *dataPointer;\n    do {\n      if ((int)(pointerVar[5] << 0x1d) < 0) {\n        *pointerVar = *pointerVar | 0x200;\n        outputParam[1] = (char)pointerVar[4];\n        enableIRQinterrupts();\n        outputParam[2] = (char)(*dataPointer)[4];\n        goto LAB_08001ab8;\n      }\n    } while (maxIterations == 0xffffffff);\n  } while ((maxIterations != 0) && (counter2 = get_data_value_0800115c(), (uint)(counter2 - counter1) <= maxIterations));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "outputParam",
                "param_6": "counter",
                "param_7": "maxIterations",
                "puVar1": "var1",
                "iVar2": "counter1",
                "iVar3": "counter2",
                "puVar4": "pointerVar",
                "uVar5": "valueVar",
                "puVar6": "outputPointer",
                "bVar7": "boolVar"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_08001b58(int *input)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (*input << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (input[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      iVar1 = input[1];\n      if (iVar1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (iVar1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          iVar1 = get_data_value();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            iVar2 = get_data_value();\n            if (100 < (uint)(iVar2 - iVar1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (iVar1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      iVar1 = get_data_value();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        iVar2 = get_data_value();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*input << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (input[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      flag1 = input[4];\n      if (flag1 == 0) {\n        iVar1 = get_data_value();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          iVar2 = get_data_value();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      flag1 = 1;\n      iVar1 = get_data_value();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        iVar2 = get_data_value();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = input[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*input << 0x1c < 0) {\n    flag2 = input[6];\n    if (flag2 == 0) {\n      iVar1 = get_data_value();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        iVar2 = get_data_value();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      flag2 = 1;\n      iVar1 = get_data_value();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        iVar2 = get_data_value();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *input << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  iVar1 = get_data_value();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    iVar2 = get_data_value();\n    if (100 < (uint)(iVar2 - iVar1)) {\n      return 3;\n    }\n  }\n  iVar1 = value;\n  if (iVar1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (iVar1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      iVar1 = get_data_value();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        iVar2 = get_data_value();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (iVar1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  iVar1 = get_data_value();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    iVar2 = get_data_value();\n    if (5000 < (uint)(iVar2 - iVar1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (flag3 == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (flag3 != 2) {\n      flag4 = 0;\n      iVar1 = get_data_value();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        iVar2 = get_data_value();\n      } while ((uint)(iVar2 - iVar1) < 3);\n      return 3;\n    }\n    flag4 = 0;\n    iVar1 = get_data_value();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (value1 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | value2;\n        }\n        _DAT_40021004 = value1 | value3 | _DAT_40021004 & 0xffc2ffff;\n        flag4 = 1;\n        iVar1 = get_data_value();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          iVar2 = get_data_value();\n        } while ((uint)(iVar2 - iVar1) < 3);\n        return 3;\n      }\n      iVar2 = get_data_value();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_conditions_08001b58",
                "param_1": "input",
                "get_data_value_0800115c": "get_data_value",
                "iRam42420000": "flag1",
                "iRam42420480": "flag2",
                "param_1[3]": "value",
                "param_1[7]": "flag3",
                "uRam42420060": "flag4",
                "param_1[8]": "value1",
                "param_1[2]": "value2",
                "param_1[9]": "value3"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu_clock_08002008",
            "code": "\n\n\nint calculateMpuClock_08002008(void)\n\n{\n  undefined4 value1;\n  int mpuClock;\n  undefined4 value2;\n  undefined4 *dataPointer;\n  uint clockMultiplier;\n  undefined4 *localDataPointer;\n  byte byteArray [4];\n  undefined4 dataArray [5];\n  \n  dataPointer = &DAT_080072f0;\n  localDataPointer = dataArray;\n  do {\n    value1 = *dataPointer;\n    value2 = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *localDataPointer = value1;\n    localDataPointer[1] = value2;\n    localDataPointer = localDataPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  byteArray[0] = 1;\n  byteArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockMultiplier = 8000000 / byteArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockMultiplier = 4000000;\n    }\n    mpuClock = clockMultiplier * *(byte *)((int)dataArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    mpuClock = 8000000;\n  }\n  return mpuClock;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu_clock_08002008",
                "uVar1": "value1",
                "iVar2": "mpuClock",
                "uVar3": "value2",
                "puVar4": "dataPointer",
                "uVar5": "clockMultiplier",
                "puVar6": "localDataPointer",
                "local_24": "byteArray",
                "local_20": "dataArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "validate_memory_access_0800209c",
            "code": "\n\n\nundefined4 validate_memory_access_0800209c(uint *memory_access_info,uint access_size)\n\n{\n  char bit_0;\n  char bit_1;\n  int bit_check_result;\n  uint data_value;\n  int current_value;\n  uint shifted_value;\n  \n  if ((access_size <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | access_size, access_size == (access_size & 7))) {\n    if ((int)(*memory_access_info << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | memory_access_info[2];\n    }\n    bit_check_result = *memory_access_info << 0x1f;\n    if (-1 < bit_check_result) {\nLAB_080020ba:\n      if ((access_size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | access_size, access_size != (access_size & 7))) {\n        return 1;\n      }\n      if ((*memory_access_info & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | memory_access_info[3];\n      }\n      if ((int)(*memory_access_info << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | memory_access_info[4] << 3;\n      }\n      data_value = calculate_mpu_clock_08002008();\n      DAT_200001bc = data_value >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_memory_08001104(0);\n      return 0;\n    }\n    data_value = memory_access_info[1];\n    if (data_value == 1) {\n      bit_1 = '\\x01';\n      bit_0 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (data_value == 2) goto LAB_08002176;\n      bit_1 = '\\0';\n      bit_0 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(bit_0 << 6) << 0x18 | (uint)(byte)(bit_1 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | data_value;\n      bit_check_result = get_data_value_0800115c(bit_check_result,shifted_value);\n      if (memory_access_info[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          current_value = get_data_value_0800115c();\n        } while ((uint)(current_value - bit_check_result) < 0x1389);\n      }\n      else if (memory_access_info[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          current_value = get_data_value_0800115c();\n        } while ((uint)(current_value - bit_check_result) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          current_value = get_data_value_0800115c();\n        } while ((uint)(current_value - bit_check_result) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "validate_memory_access_0800209c",
                "param_1": "memory_access_info",
                "param_2": "access_size",
                "cVar1": "bit_0",
                "cVar2": "bit_1",
                "iVar3": "bit_check_result",
                "uVar4": "data_value",
                "iVar5": "current_value",
                "uVar6": "shifted_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_global_value_08002214",
            "code": "\nundefined4 getGlobalValue_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_global_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_data_08002250",
            "code": "\n\n\nuint get_shifted_data_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_data_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_settings_08002280",
            "code": "\nvoid updateSettings_08002280(int settingsAddress,uint *settingsData)\n\n{\n  uint modified1;\n  uint modified2;\n  uint originalData;\n  \n  *(uint *)(settingsAddress + 0x20) = *(uint *)(settingsAddress + 0x20) & 0xfffffffe;\n  modified2 = *(uint *)(settingsAddress + 4);\n  originalData = *settingsData;\n  modified1 = *(uint *)(settingsAddress + 0x20) & 0xfffffffd | settingsData[2];\n  if (settingsAddress == 0x40012c00) {\n    modified1 = (modified1 & 0xfffffff7 | settingsData[3]) & 0xfffffffb;\n    modified2 = modified2 & 0xfffffcff | settingsData[5] | settingsData[6];\n  }\n  *(uint *)(settingsAddress + 4) = modified2;\n  *(uint *)(settingsAddress + 0x18) = *(uint *)(settingsAddress + 0x18) & 0xffffff8c | originalData;\n  *(uint *)(settingsAddress + 0x34) = settingsDataValue2;\n  *(uint *)(settingsAddress + 0x20) = modified1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_settings_08002280",
                "param_1": "settingsAddress",
                "param_2": "settingsData",
                "uVar1": "modified1",
                "uVar2": "modified2",
                "uVar3": "originalData",
                "param_2[1]": "settingsDataValue2"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_data_080022d0",
            "code": "\nvoid updateData_080022d0(int dataAddress,uint *dataValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(dataAddress + 4);\n  updatedValue3 = *dataValues;\n  updatedValue1 = *(uint *)(dataAddress + 0x20) & 0xfffffdff | dataValues[2] << 8;\n  if (dataAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | dataValues[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | (dataValues[5] | dataValues[6]) << 4;\n  }\n  *(uint *)(dataAddress + 4) = updatedValue2;\n  *(uint *)(dataAddress + 0x1c) = *(uint *)(dataAddress + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(dataAddress + 0x3c) = dataValues[1];\n  *(uint *)(dataAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_data_080022d0",
                "param_1": "dataAddress",
                "param_2": "dataValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_flags_08002324",
            "code": "\nvoid updateFlags_08002324(int address,int *params)\n\n{\n  uint flags;\n  int value1;\n  int value2;\n  int defaultAddress;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffefff;\n  flags = *(uint *)(address + 4);\n  value1 = *params;\n  value2 = param2Value2;\n  defaultAddress = 0x40012c00;\n  if (address == 0x40012c00) {\n    defaultAddress = defaultAddressValue2;\n    flags = flags & 0xffffbfff;\n  }\n  if (address == 0x40012c00) {\n    flags = flags | defaultAddress << 6;\n  }\n  *(uint *)(address + 4) = flags;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(address + 0x40) = params[1];\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_flags_08002324",
                "param_1": "address",
                "param_2": "params",
                "uVar1": "flags",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "defaultAddress",
                "param_2[2]": "param2Value2",
                "param_2[5]": "defaultAddressValue2"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryAddress,uint *data)\n\n{\n  uint newValue;\n  \n  newValue = *memoryAddress;\n  if (((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n       (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) &&\n     (((newValue = newValue & 0xffffff8f | data[1], memoryAddress == (uint *)0x40012c00 ||\n       (memoryAddress == (uint *)0x40000000)) ||\n      ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))))) {\n    newValue = newValue & 0xfffffcff | data[3];\n  }\n  *memoryAddress = newValue;\n  memoryAddress[0xb] = data[2];\n  memoryAddress[10] = *data;\n  newValue = 0x40012c00;\n  if (memoryAddress == (uint *)0x40012c00) {\n    newValue = data[4];\n  }\n  if (memoryAddress == (uint *)0x40012c00) {\n    memoryAddress[0xc] = newValue;\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryAddress",
                "param_2": "data",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "update_flags_and_memory_080023d0",
            "code": "\nundefined4 update_flags_and_memory_080023d0(undefined4 *input_data)\n\n{\n  if (input_data != (undefined4 *)0x0) {\n    if (*(char *)((int)input_data + 0x39) == '\\0') {\n      *(undefined *)(input_data + 0xe) = 0;\n      update_flags();\n    }\n    *(undefined *)((int)input_data + 0x39) = 2;\n    update_memory(*input_data,input_data + 1);\n    *(undefined *)((int)input_data + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "update_flags_and_memory_080023d0",
                "param_1": "input_data",
                "update_flags_based_on_value_08004d8c": "update_flags",
                "update_memory_08002368": "update_memory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_flags_and_values_08002404",
            "code": "\nvoid updateFlagsAndValues_08002404(int address,int *values)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int inputValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(address + 4);\n  inputValue = *values;\n  updatedValue1 = *(uint *)(address + 0x20) & 0xffffffdf | valueToAddInFlags << 4;\n  if (address == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | valueToShiftLeftInFlags << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (valueToORInValue1 | valueToORInValue1) << 2;\n  }\n  *(uint *)(address + 4) = updatedValue2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(address + 0x38) = newValue;\n  *(uint *)(address + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_flags_and_values_08002404",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "inputValue",
                "param_2[2]": "valueToAddInFlags",
                "param_2[3]": "valueToShiftLeftInFlags",
                "param_2[5]": "valueToORInValue1",
                "param_2[6]": "valueToORInValue1",
                "param_2[1]": "newValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_function_0800245c",
            "code": "\nvoid update_function_0800245c(int *pointer,undefined4 value1,undefined4 value2)\n\n{\n  int extra1;\n  int extra2;\n  int extra3;\n  int extra4;\n  int iVar1;\n  uint uVar1;\n  int iVar2;\n  \n  if (*(char *)(pointer + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)pointer + 0x39) = 2;\n  *(undefined *)(pointer + 0xe) = 1;\n  switch(value2) {\n  case 0:\n    update_settings_08002280(*pointer);\n    iVar2 = *pointer;\n    uVar1 = *(uint *)(extra1 + 0x10);\n    *(uint *)(iVar2 + 0x18) = *(uint *)(iVar2 + 0x18) | 8;\n    *(uint *)(iVar2 + 0x18) = *(uint *)(iVar2 + 0x18) & 0xfffffffb;\n    uVar1 = *(uint *)(iVar2 + 0x18) | uVar1;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_flags_and_values_08002404(*pointer);\n    iVar2 = *pointer;\n    iVar1 = *(int *)(extra2 + 0x10);\n    *(uint *)(iVar2 + 0x18) = *(uint *)(iVar2 + 0x18) | 0x800;\n    *(uint *)(iVar2 + 0x18) = *(uint *)(iVar2 + 0x18) & 0xfffffbff;\n    uVar1 = *(uint *)(iVar2 + 0x18) | iVar1 << 8;\n    break;\n  case 8:\n    update_data_080022d0(*pointer);\n    iVar2 = *pointer;\n    uVar1 = *(uint *)(extra3 + 0x10);\n    *(uint *)(iVar2 + 0x1c) = *(uint *)(iVar2 + 0x1c) | 8;\n    *(uint *)(iVar2 + 0x1c) = *(uint *)(iVar2 + 0x1c) & 0xfffffffb;\n    uVar1 = *(uint *)(iVar2 + 0x1c) | uVar1;\n    goto LAB_080024fa;\n  case 0xc:\n    update_flags_08002324(*pointer);\n    iVar2 = *pointer;\n    iVar1 = *(int *)(extra4 + 0x10);\n    *(uint *)(iVar2 + 0x1c) = *(uint *)(iVar2 + 0x1c) | 0x800;\n    *(uint *)(iVar2 + 0x1c) = *(uint *)(iVar2 + 0x1c) & 0xfffffbff;\n    uVar1 = *(uint *)(iVar2 + 0x1c) | iVar1 << 8;\nLAB_080024fa:\n    *(uint *)(iVar2 + 0x1c) = uVar1;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(iVar2 + 0x18) = uVar1;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)pointer + 0x39) = 1;\n  *(undefined *)(pointer + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_function_0800245c",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "value2",
                "extraout_r1": "extra1",
                "extraout_r1_00": "extra2",
                "extraout_r1_01": "extra3",
                "extraout_r1_02": "extra4",
                "uVar2": "uVar1",
                "iVar3": "iVar2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_value_08002520",
            "code": "\nvoid updateBitValue_08002520(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = newValue << (bitPosition & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_value_08002520",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_bit_and_set_flag_08002538",
            "code": "\nundefined4 update_bit_and_set_flag_08002538(uint **bit_array_pointer,undefined4 bit_value)\n\n{\n  uint new_value;\n  uint *current_value_pointer;\n  \n  update_bit_value_08002520(*bit_array_pointer,bit_value,1);\n  current_value_pointer = *bit_array_pointer;\n  new_value = 0x40012c00;\n  if (current_value_pointer == (uint *)0x40012c00) {\n    new_value = uRam40012c44 | 0x8000;\n  }\n  if (current_value_pointer == (uint *)0x40012c00) {\n    current_value_pointer[0x11] = new_value;\n  }\n  *current_value_pointer = *current_value_pointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_bit_and_set_flag_08002538",
                "param_1": "bit_array_pointer",
                "param_2": "bit_value",
                "uVar1": "new_value",
                "puVar2": "current_value_pointer"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_flags_08002564",
            "code": "\nundefined4 checkAndUpdateFlags_08002564(int *pointer,uint *uintArray)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(pointer + 0xe) != '\\x01') {\n    *(undefined *)((int)pointer + 0x39) = 2;\n    *(uint *)(*pointer + 0x44) =\n         *uintArray | uintArray[1] | uintArray[2] | uintArray[3] | uintArray[4] | uintArray[5] | uintArray[6];\n    *(undefined *)((int)pointer + 0x39) = 1;\n    result = 0;\n    *(undefined *)(pointer + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_flags_08002564",
                "param_1": "pointer",
                "param_2": "uintArray",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_configuration_080025a4",
            "code": "\nundefined4 updateConfiguration_080025a4(int *config,uint *values)\n\n{\n  uint mask2;\n  undefined4 returnValue;\n  int configAddress;\n  uint mask1;\n  \n  returnValue = 2;\n  if (*(char *)(config + 0xe) != '\\x01') {\n    *(undefined *)((int)config + 0x39) = 2;\n    configAddress = *config;\n    mask1 = *values;\n    mask2 = values[1];\n    *(uint *)(configAddress + 4) = *(uint *)(configAddress + 4) & 0xffffff8f;\n    *(uint *)(configAddress + 4) = *(uint *)(configAddress + 4) | mask1;\n    *(uint *)(configAddress + 8) = *(uint *)(configAddress + 8) & 0xffffff7f;\n    *(uint *)(configAddress + 8) = *(uint *)(configAddress + 8) | mask2;\n    *(undefined *)((int)config + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(config + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_configuration_080025a4",
                "param_1": "config",
                "param_2": "values",
                "uVar2": "returnValue",
                "iVar3": "configAddress",
                "uVar4": "mask1",
                "uVar1": "mask2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_config_data_080025e8",
            "code": "\nvoid updateConfigData_080025e8(int *configData)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint shiftedValue3;\n  int calculatedValue1;\n  int param1Value;\n  int configDataAddress;\n  \n  configDataAddress = *configData;\n  shiftedValue3 = configData[4];\n  *(uint *)(configDataAddress + 0x10) = *(uint *)(configDataAddress + 0x10) & 0xffffcfff | configData[3];\n  *(uint *)(configDataAddress + 0xc) = configData[2] | shiftedValue3 | configData[5] | *(uint *)(configDataAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(configDataAddress + 0x14) = *(uint *)(configDataAddress + 0x14) & 0xfffffcff | configData[6];\n  if (configDataAddress == 0x40013800) {\n    shiftedValue1 = get_shifted_data_08002250();\n    calculatedValue1 = (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(configData[1] << 2)) / 100);\n    shiftedValue1 = get_shifted_data_08002250();\n    param1Value = configData[1];\n    shiftedValue2 = get_shifted_data_08002250();\n    shiftedValue2 = (uint)(shiftedValue1 * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(configData[1] << 2)) / 100) *\n            -100;\n    shiftedValue1 = get_shifted_data_08002250();\n    shiftedValue3 = (uint)(shiftedValue1 * 0x19) / (uint)(configData[1] << 2);\n    shiftedValue1 = get_shifted_data_08002250();\n  }\n  else {\n    shiftedValue1 = get_shifted_value_08002220();\n    calculatedValue1 = (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(configData[1] << 2)) / 100);\n    shiftedValue1 = get_shifted_value_08002220();\n    param1Value = configData[1];\n    shiftedValue2 = get_shifted_value_08002220();\n    shiftedValue2 = (uint)(shiftedValue1 * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(configData[1] << 2)) / 100) *\n            -100;\n    shiftedValue1 = get_shifted_value_08002220();\n    shiftedValue3 = (uint)(shiftedValue1 * 0x19) / (uint)(configData[1] << 2);\n    shiftedValue1 = get_shifted_value_08002220();\n  }\n  *(uint *)(configDataAddress + 8) =\n       (((shiftedValue3 + (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(configData[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (shiftedValue2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculatedValue1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_config_data_080025e8",
                "param_1": "configData",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "shiftedValue3",
                "iVar4": "calculatedValue1",
                "iVar5": "param1Value",
                "iVar6": "configDataAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_config_08002724",
            "code": "\nundefined4 initializeConfig_08002724(int *configPtr)\n\n{\n  int configValue;\n  \n  if (configPtr != (int *)0x0) {\n    if (*(char *)((int)configPtr + 0x39) == '\\0') {\n      *(undefined *)(configPtr + 0xe) = 0;\n      initializeMemory();\n    }\n    *(undefined *)((int)configPtr + 0x39) = 2;\n    *(uint *)(*configPtr + 0xc) = *(uint *)(*configPtr + 0xc) & 0xffffdfff;\n    updateConfigData(configPtr);\n    configValue = *configPtr;\n    *(uint *)(configValue + 0x10) = *(uint *)(configValue + 0x10) & 0xffffb7ff;\n    *(uint *)(configValue + 0x14) = *(uint *)(configValue + 0x14) & 0xffffffd5;\n    *(uint *)(configValue + 0xc) = *(uint *)(configValue + 0xc) | 0x2000;\n    configPtr[0xf] = 0;\n    *(undefined *)((int)configPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_config_08002724",
                "param_1": "configPtr",
                "iVar1": "configValue",
                "initialize_memory_08004e7c": "initializeMemory",
                "update_config_data_080025e8": "updateConfigData"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_param_0800290c",
            "code": "\nundefined4 process_param_0800290c(int *param_ptr)\n\n{\n  byte flag;\n  int var1;\n  uint var2;\n  undefined4 var3;\n  short var4;\n  ushort *ptr1;\n  ushort *ptr2;\n  bool check_flag;\n  \n  if ((*(byte *)((int)param_ptr + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  var1 = *param_ptr;\n  ptr1 = (ushort *)param_ptr[10];\n  if (param_ptr[2] == 0x1000) {\n    if (param_ptr[4] == 0) {\n      ptr2 = ptr1 + 1;\n      *ptr1 = (ushort)((uint)(*(int *)(var1 + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptr2 = (ushort *)((int)ptr1 + 1);\n      *ptr1 = (ushort)*(int *)(var1 + 4) & 0xff;\n    }\n    param_ptr[10] = (int)ptr2;\n  }\n  else {\n    if (param_ptr[4] == 0) {\n      flag = (byte)*(undefined4 *)(var1 + 4);\n      param_ptr[10] = (int)ptr1 + 1;\n    }\n    else {\n      var3 = *(undefined4 *)(var1 + 4);\n      param_ptr[10] = (int)ptr1 + 1;\n      flag = (byte)var3 & 0x7f;\n    }\n    *(byte *)ptr1 = flag;\n  }\n  var4 = *(short *)((int)param_ptr + 0x2e) + -1;\n  *(short *)((int)param_ptr + 0x2e) = var4;\n  if (var4 == 0) {\n    var1 = *param_ptr;\n    *(uint *)(var1 + 0xc) = *(uint *)(var1 + 0xc) & 0xffffffdf;\n    check_flag = *(char *)((int)param_ptr + 0x39) != '2';\n    if (check_flag) {\n      var2 = *(uint *)(var1 + 0xc) & 0xfffffeff;\n    }\n    else {\n      var1 = 0x12;\n      var2 = 0x32;\n    }\n    if (check_flag) {\n      *(uint *)(var1 + 0xc) = var2;\n      var2 = *(uint *)(var1 + 0x14) & 0xfffffffe;\n    }\n    if (check_flag) {\n      *(uint *)(var1 + 0x14) = var2;\n      var1 = 1;\n    }\n    *(char *)((int)param_ptr + 0x39) = (char)var1;\n    process_binary_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_param_0800290c",
                "param_1": "param_ptr",
                "bVar1": "flag",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "sVar5": "var4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "bVar8": "check_flag"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_parameter_0800299a",
            "code": "\nvoid process_parameter_0800299a(uint **parameters)\n\n{\n  uint variable1;\n  short variable2;\n  uint variable3;\n  uint *variable4;\n  undefined variable5;\n  uint *variable6;\n  uint variable7;\n  bool variable8;\n  \n  variable6 = *parameters;\n  variable3 = *variable6;\n  variable1 = variable6[3];\n  if ((variable3 & 0xf) == 0) {\n    if (((int)(variable3 << 0x1a) < 0) && ((int)(variable1 << 0x1a) < 0)) {\n      process_param_0800290c();\n      return;\n    }\n  }\n  else {\n    variable7 = variable6[5] & 1;\n    if ((variable7 != 0) || ((variable1 & 0x120) != 0)) {\n      variable6 = (uint *)(variable3 << 0x1f);\n      if ((int)variable6 < 0) {\n        variable8 = (int)(variable1 << 0x17) < 0;\n        if (variable8) {\n          variable6 = (uint *)((uint)parameters[0xf] | 1);\n        }\n        if (variable8) {\n          parameters[0xf] = variable6;\n        }\n      }\n      if (((int)(variable3 << 0x1d) < 0) && (variable7 != 0)) {\n        parameters[0xf] = (uint *)((uint)parameters[0xf] | 2);\n      }\n      if (((int)(variable3 << 0x1e) < 0) && (variable7 != 0)) {\n        parameters[0xf] = (uint *)((uint)parameters[0xf] | 4);\n      }\n      if (((int)(variable3 << 0x1c) < 0) && (variable7 != 0)) {\n        parameters[0xf] = (uint *)((uint)parameters[0xf] | 8);\n      }\n      if (parameters[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(variable3 << 0x1a) < 0) && ((int)(variable1 << 0x1a) < 0)) {\n        process_param_0800290c(parameters);\n      }\n      variable6 = *parameters;\n      if ((-1 < (int)parameters[0xf] << 0x1c) && ((variable6[5] & 0x40) == 0)) {\n        FUNC_08002998(parameters);\n        parameters[0xf] = (uint *)0x0;\n        return;\n      }\n      variable6[3] = variable6[3] & 0xfffffedf;\n      variable6[5] = variable6[5] & 0xfffffffe;\n      *(undefined *)((int)parameters + 0x39) = 1;\n      FUNC_08002998(parameters);\n      return;\n    }\n  }\n  if (((int)(variable3 << 0x18) < 0) && ((int)(variable1 << 0x18) < 0)) {\n    if ((*(byte *)((int)parameters + 0x39) & 0xdf) == 0x12) {\n      variable4 = parameters[8];\n      if (parameters[2] == (uint *)0x1000) {\n        variable6[1] = *(ushort *)variable4 & 0x1ff;\n        if (parameters[4] == (uint *)0x0) {\n          variable4 = (uint *)((int)variable4 + 2);\n        }\n        else {\n          variable4 = (uint *)((int)variable4 + 1);\n        }\n        parameters[8] = variable4;\n      }\n      else {\n        parameters[8] = (uint *)((int)variable4 + 1);\n        variable6[1] = (uint)*(byte *)variable4;\n      }\n      variable2 = *(short *)((int)parameters + 0x26) + -1;\n      *(short *)((int)parameters + 0x26) = variable2;\n      if (variable2 == 0) {\n        variable6[3] = variable6[3] & 0xffffff7f;\n        variable6[3] = variable6[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(variable3 << 0x19) < 0) && ((int)(variable1 << 0x19) < 0)) {\n    variable6[3] = variable6[3] & 0xffffffbf;\n    if (*(char *)((int)parameters + 0x39) == '2') {\n      variable5 = 0x22;\n    }\n    else {\n      variable5 = 1;\n    }\n    *(undefined *)((int)parameters + 0x39) = variable5;\n    FUNC_0800290a(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_parameter_0800299a",
                "param_1": "parameters",
                "uVar1": "variable1",
                "sVar2": "variable2",
                "uVar3": "variable3",
                "puVar4": "variable4",
                "uVar5": "variable5",
                "puVar6": "variable6",
                "uVar7": "variable7",
                "bVar8": "variable8"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_sensors_08002ad0",
            "code": "\nvoid initializeSensors_08002ad0(void)\n\n{\n  processDataAndHandleErrors(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  processAndCheckData(0xd0,0x6b,0x80,1);\n  processAndCheckData(0xd0,0x6b,1);\n  processAndCheckData(0xd0,0x6c,0,1);\n  processAndCheckData(0xd0,0x19,0,1);\n  processAndCheckData(0xd0,0x1d,3,1);\n  processAndCheckData(0xd0,0x1a,3,1);\n  processAndCheckData(0xd0,0x1b,0x10,1);\n  processAndCheckData(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_sensors_08002ad0",
                "process_data_and_handle_errors_0800407c": "processDataAndHandleErrors",
                "process_and_check_data_0800403c": "processAndCheckData"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 checksum;\n  uint inputParam;\n  int result1;\n  int result2;\n  undefined4 value1;\n  undefined4 value2;\n  \n  value1 = 0;\n  value2 = inputParam & 0xffff0000;\n  copy_data_with_errors_handled_080040e8(0xd0,0x3b,&value1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(value1._2_1_,value1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)value1,value1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)value2,value2._1_1_);\n  result2 = (int)DAT_200002f6;\n  result1 = (int)DAT_200002f8;\n  checksum = calculate_checksum_08000c44();\n  checksum = calculate_float_value_08000cec(checksum,0x40800000);\n  DAT_200002d0 = calculate_float_value_08000cec(checksum,0x38000000);\n  checksum = calculate_checksum_08000c44(result2);\n  checksum = calculate_float_value_08000cec(checksum,0x40800000);\n  DAT_200002d4 = calculate_float_value_08000cec(checksum,0x38000000);\n  checksum = calculate_checksum_08000c44(result1);\n  checksum = calculate_float_value_08000cec(checksum,0x40800000);\n  DAT_200002d8 = calculate_float_value_08000cec(checksum,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputParam",
                "iVar2": "result1",
                "iVar3": "result2",
                "local_18": "value1",
                "local_14": "value2",
                "uVar1": "checksum"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 accelAxisBits;\n  undefined2 gyroAxisBits;\n  \n  accelAxisBits = 0;\n  gyroAxisBits = 0;\n  copy_data_with_errors_handled_080040e8(0xd0,0x43,&accelAxisBits,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(accelAxisBits._2_1_,accelAxisBits._3_1_);\n  DAT_200002be = CONCAT11((undefined)accelAxisBits,accelAxisBits._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)gyroAxisBits,gyroAxisBits._1_1_);\n  iVar3 = (int)DAT_200002c0;\n  iVar2 = (int)DAT_200002c2;\n  uVar1 = calculate_checksum_08000c44();\n  uVar1 = calculate_float_value_08000cec(uVar1,0x447a0000);\n  uVar1 = calculate_float_value_08000cec(uVar1,0x38000000);\n  DAT_200002c4 = calculate_float_08000ad8(uVar1,DAT_20000000);\n  uVar1 = calculate_checksum_08000c44(iVar3);\n  uVar1 = calculate_float_value_08000cec(uVar1,0x447a0000);\n  uVar1 = calculate_float_value_08000cec(uVar1,0x38000000);\n  DAT_200002c8 = calculate_float_08000ad8(uVar1,DAT_20000004);\n  uVar1 = calculate_checksum_08000c44(iVar2);\n  uVar1 = calculate_float_value_08000cec(uVar1,0x447a0000);\n  uVar1 = calculate_float_value_08000cec(uVar1,0x38000000);\n  DAT_200002cc = calculate_float_08000ad8(uVar1,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "accelAxisBits",
                "local_1c": "gyroAxisBits"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 calculatedChecksum;\n  uint dataValue;\n  \n  dataValue = param4;\n  processAndCheckData(0xd0,0x37,0x22,1,param1,param2,param3);\n  processAndCheckData(0xd0,0x6a,1);\n  processDataAndHandleErrors(0x18,0,\"../Src/MPU9250.c\",0xad);\n  processAndCheckData(0x18,0xb,1);\n  processAndCheckData(0x18,10,0,1);\n  processAndCheckData(0x18,10,0xf,1);\n  copyDataWithErrorsHandled(0x18,0x10,&dataValue,3,\"../Src/MPU9250.c\",0xb6);\n  calculatedChecksum = calculateChecksum((dataValue & 0xff) - 0x80);\n  calculatedChecksum = calculateFloatValue(calculatedChecksum,0x3b800000);\n  DAT_200002e8 = calculateFloat(calculatedChecksum,0x3f800000);\n  calculatedChecksum = calculateChecksum((dataValue >> 8 & 0xff) - 0x80);\n  calculatedChecksum = calculateFloatValue(calculatedChecksum,0x3b800000);\n  DAT_200002ec = calculateFloat(calculatedChecksum,0x3f800000);\n  calculatedChecksum = calculateChecksum((dataValue >> 0x10 & 0xff) - 0x80);\n  calculatedChecksum = calculateFloatValue(calculatedChecksum,0x3b800000);\n  DAT_200002f0 = calculateFloat(calculatedChecksum,0x3f800000);\n  processAndCheckData(0x18,10,0,1);\n  processAndCheckData(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "calculatedChecksum",
                "local_c": "dataValue",
                "process_and_check_data_0800403c": "processAndCheckData",
                "process_data_and_handle_errors_0800407c": "processDataAndHandleErrors",
                "copy_data_with_errors_handled_080040e8": "copyDataWithErrorsHandled",
                "calculate_checksum_08000c44": "calculateChecksum",
                "calculate_float_value_08000cec": "calculateFloatValue",
                "calculate_float_08000adc": "calculateFloat"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_sensor_data_08002d88",
            "code": "\nvoid processSensorData_08002d88(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4)\n\n{\n  int result;\n  undefined4 checksum1;\n  undefined4 checksum2;\n  int value;\n  undefined2 value1;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  byte byte5;\n  undefined byte6;\n  \n  byte6 = (undefined)((uint)data4 >> 0x18);\n  value1 = 0;\n  byte1 = 0;\n  byte2 = 0;\n  byte3 = 0;\n  byte4 = 0;\n  byte5 = 0;\n  result = process_data_and_handle_errors_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,data1,data2);\n  if (result << 0x1f < 0) {\n    copy_data_with_errors_handled_080040e8(0x18,3,&value1,7,\"../Src/MPU9250.c\",0xda);\n    checksum2 = DAT_2000001c;\n    if ((int)((uint)byte5 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(byte2,byte1);\n      DAT_200002bc = CONCAT11(byte4,byte3);\n      value = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = value1;\n      checksum1 = calculate_checksum_08000c44();\n      checksum1 = calculate_float_value_08000cec(checksum1,checksum2);\n      checksum1 = calculate_float_value_08000cec(checksum1,DAT_200002e8);\n      checksum1 = calculate_float_08000ad8(checksum1,DAT_20000020);\n      DAT_200002dc = calculate_float_value_08000cec(checksum1,DAT_2000002c);\n      checksum1 = calculate_checksum_08000c44(value);\n      checksum1 = calculate_float_value_08000cec(checksum1,checksum2);\n      checksum1 = calculate_float_value_08000cec(checksum1,DAT_200002ec);\n      checksum1 = calculate_float_08000ad8(checksum1,DAT_20000024);\n      DAT_200002e0 = calculate_float_value_08000cec(checksum1,DAT_20000030);\n      checksum1 = calculate_checksum_08000c44(result);\n      checksum2 = calculate_float_value_08000cec(checksum1,checksum2);\n      checksum2 = calculate_float_value_08000cec(checksum2,DAT_200002f0);\n      checksum2 = calculate_float_08000ad8(checksum2,DAT_20000028);\n      DAT_200002e4 = calculate_float_value_08000cec(checksum2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_sensor_data_08002d88",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "result",
                "uVar2": "checksum1",
                "uVar3": "checksum2",
                "iVar4": "value",
                "local_28": "value1",
                "uStack_26": "byte1",
                "uStack_25": "byte2",
                "local_24": "byte3",
                "local_23": "byte4",
                "local_22": "byte5",
                "uStack_21": "byte6"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_08002ea0",
            "code": "\nvoid initialize_08002ea0(undefined4 unused1,undefined4 unused2,undefined4 unused3,undefined4 unused4)\n\n{\n  undefined4 unused5;\n  \n  initialize_08002ea0_sensors_08002ad0();\n  initialize_08002ea0_mpu9250_08002cb0();\n  store_parameter_08003314(0x3f19999a);\n  initialize_08002ea0_data_08003320(0,unused5,unused3,unused4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_08002ea0",
                "param_1": "unused1",
                "param_2": "unused2",
                "param_3": "unused3",
                "param_4": "unused4",
                "extraout_r1": "unused5"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_result_08002ec0",
            "code": "\nvoid calculateResult_08002ec0(void)\n\n{\n  undefined4 float1;\n  undefined4 float2;\n  undefined4 float3;\n  \n  float2 = DAT_2000024c;\n  float3 = DAT_20000010;\n  float1 = calculateFloat1(0x3f800000,DAT_20000010);\n  float2 = calculateFloatValue(float1,float2);\n  float3 = calculateFloatValue(float3,DAT_2000000c);\n  DAT_2000000c = calculateResult_08002ec0Float(float3,float2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_result_08002ec0",
                "uVar1": "float1",
                "uVar2": "float2",
                "uVar3": "float3",
                "calculate_float_08000ad8": "calculateFloat1",
                "calculate_float_value_08000cec": "calculateFloatValue",
                "calculate_float_08000adc": "calculateResultFloat"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_result_08002ed4",
            "code": "\nvoid calculateResult_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_20000248;\n  constant2 = uRam20000018;\n  result1 = FUN_08000ad8(0x3f800000,uRam20000018);\n  constant1 = FUN_08000cec(result1,constant1);\n  constant2 = FUN_08000cec(constant2,uRam20000014);\n  uRam20000014 = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_result_08002ed4",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "calculate_float_or_default_08002ee8",
            "code": "\nvoid calculate_float_or_default_08002ee8(void)\n\n{\n  undefined4 data_value;\n  int concatenation_result;\n  \n  data_value = DAT_20000250;\n  concatenation_result = check_result(DAT_20000250,0xc3340000);\n  if ((concatenation_result != 0) && (concatenation_result = check_empty_result(data_value,0x42b40000), concatenation_result != 0)) {\n    calculate_float_with_default(data_value,0x42b40000);\n    return;\n  }\n  calculate_float_with_alternate_default(data_value,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "calculate_float_or_default_08002ee8",
                "uVar1": "data_value",
                "iVar2": "concatenation_result",
                "check_concatenation_result_08001050": "check_result",
                "check_if_concatenation_empty_08001028": "check_empty_result",
                "calculate_float_08000adc": "calculate_float_with_default",
                "calculate_float_08000ad8": "calculate_float_with_alternate_default"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_and_process_sensor_data_08002f28",
            "code": "\n\n\nvoid initialize_and_process_sensor_data_08002f28(void)\n\n{\n  undefined4 normalized_value;\n  \n  initialize_mpu9250();\n  setup_mpu9250();\n  process_sensor_data();\n  DAT_20000258 = get_data_value();\n  normalized_value = convert_to_normalized(DAT_20000258 - DAT_20000254);\n  calculate_float(normalized_value,0x447a0000);\n  initialize_data();\n  DAT_20000254 = DAT_20000258;\n  calculate_and_process(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  normalized_value = calculate_result();\n  calculate_float_value(normalized_value,0x41200000);\n  DAT_20001395._0_2_ = extract_value();\n  normalized_value = calculate_result();\n  calculate_float_value(normalized_value,0x41200000);\n  DAT_20001395._2_2_ = extract_value();\n  calculate_float_or_default();\n  DAT_20001399 = extract_value();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_and_process_sensor_data_08002f28",
                "uVar1": "normalized_value",
                "initialize_mpu9250_08002b48": "initialize_mpu9250",
                "initialize_mpu9250_08002bf0": "setup_mpu9250",
                "process_sensor_data_08002d88": "process_sensor_data",
                "thunk_get_data_value_0800115c": "get_data_value",
                "convert_to_normalized_08000c3c": "convert_to_normalized",
                "calculate_float_08000e54": "calculate_float",
                "initialize_data_08003320": "initialize_data",
                "calculate_and_process_08003330": "calculate_and_process",
                "calculate_result_08002ed4": "calculate_result",
                "calculate_float_value_08000cec": "calculate_float_value",
                "extract_value_08001078": "extract_value",
                "calculate_result_08002ec0": "calculate_result",
                "calculate_float_or_default_08002ee8": "calculate_float_or_default"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "process_and_concatenate_data_08003034",
            "code": "\nuint process_and_concatenate_data_08003034(undefined4 input_param,undefined4 counter_param,undefined4 file_path_param,undefined4 concatenated_param)\n\n{\n  undefined4 concatenated_value;\n  \n  concatenated_value = concatenated_param;\n  process_data_and_continue_080040b8(0xee,0,&concatenated_value,3,\"../Src/MS5611.c\",0x8c,file_path_param);\n  return (uint)CONCAT12((undefined)concatenated_value,CONCAT11(concatenated_value._1_1_,concatenated_value._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "process_and_concatenate_data_08003034",
                "param_1": "input_param",
                "param_2": "counter_param",
                "param_3": "file_path_param",
                "param_4": "concatenated_param",
                "local_c": "concatenated_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_data_08003298",
            "code": "\nvoid initializeData_08003298(void)\n\n{\n  int counter;\n  undefined temp1;\n  undefined temp2;\n  \n  counter = 0;\n  process_and_check_data_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    temp1 = 0;\n    temp2 = 0;\n    copy_data_with_errors_handled_080040e8(0xee,counter + 0xa0U & 0xffff,&temp1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + counter) = CONCAT11(temp1,temp2);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    (&DAT_20000300)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_data_08003298",
                "iVar1": "counter",
                "local_1c": "temp1",
                "local_1b": "temp2"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "store_parameter_08003314",
            "code": "\nvoid storeParameter_08003314(undefined4 parameterValue)\n\n{\n  DAT_2000035c = parameterValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "store_parameter_08003314",
                "param_1": "parameterValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 data)\n\n{\n  DAT_20000360 = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "data"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_and_process_08003330",
            "code": "\nvoid calculate_and_process_08003330(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined4 input_9,undefined4 *result_array)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int check_result;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  int result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined4 result_14;\n  undefined4 result_15;\n  undefined4 result_16;\n  undefined4 result_17;\n  int result_18;\n  undefined4 result_19;\n  undefined4 result_20;\n  undefined4 result_21;\n  undefined4 result_22;\n  undefined4 result_23;\n  undefined4 result_25;\n  int result_24;\n  undefined4 result_25;\n  undefined4 result_26;\n  undefined4 result_27;\n  int result_28;\n  undefined8 result_29;\n  undefined8 result_30;\n  \n  result_27 = DAT_20000048;\n  result_26 = DAT_20000044;\n  result_28 = DAT_20000040;\n  result_25 = DAT_2000003c;\n  result_1 = calculate_float_value_08000cec(input_1,input_1);\n  result_2 = calculate_float_value_08000cec(input_2);\n  result_1 = calculate_float_08000adc(result_1,result_2);\n  result_2 = calculate_float_value_08000cec(input_3);\n  calculate_float_08000adc(result_1,result_2);\n  reverse_and_mask_bits_08000428();\n  process_data_08005bc8();\n  result_1 = calculate_floating_point_08000a30();\n  check_result = check_concatenation_result_08001014(result_1,0);\n  if (check_result == 0) {\n    result_2 = calculate_float_value_08000cec(input_7);\n    result_3 = calculate_float_value_08000cec(input_8);\n    result_2 = calculate_float_08000adc(result_2,result_3);\n    result_3 = calculate_float_value_08000cec(input_9);\n    calculate_float_08000adc(result_2,result_3);\n    reverse_and_mask_bits_08000428();\n    process_data_08005bc8();\n    result_2 = calculate_floating_point_08000a30();\n    check_result = check_concatenation_result_08001014(result_2,0);\n    if (check_result == 0) {\n      result_29 = reverse_and_mask_bits_08000428(input_4);\n      calculate_shifted_value_080004d0((int)result_29,(int)((ulonglong)result_29 >> 0x20),0xa2529d39,0x3f91df46);\n      result_3 = calculate_floating_point_08000a30();\n      result_29 = reverse_and_mask_bits_08000428(input_5);\n      calculate_shifted_value_080004d0((int)result_29,(int)((ulonglong)result_29 >> 0x20),0xa2529d39,0x3f91df46);\n      result_4 = calculate_floating_point_08000a30();\n      result_29 = reverse_and_mask_bits_08000428(input_6);\n      calculate_shifted_value_080004d0((int)result_29,(int)((ulonglong)result_29 >> 0x20),0xa2529d39,0x3f91df46);\n      result_5 = calculate_floating_point_08000a30();\n      check_result = calculate_float_08000adc(result_25);\n      result_6 = calculate_float_08000adc(result_28);\n      result_7 = calculate_float_08000adc(result_26,result_26);\n      result_8 = calculate_float_08000adc(result_27,result_27);\n      result_9 = calculate_float_value_08000cec(result_25);\n      result_10 = calculate_float_value_08000cec(result_25,result_28);\n      result_11 = calculate_float_value_08000cec(result_25,result_26);\n      result_12 = calculate_float_value_08000cec(result_28);\n      result_13 = calculate_float_value_08000cec(result_28,result_27);\n      result_14 = calculate_float_value_08000cec(result_26,result_26);\n      result_15 = calculate_float_value_08000cec(result_27,result_27);\n      result_1 = calculate_float_08000e54(0x3f800000,result_1);\n      result_2 = calculate_float_08000e54(0x3f800000,result_2);\n      result_16 = calculate_float_value_08000cec(input_7,result_2);\n      result_17 = calculate_float_value_08000cec(input_8,result_2);\n      result_2 = calculate_float_value_08000cec(input_9,result_2);\n      result_18 = calculate_float_value_08000cec(check_result,result_16);\n      result_19 = calculate_float_value_08000cec(check_result,result_17);\n      result_20 = calculate_float_value_08000cec(check_result,result_2);\n      result_21 = calculate_float_value_08000cec(result_6,result_16);\n      result_22 = calculate_float_value_08000cec(result_9,result_16);\n      result_23 = calculate_float_value_08000cec(result_27,result_19);\n      result_22 = calculate_float_08000ad8(result_22,result_23);\n      result_23 = calculate_float_value_08000cec(result_26,result_20);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_float_value_08000cec(result_12,result_16);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_float_value_08000cec(result_6,result_17);\n      result_23 = calculate_float_value_08000cec(result_23,result_26);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_float_value_08000cec(result_6,result_2);\n      result_23 = calculate_float_value_08000cec(result_23,result_27);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_float_value_08000cec(result_14,result_16);\n      result_22 = calculate_float_08000ad8(result_22,result_23);\n      result_23 = calculate_float_value_08000cec(result_15,result_16);\n      result_22 = calculate_float_08000ad8(result_22,result_23);\n      result_23 = calculate_float_value_08000cec(result_27,result_18);\n      result_25 = calculate_float_value_08000cec(result_9,result_17);\n      result_23 = calculate_float_08000adc(result_23,result_25);\n      result_20 = calculate_float_value_08000cec(result_28,result_20);\n      result_20 = calculate_float_08000ad8(result_23,result_20);\n      result_23 = calculate_float_value_08000cec(result_26,result_21);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_float_value_08000cec(result_12,result_17);\n      result_20 = calculate_float_08000ad8(result_20,result_23);\n      result_23 = calculate_float_value_08000cec(result_14,result_17);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_float_value_08000cec(result_7,result_2);\n      result_23 = calculate_float_value_08000cec(result_23,result_27);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_float_value_08000cec(result_15,result_17);\n      result_20 = calculate_float_08000ad8(result_20,result_23);\n      result_22 = calculate_float_value_08000cec(result_22,result_22);\n      result_20 = calculate_float_value_08000cec(result_20,result_20);\n      calculate_float_08000adc(result_22,result_20);\n      reverse_and_mask_bits_08000428();\n      process_data_08005bc8();\n      result_24 = calculate_floating_point_08000a30();\n      result_20 = calculate_float_value_08000cec(result_18 + -0x80000000,result_26);\n      result_19 = calculate_float_value_08000cec(result_28,result_19);\n      result_19 = calculate_float_08000adc(result_20,result_19);\n      result_9 = calculate_float_value_08000cec(result_9,result_2);\n      result_9 = calculate_float_08000adc(result_19,result_9);\n      result_19 = calculate_float_value_08000cec(result_27,result_21);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_float_value_08000cec(result_12,result_2);\n      result_9 = calculate_float_08000ad8(result_9,result_19);\n      result_19 = calculate_float_value_08000cec(result_7,result_17);\n      result_19 = calculate_float_value_08000cec(result_19,result_27);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_float_value_08000cec(result_14,result_2);\n      result_9 = calculate_float_08000ad8(result_9,result_19);\n      result_19 = calculate_float_value_08000cec(result_15,result_2);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_float_08000adc(result_9,result_9);\n      result_20 = calculate_float_08000adc(result_13);\n      result_21 = calculate_float_value_08000cec(result_26,check_result);\n      result_20 = calculate_float_08000ad8(result_20,result_21);\n      result_21 = calculate_float_value_08000cec(input_1,result_1);\n      result_20 = calculate_float_08000ad8(result_20,result_21);\n      result_21 = calculate_float_value_08000cec(result_27,result_7);\n      result_22 = calculate_float_08000adc(result_10);\n      result_21 = calculate_float_08000adc(result_21,result_22);\n      result_22 = calculate_float_value_08000cec(input_2,result_1);\n      result_21 = calculate_float_08000ad8(result_21,result_22);\n      result_22 = calculate_float_value_08000cec(result_26,result_9);\n      result_23 = calculate_float_08000ad8(0x3f000000,result_14);\n      result_15 = calculate_float_08000ad8(result_23,result_15);\n      result_15 = calculate_float_value_08000cec(result_15,result_24);\n      result_23 = calculate_float_08000ad8(result_13,result_11);\n      result_23 = calculate_float_value_08000cec(result_23,result_9);\n      result_15 = calculate_float_08000adc(result_15,result_23);\n      result_15 = calculate_float_08000ad8(result_15,result_16);\n      result_16 = calculate_float_value_08000cec(result_28,result_9);\n      result_23 = calculate_float_value_08000cec(result_28,result_26);\n      result_25 = calculate_float_value_08000cec(result_25,result_27);\n      result_23 = calculate_float_08000ad8(result_23,result_25);\n      result_23 = calculate_float_value_08000cec(result_23,result_24);\n      result_25 = calculate_float_value_08000cec(result_26,result_27);\n      result_10 = calculate_float_08000adc(result_25,result_10);\n      result_10 = calculate_float_value_08000cec(result_10,result_9);\n      result_10 = calculate_float_08000adc(result_23,result_10);\n      result_10 = calculate_float_08000ad8(result_10,result_17);\n      result_17 = calculate_float_value_08000cec(result_26,result_24);\n      result_23 = calculate_float_08000ad8(0x3f000000,result_12);\n      result_23 = calculate_float_08000ad8(result_23,result_14);\n      result_23 = calculate_float_value_08000cec(result_23,result_9);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_11 = calculate_float_value_08000cec(result_11,result_24);\n      result_11 = calculate_float_08000adc(result_23,result_11);\n      result_2 = calculate_float_08000ad8(result_11,result_2);\n      result_11 = calculate_float_value_08000cec(result_7 + -0x80000000,result_20);\n      result_13 = calculate_float_value_08000cec(result_6,result_21);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_13 = calculate_float_value_08000cec(result_22,result_15);\n      result_11 = calculate_float_08000ad8(result_11,result_13);\n      result_13 = calculate_float_value_08000cec(result_27,result_24 + -0x80000000);\n      result_13 = calculate_float_08000adc(result_13,result_16);\n      result_13 = calculate_float_value_08000cec(result_13,result_10);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_13 = calculate_float_value_08000cec(result_17,result_2);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_12 = calculate_float_08000adc(result_12);\n      result_12 = calculate_float_08000ad8(0x3f800000,result_12);\n      result_13 = calculate_float_08000adc(result_14);\n      result_12 = calculate_float_08000ad8(result_12,result_13);\n      result_1 = calculate_float_value_08000cec(input_3,result_1);\n      result_1 = calculate_float_08000ad8(result_12,result_1);\n      result_12 = calculate_float_value_08000cec(result_27,result_9);\n      result_9 = calculate_float_value_08000cec(result_25,result_9);\n      result_13 = calculate_float_value_08000cec(result_8,result_20);\n      result_14 = calculate_float_value_08000cec(check_result,result_21);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_float_value_08000cec(result_28,0x40800000);\n      result_14 = calculate_float_value_08000cec(result_14,result_1);\n      result_13 = calculate_float_08000ad8(result_13,result_14);\n      result_14 = calculate_float_value_08000cec(result_15,result_12);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_float_08000adc(result_17,result_9);\n      result_14 = calculate_float_value_08000cec(result_14,result_10);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_float_value_08000cec(result_27,result_24);\n      result_17 = calculate_float_value_08000cec(result_28,result_19);\n      result_14 = calculate_float_08000ad8(result_14,result_17);\n      result_14 = calculate_float_value_08000cec(result_14,result_2);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_18 = calculate_float_08000adc(result_24,result_24);\n      result_14 = calculate_float_value_08000cec(result_28,result_24);\n      result_17 = calculate_float_value_08000cec(check_result + -0x80000000,result_20);\n      result_8 = calculate_float_value_08000cec(result_8,result_21);\n      result_8 = calculate_float_08000adc(result_17,result_8);\n      result_17 = calculate_float_value_08000cec(result_26,0x40800000);\n      result_1 = calculate_float_value_08000cec(result_17,result_1);\n      result_1 = calculate_float_08000ad8(result_8,result_1);\n      result_8 = calculate_float_value_08000cec(result_26,result_18 + -0x80000000);\n      result_8 = calculate_float_08000ad8(result_8,result_9);\n      result_8 = calculate_float_value_08000cec(result_8,result_15);\n      result_1 = calculate_float_08000adc(result_1,result_8);\n      result_8 = calculate_float_08000adc(result_12,result_14);\n      result_8 = calculate_float_value_08000cec(result_8,result_10);\n      result_1 = calculate_float_08000adc(result_1,result_8);\n      result_8 = calculate_float_value_08000cec(result_25,result_24);\n      result_9 = calculate_float_value_08000cec(result_26,result_19);\n      result_8 = calculate_float_08000ad8(result_8,result_9);\n      result_8 = calculate_float_value_08000cec(result_8,result_2);\n      result_8 = calculate_float_08000adc(result_1,result_8);\n      result_1 = calculate_float_value_08000cec(result_6,result_20);\n      result_6 = calculate_float_value_08000cec(result_7,result_21);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_6 = calculate_float_value_08000cec(result_27,result_18 + -0x80000000);\n      result_6 = calculate_float_08000adc(result_6,result_16);\n      result_6 = calculate_float_value_08000cec(result_6,result_15);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_6 = calculate_float_value_08000cec(result_25,result_24 + -0x80000000);\n      result_6 = calculate_float_08000adc(result_6,result_22);\n      result_6 = calculate_float_value_08000cec(result_6,result_10);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_2 = calculate_float_value_08000cec(result_2,result_14);\n      result_6 = calculate_float_08000adc(result_1,result_2);\n      result_1 = calculate_float_value_08000cec(result_11);\n      result_2 = calculate_float_value_08000cec(result_13);\n      result_1 = calculate_float_08000adc(result_1,result_2);\n      result_2 = calculate_float_value_08000cec(result_8,result_8);\n      result_1 = calculate_float_08000adc(result_1,result_2);\n      result_2 = calculate_float_value_08000cec(result_6,result_6);\n      calculate_float_08000adc(result_1,result_2);\n      reverse_and_mask_bits_08000428();\n      process_data_08005bc8();\n      result_1 = calculate_floating_point_08000a30();\n      result_9 = calculate_float_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = calculate_float_value_08000cec(result_28 + -0x80000000,result_3);\n      result_10 = calculate_float_value_08000cec(result_26,result_4);\n      result_2 = calculate_float_08000ad8(result_2,result_10);\n      result_10 = calculate_float_value_08000cec(result_27,result_5);\n      result_2 = calculate_float_08000ad8(result_2,result_10);\n      result_10 = calculate_float_value_08000cec(result_2,0x3f000000);\n      result_11 = calculate_float_value_08000cec(result_11,result_9);\n      result_2 = DAT_20000360;\n      result_11 = calculate_float_value_08000cec(result_11,result_1);\n      result_10 = calculate_float_08000ad8(result_10,result_11);\n      result_2 = calculate_float_value_08000cec(result_10,result_2);\n      result_10 = calculate_float_08000adc(result_2,result_25);\n      result_11 = calculate_float_value_08000cec(result_25,result_3);\n      result_12 = calculate_float_value_08000cec(result_26,result_5);\n      result_2 = DAT_20000360;\n      result_11 = calculate_float_08000adc(result_11,result_12);\n      result_12 = calculate_float_value_08000cec(result_27,result_4);\n      result_11 = calculate_float_08000ad8(result_11,result_12);\n      result_11 = calculate_float_value_08000cec(result_11,0x3f000000);\n      result_12 = calculate_float_value_08000cec(result_13,result_9);\n      result_12 = calculate_float_value_08000cec(result_12,result_1);\n      result_11 = calculate_float_08000ad8(result_11,result_12);\n      result_2 = calculate_float_value_08000cec(result_11,result_2);\n      result_11 = calculate_float_08000adc(result_2,result_28);\n      result_2 = DAT_20000360;\n      result_12 = calculate_float_value_08000cec(result_25,result_4);\n      result_13 = calculate_float_value_08000cec(result_28,result_5);\n      result_12 = calculate_float_08000ad8(result_12,result_13);\n      result_13 = calculate_float_value_08000cec(result_27,result_3);\n      result_12 = calculate_float_08000adc(result_12,result_13);\n      result_12 = calculate_float_value_08000cec(result_12,0x3f000000);\n      result_8 = calculate_float_value_08000cec(result_8,result_9);\n      result_8 = calculate_float_value_08000cec(result_8,result_1);\n      result_8 = calculate_float_08000ad8(result_12,result_8);\n      result_2 = calculate_float_value_08000cec(result_8,result_2);\n      result_2 = calculate_float_08000adc(result_2,result_26);\n      result_25 = calculate_float_value_08000cec(result_25,result_5);\n      result_4 = calculate_float_value_08000cec(result_28,result_4);\n      result_25 = calculate_float_08000adc(result_25,result_4);\n      result_26 = calculate_float_value_08000cec(result_26,result_3);\n      result_25 = calculate_float_08000ad8(result_25,result_26);\n      result_26 = calculate_float_value_08000cec(result_25,0x3f000000);\n      result_25 = calculate_float_value_08000cec(result_6,result_9);\n      result_1 = calculate_float_value_08000cec(result_25,result_1);\n      result_25 = DAT_20000360;\n      result_26 = calculate_float_08000ad8(result_26,result_1);\n      result_25 = calculate_float_value_08000cec(result_26,result_25);\n      result_25 = calculate_float_08000adc(result_25,result_27);\n      result_26 = calculate_float_value_08000cec(result_10,result_10);\n      result_27 = calculate_float_value_08000cec(result_11,result_11);\n      result_26 = calculate_float_08000adc(result_26,result_27);\n      result_27 = calculate_float_value_08000cec(result_2,result_2);\n      result_26 = calculate_float_08000adc(result_26,result_27);\n      result_27 = calculate_float_value_08000cec(result_25,result_25);\n      calculate_float_08000adc(result_26,result_27);\n      reverse_and_mask_bits_08000428();\n      process_data_08005bc8();\n      result_26 = calculate_floating_point_08000a30();\n      result_26 = calculate_float_08000e54(0x3f800000,result_26);\n      result_27 = calculate_float_value_08000cec(result_10,result_26);\n      DAT_2000003c = result_27;\n      result_28 = calculate_float_value_08000cec(result_11,result_26);\n      DAT_20000040 = result_28;\n      result_1 = calculate_float_value_08000cec(result_2,result_26);\n      DAT_20000044 = result_1;\n      DAT_20000048 = calculate_float_value_08000cec(result_25,result_26);\n      result_25 = calculate_float_value_08000cec(result_28,DAT_20000048);\n      result_26 = calculate_float_value_08000cec(result_27,result_1);\n      result_25 = calculate_float_08000ad8(result_25,result_26);\n      calculate_float_08000adc(result_25,result_25);\n      reverse_and_mask_bits_08000428();\n      result_29 = check_and_get_infinity_08005854();\n      result_29 = calculate_shifted_value_080004d0((int)result_29,(int)((ulonglong)result_29 >> 0x20),0,0x40668000);\n      calculate_result_08000724((int)result_29,(int)((ulonglong)result_29 >> 0x20),0x54442d18,0x400921fb);\n      result_25 = calculate_floating_point_08000a30();\n      *result_array = result_25;\n      result_28 = DAT_20000040;\n      result_25 = DAT_2000003c;\n      result_26 = calculate_float_value_08000cec(DAT_2000003c,DAT_2000003c);\n      result_27 = calculate_float_value_08000cec(result_28,result_28);\n      result_27 = calculate_float_08000ad8(result_26,result_27);\n      result_26 = DAT_20000044;\n      result_1 = calculate_float_value_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_float_08000ad8(result_27,result_1);\n      result_27 = DAT_20000048;\n      result_2 = calculate_float_value_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_08000adc(result_1,result_2);\n      result_29 = reverse_and_mask_bits_08000428();\n      result_25 = calculate_float_value_08000cec(result_25,result_28);\n      result_26 = calculate_float_value_08000cec(result_26,result_27);\n      result_25 = calculate_float_08000adc(result_25,result_26);\n      calculate_float_08000adc(result_25,result_25);\n      result_30 = reverse_and_mask_bits_08000428();\n      result_29 = calculate_result_thunk_08006070((int)result_30,(int)((ulonglong)result_30 >> 0x20),(int)result_29,\n                                  (int)((ulonglong)result_29 >> 0x20));\n      result_29 = calculate_shifted_value_080004d0((int)result_29,(int)((ulonglong)result_29 >> 0x20),0,0x40668000);\n      calculate_result_08000724((int)result_29,(int)((ulonglong)result_29 >> 0x20),0x54442d18,0x400921fb);\n      result_25 = calculate_floating_point_08000a30();\n      result_array[1] = result_25;\n      result_28 = DAT_20000040;\n      result_25 = DAT_2000003c;\n      result_26 = calculate_float_value_08000cec(DAT_2000003c,DAT_2000003c);\n      result_27 = calculate_float_value_08000cec(result_28,result_28);\n      result_27 = calculate_float_08000adc(result_26,result_27);\n      result_26 = DAT_20000044;\n      result_1 = calculate_float_value_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_float_08000ad8(result_27,result_1);\n      result_27 = DAT_20000048;\n      result_2 = calculate_float_value_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_08000ad8(result_1,result_2);\n      result_29 = reverse_and_mask_bits_08000428();\n      result_26 = calculate_float_value_08000cec(result_28,result_26);\n      result_25 = calculate_float_value_08000cec(result_25,result_27);\n      result_25 = calculate_float_08000adc(result_26,result_25);\n      calculate_float_08000adc(result_25,result_25);\n      result_30 = reverse_and_mask_bits_08000428();\n      result_29 = calculate_result_thunk_08006070((int)result_30,(int)((ulonglong)result_30 >> 0x20),(int)result_29,\n                                  (int)((ulonglong)result_29 >> 0x20));\n      result_29 = calculate_shifted_value_080004d0((int)result_29,(int)((ulonglong)result_29 >> 0x20),0,0x40668000);\n      calculate_result_08000724((int)result_29,(int)((ulonglong)result_29 >> 0x20),0x54442d18,0x400921fb);\n      result_25 = calculate_floating_point_08000a30();\n      result_array[2] = result_25;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_and_process_08003330",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "input_9",
                "param_10": "result_array",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "check_result",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "result_5",
                "uVar7": "result_6",
                "iVar8": "result_7",
                "uVar9": "result_8",
                "uVar10": "result_9",
                "uVar11": "result_10",
                "uVar12": "result_11",
                "uVar13": "result_12",
                "uVar14": "result_13",
                "uVar15": "result_14",
                "uVar16": "result_15",
                "uVar17": "result_16",
                "uVar18": "result_17",
                "iVar19": "result_18",
                "uVar20": "result_19",
                "uVar21": "result_20",
                "uVar22": "result_21",
                "uVar23": "result_22",
                "uVar24": "result_23",
                "iVar26": "result_24",
                "uVar27": "result_25",
                "uVar28": "result_26",
                "uVar29": "result_27",
                "iVar30": "result_28",
                "uVar31": "result_29",
                "uVar32": "result_30"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_left_or_interrupt_08003eb0",
            "code": "\nlonglong shift_left_or_interrupt_08003eb0(uint input_value)\n\n{\n  if (DAT_20000280 == 0) {\n    interrupt_function(0x3f);\n    return concatenate_44_bits(input_value,1);\n  }\n  return (ulonglong)input_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_left_or_interrupt_08003eb0",
                "param_1": "input_value",
                "software_interrupt": "interrupt_function",
                "CONCAT44": "concatenate_44_bits"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_counter_and_store_value_08003ec8",
            "code": "\nundefined4 incrementCounterAndStoreValue_08003ec8(int baseAddress,undefined value)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = value;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_counter_and_store_value_08003ec8",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "update_param_values_08003f3c",
            "code": "\nvoid updateParamValues_08003f3c(int value1,int value2,int value3)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,value1 == 0);\n  set_param_value_08001424(0x40011000,0x4000,value2 == 0);\n  set_param_value_08001424(0x40011000,0x2000,value3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "update_param_values_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "store_parameter_in_memory_08003fc4",
            "code": "\nvoid storeParameterInMemory_08003fc4(undefined4 inputParameter)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = inputParameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "store_parameter_in_memory_08003fc4",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "store_param_to_global_08003fd0",
            "code": "\nvoid storeParamToGlobal_08003fd0(undefined4 val)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = val;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "store_param_to_global_08003fd0",
                "param_1": "val"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "store_parameter_to_memory_08003fdc",
            "code": "\nvoid storeParameterToMemory_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "store_parameter_to_memory_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "update_data_08003fe8",
            "code": "\nvoid updateData_08003fe8(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "update_data_08003fe8",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "update_flags_08003ff4",
            "code": "\nvoid update_flags_08003ff4(void)\n\n{\n  update_flag(&DAT_200015f8,4);\n  update_flag(&DAT_20001540,8);\n  update_flag(&DAT_200014c8,8);\n  update_flag(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "update_flags_08003ff4",
                "update_bit_and_set_flag_08002538": "update_flag"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_update_parameters_08004028",
            "code": "\nvoid initialize_and_update_parameters_08004028(void)\n\n{\n  int loop_counter;\n  \n  initialize_system();\n  update_flags();\n  loop_counter = 3;\n  do {\n    update_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    update_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    update_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    loop_counter = loop_counter + -1;\n  } while (loop_counter != 0);\n  update_parameter_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_update_parameters_08004028",
                "iVar1": "loop_counter",
                "initialize_and_process_system_0800458c": "initialize_system",
                "update_flags_08003ff4": "update_flags",
                "update_param_values_08003f3c": "update_parameter_values",
                "update_param_values_08003f3c(1,0)": "update_parameter_values(1,0)",
                "update_param_values_08003f3c(0,1)": "update_parameter_values(0,1)",
                "update_param_values_08003f3c(0,0,1)": "update_parameter_values(0,0,1)",
                "update_param_values_08003f3c(1,1)": "update_parameter_values(1,1)"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_and_check_data_0800403c",
            "code": "\nvoid processAndCheckData_0800403c(undefined4 arg1,undefined4 arg2,undefined data,int flag)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = data;\n  result = process_data_08001828(&DAT_20001504,arg1,arg2,1,buffer,1,200);\n  if (result != 0) {\n    continuous_processing_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (flag != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_and_check_data_0800403c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "flag",
                "iVar1": "result",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_data_and_handle_errors_0800407c",
            "code": "\nundefined process_data_and_handle_errors_0800407c(undefined4 input_1,undefined4 input_2,undefined4 output_1,undefined4 output_2)\n\n{\n  int result;\n  undefined error_flag [8];\n  \n  error_flag[0] = 0;\n  result = process_data_08001938(&DAT_20001504,input_1,input_2,1,error_flag,1,200);\n  if (result != 0) {\n    continuous_processing_08004490(output_1,output_2);\n  }\n  return error_flag[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_data_and_handle_errors_0800407c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "output_1",
                "param_4": "output_2",
                "iVar1": "result",
                "local_14": "error_flag"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_data_and_continue_080040b8",
            "code": "\nvoid process_data_and_continue_080040b8(undefined4 data_1,undefined4 data_2,undefined4 data_3,undefined4 data_4,\n                 undefined4 param_5,undefined4 param_6)\n\n{\n  int result;\n  \n  result = process_data_08001938(&DAT_20001504,data_1,data_2,1,data_3,data_4,200,data_4);\n  if (result != 0) {\n    continuous_processing_08004490(param_5,param_6);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_data_and_continue_080040b8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_with_errors_handled_080040e8",
            "code": "\nvoid copyDataWithErrorsHandled_080040e8(undefined4 inputData,int offset,int destination,int size)\n\n{\n  undefined processedData;\n  int index;\n  undefined *destPointer;\n  int source;\n  \n  destPointer = (undefined *)(destination + -1);\n  source = size;\n  for (index = 0; index < size; index = index + 1) {\n    processedData = process_data_and_handle_errors_0800407c(inputData,offset + index & 0xffff,\"../Src/i2c.c\",0x4c,source);\n    destPointer = destPointer + 1;\n    *destPointer = processedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_with_errors_handled_080040e8",
                "param_1": "inputData",
                "param_2": "offset",
                "param_3": "destination",
                "param_4": "size",
                "uVar1": "processedData",
                "iVar2": "index",
                "puVar3": "destPointer",
                "iVar4": "source"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_sensor_data_0800411c",
            "code": "\nvoid processSensorData_0800411c(void)\n\n{\n  undefined4 *ptr;\n  longlong longValue;\n  uint value1;\n  uint value2;\n  uint value3;\n  undefined4 result1;\n  undefined4 result2;\n  int dataValue;\n  uint tempValue1;\n  uint tempValue2;\n  uint tempValue3;\n  uint tempValue4;\n  undefined4 *ptrArray;\n  undefined4 unaffectedValue;\n  int tempVar1;\n  int tempVar2;\n  bool flag1;\n  undefined8 result3;\n  \n  dataValue = thunk_get_data_value_0800115c();\n  if (1 < (uint)(dataValue - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_value_0800115c();\n    initialize_and_process_sensor_data_08002f28();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (2 < (uint)(dataValue - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_value_0800115c();\n    initialize_and_update_values_08004a84();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (3 < (uint)(dataValue - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_value_0800115c();\n    initialize_data_08004348();\n    combine_and_process_data_08004384();\n    process_data_and_combine_080043f0();\n    process_and_combine_data_08004410();\n    combine_data_08004434();\n    copy_and_process_data_080043bc();\n    process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    tempVar2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    tempValue1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVar2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVar2) >> 0x20) << 9;\n    tempValue2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVar2 >> 7);\n    tempValue3 = tempValue2 + (uint)DAT_20000260 * 0x10000;\n    value2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVar2) >> 8);\n    dataValue = tempValue1 + 2000;\n    value3 = value2 + (uint)DAT_2000025e * 0x8000;\n    flag1 = (int)tempValue1 < 0;\n    if (1999 < dataValue) {\n      tempValue1 = 0;\n    }\n    value1 = tempValue1;\n    if (flag1 != SBORROW4(dataValue,2000)) {\n      tempVar1 = tempValue1 * tempValue1 * 5;\n      tempValue1 = tempVar1 >> 2;\n      value1 = tempVar1 >> 1;\n    }\n    tempValue4 = tempValue3 - value1;\n    longValue = (ulonglong)(value3 - tempValue1) * (ulonglong)DAT_2000026c;\n    tempVar1 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVar2 >> 0x28) +\n               (uint)CARRY4(value2,(uint)DAT_2000025e * 0x8000)) - ((int)tempValue1 >> 0x1f)) -\n             (uint)(value3 < tempValue1)) + (int)((ulonglong)longValue >> 0x20);\n    value2 = (uint)longValue >> 0x15 | tempVar1 * 0x800;\n    result1 = calculate_checksum_08000c44(value2 - tempValue4 >> 0xf |\n                         (((tempVar1 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVar2 >> 0x27) +\n                            (uint)CARRY4(tempValue2,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)value1 >> 0x1f)) - (uint)(tempValue3 < value1))) - (uint)(value2 < tempValue4)\n                         ) * 0x20000);\n    result1 = calculate_float_08000e54(result1,0x42c80000);\n    DAT_20000354 = result1;\n    result2 = calculate_checksum_08000c44(dataValue);\n    DAT_20000358 = calculate_float_08000e54(result2,0x42c80000);\n    calculate_float_08000e54(result1,0x447d5000);\n    result3 = reverse_and_mask_bits_08000428();\n    result3 = calculate_result_08005900((int)result3,(int)((ulonglong)result3 >> 0x20),0x60000000,0x3fc85b95);\n    result3 = calculate_integer_operations_08000168(0,0x3ff00000,(int)result3,(int)((ulonglong)result3 >> 0x20));\n    calculate_shifted_value_080004d0((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40e5a540);\n    result1 = calculate_floating_point_08000a30();\n    result2 = 0;\n    ptrArray = &DAT_20000300;\n    DAT_20000350 = result1;\n    do {\n      ptr = ptrArray + 1;\n      *ptrArray = *ptr;\n      result2 = calculate_float_08000adc(result2);\n      ptrArray = ptr;\n    } while (ptr != &DAT_2000034c);\n    DAT_2000034c = result1;\n    result1 = calculate_float_08000adc(result2,result1);\n    DAT_200002fc = calculate_float_08000e54(result1,0x41a00000);\n    dataValue = extract_value_08001078();\n    DAT_200014ab = dataValue * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_and_check_data_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_value_0800115c();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (((10 < (uint)(dataValue - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = process_and_concatenate_data_08003034();\n    DAT_20000275 = '\\x01';\n    process_and_check_data_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffectedValue);\n    DAT_20000278 = thunk_get_data_value_0800115c();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (((10 < (uint)(dataValue - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = process_and_concatenate_data_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "puVar1": "ptr",
                "lVar2": "longValue",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "result1",
                "uVar7": "result2",
                "iVar8": "dataValue",
                "uVar9": "tempValue1",
                "uVar10": "tempValue2",
                "uVar11": "tempValue3",
                "uVar12": "tempValue4",
                "puVar13": "ptrArray",
                "unaff_r4": "unaffectedValue",
                "iVar14": "tempVar1",
                "iVar15": "tempVar2",
                "bVar16": "flag1",
                "uVar17": "result3"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_game_08004194",
            "code": "\nvoid initializeGame_08004194(void)\n\n{\n  initializeAndUpdateParameters();\n  initializeAndSetFlags();\n  initializeComponents();\n  initializeData();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_game_08004194",
                "initialize_and_update_parameters_08004028": "initializeAndUpdateParameters",
                "initialize_and_set_flags_08004c70": "initializeAndSetFlags",
                "initialize_08002ea0": "initializeComponents",
                "initialize_data_08003298": "initializeData"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "run_game_loop_080041ae",
            "code": "\nvoid runGameLoop_080041ae(void)\n\n{\n  applyShiftLeftOrInterrupt(0);\n  initializeGame();\n  do {\n    incrementCounter();\n    processSensorData();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "run_game_loop_080041ae",
                "shift_left_or_interrupt_08003eb0": "applyShiftLeftOrInterrupt",
                "initialize_game_08004194": "initializeGame",
                "increment_counter_0800114c": "incrementCounter",
                "process_sensor_data_0800411c": "processSensorData"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_data_080041c4",
            "code": "\nvoid initializeData_080041c4(undefined4 unusedParam1,undefined4 unusedParam2,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 unused1;\n  \n  storeParamInMemory(0);\n  storeParamToGlobal(0);\n  storeParamToMemory(0);\n  updateData(0,unused1,data1,data2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_data_080041c4",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "param_3": "data1",
                "param_4": "data2",
                "extraout_r1": "unused1",
                "store_parameter_in_memory_08003fc4": "storeParamInMemory",
                "store_param_to_global_08003fd0": "storeParamToGlobal",
                "store_parameter_to_memory_08003fdc": "storeParamToMemory",
                "update_data_08003fe8": "updateData"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_store_values_0800426c",
            "code": "\n\n\nvoid calculateAndStoreValues_0800426c(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint extractedValue1;\n  uint extractedValue2;\n  uint extractedValue3;\n  uint extractedValue4;\n  \n  result1 = calculate_float_08000ad8();\n  result2 = calculate_float_08000adc(value1,value2);\n  result3 = calculate_float_08000ad8(result1,value3);\n  result3 = calculate_float_08000adc(result3,value4);\n  calculate_float_08000ad8(result3,0x447a0000);\n  extractedValue1 = extract_value_08001078();\n  result3 = calculate_float_08000ad8(result2,value3);\n  result3 = calculate_float_08000ad8(result3,value4);\n  calculate_float_08000ad8(result3,0x447a0000);\n  extractedValue2 = extract_value_08001078();\n  result1 = calculate_float_08000adc(result1,value3);\n  result1 = calculate_float_08000ad8(result1,value4);\n  calculate_float_08000ad8(result1,0x447a0000);\n  extractedValue3 = extract_value_08001078();\n  result1 = calculate_float_08000adc(value3,result2);\n  result1 = calculate_float_08000adc(result1,value4);\n  calculate_float_08000ad8(result1,0x447a0000);\n  extractedValue4 = extract_value_08001078();\n  if (999 < (int)extractedValue4) {\n    extractedValue4 = 1000;\n  }\n  if (999 < (int)extractedValue3) {\n    extractedValue3 = 1000;\n  }\n  if (999 < (int)extractedValue2) {\n    extractedValue2 = 1000;\n  }\n  if (999 < (int)extractedValue1) {\n    extractedValue1 = 1000;\n  }\n  DAT_200002a0 = extractedValue2 & ~((int)extractedValue2 >> 0x1f);\n  DAT_200002a4 = extractedValue1 & ~((int)extractedValue1 >> 0x1f);\n  DAT_2000029c = extractedValue3 & ~((int)extractedValue3 >> 0x1f);\n  DAT_20000298 = extractedValue4 & ~((int)extractedValue4 >> 0x1f);\n  store_parameter_in_memory_08003fc4();\n  store_param_to_global_08003fd0(DAT_2000029c);\n  store_parameter_to_memory_08003fdc(DAT_200002a0);\n  update_data_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_store_values_0800426c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "extractedValue1",
                "uVar5": "extractedValue2",
                "uVar6": "extractedValue3",
                "uVar7": "extractedValue4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_and_combine_data_08004300",
            "code": "\nvoid process_and_combine_data_08004300(uint input_key,byte *input_data,uint data_length)\n\n{\n  uint combined_output;\n  byte *current_byte;\n  \n  process_terminated_strings_08004c8c(&DAT_0800732e);\n  process_data_08004c18(data_length & 0xff);\n  combined_output = data_length & 0xff ^ input_key;\n  process_data_08004c18(input_key);\n  for (current_byte = input_data; (int)current_byte - (int)input_data < (int)data_length; current_byte = current_byte + 1) {\n    process_data_08004c18(*current_byte);\n    combined_output = combined_output ^ *current_byte;\n  }\n  process_data_08004c18(combined_output);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_and_combine_data_08004300",
                "param_1": "input_key",
                "param_2": "input_data",
                "param_3": "data_length",
                "uVar1": "combined_output",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 dataPointer;\n  uint maskedParam2;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  dataPointer = 0x40003e9;\n  maskedParam2 = param2 & 0xff000000;\n  param3Copy = param3;\n  process_and_combine_data_08004300(100,&dataPointer,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "dataPointer",
                "local_c": "maskedParam2",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "combine_and_process_data_08004384",
            "code": "\n\n\nvoid combineAndProcessData_08004384(undefined4 inputData_1,undefined4 inputData_2,undefined4 inputData_3,uint inputData_4)\n\n{\n  undefined4 dataPointer_1;\n  undefined4 dataPointer_2;\n  uint maskedInputData;\n  \n  _DAT_200013bd = 0x2a0007;\n  dataPointer_1 = _DAT_200013b9;\n  dataPointer_2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedInputData = inputData_4 & 0xff000000;\n  process_and_combine_data_08004300(0x65,&dataPointer_1,0xb,0,inputData_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "combine_and_process_data_08004384",
                "param_1": "inputData_1",
                "param_2": "inputData_2",
                "param_3": "inputData_3",
                "param_4": "inputData_4",
                "local_14": "dataPointer_1",
                "uStack_10": "dataPointer_2",
                "local_c": "maskedInputData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_data_080043bc",
            "code": "\nvoid copyAndProcessData_080043bc(void)\n\n{\n  undefined4 firstValue;\n  undefined4 secondValue;\n  undefined4 *destinationArray;\n  undefined4 *sourceArray;\n  undefined4 copiedArray [2];\n  undefined2 temporaryArray [6];\n  \n  sourceArray = (undefined4 *)&DAT_2000142a;\n  destinationArray = copiedArray;\n  do {\n    firstValue = *sourceArray;\n    secondValue = sourceArray[1];\n    sourceArray = sourceArray + 2;\n    *destinationArray = firstValue;\n    destinationArray[1] = secondValue;\n    destinationArray = destinationArray + 2;\n  } while (sourceArray != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destinationArray = DAT_2000143a;\n  process_and_combine_data_08004300(0x66,copiedArray,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_data_080043bc",
                "uVar1": "firstValue",
                "uVar2": "secondValue",
                "puVar3": "destinationArray",
                "puVar4": "sourceArray",
                "local_24": "copiedArray",
                "local_1c": "temporaryArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "process_data_and_combine_080043f0",
            "code": "\n\n\nvoid processDataAndCombine_080043f0(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 dataArray [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  dataArray[0] = input3;\n  process_and_combine_data_08004300(0x68,&data1,8,dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "process_data_and_combine_080043f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "dataArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_and_combine_data_08004410",
            "code": "\nvoid processAndCombineData_08004410(undefined4 unused,undefined4 inputData,undefined4 additionalData)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_20001395;\n  data2 = CONCAT22((short)((uint)inputData >> 0x10),DAT_20001399);\n  data3 = additionalData;\n  process_and_combine_data_08004300(0x6c,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_and_combine_data_08004410",
                "param_1": "unused",
                "param_2": "inputData",
                "param_3": "additionalData",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "data3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "combine_data_08004434",
            "code": "\nvoid combineData_08004434(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_200014ab;\n  data2 = CONCAT22((short)((uint)input2 >> 0x10),DAT_200014af);\n  data3 = input3;\n  process_and_combine_data_08004300(0x6d,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "combine_data_08004434",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "data3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "process_data_08004458",
            "code": "\nvoid processData_08004458(void)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 tempValue;\n  undefined4 *destPtrIterator;\n  undefined4 *srcPtrIterator;\n  undefined4 dataBuffer [3];\n  undefined2 tempBuffer [10];\n  \n  destPtr = dataBuffer;\n  srcPtr = &DAT_2000139b;\n  do {\n    srcPtrIterator = srcPtr;\n    destPtrIterator = destPtr;\n    tempValue = srcPtrIterator[1];\n    *destPtrIterator = *srcPtrIterator;\n    destPtrIterator[1] = tempValue;\n    destPtr = destPtrIterator + 2;\n    srcPtr = srcPtrIterator + 2;\n  } while (srcPtrIterator + 2 != (undefined4 *)0x200013b3);\n  destPtrIterator[2] = uRam200013b3;\n  *(undefined2 *)(destPtrIterator + 3) = *(undefined2 *)(srcPtrIterator + 3);\n  process_and_combine_data_08004300(0x70,dataBuffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "process_data_08004458",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "uVar3": "tempValue",
                "puVar4": "destPtrIterator",
                "puVar5": "srcPtrIterator",
                "local_30": "dataBuffer",
                "local_24": "tempBuffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "continuous_processing_08004490",
            "code": "\nvoid continuousProcessing_08004490(undefined4 errorDescription,undefined4 lineNumber)\n\n{\n  setParamValue(0x40011000,0x4000,1);\n  setParamValue(0x40011000,0x8000,0);\n  setParamValue(0x40011000,0x2000,0);\n  do {\n    applyXOR(0x40011000,0x4000);\n    applyXOR(0x40011000,0x8000);\n    applyXOR(0x40011000,0x2000);\n    processTerminatedStrings(\"Error with \");\n    processTerminatedStrings(errorDescription);\n    processTerminatedStrings(\" at line: \");\n    initialize_and_process_strings_08004cac(lineNumber);\n    processData(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "continuous_processing_08004490",
                "param_1": "errorDescription",
                "param_2": "lineNumber",
                "set_param_value_08001424": "setParamValue",
                "apply_xor_0800142e": "applyXOR",
                "process_terminated_strings_08004c8c": "processTerminatedStrings",
                "process_data_08004c18": "processData"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "process_peripheral_data_08004514",
            "code": "\nvoid processPeripheralData_08004514(void)\n\n{\n  int conditionResult;\n  uint globalValue;\n  undefined4 loopCount;\n  int memoryAccessResult;\n  undefined4 constant1;\n  int localVariable1;\n  int localVariable2;\n  undefined4 constant2;\n  int localVariable3;\n  undefined4 constantArray [4];\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  undefined4 constant6;\n  undefined4 constant7;\n  \n  constant3 = 1;\n  constant4 = 0x10;\n  memoryAccessResult = 2;\n  constant6 = 0;\n  constantArray[0] = 2;\n  constant5 = 2;\n  constant7 = 0x380000;\n  conditionResult = check_conditions_08001b58(constantArray);\n  if (conditionResult == 0) goto LAB_08004540;\n  loopCount = 0x3c;\n  while( true ) {\n    conditionResult = continuous_processing_08004490(\"../Src/peripherals.c\",loopCount);\nLAB_08004540:\n    constant1 = 0xf;\n    constant2 = 0x400;\n    localVariable1 = memoryAccessResult;\n    localVariable2 = conditionResult;\n    localVariable3 = conditionResult;\n    memoryAccessResult = validate_memory_access_0800209c(&constant1,memoryAccessResult);\n    if (memoryAccessResult == 0) break;\n    loopCount = 0x49;\n  }\n  globalValue = get_global_value_08002214();\n  update_memory_08001214(globalValue / 1000);\n  update_e000e010_flag_08001240(4);\n  set_memory_value_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "process_peripheral_data_08004514",
                "iVar1": "conditionResult",
                "uVar2": "globalValue",
                "uVar3": "loopCount",
                "iVar4": "memoryAccessResult",
                "local_44": "constant1",
                "local_40": "localVariable1",
                "local_3c": "localVariable2",
                "local_38": "constant2",
                "local_34": "localVariable3",
                "local_30": "constantArray",
                "local_20": "constant3",
                "local_1c": "constant4",
                "local_14": "constant5",
                "local_10": "constant6",
                "local_c": "constant7"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_process_system_0800458c",
            "code": "\n\n\nvoid initialize_and_process_system_0800458c(void)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  int iVar3;\n  int local_58;\n  int local_54;\n  int local_50;\n  int local_4c;\n  int local_48;\n  int local_40;\n  int local_3c;\n  int local_38;\n  int local_34;\n  int local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  undefined4 local_20;\n  int local_1c;\n  \n  initialize_system();\n  process_peripheral_data();\n  iVar3 = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_parameter_value(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_parameter_value(0x40010800,0x20,0);\n  local_34 = 0xe000;\n  local_30 = 1;\n  local_28 = 2;\n  update_registers(0x40011000,&local_34);\n  local_34 = 0x20;\n  local_30 = 1;\n  local_28 = 2;\n  update_registers(0x40010800,&local_34);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  iVar1 = initialize_parameters();\n  if (iVar1 == 0) goto LAB_0800463a;\n  uVar2 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  iVar1 = continuous_processing(\"../Src/peripherals.c\",uVar2);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = iVar1;\n                                  DAT_20001588 = iVar1;\n                                  DAT_2000158c = iVar1;\n                                  DAT_20001594 = iVar1;\n                                  DAT_20001598 = iVar1;\n                                  iVar1 = initialize_config(&DAT_2000157c);\n                                  if (iVar1 == 0) break;\n                                  uVar2 = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = iVar3;\n                                DAT_200015c4 = iVar1;\n                                DAT_200015cc = iVar1;\n                                DAT_200015d0 = iVar1;\n                                iVar1 = update_flags_and_memory(&DAT_200015bc);\n                                if (iVar1 == 0) break;\n                                uVar2 = 0x88;\n                              }\n                              local_58 = iVar1;\n                              local_54 = iVar1;\n                              iVar1 = update_configuration(&DAT_200015bc,&local_58);\n                              if (iVar1 == 0) break;\n                              uVar2 = 0x8f;\n                            }\n                            local_50 = 0x60;\n                            local_4c = iVar1;\n                            local_48 = iVar1;\n                            local_40 = iVar1;\n                            local_3c = iVar1;\n                            local_38 = iVar1;\n                            iVar1 = update_function(&DAT_200015bc,&local_50,0xc);\n                            if (iVar1 == 0) break;\n                            uVar2 = 0x9a;\n                          }\n                          local_20 = 0x2000;\n                          local_34 = iVar1;\n                          local_30 = iVar1;\n                          local_2c = iVar1;\n                          local_28 = iVar1;\n                          local_24 = iVar1;\n                          local_1c = iVar1;\n                          iVar1 = check_and_update_flags(&DAT_200015bc,&local_34);\n                          if (iVar1 == 0) break;\n                          uVar2 = 0xa6;\n                        }\n                        update_registers(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = iVar3;\n                        DAT_20001600 = iVar1;\n                        DAT_20001608 = iVar1;\n                        iVar1 = update_flags_and_memory(&DAT_200015f8);\n                        if (iVar1 == 0) break;\n                        uVar2 = 0xc3;\n                      }\n                      local_50 = iVar1;\n                      local_4c = iVar1;\n                      iVar1 = update_configuration(&DAT_200015f8,&local_50);\n                      if (iVar1 == 0) break;\n                      uVar2 = 0xca;\n                    }\n                    local_34 = 0x60;\n                    local_30 = iVar1;\n                    local_2c = iVar1;\n                    local_24 = iVar1;\n                    iVar1 = update_function(&DAT_200015f8,&local_34,4);\n                    if (iVar1 == 0) break;\n                    uVar2 = 0xd3;\n                  }\n                  update_registers(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = iVar3;\n                  DAT_20001548 = iVar1;\n                  DAT_20001550 = iVar1;\n                  iVar1 = update_flags_and_memory();\n                  if (iVar1 == 0) break;\n                  uVar2 = 0xf0;\n                }\n                local_50 = 0;\n                local_4c = 0;\n                iVar1 = update_configuration(&DAT_20001540,&local_50);\n                if (iVar1 == 0) break;\n                uVar2 = 0xf7;\n              }\n              local_34 = 0x60;\n              local_30 = iVar1;\n              local_2c = iVar1;\n              local_24 = iVar1;\n              iVar1 = update_function(&DAT_20001540,&local_34,8);\n              if (iVar1 == 0) break;\n              uVar2 = 0x100;\n            }\n            iVar3 = update_function(&DAT_20001540,&local_34,0xc);\n            if (iVar3 == 0) break;\n            uVar2 = 0x105;\n          }\n          update_registers(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = iVar3;\n          DAT_200014d8 = iVar3;\n          iVar1 = update_flags_and_memory(&DAT_200014c8);\n          if (iVar1 == 0) break;\n          uVar2 = 0x122;\n        }\n        local_50 = iVar1;\n        local_4c = iVar1;\n        iVar1 = update_configuration(&DAT_200014c8,&local_50);\n        if (iVar1 == 0) break;\n        uVar2 = 0x129;\n      }\n      local_34 = 0x60;\n      local_30 = iVar1;\n      local_2c = iVar1;\n      local_24 = iVar1;\n      iVar1 = update_function(&DAT_200014c8,&local_34,8);\n      if (iVar1 == 0) break;\n      uVar2 = 0x132;\n    }\n    iVar1 = update_function(&DAT_200014c8,&local_34,0xc);\n    if (iVar1 == 0) break;\n    uVar2 = 0x137;\n  }\n  update_registers(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_process_system_0800458c",
                "initialize_system_08001128": "initialize_system",
                "process_peripheral_data_08004514": "process_peripheral_data",
                "set_param_value_08001424": "set_parameter_value",
                "update_registers_08001264": "update_registers",
                "initialize_parameters_08001754": "initialize_parameters",
                "continuous_processing_08004490": "continuous_processing",
                "initialize_config_08002724": "initialize_config",
                "update_flags_and_memory_080023d0": "update_flags_and_memory",
                "update_configuration_080025a4": "update_configuration",
                "update_function_0800245c": "update_function",
                "check_and_update_flags_08002564": "check_and_update_flags",
                "update_registers_08004e14": "update_registers"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_checksum_0800483c",
            "code": "\nvoid calculateChecksum_0800483c(int *parameters)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  int var3;\n  int var4;\n  int var5;\n  \n  var4 = parameters[0xc];\n  tempVar1 = calculate_float_08000adc(parameters[7],parameters[9]);\n  var4 = calculate_float_08000ad8(tempVar1,var4);\n  parameters[10] = var4;\n  if (*parameters == 3) {\n    var4 = is_concatenation_empty_08001064(parameters[10],0);\n    if (var4 == 0) {\n      var4 = check_if_concatenation_empty_08001028(parameters[10],0xc3340000);\n    }\n    else {\n      var4 = is_concatenation_empty_08001064(parameters[10],0x43340000);\n    }\n    if (var4 != 0) {\n      var5 = parameters[10];\n      tempVar1 = calculate_float_value_08000cec(parameters[10],0x43b40000);\n      var4 = is_concatenation_empty_08001064(parameters[10],0);\n      var3 = parameters[10];\n      if (var4 == 0) {\n        var3 = var3 + -0x80000000;\n      }\n      tempVar1 = calculate_float_08000e54(tempVar1,var3);\n      var4 = calculate_float_08000ad8(var5,tempVar1);\n      parameters[10] = var4;\n    }\n  }\n  var5 = parameters[2];\n  var3 = parameters[3];\n  var4 = calculate_float_value_08000cec(parameters[1],parameters[10]);\n  parameters[0xe] = var4;\n  var4 = calculate_float_08000adc(parameters[10],parameters[0xf]);\n  parameters[0xf] = var4;\n  var4 = check_if_concatenation_empty_08001028(parameters[0xf],0xc3fa0000);\n  if (var4 == 0) {\n    var4 = is_concatenation_empty_08001064(parameters[0xf],0x43fa0000);\n    if (var4 == 0) {\n      var4 = parameters[0xf];\n    }\n    else {\n      var4 = 0x43fa0000;\n    }\n  }\n  else {\n    var4 = -0x3c060000;\n  }\n  parameters[0xf] = var4;\n  var4 = calculate_float_08000ad8(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = var4;\n  var4 = parameters[0xe];\n  tempVar1 = calculate_float_value_08000cec(var5,parameters[0xf]);\n  tempVar1 = calculate_float_08000adc(tempVar1,var4);\n  tempVar2 = calculate_float_value_08000cec(var3,parameters[0x10]);\n  var4 = calculate_float_08000ad8(tempVar1,tempVar2);\n  parameters[0x12] = var4;\n  tempVar1 = calculate_checksum_08000c44(parameters[0x13]);\n  var4 = check_if_concatenation_empty_08001028(parameters[0x12],0xc3fa0000);\n  if (var4 == 0) {\n    var4 = is_concatenation_empty_08001064(parameters[0x12],0x43fa0000);\n    if (var4 == 0) {\n      var4 = parameters[0x12];\n    }\n    else {\n      var4 = 0x43fa0000;\n    }\n  }\n  else {\n    var4 = -0x3c060000;\n  }\n  var4 = calculate_float_value_08000cec(var4,tempVar1);\n  parameters[0x12] = var4;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_checksum_0800483c",
                "param_1": "parameters",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "var3",
                "iVar4": "var4",
                "iVar5": "var5"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_data_values_08004a30",
            "code": "\nvoid updateDataValues_08004a30(void)\n\n{\n  undefined4 dataValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      dataValue = getDataValue();\n      DAT_20000068 = calculateFloatValue(dataValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      dataValue = getDataValue();\n      DAT_2000007c = calculateFloatValue(dataValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_data_values_08004a30",
                "uVar1": "dataValue",
                "get_data_value_08003068": "getDataValue",
                "calculate_float_value_08000cec": "calculateFloatValue"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_and_update_values_08004a84",
            "code": "\nvoid initialize_and_update_values_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculateResult1();\n  DAT_20000134 = calculateResult2();\n  DAT_20000190 = calculateFloatOrDefault();\n  updateDataValues();\n  iVar1 = isConcatenationEmpty(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = checkIfConcatenationEmpty(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = isConcatenationEmpty(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = isConcatenationEmpty(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = checkIfConcatenationEmpty(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = isConcatenationEmpty(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      updateParamValues(1,1);\n      calculateChecksum(&DAT_200000a8);\n      calculateChecksum(&DAT_20000104);\n      calculateChecksum(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculateChecksum(&DAT_2000004c);\n        calculateFloat(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initializeData();\n      }\n      else {\n        calculateAndStoreValues(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculateFloatValue(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = checkParam();\n      calculateFloatValue(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = checkParam();\n      calculateFloatValue(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = checkParam();\n      calculateFloatValue(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = checkParam();\n      calculateFloatValue(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = checkParam();\n      calculateFloatValue(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = checkParam();\n      calculateFloatValue(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = checkParam();\n      calculateFloatValue(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = checkParam();\n      calculateFloatValue(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = checkParam();\n      calculateFloatValue(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = checkParam();\n      calculateFloatValue(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = checkParam();\n      return;\n    }\n  }\n  initializeData();\n  updateParamValues(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_and_update_values_08004a84",
                "calculate_result_08002ec0": "calculateResult1",
                "calculate_result_08002ed4": "calculateResult2",
                "calculate_float_or_default_08002ee8": "calculateFloatOrDefault",
                "update_data_values_08004a30": "updateDataValues",
                "is_concatenation_empty_08001064": "isConcatenationEmpty",
                "check_if_concatenation_empty_08001028": "checkIfConcatenationEmpty",
                "update_param_values_08003f3c": "updateParamValues",
                "calculate_checksum_0800483c": "calculateChecksum",
                "calculate_float_08000adc": "calculateFloat",
                "initialize_data_080041c4": "initializeData",
                "calculate_and_store_values_0800426c": "calculateAndStoreValues",
                "calculate_float_value_08000cec": "calculateFloatValue",
                "check_param_080010c4": "checkParam"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 process_data_08004c18(undefined input_data)\n\n{\n  int *ptr_iVar1;\n  int var2;\n  int var3;\n  ushort *ptr_puVar4;\n  \n  DAT_20001636._0_1_ = input_data;\n  ptr_puVar4 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      var2 = get_data_value_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        var3 = get_data_value_0800115c();\n      } while ((uint)(var3 - var2) < 6);\nLAB_0800281c:\n      ptr_iVar1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr_iVar1[3] = ptr_iVar1[3] & 0xffffffdf;\n      ptr_iVar1[3] = ptr_iVar1[3] & 0xfffffeff;\n      ptr_iVar1[5] = ptr_iVar1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      var2 = get_data_value_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var3 = get_data_value_0800115c();\n        if (5 < (uint)(var3 - var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr_puVar4 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr_puVar4 = ptr_puVar4 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      var2 = get_data_value_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var3 = get_data_value_0800115c();\n        if (5 < (uint)(var3 - var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr_puVar4;\n    }\n    ptr_puVar4 = (ushort *)((int)ptr_puVar4 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input_data",
                "piVar1": "ptr_iVar1",
                "iVar2": "var2",
                "iVar3": "var3",
                "puVar4": "ptr_puVar4"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "process_binary_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * processBinary_08004c30(int *input)\n\n{\n  int iVar1;\n  \n  if (*input != 0x40013800) {\n    return input;\n  }\n  increment_counter_and_store_value_08003ec8(&DAT_20000364,DAT_20001634);\n  iVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(iVar1 + 0x14) = *(uint *)(iVar1 + 0x14) | 1;\n    *(uint *)(iVar1 + 0xc) = *(uint *)(iVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "process_binary_08004c30",
                "param_1": "input"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_set_flags_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_set_flags_08004c70(void)\n\n{\n  int data_ptr;\n  \n  initialize_data_08004c64();\n  data_ptr = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(data_ptr + 0x14) = *(uint *)(data_ptr + 0x14) | 1;\n    *(uint *)(data_ptr + 0xc) = *(uint *)(data_ptr + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_set_flags_08004c70",
                "iVar1": "data_ptr"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_terminated_strings_08004c8c",
            "code": "\nvoid process_terminated_strings_08004c8c(undefined *input_array)\n\n{\n  uint string_len;\n  undefined *current_ptr;\n  \n  current_ptr = input_array;\n  while( true ) {\n    string_len = get_terminated_string_length_08000150(input_array);\n    if (string_len <= (uint)((int)current_ptr - (int)input_array)) break;\n    process_data_08004c18(*current_ptr);\n    current_ptr = current_ptr + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_terminated_strings_08004c8c",
                "param_1": "input_array",
                "uVar1": "string_len",
                "puVar2": "current_ptr"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_and_process_strings_08004cac",
            "code": "\nvoid initialize_and_process_strings_08004cac(undefined4 param)\n\n{\n  initialize_data_structure(&DAT_20001636,&DAT_0800735e,param);\n  process_terminated_strings(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_and_process_strings_08004cac",
                "param_1": "param",
                "initialize_data_structure_08004ffc": "initialize_data_structure",
                "process_terminated_strings_08004c8c": "process_terminated_strings"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_memory_protection_08004ccc",
            "code": "\n\n\nvoid initializeMemoryProtection_08004ccc(undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configureMemoryProtection(3,paramB,_DAT_40021018,1,paramA,1,paramC);\n  setMemoryValue(0xfffffff4,0);\n  setMemoryValue(0xfffffff5,0);\n  setMemoryValue(0xfffffff6,0);\n  setMemoryValue(0xfffffffb,0);\n  setMemoryValue(0xfffffffc,0);\n  setMemoryValue(0xfffffffe,0);\n  setMemoryValue(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_memory_protection_08004ccc",
                "param_1": "paramA",
                "param_2": "paramB",
                "param_3": "paramC",
                "configure_memory_protection_08001170": "configureMemoryProtection",
                "set_memory_value_08001194": "setMemoryValue"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_registers_if_needed_08004d48",
            "code": "\n\n\nvoid updateRegistersIfNeeded_08004d48(int *registers,undefined4 flag)\n\n{\n  undefined4 registerValue;\n  undefined4 registerIndex;\n  \n  if (*registers == 0x40005400) {\n    registerValue = 0xc0;\n    registerIndex = 0x12;\n    update_registers_08001264(0x40010c00,&registerValue,0x40005400,3,registers,flag);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_registers_if_needed_08004d48",
                "param_1": "registers",
                "param_2": "flag",
                "local_18": "registerValue",
                "local_14": "registerIndex"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_flags_based_on_value_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlagsBasedOnValue_08004d8c(int *value)\n\n{\n  int flagValue;\n  \n  flagValue = *value;\n  if (flagValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (flagValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (flagValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (flagValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_flags_based_on_value_08004d8c",
                "param_1": "value",
                "iVar1": "flagValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_registers_08004e14",
            "code": "\nvoid update_registers_08004e14(int *input_ptr,undefined4 param_2,undefined4 param_3)\n\n{\n  undefined4 constant1;\n  int input_value;\n  undefined4 new_value1;\n  undefined4 new_value2;\n  undefined4 new_value3;\n  undefined4 constant2;\n  \n  input_value = *input_ptr;\n  if (input_value == 0x40012c00) {\n    new_value1 = 0x800;\n  }\n  else {\n    if (input_value != 0x40000000) {\n      if (input_value == 0x40000400) {\n        new_value1 = 3;\n      }\n      else {\n        if (input_value != 0x40000800) {\n          return;\n        }\n        new_value1 = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    new_value1 = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  constant2 = 2;\n  new_value2 = 2;\n  new_value3 = param_3;\n  update_registers_08004e14_08001264(constant1,&new_value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_registers_08004e14",
                "param_1": "input_ptr",
                "uVar1": "constant1",
                "iVar2": "input_value",
                "local_18": "new_value1",
                "local_14": "new_value2",
                "uStack_10": "new_value3",
                "local_c": "constant2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_memory_08004e7c",
            "code": "\n\n\nvoid initializeMemory_08004e7c(int *memoryBlock)\n\n{\n  undefined4 size;\n  undefined4 value;\n  undefined4 unused;\n  undefined4 unused;\n  \n  if (*memoryBlock == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    size = 0x200;\n    value = 2;\n    unused = 3;\n    update_registers_08001264(0x40010800,&size);\n    size = 0x400;\n    value = 0;\n    unused = 0;\n    update_registers_08001264(0x40010800,&size);\n    set_memory_value_08001194(0x25,0,0);\n    set_bit_at_index_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_memory_08004e7c",
                "param_1": "memoryBlock",
                "local_18": "size",
                "local_14": "value",
                "local_10": "unused",
                "local_c": "unused"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_hardware_08004f10",
            "code": "\n\n\nvoid initializeHardware_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_hardware_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_thunk_0800115c",
            "code": "\nundefined4 get_data_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_hardware_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  run_game_loop_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(functionPointerArray *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(functionPointerArray *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index",
                "code": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_data_structure_08004ffc",
            "code": "\nvoid initializeDataStructure_08004ffc(undefined *data,undefined4 size,undefined4 limit_1,undefined4 limit_2)\n\n{\n  undefined *dataArray [2];\n  undefined4 maxSize;\n  undefined2 constant_1;\n  undefined2 constant_2;\n  undefined *currentData;\n  undefined4 maxLimit;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  constant_1 = 0x208;\n  maxSize = 0x7fffffff;\n  maxLimit = 0x7fffffff;\n  constant_2 = 0xffff;\n  dataArray[0] = data;\n  currentData = data;\n  param_2_copy = size;\n  param_3_copy = limit_1;\n  param_4_copy = limit_2;\n  process_binary_data_080050fc(DAT_200001c0,dataArray,size);\n  *dataArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_data_structure_08004ffc",
                "param_1": "data",
                "param_2": "size",
                "param_3": "limit_1",
                "param_4": "limit_2",
                "local_78": "dataArray",
                "local_70": "maxSize",
                "local_6c": "constant_1",
                "local_6a": "constant_2",
                "local_68": "currentData",
                "local_64": "maxLimit",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "copy_and_shift_memory_08005044",
            "code": "\nundefined4 copyAndShiftMemory_08005044(undefined4 *destinationArray,int *sourceArray,undefined4 inputData,uint inputSize)\n\n{\n  int allocationResult;\n  uint newSize;\n  uint availableSize;\n  int offset;\n  \n  availableSize = sourceArray[2];\n  if ((availableSize <= inputSize) && ((*(ushort *)(sourceArray + 3) & 0x480) != 0)) {\n    offset = *sourceArray - sourceArray[4];\n    availableSize = (uint)(sourceArray[5] * 3) / 2;\n    newSize = inputSize + 1 + offset;\n    if (availableSize < newSize) {\n      availableSize = newSize;\n    }\n    if ((int)((uint)*(ushort *)(sourceArray + 3) << 0x15) < 0) {\n      allocationResult = allocateMemory(destinationArray,availableSize);\n      if (allocationResult == 0) {\nLAB_0800508a:\n        *destinationArray = 0xc;\n        *(ushort *)(sourceArray + 3) = *(ushort *)(sourceArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copyArray(allocationResult,sourceArray[4],offset);\n      *(ushort *)(sourceArray + 3) = *(ushort *)(sourceArray + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      allocationResult = allocateAndCopyArray(destinationArray,sourceArray[4],availableSize);\n      if (allocationResult == 0) {\n        reverseAndUpdateData(destinationArray,sourceArray[4]);\n        goto LAB_0800508a;\n      }\n    }\n    sourceArray[4] = allocationResult;\n    *sourceArray = allocationResult + offset;\n    sourceArray[5] = availableSize;\n    sourceArray[2] = availableSize - offset;\n    availableSize = inputSize;\n  }\n  if (inputSize <= availableSize) {\n    availableSize = inputSize;\n  }\n  copyAndShiftMemory_08005044Helper(*sourceArray,inputData,availableSize);\n  sourceArray[2] = sourceArray[2] - availableSize;\n  *sourceArray = availableSize + *sourceArray;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "copy_and_shift_memory_08005044",
                "param_1": "destinationArray",
                "param_2": "sourceArray",
                "param_3": "inputData",
                "param_4": "inputSize",
                "iVar1": "allocationResult",
                "uVar2": "newSize",
                "uVar3": "availableSize",
                "iVar4": "offset",
                "allocate_memory_08005714": "allocateMemory",
                "copy_array_08005630": "copyArray",
                "allocate_and_copy_array_080057d0": "allocateAndCopyArray",
                "reverse_and_update_data_0800567c": "reverseAndUpdateData",
                "copy_and_shift_memory_08005646": "copyAndShiftMemoryHelper"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_binary_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processBinaryData_080050fc(undefined4 *outputArray,int *inputArray,byte *byteArray,int *memoryArray)\n\n{\n  int result;\n  int copyResult;\n  int *dynamicMemory;\n  bool isNumber;\n  byte *bytePointer;\n  byte *currentByte;\n  int additionalData;\n  int *memoryPointer;\n  uint flags;\n  int secondaryValue;\n  undefined4 tempValue;\n  int value;\n  int total;\n  byte character;\n  undefined constant1;\n  undefined constant2;\n  undefined localCharacter;\n  undefined4 constant3;\n  \n  memoryPointer = memoryArray;\n  if (((int)((uint)*(ushort *)(inputArray + 3) << 0x18) < 0) && (inputArray[4] == 0)) {\n    result = allocate_memory_08005714(outputArray,0x40);\n    *inputArray = result;\n    inputArray[4] = result;\n    if (result == 0) {\n      *outputArray = 0xc;\n      return -1;\n    }\n    inputArray[5] = 0x40;\n  }\n  total = 0;\n  constant1 = 0x20;\n  constant2 = 0x30;\n  bytePointer = byteArray;\nLAB_08005146:\n  currentByte = bytePointer;\n  if (*currentByte != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  bytePointer = currentByte + 1;\n  if (*currentByte != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)currentByte - (int)byteArray;\n  if (result != 0) {\n    copyResult = copy_and_shift_memory_08005044(outputArray,inputArray,byteArray,result);\n    if (copyResult == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(inputArray + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total;\n    }\n    total = total + result;\n  }\n  if (*currentByte == 0) goto LAB_080052ac;\n  flags = 0;\n  value = 0;\n  secondaryValue = -1;\n  tempValue = 0;\n  localCharacter = 0;\n  constant3 = 0;\n  bytePointer = currentByte + 1;\n  while( true ) {\n    result = find_character_08005614(&DAT_08007379,*bytePointer);\n    byteArray = bytePointer + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    bytePointer = byteArray;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    localCharacter = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    localCharacter = 0x2b;\n  }\n  if (*bytePointer == 0x2a) {\n    dynamicMemory = memoryPointer + 1;\n    result = *memoryPointer;\n    memoryPointer = dynamicMemory;\n    if (result < 0) {\n      value = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    isNumber = false;\n    result = value;\n    byteArray = bytePointer;\n    while( true ) {\n      if (9 < *byteArray - 0x30) break;\n      result = result * 10 + (*byteArray - 0x30);\n      isNumber = true;\n      byteArray = byteArray + 1;\n    }\n    if (!isNumber) goto LAB_080051fc;\n  }\n  value = result;\nLAB_080051fc:\n  if (*byteArray == 0x2e) {\n    if (byteArray[1] == 0x2a) {\n      byteArray = byteArray + 2;\n      dynamicMemory = memoryPointer + 1;\n      secondaryValue = *memoryPointer;\n      memoryPointer = dynamicMemory;\n      if (secondaryValue < 0) {\n        secondaryValue = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      result = 0;\n      secondaryValue = 0;\n      while( true ) {\n        byteArray = byteArray + 1;\n        if (9 < *byteArray - 0x30) break;\n        result = result * 10 + (*byteArray - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        secondaryValue = result;\n      }\n    }\n  }\n  result = find_character_08005614(&DAT_0800737f,*byteArray,3);\n  if (result != 0) {\n    byteArray = byteArray + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  character = *byteArray;\n  byteArray = byteArray + 1;\n  result = find_character_08005614(\"efgEFG\",character,6);\n  if (result == 0) {\n    additionalData = process_and_convert_data_080053d4(outputArray,&flags,inputArray,0x8005045,&memoryPointer);\n    if (additionalData == -1) goto LAB_080052ac;\n  }\n  else {\n    memoryPointer = (int *)(((int)memoryPointer + 7U & 0xfffffff8) + 8);\n  }\n  total = total + additionalData;\n  bytePointer = byteArray;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_binary_data_080050fc",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "byteArray",
                "param_4": "memoryArray",
                "iVar1": "result",
                "iVar2": "copyResult",
                "piVar3": "dynamicMemory",
                "bVar4": "isNumber",
                "pbVar5": "bytePointer",
                "pbVar6": "currentByte",
                "unaff_r9": "additionalData",
                "local_8c": "memoryPointer",
                "local_88": "flags",
                "local_84": "secondaryValue",
                "local_80": "tempValue",
                "local_7c": "value",
                "local_74": "total",
                "local_70": "character",
                "local_6f": "constant1",
                "local_6e": "constant2",
                "local_45": "localCharacter",
                "local_30": "constant3"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input_value,uint *data_array,uint *output_length,undefined4 extra_param,code *callback_function)\n\n{\n  int loop_counter1;\n  int loop_counter2;\n  uint max_output_length;\n  uint temp_value;\n  bool check_flag;\n  \n  max_output_length = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_output_length = data_array[2];\n  }\n  *output_length = max_output_length;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_length = max_output_length + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_length = *output_length + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (loop_counter1 = 0; loop_counter1 < (int)(data_array[3] - *output_length); loop_counter1 = loop_counter1 + 1) {\n      loop_counter2 = (*callback_function)(input_value,extra_param,(int)data_array + 0x19,1);\n      if (loop_counter2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_output_length = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_output_length != 0) {\n    max_output_length = 1;\n  }\n  temp_value = max_output_length;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_output_length + 0x43) = 0x30;\n    temp_value = max_output_length + 2;\n    *(undefined *)((int)data_array + max_output_length + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  loop_counter1 = (*callback_function)(input_value,extra_param,(int)data_array + 0x43,temp_value);\n  if (loop_counter1 != -1) {\n    max_output_length = data_array[3];\n    check_flag = (*data_array & 6) != 4;\n    if (check_flag) {\n      max_output_length = 0;\n    }\n    temp_value = 0;\n    if (!check_flag) {\n      max_output_length = max_output_length - *output_length;\n    }\n    if (!check_flag) {\n      max_output_length = max_output_length & ~((int)max_output_length >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_output_length = max_output_length + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (max_output_length == temp_value) {\n        return 0;\n      }\n      loop_counter1 = (*callback_function)(input_value,extra_param,(int)data_array + 0x1a,1);\n      if (loop_counter1 == -1) break;\n      temp_value = temp_value + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "output_length",
                "param_4": "extra_param",
                "param_5": "callback_function",
                "iVar1": "loop_counter1",
                "iVar2": "loop_counter2",
                "uVar3": "max_output_length",
                "uVar4": "temp_value",
                "bVar5": "check_flag"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_and_convert_data_080053d4",
            "code": "\nuint process_and_convert_data_080053d4(undefined4 input_param,uint *data_array,undefined4 size_param,code *conversion_function,uint **count_param)\n\n{\n  byte first_byte;\n  int index_var;\n  uint *array_pointer;\n  int loop_var;\n  char *hex_digits;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint size_value;\n  char *current_byte;\n  char *output_string;\n  uint output_size [2];\n  \n  first_byte = *(byte *)(data_array + 6);\n  output_string = (char *)((int)data_array + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_0800558e;\n          if (first_byte != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data_array + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *data_array;\n          array_pointer = *count_param;\n          *count_param = array_pointer + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)array_pointer;\n          }\n          else {\n            value = *array_pointer;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data_array = base | 0x20;\n          }\n          if (value == 0) {\n            *data_array = *data_array & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data_array + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_08005404;\n          value = *data_array;\n          array_pointer = *count_param;\n          if ((value & 0x80) == 0) {\n            *count_param = array_pointer + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)array_pointer;\n          }\n          else {\n            *count_param = array_pointer + 1;\nLAB_08005424:\n            value = *array_pointer;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data_array + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        size_value = data_array[1];\n        data_array[2] = size_value;\n        current_byte = output_string;\n        if ((int)size_value < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data_array + 0x42) = *hex_digits;\n          current_byte = (char *)((int)data_array + 0x42);\n        }\n        else {\n          *data_array = *data_array & 0xfffffffb;\n          if (value == 0) {\n            if (size_value != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              size_value = value / base;\n              current_byte = current_byte + -1;\n              *current_byte = hex_digits[value - base * size_value];\n              value = size_value;\n            } while (size_value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data_array << 0x1f) < 0)) && ((int)data_array[1] <= (int)data_array[4]))\n        {\n          current_byte[-1] = '0';\n          current_byte = current_byte + -1;\n        }\n        data_array[4] = (int)output_string - (int)current_byte;\n        output_string = current_byte;\n        goto LAB_080054fa;\n      }\n      array_pointer = *count_param;\n      *count_param = array_pointer + 1;\n      *(char *)((int)data_array + 0x42) = (char)*array_pointer;\nLAB_08005464:\n      output_string = (char *)((int)data_array + 0x42);\n      value = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_0800548a:\n            value = *data_array;\n            array_pointer = *count_param;\n            if ((value & 0x80) == 0) {\n              *count_param = array_pointer + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)array_pointer;\n            }\n            else {\n              *count_param = array_pointer + 1;\nLAB_08005498:\n              value = *array_pointer;\n            }\n            if (first_byte == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (first_byte == 0x70) {\n            *data_array = *data_array | 0x20;\nLAB_0800544a:\n            hex_digits = \"0123456789abcdef\";\n            *(undefined *)((int)data_array + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_0800548a;\n          if (first_byte == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data_array + 0x42) = first_byte;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*count_param;\n      *count_param = (uint *)(ppcVar8 + 1);\n      output_string = *ppcVar8;\n      index_var = find_character_08005614(output_string,0,data_array[1]);\n      if (index_var != 0) {\n        data_array[1] = index_var - (int)output_string;\n      }\n      value = data_array[1];\n    }\n    data_array[4] = value;\n    *(undefined *)((int)data_array + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *data_array;\n  ppuVar7 = (uint **)*count_param;\n  base = data_array[5];\n  if ((value & 0x80) == 0) {\n    *count_param = (uint *)(ppuVar7 + 1);\n    array_pointer = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)array_pointer = (short)base;\n  }\n  else {\n    *count_param = (uint *)(ppuVar7 + 1);\n    array_pointer = *ppuVar7;\nLAB_0800557a:\n    *array_pointer = base;\n  }\nLAB_0800558e:\n  data_array[4] = 0;\nLAB_080054fa:\n  index_var = process_data_080052e4(input_param,data_array,output_size,size_param,conversion_function);\n  if ((index_var == -1) || (index_var = (*conversion_function)(input_param,size_param,output_string,data_array[4]), index_var == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_array << 0x1e) < 0) {\n      for (index_var = 0; index_var < (int)(data_array[3] - output_size[0]); index_var = index_var + 1) {\n        loop_var = (*conversion_function)(input_param,size_param,(int)data_array + 0x19,1);\n        if (loop_var == -1) goto LAB_0800550e;\n      }\n    }\n    value = data_array[3];\n    if ((int)data_array[3] < (int)output_size[0]) {\n      value = output_size[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_and_convert_data_080053d4",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "size_param",
                "param_4": "conversion_function",
                "param_5": "count_param",
                "bVar1": "first_byte",
                "iVar2": "index_var",
                "puVar3": "array_pointer",
                "iVar4": "loop_var",
                "pcVar5": "hex_digits",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "size_value",
                "pcVar11": "current_byte",
                "pcVar12": "output_string",
                "local_24": "output_size"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *current;\n  char *next;\n  \n  current = string;\n  do {\n    next = current;\n    if (next == string + length) {\n      return (char *)0x0;\n    }\n    current = next + 1;\n  } while (*next != character);\n  return next;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current",
                "pcVar2": "next"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_array_08005630",
            "code": "\nvoid copyArray_08005630(int sourceStartIndex,undefined *sourceArray,int arrayLength)\n\n{\n  undefined *destinationEndIndex;\n  undefined *destinationArray;\n  \n  destinationArray = (undefined *)(sourceStartIndex + -1);\n  destinationEndIndex = sourceArray + arrayLength;\n  for (; sourceArray != destinationEndIndex; sourceArray = sourceArray + 1) {\n    destinationArray = destinationArray + 1;\n    *destinationArray = *sourceArray;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_array_08005630",
                "param_1": "sourceStartIndex",
                "param_2": "sourceArray",
                "param_3": "arrayLength",
                "puVar1": "destinationEndIndex",
                "puVar2": "destinationArray"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_shift_memory_08005646",
            "code": "\nvoid copyAndShiftMemory_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = source + length;\n  if ((source < destination) && (destination < endPtr)) {\n    destination = destination + length;\n    length = length - (int)endPtr;\n    while (endPtr + length != (undefined *)0x0) {\n      endPtr = endPtr + -1;\n      destination = destination + -1;\n      *destination = *endPtr;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != endPtr; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_shift_memory_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "reverse_and_update_data_0800567c",
            "code": "\nvoid reverse_and_update_data_0800567c(undefined4 *result,int length,undefined4 param_3,undefined4 param_4)\n\n{\n  int **temp1;\n  int **temp2;\n  int **temp3;\n  int *temp4;\n  int **temp5;\n  int **temp6;\n  \n  if (length == 0) {\n    return;\n  }\n  temp6 = (int **)(length + -4);\n  if (*(int *)(length + -4) < 0) {\n    temp6 = (int **)((int)temp6 + *(int *)(length + -4));\n  }\n  FUNC_0800583c();\n  temp3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    temp6[1] = (int *)0x0;\n    temp2 = temp1;\n    DAT_200002ac = temp6;\n  }\n  else {\n    temp3 = DAT_200002ac;\n    if (temp6 < DAT_200002ac) {\n      temp2 = (int **)*temp6;\n      temp3 = (int **)((int)temp6 + (int)temp2);\n      if (DAT_200002ac == temp3) {\n        temp4 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp3 = (int **)((int)temp4 + (int)temp2);\n        *temp6 = (int *)temp3;\n      }\n      temp6[1] = (int *)DAT_200002ac;\n      DAT_200002ac = temp6;\n    }\n    else {\n      do {\n        temp5 = temp3;\n        temp3 = (int **)temp5[1];\n        if (temp3 == (int **)0x0) break;\n      } while (temp3 <= temp6);\n      temp2 = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)temp2) == temp6) {\n        temp2 = (int **)((int)temp2 + (int)*temp6);\n        *temp5 = (int *)temp2;\n        if (temp3 == (int **)((int)temp5 + (int)temp2)) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp2 + (int)temp4);\n          *temp5 = (int *)temp2;\n          temp5[1] = (int *)temp3;\n        }\n      }\n      else if (temp6 < (int **)((int)temp5 + (int)temp2)) {\n        *result = 0xc;\n      }\n      else {\n        temp2 = (int **)((int)temp6 + (int)*temp6);\n        if (temp3 == temp2) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp4 + (int)*temp6);\n          *temp6 = (int *)temp2;\n        }\n        temp6[1] = (int *)temp3;\n        temp5[1] = (int *)temp6;\n      }\n    }\n  }\n  FUNC_0800583e(result,temp2,temp3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "reverse_and_update_data_0800567c",
                "param_1": "result",
                "param_2": "length",
                "extraout_r1": "temp1",
                "ppiVar1": "temp2",
                "ppiVar2": "temp3",
                "piVar3": "temp4",
                "ppiVar4": "temp5",
                "ppiVar5": "temp6"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *output,uint size)\n\n{\n  uint *current_chunk;\n  int remaining_space;\n  uint *previous_chunk;\n  uint size_difference;\n  uint *new_chunk;\n  uint allocated_memory;\n  \n  allocated_memory = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_memory < 0xc) {\n    allocated_memory = 0xc;\n  }\n  if (((int)allocated_memory < 0) || (allocated_memory < size)) {\n    *output = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_chunk = DAT_200002ac;\n    new_chunk = DAT_200002ac;\n    while (previous_chunk = current_chunk, previous_chunk != (uint *)0x0) {\n      size_difference = *previous_chunk - allocated_memory;\n      if (-1 < (int)size_difference) {\n        if (size_difference < 0xc) {\n          if (new_chunk == previous_chunk) {\n            current_chunk = (uint *)new_chunk[1];\n            DAT_200002ac = current_chunk;\n          }\n          else {\n            current_chunk = (uint *)previous_chunk[1];\n          }\n          if (new_chunk != previous_chunk) {\n            new_chunk[1] = (uint)current_chunk;\n            new_chunk = previous_chunk;\n          }\n        }\n        else {\n          *previous_chunk = size_difference;\n          *(uint *)((int)previous_chunk + size_difference) = allocated_memory;\n          new_chunk = (uint *)((int)previous_chunk + size_difference);\n        }\n        goto LAB_08005778;\n      }\n      new_chunk = previous_chunk;\n      current_chunk = (uint *)previous_chunk[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_pointer_0800581c(output);\n    }\n    current_chunk = (uint *)update_pointer_0800581c(output,allocated_memory);\n    if ((current_chunk != (uint *)0xffffffff) &&\n       ((new_chunk = (uint *)((int)current_chunk + 3U & 0xfffffffc), current_chunk == new_chunk ||\n        (remaining_space = update_pointer_0800581c(output,(int)new_chunk - (int)current_chunk), remaining_space != -1)))) {\n      *new_chunk = allocated_memory;\nLAB_08005778:\n      FUNC_0800583e(output);\n      allocated_memory = (int)new_chunk + 0xbU & 0xfffffff8;\n      remaining_space = allocated_memory - (int)(new_chunk + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_chunk + remaining_space) = -remaining_space;\n        return allocated_memory;\n      }\n      return allocated_memory;\n    }\n    *output = 0xc;\n    FUNC_0800583e(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "output",
                "param_2": "size",
                "puVar1": "current_chunk",
                "iVar2": "remaining_space",
                "puVar3": "previous_chunk",
                "uVar4": "size_difference",
                "puVar5": "new_chunk",
                "uVar6": "allocated_memory"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_copy_array_080057d0",
            "code": "\nint allocateAndCopyArray_080057d0(undefined4 inputData,int length,uint sumThreshold,undefined4 optionalParameter)\n\n{\n  int allocatedMemory;\n  uint sum;\n  \n  if (length != 0) {\n    if (sumThreshold == 0) {\n      reverseAndUpdateData();\n      allocatedMemory = 0;\n    }\n    else {\n      sum = calculateSum();\n      allocatedMemory = length;\n      if ((sum < sumThreshold) && (allocatedMemory = allocateMemory(inputData,sumThreshold), allocatedMemory != 0)) {\n        copyArray(allocatedMemory,length,sumThreshold);\n        reverseAndUpdateData(inputData,length);\n      }\n    }\n    return allocatedMemory;\n  }\n  allocatedMemory = allocateMemory(inputData,sumThreshold,sumThreshold,optionalParameter);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_copy_array_080057d0",
                "param_1": "inputData",
                "param_2": "length",
                "param_3": "sumThreshold",
                "param_4": "optionalParameter",
                "iVar1": "allocatedMemory",
                "uVar2": "sum",
                "reverse_and_update_data_0800567c": "reverseAndUpdateData",
                "calculate_sum_08005840": "calculateSum",
                "allocate_memory_08005714": "allocateMemory",
                "copy_array_08005630": "copyArray"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_pointer_0800581c",
            "code": "\nvoid updatePointer_0800581c(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_2000169c = 0;\n  result = update_data_pointer_080072b8(input);\n  if ((result == -1) && (DAT_2000169c != 0)) {\n    *output = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_pointer_0800581c",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 input,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "input",
                "param_2": "array",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "check_and_get_infinity_08005854",
            "code": "\nundefined8 check_and_get_infinity_08005854(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  int return_code;\n  undefined4 *data_ptr;\n  int *data_ptr_2;\n  undefined8 float_result;\n  undefined8 temp_result;\n  undefined4 flag_1;\n  undefined *ptr_1;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_1_copy_2;\n  undefined4 param_2_copy_2;\n  undefined8 result;\n  int return_value;\n  \n  float_result = calculate_float_08005c70();\n  if (DAT_20000224 == -1) {\n    return float_result;\n  }\n  return_value = check_parameters_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (return_value != 0) {\n    return float_result;\n  }\n  temp_result = FUNC_0800708c(input_param_1,input_param_2);\n  return_code = check_if_null_terminated_080009f0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n  if (return_code == 0) {\n    return float_result;\n  }\n  flag_1 = 1;\n  ptr_1 = &DAT_080073ac;\n  param_1_copy = input_param_1;\n  param_2_copy = input_param_2;\n  param_1_copy_2 = input_param_1;\n  param_2_copy_2 = input_param_2;\n  result = get_positive_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    return_code = initialize_application_0800709e(&flag_1);\n    if (return_code != 0) goto LAB_080058d0;\n  }\n  data_ptr = (undefined4 *)get_data_080072ac();\n  *data_ptr = 0x21;\nLAB_080058d0:\n  if (return_value != 0) {\n    data_ptr_2 = (int *)get_data_080072ac();\n    *data_ptr_2 = return_value;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005854": "check_and_get_infinity_08005854",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "iVar1": "return_code",
                "puVar2": "data_ptr",
                "piVar3": "data_ptr_2",
                "uVar4": "float_result",
                "uVar5": "temp_result",
                "local_48": "flag_1",
                "local_44": "ptr_1",
                "local_40": "param_1_copy",
                "uStack_3c": "param_2_copy",
                "local_38": "param_1_copy_2",
                "uStack_34": "param_2_copy_2",
                "local_30": "result",
                "local_28": "return_value"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_result_thunk_08006070",
            "code": "\nundefined8 calculate_result_thunk_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  undefined8 result1;\n  undefined8 result2;\n  \n  temp5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp5 | (-input3 | input3) >> 0x1f)) ||\n     (temp3 = input2 & 0x7fffffff, 0x7ff00000 < (temp3 | (-input1 | input1) >> 0x1f))) {\n    result1 = calculate_shifted_multiplies_0800016c(input1,input2,input3,input4,input4);\n    return result1;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result1 = calculate_shifted_value_08006d68();\n    return result1;\n  }\n  temp2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp3) == 0) {\n    if (temp2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (temp2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | temp5) != 0) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 0x7ff00000) {\n          if (temp2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (temp2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (temp2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (temp2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (temp2 != 3) {\n          if (temp2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp3 != 0x7ff00000) {\n        temp4 = (int)(temp3 - temp5) >> 0x14;\n        if (temp4 < 0x3d) {\n          if (((int)input4 < 0) && (temp4 + 0x3c < 0 != SCARRY4(temp4,0x3c))) {\n            result1 = 0;\n          }\n          else {\n            calculate_result_thunk_08006070_08000724(input1,input2);\n            FUNC_0800708c();\n            result1 = calculate_shifted_value_08006d68();\n          }\n        }\n        else {\n          result1 = 0x3ff921fb54442d18;\n        }\n        temp4 = (int)((ulonglong)result1 >> 0x20);\n        temp1 = (undefined4)result1;\n        if (temp2 == 1) {\n          return CONCAT44(temp4 + -0x80000000,temp1);\n        }\n        if (temp2 == 2) {\n          result2 = calculate_integer_operations_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          result1 = 0x400921fb54442d18;\n        }\n        else {\n          if (temp2 == 0) {\n            return result1;\n          }\n          result1 = calculate_integer_operations_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          result2 = 0x400921fb54442d18;\n        }\n        result1 = calculate_integer_operations_08000168((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        return result1;\n      }\n    }\n    if ((int)input2 < 0) {\n      result1 = 0xbff921fb54442d18;\n    }\n    else {\n      result1 = 0x3ff921fb54442d18;\n    }\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "result1",
                "uVar7": "result2"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_result_08005900",
            "code": "\nundefined8 calculate_result_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *ptr_result;\n  undefined4 *ptr_data;\n  int sign_bit;\n  undefined4 low_bits;\n  undefined4 high_bits;\n  undefined8 initial_value;\n  undefined8 shifted_value;\n  undefined4 status;\n  undefined *message;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined8 output;\n  int validation_result;\n  \n  initial_value = calculate_float_from_integer_08006228();\n  flag = DAT_20000224;\n  low_bits = (undefined4)((ulonglong)initial_value >> 0x20);\n  high_bits = (undefined4)initial_value;\n  if (DAT_20000224 == -1) {\n    return initial_value;\n  }\n  result = check_parameters_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return initial_value;\n  }\n  result = check_parameters_08000a04(input1,input2,input1,input2);\n  input1_copy = input1;\n  input2_copy = input2;\n  input3_copy = input3;\n  input4_copy = input4;\n  if (result == 0) {\n    result = validate_and_return_result_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = validate_and_return_result_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        status = 1;\n        message = &DAT_080073b1;\n        output = 0;\n        validation_result = 0;\n        if (flag != '\\0') {\n          output = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = calculate_sign_bit_08007092(input3,input4);\n      if (result == 0) {\n        return initial_value;\n      }\n      result = check_null_termination_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return initial_value;\n      }\n      status = 1;\n      message = &DAT_080073b1;\n      validation_result = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      output = 0xfff0000000000000;\n      validation_result = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = calculate_sign_bit_08007092(high_bits,low_bits);\n    if (((result != 0) || (sign_bit = calculate_sign_bit_08007092(input1,input2), sign_bit == 0)) ||\n       (sign_bit = calculate_sign_bit_08007092(input3,input4), sign_bit == 0)) {\n      result = validate_and_return_result_080009a0(high_bits,low_bits,0,0);\n      if (result == 0) {\n        return initial_value;\n      }\n      result = calculate_sign_bit_08007092(input1,input2);\n      if (result == 0) {\n        return initial_value;\n      }\n      result = calculate_sign_bit_08007092(input3,input4);\n      if (result == 0) {\n        return initial_value;\n      }\n      status = 4;\n      message = &DAT_080073b1;\n      validation_result = 0;\n      output._0_4_ = 0;\n      output._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    validation_result = check_parameters_08000a04(high_bits,low_bits);\n    flag = DAT_20000224;\n    if (validation_result != 0) {\n      message = &DAT_080073b1;\n      status = 1;\n      validation_result = result;\n      if (DAT_20000224 != '\\0') {\n        output = calculate_result_08005900_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      message = &DAT_080073b1;\n      status = 1;\n      output = 0;\n      goto LAB_08005978;\n    }\n    message = &DAT_080073b1;\n    status = 3;\n    if (DAT_20000224 == '\\0') {\n      output._0_4_ = 0xe0000000;\n      output._4_4_ = 0x47efffff;\n      result = check_null_termination_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        initial_value = calculate_shifted_value_080004d0(input3,input4,0,0x3fe00000);\n        shifted_value = calculate_shifted_integer_operations_080070b0();\n        result = validate_and_return_result_080009a0((int)initial_value,(int)((ulonglong)initial_value >> 0x20),(int)shifted_value,\n                             (int)((ulonglong)shifted_value >> 0x20));\n        if (result == 0) {\n          output._0_4_ = 0xe0000000;\n          output._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_application_0800709e(&status);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      output._0_4_ = 0;\n      output._4_4_ = 0x7ff00000;\n      result = check_null_termination_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        initial_value = calculate_shifted_value_080004d0(input3,input4,0,0x3fe00000);\n        shifted_value = calculate_shifted_integer_operations_080070b0();\n        result = validate_and_return_result_080009a0((int)initial_value,(int)((ulonglong)initial_value >> 0x20),(int)shifted_value,\n                             (int)((ulonglong)shifted_value >> 0x20));\n        if (result == 0) {\n          output._0_4_ = 0;\n          output._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    ptr_data = (undefined4 *)get_data_080072ac();\n    high_bits = 0x22;\n  }\n  else {\n    result = validate_and_return_result_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return initial_value;\n    }\n    status = 1;\n    message = &DAT_080073b1;\n    output = 0x3ff0000000000000;\n    validation_result = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_application_0800709e(&status);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    ptr_data = (undefined4 *)get_data_080072ac();\n    high_bits = 0x21;\n  }\n  *ptr_data = high_bits;\nLAB_080059d0:\n  if (validation_result != 0) {\n    ptr_result = (int *)get_data_080072ac();\n    *ptr_result = validation_result;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_result_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "ptr_result",
                "puVar4": "ptr_data",
                "iVar5": "sign_bit",
                "uVar6": "low_bits",
                "uVar7": "high_bits",
                "uVar8": "initial_value",
                "uVar9": "shifted_value",
                "local_50": "status",
                "local_4c": "message",
                "local_48": "input1_copy",
                "uStack_44": "input2_copy",
                "local_40": "input3_copy",
                "uStack_3c": "input4_copy",
                "local_38": "output",
                "local_30": "validation_result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "process_data_08005bc8",
            "code": "\nundefined8 processData_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char flag;\n  int result;\n  int *dataPtr;\n  undefined4 *dataPtr4;\n  undefined8 output;\n  undefined4 value1;\n  undefined *stringPtr;\n  undefined4 input1_dup;\n  undefined4 input2_dup;\n  undefined4 input1_dup;\n  undefined4 input2_dup;\n  undefined8 result;\n  int param_check;\n  \n  output = calculate_float_from_integer_08006c0c();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return output;\n  }\n  param_check = check_parameters_08000a04(input1,input2,input1,input2);\n  if (param_check != 0) {\n    return output;\n  }\n  result = check_null_termination_080009b4(input1,input2,0,0);\n  if (result == 0) {\n    return output;\n  }\n  value1 = 1;\n  stringPtr = &DAT_080073b5;\n  input1_dup = input1;\n  input2_dup = input2;\n  input1_dup = input1;\n  input2_dup = input2;\n  if (flag == '\\0') {\n    result = 0;\nLAB_08005c26:\n    result = initialize_application_0800709e(&value1);\n    if (result != 0) goto LAB_08005c2e;\n  }\n  else {\n    result = calculate_result_08000724(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  dataPtr4 = (undefined4 *)get_data_080072ac();\n  *dataPtr4 = 0x21;\nLAB_08005c2e:\n  if (param_check != 0) {\n    dataPtr = (int *)get_data_080072ac();\n    *dataPtr = param_check;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "process_data_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "dataPtr",
                "puVar4": "dataPtr4",
                "uVar5": "output",
                "local_50": "value1",
                "local_4c": "stringPtr",
                "local_48": "input1_dup",
                "uStack_44": "input2_dup",
                "local_40": "input1_dup",
                "uStack_3c": "input2_dup",
                "local_38": "result",
                "local_30": "param_check"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_float_08005c70",
            "code": "\nundefined8 calculate_float_08005c70(uint input_1,uint input_2)\n\n{\n  int is_null_terminated;\n  undefined4 result_1_hi;\n  undefined4 result_1_lo;\n  undefined4 result_2_hi;\n  undefined4 result_2_lo;\n  undefined4 temp_1_hi;\n  undefined4 temp_1_lo;\n  uint temp_2;\n  undefined8 result_hi;\n  undefined8 result_lo;\n  undefined8 temp_3;\n  \n  result_hi = CONCAT44(input_2,input_1);\n  temp_2 = input_2 & 0x7fffffff;\n  if (temp_2 < 0x3ff00000) {\n    if (temp_2 < 0x3fe00000) {\n      if (0x3e3fffff < temp_2) {\n        result_lo = calculate_shifted_value_080004d0(input_1,input_2,input_1,input_2);\n        temp_1_lo = (undefined4)((ulonglong)result_lo >> 0x20);\n        temp_1_hi = (undefined4)result_lo;\n        result_lo = calculate_shifted_value_080004d0(temp_1_hi,temp_1_lo,0xdfdf709,0x3f023de1);\n        result_lo = calculate_shifted_multiplies_0800016c((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0x7501b288,0x3f49efe0);\n        result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,temp_1_lo);\n        result_lo = calculate_integer_operations_08000168((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0xb5688f3b,0x3fa48228);\n        result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,temp_1_lo);\n        result_lo = calculate_shifted_multiplies_0800016c((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0xe884455,0x3fc9c155);\n        result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,temp_1_lo);\n        result_lo = calculate_integer_operations_08000168((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0x3eb6f7d,0x3fd4d612);\n        result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,temp_1_lo);\n        result_lo = calculate_shifted_multiplies_0800016c((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0x55555555,0x3fc55555);\n        result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,temp_1_lo);\n        temp_3 = calculate_shifted_value_080004d0(temp_1_hi,temp_1_lo,0xb12e9282,0x3fb3b8c5);\n        temp_3 = calculate_integer_operations_08000168((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_3 = calculate_shifted_value_080004d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1_hi,temp_1_lo);\n        temp_3 = calculate_shifted_multiplies_0800016c((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_3 = calculate_shifted_value_080004d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1_hi,temp_1_lo);\n        temp_3 = calculate_integer_operations_08000168((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_3 = calculate_shifted_value_080004d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1_hi,temp_1_lo);\n        temp_3 = calculate_shifted_multiplies_0800016c((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0,0x3ff00000);\n        result_lo = calculate_result_08000724((int)result_lo,(int)((ulonglong)result_lo >> 0x20),(int)temp_3,\n                              (int)((ulonglong)temp_3 >> 0x20));\n        result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      result_lo = calculate_shifted_multiplies_0800016c(input_1,input_2,0x8800759c,0x7e37e43c);\n      is_null_terminated = check_if_null_terminated_080009f0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0,0x3ff00000);\n      if (is_null_terminated != 0) {\n        return result_hi;\n      }\n    }\n    result_hi = FUNC_0800708c(input_1,input_2);\n    result_hi = calculate_integer_operations_08000168(0,0x3ff00000,(int)result_hi,(int)((ulonglong)result_hi >> 0x20));\n    result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),0,0x3fe00000);\n    result_1_hi = (undefined4)((ulonglong)result_hi >> 0x20);\n    temp_1_hi = (undefined4)result_hi;\n    result_hi = calculate_shifted_value_080004d0(temp_1_hi,result_1_hi,0xdfdf709,0x3f023de1);\n    result_hi = calculate_shifted_multiplies_0800016c((int)result_hi,(int)((ulonglong)result_hi >> 0x20),0x7501b288,0x3f49efe0);\n    result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),temp_1_hi,result_1_hi);\n    result_hi = calculate_integer_operations_08000168((int)result_hi,(int)((ulonglong)result_hi >> 0x20),0xb5688f3b,0x3fa48228);\n    result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),temp_1_hi,result_1_hi);\n    result_hi = calculate_shifted_multiplies_0800016c((int)result_hi,(int)((ulonglong)result_hi >> 0x20),0xe884455,0x3fc9c155);\n    result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),temp_1_hi,result_1_hi);\n    result_hi = calculate_integer_operations_08000168((int)result_hi,(int)((ulonglong)result_hi >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),temp_1_hi,result_1_hi);\n    result_hi = calculate_shifted_multiplies_0800016c((int)result_hi,(int)((ulonglong)result_hi >> 0x20),0x55555555,0x3fc55555);\n    result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),temp_1_hi,result_1_hi);\n    result_1_lo = (undefined4)((ulonglong)result_hi >> 0x20);\n    result_lo = calculate_shifted_value_080004d0(temp_1_hi,result_1_hi,0xb12e9282,0x3fb3b8c5);\n    result_lo = calculate_integer_operations_08000168((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0x1b8d0159,0x3fe6066c);\n    result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,result_1_hi);\n    result_lo = calculate_shifted_multiplies_0800016c((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0x9c598ac8,0x40002ae5);\n    result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,result_1_hi);\n    result_lo = calculate_integer_operations_08000168((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0x1c8a2d4b,0x40033a27);\n    result_lo = calculate_shifted_value_080004d0((int)result_lo,(int)((ulonglong)result_lo >> 0x20),temp_1_hi,result_1_hi);\n    result_lo = calculate_shifted_multiplies_0800016c((int)result_lo,(int)((ulonglong)result_lo >> 0x20),0,0x3ff00000);\n    result_2_hi = (undefined4)((ulonglong)result_lo >> 0x20);\n    temp_3 = calculate_float_08005c70_from_integer_08006c0c(temp_1_hi,result_1_hi);\n    result_2_lo = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_1_lo = (undefined4)temp_3;\n    if (temp_2 < 0x3fef3333) {\n      result_hi = calculate_result_08000724((int)result_hi,result_1_lo,(int)result_lo,result_2_hi);\n      result_lo = calculate_shifted_multiplies_0800016c(temp_1_lo,result_2_lo,temp_1_lo,result_2_lo);\n      result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),(int)result_lo,\n                           (int)((ulonglong)result_lo >> 0x20));\n      result_lo = calculate_shifted_value_080004d0(0,result_2_lo,0,result_2_lo);\n      result_lo = calculate_integer_operations_08000168(temp_1_hi,result_1_hi,(int)result_lo,(int)((ulonglong)result_lo >> 0x20));\n      temp_3 = calculate_shifted_multiplies_0800016c(temp_1_lo,result_2_lo,0,result_2_lo);\n      result_lo = calculate_result_08000724((int)result_lo,(int)((ulonglong)result_lo >> 0x20),(int)temp_3,\n                            (int)((ulonglong)temp_3 >> 0x20));\n      temp_1_hi = (undefined4)((ulonglong)result_lo >> 0x20);\n      result_lo = calculate_shifted_multiplies_0800016c((int)result_lo,temp_1_hi,(int)result_lo,temp_1_hi);\n      result_lo = calculate_integer_operations_08000168(0x33145c07,0x3c91a626,(int)result_lo,(int)((ulonglong)result_lo >> 0x20));\n      result_hi = calculate_integer_operations_08000168((int)result_hi,(int)((ulonglong)result_hi >> 0x20),(int)result_lo,\n                           (int)((ulonglong)result_lo >> 0x20));\n      result_lo = calculate_shifted_multiplies_0800016c(0,result_2_lo,0,result_2_lo);\n      result_lo = calculate_integer_operations_08000168(0x54442d18,0x3fe921fb,(int)result_lo,(int)((ulonglong)result_lo >> 0x20));\n      result_hi = calculate_integer_operations_08000168((int)result_hi,(int)((ulonglong)result_hi >> 0x20),(int)result_lo,\n                           (int)((ulonglong)result_lo >> 0x20));\n      temp_1_hi = 0x3fe921fb;\n    }\n    else {\n      result_hi = calculate_result_08000724((int)result_hi,result_1_lo,(int)result_lo,result_2_hi);\n      result_hi = calculate_shifted_value_080004d0((int)result_hi,(int)((ulonglong)result_hi >> 0x20),temp_1_lo,result_2_lo);\n      result_hi = calculate_shifted_multiplies_0800016c((int)result_hi,(int)((ulonglong)result_hi >> 0x20),temp_1_lo,result_2_lo);\n      temp_1_hi = (undefined4)((ulonglong)result_hi >> 0x20);\n      result_hi = calculate_shifted_multiplies_0800016c((int)result_hi,temp_1_hi,(int)result_hi,temp_1_hi);\n      result_hi = calculate_integer_operations_08000168((int)result_hi,(int)((ulonglong)result_hi >> 0x20),0x33145c07,0x3c91a626);\n      temp_1_hi = 0x3ff921fb;\n    }\n    result_hi = calculate_integer_operations_08000168(0x54442d18,temp_1_hi,(int)result_hi,(int)((ulonglong)result_hi >> 0x20));\n    if ((int)input_2 < 1) {\n      result_hi = CONCAT44((int)((ulonglong)result_hi >> 0x20) + -0x80000000,(int)result_hi);\n    }\n  }\n  else {\n    if ((temp_2 + 0xc0100000 | input_1) != 0) {\n      result_hi = calculate_integer_operations_08000168(input_1,input_2,input_1,input_2);\n      temp_1_hi = (undefined4)((ulonglong)result_hi >> 0x20);\n      result_hi = calculate_result_08000724((int)result_hi,temp_1_hi,(int)result_hi,temp_1_hi);\n      return result_hi;\n    }\n    result_hi = calculate_shifted_value_080004d0(input_1,input_2,0x54442d18,0x3ff921fb);\n    result_lo = calculate_shifted_value_080004d0(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result_hi = calculate_shifted_multiplies_0800016c((int)result_hi,(int)((ulonglong)result_hi >> 0x20),(int)result_lo,\n                         (int)((ulonglong)result_lo >> 0x20));\n  }\n  return result_hi;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_float_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "is_null_terminated",
                "uVar2": "result_1_hi",
                "uVar3": "result_1_lo",
                "uVar4": "result_2_hi",
                "uVar5": "result_2_lo",
                "uVar6": "temp_1_hi",
                "uVar7": "temp_1_lo",
                "uVar8": "temp_2",
                "uVar9": "result_hi",
                "uVar10": "result_lo",
                "uVar11": "temp_3"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculate_result_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint shiftedValue;\n  uint clampedInput1;\n  int shiftedDifference;\n  uint clampedInput4;\n  undefined8 result2;\n  undefined8 result3;\n  \n  clampedInput4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (clampedInput4 | (-input3 | input3) >> 0x1f)) ||\n     (clampedInput1 = input2 & 0x7fffffff, 0x7ff00000 < (clampedInput1 | (-input1 | input1) >> 0x1f))) {\n    result2 = calculate_shifted_multiplies_0800016c(input1,input2,input3,input4,input4);\n    return result2;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result2 = calculate_shifted_value_08006d68();\n    return result2;\n  }\n  shiftedValue = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | clampedInput1) == 0) {\n    if (shiftedValue == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (shiftedValue != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result2 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | clampedInput4) != 0) {\n      if (clampedInput4 == 0x7ff00000) {\n        if (clampedInput1 == 0x7ff00000) {\n          if (shiftedValue == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (shiftedValue == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (shiftedValue != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (shiftedValue == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (shiftedValue != 3) {\n          if (shiftedValue != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (clampedInput1 != 0x7ff00000) {\n        shiftedDifference = (int)(clampedInput1 - clampedInput4) >> 0x14;\n        if (shiftedDifference < 0x3d) {\n          if (((int)input4 < 0) && (shiftedDifference + 0x3c < 0 != SCARRY4(shiftedDifference,0x3c))) {\n            result2 = 0;\n          }\n          else {\n            calculate_result_08006070_08000724(input1,input2);\n            FUNC_0800708c();\n            result2 = calculate_shifted_value_08006d68();\n          }\n        }\n        else {\n          result2 = 0x3ff921fb54442d18;\n        }\n        shiftedDifference = (int)((ulonglong)result2 >> 0x20);\n        result1 = (undefined4)result2;\n        if (shiftedValue == 1) {\n          return CONCAT44(shiftedDifference + -0x80000000,result1);\n        }\n        if (shiftedValue == 2) {\n          result3 = calculate_integer_operations_08000168(result1,shiftedDifference,0x33145c07,0x3ca1a626);\n          result2 = 0x400921fb54442d18;\n        }\n        else {\n          if (shiftedValue == 0) {\n            return result2;\n          }\n          result2 = calculate_integer_operations_08000168(result1,shiftedDifference,0x33145c07,0x3ca1a626);\n          result3 = 0x400921fb54442d18;\n        }\n        result2 = calculate_integer_operations_08000168((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n        return result2;\n      }\n    }\n    if ((int)input2 < 0) {\n      result2 = 0xbff921fb54442d18;\n    }\n    else {\n      result2 = 0x3ff921fb54442d18;\n    }\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "shiftedValue",
                "uVar3": "clampedInput1",
                "iVar4": "shiftedDifference",
                "uVar5": "clampedInput4",
                "uVar6": "result2",
                "uVar7": "result3"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_float_from_integer_08006228",
            "code": "\nuint calculate_float_from_integer_08006228(uint input_param,uint integer_part,uint fractional_part,uint exponent)\n\n{\n  undefined4 integer_result;\n  uint compare_result;\n  uint extra_result;\n  undefined4 temp_result;\n  undefined4 temp_result_2;\n  undefined4 shifted_result;\n  undefined4 shifted_result_2;\n  uint shifted_result_3;\n  undefined4 shifted_result_4;\n  int integer_val;\n  int iteration;\n  undefined4 fractional_result;\n  uint integer_part_masked;\n  undefined4 temp_result_3;\n  int shift_amount;\n  uint result;\n  undefined4 mask_result;\n  undefined4 mask_result_2;\n  undefined8 float_result;\n  undefined8 combined_result;\n  undefined8 multiply_result;\n  undefined8 multiply_result_2;\n  longlong long_result;\n  ulonglong combined_result_2;\n  undefined8 shifted_result_5;\n  uint zero_val;\n  undefined4 zero_val_2;\n  undefined4 zero_val_3;\n  int shift_val;\n  \n  combined_result = CONCAT44(integer_part,input_param);\n  result = exponent & 0x7fffffff;\n  if ((result | fractional_part) == 0) {\n    return 0;\n  }\n  integer_part_masked = integer_part & 0x7fffffff;\n  if (integer_part_masked < 0x7ff00001) {\n    if (integer_part_masked == 0x7ff00000) {\n      if (input_param == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (fractional_part == 0)) {\n          if (-1 < (int)integer_part) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              zero_val = 0;\n              goto LAB_080062ba;\n            }\n            integer_val = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < integer_val) {\n              compare_result = fractional_part >> (0x34U - integer_val & 0xff);\n              if (fractional_part == compare_result << (0x34U - integer_val & 0xff)) {\n                zero_val = 2 - (compare_result & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (fractional_part == 0) {\n              compare_result = (int)result >> (0x14U - integer_val & 0xff);\n              if (result == compare_result << (0x14U - integer_val & 0xff)) {\n                zero_val = 2 - (compare_result & 1);\n              }\n              else {\n                zero_val = 0;\n              }\n              goto LAB_0800630c;\n            }\n            zero_val = 0;\n          }\n          else {\n            zero_val = 2;\nLAB_080062ba:\n            if (fractional_part == 0) {\n              if (result == 0x7ff00000) {\n                if ((integer_part_masked + 0xc0100000 | input_param) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < integer_part_masked) {\n                  if ((int)exponent < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)exponent) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)exponent) {\n                  return input_param;\n                }\n                float_result = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (exponent == 0x40000000) goto LAB_0800634a;\n              if ((exponent == 0x3fe00000) && (-1 < (int)integer_part)) {\n                result = calculate_float_from_integer_08006228_08006c0c(input_param,integer_part);\n                return result;\n              }\n            }\n          }\n          float_result = FUNC_0800708c(input_param,integer_part);\n          mask_result = (undefined4)((ulonglong)float_result >> 0x20);\n          integer_result = (undefined4)float_result;\n          combined_result_2 = CONCAT44(integer_part,integer_result) & 0x7fffffffffffffff;\n          if ((input_param == 0) && ((integer_part_masked == 0 || ((integer_part & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)exponent < 0) {\n              float_result = calculate_result_08000724(0,0x3ff00000,integer_result,mask_result);\n            }\n            if (-1 < (int)integer_part) {\n              return (uint)float_result;\n            }\n            if ((zero_val | integer_part_masked + 0xc0100000) != 0) {\n              return (uint)float_result;\n            }\n          }\n          else {\n            compare_result = 0xffffffff - ((int)integer_part >> 0x1f);\n            float_result = combined_result;\n            if ((zero_val | compare_result) != 0) {\n              if (result < 0x41e00001) {\n                shift_val = 0;\n                if (integer_part_masked < 0x100000) {\n                  combined_result_2 = calculate_shifted_value_080004d0();\n                  shift_val = -0x35;\n                }\n                result = (uint)(combined_result_2 >> 0x20);\n                integer_result = (undefined4)combined_result_2;\n                shift_val = ((int)result >> 0x14) + -0x3ff + shift_val;\n                result = result & 0xfffff;\n                integer_part_masked = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  integer_val = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    integer_part_masked = integer_part_masked - 0x100000;\n                    shift_val = shift_val + 1;\n                    goto LAB_08006628;\n                  }\n                  integer_val = 1;\n                }\n                iteration = integer_val * 8;\n                fractional_result = (&DAT_080073c0)[integer_val * 2];\n                temp_result_3 = (&DAT_080073c4)[integer_val * 2];\n                combined_result = calculate_integer_operations_08000168(integer_result,integer_part_masked,fractional_result,temp_result_3);\n                mask_result_2 = (undefined4)((ulonglong)combined_result >> 0x20);\n                float_result = calculate_shifted_multiplies_0800016c(integer_result,integer_part_masked,fractional_result,temp_result_3);\n                float_result = calculate_result_08000724(0,0x3ff00000,(int)float_result,(int)((ulonglong)float_result >> 0x20));\n                temp_result = (undefined4)((ulonglong)float_result >> 0x20);\n                multiply_result = calculate_shifted_value_080004d0((int)combined_result,mask_result_2,(int)float_result,temp_result);\n                temp_result_2 = (undefined4)((ulonglong)multiply_result >> 0x20);\n                mask_result = (undefined4)multiply_result;\n                multiply_result = calculate_shifted_value_080004d0(0,temp_result_2);\n                combined_result = calculate_integer_operations_08000168((int)combined_result,mask_result_2,(int)multiply_result,\n                                      (int)((ulonglong)multiply_result >> 0x20));\n                multiply_result = calculate_integer_operations_08000168(0,((int)integer_part_masked >> 1 | 0x20000000U) + 0x80000 + integer_val * 0x40000,\n                                      fractional_result,temp_result_3);\n                multiply_result = calculate_integer_operations_08000168(integer_result,integer_part_masked,(int)multiply_result,(int)((ulonglong)multiply_result >> 0x20));\n                multiply_result = calculate_shifted_value_080004d0((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),0,temp_result_2);\n                combined_result = calculate_integer_operations_08000168((int)combined_result,(int)((ulonglong)combined_result >> 0x20),(int)multiply_result,\n                                      (int)((ulonglong)multiply_result >> 0x20));\n                combined_result = calculate_shifted_value_080004d0((int)combined_result,(int)((ulonglong)combined_result >> 0x20),(int)float_result,temp_result\n                                     );\n                mask_result_2 = (undefined4)((ulonglong)combined_result >> 0x20);\n                float_result = calculate_shifted_value_080004d0(mask_result,temp_result_2);\n                temp_result = (undefined4)((ulonglong)float_result >> 0x20);\n                integer_result = (undefined4)float_result;\n                float_result = calculate_shifted_value_080004d0(integer_result,temp_result,0x4a454eef,0x3fca7e28);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),integer_result,temp_result);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),integer_result,temp_result);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),integer_result,temp_result);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),integer_result,temp_result);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),0x33333303,\n                                      0x3fe33333);\n                multiply_result = calculate_shifted_value_080004d0(integer_result,temp_result,integer_result,temp_result);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)multiply_result,\n                                      (int)((ulonglong)multiply_result >> 0x20));\n                multiply_result = calculate_shifted_multiplies_0800016c(mask_result,temp_result_2,0,temp_result_2);\n                multiply_result = calculate_shifted_value_080004d0((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),(int)combined_result,\n                                      mask_result_2);\n                float_result = calculate_shifted_multiplies_0800016c((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),(int)float_result,\n                                      (int)((ulonglong)float_result >> 0x20));\n                integer_result = (undefined4)((ulonglong)float_result >> 0x20);\n                multiply_result = calculate_shifted_value_080004d0(0,temp_result_2,0,temp_result_2);\n                temp_result = (undefined4)((ulonglong)multiply_result >> 0x20);\n                multiply_result_2 = calculate_shifted_multiplies_0800016c((int)multiply_result,temp_result,0,0x40080000);\n                calculate_shifted_multiplies_0800016c((int)multiply_result_2,(int)((ulonglong)multiply_result_2 >> 0x20),(int)float_result,integer_result);\n                multiply_result_2 = calculate_shifted_value_080004d0(0,temp_result_2,0,shifted_result);\n                fractional_result = (undefined4)((ulonglong)multiply_result_2 >> 0x20);\n                shifted_result_5 = calculate_integer_operations_08000168(0,shifted_result,0,0x40080000);\n                multiply_result = calculate_integer_operations_08000168((int)shifted_result_5,(int)((ulonglong)shifted_result_5 >> 0x20),(int)multiply_result,temp_result\n                                     );\n                float_result = calculate_integer_operations_08000168((int)float_result,integer_result,(int)multiply_result,(int)((ulonglong)multiply_result >> 0x20)\n                                     );\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),mask_result,temp_result_2);\n                combined_result = calculate_shifted_value_080004d0((int)combined_result,mask_result_2,0,shifted_result);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)combined_result,\n                                      (int)((ulonglong)combined_result >> 0x20));\n                integer_result = (undefined4)((ulonglong)float_result >> 0x20);\n                calculate_shifted_multiplies_0800016c((int)multiply_result_2,fractional_result,(int)float_result,integer_result);\n                combined_result = calculate_shifted_value_080004d0(0,shifted_result_2,0xe0000000,0x3feec709);\n                multiply_result = calculate_integer_operations_08000168(0,shifted_result_2,(int)multiply_result_2,fractional_result);\n                float_result = calculate_integer_operations_08000168((int)float_result,integer_result,(int)multiply_result,(int)((ulonglong)multiply_result >> 0x20)\n                                     );\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                multiply_result = calculate_shifted_value_080004d0(0,shifted_result_2,0x145b01f5,0xbe3e2fe0);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)multiply_result,\n                                      (int)((ulonglong)multiply_result >> 0x20));\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + iteration),\n                                      *(undefined4 *)(&DAT_080073e4 + iteration));\n                multiply_result = shift_and_combine_08000404(shift_val);\n                integer_result = (undefined4)((ulonglong)multiply_result >> 0x20);\n                mask_result = *(undefined4 *)(&DAT_080073d0 + iteration);\n                mask_result_2 = *(undefined4 *)(&DAT_080073d4 + iteration);\n                multiply_result_2 = calculate_shifted_multiplies_0800016c((int)combined_result,(int)((ulonglong)combined_result >> 0x20),(int)float_result,\n                                      (int)((ulonglong)float_result >> 0x20));\n                multiply_result_2 = calculate_shifted_multiplies_0800016c((int)multiply_result_2,(int)((ulonglong)multiply_result_2 >> 0x20),mask_result,mask_result_2);\n                calculate_shifted_multiplies_0800016c((int)multiply_result_2,(int)((ulonglong)multiply_result_2 >> 0x20),(int)multiply_result,integer_result);\n                multiply_result = calculate_integer_operations_08000168(0,shifted_result_3,(int)multiply_result,integer_result);\n                long_result = calculate_integer_operations_08000168((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),mask_result,mask_result_2);\n                result = shifted_result_3;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (integer_part_masked < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)exponent < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input_param = 0x8800759c;\n                  integer_part = 0x7e37e43c;\n                  combined_result = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (integer_part_masked < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)exponent) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < integer_part_masked) goto LAB_08006418;\n                combined_result = calculate_integer_operations_08000168(integer_result,mask_result,0,0x3ff00000);\n                mask_result = (undefined4)((ulonglong)combined_result >> 0x20);\n                integer_result = (undefined4)combined_result;\n                combined_result = calculate_shifted_value_080004d0(integer_result,mask_result,0x60000000,0x3ff71547);\n                float_result = calculate_shifted_value_080004d0(integer_result,mask_result,0xf85ddf44,0x3e54ae0b);\n                multiply_result = calculate_shifted_value_080004d0(integer_result,mask_result,0,0x3fd00000);\n                multiply_result = calculate_integer_operations_08000168(0x55555555,0x3fd55555,(int)multiply_result,\n                                      (int)((ulonglong)multiply_result >> 0x20));\n                multiply_result = calculate_shifted_value_080004d0((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),integer_result,mask_result);\n                multiply_result = calculate_integer_operations_08000168(0,0x3fe00000,(int)multiply_result,(int)((ulonglong)multiply_result >> 0x20));\n                multiply_result_2 = calculate_shifted_value_080004d0(integer_result,mask_result,integer_result,mask_result);\n                multiply_result = calculate_shifted_value_080004d0((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),(int)multiply_result_2,\n                                      (int)((ulonglong)multiply_result_2 >> 0x20));\n                multiply_result = calculate_shifted_value_080004d0((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                float_result = calculate_integer_operations_08000168((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)multiply_result,\n                                      (int)((ulonglong)multiply_result >> 0x20));\n                calculate_shifted_multiplies_0800016c((int)combined_result,(int)((ulonglong)combined_result >> 0x20),(int)float_result,\n                             (int)((ulonglong)float_result >> 0x20));\n                long_result = (ulonglong)extra_result << 0x20;\n                result = extra_result;\n              }\n              combined_result = calculate_integer_operations_08000168((int)long_result,(int)((ulonglong)long_result >> 0x20),(int)combined_result,\n                                    (int)((ulonglong)combined_result >> 0x20));\n              combined_result = calculate_integer_operations_08000168((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)combined_result,\n                                    (int)((ulonglong)combined_result >> 0x20));\n              if ((zero_val - 1 | compare_result) == 0) {\n                integer_part = 0xbff00000;\n              }\n              else {\n                integer_part = 0x3ff00000;\n              }\n              zero_val = 0;\n              float_result = calculate_integer_operations_08000168(fractional_part,exponent,0,exponent);\n              float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),0,result);\n              combined_result = calculate_shifted_value_080004d0((int)combined_result,(int)((ulonglong)combined_result >> 0x20),fractional_part,exponent);\n              combined_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)combined_result,\n                                    (int)((ulonglong)combined_result >> 0x20));\n              mask_result_2 = (undefined4)((ulonglong)combined_result >> 0x20);\n              integer_result = (undefined4)combined_result;\n              combined_result = calculate_shifted_value_080004d0(0,result,0,exponent);\n              temp_result = (undefined4)((ulonglong)combined_result >> 0x20);\n              mask_result = (undefined4)combined_result;\n              long_result = calculate_shifted_multiplies_0800016c(integer_result,mask_result_2,mask_result,temp_result);\n              integer_part_masked = (uint)((ulonglong)long_result >> 0x20);\n              result = (uint)long_result;\n              if (0x408fffffffffffff < long_result) {\n                if ((integer_part_masked + 0xbf700000 | result) == 0) {\n                  float_result = calculate_shifted_multiplies_0800016c(integer_result,mask_result_2,0x652b82fe,0x3c971547);\n                  multiply_result = calculate_integer_operations_08000168(result,integer_part_masked,mask_result,temp_result);\n                  integer_val = check_if_null_terminated_080009f0((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)multiply_result,\n                                       (int)((ulonglong)multiply_result >> 0x20));\n                  if (integer_val == 0) goto LAB_08006968;\n                }\n                combined_result = calculate_shifted_value_080004d0(0,integer_part,0x8800759c,0x7e37e43c);\n                input_param = 0x8800759c;\n                integer_part = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((integer_part_masked & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((integer_part_masked & 0x7fffffff) < 0x3fe00001) {\n                  integer_val = 0;\n                }\n                else {\n                  integer_part_masked = (0x100000 >> (((int)(integer_part_masked & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          integer_part_masked;\n                  result = (integer_part_masked * 2 >> 0x15) - 0x3ff;\n                  integer_val = (int)(integer_part_masked & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (long_result < 0) {\n                    integer_val = -integer_val;\n                  }\n                  combined_result = calculate_integer_operations_08000168(mask_result,temp_result,0,integer_part_masked & ~(0xfffff >> (result & 0xff)));\n                }\n                zero_val_3 = (undefined4)((ulonglong)combined_result >> 0x20);\n                zero_val_2 = (undefined4)combined_result;\n                calculate_shifted_multiplies_0800016c(zero_val_2,zero_val_3,integer_result,mask_result_2);\n                combined_result = calculate_shifted_value_080004d0(0,shifted_result_4,0,0x3fe62e43);\n                mask_result = (undefined4)((ulonglong)combined_result >> 0x20);\n                float_result = calculate_integer_operations_08000168(0,shifted_result_4,zero_val_2,zero_val_3);\n                float_result = calculate_integer_operations_08000168(integer_result,mask_result_2,(int)float_result,(int)((ulonglong)float_result >> 0x20));\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                multiply_result = calculate_shifted_value_080004d0(0,shifted_result_4,0xca86c39,0xbe205c61);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)multiply_result,\n                                      (int)((ulonglong)multiply_result >> 0x20));\n                mask_result_2 = (undefined4)((ulonglong)float_result >> 0x20);\n                multiply_result = calculate_shifted_multiplies_0800016c((int)combined_result,mask_result,(int)float_result,mask_result_2);\n                temp_result = (undefined4)((ulonglong)multiply_result >> 0x20);\n                integer_result = (undefined4)multiply_result;\n                combined_result = calculate_integer_operations_08000168(integer_result,temp_result,(int)combined_result,mask_result);\n                combined_result = calculate_integer_operations_08000168((int)float_result,mask_result_2,(int)combined_result,\n                                      (int)((ulonglong)combined_result >> 0x20));\n                mask_result_2 = (undefined4)((ulonglong)combined_result >> 0x20);\n                float_result = calculate_shifted_value_080004d0(integer_result,temp_result,integer_result,temp_result);\n                temp_result_2 = (undefined4)((ulonglong)float_result >> 0x20);\n                mask_result = (undefined4)float_result;\n                float_result = calculate_shifted_value_080004d0(mask_result,temp_result_2,0x72bea4d0,0x3e663769);\n                float_result = calculate_integer_operations_08000168((int)float_result,(int)((ulonglong)float_result >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),mask_result,temp_result_2);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),mask_result,temp_result_2);\n                float_result = calculate_integer_operations_08000168((int)float_result,(int)((ulonglong)float_result >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),mask_result,temp_result_2);\n                float_result = calculate_shifted_multiplies_0800016c((int)float_result,(int)((ulonglong)float_result >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                float_result = calculate_shifted_value_080004d0((int)float_result,(int)((ulonglong)float_result >> 0x20),mask_result,temp_result_2);\n                float_result = calculate_integer_operations_08000168(integer_result,temp_result,(int)float_result,(int)((ulonglong)float_result >> 0x20));\n                mask_result = (undefined4)((ulonglong)float_result >> 0x20);\n                multiply_result = calculate_shifted_value_080004d0(integer_result,temp_result,(int)float_result,mask_result);\n                float_result = calculate_integer_operations_08000168((int)float_result,mask_result,0,0x40000000);\n                float_result = calculate_result_08000724((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),(int)float_result,\n                                      (int)((ulonglong)float_result >> 0x20));\n                multiply_result = calculate_shifted_value_080004d0(integer_result,temp_result,(int)combined_result,mask_result_2);\n                combined_result = calculate_shifted_multiplies_0800016c((int)multiply_result,(int)((ulonglong)multiply_result >> 0x20),(int)combined_result,\n                                      mask_result_2);\n                combined_result = calculate_integer_operations_08000168((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)combined_result,\n                                      (int)((ulonglong)combined_result >> 0x20));\n                combined_result = calculate_integer_operations_08000168((int)combined_result,(int)((ulonglong)combined_result >> 0x20),integer_result,temp_result);\n                float_result = calculate_integer_operations_08000168(0,0x3ff00000,(int)combined_result,(int)((ulonglong)combined_result >> 0x20));\n                iteration = (int)((ulonglong)float_result >> 0x20);\n                shift_amount = iteration + integer_val * 0x100000;\n                combined_result = CONCAT44(shift_amount,(int)float_result);\n                input_param = zero_val;\n                if (shift_amount < 0x100000) {\n                  combined_result = calculate_shifted_value_with_conditions_080071c0((int)float_result,iteration,integer_val);\n                }\n              }\n              else {\n                if ((integer_part_masked + 0x3f6f3400 | result) == 0) {\n                  float_result = calculate_integer_operations_08000168(result,integer_part_masked,mask_result,temp_result);\n                  integer_val = validate_parameters_and_return_result_080009c8(integer_result,mask_result_2,(int)float_result,(int)((ulonglong)float_result >> 0x20));\n                  if (integer_val == 0) goto LAB_08006968;\n                }\n                combined_result = calculate_shifted_value_080004d0(0,integer_part,0xc2f8f359,0x1a56e1f);\n                input_param = 0xc2f8f359;\n                integer_part = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = calculate_shifted_value_080004d0((int)combined_result,(int)((ulonglong)combined_result >> 0x20),input_param,integer_part);\n              return result;\n            }\n          }\n          integer_result = (undefined4)((ulonglong)float_result >> 0x20);\n          float_result = calculate_integer_operations_08000168((int)float_result,integer_result,(int)float_result,integer_result);\n          combined_result = float_result;\nLAB_08006320:\n          result = calculate_result_08000724((int)float_result,(int)((ulonglong)float_result >> 0x20),(int)combined_result,\n                                (int)((ulonglong)combined_result >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((integer_part_masked + 0xc0100000 | input_param) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = get_positive_infinity_080070a4(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_float_from_integer_08006228",
                "param_1": "input_param",
                "param_2": "integer_part",
                "param_3": "fractional_part",
                "param_4": "exponent",
                "uVar1": "integer_result",
                "uVar2": "compare_result",
                "extraout_r1": "extra_result",
                "uVar3": "temp_result",
                "uVar4": "temp_result_2",
                "extraout_r1_00": "shifted_result",
                "extraout_r1_01": "shifted_result_2",
                "extraout_r1_02": "shifted_result_3",
                "extraout_r1_03": "shifted_result_4",
                "iVar5": "integer_val",
                "iVar6": "iteration",
                "uVar7": "fractional_result",
                "uVar8": "integer_part_masked",
                "uVar9": "temp_result_3",
                "iVar10": "shift_amount",
                "uVar11": "result",
                "uVar12": "mask_result",
                "uVar13": "mask_result_2",
                "uVar14": "float_result",
                "uVar15": "combined_result",
                "uVar16": "multiply_result",
                "uVar17": "multiply_result_2",
                "lVar18": "long_result",
                "uVar19": "combined_result_2",
                "uVar20": "shifted_result_5",
                "local_70": "zero_val",
                "local_68": "zero_val_2",
                "local_64": "zero_val_3",
                "local_54": "shift_val"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_from_integer_08006c0c",
            "code": "\nundefined8 calculate_float_from_integer_08006c0c(uint input_integer_1,uint input_integer_2)\n\n{\n  undefined4 shifted_value_1;\n  uint shifted_value_2;\n  int shift_amount;\n  int temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  int result_integer_1;\n  uint result_integer_2;\n  uint temp_var_4;\n  int temp_var_5;\n  uint temp_var_6;\n  undefined8 final_float;\n  \n  if ((~input_integer_2 & 0x7ff00000) == 0) {\n    final_float = calculate_shifted_value_080004d0(input_integer_1,input_integer_2,input_integer_1,input_integer_2);\n    final_float = calculate_shifted_multiplies_0800016c(input_integer_1,input_integer_2,(int)final_float,(int)((ulonglong)final_float >> 0x20));\n    return final_float;\n  }\n  if ((int)input_integer_2 < 1) {\n    if ((input_integer_2 & 0x7fffffff | input_integer_1) == 0) {\n      return CONCAT44(input_integer_2,input_integer_1);\n    }\n    if (input_integer_2 != 0) {\n      final_float = calculate_integer_operations_08000168(input_integer_1,input_integer_2,input_integer_1,input_integer_2);\n      shifted_value_1 = (undefined4)((ulonglong)final_float >> 0x20);\n      final_float = calculate_result_08000724((int)final_float,shifted_value_1,(int)final_float,shifted_value_1);\n      return final_float;\n    }\n  }\n  shift_amount = (int)input_integer_2 >> 0x14;\n  if (shift_amount == 0) {\n    while (input_integer_2 == 0) {\n      shift_amount = shift_amount + -0x15;\n      input_integer_2 = input_integer_1 >> 0xb;\n      input_integer_1 = input_integer_1 << 0x15;\n    }\n    shifted_value_2 = 0;\n    for (; -1 < (int)(input_integer_2 << 0xb); input_integer_2 = input_integer_2 << 1) {\n      shifted_value_2 = shifted_value_2 + 1;\n    }\n    shift_amount = shift_amount - (shifted_value_2 - 1);\n    input_integer_2 = input_integer_2 | input_integer_1 >> (0x20 - shifted_value_2 & 0xff);\n    input_integer_1 = input_integer_1 << (shifted_value_2 & 0xff);\n  }\n  result_integer_1 = 0;\n  shifted_value_2 = input_integer_2 & 0xfffff | 0x100000;\n  if ((shift_amount + -0x3ff) * -0x80000000 < 0) {\n    shifted_value_2 = shifted_value_2 * 2 - ((int)input_integer_1 >> 0x1f);\n    input_integer_1 = input_integer_1 << 1;\n  }\n  shifted_value_2 = shifted_value_2 * 2 - ((int)input_integer_1 >> 0x1f);\n  temp_var_1 = 0x16;\n  temp_var_2 = 0;\n  result_integer_2 = 0x200000;\n  input_integer_1 = input_integer_1 << 1;\n  do {\n    temp_var_5 = temp_var_2 + result_integer_2;\n    if (temp_var_5 <= (int)shifted_value_2) {\n      shifted_value_2 = shifted_value_2 - temp_var_5;\n      temp_var_2 = temp_var_5 + result_integer_2;\n      result_integer_1 = result_integer_1 + result_integer_2;\n    }\n    temp_var_1 = temp_var_1 + -1;\n    shifted_value_2 = shifted_value_2 * 2 - ((int)input_integer_1 >> 0x1f);\n    result_integer_2 = result_integer_2 >> 1;\n    input_integer_1 = input_integer_1 << 1;\n  } while (temp_var_1 != 0);\n  temp_var_5 = 0x20;\n  temp_var_4 = 0x80000000;\n  result_integer_2 = 0;\n  temp_var_1 = 0;\n  do {\n    temp_var_6 = temp_var_4 + temp_var_1;\n    temp_var_3 = temp_var_2;\n    if (((int)temp_var_2 < (int)shifted_value_2) || ((shifted_value_2 == temp_var_2 && (temp_var_6 <= input_integer_1)))) {\n      temp_var_1 = temp_var_6 + temp_var_4;\n      if (((int)temp_var_6 < 0) && (-1 < temp_var_1)) {\n        temp_var_3 = temp_var_2 + 1;\n      }\n      shifted_value_2 = shifted_value_2 - temp_var_2;\n      if (input_integer_1 < temp_var_6) {\n        shifted_value_2 = shifted_value_2 - 1;\n      }\n      input_integer_1 = input_integer_1 - temp_var_6;\n      result_integer_2 = result_integer_2 + temp_var_4;\n    }\n    shifted_value_2 = shifted_value_2 * 2 - ((int)input_integer_1 >> 0x1f);\n    temp_var_5 = temp_var_5 + -1;\n    input_integer_1 = input_integer_1 << 1;\n    temp_var_4 = temp_var_4 >> 1;\n    temp_var_2 = temp_var_3;\n  } while (temp_var_5 != 0);\n  if ((input_integer_1 | shifted_value_2) != 0) {\n    if (result_integer_2 == 0xffffffff) {\n      result_integer_1 = result_integer_1 + 1;\n      result_integer_2 = 0;\n    }\n    else {\n      result_integer_2 = result_integer_2 + 1 & 0xfffffffe;\n    }\n  }\n  result_integer_2 = result_integer_2 >> 1;\n  if (result_integer_1 << 0x1f < 0) {\n    result_integer_2 = result_integer_2 | 0x80000000;\n  }\n  return CONCAT44((result_integer_1 >> 1) + 0x3fe00000 + (shift_amount + -0x3ff >> 1) * 0x100000,result_integer_2);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_from_integer_08006c0c",
                "param_1": "input_integer_1",
                "param_2": "input_integer_2",
                "uVar1": "shifted_value_1",
                "uVar2": "shifted_value_2",
                "iVar3": "shift_amount",
                "iVar4": "temp_var_1",
                "uVar5": "temp_var_2",
                "uVar6": "temp_var_3",
                "iVar7": "result_integer_1",
                "uVar8": "result_integer_2",
                "uVar9": "temp_var_4",
                "iVar10": "temp_var_5",
                "uVar11": "temp_var_6",
                "uVar12": "final_float"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_shifted_value_08006d68",
            "code": "\nundefined8 calculate_shifted_value_08006d68(int input_param1,uint input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint unsigned_param2;\n  undefined8 result_value;\n  undefined8 temp_result;\n  \n  result_value = CONCAT44(input_param2,input_param1);\n  unsigned_param2 = input_param2 & 0x7fffffff;\n  if (unsigned_param2 < 0x44100000) {\n    if (unsigned_param2 < 0x3fdc0000) {\n      if (unsigned_param2 < 0x3e200000) {\n        temp_result = calculate_shifted_multiplies_0800016c(input_param1,input_param2,0x8800759c,0x7e37e43c,input_param4);\n        result = check_if_null_terminated_080009f0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return result_value;\n        }\n      }\n      result = -1;\n    }\n    else {\n      result_value = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)result_value >> 0x20);\n      temp1 = (undefined4)result_value;\n      if (unsigned_param2 < 0x3ff30000) {\n        if (unsigned_param2 < 0x3fe60000) {\n          result_value = calculate_shifted_multiplies_0800016c(temp1,temp2,temp1,temp2);\n          result_value = calculate_integer_operations_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),0,0x3ff00000);\n          temp_result = calculate_shifted_multiplies_0800016c(temp1,temp2,0,0x40000000);\n          result_value = calculate_result_08000724((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 0;\n        }\n        else {\n          result_value = calculate_integer_operations_08000168(temp1,temp2,0,0x3ff00000);\n          temp_result = calculate_shifted_multiplies_0800016c(temp1,temp2,0,0x3ff00000);\n          result_value = calculate_result_08000724((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (unsigned_param2 < 0x40038000) {\n        result_value = calculate_integer_operations_08000168(temp1,temp2,0,0x3ff80000);\n        temp_result = calculate_shifted_value_08006d68_080004d0(temp1,temp2,0,0x3ff80000);\n        temp_result = calculate_shifted_multiplies_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        result_value = calculate_result_08000724((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        result = 2;\n      }\n      else {\n        result_value = calculate_result_08000724(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)result_value >> 0x20);\n    temp5 = (undefined4)result_value;\n    result_value = calculate_shifted_value_08006d68_080004d0(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)result_value >> 0x20);\n    temp1 = (undefined4)result_value;\n    result_value = calculate_shifted_value_08006d68_080004d0(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)result_value >> 0x20);\n    temp2 = (undefined4)result_value;\n    result_value = calculate_shifted_value_08006d68_080004d0(temp2,temp4,0xe322da11,0x3f90ad3a);\n    result_value = calculate_shifted_multiplies_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0x24760deb,0x3fa97b4b);\n    result_value = calculate_shifted_value_08006d68_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp2,temp4);\n    result_value = calculate_shifted_multiplies_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0xa0d03d51,0x3fb10d66);\n    result_value = calculate_shifted_value_08006d68_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp2,temp4);\n    result_value = calculate_shifted_multiplies_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0xc54c206e,0x3fb745cd);\n    result_value = calculate_shifted_value_08006d68_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp2,temp4);\n    result_value = calculate_shifted_multiplies_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0x920083ff,0x3fc24924);\n    result_value = calculate_shifted_value_08006d68_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp2,temp4);\n    result_value = calculate_shifted_multiplies_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0x5555550d,0x3fd55555);\n    result_value = calculate_shifted_value_08006d68_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)result_value >> 0x20);\n    temp_result = calculate_shifted_value_08006d68_080004d0(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    temp_result = calculate_integer_operations_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = calculate_shifted_value_08006d68_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = calculate_integer_operations_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = calculate_shifted_value_08006d68_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = calculate_integer_operations_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = calculate_shifted_value_08006d68_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = calculate_integer_operations_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = calculate_shifted_value_08006d68_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (result == -1) {\n      result_value = calculate_shifted_multiplies_0800016c((int)result_value,temp1,(int)temp_result,temp2);\n      result_value = calculate_shifted_value_08006d68_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp6);\n      result_value = calculate_integer_operations_08000168(temp5,temp6,(int)result_value,(int)((ulonglong)result_value >> 0x20));\n    }\n    else {\n      result_value = calculate_shifted_multiplies_0800016c((int)result_value,temp1,(int)temp_result,temp2);\n      result_value = calculate_shifted_value_08006d68_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp6);\n      result = result * 8;\n      result_value = calculate_integer_operations_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      result_value = calculate_integer_operations_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp6);\n      result_value = calculate_integer_operations_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)result_value,\n                           (int)((ulonglong)result_value >> 0x20));\n      if ((int)input_param2 < 0) {\n        result_value = CONCAT44((int)((ulonglong)result_value >> 0x20) + -0x80000000,(int)result_value);\n      }\n    }\n  }\n  else if ((unsigned_param2 < 0x7ff00001) && ((unsigned_param2 != 0x7ff00000 || (input_param1 == 0)))) {\n    if ((int)input_param2 < 1) {\n      result_value = 0xbff921fb54442d18;\n    }\n    else {\n      result_value = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result_value = calculate_shifted_multiplies_0800016c(input_param1,input_param2,input_param1,input_param2,input_param4);\n  }\n  return result_value;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_shifted_value_08006d68",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "unsigned_param2",
                "uVar9": "result_value",
                "uVar10": "temp_result"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "calculate_sign_bit_08007092",
            "code": "\nuint calculateSignBit_08007092(undefined4 input_value,uint bitwise_value)\n\n{\n  return (bitwise_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "calculate_sign_bit_08007092",
                "param_1": "input_value",
                "param_2": "bitwise_value"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_application_0800709e",
            "code": "\nvoid initializeApplication_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_application_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\nfloat64 getPositiveInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4",
                "undefined8": "float64"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_shifted_integer_operations_080070b0",
            "code": "\nundefined8 calculate_shifted_integer_operations_080070b0(uint input_1,uint input_2,undefined4 input_3)\n\n{\n  int temp_var;\n  undefined4 shifted_multiplier_1;\n  uint shifted_multiplier_2;\n  undefined4 shifted_multiplier_3;\n  uint shifted_multiplier_4;\n  uint shifted_amount_1;\n  uint shifted_amount_2;\n  undefined8 result;\n  \n  shifted_amount_2 = (input_2 << 1) >> 0x15;\n  shifted_amount_1 = shifted_amount_2 - 0x3ff;\n  shifted_multiplier_2 = input_2;\n  if ((int)shifted_amount_1 < 0x14) {\n    if ((int)shifted_amount_1 < 0) {\n      if ((input_2 & 0x7fffffff | input_1) == 0) {\n        return CONCAT44(input_2,input_1);\n      }\n      shifted_multiplier_2 = input_2 & 0xfffff | input_1;\n      temp_var = ((int)input_2 >> 0x1f) * -8;\n      shifted_multiplier_1 = *(undefined4 *)(&DAT_08007430 + temp_var);\n      shifted_multiplier_3 = *(undefined4 *)(&DAT_08007434 + temp_var);\n      result = calculate_shifted_multiplies_0800016c(input_1,(-shifted_multiplier_2 | shifted_multiplier_2) >> 0xc & 0x80000 | input_2 & 0xfffe0000,shifted_multiplier_1,\n                           shifted_multiplier_3,input_1,input_2,input_3);\n      result = calculate_integer_operations_08000168((int)result,(int)((ulonglong)result >> 0x20),shifted_multiplier_1,shifted_multiplier_3);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input_2 & 0x80000000,\n                      (int)result);\n    }\n    shifted_amount_2 = 0xfffff >> (shifted_amount_1 & 0xff);\n    if ((input_2 & shifted_amount_2 | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    shifted_amount_2 = shifted_amount_2 >> 1;\n    shifted_multiplier_4 = input_2 & shifted_amount_2 | input_1;\n    if (shifted_multiplier_4 != 0) {\n      if (shifted_amount_1 == 0x13) {\n        shifted_multiplier_4 = 0x80000000;\n      }\n      else {\n        shifted_multiplier_4 = 0;\n      }\n      shifted_multiplier_2 = 0x40000 >> (shifted_amount_1 & 0xff) | input_2 & ~shifted_amount_2;\n    }\n  }\n  else {\n    if (0x33 < (int)shifted_amount_1) {\n      if (shifted_amount_1 != 0x400) {\n        return CONCAT44(input_2,input_1);\n      }\n      result = calculate_shifted_multiplies_0800016c();\n      return result;\n    }\n    shifted_amount_2 = shifted_amount_2 - 0x413;\n    shifted_amount_1 = 0xffffffff >> (shifted_amount_2 & 0xff);\n    if ((input_1 & shifted_amount_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    shifted_amount_1 = shifted_amount_1 >> 1;\n    shifted_multiplier_4 = input_1;\n    if ((input_1 & shifted_amount_1) != 0) {\n      shifted_multiplier_4 = 0x40000000 >> (shifted_amount_2 & 0xff) | input_1 & ~shifted_amount_1;\n    }\n  }\n  temp_var = ((int)input_2 >> 0x1f) * -8;\n  shifted_multiplier_1 = *(undefined4 *)(&DAT_08007430 + temp_var);\n  shifted_multiplier_3 = *(undefined4 *)(&DAT_08007434 + temp_var);\n  result = calculate_shifted_multiplies_0800016c(shifted_multiplier_4,shifted_multiplier_2,shifted_multiplier_1,shifted_multiplier_3,input_1,input_2,input_3);\n  result = calculate_integer_operations_08000168((int)result,(int)((ulonglong)result >> 0x20),shifted_multiplier_1,shifted_multiplier_3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_shifted_integer_operations_080070b0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "iVar1": "temp_var",
                "uVar2": "shifted_multiplier_1",
                "uVar3": "shifted_multiplier_2",
                "uVar4": "shifted_multiplier_3",
                "uVar5": "shifted_multiplier_4",
                "uVar6": "shifted_amount_1",
                "uVar7": "shifted_amount_2",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_shifted_value_with_conditions_080071c0",
            "code": "\nundefined8 calculate_shifted_value_with_conditions_080071c0(uint input_1,uint input_2,int condition,undefined4 constant)\n\n{\n  uint shifted_value;\n  undefined4 var1;\n  int sum;\n  undefined4 var2;\n  uint high_bits;\n  undefined8 result;\n  \n  result = CONCAT44(input_2,input_1);\n  shifted_value = (input_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return result;\n    }\n    result = calculate_shifted_value(input_1,input_2,0,0x43500000);\n    if (-0xc351 < condition) {\n      shifted_value = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    var1 = 0xc2f8f359;\n    var2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      result = calculate_shifted_multiplies(input_1,input_2,input_1,input_2,constant);\n      return result;\n    }\nLAB_08007210:\n    high_bits = (uint)((ulonglong)result >> 0x20);\n    var1 = (undefined4)result;\n    sum = shifted_value + condition;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(high_bits & 0x800fffff | sum * 0x100000,var1);\n      }\n      if (sum + 0x35 < 0 == is_carry_set(sum,0x35)) {\n        result = CONCAT44(high_bits & 0x800fffff | (sum + 0x36) * 0x100000,var1);\n        var1 = 0;\n        var2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (condition < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,var1,high_bits);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,var1,high_bits);\n    var1 = 0x8800759c;\n    var2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = calculate_shifted_value((int)result,(int)((ulonglong)result >> 0x20),var1,var2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_shifted_value_with_conditions_080071c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "condition",
                "param_4": "constant",
                "uVar1": "shifted_value",
                "uVar2": "var1",
                "iVar3": "sum",
                "uVar4": "var2",
                "uVar5": "high_bits",
                "uVar6": "result",
                "calculate_shifted_value_080004d0": "calculate_shifted_value",
                "calculate_shifted_multiplies_0800016c": "calculate_shifted_multiplies",
                "SCARRY4": "is_carry_set"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_080072ac",
            "code": "\nundefined4 get_data_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_pointer_080072b8",
            "code": "\nvoid updateDataPointer_080072b8(int increment)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + increment;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_pointer_080072b8",
                "param_1": "increment"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 156550,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}